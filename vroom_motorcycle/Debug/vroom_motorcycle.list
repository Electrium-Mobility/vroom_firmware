
vroom_motorcycle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002da80  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002368  0802dc40  0802dc40  0003dc40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000001a6  0802ffa8  0802ffa8  0003ffa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  08030150  08030150  00040150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 000ff848  08030168  08030168  00040168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000010  0812f9b0  0812f9b0  0013f9b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  0812f9c0  0812f9c0  00140118  2**0
                  CONTENTS
  8 .ARM          00000008  0812f9c0  0812f9c0  0013f9c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  0812f9c8  0812f9c8  00140118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  0812f9c8  0812f9c8  0013f9c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  0812f9dc  0812f9dc  0013f9dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         00000118  20000000  0812f9e4  00140000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .ccmram       00000000  10000000  10000000  00140118  2**0
                  CONTENTS
 14 .bss          0000ba68  20000118  20000118  00140118  2**2
                  ALLOC
 15 ._user_heap_stack 00000600  2000bb80  2000bb80  00140118  2**0
                  ALLOC
 16 .ARM.attributes 00000030  00000000  00000000  00140118  2**0
                  CONTENTS, READONLY
 17 .comment      000000c2  00000000  00000000  00140148  2**0
                  CONTENTS, READONLY
 18 .debug_info   000a16be  00000000  00000000  0014020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 00012675  00000000  00000000  001e18c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00004290  00000000  00000000  001f3f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 000031cf  00000000  00000000  001f81d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  0003d6d1  00000000  00000000  001fb39f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   00054c5a  00000000  00000000  00238a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    0013e7b4  00000000  00000000  0028d6ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_frame  00012298  00000000  00000000  003cbe80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 00000059  00000000  00000000  003de118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000118 	.word	0x20000118
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0802dc28 	.word	0x0802dc28

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000011c 	.word	0x2000011c
 80001fc:	0802dc28 	.word	0x0802dc28

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005aa:	b480      	push	{r7}
 80005ac:	b083      	sub	sp, #12
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
 80005b2:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
	...

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f001 fc9a 	bl	8001f0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f83a 	bl	8000650 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005dc:	f000 f8aa 	bl	8000734 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e0:	f000 fcca 	bl	8000f78 <MX_GPIO_Init>
  MX_CRC_Init();
 80005e4:	f000 f908 	bl	80007f8 <MX_CRC_Init>
  MX_DMA2D_Init();
 80005e8:	f000 f91a 	bl	8000820 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 80005ec:	f000 f94a 	bl	8000884 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 80005f0:	f000 fc72 	bl	8000ed8 <MX_FMC_Init>
  MX_I2C1_Init();
 80005f4:	f000 fa46 	bl	8000a84 <MX_I2C1_Init>
  MX_I2C2_Init();
 80005f8:	f000 fa72 	bl	8000ae0 <MX_I2C2_Init>
  MX_LTDC_Init();
 80005fc:	f000 fa9e 	bl	8000b3c <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000600:	f000 fb1a 	bl	8000c38 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8000604:	f000 fb44 	bl	8000c90 <MX_SAI1_Init>
  MX_SDIO_SD_Init();
 8000608:	f000 fba0 	bl	8000d4c <MX_SDIO_SD_Init>
  MX_TIM1_Init();
 800060c:	f000 fbc0 	bl	8000d90 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000610:	f000 fc0e 	bl	8000e30 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000614:	f000 fc36 	bl	8000e84 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000618:	f00b f878 	bl	800b70c <MX_FATFS_Init>
  MX_CAN2_Init();
 800061c:	f000 f8b6 	bl	800078c <MX_CAN2_Init>
  MX_TouchGFX_Init();
 8000620:	f011 faaf 	bl	8011b82 <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8000624:	f011 faa6 	bl	8011b74 <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000628:	f00d fe3c 	bl	800e2a4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800062c:	4a05      	ldr	r2, [pc, #20]	; (8000644 <main+0x74>)
 800062e:	2100      	movs	r1, #0
 8000630:	4805      	ldr	r0, [pc, #20]	; (8000648 <main+0x78>)
 8000632:	f00d feb8 	bl	800e3a6 <osThreadNew>
 8000636:	4603      	mov	r3, r0
 8000638:	4a04      	ldr	r2, [pc, #16]	; (800064c <main+0x7c>)
 800063a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800063c:	f00d fe78 	bl	800e330 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000640:	e7fe      	b.n	8000640 <main+0x70>
 8000642:	bf00      	nop
 8000644:	0802e610 	.word	0x0802e610
 8000648:	08001291 	.word	0x08001291
 800064c:	20000574 	.word	0x20000574

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	; 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	2234      	movs	r2, #52	; 0x34
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f02c fc67 	bl	802cf32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b2c      	ldr	r3, [pc, #176]	; (800072c <SystemClock_Config+0xdc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	4a2b      	ldr	r2, [pc, #172]	; (800072c <SystemClock_Config+0xdc>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
 8000684:	4b29      	ldr	r3, [pc, #164]	; (800072c <SystemClock_Config+0xdc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	2300      	movs	r3, #0
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	4b26      	ldr	r3, [pc, #152]	; (8000730 <SystemClock_Config+0xe0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a25      	ldr	r2, [pc, #148]	; (8000730 <SystemClock_Config+0xe0>)
 800069a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b23      	ldr	r3, [pc, #140]	; (8000730 <SystemClock_Config+0xe0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ac:	2301      	movs	r3, #1
 80006ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b6:	2302      	movs	r3, #2
 80006b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006c0:	2304      	movs	r3, #4
 80006c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006c4:	23b4      	movs	r3, #180	; 0xb4
 80006c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80006cc:	2306      	movs	r3, #6
 80006ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 80006d0:	2306      	movs	r3, #6
 80006d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d4:	f107 031c 	add.w	r3, r7, #28
 80006d8:	4618      	mov	r0, r3
 80006da:	f006 fbdf 	bl	8006e9c <HAL_RCC_OscConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006e4:	f000 fdf0 	bl	80012c8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006e8:	f005 fe36 	bl	8006358 <HAL_PWREx_EnableOverDrive>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006f2:	f000 fde9 	bl	80012c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	230f      	movs	r3, #15
 80006f8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	2302      	movs	r3, #2
 80006fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000702:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000706:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800070e:	f107 0308 	add.w	r3, r7, #8
 8000712:	2105      	movs	r1, #5
 8000714:	4618      	mov	r0, r3
 8000716:	f005 ff31 	bl	800657c <HAL_RCC_ClockConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000720:	f000 fdd2 	bl	80012c8 <Error_Handler>
  }
}
 8000724:	bf00      	nop
 8000726:	3750      	adds	r7, #80	; 0x50
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b090      	sub	sp, #64	; 0x40
 8000738:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	223c      	movs	r2, #60	; 0x3c
 800073e:	2100      	movs	r1, #0
 8000740:	4618      	mov	r0, r3
 8000742:	f02c fbf6 	bl	802cf32 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI_PLLSAI|RCC_PERIPHCLK_SDIO
 8000746:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 800074a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 144;
 800074c:	2390      	movs	r3, #144	; 0x90
 800074e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000750:	2302      	movs	r3, #2
 8000752:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000754:	2302      	movs	r3, #2
 8000756:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV6;
 8000758:	2306      	movs	r3, #6
 800075a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800075c:	2301      	movs	r3, #1
 800075e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8000760:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8000766:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800076a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800076c:	2300      	movs	r3, #0
 800076e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	4618      	mov	r0, r3
 8000774:	f006 f954 	bl	8006a20 <HAL_RCCEx_PeriphCLKConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 800077e:	f000 fda3 	bl	80012c8 <Error_Handler>
  }
}
 8000782:	bf00      	nop
 8000784:	3740      	adds	r7, #64	; 0x40
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000790:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <MX_CAN2_Init+0x64>)
 8000792:	4a18      	ldr	r2, [pc, #96]	; (80007f4 <MX_CAN2_Init+0x68>)
 8000794:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000796:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <MX_CAN2_Init+0x64>)
 8000798:	2210      	movs	r2, #16
 800079a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800079c:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_CAN2_Init+0x64>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007a2:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <MX_CAN2_Init+0x64>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_CAN2_Init+0x64>)
 80007aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007ae:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_CAN2_Init+0x64>)
 80007b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80007b6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80007b8:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <MX_CAN2_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_CAN2_Init+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <MX_CAN2_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_CAN2_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <MX_CAN2_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_CAN2_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <MX_CAN2_Init+0x64>)
 80007de:	f001 fbfb 	bl	8001fd8 <HAL_CAN_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80007e8:	f000 fd6e 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000134 	.word	0x20000134
 80007f4:	40006800 	.word	0x40006800

080007f8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_CRC_Init+0x20>)
 80007fe:	4a07      	ldr	r2, [pc, #28]	; (800081c <MX_CRC_Init+0x24>)
 8000800:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_CRC_Init+0x20>)
 8000804:	f001 fdc6 	bl	8002394 <HAL_CRC_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800080e:	f000 fd5b 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	2000015c 	.word	0x2000015c
 800081c:	40023000 	.word	0x40023000

08000820 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000824:	4b15      	ldr	r3, [pc, #84]	; (800087c <MX_DMA2D_Init+0x5c>)
 8000826:	4a16      	ldr	r2, [pc, #88]	; (8000880 <MX_DMA2D_Init+0x60>)
 8000828:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_DMA2D_Init+0x5c>)
 800082c:	2200      	movs	r2, #0
 800082e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_DMA2D_Init+0x5c>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_DMA2D_Init+0x5c>)
 8000838:	2200      	movs	r2, #0
 800083a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_DMA2D_Init+0x5c>)
 800083e:	2200      	movs	r2, #0
 8000840:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_DMA2D_Init+0x5c>)
 8000844:	2200      	movs	r2, #0
 8000846:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_DMA2D_Init+0x5c>)
 800084a:	2200      	movs	r2, #0
 800084c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_DMA2D_Init+0x5c>)
 8000850:	2200      	movs	r2, #0
 8000852:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000854:	4809      	ldr	r0, [pc, #36]	; (800087c <MX_DMA2D_Init+0x5c>)
 8000856:	f001 fe4b 	bl	80024f0 <HAL_DMA2D_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000860:	f000 fd32 	bl	80012c8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000864:	2101      	movs	r1, #1
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_DMA2D_Init+0x5c>)
 8000868:	f001 ff9c 	bl	80027a4 <HAL_DMA2D_ConfigLayer>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000872:	f000 fd29 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000164 	.word	0x20000164
 8000880:	4002b000 	.word	0x4002b000

08000884 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b0aa      	sub	sp, #168	; 0xa8
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 800088a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000896:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800089a:	2224      	movs	r2, #36	; 0x24
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f02c fb47 	bl	802cf32 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80008a4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
 80008b4:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 80008b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008ba:	2234      	movs	r2, #52	; 0x34
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f02c fb37 	bl	802cf32 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80008c4:	463b      	mov	r3, r7
 80008c6:	222c      	movs	r2, #44	; 0x2c
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f02c fb31 	bl	802cf32 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 80008d0:	4b6a      	ldr	r3, [pc, #424]	; (8000a7c <MX_DSIHOST_DSI_Init+0x1f8>)
 80008d2:	4a6b      	ldr	r2, [pc, #428]	; (8000a80 <MX_DSIHOST_DSI_Init+0x1fc>)
 80008d4:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80008d6:	4b69      	ldr	r3, [pc, #420]	; (8000a7c <MX_DSIHOST_DSI_Init+0x1f8>)
 80008d8:	2200      	movs	r2, #0
 80008da:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 80008dc:	4b67      	ldr	r3, [pc, #412]	; (8000a7c <MX_DSIHOST_DSI_Init+0x1f8>)
 80008de:	2204      	movs	r2, #4
 80008e0:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80008e2:	4b66      	ldr	r3, [pc, #408]	; (8000a7c <MX_DSIHOST_DSI_Init+0x1f8>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 125;
 80008e8:	237d      	movs	r3, #125	; 0x7d
 80008ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 80008ee:	2302      	movs	r3, #2
 80008f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80008fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008fe:	4619      	mov	r1, r3
 8000900:	485e      	ldr	r0, [pc, #376]	; (8000a7c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000902:	f001 ffe1 	bl	80028c8 <HAL_DSI_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 800090c:	f000 fcdc 	bl	80012c8 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000910:	2301      	movs	r3, #1
 8000912:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000942:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000946:	4619      	mov	r1, r3
 8000948:	484c      	ldr	r0, [pc, #304]	; (8000a7c <MX_DSIHOST_DSI_Init+0x1f8>)
 800094a:	f002 fc6d 	bl	8003228 <HAL_DSI_ConfigHostTimeouts>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 8000954:	f000 fcb8 	bl	80012c8 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8000958:	231c      	movs	r3, #28
 800095a:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 800095c:	2321      	movs	r3, #33	; 0x21
 800095e:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 8000960:	230f      	movs	r3, #15
 8000962:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 8000964:	2319      	movs	r3, #25
 8000966:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 10;
 800096c:	230a      	movs	r3, #10
 800096e:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000970:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000974:	4619      	mov	r1, r3
 8000976:	4841      	ldr	r0, [pc, #260]	; (8000a7c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000978:	f002 fbec 	bl	8003154 <HAL_DSI_ConfigPhyTimer>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 8000982:	f000 fca1 	bl	80012c8 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000986:	2104      	movs	r1, #4
 8000988:	483c      	ldr	r0, [pc, #240]	; (8000a7c <MX_DSIHOST_DSI_Init+0x1f8>)
 800098a:	f002 fbbb 	bl	8003104 <HAL_DSI_ConfigFlowControl>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 8000994:	f000 fc98 	bl	80012c8 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000998:	f242 7110 	movw	r1, #10000	; 0x2710
 800099c:	4837      	ldr	r0, [pc, #220]	; (8000a7c <MX_DSIHOST_DSI_Init+0x1f8>)
 800099e:	f002 fd09 	bl	80033b4 <HAL_DSI_SetLowPowerRXFilter>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 80009a8:	f000 fc8e 	bl	80012c8 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 80009ac:	2100      	movs	r1, #0
 80009ae:	4833      	ldr	r0, [pc, #204]	; (8000a7c <MX_DSIHOST_DSI_Init+0x1f8>)
 80009b0:	f002 f8a6 	bl	8002b00 <HAL_DSI_ConfigErrorMonitor>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 80009ba:	f000 fc85 	bl	80012c8 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 80009be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 80009c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009c8:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 80009ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ce:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 80009d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009d4:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 80009d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009da:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 80009dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e0:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 80009e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009e6:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 80009e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ec:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 80009ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 80009f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80009f8:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 80009fa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80009fe:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a04:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a0e:	4619      	mov	r1, r3
 8000a10:	481a      	ldr	r0, [pc, #104]	; (8000a7c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a12:	f002 fb19 	bl	8003048 <HAL_DSI_ConfigCommand>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_DSIHOST_DSI_Init+0x19c>
  {
    Error_Handler();
 8000a1c:	f000 fc54 	bl	80012c8 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 8000a24:	2305      	movs	r3, #5
 8000a26:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 200;
 8000a28:	23c8      	movs	r3, #200	; 0xc8
 8000a2a:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000a2c:	2310      	movs	r3, #16
 8000a2e:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8000a34:	2304      	movs	r3, #4
 8000a36:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8000a40:	2300      	movs	r3, #0
 8000a42:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8000a44:	2340      	movs	r3, #64	; 0x40
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	4619      	mov	r1, r3
 8000a50:	480a      	ldr	r0, [pc, #40]	; (8000a7c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a52:	f002 fa21 	bl	8002e98 <HAL_DSI_ConfigAdaptedCommandMode>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_DSIHOST_DSI_Init+0x1dc>
  {
    Error_Handler();
 8000a5c:	f000 fc34 	bl	80012c8 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000a60:	2100      	movs	r1, #0
 8000a62:	4806      	ldr	r0, [pc, #24]	; (8000a7c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a64:	f002 f9f0 	bl	8002e48 <HAL_DSI_SetGenericVCID>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_DSIHOST_DSI_Init+0x1ee>
  {
    Error_Handler();
 8000a6e:	f000 fc2b 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	37a8      	adds	r7, #168	; 0xa8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	200001a4 	.word	0x200001a4
 8000a80:	40016c00 	.word	0x40016c00

08000a84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <MX_I2C1_Init+0x50>)
 8000a8a:	4a13      	ldr	r2, [pc, #76]	; (8000ad8 <MX_I2C1_Init+0x54>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_I2C1_Init+0x50>)
 8000a90:	4a12      	ldr	r2, [pc, #72]	; (8000adc <MX_I2C1_Init+0x58>)
 8000a92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_I2C1_Init+0x50>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_I2C1_Init+0x50>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <MX_I2C1_Init+0x50>)
 8000aa2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aa6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aa8:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <MX_I2C1_Init+0x50>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_I2C1_Init+0x50>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ab4:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <MX_I2C1_Init+0x50>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_I2C1_Init+0x50>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ac0:	4804      	ldr	r0, [pc, #16]	; (8000ad4 <MX_I2C1_Init+0x50>)
 8000ac2:	f004 ff9d 	bl	8005a00 <HAL_I2C_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000acc:	f000 fbfc 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	200001c0 	.word	0x200001c0
 8000ad8:	40005400 	.word	0x40005400
 8000adc:	000186a0 	.word	0x000186a0

08000ae0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <MX_I2C2_Init+0x50>)
 8000ae6:	4a13      	ldr	r2, [pc, #76]	; (8000b34 <MX_I2C2_Init+0x54>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <MX_I2C2_Init+0x50>)
 8000aec:	4a12      	ldr	r2, [pc, #72]	; (8000b38 <MX_I2C2_Init+0x58>)
 8000aee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <MX_I2C2_Init+0x50>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000af6:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <MX_I2C2_Init+0x50>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <MX_I2C2_Init+0x50>)
 8000afe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b02:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b04:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <MX_I2C2_Init+0x50>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <MX_I2C2_Init+0x50>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <MX_I2C2_Init+0x50>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <MX_I2C2_Init+0x50>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b1c:	4804      	ldr	r0, [pc, #16]	; (8000b30 <MX_I2C2_Init+0x50>)
 8000b1e:	f004 ff6f 	bl	8005a00 <HAL_I2C_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b28:	f000 fbce 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000214 	.word	0x20000214
 8000b34:	40005800 	.word	0x40005800
 8000b38:	000186a0 	.word	0x000186a0

08000b3c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08e      	sub	sp, #56	; 0x38
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2234      	movs	r2, #52	; 0x34
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f02c f9f2 	bl	802cf32 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000b4e:	4b38      	ldr	r3, [pc, #224]	; (8000c30 <MX_LTDC_Init+0xf4>)
 8000b50:	4a38      	ldr	r2, [pc, #224]	; (8000c34 <MX_LTDC_Init+0xf8>)
 8000b52:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b54:	4b36      	ldr	r3, [pc, #216]	; (8000c30 <MX_LTDC_Init+0xf4>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b5a:	4b35      	ldr	r3, [pc, #212]	; (8000c30 <MX_LTDC_Init+0xf4>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b60:	4b33      	ldr	r3, [pc, #204]	; (8000c30 <MX_LTDC_Init+0xf4>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b66:	4b32      	ldr	r3, [pc, #200]	; (8000c30 <MX_LTDC_Init+0xf4>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8000b6c:	4b30      	ldr	r3, [pc, #192]	; (8000c30 <MX_LTDC_Init+0xf4>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8000b72:	4b2f      	ldr	r3, [pc, #188]	; (8000c30 <MX_LTDC_Init+0xf4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 8000b78:	4b2d      	ldr	r3, [pc, #180]	; (8000c30 <MX_LTDC_Init+0xf4>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 8000b7e:	4b2c      	ldr	r3, [pc, #176]	; (8000c30 <MX_LTDC_Init+0xf4>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 201;
 8000b84:	4b2a      	ldr	r3, [pc, #168]	; (8000c30 <MX_LTDC_Init+0xf4>)
 8000b86:	22c9      	movs	r2, #201	; 0xc9
 8000b88:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 8000b8a:	4b29      	ldr	r3, [pc, #164]	; (8000c30 <MX_LTDC_Init+0xf4>)
 8000b8c:	f240 12e1 	movw	r2, #481	; 0x1e1
 8000b90:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 202;
 8000b92:	4b27      	ldr	r3, [pc, #156]	; (8000c30 <MX_LTDC_Init+0xf4>)
 8000b94:	22ca      	movs	r2, #202	; 0xca
 8000b96:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 482;
 8000b98:	4b25      	ldr	r3, [pc, #148]	; (8000c30 <MX_LTDC_Init+0xf4>)
 8000b9a:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8000b9e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000ba0:	4b23      	ldr	r3, [pc, #140]	; (8000c30 <MX_LTDC_Init+0xf4>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000ba8:	4b21      	ldr	r3, [pc, #132]	; (8000c30 <MX_LTDC_Init+0xf4>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <MX_LTDC_Init+0xf4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000bb8:	481d      	ldr	r0, [pc, #116]	; (8000c30 <MX_LTDC_Init+0xf4>)
 8000bba:	f005 f865 	bl	8005c88 <HAL_LTDC_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 8000bc4:	f000 fb80 	bl	80012c8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 8000bcc:	23c8      	movs	r3, #200	; 0xc8
 8000bce:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000bd4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000bd8:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000bde:	23ff      	movs	r3, #255	; 0xff
 8000be0:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000be6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bea:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000bec:	2307      	movs	r3, #7
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000bf0:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 200;
 8000bf6:	23c8      	movs	r3, #200	; 0xc8
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8000bfa:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000bfe:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	2200      	movs	r2, #0
 8000c16:	4619      	mov	r1, r3
 8000c18:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_LTDC_Init+0xf4>)
 8000c1a:	f005 f9c7 	bl	8005fac <HAL_LTDC_ConfigLayer>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8000c24:	f000 fb50 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000c28:	bf00      	nop
 8000c2a:	3738      	adds	r7, #56	; 0x38
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000268 	.word	0x20000268
 8000c34:	40016800 	.word	0x40016800

08000c38 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <MX_QUADSPI_Init+0x50>)
 8000c3e:	4a13      	ldr	r2, [pc, #76]	; (8000c8c <MX_QUADSPI_Init+0x54>)
 8000c40:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <MX_QUADSPI_Init+0x50>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <MX_QUADSPI_Init+0x50>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <MX_QUADSPI_Init+0x50>)
 8000c50:	2210      	movs	r2, #16
 8000c52:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <MX_QUADSPI_Init+0x50>)
 8000c56:	2218      	movs	r2, #24
 8000c58:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <MX_QUADSPI_Init+0x50>)
 8000c5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c60:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <MX_QUADSPI_Init+0x50>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000c68:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <MX_QUADSPI_Init+0x50>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <MX_QUADSPI_Init+0x50>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c74:	4804      	ldr	r0, [pc, #16]	; (8000c88 <MX_QUADSPI_Init+0x50>)
 8000c76:	f005 fbbf 	bl	80063f8 <HAL_QSPI_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000c80:	f000 fb22 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000310 	.word	0x20000310
 8000c8c:	a0001000 	.word	0xa0001000

08000c90 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000c94:	4b2a      	ldr	r3, [pc, #168]	; (8000d40 <MX_SAI1_Init+0xb0>)
 8000c96:	4a2b      	ldr	r2, [pc, #172]	; (8000d44 <MX_SAI1_Init+0xb4>)
 8000c98:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000c9a:	4b29      	ldr	r3, [pc, #164]	; (8000d40 <MX_SAI1_Init+0xb0>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000ca0:	4b27      	ldr	r3, [pc, #156]	; (8000d40 <MX_SAI1_Init+0xb0>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000ca6:	4b26      	ldr	r3, [pc, #152]	; (8000d40 <MX_SAI1_Init+0xb0>)
 8000ca8:	2240      	movs	r2, #64	; 0x40
 8000caa:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000cac:	4b24      	ldr	r3, [pc, #144]	; (8000d40 <MX_SAI1_Init+0xb0>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000cb2:	4b23      	ldr	r3, [pc, #140]	; (8000d40 <MX_SAI1_Init+0xb0>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000cb8:	4b21      	ldr	r3, [pc, #132]	; (8000d40 <MX_SAI1_Init+0xb0>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000cbe:	4b20      	ldr	r3, [pc, #128]	; (8000d40 <MX_SAI1_Init+0xb0>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000cc4:	4b1e      	ldr	r3, [pc, #120]	; (8000d40 <MX_SAI1_Init+0xb0>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000cca:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <MX_SAI1_Init+0xb0>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.ClockSource = SAI_CLKSOURCE_PLLSAI;
 8000cd0:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <MX_SAI1_Init+0xb0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <MX_SAI1_Init+0xb0>)
 8000cd8:	4a1b      	ldr	r2, [pc, #108]	; (8000d48 <MX_SAI1_Init+0xb8>)
 8000cda:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000cdc:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <MX_SAI1_Init+0xb0>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000ce2:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <MX_SAI1_Init+0xb0>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ce8:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <MX_SAI1_Init+0xb0>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000cee:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <MX_SAI1_Init+0xb0>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <MX_SAI1_Init+0xb0>)
 8000cf6:	2208      	movs	r2, #8
 8000cf8:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000cfa:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <MX_SAI1_Init+0xb0>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000d00:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <MX_SAI1_Init+0xb0>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <MX_SAI1_Init+0xb0>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <MX_SAI1_Init+0xb0>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <MX_SAI1_Init+0xb0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000d18:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <MX_SAI1_Init+0xb0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000d1e:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <MX_SAI1_Init+0xb0>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <MX_SAI1_Init+0xb0>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <MX_SAI1_Init+0xb0>)
 8000d2c:	f006 fb3a 	bl	80073a4 <HAL_SAI_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 8000d36:	f000 fac7 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	2000035c 	.word	0x2000035c
 8000d44:	40015804 	.word	0x40015804
 8000d48:	0002ee00 	.word	0x0002ee00

08000d4c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000d50:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <MX_SDIO_SD_Init+0x3c>)
 8000d52:	4a0e      	ldr	r2, [pc, #56]	; (8000d8c <MX_SDIO_SD_Init+0x40>)
 8000d54:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <MX_SDIO_SD_Init+0x3c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <MX_SDIO_SD_Init+0x3c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <MX_SDIO_SD_Init+0x3c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8000d68:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <MX_SDIO_SD_Init+0x3c>)
 8000d6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d6e:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000d70:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <MX_SDIO_SD_Init+0x3c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000d76:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <MX_SDIO_SD_Init+0x3c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	200003e4 	.word	0x200003e4
 8000d8c:	40012c00 	.word	0x40012c00

08000d90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d96:	f107 0308 	add.w	r3, r7, #8
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da4:	463b      	mov	r3, r7
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dac:	4b1e      	ldr	r3, [pc, #120]	; (8000e28 <MX_TIM1_Init+0x98>)
 8000dae:	4a1f      	ldr	r2, [pc, #124]	; (8000e2c <MX_TIM1_Init+0x9c>)
 8000db0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000db2:	4b1d      	ldr	r3, [pc, #116]	; (8000e28 <MX_TIM1_Init+0x98>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db8:	4b1b      	ldr	r3, [pc, #108]	; (8000e28 <MX_TIM1_Init+0x98>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <MX_TIM1_Init+0x98>)
 8000dc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dc4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc6:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <MX_TIM1_Init+0x98>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dcc:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <MX_TIM1_Init+0x98>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <MX_TIM1_Init+0x98>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dd8:	4813      	ldr	r0, [pc, #76]	; (8000e28 <MX_TIM1_Init+0x98>)
 8000dda:	f007 fdd4 	bl	8008986 <HAL_TIM_Base_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000de4:	f000 fa70 	bl	80012c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dee:	f107 0308 	add.w	r3, r7, #8
 8000df2:	4619      	mov	r1, r3
 8000df4:	480c      	ldr	r0, [pc, #48]	; (8000e28 <MX_TIM1_Init+0x98>)
 8000df6:	f007 ff75 	bl	8008ce4 <HAL_TIM_ConfigClockSource>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000e00:	f000 fa62 	bl	80012c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e04:	2300      	movs	r3, #0
 8000e06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e0c:	463b      	mov	r3, r7
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4805      	ldr	r0, [pc, #20]	; (8000e28 <MX_TIM1_Init+0x98>)
 8000e12:	f008 f99d 	bl	8009150 <HAL_TIMEx_MasterConfigSynchronization>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000e1c:	f000 fa54 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e20:	bf00      	nop
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000468 	.word	0x20000468
 8000e2c:	40010000 	.word	0x40010000

08000e30 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <MX_USART3_UART_Init+0x4c>)
 8000e36:	4a12      	ldr	r2, [pc, #72]	; (8000e80 <MX_USART3_UART_Init+0x50>)
 8000e38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <MX_USART3_UART_Init+0x4c>)
 8000e3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <MX_USART3_UART_Init+0x4c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <MX_USART3_UART_Init+0x4c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <MX_USART3_UART_Init+0x4c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e54:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <MX_USART3_UART_Init+0x4c>)
 8000e56:	220c      	movs	r2, #12
 8000e58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5a:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <MX_USART3_UART_Init+0x4c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <MX_USART3_UART_Init+0x4c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <MX_USART3_UART_Init+0x4c>)
 8000e68:	f008 fa02 	bl	8009270 <HAL_UART_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e72:	f000 fa29 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200004b0 	.word	0x200004b0
 8000e80:	40004800 	.word	0x40004800

08000e84 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <MX_USART6_UART_Init+0x4c>)
 8000e8a:	4a12      	ldr	r2, [pc, #72]	; (8000ed4 <MX_USART6_UART_Init+0x50>)
 8000e8c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000e8e:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <MX_USART6_UART_Init+0x4c>)
 8000e90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e94:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <MX_USART6_UART_Init+0x4c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <MX_USART6_UART_Init+0x4c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <MX_USART6_UART_Init+0x4c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ea8:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <MX_USART6_UART_Init+0x4c>)
 8000eaa:	220c      	movs	r2, #12
 8000eac:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eae:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <MX_USART6_UART_Init+0x4c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <MX_USART6_UART_Init+0x4c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000eba:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <MX_USART6_UART_Init+0x4c>)
 8000ebc:	f008 f9d8 	bl	8009270 <HAL_UART_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000ec6:	f000 f9ff 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	200004f8 	.word	0x200004f8
 8000ed4:	40011400 	.word	0x40011400

08000ed8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
 8000eec:	615a      	str	r2, [r3, #20]
 8000eee:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000ef0:	4b1f      	ldr	r3, [pc, #124]	; (8000f70 <MX_FMC_Init+0x98>)
 8000ef2:	4a20      	ldr	r2, [pc, #128]	; (8000f74 <MX_FMC_Init+0x9c>)
 8000ef4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000ef6:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <MX_FMC_Init+0x98>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000efc:	4b1c      	ldr	r3, [pc, #112]	; (8000f70 <MX_FMC_Init+0x98>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000f02:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <MX_FMC_Init+0x98>)
 8000f04:	2204      	movs	r2, #4
 8000f06:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000f08:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <MX_FMC_Init+0x98>)
 8000f0a:	2220      	movs	r2, #32
 8000f0c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000f0e:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <MX_FMC_Init+0x98>)
 8000f10:	2240      	movs	r2, #64	; 0x40
 8000f12:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000f14:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <MX_FMC_Init+0x98>)
 8000f16:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000f1a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <MX_FMC_Init+0x98>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000f22:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <MX_FMC_Init+0x98>)
 8000f24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f28:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <MX_FMC_Init+0x98>)
 8000f2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f30:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000f32:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <MX_FMC_Init+0x98>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000f3c:	2307      	movs	r3, #7
 8000f3e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000f40:	2304      	movs	r3, #4
 8000f42:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000f44:	2307      	movs	r3, #7
 8000f46:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000f50:	2302      	movs	r3, #2
 8000f52:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	4619      	mov	r1, r3
 8000f58:	4805      	ldr	r0, [pc, #20]	; (8000f70 <MX_FMC_Init+0x98>)
 8000f5a:	f007 fce0 	bl	800891e <HAL_SDRAM_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000f64:	f000 f9b0 	bl	80012c8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000f68:	bf00      	nop
 8000f6a:	3720      	adds	r7, #32
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000540 	.word	0x20000540
 8000f74:	a0000140 	.word	0xa0000140

08000f78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b090      	sub	sp, #64	; 0x40
 8000f7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
 8000f8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f92:	4bae      	ldr	r3, [pc, #696]	; (800124c <MX_GPIO_Init+0x2d4>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4aad      	ldr	r2, [pc, #692]	; (800124c <MX_GPIO_Init+0x2d4>)
 8000f98:	f043 0310 	orr.w	r3, r3, #16
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4bab      	ldr	r3, [pc, #684]	; (800124c <MX_GPIO_Init+0x2d4>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0310 	and.w	r3, r3, #16
 8000fa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
 8000fae:	4ba7      	ldr	r3, [pc, #668]	; (800124c <MX_GPIO_Init+0x2d4>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4aa6      	ldr	r2, [pc, #664]	; (800124c <MX_GPIO_Init+0x2d4>)
 8000fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4ba4      	ldr	r3, [pc, #656]	; (800124c <MX_GPIO_Init+0x2d4>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
 8000fca:	4ba0      	ldr	r3, [pc, #640]	; (800124c <MX_GPIO_Init+0x2d4>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a9f      	ldr	r2, [pc, #636]	; (800124c <MX_GPIO_Init+0x2d4>)
 8000fd0:	f043 0302 	orr.w	r3, r3, #2
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b9d      	ldr	r3, [pc, #628]	; (800124c <MX_GPIO_Init+0x2d4>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	623b      	str	r3, [r7, #32]
 8000fe0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
 8000fe6:	4b99      	ldr	r3, [pc, #612]	; (800124c <MX_GPIO_Init+0x2d4>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a98      	ldr	r2, [pc, #608]	; (800124c <MX_GPIO_Init+0x2d4>)
 8000fec:	f043 0304 	orr.w	r3, r3, #4
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b96      	ldr	r3, [pc, #600]	; (800124c <MX_GPIO_Init+0x2d4>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0304 	and.w	r3, r3, #4
 8000ffa:	61fb      	str	r3, [r7, #28]
 8000ffc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
 8001002:	4b92      	ldr	r3, [pc, #584]	; (800124c <MX_GPIO_Init+0x2d4>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a91      	ldr	r2, [pc, #580]	; (800124c <MX_GPIO_Init+0x2d4>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b8f      	ldr	r3, [pc, #572]	; (800124c <MX_GPIO_Init+0x2d4>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	61bb      	str	r3, [r7, #24]
 8001018:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
 800101e:	4b8b      	ldr	r3, [pc, #556]	; (800124c <MX_GPIO_Init+0x2d4>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a8a      	ldr	r2, [pc, #552]	; (800124c <MX_GPIO_Init+0x2d4>)
 8001024:	f043 0308 	orr.w	r3, r3, #8
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b88      	ldr	r3, [pc, #544]	; (800124c <MX_GPIO_Init+0x2d4>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0308 	and.w	r3, r3, #8
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	4b84      	ldr	r3, [pc, #528]	; (800124c <MX_GPIO_Init+0x2d4>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a83      	ldr	r2, [pc, #524]	; (800124c <MX_GPIO_Init+0x2d4>)
 8001040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b81      	ldr	r3, [pc, #516]	; (800124c <MX_GPIO_Init+0x2d4>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b7d      	ldr	r3, [pc, #500]	; (800124c <MX_GPIO_Init+0x2d4>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a7c      	ldr	r2, [pc, #496]	; (800124c <MX_GPIO_Init+0x2d4>)
 800105c:	f043 0320 	orr.w	r3, r3, #32
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b7a      	ldr	r3, [pc, #488]	; (800124c <MX_GPIO_Init+0x2d4>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0320 	and.w	r3, r3, #32
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	4b76      	ldr	r3, [pc, #472]	; (800124c <MX_GPIO_Init+0x2d4>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a75      	ldr	r2, [pc, #468]	; (800124c <MX_GPIO_Init+0x2d4>)
 8001078:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b73      	ldr	r3, [pc, #460]	; (800124c <MX_GPIO_Init+0x2d4>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	4b6f      	ldr	r3, [pc, #444]	; (800124c <MX_GPIO_Init+0x2d4>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a6e      	ldr	r2, [pc, #440]	; (800124c <MX_GPIO_Init+0x2d4>)
 8001094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b6c      	ldr	r3, [pc, #432]	; (800124c <MX_GPIO_Init+0x2d4>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	603b      	str	r3, [r7, #0]
 80010aa:	4b68      	ldr	r3, [pc, #416]	; (800124c <MX_GPIO_Init+0x2d4>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a67      	ldr	r2, [pc, #412]	; (800124c <MX_GPIO_Init+0x2d4>)
 80010b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b65      	ldr	r3, [pc, #404]	; (800124c <MX_GPIO_Init+0x2d4>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010be:	603b      	str	r3, [r7, #0]
 80010c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	210c      	movs	r1, #12
 80010c6:	4862      	ldr	r0, [pc, #392]	; (8001250 <MX_GPIO_Init+0x2d8>)
 80010c8:	f002 fb66 	bl	8003798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2130      	movs	r1, #48	; 0x30
 80010d0:	4860      	ldr	r0, [pc, #384]	; (8001254 <MX_GPIO_Init+0x2dc>)
 80010d2:	f002 fb61 	bl	8003798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2108      	movs	r1, #8
 80010da:	485f      	ldr	r0, [pc, #380]	; (8001258 <MX_GPIO_Init+0x2e0>)
 80010dc:	f002 fb5c 	bl	8003798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2140      	movs	r1, #64	; 0x40
 80010e4:	485d      	ldr	r0, [pc, #372]	; (800125c <MX_GPIO_Init+0x2e4>)
 80010e6:	f002 fb57 	bl	8003798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2105      	movs	r1, #5
 80010ee:	485c      	ldr	r0, [pc, #368]	; (8001260 <MX_GPIO_Init+0x2e8>)
 80010f0:	f002 fb52 	bl	8003798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2180      	movs	r1, #128	; 0x80
 80010f8:	485a      	ldr	r0, [pc, #360]	; (8001264 <MX_GPIO_Init+0x2ec>)
 80010fa:	f002 fb4d 	bl	8003798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	2108      	movs	r1, #8
 8001102:	4859      	ldr	r0, [pc, #356]	; (8001268 <MX_GPIO_Init+0x2f0>)
 8001104:	f002 fb48 	bl	8003798 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPKR_HP_Pin AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 8001108:	230c      	movs	r3, #12
 800110a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110c:	2301      	movs	r3, #1
 800110e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2300      	movs	r3, #0
 8001116:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001118:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800111c:	4619      	mov	r1, r3
 800111e:	484c      	ldr	r0, [pc, #304]	; (8001250 <MX_GPIO_Init+0x2d8>)
 8001120:	f002 f976 	bl	8003410 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_CK_Pin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 8001124:	2308      	movs	r3, #8
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001134:	2306      	movs	r3, #6
 8001136:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 8001138:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800113c:	4619      	mov	r1, r3
 800113e:	4848      	ldr	r0, [pc, #288]	; (8001260 <MX_GPIO_Init+0x2e8>)
 8001140:	f002 f966 	bl	8003410 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS1_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 8001144:	2380      	movs	r3, #128	; 0x80
 8001146:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001148:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800114c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001152:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001156:	4619      	mov	r1, r3
 8001158:	4841      	ldr	r0, [pc, #260]	; (8001260 <MX_GPIO_Init+0x2e8>)
 800115a:	f002 f959 	bl	8003410 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 800115e:	2330      	movs	r3, #48	; 0x30
 8001160:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001162:	2311      	movs	r3, #17
 8001164:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116a:	2300      	movs	r3, #0
 800116c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800116e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001172:	4619      	mov	r1, r3
 8001174:	4837      	ldr	r0, [pc, #220]	; (8001254 <MX_GPIO_Init+0x2dc>)
 8001176:	f002 f94b 	bl	8003410 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 800117a:	2308      	movs	r3, #8
 800117c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800117e:	2311      	movs	r3, #17
 8001180:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2300      	movs	r3, #0
 8001188:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 800118a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800118e:	4619      	mov	r1, r3
 8001190:	4831      	ldr	r0, [pc, #196]	; (8001258 <MX_GPIO_Init+0x2e0>)
 8001192:	f002 f93d 	bl	8003410 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001196:	2340      	movs	r3, #64	; 0x40
 8001198:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800119a:	2311      	movs	r3, #17
 800119c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2300      	movs	r3, #0
 80011a4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80011a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011aa:	4619      	mov	r1, r3
 80011ac:	482b      	ldr	r0, [pc, #172]	; (800125c <MX_GPIO_Init+0x2e4>)
 80011ae:	f002 f92f 	bl	8003410 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS1_PowerSwitchOn_Pin EXT_RESET_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 80011b2:	2305      	movs	r3, #5
 80011b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b6:	2301      	movs	r3, #1
 80011b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2300      	movs	r3, #0
 80011c0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011c6:	4619      	mov	r1, r3
 80011c8:	4825      	ldr	r0, [pc, #148]	; (8001260 <MX_GPIO_Init+0x2e8>)
 80011ca:	f002 f921 	bl	8003410 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CK_Pin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 80011ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011e0:	2302      	movs	r3, #2
 80011e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 80011e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011e8:	4619      	mov	r1, r3
 80011ea:	481a      	ldr	r0, [pc, #104]	; (8001254 <MX_GPIO_Init+0x2dc>)
 80011ec:	f002 f910 	bl	8003410 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80011f0:	2304      	movs	r3, #4
 80011f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f4:	2300      	movs	r3, #0
 80011f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80011fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001200:	4619      	mov	r1, r3
 8001202:	4816      	ldr	r0, [pc, #88]	; (800125c <MX_GPIO_Init+0x2e4>)
 8001204:	f002 f904 	bl	8003410 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001208:	2320      	movs	r3, #32
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800120c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001210:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001216:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800121a:	4619      	mov	r1, r3
 800121c:	4813      	ldr	r0, [pc, #76]	; (800126c <MX_GPIO_Init+0x2f4>)
 800121e:	f002 f8f7 	bl	8003410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001222:	2380      	movs	r3, #128	; 0x80
 8001224:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001226:	2301      	movs	r3, #1
 8001228:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001232:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001236:	4619      	mov	r1, r3
 8001238:	480a      	ldr	r0, [pc, #40]	; (8001264 <MX_GPIO_Init+0x2ec>)
 800123a:	f002 f8e9 	bl	8003410 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800123e:	2308      	movs	r3, #8
 8001240:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001242:	2301      	movs	r3, #1
 8001244:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	e012      	b.n	8001270 <MX_GPIO_Init+0x2f8>
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800
 8001250:	40021000 	.word	0x40021000
 8001254:	40020c00 	.word	0x40020c00
 8001258:	40022800 	.word	0x40022800
 800125c:	40021800 	.word	0x40021800
 8001260:	40020400 	.word	0x40020400
 8001264:	40021c00 	.word	0x40021c00
 8001268:	40020000 	.word	0x40020000
 800126c:	40022400 	.word	0x40022400
 8001270:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001272:	2300      	movs	r3, #0
 8001274:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001276:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800127a:	4619      	mov	r1, r3
 800127c:	4803      	ldr	r0, [pc, #12]	; (800128c <MX_GPIO_Init+0x314>)
 800127e:	f002 f8c7 	bl	8003410 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001282:	bf00      	nop
 8001284:	3740      	adds	r7, #64	; 0x40
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40020000 	.word	0x40020000

08001290 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001298:	f014 fc28 	bl	8015aec <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800129c:	2001      	movs	r0, #1
 800129e:	f00d f914 	bl	800e4ca <osDelay>
 80012a2:	e7fb      	b.n	800129c <StartDefaultTask+0xc>

080012a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d101      	bne.n	80012ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012b6:	f000 fe4b 	bl	8001f50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40001000 	.word	0x40001000

080012c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012cc:	b672      	cpsid	i
}
 80012ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <Error_Handler+0x8>
	...

080012d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	4b12      	ldr	r3, [pc, #72]	; (8001328 <HAL_MspInit+0x54>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	4a11      	ldr	r2, [pc, #68]	; (8001328 <HAL_MspInit+0x54>)
 80012e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ea:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <HAL_MspInit+0x54>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	603b      	str	r3, [r7, #0]
 80012fa:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <HAL_MspInit+0x54>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <HAL_MspInit+0x54>)
 8001300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001304:	6413      	str	r3, [r2, #64]	; 0x40
 8001306:	4b08      	ldr	r3, [pc, #32]	; (8001328 <HAL_MspInit+0x54>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	210f      	movs	r1, #15
 8001316:	f06f 0001 	mvn.w	r0, #1
 800131a:	f001 f811 	bl	8002340 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40023800 	.word	0x40023800

0800132c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08a      	sub	sp, #40	; 0x28
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a20      	ldr	r2, [pc, #128]	; (80013cc <HAL_CAN_MspInit+0xa0>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d13a      	bne.n	80013c4 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <HAL_CAN_MspInit+0xa4>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	4a1e      	ldr	r2, [pc, #120]	; (80013d0 <HAL_CAN_MspInit+0xa4>)
 8001358:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800135c:	6413      	str	r3, [r2, #64]	; 0x40
 800135e:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <HAL_CAN_MspInit+0xa4>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <HAL_CAN_MspInit+0xa4>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	4a17      	ldr	r2, [pc, #92]	; (80013d0 <HAL_CAN_MspInit+0xa4>)
 8001374:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001378:	6413      	str	r3, [r2, #64]	; 0x40
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <HAL_CAN_MspInit+0xa4>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <HAL_CAN_MspInit+0xa4>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a10      	ldr	r2, [pc, #64]	; (80013d0 <HAL_CAN_MspInit+0xa4>)
 8001390:	f043 0302 	orr.w	r3, r3, #2
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <HAL_CAN_MspInit+0xa4>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_13;
 80013a2:	f242 0320 	movw	r3, #8224	; 0x2020
 80013a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b0:	2303      	movs	r3, #3
 80013b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80013b4:	2309      	movs	r3, #9
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4619      	mov	r1, r3
 80013be:	4805      	ldr	r0, [pc, #20]	; (80013d4 <HAL_CAN_MspInit+0xa8>)
 80013c0:	f002 f826 	bl	8003410 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80013c4:	bf00      	nop
 80013c6:	3728      	adds	r7, #40	; 0x28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40006800 	.word	0x40006800
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40020400 	.word	0x40020400

080013d8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a0b      	ldr	r2, [pc, #44]	; (8001414 <HAL_CRC_MspInit+0x3c>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d10d      	bne.n	8001406 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <HAL_CRC_MspInit+0x40>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a09      	ldr	r2, [pc, #36]	; (8001418 <HAL_CRC_MspInit+0x40>)
 80013f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b07      	ldr	r3, [pc, #28]	; (8001418 <HAL_CRC_MspInit+0x40>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001406:	bf00      	nop
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	40023000 	.word	0x40023000
 8001418:	40023800 	.word	0x40023800

0800141c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a0e      	ldr	r2, [pc, #56]	; (8001464 <HAL_DMA2D_MspInit+0x48>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d115      	bne.n	800145a <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <HAL_DMA2D_MspInit+0x4c>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a0c      	ldr	r2, [pc, #48]	; (8001468 <HAL_DMA2D_MspInit+0x4c>)
 8001438:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <HAL_DMA2D_MspInit+0x4c>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2105      	movs	r1, #5
 800144e:	205a      	movs	r0, #90	; 0x5a
 8001450:	f000 ff76 	bl	8002340 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001454:	205a      	movs	r0, #90	; 0x5a
 8001456:	f000 ff8f 	bl	8002378 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800145a:	bf00      	nop
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	4002b000 	.word	0x4002b000
 8001468:	40023800 	.word	0x40023800

0800146c <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a1d      	ldr	r2, [pc, #116]	; (8001500 <HAL_DSI_MspInit+0x94>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d133      	bne.n	80014f6 <HAL_DSI_MspInit+0x8a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <HAL_DSI_MspInit+0x98>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	4a1b      	ldr	r2, [pc, #108]	; (8001504 <HAL_DSI_MspInit+0x98>)
 8001498:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800149c:	6453      	str	r3, [r2, #68]	; 0x44
 800149e:	4b19      	ldr	r3, [pc, #100]	; (8001504 <HAL_DSI_MspInit+0x98>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	4b15      	ldr	r3, [pc, #84]	; (8001504 <HAL_DSI_MspInit+0x98>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a14      	ldr	r2, [pc, #80]	; (8001504 <HAL_DSI_MspInit+0x98>)
 80014b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b12      	ldr	r3, [pc, #72]	; (8001504 <HAL_DSI_MspInit+0x98>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 80014c6:	2304      	movs	r3, #4
 80014c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	2302      	movs	r3, #2
 80014cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d2:	2303      	movs	r3, #3
 80014d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80014d6:	230d      	movs	r3, #13
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4619      	mov	r1, r3
 80014e0:	4809      	ldr	r0, [pc, #36]	; (8001508 <HAL_DSI_MspInit+0x9c>)
 80014e2:	f001 ff95 	bl	8003410 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2105      	movs	r1, #5
 80014ea:	205c      	movs	r0, #92	; 0x5c
 80014ec:	f000 ff28 	bl	8002340 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 80014f0:	205c      	movs	r0, #92	; 0x5c
 80014f2:	f000 ff41 	bl	8002378 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 80014f6:	bf00      	nop
 80014f8:	3728      	adds	r7, #40	; 0x28
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40016c00 	.word	0x40016c00
 8001504:	40023800 	.word	0x40023800
 8001508:	40022400 	.word	0x40022400

0800150c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08c      	sub	sp, #48	; 0x30
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a32      	ldr	r2, [pc, #200]	; (80015f4 <HAL_I2C_MspInit+0xe8>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d12d      	bne.n	800158a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]
 8001532:	4b31      	ldr	r3, [pc, #196]	; (80015f8 <HAL_I2C_MspInit+0xec>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a30      	ldr	r2, [pc, #192]	; (80015f8 <HAL_I2C_MspInit+0xec>)
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b2e      	ldr	r3, [pc, #184]	; (80015f8 <HAL_I2C_MspInit+0xec>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	61bb      	str	r3, [r7, #24]
 8001548:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800154a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800154e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001550:	2312      	movs	r3, #18
 8001552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001554:	2301      	movs	r3, #1
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001558:	2303      	movs	r3, #3
 800155a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800155c:	2304      	movs	r3, #4
 800155e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001560:	f107 031c 	add.w	r3, r7, #28
 8001564:	4619      	mov	r1, r3
 8001566:	4825      	ldr	r0, [pc, #148]	; (80015fc <HAL_I2C_MspInit+0xf0>)
 8001568:	f001 ff52 	bl	8003410 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <HAL_I2C_MspInit+0xec>)
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	4a20      	ldr	r2, [pc, #128]	; (80015f8 <HAL_I2C_MspInit+0xec>)
 8001576:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800157a:	6413      	str	r3, [r2, #64]	; 0x40
 800157c:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <HAL_I2C_MspInit+0xec>)
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001588:	e030      	b.n	80015ec <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a1c      	ldr	r2, [pc, #112]	; (8001600 <HAL_I2C_MspInit+0xf4>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d12b      	bne.n	80015ec <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001594:	2300      	movs	r3, #0
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <HAL_I2C_MspInit+0xec>)
 800159a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159c:	4a16      	ldr	r2, [pc, #88]	; (80015f8 <HAL_I2C_MspInit+0xec>)
 800159e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015a2:	6313      	str	r3, [r2, #48]	; 0x30
 80015a4:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <HAL_I2C_MspInit+0xec>)
 80015a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 80015b0:	2330      	movs	r3, #48	; 0x30
 80015b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015b4:	2312      	movs	r3, #18
 80015b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015b8:	2301      	movs	r3, #1
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015bc:	2303      	movs	r3, #3
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015c0:	2304      	movs	r3, #4
 80015c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015c4:	f107 031c 	add.w	r3, r7, #28
 80015c8:	4619      	mov	r1, r3
 80015ca:	480e      	ldr	r0, [pc, #56]	; (8001604 <HAL_I2C_MspInit+0xf8>)
 80015cc:	f001 ff20 	bl	8003410 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <HAL_I2C_MspInit+0xec>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <HAL_I2C_MspInit+0xec>)
 80015da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015de:	6413      	str	r3, [r2, #64]	; 0x40
 80015e0:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <HAL_I2C_MspInit+0xec>)
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	68fb      	ldr	r3, [r7, #12]
}
 80015ec:	bf00      	nop
 80015ee:	3730      	adds	r7, #48	; 0x30
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40005400 	.word	0x40005400
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40020400 	.word	0x40020400
 8001600:	40005800 	.word	0x40005800
 8001604:	40021c00 	.word	0x40021c00

08001608 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a0e      	ldr	r2, [pc, #56]	; (8001650 <HAL_LTDC_MspInit+0x48>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d115      	bne.n	8001646 <HAL_LTDC_MspInit+0x3e>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <HAL_LTDC_MspInit+0x4c>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	4a0c      	ldr	r2, [pc, #48]	; (8001654 <HAL_LTDC_MspInit+0x4c>)
 8001624:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001628:	6453      	str	r3, [r2, #68]	; 0x44
 800162a:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <HAL_LTDC_MspInit+0x4c>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	2105      	movs	r1, #5
 800163a:	2058      	movs	r0, #88	; 0x58
 800163c:	f000 fe80 	bl	8002340 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001640:	2058      	movs	r0, #88	; 0x58
 8001642:	f000 fe99 	bl	8002378 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40016800 	.word	0x40016800
 8001654:	40023800 	.word	0x40023800

08001658 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	; 0x28
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a31      	ldr	r2, [pc, #196]	; (800173c <HAL_QSPI_MspInit+0xe4>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d15b      	bne.n	8001732 <HAL_QSPI_MspInit+0xda>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	4b30      	ldr	r3, [pc, #192]	; (8001740 <HAL_QSPI_MspInit+0xe8>)
 8001680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001682:	4a2f      	ldr	r2, [pc, #188]	; (8001740 <HAL_QSPI_MspInit+0xe8>)
 8001684:	f043 0302 	orr.w	r3, r3, #2
 8001688:	6393      	str	r3, [r2, #56]	; 0x38
 800168a:	4b2d      	ldr	r3, [pc, #180]	; (8001740 <HAL_QSPI_MspInit+0xe8>)
 800168c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	4b29      	ldr	r3, [pc, #164]	; (8001740 <HAL_QSPI_MspInit+0xe8>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a28      	ldr	r2, [pc, #160]	; (8001740 <HAL_QSPI_MspInit+0xe8>)
 80016a0:	f043 0302 	orr.w	r3, r3, #2
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b26      	ldr	r3, [pc, #152]	; (8001740 <HAL_QSPI_MspInit+0xe8>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	4b22      	ldr	r3, [pc, #136]	; (8001740 <HAL_QSPI_MspInit+0xe8>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a21      	ldr	r2, [pc, #132]	; (8001740 <HAL_QSPI_MspInit+0xe8>)
 80016bc:	f043 0320 	orr.w	r3, r3, #32
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b1f      	ldr	r3, [pc, #124]	; (8001740 <HAL_QSPI_MspInit+0xe8>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0320 	and.w	r3, r3, #32
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 80016ce:	2340      	movs	r3, #64	; 0x40
 80016d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d2:	2302      	movs	r3, #2
 80016d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016da:	2303      	movs	r3, #3
 80016dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 80016de:	230a      	movs	r3, #10
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	4619      	mov	r1, r3
 80016e8:	4816      	ldr	r0, [pc, #88]	; (8001744 <HAL_QSPI_MspInit+0xec>)
 80016ea:	f001 fe91 	bl	8003410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 80016ee:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80016f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f4:	2302      	movs	r3, #2
 80016f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fc:	2303      	movs	r3, #3
 80016fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001700:	2309      	movs	r3, #9
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4619      	mov	r1, r3
 800170a:	480f      	ldr	r0, [pc, #60]	; (8001748 <HAL_QSPI_MspInit+0xf0>)
 800170c:	f001 fe80 	bl	8003410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8001710:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	2302      	movs	r3, #2
 8001718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171e:	2303      	movs	r3, #3
 8001720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8001722:	230a      	movs	r3, #10
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	4806      	ldr	r0, [pc, #24]	; (8001748 <HAL_QSPI_MspInit+0xf0>)
 800172e:	f001 fe6f 	bl	8003410 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001732:	bf00      	nop
 8001734:	3728      	adds	r7, #40	; 0x28
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	a0001000 	.word	0xa0001000
 8001740:	40023800 	.word	0x40023800
 8001744:	40020400 	.word	0x40020400
 8001748:	40021400 	.word	0x40021400

0800174c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08a      	sub	sp, #40	; 0x28
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a28      	ldr	r2, [pc, #160]	; (800180c <HAL_SD_MspInit+0xc0>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d14a      	bne.n	8001804 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
 8001772:	4b27      	ldr	r3, [pc, #156]	; (8001810 <HAL_SD_MspInit+0xc4>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	4a26      	ldr	r2, [pc, #152]	; (8001810 <HAL_SD_MspInit+0xc4>)
 8001778:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800177c:	6453      	str	r3, [r2, #68]	; 0x44
 800177e:	4b24      	ldr	r3, [pc, #144]	; (8001810 <HAL_SD_MspInit+0xc4>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	4b20      	ldr	r3, [pc, #128]	; (8001810 <HAL_SD_MspInit+0xc4>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a1f      	ldr	r2, [pc, #124]	; (8001810 <HAL_SD_MspInit+0xc4>)
 8001794:	f043 0304 	orr.w	r3, r3, #4
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <HAL_SD_MspInit+0xc4>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f003 0304 	and.w	r3, r3, #4
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	4b19      	ldr	r3, [pc, #100]	; (8001810 <HAL_SD_MspInit+0xc4>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a18      	ldr	r2, [pc, #96]	; (8001810 <HAL_SD_MspInit+0xc4>)
 80017b0:	f043 0308 	orr.w	r3, r3, #8
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b16      	ldr	r3, [pc, #88]	; (8001810 <HAL_SD_MspInit+0xc4>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f003 0308 	and.w	r3, r3, #8
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD
    PC9     ------> SDIO_D1
    PC8     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin
 80017c2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80017c6:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d0:	2303      	movs	r3, #3
 80017d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80017d4:	230c      	movs	r3, #12
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	4619      	mov	r1, r3
 80017de:	480d      	ldr	r0, [pc, #52]	; (8001814 <HAL_SD_MspInit+0xc8>)
 80017e0:	f001 fe16 	bl	8003410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 80017e4:	2304      	movs	r3, #4
 80017e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e8:	2302      	movs	r3, #2
 80017ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f0:	2303      	movs	r3, #3
 80017f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80017f4:	230c      	movs	r3, #12
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	4619      	mov	r1, r3
 80017fe:	4806      	ldr	r0, [pc, #24]	; (8001818 <HAL_SD_MspInit+0xcc>)
 8001800:	f001 fe06 	bl	8003410 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001804:	bf00      	nop
 8001806:	3728      	adds	r7, #40	; 0x28
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40012c00 	.word	0x40012c00
 8001810:	40023800 	.word	0x40023800
 8001814:	40020800 	.word	0x40020800
 8001818:	40020c00 	.word	0x40020c00

0800181c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a0b      	ldr	r2, [pc, #44]	; (8001858 <HAL_TIM_Base_MspInit+0x3c>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d10d      	bne.n	800184a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	4b0a      	ldr	r3, [pc, #40]	; (800185c <HAL_TIM_Base_MspInit+0x40>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	4a09      	ldr	r2, [pc, #36]	; (800185c <HAL_TIM_Base_MspInit+0x40>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6453      	str	r3, [r2, #68]	; 0x44
 800183e:	4b07      	ldr	r3, [pc, #28]	; (800185c <HAL_TIM_Base_MspInit+0x40>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800184a:	bf00      	nop
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	40010000 	.word	0x40010000
 800185c:	40023800 	.word	0x40023800

08001860 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08c      	sub	sp, #48	; 0x30
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 031c 	add.w	r3, r7, #28
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a33      	ldr	r2, [pc, #204]	; (800194c <HAL_UART_MspInit+0xec>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d12d      	bne.n	80018de <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	61bb      	str	r3, [r7, #24]
 8001886:	4b32      	ldr	r3, [pc, #200]	; (8001950 <HAL_UART_MspInit+0xf0>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	4a31      	ldr	r2, [pc, #196]	; (8001950 <HAL_UART_MspInit+0xf0>)
 800188c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001890:	6413      	str	r3, [r2, #64]	; 0x40
 8001892:	4b2f      	ldr	r3, [pc, #188]	; (8001950 <HAL_UART_MspInit+0xf0>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800189a:	61bb      	str	r3, [r7, #24]
 800189c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	4b2b      	ldr	r3, [pc, #172]	; (8001950 <HAL_UART_MspInit+0xf0>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a2a      	ldr	r2, [pc, #168]	; (8001950 <HAL_UART_MspInit+0xf0>)
 80018a8:	f043 0302 	orr.w	r3, r3, #2
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b28      	ldr	r3, [pc, #160]	; (8001950 <HAL_UART_MspInit+0xf0>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80018ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018c4:	2301      	movs	r3, #1
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c8:	2303      	movs	r3, #3
 80018ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018cc:	2307      	movs	r3, #7
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d0:	f107 031c 	add.w	r3, r7, #28
 80018d4:	4619      	mov	r1, r3
 80018d6:	481f      	ldr	r0, [pc, #124]	; (8001954 <HAL_UART_MspInit+0xf4>)
 80018d8:	f001 fd9a 	bl	8003410 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80018dc:	e031      	b.n	8001942 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a1d      	ldr	r2, [pc, #116]	; (8001958 <HAL_UART_MspInit+0xf8>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d12c      	bne.n	8001942 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80018e8:	2300      	movs	r3, #0
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	4b18      	ldr	r3, [pc, #96]	; (8001950 <HAL_UART_MspInit+0xf0>)
 80018ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f0:	4a17      	ldr	r2, [pc, #92]	; (8001950 <HAL_UART_MspInit+0xf0>)
 80018f2:	f043 0320 	orr.w	r3, r3, #32
 80018f6:	6453      	str	r3, [r2, #68]	; 0x44
 80018f8:	4b15      	ldr	r3, [pc, #84]	; (8001950 <HAL_UART_MspInit+0xf0>)
 80018fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fc:	f003 0320 	and.w	r3, r3, #32
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001904:	2300      	movs	r3, #0
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <HAL_UART_MspInit+0xf0>)
 800190a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190c:	4a10      	ldr	r2, [pc, #64]	; (8001950 <HAL_UART_MspInit+0xf0>)
 800190e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001912:	6313      	str	r3, [r2, #48]	; 0x30
 8001914:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <HAL_UART_MspInit+0xf0>)
 8001916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_USART6_TX_Pin|USART6_RX_Pin;
 8001920:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001926:	2302      	movs	r3, #2
 8001928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192e:	2303      	movs	r3, #3
 8001930:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001932:	2308      	movs	r3, #8
 8001934:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001936:	f107 031c 	add.w	r3, r7, #28
 800193a:	4619      	mov	r1, r3
 800193c:	4807      	ldr	r0, [pc, #28]	; (800195c <HAL_UART_MspInit+0xfc>)
 800193e:	f001 fd67 	bl	8003410 <HAL_GPIO_Init>
}
 8001942:	bf00      	nop
 8001944:	3730      	adds	r7, #48	; 0x30
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40004800 	.word	0x40004800
 8001950:	40023800 	.word	0x40023800
 8001954:	40020400 	.word	0x40020400
 8001958:	40011400 	.word	0x40011400
 800195c:	40021800 	.word	0x40021800

08001960 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001966:	1d3b      	adds	r3, r7, #4
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001974:	4b44      	ldr	r3, [pc, #272]	; (8001a88 <HAL_FMC_MspInit+0x128>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	f040 8081 	bne.w	8001a80 <HAL_FMC_MspInit+0x120>
    return;
  }
  FMC_Initialized = 1;
 800197e:	4b42      	ldr	r3, [pc, #264]	; (8001a88 <HAL_FMC_MspInit+0x128>)
 8001980:	2201      	movs	r2, #1
 8001982:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001984:	2300      	movs	r3, #0
 8001986:	603b      	str	r3, [r7, #0]
 8001988:	4b40      	ldr	r3, [pc, #256]	; (8001a8c <HAL_FMC_MspInit+0x12c>)
 800198a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800198c:	4a3f      	ldr	r2, [pc, #252]	; (8001a8c <HAL_FMC_MspInit+0x12c>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6393      	str	r3, [r2, #56]	; 0x38
 8001994:	4b3d      	ldr	r3, [pc, #244]	; (8001a8c <HAL_FMC_MspInit+0x12c>)
 8001996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	603b      	str	r3, [r7, #0]
 800199e:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin
 80019a0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80019a4:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D11_Pin|D4_Pin|D7_Pin
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a6:	2302      	movs	r3, #2
 80019a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ae:	2303      	movs	r3, #3
 80019b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019b2:	230c      	movs	r3, #12
 80019b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	4619      	mov	r1, r3
 80019ba:	4835      	ldr	r0, [pc, #212]	; (8001a90 <HAL_FMC_MspInit+0x130>)
 80019bc:	f001 fd28 	bl	8003410 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin
 80019c0:	f248 1333 	movw	r3, #33075	; 0x8133
 80019c4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c6:	2302      	movs	r3, #2
 80019c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ce:	2303      	movs	r3, #3
 80019d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019d2:	230c      	movs	r3, #12
 80019d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	4619      	mov	r1, r3
 80019da:	482e      	ldr	r0, [pc, #184]	; (8001a94 <HAL_FMC_MspInit+0x134>)
 80019dc:	f001 fd18 	bl	8003410 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin
 80019e0:	f24c 7303 	movw	r3, #50947	; 0xc703
 80019e4:	607b      	str	r3, [r7, #4]
                          |D0_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e6:	2302      	movs	r3, #2
 80019e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ee:	2303      	movs	r3, #3
 80019f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019f2:	230c      	movs	r3, #12
 80019f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	4619      	mov	r1, r3
 80019fa:	4827      	ldr	r0, [pc, #156]	; (8001a98 <HAL_FMC_MspInit+0x138>)
 80019fc:	f001 fd08 	bl	8003410 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8001a00:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8001a04:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a06:	2302      	movs	r3, #2
 8001a08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a12:	230c      	movs	r3, #12
 8001a14:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4820      	ldr	r0, [pc, #128]	; (8001a9c <HAL_FMC_MspInit+0x13c>)
 8001a1c:	f001 fcf8 	bl	8003410 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001a20:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001a24:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a26:	2302      	movs	r3, #2
 8001a28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a32:	230c      	movs	r3, #12
 8001a34:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a36:	1d3b      	adds	r3, r7, #4
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4819      	ldr	r0, [pc, #100]	; (8001aa0 <HAL_FMC_MspInit+0x140>)
 8001a3c:	f001 fce8 	bl	8003410 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin
 8001a40:	f64f 730c 	movw	r3, #65292	; 0xff0c
 8001a44:	607b      	str	r3, [r7, #4]
                          |SDCKE0_Pin|D20_Pin|D17_Pin|D19_Pin
                          |D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a46:	2302      	movs	r3, #2
 8001a48:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a52:	230c      	movs	r3, #12
 8001a54:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a56:	1d3b      	adds	r3, r7, #4
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4812      	ldr	r0, [pc, #72]	; (8001aa4 <HAL_FMC_MspInit+0x144>)
 8001a5c:	f001 fcd8 	bl	8003410 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001a60:	2301      	movs	r3, #1
 8001a62:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a70:	230c      	movs	r3, #12
 8001a72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001a74:	1d3b      	adds	r3, r7, #4
 8001a76:	4619      	mov	r1, r3
 8001a78:	480b      	ldr	r0, [pc, #44]	; (8001aa8 <HAL_FMC_MspInit+0x148>)
 8001a7a:	f001 fcc9 	bl	8003410 <HAL_GPIO_Init>
 8001a7e:	e000      	b.n	8001a82 <HAL_FMC_MspInit+0x122>
    return;
 8001a80:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000578 	.word	0x20000578
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40021800 	.word	0x40021800
 8001a98:	40020c00 	.word	0x40020c00
 8001a9c:	40022000 	.word	0x40022000
 8001aa0:	40021400 	.word	0x40021400
 8001aa4:	40021c00 	.word	0x40021c00
 8001aa8:	40020800 	.word	0x40020800

08001aac <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001ab4:	f7ff ff54 	bl	8001960 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a26      	ldr	r2, [pc, #152]	; (8001b68 <HAL_SAI_MspInit+0xa8>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d146      	bne.n	8001b60 <HAL_SAI_MspInit+0xa0>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001ad2:	4b26      	ldr	r3, [pc, #152]	; (8001b6c <HAL_SAI_MspInit+0xac>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10d      	bne.n	8001af6 <HAL_SAI_MspInit+0x36>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	4b24      	ldr	r3, [pc, #144]	; (8001b70 <HAL_SAI_MspInit+0xb0>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae2:	4a23      	ldr	r2, [pc, #140]	; (8001b70 <HAL_SAI_MspInit+0xb0>)
 8001ae4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aea:	4b21      	ldr	r3, [pc, #132]	; (8001b70 <HAL_SAI_MspInit+0xb0>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8001af6:	4b1d      	ldr	r3, [pc, #116]	; (8001b6c <HAL_SAI_MspInit+0xac>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	3301      	adds	r3, #1
 8001afc:	4a1b      	ldr	r2, [pc, #108]	; (8001b6c <HAL_SAI_MspInit+0xac>)
 8001afe:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 8001b00:	2330      	movs	r3, #48	; 0x30
 8001b02:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b04:	2302      	movs	r3, #2
 8001b06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001b10:	2306      	movs	r3, #6
 8001b12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b14:	f107 030c 	add.w	r3, r7, #12
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4816      	ldr	r0, [pc, #88]	; (8001b74 <HAL_SAI_MspInit+0xb4>)
 8001b1c:	f001 fc78 	bl	8003410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MIC_DATA_Pin;
 8001b20:	2340      	movs	r3, #64	; 0x40
 8001b22:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b24:	2302      	movs	r3, #2
 8001b26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001b30:	2306      	movs	r3, #6
 8001b32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 8001b34:	f107 030c 	add.w	r3, r7, #12
 8001b38:	4619      	mov	r1, r3
 8001b3a:	480f      	ldr	r0, [pc, #60]	; (8001b78 <HAL_SAI_MspInit+0xb8>)
 8001b3c:	f001 fc68 	bl	8003410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8001b40:	2380      	movs	r3, #128	; 0x80
 8001b42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b44:	2302      	movs	r3, #2
 8001b46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001b50:	2306      	movs	r3, #6
 8001b52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8001b54:	f107 030c 	add.w	r3, r7, #12
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4808      	ldr	r0, [pc, #32]	; (8001b7c <HAL_SAI_MspInit+0xbc>)
 8001b5c:	f001 fc58 	bl	8003410 <HAL_GPIO_Init>

    }
}
 8001b60:	bf00      	nop
 8001b62:	3720      	adds	r7, #32
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40015804 	.word	0x40015804
 8001b6c:	2000057c 	.word	0x2000057c
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40020c00 	.word	0x40020c00
 8001b7c:	40021800 	.word	0x40021800

08001b80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08e      	sub	sp, #56	; 0x38
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001b90:	2300      	movs	r3, #0
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	4b33      	ldr	r3, [pc, #204]	; (8001c64 <HAL_InitTick+0xe4>)
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	4a32      	ldr	r2, [pc, #200]	; (8001c64 <HAL_InitTick+0xe4>)
 8001b9a:	f043 0310 	orr.w	r3, r3, #16
 8001b9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba0:	4b30      	ldr	r3, [pc, #192]	; (8001c64 <HAL_InitTick+0xe4>)
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	f003 0310 	and.w	r3, r3, #16
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bac:	f107 0210 	add.w	r2, r7, #16
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	4611      	mov	r1, r2
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f004 ff00 	bl	80069bc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001bbc:	6a3b      	ldr	r3, [r7, #32]
 8001bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d103      	bne.n	8001bce <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001bc6:	f004 fed1 	bl	800696c <HAL_RCC_GetPCLK1Freq>
 8001bca:	6378      	str	r0, [r7, #52]	; 0x34
 8001bcc:	e004      	b.n	8001bd8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001bce:	f004 fecd 	bl	800696c <HAL_RCC_GetPCLK1Freq>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bda:	4a23      	ldr	r2, [pc, #140]	; (8001c68 <HAL_InitTick+0xe8>)
 8001bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001be0:	0c9b      	lsrs	r3, r3, #18
 8001be2:	3b01      	subs	r3, #1
 8001be4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001be6:	4b21      	ldr	r3, [pc, #132]	; (8001c6c <HAL_InitTick+0xec>)
 8001be8:	4a21      	ldr	r2, [pc, #132]	; (8001c70 <HAL_InitTick+0xf0>)
 8001bea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001bec:	4b1f      	ldr	r3, [pc, #124]	; (8001c6c <HAL_InitTick+0xec>)
 8001bee:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bf2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001bf4:	4a1d      	ldr	r2, [pc, #116]	; (8001c6c <HAL_InitTick+0xec>)
 8001bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001bfa:	4b1c      	ldr	r3, [pc, #112]	; (8001c6c <HAL_InitTick+0xec>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c00:	4b1a      	ldr	r3, [pc, #104]	; (8001c6c <HAL_InitTick+0xec>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c06:	4b19      	ldr	r3, [pc, #100]	; (8001c6c <HAL_InitTick+0xec>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001c0c:	4817      	ldr	r0, [pc, #92]	; (8001c6c <HAL_InitTick+0xec>)
 8001c0e:	f006 feba 	bl	8008986 <HAL_TIM_Base_Init>
 8001c12:	4603      	mov	r3, r0
 8001c14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001c18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d11b      	bne.n	8001c58 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001c20:	4812      	ldr	r0, [pc, #72]	; (8001c6c <HAL_InitTick+0xec>)
 8001c22:	f006 feff 	bl	8008a24 <HAL_TIM_Base_Start_IT>
 8001c26:	4603      	mov	r3, r0
 8001c28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001c2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d111      	bne.n	8001c58 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c34:	2036      	movs	r0, #54	; 0x36
 8001c36:	f000 fb9f 	bl	8002378 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b0f      	cmp	r3, #15
 8001c3e:	d808      	bhi.n	8001c52 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001c40:	2200      	movs	r2, #0
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	2036      	movs	r0, #54	; 0x36
 8001c46:	f000 fb7b 	bl	8002340 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c4a:	4a0a      	ldr	r2, [pc, #40]	; (8001c74 <HAL_InitTick+0xf4>)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	e002      	b.n	8001c58 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001c58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3738      	adds	r7, #56	; 0x38
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40023800 	.word	0x40023800
 8001c68:	431bde83 	.word	0x431bde83
 8001c6c:	20000580 	.word	0x20000580
 8001c70:	40001000 	.word	0x40001000
 8001c74:	20000008 	.word	0x20000008

08001c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c7c:	e7fe      	b.n	8001c7c <NMI_Handler+0x4>

08001c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c82:	e7fe      	b.n	8001c82 <HardFault_Handler+0x4>

08001c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c88:	e7fe      	b.n	8001c88 <MemManage_Handler+0x4>

08001c8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c8e:	e7fe      	b.n	8001c8e <BusFault_Handler+0x4>

08001c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <UsageFault_Handler+0x4>

08001c96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ca8:	4802      	ldr	r0, [pc, #8]	; (8001cb4 <TIM6_DAC_IRQHandler+0x10>)
 8001caa:	f006 ff2b 	bl	8008b04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000580 	.word	0x20000580

08001cb8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001cbc:	4802      	ldr	r0, [pc, #8]	; (8001cc8 <OTG_FS_IRQHandler+0x10>)
 8001cbe:	f002 f865 	bl	8003d8c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	2000ab5c 	.word	0x2000ab5c

08001ccc <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001cd0:	4802      	ldr	r0, [pc, #8]	; (8001cdc <LTDC_IRQHandler+0x10>)
 8001cd2:	f004 f8a9 	bl	8005e28 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000268 	.word	0x20000268

08001ce0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001ce4:	4802      	ldr	r0, [pc, #8]	; (8001cf0 <DMA2D_IRQHandler+0x10>)
 8001ce6:	f000 fc4c 	bl	8002582 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000164 	.word	0x20000164

08001cf4 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001cf8:	4802      	ldr	r0, [pc, #8]	; (8001d04 <DSI_IRQHandler+0x10>)
 8001cfa:	f000 ffbe 	bl	8002c7a <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	200001a4 	.word	0x200001a4

08001d08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return 1;
 8001d0c:	2301      	movs	r3, #1
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <_kill>:

int _kill(int pid, int sig)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d22:	f02b f9ff 	bl	802d124 <__errno>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2216      	movs	r2, #22
 8001d2a:	601a      	str	r2, [r3, #0]
  return -1;
 8001d2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <_exit>:

void _exit (int status)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d40:	f04f 31ff 	mov.w	r1, #4294967295
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff ffe7 	bl	8001d18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d4a:	e7fe      	b.n	8001d4a <_exit+0x12>

08001d4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	e00a      	b.n	8001d74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d5e:	f3af 8000 	nop.w
 8001d62:	4601      	mov	r1, r0
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	1c5a      	adds	r2, r3, #1
 8001d68:	60ba      	str	r2, [r7, #8]
 8001d6a:	b2ca      	uxtb	r2, r1
 8001d6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	3301      	adds	r3, #1
 8001d72:	617b      	str	r3, [r7, #20]
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	dbf0      	blt.n	8001d5e <_read+0x12>
  }

  return len;
 8001d7c:	687b      	ldr	r3, [r7, #4]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b086      	sub	sp, #24
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d92:	2300      	movs	r3, #0
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	e009      	b.n	8001dac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	1c5a      	adds	r2, r3, #1
 8001d9c:	60ba      	str	r2, [r7, #8]
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	3301      	adds	r3, #1
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	dbf1      	blt.n	8001d98 <_write+0x12>
  }
  return len;
 8001db4:	687b      	ldr	r3, [r7, #4]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <_close>:

int _close(int file)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001de6:	605a      	str	r2, [r3, #4]
  return 0;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <_isatty>:

int _isatty(int file)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dfe:	2301      	movs	r3, #1
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
	...

08001e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e30:	4a14      	ldr	r2, [pc, #80]	; (8001e84 <_sbrk+0x5c>)
 8001e32:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <_sbrk+0x60>)
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e3c:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <_sbrk+0x64>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d102      	bne.n	8001e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e44:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <_sbrk+0x64>)
 8001e46:	4a12      	ldr	r2, [pc, #72]	; (8001e90 <_sbrk+0x68>)
 8001e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e4a:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <_sbrk+0x64>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4413      	add	r3, r2
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d207      	bcs.n	8001e68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e58:	f02b f964 	bl	802d124 <__errno>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	220c      	movs	r2, #12
 8001e60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e62:	f04f 33ff 	mov.w	r3, #4294967295
 8001e66:	e009      	b.n	8001e7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e68:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <_sbrk+0x64>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e6e:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <_sbrk+0x64>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4413      	add	r3, r2
 8001e76:	4a05      	ldr	r2, [pc, #20]	; (8001e8c <_sbrk+0x64>)
 8001e78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20050000 	.word	0x20050000
 8001e88:	00000400 	.word	0x00000400
 8001e8c:	200005c8 	.word	0x200005c8
 8001e90:	2000bb80 	.word	0x2000bb80

08001e94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e98:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <SystemInit+0x20>)
 8001e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e9e:	4a05      	ldr	r2, [pc, #20]	; (8001eb4 <SystemInit+0x20>)
 8001ea0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ea4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001eb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ef0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ebc:	f7ff ffea 	bl	8001e94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ec0:	480c      	ldr	r0, [pc, #48]	; (8001ef4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ec2:	490d      	ldr	r1, [pc, #52]	; (8001ef8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ec4:	4a0d      	ldr	r2, [pc, #52]	; (8001efc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ec6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ec8:	e002      	b.n	8001ed0 <LoopCopyDataInit>

08001eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ece:	3304      	adds	r3, #4

08001ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ed4:	d3f9      	bcc.n	8001eca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ed6:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ed8:	4c0a      	ldr	r4, [pc, #40]	; (8001f04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001edc:	e001      	b.n	8001ee2 <LoopFillZerobss>

08001ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ee0:	3204      	adds	r2, #4

08001ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ee4:	d3fb      	bcc.n	8001ede <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001ee6:	f02b f923 	bl	802d130 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eea:	f7fe fb71 	bl	80005d0 <main>
  bx  lr    
 8001eee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ef0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001ef4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ef8:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 8001efc:	0812f9e4 	.word	0x0812f9e4
  ldr r2, =_sbss
 8001f00:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8001f04:	2000bb80 	.word	0x2000bb80

08001f08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f08:	e7fe      	b.n	8001f08 <ADC_IRQHandler>
	...

08001f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f10:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <HAL_Init+0x40>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a0d      	ldr	r2, [pc, #52]	; (8001f4c <HAL_Init+0x40>)
 8001f16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <HAL_Init+0x40>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <HAL_Init+0x40>)
 8001f22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f28:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <HAL_Init+0x40>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a07      	ldr	r2, [pc, #28]	; (8001f4c <HAL_Init+0x40>)
 8001f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f34:	2003      	movs	r0, #3
 8001f36:	f000 f9f8 	bl	800232a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f7ff fe20 	bl	8001b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f40:	f7ff f9c8 	bl	80012d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40023c00 	.word	0x40023c00

08001f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <HAL_IncTick+0x20>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <HAL_IncTick+0x24>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4413      	add	r3, r2
 8001f60:	4a04      	ldr	r2, [pc, #16]	; (8001f74 <HAL_IncTick+0x24>)
 8001f62:	6013      	str	r3, [r2, #0]
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	2000000c 	.word	0x2000000c
 8001f74:	200005cc 	.word	0x200005cc

08001f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f7c:	4b03      	ldr	r3, [pc, #12]	; (8001f8c <HAL_GetTick+0x14>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	200005cc 	.word	0x200005cc

08001f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f98:	f7ff ffee 	bl	8001f78 <HAL_GetTick>
 8001f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa8:	d005      	beq.n	8001fb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001faa:	4b0a      	ldr	r3, [pc, #40]	; (8001fd4 <HAL_Delay+0x44>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fb6:	bf00      	nop
 8001fb8:	f7ff ffde 	bl	8001f78 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d8f7      	bhi.n	8001fb8 <HAL_Delay+0x28>
  {
  }
}
 8001fc8:	bf00      	nop
 8001fca:	bf00      	nop
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	2000000c 	.word	0x2000000c

08001fd8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e0ed      	b.n	80021c6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d102      	bne.n	8001ffc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff f998 	bl	800132c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0201 	orr.w	r2, r2, #1
 800200a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800200c:	f7ff ffb4 	bl	8001f78 <HAL_GetTick>
 8002010:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002012:	e012      	b.n	800203a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002014:	f7ff ffb0 	bl	8001f78 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b0a      	cmp	r3, #10
 8002020:	d90b      	bls.n	800203a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2205      	movs	r2, #5
 8002032:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e0c5      	b.n	80021c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0e5      	beq.n	8002014 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0202 	bic.w	r2, r2, #2
 8002056:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002058:	f7ff ff8e 	bl	8001f78 <HAL_GetTick>
 800205c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800205e:	e012      	b.n	8002086 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002060:	f7ff ff8a 	bl	8001f78 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b0a      	cmp	r3, #10
 800206c:	d90b      	bls.n	8002086 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002072:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2205      	movs	r2, #5
 800207e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e09f      	b.n	80021c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1e5      	bne.n	8002060 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	7e1b      	ldrb	r3, [r3, #24]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d108      	bne.n	80020ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	e007      	b.n	80020be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	7e5b      	ldrb	r3, [r3, #25]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d108      	bne.n	80020d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	e007      	b.n	80020e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	7e9b      	ldrb	r3, [r3, #26]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d108      	bne.n	8002102 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 0220 	orr.w	r2, r2, #32
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	e007      	b.n	8002112 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0220 	bic.w	r2, r2, #32
 8002110:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	7edb      	ldrb	r3, [r3, #27]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d108      	bne.n	800212c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 0210 	bic.w	r2, r2, #16
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	e007      	b.n	800213c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 0210 	orr.w	r2, r2, #16
 800213a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	7f1b      	ldrb	r3, [r3, #28]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d108      	bne.n	8002156 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 0208 	orr.w	r2, r2, #8
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	e007      	b.n	8002166 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0208 	bic.w	r2, r2, #8
 8002164:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	7f5b      	ldrb	r3, [r3, #29]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d108      	bne.n	8002180 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f042 0204 	orr.w	r2, r2, #4
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	e007      	b.n	8002190 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0204 	bic.w	r2, r2, #4
 800218e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	431a      	orrs	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	431a      	orrs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	ea42 0103 	orr.w	r1, r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	1e5a      	subs	r2, r3, #1
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021e0:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <__NVIC_SetPriorityGrouping+0x44>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021ec:	4013      	ands	r3, r2
 80021ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002202:	4a04      	ldr	r2, [pc, #16]	; (8002214 <__NVIC_SetPriorityGrouping+0x44>)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	60d3      	str	r3, [r2, #12]
}
 8002208:	bf00      	nop
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800221c:	4b04      	ldr	r3, [pc, #16]	; (8002230 <__NVIC_GetPriorityGrouping+0x18>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	0a1b      	lsrs	r3, r3, #8
 8002222:	f003 0307 	and.w	r3, r3, #7
}
 8002226:	4618      	mov	r0, r3
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800223e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002242:	2b00      	cmp	r3, #0
 8002244:	db0b      	blt.n	800225e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	f003 021f 	and.w	r2, r3, #31
 800224c:	4907      	ldr	r1, [pc, #28]	; (800226c <__NVIC_EnableIRQ+0x38>)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	095b      	lsrs	r3, r3, #5
 8002254:	2001      	movs	r0, #1
 8002256:	fa00 f202 	lsl.w	r2, r0, r2
 800225a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	e000e100 	.word	0xe000e100

08002270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	6039      	str	r1, [r7, #0]
 800227a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800227c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002280:	2b00      	cmp	r3, #0
 8002282:	db0a      	blt.n	800229a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	b2da      	uxtb	r2, r3
 8002288:	490c      	ldr	r1, [pc, #48]	; (80022bc <__NVIC_SetPriority+0x4c>)
 800228a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228e:	0112      	lsls	r2, r2, #4
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	440b      	add	r3, r1
 8002294:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002298:	e00a      	b.n	80022b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	b2da      	uxtb	r2, r3
 800229e:	4908      	ldr	r1, [pc, #32]	; (80022c0 <__NVIC_SetPriority+0x50>)
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	3b04      	subs	r3, #4
 80022a8:	0112      	lsls	r2, r2, #4
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	440b      	add	r3, r1
 80022ae:	761a      	strb	r2, [r3, #24]
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	e000e100 	.word	0xe000e100
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b089      	sub	sp, #36	; 0x24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f1c3 0307 	rsb	r3, r3, #7
 80022de:	2b04      	cmp	r3, #4
 80022e0:	bf28      	it	cs
 80022e2:	2304      	movcs	r3, #4
 80022e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3304      	adds	r3, #4
 80022ea:	2b06      	cmp	r3, #6
 80022ec:	d902      	bls.n	80022f4 <NVIC_EncodePriority+0x30>
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	3b03      	subs	r3, #3
 80022f2:	e000      	b.n	80022f6 <NVIC_EncodePriority+0x32>
 80022f4:	2300      	movs	r3, #0
 80022f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f8:	f04f 32ff 	mov.w	r2, #4294967295
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43da      	mvns	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	401a      	ands	r2, r3
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800230c:	f04f 31ff 	mov.w	r1, #4294967295
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	fa01 f303 	lsl.w	r3, r1, r3
 8002316:	43d9      	mvns	r1, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800231c:	4313      	orrs	r3, r2
         );
}
 800231e:	4618      	mov	r0, r3
 8002320:	3724      	adds	r7, #36	; 0x24
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7ff ff4c 	bl	80021d0 <__NVIC_SetPriorityGrouping>
}
 8002338:	bf00      	nop
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
 800234c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002352:	f7ff ff61 	bl	8002218 <__NVIC_GetPriorityGrouping>
 8002356:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	68b9      	ldr	r1, [r7, #8]
 800235c:	6978      	ldr	r0, [r7, #20]
 800235e:	f7ff ffb1 	bl	80022c4 <NVIC_EncodePriority>
 8002362:	4602      	mov	r2, r0
 8002364:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002368:	4611      	mov	r1, r2
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff ff80 	bl	8002270 <__NVIC_SetPriority>
}
 8002370:	bf00      	nop
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff ff54 	bl	8002234 <__NVIC_EnableIRQ>
}
 800238c:	bf00      	nop
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e00e      	b.n	80023c4 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	795b      	ldrb	r3, [r3, #5]
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d105      	bne.n	80023bc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7ff f80e 	bl	80013d8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
 80023d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023da:	2300      	movs	r3, #0
 80023dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d101      	bne.n	80023f2 <HAL_DMA_Start_IT+0x26>
 80023ee:	2302      	movs	r3, #2
 80023f0:	e040      	b.n	8002474 <HAL_DMA_Start_IT+0xa8>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b01      	cmp	r3, #1
 8002404:	d12f      	bne.n	8002466 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2202      	movs	r2, #2
 800240a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68b9      	ldr	r1, [r7, #8]
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 f83a 	bl	8002494 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002424:	223f      	movs	r2, #63	; 0x3f
 8002426:	409a      	lsls	r2, r3
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0216 	orr.w	r2, r2, #22
 800243a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	2b00      	cmp	r3, #0
 8002442:	d007      	beq.n	8002454 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0208 	orr.w	r2, r2, #8
 8002452:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0201 	orr.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	e005      	b.n	8002472 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800246e:	2302      	movs	r3, #2
 8002470:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002472:	7dfb      	ldrb	r3, [r7, #23]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002488:	4618      	mov	r0, r3
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
 80024a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2b40      	cmp	r3, #64	; 0x40
 80024c0:	d108      	bne.n	80024d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024d2:	e007      	b.n	80024e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68ba      	ldr	r2, [r7, #8]
 80024da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	60da      	str	r2, [r3, #12]
}
 80024e4:	bf00      	nop
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e03b      	b.n	800257a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d106      	bne.n	800251c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7fe ff80 	bl	800141c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2202      	movs	r2, #2
 8002520:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002540:	f023 0107 	bic.w	r1, r3, #7
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	430a      	orrs	r2, r1
 800254e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800255a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	68d1      	ldr	r1, [r2, #12]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6812      	ldr	r2, [r2, #0]
 8002566:	430b      	orrs	r3, r1
 8002568:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b084      	sub	sp, #16
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d026      	beq.n	80025f2 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d021      	beq.n	80025f2 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025bc:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c2:	f043 0201 	orr.w	r2, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2201      	movs	r2, #1
 80025d0:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2204      	movs	r2, #4
 80025d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f003 0320 	and.w	r3, r3, #32
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d026      	beq.n	800264a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d021      	beq.n	800264a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002614:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2220      	movs	r2, #32
 800261c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002622:	f043 0202 	orr.w	r2, r3, #2
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2204      	movs	r2, #4
 800262e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f003 0308 	and.w	r3, r3, #8
 8002650:	2b00      	cmp	r3, #0
 8002652:	d026      	beq.n	80026a2 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800265a:	2b00      	cmp	r3, #0
 800265c:	d021      	beq.n	80026a2 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800266c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2208      	movs	r2, #8
 8002674:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267a:	f043 0204 	orr.w	r2, r3, #4
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2204      	movs	r2, #4
 8002686:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d013      	beq.n	80026d4 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00e      	beq.n	80026d4 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026c4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2204      	movs	r2, #4
 80026cc:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f853 	bl	800277a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d024      	beq.n	8002728 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d01f      	beq.n	8002728 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80026f6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2202      	movs	r2, #2
 80026fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f003 0310 	and.w	r3, r3, #16
 800272e:	2b00      	cmp	r3, #0
 8002730:	d01f      	beq.n	8002772 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d01a      	beq.n	8002772 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800274a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2210      	movs	r2, #16
 8002752:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 f80e 	bl	800278e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002772:	bf00      	nop
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
	...

080027a4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d101      	bne.n	80027c4 <HAL_DMA2D_ConfigLayer+0x20>
 80027c0:	2302      	movs	r3, #2
 80027c2:	e079      	b.n	80028b8 <HAL_DMA2D_ConfigLayer+0x114>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	3318      	adds	r3, #24
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	4413      	add	r3, r2
 80027de:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	041b      	lsls	r3, r3, #16
 80027ea:	4313      	orrs	r3, r2
 80027ec:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80027ee:	4b35      	ldr	r3, [pc, #212]	; (80028c4 <HAL_DMA2D_ConfigLayer+0x120>)
 80027f0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b0a      	cmp	r3, #10
 80027f8:	d003      	beq.n	8002802 <HAL_DMA2D_ConfigLayer+0x5e>
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b09      	cmp	r3, #9
 8002800:	d107      	bne.n	8002812 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	4313      	orrs	r3, r2
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	e005      	b.n	800281e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	061b      	lsls	r3, r3, #24
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	4313      	orrs	r3, r2
 800281c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d120      	bne.n	8002866 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	43db      	mvns	r3, r3
 800282e:	ea02 0103 	and.w	r1, r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	430a      	orrs	r2, r1
 800283a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	6812      	ldr	r2, [r2, #0]
 8002844:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b0a      	cmp	r3, #10
 800284c:	d003      	beq.n	8002856 <HAL_DMA2D_ConfigLayer+0xb2>
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b09      	cmp	r3, #9
 8002854:	d127      	bne.n	80028a6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002862:	629a      	str	r2, [r3, #40]	; 0x28
 8002864:	e01f      	b.n	80028a6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	69da      	ldr	r2, [r3, #28]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	43db      	mvns	r3, r3
 8002870:	ea02 0103 	and.w	r1, r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	430a      	orrs	r2, r1
 800287c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	6812      	ldr	r2, [r2, #0]
 8002886:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b0a      	cmp	r3, #10
 800288e:	d003      	beq.n	8002898 <HAL_DMA2D_ConfigLayer+0xf4>
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b09      	cmp	r3, #9
 8002896:	d106      	bne.n	80028a6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80028a4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	371c      	adds	r7, #28
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	ff03000f 	.word	0xff03000f

080028c8 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b088      	sub	sp, #32
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e10b      	b.n	8002af4 <HAL_DSI_Init+0x22c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	7c5b      	ldrb	r3, [r3, #17]
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d102      	bne.n	80028ec <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fe fdc0 	bl	800146c <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2203      	movs	r2, #3
 80028f0:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 80028f2:	2300      	movs	r3, #0
 80028f4:	613b      	str	r3, [r7, #16]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002906:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002912:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002916:	613b      	str	r3, [r7, #16]
 8002918:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800291a:	f7ff fb2d 	bl	8001f78 <HAL_GetTick>
 800291e:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002920:	e009      	b.n	8002936 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002922:	f7ff fb29 	bl	8001f78 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002930:	d901      	bls.n	8002936 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e0de      	b.n	8002af4 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800293e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0ed      	beq.n	8002922 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6812      	ldr	r2, [r2, #0]
 8002952:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8002956:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 800295a:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002972:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800297a:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	430a      	orrs	r2, r1
 8002982:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0201 	orr.w	r2, r2, #1
 800299a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 80029ae:	2001      	movs	r0, #1
 80029b0:	f7ff faee 	bl	8001f90 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 80029b4:	f7ff fae0 	bl	8001f78 <HAL_GetTick>
 80029b8:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80029ba:	e009      	b.n	80029d0 <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80029bc:	f7ff fadc 	bl	8001f78 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029ca:	d901      	bls.n	80029d0 <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e091      	b.n	8002af4 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80029d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0ed      	beq.n	80029bc <HAL_DSI_Init+0xf4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f042 0206 	orr.w	r2, r2, #6
 80029f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0203 	bic.w	r2, r2, #3
 8002a04:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	431a      	orrs	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0201 	orr.w	r2, r2, #1
 8002a1e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 0203 	bic.w	r2, r2, #3
 8002a32:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a5a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6899      	ldr	r1, [r3, #8]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d002      	beq.n	8002a7c <HAL_DSI_Init+0x1b4>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	e000      	b.n	8002a7e <HAL_DSI_Init+0x1b6>
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	4a1e      	ldr	r2, [pc, #120]	; (8002afc <HAL_DSI_Init+0x234>)
 8002a84:	fb03 f202 	mul.w	r2, r3, r2
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 0303 	and.w	r3, r3, #3
 8002a90:	409a      	lsls	r2, r3
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8002a9a:	fb01 f303 	mul.w	r3, r1, r3
 8002a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa2:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002ab4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3720      	adds	r7, #32
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	003d0900 	.word	0x003d0900

08002b00 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	7c1b      	ldrb	r3, [r3, #16]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d101      	bne.n	8002b16 <HAL_DSI_ConfigErrorMonitor+0x16>
 8002b12:	2302      	movs	r3, #2
 8002b14:	e0ab      	b.n	8002c6e <HAL_DSI_ConfigErrorMonitor+0x16e>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00b      	beq.n	8002b58 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6812      	ldr	r2, [r2, #0]
 8002b4c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8002b50:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8002b54:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d009      	beq.n	8002b76 <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8002b72:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d009      	beq.n	8002b94 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f042 0201 	orr.w	r2, r2, #1
 8002b90:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d009      	beq.n	8002bb2 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0202 	orr.w	r2, r2, #2
 8002bae:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d009      	beq.n	8002bd0 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f042 020c 	orr.w	r2, r2, #12
 8002bcc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	f003 0320 	and.w	r3, r3, #32
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d009      	beq.n	8002bee <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0210 	orr.w	r2, r2, #16
 8002bea:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d009      	beq.n	8002c0c <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f042 0220 	orr.w	r2, r2, #32
 8002c08:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d009      	beq.n	8002c2a <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c26:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d009      	beq.n	8002c48 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c44:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d009      	beq.n	8002c66 <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8002c62:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b084      	sub	sp, #16
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00f      	beq.n	8002cb2 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d007      	beq.n	8002cb2 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f8ad 	bl	8002e0c <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00f      	beq.n	8002ce2 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d007      	beq.n	8002ce2 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 f89f 	bl	8002e20 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 808c 	beq.w	8002e04 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002cf4:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	4013      	ands	r3, r2
 8002d02:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002d0c:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d005      	beq.n	8002d30 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	f043 0201 	orr.w	r2, r3, #1
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d005      	beq.n	8002d46 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	f043 0202 	orr.w	r2, r3, #2
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d005      	beq.n	8002d5c <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	f043 0204 	orr.w	r2, r3, #4
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d005      	beq.n	8002d72 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	f043 0208 	orr.w	r2, r3, #8
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	f003 030c 	and.w	r3, r3, #12
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d005      	beq.n	8002d88 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	f043 0210 	orr.w	r2, r3, #16
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	f003 0310 	and.w	r3, r3, #16
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d005      	beq.n	8002d9e <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	f043 0220 	orr.w	r2, r3, #32
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	f003 0320 	and.w	r3, r3, #32
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d005      	beq.n	8002db4 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d005      	beq.n	8002dca <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d005      	beq.n	8002de0 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d005      	beq.n	8002df6 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f818 	bl	8002e34 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8002e04:	bf00      	nop
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	7c1b      	ldrb	r3, [r3, #16]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <HAL_DSI_SetGenericVCID+0x16>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e016      	b.n	8002e8c <HAL_DSI_SetGenericVCID+0x44>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0203 	bic.w	r2, r2, #3
 8002e72:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	7c1b      	ldrb	r3, [r3, #16]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e0c5      	b.n	800303a <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0201 	orr.w	r2, r2, #1
 8002ec2:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0201 	bic.w	r2, r2, #1
 8002ed4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f042 0201 	orr.w	r2, r2, #1
 8002ee8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0203 	bic.w	r2, r2, #3
 8002efa:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68d9      	ldr	r1, [r3, #12]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695a      	ldr	r2, [r3, #20]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0207 	bic.w	r2, r2, #7
 8002f1c:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6959      	ldr	r1, [r3, #20]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	69da      	ldr	r2, [r3, #28]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691a      	ldr	r2, [r3, #16]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 020f 	bic.w	r2, r2, #15
 8002f4a:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6919      	ldr	r1, [r3, #16]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 020e 	bic.w	r2, r2, #14
 8002f6e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	005a      	lsls	r2, r3, #1
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6812      	ldr	r2, [r2, #0]
 8002f94:	0c1b      	lsrs	r3, r3, #16
 8002f96:	041b      	lsls	r3, r3, #16
 8002f98:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002fbc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0201 	bic.w	r2, r2, #1
 8002ff6:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0201 	orr.w	r2, r2, #1
 800301a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0202 	orr.w	r2, r2, #2
 800302e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	7c1b      	ldrb	r3, [r3, #16]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_DSI_ConfigCommand+0x16>
 800305a:	2302      	movs	r3, #2
 800305c:	e049      	b.n	80030f2 <HAL_DSI_ConfigCommand+0xaa>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	4b24      	ldr	r3, [pc, #144]	; (8003100 <HAL_DSI_ConfigCommand+0xb8>)
 8003070:	400b      	ands	r3, r1
 8003072:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003082:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8003088:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 800308e:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8003094:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 800309a:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 80030a0:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 80030a6:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 80030ac:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 80030b2:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 80030b8:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 80030be:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0202 	bic.w	r2, r2, #2
 80030d6:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	fef080ff 	.word	0xfef080ff

08003104 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	7c1b      	ldrb	r3, [r3, #16]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d101      	bne.n	800311a <HAL_DSI_ConfigFlowControl+0x16>
 8003116:	2302      	movs	r3, #2
 8003118:	e016      	b.n	8003148 <HAL_DSI_ConfigFlowControl+0x44>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 021f 	bic.w	r2, r2, #31
 800312e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	7c1b      	ldrb	r3, [r3, #16]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d101      	bne.n	800316a <HAL_DSI_ConfigPhyTimer+0x16>
 8003166:	2302      	movs	r3, #2
 8003168:	e058      	b.n	800321c <HAL_DSI_ConfigPhyTimer+0xc8>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	4293      	cmp	r3, r2
 800317a:	bf38      	it	cc
 800317c:	4613      	movcc	r3, r2
 800317e:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8003190:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	041a      	lsls	r2, r3, #16
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80031be:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	691a      	ldr	r2, [r3, #16]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	041b      	lsls	r3, r3, #16
 80031d4:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80031dc:	431a      	orrs	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80031f8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	021a      	lsls	r2, r3, #8
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	7c1b      	ldrb	r3, [r3, #16]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d101      	bne.n	800323e <HAL_DSI_ConfigHostTimeouts+0x16>
 800323a:	2302      	movs	r3, #2
 800323c:	e0b4      	b.n	80033a8 <HAL_DSI_ConfigHostTimeouts+0x180>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003252:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6899      	ldr	r1, [r3, #8]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	021a      	lsls	r2, r3, #8
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	b292      	uxth	r2, r2
 8003274:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	041a      	lsls	r2, r3, #16
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6812      	ldr	r2, [r2, #0]
 8003294:	0c1b      	lsrs	r3, r3, #16
 8003296:	041b      	lsls	r3, r3, #16
 8003298:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6812      	ldr	r2, [r2, #0]
 80032b6:	0c1b      	lsrs	r3, r3, #16
 80032b8:	041b      	lsls	r3, r3, #16
 80032ba:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6812      	ldr	r2, [r2, #0]
 80032da:	0c1b      	lsrs	r3, r3, #16
 80032dc:	041b      	lsls	r3, r3, #16
 80032de:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	691a      	ldr	r2, [r3, #16]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6812      	ldr	r2, [r2, #0]
 8003304:	0c1b      	lsrs	r3, r3, #16
 8003306:	041b      	lsls	r3, r3, #16
 8003308:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	695a      	ldr	r2, [r3, #20]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003332:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	699a      	ldr	r2, [r3, #24]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6812      	ldr	r2, [r2, #0]
 8003358:	0c1b      	lsrs	r3, r3, #16
 800335a:	041b      	lsls	r3, r3, #16
 800335c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	69da      	ldr	r2, [r3, #28]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	6812      	ldr	r2, [r2, #0]
 8003382:	0c1b      	lsrs	r3, r3, #16
 8003384:	041b      	lsls	r3, r3, #16
 8003386:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	6a1a      	ldr	r2, [r3, #32]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	7c1b      	ldrb	r3, [r3, #16]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d101      	bne.n	80033ca <HAL_DSI_SetLowPowerRXFilter+0x16>
 80033c6:	2302      	movs	r3, #2
 80033c8:	e01b      	b.n	8003402 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 80033e0:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	065a      	lsls	r2, r3, #25
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
	...

08003410 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003410:	b480      	push	{r7}
 8003412:	b089      	sub	sp, #36	; 0x24
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800341a:	2300      	movs	r3, #0
 800341c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800341e:	2300      	movs	r3, #0
 8003420:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003422:	2300      	movs	r3, #0
 8003424:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003426:	2300      	movs	r3, #0
 8003428:	61fb      	str	r3, [r7, #28]
 800342a:	e177      	b.n	800371c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800342c:	2201      	movs	r2, #1
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	4013      	ands	r3, r2
 800343e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	429a      	cmp	r2, r3
 8003446:	f040 8166 	bne.w	8003716 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	2b01      	cmp	r3, #1
 8003454:	d005      	beq.n	8003462 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800345e:	2b02      	cmp	r3, #2
 8003460:	d130      	bne.n	80034c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	2203      	movs	r2, #3
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43db      	mvns	r3, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4013      	ands	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	4313      	orrs	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003498:	2201      	movs	r2, #1
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	43db      	mvns	r3, r3
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4013      	ands	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	091b      	lsrs	r3, r3, #4
 80034ae:	f003 0201 	and.w	r2, r3, #1
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f003 0303 	and.w	r3, r3, #3
 80034cc:	2b03      	cmp	r3, #3
 80034ce:	d017      	beq.n	8003500 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	2203      	movs	r2, #3
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	43db      	mvns	r3, r3
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	4013      	ands	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f003 0303 	and.w	r3, r3, #3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d123      	bne.n	8003554 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	08da      	lsrs	r2, r3, #3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3208      	adds	r2, #8
 8003514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003518:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	220f      	movs	r2, #15
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	43db      	mvns	r3, r3
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	4013      	ands	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	691a      	ldr	r2, [r3, #16]
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	4313      	orrs	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	08da      	lsrs	r2, r3, #3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	3208      	adds	r2, #8
 800354e:	69b9      	ldr	r1, [r7, #24]
 8003550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	2203      	movs	r2, #3
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	43db      	mvns	r3, r3
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4013      	ands	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f003 0203 	and.w	r2, r3, #3
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	4313      	orrs	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 80c0 	beq.w	8003716 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003596:	2300      	movs	r3, #0
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	4b66      	ldr	r3, [pc, #408]	; (8003734 <HAL_GPIO_Init+0x324>)
 800359c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359e:	4a65      	ldr	r2, [pc, #404]	; (8003734 <HAL_GPIO_Init+0x324>)
 80035a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035a4:	6453      	str	r3, [r2, #68]	; 0x44
 80035a6:	4b63      	ldr	r3, [pc, #396]	; (8003734 <HAL_GPIO_Init+0x324>)
 80035a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035b2:	4a61      	ldr	r2, [pc, #388]	; (8003738 <HAL_GPIO_Init+0x328>)
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	089b      	lsrs	r3, r3, #2
 80035b8:	3302      	adds	r3, #2
 80035ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	220f      	movs	r2, #15
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	43db      	mvns	r3, r3
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4013      	ands	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a58      	ldr	r2, [pc, #352]	; (800373c <HAL_GPIO_Init+0x32c>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d037      	beq.n	800364e <HAL_GPIO_Init+0x23e>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a57      	ldr	r2, [pc, #348]	; (8003740 <HAL_GPIO_Init+0x330>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d031      	beq.n	800364a <HAL_GPIO_Init+0x23a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a56      	ldr	r2, [pc, #344]	; (8003744 <HAL_GPIO_Init+0x334>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d02b      	beq.n	8003646 <HAL_GPIO_Init+0x236>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a55      	ldr	r2, [pc, #340]	; (8003748 <HAL_GPIO_Init+0x338>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d025      	beq.n	8003642 <HAL_GPIO_Init+0x232>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a54      	ldr	r2, [pc, #336]	; (800374c <HAL_GPIO_Init+0x33c>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d01f      	beq.n	800363e <HAL_GPIO_Init+0x22e>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a53      	ldr	r2, [pc, #332]	; (8003750 <HAL_GPIO_Init+0x340>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d019      	beq.n	800363a <HAL_GPIO_Init+0x22a>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a52      	ldr	r2, [pc, #328]	; (8003754 <HAL_GPIO_Init+0x344>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d013      	beq.n	8003636 <HAL_GPIO_Init+0x226>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a51      	ldr	r2, [pc, #324]	; (8003758 <HAL_GPIO_Init+0x348>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d00d      	beq.n	8003632 <HAL_GPIO_Init+0x222>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a50      	ldr	r2, [pc, #320]	; (800375c <HAL_GPIO_Init+0x34c>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d007      	beq.n	800362e <HAL_GPIO_Init+0x21e>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a4f      	ldr	r2, [pc, #316]	; (8003760 <HAL_GPIO_Init+0x350>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d101      	bne.n	800362a <HAL_GPIO_Init+0x21a>
 8003626:	2309      	movs	r3, #9
 8003628:	e012      	b.n	8003650 <HAL_GPIO_Init+0x240>
 800362a:	230a      	movs	r3, #10
 800362c:	e010      	b.n	8003650 <HAL_GPIO_Init+0x240>
 800362e:	2308      	movs	r3, #8
 8003630:	e00e      	b.n	8003650 <HAL_GPIO_Init+0x240>
 8003632:	2307      	movs	r3, #7
 8003634:	e00c      	b.n	8003650 <HAL_GPIO_Init+0x240>
 8003636:	2306      	movs	r3, #6
 8003638:	e00a      	b.n	8003650 <HAL_GPIO_Init+0x240>
 800363a:	2305      	movs	r3, #5
 800363c:	e008      	b.n	8003650 <HAL_GPIO_Init+0x240>
 800363e:	2304      	movs	r3, #4
 8003640:	e006      	b.n	8003650 <HAL_GPIO_Init+0x240>
 8003642:	2303      	movs	r3, #3
 8003644:	e004      	b.n	8003650 <HAL_GPIO_Init+0x240>
 8003646:	2302      	movs	r3, #2
 8003648:	e002      	b.n	8003650 <HAL_GPIO_Init+0x240>
 800364a:	2301      	movs	r3, #1
 800364c:	e000      	b.n	8003650 <HAL_GPIO_Init+0x240>
 800364e:	2300      	movs	r3, #0
 8003650:	69fa      	ldr	r2, [r7, #28]
 8003652:	f002 0203 	and.w	r2, r2, #3
 8003656:	0092      	lsls	r2, r2, #2
 8003658:	4093      	lsls	r3, r2
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	4313      	orrs	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003660:	4935      	ldr	r1, [pc, #212]	; (8003738 <HAL_GPIO_Init+0x328>)
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	089b      	lsrs	r3, r3, #2
 8003666:	3302      	adds	r3, #2
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800366e:	4b3d      	ldr	r3, [pc, #244]	; (8003764 <HAL_GPIO_Init+0x354>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	43db      	mvns	r3, r3
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	4013      	ands	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	4313      	orrs	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003692:	4a34      	ldr	r2, [pc, #208]	; (8003764 <HAL_GPIO_Init+0x354>)
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003698:	4b32      	ldr	r3, [pc, #200]	; (8003764 <HAL_GPIO_Init+0x354>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	43db      	mvns	r3, r3
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	4013      	ands	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d003      	beq.n	80036bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036bc:	4a29      	ldr	r2, [pc, #164]	; (8003764 <HAL_GPIO_Init+0x354>)
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036c2:	4b28      	ldr	r3, [pc, #160]	; (8003764 <HAL_GPIO_Init+0x354>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	43db      	mvns	r3, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4013      	ands	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036e6:	4a1f      	ldr	r2, [pc, #124]	; (8003764 <HAL_GPIO_Init+0x354>)
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036ec:	4b1d      	ldr	r3, [pc, #116]	; (8003764 <HAL_GPIO_Init+0x354>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	43db      	mvns	r3, r3
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	4013      	ands	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	4313      	orrs	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003710:	4a14      	ldr	r2, [pc, #80]	; (8003764 <HAL_GPIO_Init+0x354>)
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	3301      	adds	r3, #1
 800371a:	61fb      	str	r3, [r7, #28]
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	2b0f      	cmp	r3, #15
 8003720:	f67f ae84 	bls.w	800342c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003724:	bf00      	nop
 8003726:	bf00      	nop
 8003728:	3724      	adds	r7, #36	; 0x24
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	40023800 	.word	0x40023800
 8003738:	40013800 	.word	0x40013800
 800373c:	40020000 	.word	0x40020000
 8003740:	40020400 	.word	0x40020400
 8003744:	40020800 	.word	0x40020800
 8003748:	40020c00 	.word	0x40020c00
 800374c:	40021000 	.word	0x40021000
 8003750:	40021400 	.word	0x40021400
 8003754:	40021800 	.word	0x40021800
 8003758:	40021c00 	.word	0x40021c00
 800375c:	40022000 	.word	0x40022000
 8003760:	40022400 	.word	0x40022400
 8003764:	40013c00 	.word	0x40013c00

08003768 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	460b      	mov	r3, r1
 8003772:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691a      	ldr	r2, [r3, #16]
 8003778:	887b      	ldrh	r3, [r7, #2]
 800377a:	4013      	ands	r3, r2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d002      	beq.n	8003786 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003780:	2301      	movs	r3, #1
 8003782:	73fb      	strb	r3, [r7, #15]
 8003784:	e001      	b.n	800378a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003786:	2300      	movs	r3, #0
 8003788:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800378a:	7bfb      	ldrb	r3, [r7, #15]
}
 800378c:	4618      	mov	r0, r3
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	807b      	strh	r3, [r7, #2]
 80037a4:	4613      	mov	r3, r2
 80037a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037a8:	787b      	ldrb	r3, [r7, #1]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ae:	887a      	ldrh	r2, [r7, #2]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037b4:	e003      	b.n	80037be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037b6:	887b      	ldrh	r3, [r7, #2]
 80037b8:	041a      	lsls	r2, r3, #16
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	619a      	str	r2, [r3, #24]
}
 80037be:	bf00      	nop
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b086      	sub	sp, #24
 80037ce:	af02      	add	r7, sp, #8
 80037d0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e059      	b.n	8003890 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d106      	bne.n	80037fc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f012 f9cc 	bl	8015b94 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2203      	movs	r2, #3
 8003800:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800380a:	d102      	bne.n	8003812 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f006 fe8b 	bl	800a532 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6818      	ldr	r0, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	7c1a      	ldrb	r2, [r3, #16]
 8003824:	f88d 2000 	strb.w	r2, [sp]
 8003828:	3304      	adds	r3, #4
 800382a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800382c:	f006 fe0c 	bl	800a448 <USB_CoreInit>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d005      	beq.n	8003842 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2202      	movs	r2, #2
 800383a:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e026      	b.n	8003890 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2101      	movs	r1, #1
 8003848:	4618      	mov	r0, r3
 800384a:	f006 fe83 	bl	800a554 <USB_SetCurrentMode>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d005      	beq.n	8003860 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e017      	b.n	8003890 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6818      	ldr	r0, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	7c1a      	ldrb	r2, [r3, #16]
 8003868:	f88d 2000 	strb.w	r2, [sp]
 800386c:	3304      	adds	r3, #4
 800386e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003870:	f007 f826 	bl	800a8c0 <USB_HostInit>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d005      	beq.n	8003886 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2202      	movs	r2, #2
 800387e:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e004      	b.n	8003890 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003898:	b590      	push	{r4, r7, lr}
 800389a:	b08b      	sub	sp, #44	; 0x2c
 800389c:	af04      	add	r7, sp, #16
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	4608      	mov	r0, r1
 80038a2:	4611      	mov	r1, r2
 80038a4:	461a      	mov	r2, r3
 80038a6:	4603      	mov	r3, r0
 80038a8:	70fb      	strb	r3, [r7, #3]
 80038aa:	460b      	mov	r3, r1
 80038ac:	70bb      	strb	r3, [r7, #2]
 80038ae:	4613      	mov	r3, r2
 80038b0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80038b2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80038b4:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <HAL_HCD_HC_Init+0x2c>
 80038c0:	2302      	movs	r3, #2
 80038c2:	e09d      	b.n	8003a00 <HAL_HCD_HC_Init+0x168>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80038cc:	78fa      	ldrb	r2, [r7, #3]
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	4613      	mov	r3, r2
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	1a9b      	subs	r3, r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	3319      	adds	r3, #25
 80038dc:	2200      	movs	r2, #0
 80038de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80038e0:	78fa      	ldrb	r2, [r7, #3]
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	4613      	mov	r3, r2
 80038e6:	011b      	lsls	r3, r3, #4
 80038e8:	1a9b      	subs	r3, r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	3314      	adds	r3, #20
 80038f0:	787a      	ldrb	r2, [r7, #1]
 80038f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80038f4:	78fa      	ldrb	r2, [r7, #3]
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	1a9b      	subs	r3, r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	3315      	adds	r3, #21
 8003904:	78fa      	ldrb	r2, [r7, #3]
 8003906:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003908:	78fa      	ldrb	r2, [r7, #3]
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	4613      	mov	r3, r2
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	1a9b      	subs	r3, r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	440b      	add	r3, r1
 8003916:	3326      	adds	r3, #38	; 0x26
 8003918:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800391c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800391e:	78fa      	ldrb	r2, [r7, #3]
 8003920:	78bb      	ldrb	r3, [r7, #2]
 8003922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003926:	b2d8      	uxtb	r0, r3
 8003928:	6879      	ldr	r1, [r7, #4]
 800392a:	4613      	mov	r3, r2
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	1a9b      	subs	r3, r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	440b      	add	r3, r1
 8003934:	3316      	adds	r3, #22
 8003936:	4602      	mov	r2, r0
 8003938:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800393a:	78fb      	ldrb	r3, [r7, #3]
 800393c:	4619      	mov	r1, r3
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 fbc8 	bl	80040d4 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003944:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003948:	2b00      	cmp	r3, #0
 800394a:	da0a      	bge.n	8003962 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800394c:	78fa      	ldrb	r2, [r7, #3]
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	4613      	mov	r3, r2
 8003952:	011b      	lsls	r3, r3, #4
 8003954:	1a9b      	subs	r3, r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	3317      	adds	r3, #23
 800395c:	2201      	movs	r2, #1
 800395e:	701a      	strb	r2, [r3, #0]
 8003960:	e009      	b.n	8003976 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003962:	78fa      	ldrb	r2, [r7, #3]
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	4613      	mov	r3, r2
 8003968:	011b      	lsls	r3, r3, #4
 800396a:	1a9b      	subs	r3, r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	440b      	add	r3, r1
 8003970:	3317      	adds	r3, #23
 8003972:	2200      	movs	r2, #0
 8003974:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f007 f8f8 	bl	800ab70 <USB_GetHostSpeed>
 8003980:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8003982:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003986:	2b01      	cmp	r3, #1
 8003988:	d10b      	bne.n	80039a2 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800398a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800398e:	2b01      	cmp	r3, #1
 8003990:	d107      	bne.n	80039a2 <HAL_HCD_HC_Init+0x10a>
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d104      	bne.n	80039a2 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	2bbc      	cmp	r3, #188	; 0xbc
 800399c:	d901      	bls.n	80039a2 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800399e:	23bc      	movs	r3, #188	; 0xbc
 80039a0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80039a2:	78fa      	ldrb	r2, [r7, #3]
 80039a4:	6879      	ldr	r1, [r7, #4]
 80039a6:	4613      	mov	r3, r2
 80039a8:	011b      	lsls	r3, r3, #4
 80039aa:	1a9b      	subs	r3, r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	440b      	add	r3, r1
 80039b0:	3318      	adds	r3, #24
 80039b2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80039b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80039b8:	78fa      	ldrb	r2, [r7, #3]
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	b298      	uxth	r0, r3
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	4613      	mov	r3, r2
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	1a9b      	subs	r3, r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	3328      	adds	r3, #40	; 0x28
 80039cc:	4602      	mov	r2, r0
 80039ce:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6818      	ldr	r0, [r3, #0]
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	787c      	ldrb	r4, [r7, #1]
 80039da:	78ba      	ldrb	r2, [r7, #2]
 80039dc:	78f9      	ldrb	r1, [r7, #3]
 80039de:	9302      	str	r3, [sp, #8]
 80039e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80039e4:	9301      	str	r3, [sp, #4]
 80039e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	4623      	mov	r3, r4
 80039ee:	f007 f8e7 	bl	800abc0 <USB_HC_Init>
 80039f2:	4603      	mov	r3, r0
 80039f4:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	371c      	adds	r7, #28
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd90      	pop	{r4, r7, pc}

08003a08 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	460b      	mov	r3, r1
 8003a12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003a14:	2300      	movs	r3, #0
 8003a16:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d101      	bne.n	8003a26 <HAL_HCD_HC_Halt+0x1e>
 8003a22:	2302      	movs	r3, #2
 8003a24:	e00f      	b.n	8003a46 <HAL_HCD_HC_Halt+0x3e>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	78fa      	ldrb	r2, [r7, #3]
 8003a34:	4611      	mov	r1, r2
 8003a36:	4618      	mov	r0, r3
 8003a38:	f007 fc79 	bl	800b32e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	4608      	mov	r0, r1
 8003a5a:	4611      	mov	r1, r2
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	4603      	mov	r3, r0
 8003a60:	70fb      	strb	r3, [r7, #3]
 8003a62:	460b      	mov	r3, r1
 8003a64:	70bb      	strb	r3, [r7, #2]
 8003a66:	4613      	mov	r3, r2
 8003a68:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003a6a:	78fa      	ldrb	r2, [r7, #3]
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	1a9b      	subs	r3, r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	440b      	add	r3, r1
 8003a78:	3317      	adds	r3, #23
 8003a7a:	78ba      	ldrb	r2, [r7, #2]
 8003a7c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003a7e:	78fa      	ldrb	r2, [r7, #3]
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	4613      	mov	r3, r2
 8003a84:	011b      	lsls	r3, r3, #4
 8003a86:	1a9b      	subs	r3, r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	3326      	adds	r3, #38	; 0x26
 8003a8e:	787a      	ldrb	r2, [r7, #1]
 8003a90:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003a92:	7c3b      	ldrb	r3, [r7, #16]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d114      	bne.n	8003ac2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003a98:	78fa      	ldrb	r2, [r7, #3]
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	1a9b      	subs	r3, r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	332a      	adds	r3, #42	; 0x2a
 8003aa8:	2203      	movs	r2, #3
 8003aaa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003aac:	78fa      	ldrb	r2, [r7, #3]
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	3319      	adds	r3, #25
 8003abc:	7f3a      	ldrb	r2, [r7, #28]
 8003abe:	701a      	strb	r2, [r3, #0]
 8003ac0:	e009      	b.n	8003ad6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ac2:	78fa      	ldrb	r2, [r7, #3]
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	1a9b      	subs	r3, r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	332a      	adds	r3, #42	; 0x2a
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003ad6:	787b      	ldrb	r3, [r7, #1]
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	f200 8102 	bhi.w	8003ce2 <HAL_HCD_HC_SubmitRequest+0x292>
 8003ade:	a201      	add	r2, pc, #4	; (adr r2, 8003ae4 <HAL_HCD_HC_SubmitRequest+0x94>)
 8003ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae4:	08003af5 	.word	0x08003af5
 8003ae8:	08003ccd 	.word	0x08003ccd
 8003aec:	08003bb9 	.word	0x08003bb9
 8003af0:	08003c43 	.word	0x08003c43
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003af4:	7c3b      	ldrb	r3, [r7, #16]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	f040 80f5 	bne.w	8003ce6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003afc:	78bb      	ldrb	r3, [r7, #2]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d12d      	bne.n	8003b5e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8003b02:	8b3b      	ldrh	r3, [r7, #24]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d109      	bne.n	8003b1c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003b08:	78fa      	ldrb	r2, [r7, #3]
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	1a9b      	subs	r3, r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	440b      	add	r3, r1
 8003b16:	333d      	adds	r3, #61	; 0x3d
 8003b18:	2201      	movs	r2, #1
 8003b1a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003b1c:	78fa      	ldrb	r2, [r7, #3]
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	1a9b      	subs	r3, r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	333d      	adds	r3, #61	; 0x3d
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10a      	bne.n	8003b48 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b32:	78fa      	ldrb	r2, [r7, #3]
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	1a9b      	subs	r3, r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	332a      	adds	r3, #42	; 0x2a
 8003b42:	2200      	movs	r2, #0
 8003b44:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003b46:	e0ce      	b.n	8003ce6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b48:	78fa      	ldrb	r2, [r7, #3]
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	1a9b      	subs	r3, r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	332a      	adds	r3, #42	; 0x2a
 8003b58:	2202      	movs	r2, #2
 8003b5a:	701a      	strb	r2, [r3, #0]
      break;
 8003b5c:	e0c3      	b.n	8003ce6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003b5e:	78fa      	ldrb	r2, [r7, #3]
 8003b60:	6879      	ldr	r1, [r7, #4]
 8003b62:	4613      	mov	r3, r2
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	1a9b      	subs	r3, r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	331a      	adds	r3, #26
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	f040 80b8 	bne.w	8003ce6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003b76:	78fa      	ldrb	r2, [r7, #3]
 8003b78:	6879      	ldr	r1, [r7, #4]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	011b      	lsls	r3, r3, #4
 8003b7e:	1a9b      	subs	r3, r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	440b      	add	r3, r1
 8003b84:	333c      	adds	r3, #60	; 0x3c
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10a      	bne.n	8003ba2 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b8c:	78fa      	ldrb	r2, [r7, #3]
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	4613      	mov	r3, r2
 8003b92:	011b      	lsls	r3, r3, #4
 8003b94:	1a9b      	subs	r3, r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	332a      	adds	r3, #42	; 0x2a
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	701a      	strb	r2, [r3, #0]
      break;
 8003ba0:	e0a1      	b.n	8003ce6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ba2:	78fa      	ldrb	r2, [r7, #3]
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	011b      	lsls	r3, r3, #4
 8003baa:	1a9b      	subs	r3, r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	440b      	add	r3, r1
 8003bb0:	332a      	adds	r3, #42	; 0x2a
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	701a      	strb	r2, [r3, #0]
      break;
 8003bb6:	e096      	b.n	8003ce6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003bb8:	78bb      	ldrb	r3, [r7, #2]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d120      	bne.n	8003c00 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003bbe:	78fa      	ldrb	r2, [r7, #3]
 8003bc0:	6879      	ldr	r1, [r7, #4]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	1a9b      	subs	r3, r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	440b      	add	r3, r1
 8003bcc:	333d      	adds	r3, #61	; 0x3d
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10a      	bne.n	8003bea <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003bd4:	78fa      	ldrb	r2, [r7, #3]
 8003bd6:	6879      	ldr	r1, [r7, #4]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	011b      	lsls	r3, r3, #4
 8003bdc:	1a9b      	subs	r3, r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	332a      	adds	r3, #42	; 0x2a
 8003be4:	2200      	movs	r2, #0
 8003be6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003be8:	e07e      	b.n	8003ce8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003bea:	78fa      	ldrb	r2, [r7, #3]
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	1a9b      	subs	r3, r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	332a      	adds	r3, #42	; 0x2a
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	701a      	strb	r2, [r3, #0]
      break;
 8003bfe:	e073      	b.n	8003ce8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003c00:	78fa      	ldrb	r2, [r7, #3]
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	4613      	mov	r3, r2
 8003c06:	011b      	lsls	r3, r3, #4
 8003c08:	1a9b      	subs	r3, r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	333c      	adds	r3, #60	; 0x3c
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10a      	bne.n	8003c2c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c16:	78fa      	ldrb	r2, [r7, #3]
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	011b      	lsls	r3, r3, #4
 8003c1e:	1a9b      	subs	r3, r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	440b      	add	r3, r1
 8003c24:	332a      	adds	r3, #42	; 0x2a
 8003c26:	2200      	movs	r2, #0
 8003c28:	701a      	strb	r2, [r3, #0]
      break;
 8003c2a:	e05d      	b.n	8003ce8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c2c:	78fa      	ldrb	r2, [r7, #3]
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	4613      	mov	r3, r2
 8003c32:	011b      	lsls	r3, r3, #4
 8003c34:	1a9b      	subs	r3, r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	332a      	adds	r3, #42	; 0x2a
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	701a      	strb	r2, [r3, #0]
      break;
 8003c40:	e052      	b.n	8003ce8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003c42:	78bb      	ldrb	r3, [r7, #2]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d120      	bne.n	8003c8a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003c48:	78fa      	ldrb	r2, [r7, #3]
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	1a9b      	subs	r3, r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	333d      	adds	r3, #61	; 0x3d
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10a      	bne.n	8003c74 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c5e:	78fa      	ldrb	r2, [r7, #3]
 8003c60:	6879      	ldr	r1, [r7, #4]
 8003c62:	4613      	mov	r3, r2
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	1a9b      	subs	r3, r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	440b      	add	r3, r1
 8003c6c:	332a      	adds	r3, #42	; 0x2a
 8003c6e:	2200      	movs	r2, #0
 8003c70:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003c72:	e039      	b.n	8003ce8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c74:	78fa      	ldrb	r2, [r7, #3]
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	1a9b      	subs	r3, r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	332a      	adds	r3, #42	; 0x2a
 8003c84:	2202      	movs	r2, #2
 8003c86:	701a      	strb	r2, [r3, #0]
      break;
 8003c88:	e02e      	b.n	8003ce8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003c8a:	78fa      	ldrb	r2, [r7, #3]
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	1a9b      	subs	r3, r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	440b      	add	r3, r1
 8003c98:	333c      	adds	r3, #60	; 0x3c
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10a      	bne.n	8003cb6 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ca0:	78fa      	ldrb	r2, [r7, #3]
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	1a9b      	subs	r3, r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	332a      	adds	r3, #42	; 0x2a
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	701a      	strb	r2, [r3, #0]
      break;
 8003cb4:	e018      	b.n	8003ce8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003cb6:	78fa      	ldrb	r2, [r7, #3]
 8003cb8:	6879      	ldr	r1, [r7, #4]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	011b      	lsls	r3, r3, #4
 8003cbe:	1a9b      	subs	r3, r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	440b      	add	r3, r1
 8003cc4:	332a      	adds	r3, #42	; 0x2a
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	701a      	strb	r2, [r3, #0]
      break;
 8003cca:	e00d      	b.n	8003ce8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ccc:	78fa      	ldrb	r2, [r7, #3]
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	1a9b      	subs	r3, r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	440b      	add	r3, r1
 8003cda:	332a      	adds	r3, #42	; 0x2a
 8003cdc:	2200      	movs	r2, #0
 8003cde:	701a      	strb	r2, [r3, #0]
      break;
 8003ce0:	e002      	b.n	8003ce8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003ce2:	bf00      	nop
 8003ce4:	e000      	b.n	8003ce8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003ce6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003ce8:	78fa      	ldrb	r2, [r7, #3]
 8003cea:	6879      	ldr	r1, [r7, #4]
 8003cec:	4613      	mov	r3, r2
 8003cee:	011b      	lsls	r3, r3, #4
 8003cf0:	1a9b      	subs	r3, r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	332c      	adds	r3, #44	; 0x2c
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003cfc:	78fa      	ldrb	r2, [r7, #3]
 8003cfe:	8b39      	ldrh	r1, [r7, #24]
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	4613      	mov	r3, r2
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	1a9b      	subs	r3, r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4403      	add	r3, r0
 8003d0c:	3334      	adds	r3, #52	; 0x34
 8003d0e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003d10:	78fa      	ldrb	r2, [r7, #3]
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	4613      	mov	r3, r2
 8003d16:	011b      	lsls	r3, r3, #4
 8003d18:	1a9b      	subs	r3, r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	334c      	adds	r3, #76	; 0x4c
 8003d20:	2200      	movs	r2, #0
 8003d22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003d24:	78fa      	ldrb	r2, [r7, #3]
 8003d26:	6879      	ldr	r1, [r7, #4]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	1a9b      	subs	r3, r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	440b      	add	r3, r1
 8003d32:	3338      	adds	r3, #56	; 0x38
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003d38:	78fa      	ldrb	r2, [r7, #3]
 8003d3a:	6879      	ldr	r1, [r7, #4]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	1a9b      	subs	r3, r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	440b      	add	r3, r1
 8003d46:	3315      	adds	r3, #21
 8003d48:	78fa      	ldrb	r2, [r7, #3]
 8003d4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003d4c:	78fa      	ldrb	r2, [r7, #3]
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	4613      	mov	r3, r2
 8003d52:	011b      	lsls	r3, r3, #4
 8003d54:	1a9b      	subs	r3, r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	440b      	add	r3, r1
 8003d5a:	334d      	adds	r3, #77	; 0x4d
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6818      	ldr	r0, [r3, #0]
 8003d64:	78fa      	ldrb	r2, [r7, #3]
 8003d66:	4613      	mov	r3, r2
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	1a9b      	subs	r3, r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	3310      	adds	r3, #16
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	4413      	add	r3, r2
 8003d74:	1d19      	adds	r1, r3, #4
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	799b      	ldrb	r3, [r3, #6]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	f007 f84c 	bl	800ae18 <USB_HC_StartXfer>
 8003d80:	4603      	mov	r3, r0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop

08003d8c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f006 fd4c 	bl	800a840 <USB_GetMode>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	f040 80fb 	bne.w	8003fa6 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f006 fd0f 	bl	800a7d8 <USB_ReadInterrupts>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 80f1 	beq.w	8003fa4 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f006 fd06 	bl	800a7d8 <USB_ReadInterrupts>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dd6:	d104      	bne.n	8003de2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003de0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f006 fcf6 	bl	800a7d8 <USB_ReadInterrupts>
 8003dec:	4603      	mov	r3, r0
 8003dee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003df2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003df6:	d104      	bne.n	8003e02 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003e00:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f006 fce6 	bl	800a7d8 <USB_ReadInterrupts>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e16:	d104      	bne.n	8003e22 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003e20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f006 fcd6 	bl	800a7d8 <USB_ReadInterrupts>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d103      	bne.n	8003e3e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f006 fcc8 	bl	800a7d8 <USB_ReadInterrupts>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e52:	d120      	bne.n	8003e96 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003e5c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d113      	bne.n	8003e96 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003e6e:	2110      	movs	r1, #16
 8003e70:	6938      	ldr	r0, [r7, #16]
 8003e72:	f006 fbbb 	bl	800a5ec <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003e76:	6938      	ldr	r0, [r7, #16]
 8003e78:	f006 fbea 	bl	800a650 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	7a5b      	ldrb	r3, [r3, #9]
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d105      	bne.n	8003e90 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2101      	movs	r1, #1
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f006 fdd0 	bl	800aa30 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f011 fefd 	bl	8015c90 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f006 fc9c 	bl	800a7d8 <USB_ReadInterrupts>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ea6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003eaa:	d102      	bne.n	8003eb2 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f001 fd33 	bl	8005918 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f006 fc8e 	bl	800a7d8 <USB_ReadInterrupts>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b08      	cmp	r3, #8
 8003ec4:	d106      	bne.n	8003ed4 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f011 fec6 	bl	8015c58 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2208      	movs	r2, #8
 8003ed2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f006 fc7d 	bl	800a7d8 <USB_ReadInterrupts>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ee8:	d139      	bne.n	8003f5e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f007 fa0c 	bl	800b30c <USB_HC_ReadInterrupt>
 8003ef4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	e025      	b.n	8003f48 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	fa22 f303 	lsr.w	r3, r2, r3
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d018      	beq.n	8003f42 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	015a      	lsls	r2, r3, #5
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4413      	add	r3, r2
 8003f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f26:	d106      	bne.n	8003f36 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f905 	bl	800413e <HCD_HC_IN_IRQHandler>
 8003f34:	e005      	b.n	8003f42 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 ff67 	bl	8004e10 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	3301      	adds	r3, #1
 8003f46:	617b      	str	r3, [r7, #20]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	795b      	ldrb	r3, [r3, #5]
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d3d3      	bcc.n	8003efc <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f006 fc38 	bl	800a7d8 <USB_ReadInterrupts>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	f003 0310 	and.w	r3, r3, #16
 8003f6e:	2b10      	cmp	r3, #16
 8003f70:	d101      	bne.n	8003f76 <HAL_HCD_IRQHandler+0x1ea>
 8003f72:	2301      	movs	r3, #1
 8003f74:	e000      	b.n	8003f78 <HAL_HCD_IRQHandler+0x1ec>
 8003f76:	2300      	movs	r3, #0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d014      	beq.n	8003fa6 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	699a      	ldr	r2, [r3, #24]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0210 	bic.w	r2, r2, #16
 8003f8a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f001 fbe4 	bl	800575a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	699a      	ldr	r2, [r3, #24]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f042 0210 	orr.w	r2, r2, #16
 8003fa0:	619a      	str	r2, [r3, #24]
 8003fa2:	e000      	b.n	8003fa6 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003fa4:	bf00      	nop
    }
  }
}
 8003fa6:	3718      	adds	r7, #24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d101      	bne.n	8003fc2 <HAL_HCD_Start+0x16>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	e013      	b.n	8003fea <HAL_HCD_Start+0x3e>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2101      	movs	r1, #1
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f006 fd94 	bl	800aafe <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f006 fa98 	bl	800a510 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b082      	sub	sp, #8
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8004000:	2b01      	cmp	r3, #1
 8004002:	d101      	bne.n	8004008 <HAL_HCD_Stop+0x16>
 8004004:	2302      	movs	r3, #2
 8004006:	e00d      	b.n	8004024 <HAL_HCD_Stop+0x32>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4618      	mov	r0, r3
 8004016:	f007 fae7 	bl	800b5e8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4618      	mov	r0, r3
 800403a:	f006 fd36 	bl	800aaaa <USB_ResetPort>
 800403e:	4603      	mov	r3, r0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	460b      	mov	r3, r1
 8004052:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004054:	78fa      	ldrb	r2, [r7, #3]
 8004056:	6879      	ldr	r1, [r7, #4]
 8004058:	4613      	mov	r3, r2
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	1a9b      	subs	r3, r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	440b      	add	r3, r1
 8004062:	334c      	adds	r3, #76	; 0x4c
 8004064:	781b      	ldrb	r3, [r3, #0]
}
 8004066:	4618      	mov	r0, r3
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
 800407a:	460b      	mov	r3, r1
 800407c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800407e:	78fa      	ldrb	r2, [r7, #3]
 8004080:	6879      	ldr	r1, [r7, #4]
 8004082:	4613      	mov	r3, r2
 8004084:	011b      	lsls	r3, r3, #4
 8004086:	1a9b      	subs	r3, r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	440b      	add	r3, r1
 800408c:	3338      	adds	r3, #56	; 0x38
 800408e:	681b      	ldr	r3, [r3, #0]
}
 8004090:	4618      	mov	r0, r3
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f006 fd78 	bl	800ab9e <USB_GetCurrentFrame>
 80040ae:	4603      	mov	r3, r0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f006 fd53 	bl	800ab70 <USB_GetHostSpeed>
 80040ca:	4603      	mov	r3, r0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	460b      	mov	r3, r1
 80040de:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80040e0:	78fa      	ldrb	r2, [r7, #3]
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	4613      	mov	r3, r2
 80040e6:	011b      	lsls	r3, r3, #4
 80040e8:	1a9b      	subs	r3, r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	440b      	add	r3, r1
 80040ee:	331a      	adds	r3, #26
 80040f0:	2200      	movs	r2, #0
 80040f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80040f4:	78fa      	ldrb	r2, [r7, #3]
 80040f6:	6879      	ldr	r1, [r7, #4]
 80040f8:	4613      	mov	r3, r2
 80040fa:	011b      	lsls	r3, r3, #4
 80040fc:	1a9b      	subs	r3, r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	440b      	add	r3, r1
 8004102:	331b      	adds	r3, #27
 8004104:	2200      	movs	r2, #0
 8004106:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8004108:	78fa      	ldrb	r2, [r7, #3]
 800410a:	6879      	ldr	r1, [r7, #4]
 800410c:	4613      	mov	r3, r2
 800410e:	011b      	lsls	r3, r3, #4
 8004110:	1a9b      	subs	r3, r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	440b      	add	r3, r1
 8004116:	3325      	adds	r3, #37	; 0x25
 8004118:	2200      	movs	r2, #0
 800411a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 800411c:	78fa      	ldrb	r2, [r7, #3]
 800411e:	6879      	ldr	r1, [r7, #4]
 8004120:	4613      	mov	r3, r2
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	1a9b      	subs	r3, r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	440b      	add	r3, r1
 800412a:	3324      	adds	r3, #36	; 0x24
 800412c:	2200      	movs	r2, #0
 800412e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b086      	sub	sp, #24
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
 8004146:	460b      	mov	r3, r1
 8004148:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	78fa      	ldrb	r2, [r7, #3]
 800415a:	4611      	mov	r1, r2
 800415c:	4618      	mov	r0, r3
 800415e:	f006 fb4e 	bl	800a7fe <USB_ReadChInterrupts>
 8004162:	4603      	mov	r3, r0
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b04      	cmp	r3, #4
 800416a:	d11a      	bne.n	80041a2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800416c:	78fb      	ldrb	r3, [r7, #3]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	4413      	add	r3, r2
 8004174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004178:	461a      	mov	r2, r3
 800417a:	2304      	movs	r3, #4
 800417c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800417e:	78fa      	ldrb	r2, [r7, #3]
 8004180:	6879      	ldr	r1, [r7, #4]
 8004182:	4613      	mov	r3, r2
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	1a9b      	subs	r3, r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	440b      	add	r3, r1
 800418c:	334d      	adds	r3, #77	; 0x4d
 800418e:	2207      	movs	r2, #7
 8004190:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	78fa      	ldrb	r2, [r7, #3]
 8004198:	4611      	mov	r1, r2
 800419a:	4618      	mov	r0, r3
 800419c:	f007 f8c7 	bl	800b32e <USB_HC_Halt>
 80041a0:	e09e      	b.n	80042e0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	78fa      	ldrb	r2, [r7, #3]
 80041a8:	4611      	mov	r1, r2
 80041aa:	4618      	mov	r0, r3
 80041ac:	f006 fb27 	bl	800a7fe <USB_ReadChInterrupts>
 80041b0:	4603      	mov	r3, r0
 80041b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ba:	d11b      	bne.n	80041f4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80041bc:	78fb      	ldrb	r3, [r7, #3]
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c8:	461a      	mov	r2, r3
 80041ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80041d0:	78fa      	ldrb	r2, [r7, #3]
 80041d2:	6879      	ldr	r1, [r7, #4]
 80041d4:	4613      	mov	r3, r2
 80041d6:	011b      	lsls	r3, r3, #4
 80041d8:	1a9b      	subs	r3, r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	334d      	adds	r3, #77	; 0x4d
 80041e0:	2208      	movs	r2, #8
 80041e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	78fa      	ldrb	r2, [r7, #3]
 80041ea:	4611      	mov	r1, r2
 80041ec:	4618      	mov	r0, r3
 80041ee:	f007 f89e 	bl	800b32e <USB_HC_Halt>
 80041f2:	e075      	b.n	80042e0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	78fa      	ldrb	r2, [r7, #3]
 80041fa:	4611      	mov	r1, r2
 80041fc:	4618      	mov	r0, r3
 80041fe:	f006 fafe 	bl	800a7fe <USB_ReadChInterrupts>
 8004202:	4603      	mov	r3, r0
 8004204:	f003 0308 	and.w	r3, r3, #8
 8004208:	2b08      	cmp	r3, #8
 800420a:	d11a      	bne.n	8004242 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800420c:	78fb      	ldrb	r3, [r7, #3]
 800420e:	015a      	lsls	r2, r3, #5
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	4413      	add	r3, r2
 8004214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004218:	461a      	mov	r2, r3
 800421a:	2308      	movs	r3, #8
 800421c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800421e:	78fa      	ldrb	r2, [r7, #3]
 8004220:	6879      	ldr	r1, [r7, #4]
 8004222:	4613      	mov	r3, r2
 8004224:	011b      	lsls	r3, r3, #4
 8004226:	1a9b      	subs	r3, r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	440b      	add	r3, r1
 800422c:	334d      	adds	r3, #77	; 0x4d
 800422e:	2206      	movs	r2, #6
 8004230:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	78fa      	ldrb	r2, [r7, #3]
 8004238:	4611      	mov	r1, r2
 800423a:	4618      	mov	r0, r3
 800423c:	f007 f877 	bl	800b32e <USB_HC_Halt>
 8004240:	e04e      	b.n	80042e0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	78fa      	ldrb	r2, [r7, #3]
 8004248:	4611      	mov	r1, r2
 800424a:	4618      	mov	r0, r3
 800424c:	f006 fad7 	bl	800a7fe <USB_ReadChInterrupts>
 8004250:	4603      	mov	r3, r0
 8004252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800425a:	d11b      	bne.n	8004294 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800425c:	78fb      	ldrb	r3, [r7, #3]
 800425e:	015a      	lsls	r2, r3, #5
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	4413      	add	r3, r2
 8004264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004268:	461a      	mov	r2, r3
 800426a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800426e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004270:	78fa      	ldrb	r2, [r7, #3]
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	4613      	mov	r3, r2
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	1a9b      	subs	r3, r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	440b      	add	r3, r1
 800427e:	334d      	adds	r3, #77	; 0x4d
 8004280:	2209      	movs	r2, #9
 8004282:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	78fa      	ldrb	r2, [r7, #3]
 800428a:	4611      	mov	r1, r2
 800428c:	4618      	mov	r0, r3
 800428e:	f007 f84e 	bl	800b32e <USB_HC_Halt>
 8004292:	e025      	b.n	80042e0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	78fa      	ldrb	r2, [r7, #3]
 800429a:	4611      	mov	r1, r2
 800429c:	4618      	mov	r0, r3
 800429e:	f006 faae 	bl	800a7fe <USB_ReadChInterrupts>
 80042a2:	4603      	mov	r3, r0
 80042a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a8:	2b80      	cmp	r3, #128	; 0x80
 80042aa:	d119      	bne.n	80042e0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80042ac:	78fb      	ldrb	r3, [r7, #3]
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042b8:	461a      	mov	r2, r3
 80042ba:	2380      	movs	r3, #128	; 0x80
 80042bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80042be:	78fa      	ldrb	r2, [r7, #3]
 80042c0:	6879      	ldr	r1, [r7, #4]
 80042c2:	4613      	mov	r3, r2
 80042c4:	011b      	lsls	r3, r3, #4
 80042c6:	1a9b      	subs	r3, r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	440b      	add	r3, r1
 80042cc:	334d      	adds	r3, #77	; 0x4d
 80042ce:	2207      	movs	r2, #7
 80042d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	78fa      	ldrb	r2, [r7, #3]
 80042d8:	4611      	mov	r1, r2
 80042da:	4618      	mov	r0, r3
 80042dc:	f007 f827 	bl	800b32e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	78fa      	ldrb	r2, [r7, #3]
 80042e6:	4611      	mov	r1, r2
 80042e8:	4618      	mov	r0, r3
 80042ea:	f006 fa88 	bl	800a7fe <USB_ReadChInterrupts>
 80042ee:	4603      	mov	r3, r0
 80042f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042f8:	d112      	bne.n	8004320 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	78fa      	ldrb	r2, [r7, #3]
 8004300:	4611      	mov	r1, r2
 8004302:	4618      	mov	r0, r3
 8004304:	f007 f813 	bl	800b32e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004308:	78fb      	ldrb	r3, [r7, #3]
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	4413      	add	r3, r2
 8004310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004314:	461a      	mov	r2, r3
 8004316:	f44f 7300 	mov.w	r3, #512	; 0x200
 800431a:	6093      	str	r3, [r2, #8]
 800431c:	f000 bd75 	b.w	8004e0a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	78fa      	ldrb	r2, [r7, #3]
 8004326:	4611      	mov	r1, r2
 8004328:	4618      	mov	r0, r3
 800432a:	f006 fa68 	bl	800a7fe <USB_ReadChInterrupts>
 800432e:	4603      	mov	r3, r0
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b01      	cmp	r3, #1
 8004336:	f040 8128 	bne.w	800458a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800433a:	78fb      	ldrb	r3, [r7, #3]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	4413      	add	r3, r2
 8004342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004346:	461a      	mov	r2, r3
 8004348:	2320      	movs	r3, #32
 800434a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800434c:	78fa      	ldrb	r2, [r7, #3]
 800434e:	6879      	ldr	r1, [r7, #4]
 8004350:	4613      	mov	r3, r2
 8004352:	011b      	lsls	r3, r3, #4
 8004354:	1a9b      	subs	r3, r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	440b      	add	r3, r1
 800435a:	331b      	adds	r3, #27
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d119      	bne.n	8004396 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004362:	78fa      	ldrb	r2, [r7, #3]
 8004364:	6879      	ldr	r1, [r7, #4]
 8004366:	4613      	mov	r3, r2
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	1a9b      	subs	r3, r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	440b      	add	r3, r1
 8004370:	331b      	adds	r3, #27
 8004372:	2200      	movs	r2, #0
 8004374:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004376:	78fb      	ldrb	r3, [r7, #3]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	4413      	add	r3, r2
 800437e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	78fa      	ldrb	r2, [r7, #3]
 8004386:	0151      	lsls	r1, r2, #5
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	440a      	add	r2, r1
 800438c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004394:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	799b      	ldrb	r3, [r3, #6]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d01b      	beq.n	80043d6 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800439e:	78fa      	ldrb	r2, [r7, #3]
 80043a0:	6879      	ldr	r1, [r7, #4]
 80043a2:	4613      	mov	r3, r2
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	1a9b      	subs	r3, r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	440b      	add	r3, r1
 80043ac:	3330      	adds	r3, #48	; 0x30
 80043ae:	6819      	ldr	r1, [r3, #0]
 80043b0:	78fb      	ldrb	r3, [r7, #3]
 80043b2:	015a      	lsls	r2, r3, #5
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	4413      	add	r3, r2
 80043b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043c2:	78fa      	ldrb	r2, [r7, #3]
 80043c4:	1ac9      	subs	r1, r1, r3
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	4613      	mov	r3, r2
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	1a9b      	subs	r3, r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4403      	add	r3, r0
 80043d2:	3338      	adds	r3, #56	; 0x38
 80043d4:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80043d6:	78fa      	ldrb	r2, [r7, #3]
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	4613      	mov	r3, r2
 80043dc:	011b      	lsls	r3, r3, #4
 80043de:	1a9b      	subs	r3, r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	440b      	add	r3, r1
 80043e4:	334d      	adds	r3, #77	; 0x4d
 80043e6:	2201      	movs	r2, #1
 80043e8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80043ea:	78fa      	ldrb	r2, [r7, #3]
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	4613      	mov	r3, r2
 80043f0:	011b      	lsls	r3, r3, #4
 80043f2:	1a9b      	subs	r3, r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	440b      	add	r3, r1
 80043f8:	3344      	adds	r3, #68	; 0x44
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80043fe:	78fb      	ldrb	r3, [r7, #3]
 8004400:	015a      	lsls	r2, r3, #5
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	4413      	add	r3, r2
 8004406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800440a:	461a      	mov	r2, r3
 800440c:	2301      	movs	r3, #1
 800440e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004410:	78fa      	ldrb	r2, [r7, #3]
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	4613      	mov	r3, r2
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	1a9b      	subs	r3, r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	3326      	adds	r3, #38	; 0x26
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00a      	beq.n	800443c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004426:	78fa      	ldrb	r2, [r7, #3]
 8004428:	6879      	ldr	r1, [r7, #4]
 800442a:	4613      	mov	r3, r2
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	1a9b      	subs	r3, r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	440b      	add	r3, r1
 8004434:	3326      	adds	r3, #38	; 0x26
 8004436:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004438:	2b02      	cmp	r3, #2
 800443a:	d110      	bne.n	800445e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	78fa      	ldrb	r2, [r7, #3]
 8004442:	4611      	mov	r1, r2
 8004444:	4618      	mov	r0, r3
 8004446:	f006 ff72 	bl	800b32e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800444a:	78fb      	ldrb	r3, [r7, #3]
 800444c:	015a      	lsls	r2, r3, #5
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	4413      	add	r3, r2
 8004452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004456:	461a      	mov	r2, r3
 8004458:	2310      	movs	r3, #16
 800445a:	6093      	str	r3, [r2, #8]
 800445c:	e03d      	b.n	80044da <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800445e:	78fa      	ldrb	r2, [r7, #3]
 8004460:	6879      	ldr	r1, [r7, #4]
 8004462:	4613      	mov	r3, r2
 8004464:	011b      	lsls	r3, r3, #4
 8004466:	1a9b      	subs	r3, r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	440b      	add	r3, r1
 800446c:	3326      	adds	r3, #38	; 0x26
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	2b03      	cmp	r3, #3
 8004472:	d00a      	beq.n	800448a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004474:	78fa      	ldrb	r2, [r7, #3]
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	4613      	mov	r3, r2
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	1a9b      	subs	r3, r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	440b      	add	r3, r1
 8004482:	3326      	adds	r3, #38	; 0x26
 8004484:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004486:	2b01      	cmp	r3, #1
 8004488:	d127      	bne.n	80044da <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800448a:	78fb      	ldrb	r3, [r7, #3]
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	4413      	add	r3, r2
 8004492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	78fa      	ldrb	r2, [r7, #3]
 800449a:	0151      	lsls	r1, r2, #5
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	440a      	add	r2, r1
 80044a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044a8:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80044aa:	78fa      	ldrb	r2, [r7, #3]
 80044ac:	6879      	ldr	r1, [r7, #4]
 80044ae:	4613      	mov	r3, r2
 80044b0:	011b      	lsls	r3, r3, #4
 80044b2:	1a9b      	subs	r3, r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	440b      	add	r3, r1
 80044b8:	334c      	adds	r3, #76	; 0x4c
 80044ba:	2201      	movs	r2, #1
 80044bc:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80044be:	78fa      	ldrb	r2, [r7, #3]
 80044c0:	6879      	ldr	r1, [r7, #4]
 80044c2:	4613      	mov	r3, r2
 80044c4:	011b      	lsls	r3, r3, #4
 80044c6:	1a9b      	subs	r3, r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	440b      	add	r3, r1
 80044cc:	334c      	adds	r3, #76	; 0x4c
 80044ce:	781a      	ldrb	r2, [r3, #0]
 80044d0:	78fb      	ldrb	r3, [r7, #3]
 80044d2:	4619      	mov	r1, r3
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f011 fbe9 	bl	8015cac <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	799b      	ldrb	r3, [r3, #6]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d13b      	bne.n	800455a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80044e2:	78fa      	ldrb	r2, [r7, #3]
 80044e4:	6879      	ldr	r1, [r7, #4]
 80044e6:	4613      	mov	r3, r2
 80044e8:	011b      	lsls	r3, r3, #4
 80044ea:	1a9b      	subs	r3, r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	440b      	add	r3, r1
 80044f0:	3338      	adds	r3, #56	; 0x38
 80044f2:	6819      	ldr	r1, [r3, #0]
 80044f4:	78fa      	ldrb	r2, [r7, #3]
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	4613      	mov	r3, r2
 80044fa:	011b      	lsls	r3, r3, #4
 80044fc:	1a9b      	subs	r3, r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4403      	add	r3, r0
 8004502:	3328      	adds	r3, #40	; 0x28
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	440b      	add	r3, r1
 8004508:	1e59      	subs	r1, r3, #1
 800450a:	78fa      	ldrb	r2, [r7, #3]
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	4613      	mov	r3, r2
 8004510:	011b      	lsls	r3, r3, #4
 8004512:	1a9b      	subs	r3, r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4403      	add	r3, r0
 8004518:	3328      	adds	r3, #40	; 0x28
 800451a:	881b      	ldrh	r3, [r3, #0]
 800451c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 8470 	beq.w	8004e0a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800452a:	78fa      	ldrb	r2, [r7, #3]
 800452c:	6879      	ldr	r1, [r7, #4]
 800452e:	4613      	mov	r3, r2
 8004530:	011b      	lsls	r3, r3, #4
 8004532:	1a9b      	subs	r3, r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	440b      	add	r3, r1
 8004538:	333c      	adds	r3, #60	; 0x3c
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	78fa      	ldrb	r2, [r7, #3]
 800453e:	f083 0301 	eor.w	r3, r3, #1
 8004542:	b2d8      	uxtb	r0, r3
 8004544:	6879      	ldr	r1, [r7, #4]
 8004546:	4613      	mov	r3, r2
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	1a9b      	subs	r3, r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	440b      	add	r3, r1
 8004550:	333c      	adds	r3, #60	; 0x3c
 8004552:	4602      	mov	r2, r0
 8004554:	701a      	strb	r2, [r3, #0]
 8004556:	f000 bc58 	b.w	8004e0a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800455a:	78fa      	ldrb	r2, [r7, #3]
 800455c:	6879      	ldr	r1, [r7, #4]
 800455e:	4613      	mov	r3, r2
 8004560:	011b      	lsls	r3, r3, #4
 8004562:	1a9b      	subs	r3, r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	440b      	add	r3, r1
 8004568:	333c      	adds	r3, #60	; 0x3c
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	78fa      	ldrb	r2, [r7, #3]
 800456e:	f083 0301 	eor.w	r3, r3, #1
 8004572:	b2d8      	uxtb	r0, r3
 8004574:	6879      	ldr	r1, [r7, #4]
 8004576:	4613      	mov	r3, r2
 8004578:	011b      	lsls	r3, r3, #4
 800457a:	1a9b      	subs	r3, r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	440b      	add	r3, r1
 8004580:	333c      	adds	r3, #60	; 0x3c
 8004582:	4602      	mov	r2, r0
 8004584:	701a      	strb	r2, [r3, #0]
 8004586:	f000 bc40 	b.w	8004e0a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	78fa      	ldrb	r2, [r7, #3]
 8004590:	4611      	mov	r1, r2
 8004592:	4618      	mov	r0, r3
 8004594:	f006 f933 	bl	800a7fe <USB_ReadChInterrupts>
 8004598:	4603      	mov	r3, r0
 800459a:	f003 0320 	and.w	r3, r3, #32
 800459e:	2b20      	cmp	r3, #32
 80045a0:	d131      	bne.n	8004606 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80045a2:	78fb      	ldrb	r3, [r7, #3]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ae:	461a      	mov	r2, r3
 80045b0:	2320      	movs	r3, #32
 80045b2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80045b4:	78fa      	ldrb	r2, [r7, #3]
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	4613      	mov	r3, r2
 80045ba:	011b      	lsls	r3, r3, #4
 80045bc:	1a9b      	subs	r3, r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	440b      	add	r3, r1
 80045c2:	331a      	adds	r3, #26
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	f040 841f 	bne.w	8004e0a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80045cc:	78fa      	ldrb	r2, [r7, #3]
 80045ce:	6879      	ldr	r1, [r7, #4]
 80045d0:	4613      	mov	r3, r2
 80045d2:	011b      	lsls	r3, r3, #4
 80045d4:	1a9b      	subs	r3, r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	440b      	add	r3, r1
 80045da:	331b      	adds	r3, #27
 80045dc:	2201      	movs	r2, #1
 80045de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80045e0:	78fa      	ldrb	r2, [r7, #3]
 80045e2:	6879      	ldr	r1, [r7, #4]
 80045e4:	4613      	mov	r3, r2
 80045e6:	011b      	lsls	r3, r3, #4
 80045e8:	1a9b      	subs	r3, r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	440b      	add	r3, r1
 80045ee:	334d      	adds	r3, #77	; 0x4d
 80045f0:	2203      	movs	r2, #3
 80045f2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	78fa      	ldrb	r2, [r7, #3]
 80045fa:	4611      	mov	r1, r2
 80045fc:	4618      	mov	r0, r3
 80045fe:	f006 fe96 	bl	800b32e <USB_HC_Halt>
 8004602:	f000 bc02 	b.w	8004e0a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	78fa      	ldrb	r2, [r7, #3]
 800460c:	4611      	mov	r1, r2
 800460e:	4618      	mov	r0, r3
 8004610:	f006 f8f5 	bl	800a7fe <USB_ReadChInterrupts>
 8004614:	4603      	mov	r3, r0
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b02      	cmp	r3, #2
 800461c:	f040 8305 	bne.w	8004c2a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004620:	78fb      	ldrb	r3, [r7, #3]
 8004622:	015a      	lsls	r2, r3, #5
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	4413      	add	r3, r2
 8004628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800462c:	461a      	mov	r2, r3
 800462e:	2302      	movs	r3, #2
 8004630:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004632:	78fa      	ldrb	r2, [r7, #3]
 8004634:	6879      	ldr	r1, [r7, #4]
 8004636:	4613      	mov	r3, r2
 8004638:	011b      	lsls	r3, r3, #4
 800463a:	1a9b      	subs	r3, r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	440b      	add	r3, r1
 8004640:	334d      	adds	r3, #77	; 0x4d
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d114      	bne.n	8004672 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004648:	78fa      	ldrb	r2, [r7, #3]
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	4613      	mov	r3, r2
 800464e:	011b      	lsls	r3, r3, #4
 8004650:	1a9b      	subs	r3, r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	334d      	adds	r3, #77	; 0x4d
 8004658:	2202      	movs	r2, #2
 800465a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800465c:	78fa      	ldrb	r2, [r7, #3]
 800465e:	6879      	ldr	r1, [r7, #4]
 8004660:	4613      	mov	r3, r2
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	1a9b      	subs	r3, r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	440b      	add	r3, r1
 800466a:	334c      	adds	r3, #76	; 0x4c
 800466c:	2201      	movs	r2, #1
 800466e:	701a      	strb	r2, [r3, #0]
 8004670:	e2cc      	b.n	8004c0c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004672:	78fa      	ldrb	r2, [r7, #3]
 8004674:	6879      	ldr	r1, [r7, #4]
 8004676:	4613      	mov	r3, r2
 8004678:	011b      	lsls	r3, r3, #4
 800467a:	1a9b      	subs	r3, r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	440b      	add	r3, r1
 8004680:	334d      	adds	r3, #77	; 0x4d
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	2b06      	cmp	r3, #6
 8004686:	d114      	bne.n	80046b2 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004688:	78fa      	ldrb	r2, [r7, #3]
 800468a:	6879      	ldr	r1, [r7, #4]
 800468c:	4613      	mov	r3, r2
 800468e:	011b      	lsls	r3, r3, #4
 8004690:	1a9b      	subs	r3, r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	440b      	add	r3, r1
 8004696:	334d      	adds	r3, #77	; 0x4d
 8004698:	2202      	movs	r2, #2
 800469a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800469c:	78fa      	ldrb	r2, [r7, #3]
 800469e:	6879      	ldr	r1, [r7, #4]
 80046a0:	4613      	mov	r3, r2
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	1a9b      	subs	r3, r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	334c      	adds	r3, #76	; 0x4c
 80046ac:	2205      	movs	r2, #5
 80046ae:	701a      	strb	r2, [r3, #0]
 80046b0:	e2ac      	b.n	8004c0c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80046b2:	78fa      	ldrb	r2, [r7, #3]
 80046b4:	6879      	ldr	r1, [r7, #4]
 80046b6:	4613      	mov	r3, r2
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	1a9b      	subs	r3, r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	440b      	add	r3, r1
 80046c0:	334d      	adds	r3, #77	; 0x4d
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	2b07      	cmp	r3, #7
 80046c6:	d00b      	beq.n	80046e0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80046c8:	78fa      	ldrb	r2, [r7, #3]
 80046ca:	6879      	ldr	r1, [r7, #4]
 80046cc:	4613      	mov	r3, r2
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	1a9b      	subs	r3, r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	440b      	add	r3, r1
 80046d6:	334d      	adds	r3, #77	; 0x4d
 80046d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80046da:	2b09      	cmp	r3, #9
 80046dc:	f040 80a6 	bne.w	800482c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80046e0:	78fa      	ldrb	r2, [r7, #3]
 80046e2:	6879      	ldr	r1, [r7, #4]
 80046e4:	4613      	mov	r3, r2
 80046e6:	011b      	lsls	r3, r3, #4
 80046e8:	1a9b      	subs	r3, r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	440b      	add	r3, r1
 80046ee:	334d      	adds	r3, #77	; 0x4d
 80046f0:	2202      	movs	r2, #2
 80046f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80046f4:	78fa      	ldrb	r2, [r7, #3]
 80046f6:	6879      	ldr	r1, [r7, #4]
 80046f8:	4613      	mov	r3, r2
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	1a9b      	subs	r3, r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	440b      	add	r3, r1
 8004702:	3344      	adds	r3, #68	; 0x44
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	1c59      	adds	r1, r3, #1
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	4613      	mov	r3, r2
 800470c:	011b      	lsls	r3, r3, #4
 800470e:	1a9b      	subs	r3, r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4403      	add	r3, r0
 8004714:	3344      	adds	r3, #68	; 0x44
 8004716:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004718:	78fa      	ldrb	r2, [r7, #3]
 800471a:	6879      	ldr	r1, [r7, #4]
 800471c:	4613      	mov	r3, r2
 800471e:	011b      	lsls	r3, r3, #4
 8004720:	1a9b      	subs	r3, r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	440b      	add	r3, r1
 8004726:	3344      	adds	r3, #68	; 0x44
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b02      	cmp	r3, #2
 800472c:	d943      	bls.n	80047b6 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800472e:	78fa      	ldrb	r2, [r7, #3]
 8004730:	6879      	ldr	r1, [r7, #4]
 8004732:	4613      	mov	r3, r2
 8004734:	011b      	lsls	r3, r3, #4
 8004736:	1a9b      	subs	r3, r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	440b      	add	r3, r1
 800473c:	3344      	adds	r3, #68	; 0x44
 800473e:	2200      	movs	r2, #0
 8004740:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8004742:	78fa      	ldrb	r2, [r7, #3]
 8004744:	6879      	ldr	r1, [r7, #4]
 8004746:	4613      	mov	r3, r2
 8004748:	011b      	lsls	r3, r3, #4
 800474a:	1a9b      	subs	r3, r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	440b      	add	r3, r1
 8004750:	331a      	adds	r3, #26
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d123      	bne.n	80047a0 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004758:	78fa      	ldrb	r2, [r7, #3]
 800475a:	6879      	ldr	r1, [r7, #4]
 800475c:	4613      	mov	r3, r2
 800475e:	011b      	lsls	r3, r3, #4
 8004760:	1a9b      	subs	r3, r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	440b      	add	r3, r1
 8004766:	331b      	adds	r3, #27
 8004768:	2200      	movs	r2, #0
 800476a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800476c:	78fa      	ldrb	r2, [r7, #3]
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	4613      	mov	r3, r2
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	1a9b      	subs	r3, r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	440b      	add	r3, r1
 800477a:	331c      	adds	r3, #28
 800477c:	2200      	movs	r2, #0
 800477e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004780:	78fb      	ldrb	r3, [r7, #3]
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	4413      	add	r3, r2
 8004788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	78fa      	ldrb	r2, [r7, #3]
 8004790:	0151      	lsls	r1, r2, #5
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	440a      	add	r2, r1
 8004796:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800479a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800479e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80047a0:	78fa      	ldrb	r2, [r7, #3]
 80047a2:	6879      	ldr	r1, [r7, #4]
 80047a4:	4613      	mov	r3, r2
 80047a6:	011b      	lsls	r3, r3, #4
 80047a8:	1a9b      	subs	r3, r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	440b      	add	r3, r1
 80047ae:	334c      	adds	r3, #76	; 0x4c
 80047b0:	2204      	movs	r2, #4
 80047b2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80047b4:	e229      	b.n	8004c0a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80047b6:	78fa      	ldrb	r2, [r7, #3]
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	4613      	mov	r3, r2
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	1a9b      	subs	r3, r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	440b      	add	r3, r1
 80047c4:	334c      	adds	r3, #76	; 0x4c
 80047c6:	2202      	movs	r2, #2
 80047c8:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80047ca:	78fa      	ldrb	r2, [r7, #3]
 80047cc:	6879      	ldr	r1, [r7, #4]
 80047ce:	4613      	mov	r3, r2
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	1a9b      	subs	r3, r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	440b      	add	r3, r1
 80047d8:	3326      	adds	r3, #38	; 0x26
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00b      	beq.n	80047f8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80047e0:	78fa      	ldrb	r2, [r7, #3]
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	4613      	mov	r3, r2
 80047e6:	011b      	lsls	r3, r3, #4
 80047e8:	1a9b      	subs	r3, r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	440b      	add	r3, r1
 80047ee:	3326      	adds	r3, #38	; 0x26
 80047f0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	f040 8209 	bne.w	8004c0a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80047f8:	78fb      	ldrb	r3, [r7, #3]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800480e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004816:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004818:	78fb      	ldrb	r3, [r7, #3]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	4413      	add	r3, r2
 8004820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004824:	461a      	mov	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800482a:	e1ee      	b.n	8004c0a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800482c:	78fa      	ldrb	r2, [r7, #3]
 800482e:	6879      	ldr	r1, [r7, #4]
 8004830:	4613      	mov	r3, r2
 8004832:	011b      	lsls	r3, r3, #4
 8004834:	1a9b      	subs	r3, r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	440b      	add	r3, r1
 800483a:	334d      	adds	r3, #77	; 0x4d
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	2b05      	cmp	r3, #5
 8004840:	f040 80c8 	bne.w	80049d4 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004844:	78fa      	ldrb	r2, [r7, #3]
 8004846:	6879      	ldr	r1, [r7, #4]
 8004848:	4613      	mov	r3, r2
 800484a:	011b      	lsls	r3, r3, #4
 800484c:	1a9b      	subs	r3, r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	440b      	add	r3, r1
 8004852:	334d      	adds	r3, #77	; 0x4d
 8004854:	2202      	movs	r2, #2
 8004856:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004858:	78fa      	ldrb	r2, [r7, #3]
 800485a:	6879      	ldr	r1, [r7, #4]
 800485c:	4613      	mov	r3, r2
 800485e:	011b      	lsls	r3, r3, #4
 8004860:	1a9b      	subs	r3, r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	440b      	add	r3, r1
 8004866:	331b      	adds	r3, #27
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	2b01      	cmp	r3, #1
 800486c:	f040 81ce 	bne.w	8004c0c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004870:	78fa      	ldrb	r2, [r7, #3]
 8004872:	6879      	ldr	r1, [r7, #4]
 8004874:	4613      	mov	r3, r2
 8004876:	011b      	lsls	r3, r3, #4
 8004878:	1a9b      	subs	r3, r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	440b      	add	r3, r1
 800487e:	3326      	adds	r3, #38	; 0x26
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	2b03      	cmp	r3, #3
 8004884:	d16b      	bne.n	800495e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004886:	78fa      	ldrb	r2, [r7, #3]
 8004888:	6879      	ldr	r1, [r7, #4]
 800488a:	4613      	mov	r3, r2
 800488c:	011b      	lsls	r3, r3, #4
 800488e:	1a9b      	subs	r3, r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	440b      	add	r3, r1
 8004894:	3348      	adds	r3, #72	; 0x48
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	1c59      	adds	r1, r3, #1
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	4613      	mov	r3, r2
 800489e:	011b      	lsls	r3, r3, #4
 80048a0:	1a9b      	subs	r3, r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4403      	add	r3, r0
 80048a6:	3348      	adds	r3, #72	; 0x48
 80048a8:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80048aa:	78fa      	ldrb	r2, [r7, #3]
 80048ac:	6879      	ldr	r1, [r7, #4]
 80048ae:	4613      	mov	r3, r2
 80048b0:	011b      	lsls	r3, r3, #4
 80048b2:	1a9b      	subs	r3, r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	440b      	add	r3, r1
 80048b8:	3348      	adds	r3, #72	; 0x48
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d943      	bls.n	8004948 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80048c0:	78fa      	ldrb	r2, [r7, #3]
 80048c2:	6879      	ldr	r1, [r7, #4]
 80048c4:	4613      	mov	r3, r2
 80048c6:	011b      	lsls	r3, r3, #4
 80048c8:	1a9b      	subs	r3, r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	440b      	add	r3, r1
 80048ce:	3348      	adds	r3, #72	; 0x48
 80048d0:	2200      	movs	r2, #0
 80048d2:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80048d4:	78fa      	ldrb	r2, [r7, #3]
 80048d6:	6879      	ldr	r1, [r7, #4]
 80048d8:	4613      	mov	r3, r2
 80048da:	011b      	lsls	r3, r3, #4
 80048dc:	1a9b      	subs	r3, r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	440b      	add	r3, r1
 80048e2:	331b      	adds	r3, #27
 80048e4:	2200      	movs	r2, #0
 80048e6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80048e8:	78fa      	ldrb	r2, [r7, #3]
 80048ea:	6879      	ldr	r1, [r7, #4]
 80048ec:	4613      	mov	r3, r2
 80048ee:	011b      	lsls	r3, r3, #4
 80048f0:	1a9b      	subs	r3, r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	440b      	add	r3, r1
 80048f6:	3344      	adds	r3, #68	; 0x44
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d809      	bhi.n	8004912 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80048fe:	78fa      	ldrb	r2, [r7, #3]
 8004900:	6879      	ldr	r1, [r7, #4]
 8004902:	4613      	mov	r3, r2
 8004904:	011b      	lsls	r3, r3, #4
 8004906:	1a9b      	subs	r3, r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	440b      	add	r3, r1
 800490c:	331c      	adds	r3, #28
 800490e:	2201      	movs	r2, #1
 8004910:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004912:	78fb      	ldrb	r3, [r7, #3]
 8004914:	015a      	lsls	r2, r3, #5
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	4413      	add	r3, r2
 800491a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	78fa      	ldrb	r2, [r7, #3]
 8004922:	0151      	lsls	r1, r2, #5
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	440a      	add	r2, r1
 8004928:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800492c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004930:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8004932:	78fa      	ldrb	r2, [r7, #3]
 8004934:	6879      	ldr	r1, [r7, #4]
 8004936:	4613      	mov	r3, r2
 8004938:	011b      	lsls	r3, r3, #4
 800493a:	1a9b      	subs	r3, r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	440b      	add	r3, r1
 8004940:	334c      	adds	r3, #76	; 0x4c
 8004942:	2204      	movs	r2, #4
 8004944:	701a      	strb	r2, [r3, #0]
 8004946:	e014      	b.n	8004972 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004948:	78fa      	ldrb	r2, [r7, #3]
 800494a:	6879      	ldr	r1, [r7, #4]
 800494c:	4613      	mov	r3, r2
 800494e:	011b      	lsls	r3, r3, #4
 8004950:	1a9b      	subs	r3, r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	440b      	add	r3, r1
 8004956:	334c      	adds	r3, #76	; 0x4c
 8004958:	2202      	movs	r2, #2
 800495a:	701a      	strb	r2, [r3, #0]
 800495c:	e009      	b.n	8004972 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800495e:	78fa      	ldrb	r2, [r7, #3]
 8004960:	6879      	ldr	r1, [r7, #4]
 8004962:	4613      	mov	r3, r2
 8004964:	011b      	lsls	r3, r3, #4
 8004966:	1a9b      	subs	r3, r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	440b      	add	r3, r1
 800496c:	334c      	adds	r3, #76	; 0x4c
 800496e:	2202      	movs	r2, #2
 8004970:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004972:	78fa      	ldrb	r2, [r7, #3]
 8004974:	6879      	ldr	r1, [r7, #4]
 8004976:	4613      	mov	r3, r2
 8004978:	011b      	lsls	r3, r3, #4
 800497a:	1a9b      	subs	r3, r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	440b      	add	r3, r1
 8004980:	3326      	adds	r3, #38	; 0x26
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00b      	beq.n	80049a0 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004988:	78fa      	ldrb	r2, [r7, #3]
 800498a:	6879      	ldr	r1, [r7, #4]
 800498c:	4613      	mov	r3, r2
 800498e:	011b      	lsls	r3, r3, #4
 8004990:	1a9b      	subs	r3, r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	440b      	add	r3, r1
 8004996:	3326      	adds	r3, #38	; 0x26
 8004998:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800499a:	2b02      	cmp	r3, #2
 800499c:	f040 8136 	bne.w	8004c0c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80049a0:	78fb      	ldrb	r3, [r7, #3]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80049b6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80049be:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80049c0:	78fb      	ldrb	r3, [r7, #3]
 80049c2:	015a      	lsls	r2, r3, #5
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049cc:	461a      	mov	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6013      	str	r3, [r2, #0]
 80049d2:	e11b      	b.n	8004c0c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80049d4:	78fa      	ldrb	r2, [r7, #3]
 80049d6:	6879      	ldr	r1, [r7, #4]
 80049d8:	4613      	mov	r3, r2
 80049da:	011b      	lsls	r3, r3, #4
 80049dc:	1a9b      	subs	r3, r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	440b      	add	r3, r1
 80049e2:	334d      	adds	r3, #77	; 0x4d
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	2b03      	cmp	r3, #3
 80049e8:	f040 8081 	bne.w	8004aee <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80049ec:	78fa      	ldrb	r2, [r7, #3]
 80049ee:	6879      	ldr	r1, [r7, #4]
 80049f0:	4613      	mov	r3, r2
 80049f2:	011b      	lsls	r3, r3, #4
 80049f4:	1a9b      	subs	r3, r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	440b      	add	r3, r1
 80049fa:	334d      	adds	r3, #77	; 0x4d
 80049fc:	2202      	movs	r2, #2
 80049fe:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004a00:	78fa      	ldrb	r2, [r7, #3]
 8004a02:	6879      	ldr	r1, [r7, #4]
 8004a04:	4613      	mov	r3, r2
 8004a06:	011b      	lsls	r3, r3, #4
 8004a08:	1a9b      	subs	r3, r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	440b      	add	r3, r1
 8004a0e:	331b      	adds	r3, #27
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	f040 80fa 	bne.w	8004c0c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004a18:	78fa      	ldrb	r2, [r7, #3]
 8004a1a:	6879      	ldr	r1, [r7, #4]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	1a9b      	subs	r3, r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	440b      	add	r3, r1
 8004a26:	334c      	adds	r3, #76	; 0x4c
 8004a28:	2202      	movs	r2, #2
 8004a2a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004a2c:	78fb      	ldrb	r3, [r7, #3]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	78fa      	ldrb	r2, [r7, #3]
 8004a3c:	0151      	lsls	r1, r2, #5
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	440a      	add	r2, r1
 8004a42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a4a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004a4c:	78fb      	ldrb	r3, [r7, #3]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	78fa      	ldrb	r2, [r7, #3]
 8004a5c:	0151      	lsls	r1, r2, #5
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	440a      	add	r2, r1
 8004a62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a6a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004a6c:	78fb      	ldrb	r3, [r7, #3]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	78fa      	ldrb	r2, [r7, #3]
 8004a7c:	0151      	lsls	r1, r2, #5
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	440a      	add	r2, r1
 8004a82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a86:	f023 0320 	bic.w	r3, r3, #32
 8004a8a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a8c:	78fa      	ldrb	r2, [r7, #3]
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	4613      	mov	r3, r2
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	1a9b      	subs	r3, r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	440b      	add	r3, r1
 8004a9a:	3326      	adds	r3, #38	; 0x26
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00b      	beq.n	8004aba <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004aa2:	78fa      	ldrb	r2, [r7, #3]
 8004aa4:	6879      	ldr	r1, [r7, #4]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	011b      	lsls	r3, r3, #4
 8004aaa:	1a9b      	subs	r3, r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	440b      	add	r3, r1
 8004ab0:	3326      	adds	r3, #38	; 0x26
 8004ab2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	f040 80a9 	bne.w	8004c0c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004aba:	78fb      	ldrb	r3, [r7, #3]
 8004abc:	015a      	lsls	r2, r3, #5
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ad0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ad8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004ada:	78fb      	ldrb	r3, [r7, #3]
 8004adc:	015a      	lsls	r2, r3, #5
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6013      	str	r3, [r2, #0]
 8004aec:	e08e      	b.n	8004c0c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004aee:	78fa      	ldrb	r2, [r7, #3]
 8004af0:	6879      	ldr	r1, [r7, #4]
 8004af2:	4613      	mov	r3, r2
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	1a9b      	subs	r3, r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	440b      	add	r3, r1
 8004afc:	334d      	adds	r3, #77	; 0x4d
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	2b04      	cmp	r3, #4
 8004b02:	d143      	bne.n	8004b8c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b04:	78fa      	ldrb	r2, [r7, #3]
 8004b06:	6879      	ldr	r1, [r7, #4]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	011b      	lsls	r3, r3, #4
 8004b0c:	1a9b      	subs	r3, r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	440b      	add	r3, r1
 8004b12:	334d      	adds	r3, #77	; 0x4d
 8004b14:	2202      	movs	r2, #2
 8004b16:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004b18:	78fa      	ldrb	r2, [r7, #3]
 8004b1a:	6879      	ldr	r1, [r7, #4]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	011b      	lsls	r3, r3, #4
 8004b20:	1a9b      	subs	r3, r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	440b      	add	r3, r1
 8004b26:	334c      	adds	r3, #76	; 0x4c
 8004b28:	2202      	movs	r2, #2
 8004b2a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004b2c:	78fa      	ldrb	r2, [r7, #3]
 8004b2e:	6879      	ldr	r1, [r7, #4]
 8004b30:	4613      	mov	r3, r2
 8004b32:	011b      	lsls	r3, r3, #4
 8004b34:	1a9b      	subs	r3, r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	440b      	add	r3, r1
 8004b3a:	3326      	adds	r3, #38	; 0x26
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00a      	beq.n	8004b58 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004b42:	78fa      	ldrb	r2, [r7, #3]
 8004b44:	6879      	ldr	r1, [r7, #4]
 8004b46:	4613      	mov	r3, r2
 8004b48:	011b      	lsls	r3, r3, #4
 8004b4a:	1a9b      	subs	r3, r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	440b      	add	r3, r1
 8004b50:	3326      	adds	r3, #38	; 0x26
 8004b52:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d159      	bne.n	8004c0c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004b58:	78fb      	ldrb	r3, [r7, #3]
 8004b5a:	015a      	lsls	r2, r3, #5
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	4413      	add	r3, r2
 8004b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b6e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b76:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004b78:	78fb      	ldrb	r3, [r7, #3]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b84:	461a      	mov	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6013      	str	r3, [r2, #0]
 8004b8a:	e03f      	b.n	8004c0c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004b8c:	78fa      	ldrb	r2, [r7, #3]
 8004b8e:	6879      	ldr	r1, [r7, #4]
 8004b90:	4613      	mov	r3, r2
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	1a9b      	subs	r3, r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	440b      	add	r3, r1
 8004b9a:	334d      	adds	r3, #77	; 0x4d
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	2b08      	cmp	r3, #8
 8004ba0:	d126      	bne.n	8004bf0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004ba2:	78fa      	ldrb	r2, [r7, #3]
 8004ba4:	6879      	ldr	r1, [r7, #4]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	011b      	lsls	r3, r3, #4
 8004baa:	1a9b      	subs	r3, r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	440b      	add	r3, r1
 8004bb0:	334d      	adds	r3, #77	; 0x4d
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004bb6:	78fa      	ldrb	r2, [r7, #3]
 8004bb8:	6879      	ldr	r1, [r7, #4]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	011b      	lsls	r3, r3, #4
 8004bbe:	1a9b      	subs	r3, r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	440b      	add	r3, r1
 8004bc4:	3344      	adds	r3, #68	; 0x44
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	1c59      	adds	r1, r3, #1
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	011b      	lsls	r3, r3, #4
 8004bd0:	1a9b      	subs	r3, r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4403      	add	r3, r0
 8004bd6:	3344      	adds	r3, #68	; 0x44
 8004bd8:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004bda:	78fa      	ldrb	r2, [r7, #3]
 8004bdc:	6879      	ldr	r1, [r7, #4]
 8004bde:	4613      	mov	r3, r2
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	1a9b      	subs	r3, r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	440b      	add	r3, r1
 8004be8:	334c      	adds	r3, #76	; 0x4c
 8004bea:	2204      	movs	r2, #4
 8004bec:	701a      	strb	r2, [r3, #0]
 8004bee:	e00d      	b.n	8004c0c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004bf0:	78fa      	ldrb	r2, [r7, #3]
 8004bf2:	6879      	ldr	r1, [r7, #4]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	011b      	lsls	r3, r3, #4
 8004bf8:	1a9b      	subs	r3, r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	440b      	add	r3, r1
 8004bfe:	334d      	adds	r3, #77	; 0x4d
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	f000 8100 	beq.w	8004e08 <HCD_HC_IN_IRQHandler+0xcca>
 8004c08:	e000      	b.n	8004c0c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004c0a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004c0c:	78fa      	ldrb	r2, [r7, #3]
 8004c0e:	6879      	ldr	r1, [r7, #4]
 8004c10:	4613      	mov	r3, r2
 8004c12:	011b      	lsls	r3, r3, #4
 8004c14:	1a9b      	subs	r3, r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	440b      	add	r3, r1
 8004c1a:	334c      	adds	r3, #76	; 0x4c
 8004c1c:	781a      	ldrb	r2, [r3, #0]
 8004c1e:	78fb      	ldrb	r3, [r7, #3]
 8004c20:	4619      	mov	r1, r3
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f011 f842 	bl	8015cac <HAL_HCD_HC_NotifyURBChange_Callback>
 8004c28:	e0ef      	b.n	8004e0a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	78fa      	ldrb	r2, [r7, #3]
 8004c30:	4611      	mov	r1, r2
 8004c32:	4618      	mov	r0, r3
 8004c34:	f005 fde3 	bl	800a7fe <USB_ReadChInterrupts>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3e:	2b40      	cmp	r3, #64	; 0x40
 8004c40:	d12f      	bne.n	8004ca2 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004c42:	78fb      	ldrb	r3, [r7, #3]
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c4e:	461a      	mov	r2, r3
 8004c50:	2340      	movs	r3, #64	; 0x40
 8004c52:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004c54:	78fa      	ldrb	r2, [r7, #3]
 8004c56:	6879      	ldr	r1, [r7, #4]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	011b      	lsls	r3, r3, #4
 8004c5c:	1a9b      	subs	r3, r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	440b      	add	r3, r1
 8004c62:	334d      	adds	r3, #77	; 0x4d
 8004c64:	2205      	movs	r2, #5
 8004c66:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004c68:	78fa      	ldrb	r2, [r7, #3]
 8004c6a:	6879      	ldr	r1, [r7, #4]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	011b      	lsls	r3, r3, #4
 8004c70:	1a9b      	subs	r3, r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	440b      	add	r3, r1
 8004c76:	331a      	adds	r3, #26
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d109      	bne.n	8004c92 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004c7e:	78fa      	ldrb	r2, [r7, #3]
 8004c80:	6879      	ldr	r1, [r7, #4]
 8004c82:	4613      	mov	r3, r2
 8004c84:	011b      	lsls	r3, r3, #4
 8004c86:	1a9b      	subs	r3, r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	440b      	add	r3, r1
 8004c8c:	3344      	adds	r3, #68	; 0x44
 8004c8e:	2200      	movs	r2, #0
 8004c90:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	78fa      	ldrb	r2, [r7, #3]
 8004c98:	4611      	mov	r1, r2
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f006 fb47 	bl	800b32e <USB_HC_Halt>
 8004ca0:	e0b3      	b.n	8004e0a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	78fa      	ldrb	r2, [r7, #3]
 8004ca8:	4611      	mov	r1, r2
 8004caa:	4618      	mov	r0, r3
 8004cac:	f005 fda7 	bl	800a7fe <USB_ReadChInterrupts>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	f003 0310 	and.w	r3, r3, #16
 8004cb6:	2b10      	cmp	r3, #16
 8004cb8:	f040 80a7 	bne.w	8004e0a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004cbc:	78fa      	ldrb	r2, [r7, #3]
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	011b      	lsls	r3, r3, #4
 8004cc4:	1a9b      	subs	r3, r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	440b      	add	r3, r1
 8004cca:	3326      	adds	r3, #38	; 0x26
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	2b03      	cmp	r3, #3
 8004cd0:	d11b      	bne.n	8004d0a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004cd2:	78fa      	ldrb	r2, [r7, #3]
 8004cd4:	6879      	ldr	r1, [r7, #4]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	011b      	lsls	r3, r3, #4
 8004cda:	1a9b      	subs	r3, r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	440b      	add	r3, r1
 8004ce0:	3344      	adds	r3, #68	; 0x44
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004ce6:	78fa      	ldrb	r2, [r7, #3]
 8004ce8:	6879      	ldr	r1, [r7, #4]
 8004cea:	4613      	mov	r3, r2
 8004cec:	011b      	lsls	r3, r3, #4
 8004cee:	1a9b      	subs	r3, r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	440b      	add	r3, r1
 8004cf4:	334d      	adds	r3, #77	; 0x4d
 8004cf6:	2204      	movs	r2, #4
 8004cf8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	78fa      	ldrb	r2, [r7, #3]
 8004d00:	4611      	mov	r1, r2
 8004d02:	4618      	mov	r0, r3
 8004d04:	f006 fb13 	bl	800b32e <USB_HC_Halt>
 8004d08:	e03f      	b.n	8004d8a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004d0a:	78fa      	ldrb	r2, [r7, #3]
 8004d0c:	6879      	ldr	r1, [r7, #4]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	011b      	lsls	r3, r3, #4
 8004d12:	1a9b      	subs	r3, r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	440b      	add	r3, r1
 8004d18:	3326      	adds	r3, #38	; 0x26
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00a      	beq.n	8004d36 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004d20:	78fa      	ldrb	r2, [r7, #3]
 8004d22:	6879      	ldr	r1, [r7, #4]
 8004d24:	4613      	mov	r3, r2
 8004d26:	011b      	lsls	r3, r3, #4
 8004d28:	1a9b      	subs	r3, r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	440b      	add	r3, r1
 8004d2e:	3326      	adds	r3, #38	; 0x26
 8004d30:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d129      	bne.n	8004d8a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004d36:	78fa      	ldrb	r2, [r7, #3]
 8004d38:	6879      	ldr	r1, [r7, #4]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	011b      	lsls	r3, r3, #4
 8004d3e:	1a9b      	subs	r3, r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	440b      	add	r3, r1
 8004d44:	3344      	adds	r3, #68	; 0x44
 8004d46:	2200      	movs	r2, #0
 8004d48:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	799b      	ldrb	r3, [r3, #6]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <HCD_HC_IN_IRQHandler+0xc2a>
 8004d52:	78fa      	ldrb	r2, [r7, #3]
 8004d54:	6879      	ldr	r1, [r7, #4]
 8004d56:	4613      	mov	r3, r2
 8004d58:	011b      	lsls	r3, r3, #4
 8004d5a:	1a9b      	subs	r3, r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	440b      	add	r3, r1
 8004d60:	331b      	adds	r3, #27
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d110      	bne.n	8004d8a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004d68:	78fa      	ldrb	r2, [r7, #3]
 8004d6a:	6879      	ldr	r1, [r7, #4]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	011b      	lsls	r3, r3, #4
 8004d70:	1a9b      	subs	r3, r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	440b      	add	r3, r1
 8004d76:	334d      	adds	r3, #77	; 0x4d
 8004d78:	2204      	movs	r2, #4
 8004d7a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	78fa      	ldrb	r2, [r7, #3]
 8004d82:	4611      	mov	r1, r2
 8004d84:	4618      	mov	r0, r3
 8004d86:	f006 fad2 	bl	800b32e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004d8a:	78fa      	ldrb	r2, [r7, #3]
 8004d8c:	6879      	ldr	r1, [r7, #4]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	011b      	lsls	r3, r3, #4
 8004d92:	1a9b      	subs	r3, r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	440b      	add	r3, r1
 8004d98:	331b      	adds	r3, #27
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d129      	bne.n	8004df4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004da0:	78fa      	ldrb	r2, [r7, #3]
 8004da2:	6879      	ldr	r1, [r7, #4]
 8004da4:	4613      	mov	r3, r2
 8004da6:	011b      	lsls	r3, r3, #4
 8004da8:	1a9b      	subs	r3, r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	440b      	add	r3, r1
 8004dae:	331b      	adds	r3, #27
 8004db0:	2200      	movs	r2, #0
 8004db2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004db4:	78fb      	ldrb	r3, [r7, #3]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	78fa      	ldrb	r2, [r7, #3]
 8004dc4:	0151      	lsls	r1, r2, #5
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	440a      	add	r2, r1
 8004dca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dd2:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004dd4:	78fb      	ldrb	r3, [r7, #3]
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	78fa      	ldrb	r2, [r7, #3]
 8004de4:	0151      	lsls	r1, r2, #5
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	440a      	add	r2, r1
 8004dea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dee:	f043 0320 	orr.w	r3, r3, #32
 8004df2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004df4:	78fb      	ldrb	r3, [r7, #3]
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e00:	461a      	mov	r2, r3
 8004e02:	2310      	movs	r3, #16
 8004e04:	6093      	str	r3, [r2, #8]
 8004e06:	e000      	b.n	8004e0a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004e08:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004e0a:	3718      	adds	r7, #24
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	460b      	mov	r3, r1
 8004e1a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	78fa      	ldrb	r2, [r7, #3]
 8004e2c:	4611      	mov	r1, r2
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f005 fce5 	bl	800a7fe <USB_ReadChInterrupts>
 8004e34:	4603      	mov	r3, r0
 8004e36:	f003 0304 	and.w	r3, r3, #4
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d11b      	bne.n	8004e76 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004e3e:	78fb      	ldrb	r3, [r7, #3]
 8004e40:	015a      	lsls	r2, r3, #5
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	2304      	movs	r3, #4
 8004e4e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004e50:	78fa      	ldrb	r2, [r7, #3]
 8004e52:	6879      	ldr	r1, [r7, #4]
 8004e54:	4613      	mov	r3, r2
 8004e56:	011b      	lsls	r3, r3, #4
 8004e58:	1a9b      	subs	r3, r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	440b      	add	r3, r1
 8004e5e:	334d      	adds	r3, #77	; 0x4d
 8004e60:	2207      	movs	r2, #7
 8004e62:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	78fa      	ldrb	r2, [r7, #3]
 8004e6a:	4611      	mov	r1, r2
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f006 fa5e 	bl	800b32e <USB_HC_Halt>
 8004e72:	f000 bc6f 	b.w	8005754 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	78fa      	ldrb	r2, [r7, #3]
 8004e7c:	4611      	mov	r1, r2
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f005 fcbd 	bl	800a7fe <USB_ReadChInterrupts>
 8004e84:	4603      	mov	r3, r0
 8004e86:	f003 0320 	and.w	r3, r3, #32
 8004e8a:	2b20      	cmp	r3, #32
 8004e8c:	f040 8082 	bne.w	8004f94 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004e90:	78fb      	ldrb	r3, [r7, #3]
 8004e92:	015a      	lsls	r2, r3, #5
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	2320      	movs	r3, #32
 8004ea0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004ea2:	78fa      	ldrb	r2, [r7, #3]
 8004ea4:	6879      	ldr	r1, [r7, #4]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	011b      	lsls	r3, r3, #4
 8004eaa:	1a9b      	subs	r3, r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	440b      	add	r3, r1
 8004eb0:	3319      	adds	r3, #25
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d124      	bne.n	8004f02 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004eb8:	78fa      	ldrb	r2, [r7, #3]
 8004eba:	6879      	ldr	r1, [r7, #4]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	011b      	lsls	r3, r3, #4
 8004ec0:	1a9b      	subs	r3, r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	440b      	add	r3, r1
 8004ec6:	3319      	adds	r3, #25
 8004ec8:	2200      	movs	r2, #0
 8004eca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004ecc:	78fa      	ldrb	r2, [r7, #3]
 8004ece:	6879      	ldr	r1, [r7, #4]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	011b      	lsls	r3, r3, #4
 8004ed4:	1a9b      	subs	r3, r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	440b      	add	r3, r1
 8004eda:	334c      	adds	r3, #76	; 0x4c
 8004edc:	2202      	movs	r2, #2
 8004ede:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004ee0:	78fa      	ldrb	r2, [r7, #3]
 8004ee2:	6879      	ldr	r1, [r7, #4]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	011b      	lsls	r3, r3, #4
 8004ee8:	1a9b      	subs	r3, r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	440b      	add	r3, r1
 8004eee:	334d      	adds	r3, #77	; 0x4d
 8004ef0:	2203      	movs	r2, #3
 8004ef2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	78fa      	ldrb	r2, [r7, #3]
 8004efa:	4611      	mov	r1, r2
 8004efc:	4618      	mov	r0, r3
 8004efe:	f006 fa16 	bl	800b32e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004f02:	78fa      	ldrb	r2, [r7, #3]
 8004f04:	6879      	ldr	r1, [r7, #4]
 8004f06:	4613      	mov	r3, r2
 8004f08:	011b      	lsls	r3, r3, #4
 8004f0a:	1a9b      	subs	r3, r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	440b      	add	r3, r1
 8004f10:	331a      	adds	r3, #26
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	f040 841d 	bne.w	8005754 <HCD_HC_OUT_IRQHandler+0x944>
 8004f1a:	78fa      	ldrb	r2, [r7, #3]
 8004f1c:	6879      	ldr	r1, [r7, #4]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	011b      	lsls	r3, r3, #4
 8004f22:	1a9b      	subs	r3, r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	440b      	add	r3, r1
 8004f28:	331b      	adds	r3, #27
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f040 8411 	bne.w	8005754 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004f32:	78fa      	ldrb	r2, [r7, #3]
 8004f34:	6879      	ldr	r1, [r7, #4]
 8004f36:	4613      	mov	r3, r2
 8004f38:	011b      	lsls	r3, r3, #4
 8004f3a:	1a9b      	subs	r3, r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	440b      	add	r3, r1
 8004f40:	3326      	adds	r3, #38	; 0x26
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d009      	beq.n	8004f5c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004f48:	78fa      	ldrb	r2, [r7, #3]
 8004f4a:	6879      	ldr	r1, [r7, #4]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	011b      	lsls	r3, r3, #4
 8004f50:	1a9b      	subs	r3, r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	440b      	add	r3, r1
 8004f56:	331b      	adds	r3, #27
 8004f58:	2201      	movs	r2, #1
 8004f5a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004f5c:	78fa      	ldrb	r2, [r7, #3]
 8004f5e:	6879      	ldr	r1, [r7, #4]
 8004f60:	4613      	mov	r3, r2
 8004f62:	011b      	lsls	r3, r3, #4
 8004f64:	1a9b      	subs	r3, r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	440b      	add	r3, r1
 8004f6a:	334d      	adds	r3, #77	; 0x4d
 8004f6c:	2203      	movs	r2, #3
 8004f6e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	78fa      	ldrb	r2, [r7, #3]
 8004f76:	4611      	mov	r1, r2
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f006 f9d8 	bl	800b32e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004f7e:	78fa      	ldrb	r2, [r7, #3]
 8004f80:	6879      	ldr	r1, [r7, #4]
 8004f82:	4613      	mov	r3, r2
 8004f84:	011b      	lsls	r3, r3, #4
 8004f86:	1a9b      	subs	r3, r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	440b      	add	r3, r1
 8004f8c:	3344      	adds	r3, #68	; 0x44
 8004f8e:	2200      	movs	r2, #0
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	e3df      	b.n	8005754 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	78fa      	ldrb	r2, [r7, #3]
 8004f9a:	4611      	mov	r1, r2
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f005 fc2e 	bl	800a7fe <USB_ReadChInterrupts>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fac:	d111      	bne.n	8004fd2 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004fae:	78fb      	ldrb	r3, [r7, #3]
 8004fb0:	015a      	lsls	r2, r3, #5
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fba:	461a      	mov	r2, r3
 8004fbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fc0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	78fa      	ldrb	r2, [r7, #3]
 8004fc8:	4611      	mov	r1, r2
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f006 f9af 	bl	800b32e <USB_HC_Halt>
 8004fd0:	e3c0      	b.n	8005754 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	78fa      	ldrb	r2, [r7, #3]
 8004fd8:	4611      	mov	r1, r2
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f005 fc0f 	bl	800a7fe <USB_ReadChInterrupts>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d168      	bne.n	80050bc <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004fea:	78fa      	ldrb	r2, [r7, #3]
 8004fec:	6879      	ldr	r1, [r7, #4]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	011b      	lsls	r3, r3, #4
 8004ff2:	1a9b      	subs	r3, r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	440b      	add	r3, r1
 8004ff8:	3344      	adds	r3, #68	; 0x44
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	78fa      	ldrb	r2, [r7, #3]
 8005004:	4611      	mov	r1, r2
 8005006:	4618      	mov	r0, r3
 8005008:	f005 fbf9 	bl	800a7fe <USB_ReadChInterrupts>
 800500c:	4603      	mov	r3, r0
 800500e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005012:	2b40      	cmp	r3, #64	; 0x40
 8005014:	d112      	bne.n	800503c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005016:	78fa      	ldrb	r2, [r7, #3]
 8005018:	6879      	ldr	r1, [r7, #4]
 800501a:	4613      	mov	r3, r2
 800501c:	011b      	lsls	r3, r3, #4
 800501e:	1a9b      	subs	r3, r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	440b      	add	r3, r1
 8005024:	3319      	adds	r3, #25
 8005026:	2201      	movs	r2, #1
 8005028:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800502a:	78fb      	ldrb	r3, [r7, #3]
 800502c:	015a      	lsls	r2, r3, #5
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	4413      	add	r3, r2
 8005032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005036:	461a      	mov	r2, r3
 8005038:	2340      	movs	r3, #64	; 0x40
 800503a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800503c:	78fa      	ldrb	r2, [r7, #3]
 800503e:	6879      	ldr	r1, [r7, #4]
 8005040:	4613      	mov	r3, r2
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	1a9b      	subs	r3, r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	440b      	add	r3, r1
 800504a:	331b      	adds	r3, #27
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d019      	beq.n	8005086 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005052:	78fa      	ldrb	r2, [r7, #3]
 8005054:	6879      	ldr	r1, [r7, #4]
 8005056:	4613      	mov	r3, r2
 8005058:	011b      	lsls	r3, r3, #4
 800505a:	1a9b      	subs	r3, r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	440b      	add	r3, r1
 8005060:	331b      	adds	r3, #27
 8005062:	2200      	movs	r2, #0
 8005064:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005066:	78fb      	ldrb	r3, [r7, #3]
 8005068:	015a      	lsls	r2, r3, #5
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	4413      	add	r3, r2
 800506e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	78fa      	ldrb	r2, [r7, #3]
 8005076:	0151      	lsls	r1, r2, #5
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	440a      	add	r2, r1
 800507c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005080:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005084:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005086:	78fb      	ldrb	r3, [r7, #3]
 8005088:	015a      	lsls	r2, r3, #5
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	4413      	add	r3, r2
 800508e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005092:	461a      	mov	r2, r3
 8005094:	2301      	movs	r3, #1
 8005096:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8005098:	78fa      	ldrb	r2, [r7, #3]
 800509a:	6879      	ldr	r1, [r7, #4]
 800509c:	4613      	mov	r3, r2
 800509e:	011b      	lsls	r3, r3, #4
 80050a0:	1a9b      	subs	r3, r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	440b      	add	r3, r1
 80050a6:	334d      	adds	r3, #77	; 0x4d
 80050a8:	2201      	movs	r2, #1
 80050aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	78fa      	ldrb	r2, [r7, #3]
 80050b2:	4611      	mov	r1, r2
 80050b4:	4618      	mov	r0, r3
 80050b6:	f006 f93a 	bl	800b32e <USB_HC_Halt>
 80050ba:	e34b      	b.n	8005754 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	78fa      	ldrb	r2, [r7, #3]
 80050c2:	4611      	mov	r1, r2
 80050c4:	4618      	mov	r0, r3
 80050c6:	f005 fb9a 	bl	800a7fe <USB_ReadChInterrupts>
 80050ca:	4603      	mov	r3, r0
 80050cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d0:	2b40      	cmp	r3, #64	; 0x40
 80050d2:	d139      	bne.n	8005148 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80050d4:	78fa      	ldrb	r2, [r7, #3]
 80050d6:	6879      	ldr	r1, [r7, #4]
 80050d8:	4613      	mov	r3, r2
 80050da:	011b      	lsls	r3, r3, #4
 80050dc:	1a9b      	subs	r3, r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	440b      	add	r3, r1
 80050e2:	334d      	adds	r3, #77	; 0x4d
 80050e4:	2205      	movs	r2, #5
 80050e6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80050e8:	78fa      	ldrb	r2, [r7, #3]
 80050ea:	6879      	ldr	r1, [r7, #4]
 80050ec:	4613      	mov	r3, r2
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	1a9b      	subs	r3, r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	440b      	add	r3, r1
 80050f6:	331a      	adds	r3, #26
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d109      	bne.n	8005112 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80050fe:	78fa      	ldrb	r2, [r7, #3]
 8005100:	6879      	ldr	r1, [r7, #4]
 8005102:	4613      	mov	r3, r2
 8005104:	011b      	lsls	r3, r3, #4
 8005106:	1a9b      	subs	r3, r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	440b      	add	r3, r1
 800510c:	3319      	adds	r3, #25
 800510e:	2201      	movs	r2, #1
 8005110:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8005112:	78fa      	ldrb	r2, [r7, #3]
 8005114:	6879      	ldr	r1, [r7, #4]
 8005116:	4613      	mov	r3, r2
 8005118:	011b      	lsls	r3, r3, #4
 800511a:	1a9b      	subs	r3, r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	440b      	add	r3, r1
 8005120:	3344      	adds	r3, #68	; 0x44
 8005122:	2200      	movs	r2, #0
 8005124:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	78fa      	ldrb	r2, [r7, #3]
 800512c:	4611      	mov	r1, r2
 800512e:	4618      	mov	r0, r3
 8005130:	f006 f8fd 	bl	800b32e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005134:	78fb      	ldrb	r3, [r7, #3]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	4413      	add	r3, r2
 800513c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005140:	461a      	mov	r2, r3
 8005142:	2340      	movs	r3, #64	; 0x40
 8005144:	6093      	str	r3, [r2, #8]
 8005146:	e305      	b.n	8005754 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	78fa      	ldrb	r2, [r7, #3]
 800514e:	4611      	mov	r1, r2
 8005150:	4618      	mov	r0, r3
 8005152:	f005 fb54 	bl	800a7fe <USB_ReadChInterrupts>
 8005156:	4603      	mov	r3, r0
 8005158:	f003 0308 	and.w	r3, r3, #8
 800515c:	2b08      	cmp	r3, #8
 800515e:	d11a      	bne.n	8005196 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005160:	78fb      	ldrb	r3, [r7, #3]
 8005162:	015a      	lsls	r2, r3, #5
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	4413      	add	r3, r2
 8005168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800516c:	461a      	mov	r2, r3
 800516e:	2308      	movs	r3, #8
 8005170:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005172:	78fa      	ldrb	r2, [r7, #3]
 8005174:	6879      	ldr	r1, [r7, #4]
 8005176:	4613      	mov	r3, r2
 8005178:	011b      	lsls	r3, r3, #4
 800517a:	1a9b      	subs	r3, r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	440b      	add	r3, r1
 8005180:	334d      	adds	r3, #77	; 0x4d
 8005182:	2206      	movs	r2, #6
 8005184:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	78fa      	ldrb	r2, [r7, #3]
 800518c:	4611      	mov	r1, r2
 800518e:	4618      	mov	r0, r3
 8005190:	f006 f8cd 	bl	800b32e <USB_HC_Halt>
 8005194:	e2de      	b.n	8005754 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	78fa      	ldrb	r2, [r7, #3]
 800519c:	4611      	mov	r1, r2
 800519e:	4618      	mov	r0, r3
 80051a0:	f005 fb2d 	bl	800a7fe <USB_ReadChInterrupts>
 80051a4:	4603      	mov	r3, r0
 80051a6:	f003 0310 	and.w	r3, r3, #16
 80051aa:	2b10      	cmp	r3, #16
 80051ac:	d144      	bne.n	8005238 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80051ae:	78fa      	ldrb	r2, [r7, #3]
 80051b0:	6879      	ldr	r1, [r7, #4]
 80051b2:	4613      	mov	r3, r2
 80051b4:	011b      	lsls	r3, r3, #4
 80051b6:	1a9b      	subs	r3, r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	440b      	add	r3, r1
 80051bc:	3344      	adds	r3, #68	; 0x44
 80051be:	2200      	movs	r2, #0
 80051c0:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80051c2:	78fa      	ldrb	r2, [r7, #3]
 80051c4:	6879      	ldr	r1, [r7, #4]
 80051c6:	4613      	mov	r3, r2
 80051c8:	011b      	lsls	r3, r3, #4
 80051ca:	1a9b      	subs	r3, r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	440b      	add	r3, r1
 80051d0:	334d      	adds	r3, #77	; 0x4d
 80051d2:	2204      	movs	r2, #4
 80051d4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80051d6:	78fa      	ldrb	r2, [r7, #3]
 80051d8:	6879      	ldr	r1, [r7, #4]
 80051da:	4613      	mov	r3, r2
 80051dc:	011b      	lsls	r3, r3, #4
 80051de:	1a9b      	subs	r3, r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	440b      	add	r3, r1
 80051e4:	3319      	adds	r3, #25
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d114      	bne.n	8005216 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80051ec:	78fa      	ldrb	r2, [r7, #3]
 80051ee:	6879      	ldr	r1, [r7, #4]
 80051f0:	4613      	mov	r3, r2
 80051f2:	011b      	lsls	r3, r3, #4
 80051f4:	1a9b      	subs	r3, r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	440b      	add	r3, r1
 80051fa:	3318      	adds	r3, #24
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d109      	bne.n	8005216 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8005202:	78fa      	ldrb	r2, [r7, #3]
 8005204:	6879      	ldr	r1, [r7, #4]
 8005206:	4613      	mov	r3, r2
 8005208:	011b      	lsls	r3, r3, #4
 800520a:	1a9b      	subs	r3, r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	440b      	add	r3, r1
 8005210:	3319      	adds	r3, #25
 8005212:	2201      	movs	r2, #1
 8005214:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	78fa      	ldrb	r2, [r7, #3]
 800521c:	4611      	mov	r1, r2
 800521e:	4618      	mov	r0, r3
 8005220:	f006 f885 	bl	800b32e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005224:	78fb      	ldrb	r3, [r7, #3]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	4413      	add	r3, r2
 800522c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005230:	461a      	mov	r2, r3
 8005232:	2310      	movs	r3, #16
 8005234:	6093      	str	r3, [r2, #8]
 8005236:	e28d      	b.n	8005754 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	78fa      	ldrb	r2, [r7, #3]
 800523e:	4611      	mov	r1, r2
 8005240:	4618      	mov	r0, r3
 8005242:	f005 fadc 	bl	800a7fe <USB_ReadChInterrupts>
 8005246:	4603      	mov	r3, r0
 8005248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800524c:	2b80      	cmp	r3, #128	; 0x80
 800524e:	d169      	bne.n	8005324 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	799b      	ldrb	r3, [r3, #6]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d111      	bne.n	800527c <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8005258:	78fa      	ldrb	r2, [r7, #3]
 800525a:	6879      	ldr	r1, [r7, #4]
 800525c:	4613      	mov	r3, r2
 800525e:	011b      	lsls	r3, r3, #4
 8005260:	1a9b      	subs	r3, r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	440b      	add	r3, r1
 8005266:	334d      	adds	r3, #77	; 0x4d
 8005268:	2207      	movs	r2, #7
 800526a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	78fa      	ldrb	r2, [r7, #3]
 8005272:	4611      	mov	r1, r2
 8005274:	4618      	mov	r0, r3
 8005276:	f006 f85a 	bl	800b32e <USB_HC_Halt>
 800527a:	e049      	b.n	8005310 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800527c:	78fa      	ldrb	r2, [r7, #3]
 800527e:	6879      	ldr	r1, [r7, #4]
 8005280:	4613      	mov	r3, r2
 8005282:	011b      	lsls	r3, r3, #4
 8005284:	1a9b      	subs	r3, r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	440b      	add	r3, r1
 800528a:	3344      	adds	r3, #68	; 0x44
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	1c59      	adds	r1, r3, #1
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	4613      	mov	r3, r2
 8005294:	011b      	lsls	r3, r3, #4
 8005296:	1a9b      	subs	r3, r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4403      	add	r3, r0
 800529c:	3344      	adds	r3, #68	; 0x44
 800529e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80052a0:	78fa      	ldrb	r2, [r7, #3]
 80052a2:	6879      	ldr	r1, [r7, #4]
 80052a4:	4613      	mov	r3, r2
 80052a6:	011b      	lsls	r3, r3, #4
 80052a8:	1a9b      	subs	r3, r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	440b      	add	r3, r1
 80052ae:	3344      	adds	r3, #68	; 0x44
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d922      	bls.n	80052fc <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80052b6:	78fa      	ldrb	r2, [r7, #3]
 80052b8:	6879      	ldr	r1, [r7, #4]
 80052ba:	4613      	mov	r3, r2
 80052bc:	011b      	lsls	r3, r3, #4
 80052be:	1a9b      	subs	r3, r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	440b      	add	r3, r1
 80052c4:	3344      	adds	r3, #68	; 0x44
 80052c6:	2200      	movs	r2, #0
 80052c8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80052ca:	78fa      	ldrb	r2, [r7, #3]
 80052cc:	6879      	ldr	r1, [r7, #4]
 80052ce:	4613      	mov	r3, r2
 80052d0:	011b      	lsls	r3, r3, #4
 80052d2:	1a9b      	subs	r3, r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	440b      	add	r3, r1
 80052d8:	334c      	adds	r3, #76	; 0x4c
 80052da:	2204      	movs	r2, #4
 80052dc:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80052de:	78fa      	ldrb	r2, [r7, #3]
 80052e0:	6879      	ldr	r1, [r7, #4]
 80052e2:	4613      	mov	r3, r2
 80052e4:	011b      	lsls	r3, r3, #4
 80052e6:	1a9b      	subs	r3, r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	440b      	add	r3, r1
 80052ec:	334c      	adds	r3, #76	; 0x4c
 80052ee:	781a      	ldrb	r2, [r3, #0]
 80052f0:	78fb      	ldrb	r3, [r7, #3]
 80052f2:	4619      	mov	r1, r3
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f010 fcd9 	bl	8015cac <HAL_HCD_HC_NotifyURBChange_Callback>
 80052fa:	e009      	b.n	8005310 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80052fc:	78fa      	ldrb	r2, [r7, #3]
 80052fe:	6879      	ldr	r1, [r7, #4]
 8005300:	4613      	mov	r3, r2
 8005302:	011b      	lsls	r3, r3, #4
 8005304:	1a9b      	subs	r3, r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	440b      	add	r3, r1
 800530a:	334c      	adds	r3, #76	; 0x4c
 800530c:	2202      	movs	r2, #2
 800530e:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005310:	78fb      	ldrb	r3, [r7, #3]
 8005312:	015a      	lsls	r2, r3, #5
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	4413      	add	r3, r2
 8005318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800531c:	461a      	mov	r2, r3
 800531e:	2380      	movs	r3, #128	; 0x80
 8005320:	6093      	str	r3, [r2, #8]
 8005322:	e217      	b.n	8005754 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	78fa      	ldrb	r2, [r7, #3]
 800532a:	4611      	mov	r1, r2
 800532c:	4618      	mov	r0, r3
 800532e:	f005 fa66 	bl	800a7fe <USB_ReadChInterrupts>
 8005332:	4603      	mov	r3, r0
 8005334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800533c:	d11b      	bne.n	8005376 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800533e:	78fa      	ldrb	r2, [r7, #3]
 8005340:	6879      	ldr	r1, [r7, #4]
 8005342:	4613      	mov	r3, r2
 8005344:	011b      	lsls	r3, r3, #4
 8005346:	1a9b      	subs	r3, r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	440b      	add	r3, r1
 800534c:	334d      	adds	r3, #77	; 0x4d
 800534e:	2209      	movs	r2, #9
 8005350:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	78fa      	ldrb	r2, [r7, #3]
 8005358:	4611      	mov	r1, r2
 800535a:	4618      	mov	r0, r3
 800535c:	f005 ffe7 	bl	800b32e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005360:	78fb      	ldrb	r3, [r7, #3]
 8005362:	015a      	lsls	r2, r3, #5
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	4413      	add	r3, r2
 8005368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800536c:	461a      	mov	r2, r3
 800536e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005372:	6093      	str	r3, [r2, #8]
 8005374:	e1ee      	b.n	8005754 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	78fa      	ldrb	r2, [r7, #3]
 800537c:	4611      	mov	r1, r2
 800537e:	4618      	mov	r0, r3
 8005380:	f005 fa3d 	bl	800a7fe <USB_ReadChInterrupts>
 8005384:	4603      	mov	r3, r0
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b02      	cmp	r3, #2
 800538c:	f040 81df 	bne.w	800574e <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005390:	78fb      	ldrb	r3, [r7, #3]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	4413      	add	r3, r2
 8005398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800539c:	461a      	mov	r2, r3
 800539e:	2302      	movs	r3, #2
 80053a0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80053a2:	78fa      	ldrb	r2, [r7, #3]
 80053a4:	6879      	ldr	r1, [r7, #4]
 80053a6:	4613      	mov	r3, r2
 80053a8:	011b      	lsls	r3, r3, #4
 80053aa:	1a9b      	subs	r3, r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	440b      	add	r3, r1
 80053b0:	334d      	adds	r3, #77	; 0x4d
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	f040 8093 	bne.w	80054e0 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80053ba:	78fa      	ldrb	r2, [r7, #3]
 80053bc:	6879      	ldr	r1, [r7, #4]
 80053be:	4613      	mov	r3, r2
 80053c0:	011b      	lsls	r3, r3, #4
 80053c2:	1a9b      	subs	r3, r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	440b      	add	r3, r1
 80053c8:	334d      	adds	r3, #77	; 0x4d
 80053ca:	2202      	movs	r2, #2
 80053cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80053ce:	78fa      	ldrb	r2, [r7, #3]
 80053d0:	6879      	ldr	r1, [r7, #4]
 80053d2:	4613      	mov	r3, r2
 80053d4:	011b      	lsls	r3, r3, #4
 80053d6:	1a9b      	subs	r3, r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	440b      	add	r3, r1
 80053dc:	334c      	adds	r3, #76	; 0x4c
 80053de:	2201      	movs	r2, #1
 80053e0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80053e2:	78fa      	ldrb	r2, [r7, #3]
 80053e4:	6879      	ldr	r1, [r7, #4]
 80053e6:	4613      	mov	r3, r2
 80053e8:	011b      	lsls	r3, r3, #4
 80053ea:	1a9b      	subs	r3, r3, r2
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	440b      	add	r3, r1
 80053f0:	3326      	adds	r3, #38	; 0x26
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d00b      	beq.n	8005410 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80053f8:	78fa      	ldrb	r2, [r7, #3]
 80053fa:	6879      	ldr	r1, [r7, #4]
 80053fc:	4613      	mov	r3, r2
 80053fe:	011b      	lsls	r3, r3, #4
 8005400:	1a9b      	subs	r3, r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	440b      	add	r3, r1
 8005406:	3326      	adds	r3, #38	; 0x26
 8005408:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800540a:	2b03      	cmp	r3, #3
 800540c:	f040 8190 	bne.w	8005730 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	799b      	ldrb	r3, [r3, #6]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d115      	bne.n	8005444 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8005418:	78fa      	ldrb	r2, [r7, #3]
 800541a:	6879      	ldr	r1, [r7, #4]
 800541c:	4613      	mov	r3, r2
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	1a9b      	subs	r3, r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	440b      	add	r3, r1
 8005426:	333d      	adds	r3, #61	; 0x3d
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	78fa      	ldrb	r2, [r7, #3]
 800542c:	f083 0301 	eor.w	r3, r3, #1
 8005430:	b2d8      	uxtb	r0, r3
 8005432:	6879      	ldr	r1, [r7, #4]
 8005434:	4613      	mov	r3, r2
 8005436:	011b      	lsls	r3, r3, #4
 8005438:	1a9b      	subs	r3, r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	440b      	add	r3, r1
 800543e:	333d      	adds	r3, #61	; 0x3d
 8005440:	4602      	mov	r2, r0
 8005442:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	799b      	ldrb	r3, [r3, #6]
 8005448:	2b01      	cmp	r3, #1
 800544a:	f040 8171 	bne.w	8005730 <HCD_HC_OUT_IRQHandler+0x920>
 800544e:	78fa      	ldrb	r2, [r7, #3]
 8005450:	6879      	ldr	r1, [r7, #4]
 8005452:	4613      	mov	r3, r2
 8005454:	011b      	lsls	r3, r3, #4
 8005456:	1a9b      	subs	r3, r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	440b      	add	r3, r1
 800545c:	3334      	adds	r3, #52	; 0x34
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 8165 	beq.w	8005730 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005466:	78fa      	ldrb	r2, [r7, #3]
 8005468:	6879      	ldr	r1, [r7, #4]
 800546a:	4613      	mov	r3, r2
 800546c:	011b      	lsls	r3, r3, #4
 800546e:	1a9b      	subs	r3, r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	440b      	add	r3, r1
 8005474:	3334      	adds	r3, #52	; 0x34
 8005476:	6819      	ldr	r1, [r3, #0]
 8005478:	78fa      	ldrb	r2, [r7, #3]
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	4613      	mov	r3, r2
 800547e:	011b      	lsls	r3, r3, #4
 8005480:	1a9b      	subs	r3, r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4403      	add	r3, r0
 8005486:	3328      	adds	r3, #40	; 0x28
 8005488:	881b      	ldrh	r3, [r3, #0]
 800548a:	440b      	add	r3, r1
 800548c:	1e59      	subs	r1, r3, #1
 800548e:	78fa      	ldrb	r2, [r7, #3]
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	4613      	mov	r3, r2
 8005494:	011b      	lsls	r3, r3, #4
 8005496:	1a9b      	subs	r3, r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4403      	add	r3, r0
 800549c:	3328      	adds	r3, #40	; 0x28
 800549e:	881b      	ldrh	r3, [r3, #0]
 80054a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80054a4:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	f003 0301 	and.w	r3, r3, #1
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f000 813f 	beq.w	8005730 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80054b2:	78fa      	ldrb	r2, [r7, #3]
 80054b4:	6879      	ldr	r1, [r7, #4]
 80054b6:	4613      	mov	r3, r2
 80054b8:	011b      	lsls	r3, r3, #4
 80054ba:	1a9b      	subs	r3, r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	440b      	add	r3, r1
 80054c0:	333d      	adds	r3, #61	; 0x3d
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	78fa      	ldrb	r2, [r7, #3]
 80054c6:	f083 0301 	eor.w	r3, r3, #1
 80054ca:	b2d8      	uxtb	r0, r3
 80054cc:	6879      	ldr	r1, [r7, #4]
 80054ce:	4613      	mov	r3, r2
 80054d0:	011b      	lsls	r3, r3, #4
 80054d2:	1a9b      	subs	r3, r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	440b      	add	r3, r1
 80054d8:	333d      	adds	r3, #61	; 0x3d
 80054da:	4602      	mov	r2, r0
 80054dc:	701a      	strb	r2, [r3, #0]
 80054de:	e127      	b.n	8005730 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80054e0:	78fa      	ldrb	r2, [r7, #3]
 80054e2:	6879      	ldr	r1, [r7, #4]
 80054e4:	4613      	mov	r3, r2
 80054e6:	011b      	lsls	r3, r3, #4
 80054e8:	1a9b      	subs	r3, r3, r2
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	440b      	add	r3, r1
 80054ee:	334d      	adds	r3, #77	; 0x4d
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	2b03      	cmp	r3, #3
 80054f4:	d120      	bne.n	8005538 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80054f6:	78fa      	ldrb	r2, [r7, #3]
 80054f8:	6879      	ldr	r1, [r7, #4]
 80054fa:	4613      	mov	r3, r2
 80054fc:	011b      	lsls	r3, r3, #4
 80054fe:	1a9b      	subs	r3, r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	440b      	add	r3, r1
 8005504:	334d      	adds	r3, #77	; 0x4d
 8005506:	2202      	movs	r2, #2
 8005508:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800550a:	78fa      	ldrb	r2, [r7, #3]
 800550c:	6879      	ldr	r1, [r7, #4]
 800550e:	4613      	mov	r3, r2
 8005510:	011b      	lsls	r3, r3, #4
 8005512:	1a9b      	subs	r3, r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	440b      	add	r3, r1
 8005518:	331b      	adds	r3, #27
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2b01      	cmp	r3, #1
 800551e:	f040 8107 	bne.w	8005730 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005522:	78fa      	ldrb	r2, [r7, #3]
 8005524:	6879      	ldr	r1, [r7, #4]
 8005526:	4613      	mov	r3, r2
 8005528:	011b      	lsls	r3, r3, #4
 800552a:	1a9b      	subs	r3, r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	440b      	add	r3, r1
 8005530:	334c      	adds	r3, #76	; 0x4c
 8005532:	2202      	movs	r2, #2
 8005534:	701a      	strb	r2, [r3, #0]
 8005536:	e0fb      	b.n	8005730 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005538:	78fa      	ldrb	r2, [r7, #3]
 800553a:	6879      	ldr	r1, [r7, #4]
 800553c:	4613      	mov	r3, r2
 800553e:	011b      	lsls	r3, r3, #4
 8005540:	1a9b      	subs	r3, r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	440b      	add	r3, r1
 8005546:	334d      	adds	r3, #77	; 0x4d
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	2b04      	cmp	r3, #4
 800554c:	d13a      	bne.n	80055c4 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800554e:	78fa      	ldrb	r2, [r7, #3]
 8005550:	6879      	ldr	r1, [r7, #4]
 8005552:	4613      	mov	r3, r2
 8005554:	011b      	lsls	r3, r3, #4
 8005556:	1a9b      	subs	r3, r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	440b      	add	r3, r1
 800555c:	334d      	adds	r3, #77	; 0x4d
 800555e:	2202      	movs	r2, #2
 8005560:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005562:	78fa      	ldrb	r2, [r7, #3]
 8005564:	6879      	ldr	r1, [r7, #4]
 8005566:	4613      	mov	r3, r2
 8005568:	011b      	lsls	r3, r3, #4
 800556a:	1a9b      	subs	r3, r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	440b      	add	r3, r1
 8005570:	334c      	adds	r3, #76	; 0x4c
 8005572:	2202      	movs	r2, #2
 8005574:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005576:	78fa      	ldrb	r2, [r7, #3]
 8005578:	6879      	ldr	r1, [r7, #4]
 800557a:	4613      	mov	r3, r2
 800557c:	011b      	lsls	r3, r3, #4
 800557e:	1a9b      	subs	r3, r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	440b      	add	r3, r1
 8005584:	331b      	adds	r3, #27
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	2b01      	cmp	r3, #1
 800558a:	f040 80d1 	bne.w	8005730 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800558e:	78fa      	ldrb	r2, [r7, #3]
 8005590:	6879      	ldr	r1, [r7, #4]
 8005592:	4613      	mov	r3, r2
 8005594:	011b      	lsls	r3, r3, #4
 8005596:	1a9b      	subs	r3, r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	440b      	add	r3, r1
 800559c:	331b      	adds	r3, #27
 800559e:	2200      	movs	r2, #0
 80055a0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80055a2:	78fb      	ldrb	r3, [r7, #3]
 80055a4:	015a      	lsls	r2, r3, #5
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	4413      	add	r3, r2
 80055aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	78fa      	ldrb	r2, [r7, #3]
 80055b2:	0151      	lsls	r1, r2, #5
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	440a      	add	r2, r1
 80055b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055c0:	6053      	str	r3, [r2, #4]
 80055c2:	e0b5      	b.n	8005730 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80055c4:	78fa      	ldrb	r2, [r7, #3]
 80055c6:	6879      	ldr	r1, [r7, #4]
 80055c8:	4613      	mov	r3, r2
 80055ca:	011b      	lsls	r3, r3, #4
 80055cc:	1a9b      	subs	r3, r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	440b      	add	r3, r1
 80055d2:	334d      	adds	r3, #77	; 0x4d
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	2b05      	cmp	r3, #5
 80055d8:	d114      	bne.n	8005604 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80055da:	78fa      	ldrb	r2, [r7, #3]
 80055dc:	6879      	ldr	r1, [r7, #4]
 80055de:	4613      	mov	r3, r2
 80055e0:	011b      	lsls	r3, r3, #4
 80055e2:	1a9b      	subs	r3, r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	440b      	add	r3, r1
 80055e8:	334d      	adds	r3, #77	; 0x4d
 80055ea:	2202      	movs	r2, #2
 80055ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80055ee:	78fa      	ldrb	r2, [r7, #3]
 80055f0:	6879      	ldr	r1, [r7, #4]
 80055f2:	4613      	mov	r3, r2
 80055f4:	011b      	lsls	r3, r3, #4
 80055f6:	1a9b      	subs	r3, r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	440b      	add	r3, r1
 80055fc:	334c      	adds	r3, #76	; 0x4c
 80055fe:	2202      	movs	r2, #2
 8005600:	701a      	strb	r2, [r3, #0]
 8005602:	e095      	b.n	8005730 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005604:	78fa      	ldrb	r2, [r7, #3]
 8005606:	6879      	ldr	r1, [r7, #4]
 8005608:	4613      	mov	r3, r2
 800560a:	011b      	lsls	r3, r3, #4
 800560c:	1a9b      	subs	r3, r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	440b      	add	r3, r1
 8005612:	334d      	adds	r3, #77	; 0x4d
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	2b06      	cmp	r3, #6
 8005618:	d114      	bne.n	8005644 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800561a:	78fa      	ldrb	r2, [r7, #3]
 800561c:	6879      	ldr	r1, [r7, #4]
 800561e:	4613      	mov	r3, r2
 8005620:	011b      	lsls	r3, r3, #4
 8005622:	1a9b      	subs	r3, r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	440b      	add	r3, r1
 8005628:	334d      	adds	r3, #77	; 0x4d
 800562a:	2202      	movs	r2, #2
 800562c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800562e:	78fa      	ldrb	r2, [r7, #3]
 8005630:	6879      	ldr	r1, [r7, #4]
 8005632:	4613      	mov	r3, r2
 8005634:	011b      	lsls	r3, r3, #4
 8005636:	1a9b      	subs	r3, r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	440b      	add	r3, r1
 800563c:	334c      	adds	r3, #76	; 0x4c
 800563e:	2205      	movs	r2, #5
 8005640:	701a      	strb	r2, [r3, #0]
 8005642:	e075      	b.n	8005730 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005644:	78fa      	ldrb	r2, [r7, #3]
 8005646:	6879      	ldr	r1, [r7, #4]
 8005648:	4613      	mov	r3, r2
 800564a:	011b      	lsls	r3, r3, #4
 800564c:	1a9b      	subs	r3, r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	440b      	add	r3, r1
 8005652:	334d      	adds	r3, #77	; 0x4d
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	2b07      	cmp	r3, #7
 8005658:	d00a      	beq.n	8005670 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800565a:	78fa      	ldrb	r2, [r7, #3]
 800565c:	6879      	ldr	r1, [r7, #4]
 800565e:	4613      	mov	r3, r2
 8005660:	011b      	lsls	r3, r3, #4
 8005662:	1a9b      	subs	r3, r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	440b      	add	r3, r1
 8005668:	334d      	adds	r3, #77	; 0x4d
 800566a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800566c:	2b09      	cmp	r3, #9
 800566e:	d170      	bne.n	8005752 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005670:	78fa      	ldrb	r2, [r7, #3]
 8005672:	6879      	ldr	r1, [r7, #4]
 8005674:	4613      	mov	r3, r2
 8005676:	011b      	lsls	r3, r3, #4
 8005678:	1a9b      	subs	r3, r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	440b      	add	r3, r1
 800567e:	334d      	adds	r3, #77	; 0x4d
 8005680:	2202      	movs	r2, #2
 8005682:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005684:	78fa      	ldrb	r2, [r7, #3]
 8005686:	6879      	ldr	r1, [r7, #4]
 8005688:	4613      	mov	r3, r2
 800568a:	011b      	lsls	r3, r3, #4
 800568c:	1a9b      	subs	r3, r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	440b      	add	r3, r1
 8005692:	3344      	adds	r3, #68	; 0x44
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	1c59      	adds	r1, r3, #1
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	4613      	mov	r3, r2
 800569c:	011b      	lsls	r3, r3, #4
 800569e:	1a9b      	subs	r3, r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4403      	add	r3, r0
 80056a4:	3344      	adds	r3, #68	; 0x44
 80056a6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80056a8:	78fa      	ldrb	r2, [r7, #3]
 80056aa:	6879      	ldr	r1, [r7, #4]
 80056ac:	4613      	mov	r3, r2
 80056ae:	011b      	lsls	r3, r3, #4
 80056b0:	1a9b      	subs	r3, r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	440b      	add	r3, r1
 80056b6:	3344      	adds	r3, #68	; 0x44
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d914      	bls.n	80056e8 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80056be:	78fa      	ldrb	r2, [r7, #3]
 80056c0:	6879      	ldr	r1, [r7, #4]
 80056c2:	4613      	mov	r3, r2
 80056c4:	011b      	lsls	r3, r3, #4
 80056c6:	1a9b      	subs	r3, r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	440b      	add	r3, r1
 80056cc:	3344      	adds	r3, #68	; 0x44
 80056ce:	2200      	movs	r2, #0
 80056d0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80056d2:	78fa      	ldrb	r2, [r7, #3]
 80056d4:	6879      	ldr	r1, [r7, #4]
 80056d6:	4613      	mov	r3, r2
 80056d8:	011b      	lsls	r3, r3, #4
 80056da:	1a9b      	subs	r3, r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	440b      	add	r3, r1
 80056e0:	334c      	adds	r3, #76	; 0x4c
 80056e2:	2204      	movs	r2, #4
 80056e4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80056e6:	e022      	b.n	800572e <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80056e8:	78fa      	ldrb	r2, [r7, #3]
 80056ea:	6879      	ldr	r1, [r7, #4]
 80056ec:	4613      	mov	r3, r2
 80056ee:	011b      	lsls	r3, r3, #4
 80056f0:	1a9b      	subs	r3, r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	440b      	add	r3, r1
 80056f6:	334c      	adds	r3, #76	; 0x4c
 80056f8:	2202      	movs	r2, #2
 80056fa:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80056fc:	78fb      	ldrb	r3, [r7, #3]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	4413      	add	r3, r2
 8005704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005712:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800571a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800571c:	78fb      	ldrb	r3, [r7, #3]
 800571e:	015a      	lsls	r2, r3, #5
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	4413      	add	r3, r2
 8005724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005728:	461a      	mov	r2, r3
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800572e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005730:	78fa      	ldrb	r2, [r7, #3]
 8005732:	6879      	ldr	r1, [r7, #4]
 8005734:	4613      	mov	r3, r2
 8005736:	011b      	lsls	r3, r3, #4
 8005738:	1a9b      	subs	r3, r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	440b      	add	r3, r1
 800573e:	334c      	adds	r3, #76	; 0x4c
 8005740:	781a      	ldrb	r2, [r3, #0]
 8005742:	78fb      	ldrb	r3, [r7, #3]
 8005744:	4619      	mov	r1, r3
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f010 fab0 	bl	8015cac <HAL_HCD_HC_NotifyURBChange_Callback>
 800574c:	e002      	b.n	8005754 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800574e:	bf00      	nop
 8005750:	e000      	b.n	8005754 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8005752:	bf00      	nop
  }
}
 8005754:	3718      	adds	r7, #24
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b08a      	sub	sp, #40	; 0x28
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	f003 030f 	and.w	r3, r3, #15
 800577a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	0c5b      	lsrs	r3, r3, #17
 8005780:	f003 030f 	and.w	r3, r3, #15
 8005784:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	091b      	lsrs	r3, r3, #4
 800578a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800578e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	2b02      	cmp	r3, #2
 8005794:	d004      	beq.n	80057a0 <HCD_RXQLVL_IRQHandler+0x46>
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2b05      	cmp	r3, #5
 800579a:	f000 80b6 	beq.w	800590a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800579e:	e0b7      	b.n	8005910 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f000 80b3 	beq.w	800590e <HCD_RXQLVL_IRQHandler+0x1b4>
 80057a8:	6879      	ldr	r1, [r7, #4]
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	4613      	mov	r3, r2
 80057ae:	011b      	lsls	r3, r3, #4
 80057b0:	1a9b      	subs	r3, r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	440b      	add	r3, r1
 80057b6:	332c      	adds	r3, #44	; 0x2c
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f000 80a7 	beq.w	800590e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80057c0:	6879      	ldr	r1, [r7, #4]
 80057c2:	69ba      	ldr	r2, [r7, #24]
 80057c4:	4613      	mov	r3, r2
 80057c6:	011b      	lsls	r3, r3, #4
 80057c8:	1a9b      	subs	r3, r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	440b      	add	r3, r1
 80057ce:	3338      	adds	r3, #56	; 0x38
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	18d1      	adds	r1, r2, r3
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	4613      	mov	r3, r2
 80057dc:	011b      	lsls	r3, r3, #4
 80057de:	1a9b      	subs	r3, r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4403      	add	r3, r0
 80057e4:	3334      	adds	r3, #52	; 0x34
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4299      	cmp	r1, r3
 80057ea:	f200 8083 	bhi.w	80058f4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6818      	ldr	r0, [r3, #0]
 80057f2:	6879      	ldr	r1, [r7, #4]
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	4613      	mov	r3, r2
 80057f8:	011b      	lsls	r3, r3, #4
 80057fa:	1a9b      	subs	r3, r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	440b      	add	r3, r1
 8005800:	332c      	adds	r3, #44	; 0x2c
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	b292      	uxth	r2, r2
 8005808:	4619      	mov	r1, r3
 800580a:	f004 ff8d 	bl	800a728 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800580e:	6879      	ldr	r1, [r7, #4]
 8005810:	69ba      	ldr	r2, [r7, #24]
 8005812:	4613      	mov	r3, r2
 8005814:	011b      	lsls	r3, r3, #4
 8005816:	1a9b      	subs	r3, r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	440b      	add	r3, r1
 800581c:	332c      	adds	r3, #44	; 0x2c
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	18d1      	adds	r1, r2, r3
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	69ba      	ldr	r2, [r7, #24]
 8005828:	4613      	mov	r3, r2
 800582a:	011b      	lsls	r3, r3, #4
 800582c:	1a9b      	subs	r3, r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4403      	add	r3, r0
 8005832:	332c      	adds	r3, #44	; 0x2c
 8005834:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005836:	6879      	ldr	r1, [r7, #4]
 8005838:	69ba      	ldr	r2, [r7, #24]
 800583a:	4613      	mov	r3, r2
 800583c:	011b      	lsls	r3, r3, #4
 800583e:	1a9b      	subs	r3, r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	440b      	add	r3, r1
 8005844:	3338      	adds	r3, #56	; 0x38
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	18d1      	adds	r1, r2, r3
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	4613      	mov	r3, r2
 8005852:	011b      	lsls	r3, r3, #4
 8005854:	1a9b      	subs	r3, r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4403      	add	r3, r0
 800585a:	3338      	adds	r3, #56	; 0x38
 800585c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	015a      	lsls	r2, r3, #5
 8005862:	6a3b      	ldr	r3, [r7, #32]
 8005864:	4413      	add	r3, r2
 8005866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	0cdb      	lsrs	r3, r3, #19
 800586e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005872:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005874:	6879      	ldr	r1, [r7, #4]
 8005876:	69ba      	ldr	r2, [r7, #24]
 8005878:	4613      	mov	r3, r2
 800587a:	011b      	lsls	r3, r3, #4
 800587c:	1a9b      	subs	r3, r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	440b      	add	r3, r1
 8005882:	3328      	adds	r3, #40	; 0x28
 8005884:	881b      	ldrh	r3, [r3, #0]
 8005886:	461a      	mov	r2, r3
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	4293      	cmp	r3, r2
 800588c:	d13f      	bne.n	800590e <HCD_RXQLVL_IRQHandler+0x1b4>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d03c      	beq.n	800590e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	015a      	lsls	r2, r3, #5
 8005898:	6a3b      	ldr	r3, [r7, #32]
 800589a:	4413      	add	r3, r2
 800589c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058aa:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058b2:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	6a3b      	ldr	r3, [r7, #32]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c0:	461a      	mov	r2, r3
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80058c6:	6879      	ldr	r1, [r7, #4]
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	4613      	mov	r3, r2
 80058cc:	011b      	lsls	r3, r3, #4
 80058ce:	1a9b      	subs	r3, r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	440b      	add	r3, r1
 80058d4:	333c      	adds	r3, #60	; 0x3c
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	f083 0301 	eor.w	r3, r3, #1
 80058dc:	b2d8      	uxtb	r0, r3
 80058de:	6879      	ldr	r1, [r7, #4]
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	4613      	mov	r3, r2
 80058e4:	011b      	lsls	r3, r3, #4
 80058e6:	1a9b      	subs	r3, r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	440b      	add	r3, r1
 80058ec:	333c      	adds	r3, #60	; 0x3c
 80058ee:	4602      	mov	r2, r0
 80058f0:	701a      	strb	r2, [r3, #0]
      break;
 80058f2:	e00c      	b.n	800590e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80058f4:	6879      	ldr	r1, [r7, #4]
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	4613      	mov	r3, r2
 80058fa:	011b      	lsls	r3, r3, #4
 80058fc:	1a9b      	subs	r3, r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	440b      	add	r3, r1
 8005902:	334c      	adds	r3, #76	; 0x4c
 8005904:	2204      	movs	r2, #4
 8005906:	701a      	strb	r2, [r3, #0]
      break;
 8005908:	e001      	b.n	800590e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800590a:	bf00      	nop
 800590c:	e000      	b.n	8005910 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800590e:	bf00      	nop
  }
}
 8005910:	bf00      	nop
 8005912:	3728      	adds	r7, #40	; 0x28
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005944:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f003 0302 	and.w	r3, r3, #2
 800594c:	2b02      	cmp	r3, #2
 800594e:	d10b      	bne.n	8005968 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	2b01      	cmp	r3, #1
 8005958:	d102      	bne.n	8005960 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f010 f98a 	bl	8015c74 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f043 0302 	orr.w	r3, r3, #2
 8005966:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f003 0308 	and.w	r3, r3, #8
 800596e:	2b08      	cmp	r3, #8
 8005970:	d132      	bne.n	80059d8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	f043 0308 	orr.w	r3, r3, #8
 8005978:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f003 0304 	and.w	r3, r3, #4
 8005980:	2b04      	cmp	r3, #4
 8005982:	d126      	bne.n	80059d2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	7a5b      	ldrb	r3, [r3, #9]
 8005988:	2b02      	cmp	r3, #2
 800598a:	d113      	bne.n	80059b4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005992:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005996:	d106      	bne.n	80059a6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2102      	movs	r1, #2
 800599e:	4618      	mov	r0, r3
 80059a0:	f005 f846 	bl	800aa30 <USB_InitFSLSPClkSel>
 80059a4:	e011      	b.n	80059ca <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2101      	movs	r1, #1
 80059ac:	4618      	mov	r0, r3
 80059ae:	f005 f83f 	bl	800aa30 <USB_InitFSLSPClkSel>
 80059b2:	e00a      	b.n	80059ca <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	79db      	ldrb	r3, [r3, #7]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d106      	bne.n	80059ca <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059c2:	461a      	mov	r2, r3
 80059c4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80059c8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f010 f980 	bl	8015cd0 <HAL_HCD_PortEnabled_Callback>
 80059d0:	e002      	b.n	80059d8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f010 f98a 	bl	8015cec <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f003 0320 	and.w	r3, r3, #32
 80059de:	2b20      	cmp	r3, #32
 80059e0:	d103      	bne.n	80059ea <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	f043 0320 	orr.w	r3, r3, #32
 80059e8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80059f0:	461a      	mov	r2, r3
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	6013      	str	r3, [r2, #0]
}
 80059f6:	bf00      	nop
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
	...

08005a00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e12b      	b.n	8005c6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d106      	bne.n	8005a2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7fb fd70 	bl	800150c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2224      	movs	r2, #36	; 0x24
 8005a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f022 0201 	bic.w	r2, r2, #1
 8005a42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005a64:	f000 ff82 	bl	800696c <HAL_RCC_GetPCLK1Freq>
 8005a68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	4a81      	ldr	r2, [pc, #516]	; (8005c74 <HAL_I2C_Init+0x274>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d807      	bhi.n	8005a84 <HAL_I2C_Init+0x84>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	4a80      	ldr	r2, [pc, #512]	; (8005c78 <HAL_I2C_Init+0x278>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	bf94      	ite	ls
 8005a7c:	2301      	movls	r3, #1
 8005a7e:	2300      	movhi	r3, #0
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	e006      	b.n	8005a92 <HAL_I2C_Init+0x92>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	4a7d      	ldr	r2, [pc, #500]	; (8005c7c <HAL_I2C_Init+0x27c>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	bf94      	ite	ls
 8005a8c:	2301      	movls	r3, #1
 8005a8e:	2300      	movhi	r3, #0
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d001      	beq.n	8005a9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e0e7      	b.n	8005c6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	4a78      	ldr	r2, [pc, #480]	; (8005c80 <HAL_I2C_Init+0x280>)
 8005a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa2:	0c9b      	lsrs	r3, r3, #18
 8005aa4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	4a6a      	ldr	r2, [pc, #424]	; (8005c74 <HAL_I2C_Init+0x274>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d802      	bhi.n	8005ad4 <HAL_I2C_Init+0xd4>
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	e009      	b.n	8005ae8 <HAL_I2C_Init+0xe8>
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005ada:	fb02 f303 	mul.w	r3, r2, r3
 8005ade:	4a69      	ldr	r2, [pc, #420]	; (8005c84 <HAL_I2C_Init+0x284>)
 8005ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae4:	099b      	lsrs	r3, r3, #6
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	6812      	ldr	r2, [r2, #0]
 8005aec:	430b      	orrs	r3, r1
 8005aee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005afa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	495c      	ldr	r1, [pc, #368]	; (8005c74 <HAL_I2C_Init+0x274>)
 8005b04:	428b      	cmp	r3, r1
 8005b06:	d819      	bhi.n	8005b3c <HAL_I2C_Init+0x13c>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	1e59      	subs	r1, r3, #1
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	005b      	lsls	r3, r3, #1
 8005b12:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b16:	1c59      	adds	r1, r3, #1
 8005b18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005b1c:	400b      	ands	r3, r1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00a      	beq.n	8005b38 <HAL_I2C_Init+0x138>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	1e59      	subs	r1, r3, #1
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	005b      	lsls	r3, r3, #1
 8005b2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b30:	3301      	adds	r3, #1
 8005b32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b36:	e051      	b.n	8005bdc <HAL_I2C_Init+0x1dc>
 8005b38:	2304      	movs	r3, #4
 8005b3a:	e04f      	b.n	8005bdc <HAL_I2C_Init+0x1dc>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d111      	bne.n	8005b68 <HAL_I2C_Init+0x168>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	1e58      	subs	r0, r3, #1
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6859      	ldr	r1, [r3, #4]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	005b      	lsls	r3, r3, #1
 8005b50:	440b      	add	r3, r1
 8005b52:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b56:	3301      	adds	r3, #1
 8005b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	bf0c      	ite	eq
 8005b60:	2301      	moveq	r3, #1
 8005b62:	2300      	movne	r3, #0
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	e012      	b.n	8005b8e <HAL_I2C_Init+0x18e>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	1e58      	subs	r0, r3, #1
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6859      	ldr	r1, [r3, #4]
 8005b70:	460b      	mov	r3, r1
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	440b      	add	r3, r1
 8005b76:	0099      	lsls	r1, r3, #2
 8005b78:	440b      	add	r3, r1
 8005b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b7e:	3301      	adds	r3, #1
 8005b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	bf0c      	ite	eq
 8005b88:	2301      	moveq	r3, #1
 8005b8a:	2300      	movne	r3, #0
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d001      	beq.n	8005b96 <HAL_I2C_Init+0x196>
 8005b92:	2301      	movs	r3, #1
 8005b94:	e022      	b.n	8005bdc <HAL_I2C_Init+0x1dc>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10e      	bne.n	8005bbc <HAL_I2C_Init+0x1bc>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	1e58      	subs	r0, r3, #1
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6859      	ldr	r1, [r3, #4]
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	005b      	lsls	r3, r3, #1
 8005baa:	440b      	add	r3, r1
 8005bac:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bba:	e00f      	b.n	8005bdc <HAL_I2C_Init+0x1dc>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	1e58      	subs	r0, r3, #1
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6859      	ldr	r1, [r3, #4]
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	440b      	add	r3, r1
 8005bca:	0099      	lsls	r1, r3, #2
 8005bcc:	440b      	add	r3, r1
 8005bce:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bdc:	6879      	ldr	r1, [r7, #4]
 8005bde:	6809      	ldr	r1, [r1, #0]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	69da      	ldr	r2, [r3, #28]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	431a      	orrs	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005c0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	6911      	ldr	r1, [r2, #16]
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	68d2      	ldr	r2, [r2, #12]
 8005c16:	4311      	orrs	r1, r2
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	6812      	ldr	r2, [r2, #0]
 8005c1c:	430b      	orrs	r3, r1
 8005c1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	695a      	ldr	r2, [r3, #20]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	431a      	orrs	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	430a      	orrs	r2, r1
 8005c3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f042 0201 	orr.w	r2, r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2220      	movs	r2, #32
 8005c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	000186a0 	.word	0x000186a0
 8005c78:	001e847f 	.word	0x001e847f
 8005c7c:	003d08ff 	.word	0x003d08ff
 8005c80:	431bde83 	.word	0x431bde83
 8005c84:	10624dd3 	.word	0x10624dd3

08005c88 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d101      	bne.n	8005c9a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e0bf      	b.n	8005e1a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d106      	bne.n	8005cb4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f7fb fcaa 	bl	8001608 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	699a      	ldr	r2, [r3, #24]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005cca:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6999      	ldr	r1, [r3, #24]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685a      	ldr	r2, [r3, #4]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005ce0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6899      	ldr	r1, [r3, #8]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	4b4a      	ldr	r3, [pc, #296]	; (8005e24 <HAL_LTDC_Init+0x19c>)
 8005cfc:	400b      	ands	r3, r1
 8005cfe:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	695b      	ldr	r3, [r3, #20]
 8005d04:	041b      	lsls	r3, r3, #16
 8005d06:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6899      	ldr	r1, [r3, #8]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	699a      	ldr	r2, [r3, #24]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	431a      	orrs	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68d9      	ldr	r1, [r3, #12]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	4b3e      	ldr	r3, [pc, #248]	; (8005e24 <HAL_LTDC_Init+0x19c>)
 8005d2a:	400b      	ands	r3, r1
 8005d2c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	69db      	ldr	r3, [r3, #28]
 8005d32:	041b      	lsls	r3, r3, #16
 8005d34:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68d9      	ldr	r1, [r3, #12]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a1a      	ldr	r2, [r3, #32]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	431a      	orrs	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6919      	ldr	r1, [r3, #16]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	4b33      	ldr	r3, [pc, #204]	; (8005e24 <HAL_LTDC_Init+0x19c>)
 8005d58:	400b      	ands	r3, r1
 8005d5a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d60:	041b      	lsls	r3, r3, #16
 8005d62:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6919      	ldr	r1, [r3, #16]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	431a      	orrs	r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	430a      	orrs	r2, r1
 8005d78:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6959      	ldr	r1, [r3, #20]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	4b27      	ldr	r3, [pc, #156]	; (8005e24 <HAL_LTDC_Init+0x19c>)
 8005d86:	400b      	ands	r3, r1
 8005d88:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8e:	041b      	lsls	r3, r3, #16
 8005d90:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	6959      	ldr	r1, [r3, #20]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	430a      	orrs	r2, r1
 8005da6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005dae:	021b      	lsls	r3, r3, #8
 8005db0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005db8:	041b      	lsls	r3, r3, #16
 8005dba:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005dca:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005dd2:	68ba      	ldr	r2, [r7, #8]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005dde:	431a      	orrs	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	430a      	orrs	r2, r1
 8005de6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f042 0206 	orr.w	r2, r2, #6
 8005df6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	699a      	ldr	r2, [r3, #24]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f042 0201 	orr.w	r2, r2, #1
 8005e06:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	f000f800 	.word	0xf000f800

08005e28 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e36:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e3e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f003 0304 	and.w	r3, r3, #4
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d023      	beq.n	8005e92 <HAL_LTDC_IRQHandler+0x6a>
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	f003 0304 	and.w	r3, r3, #4
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d01e      	beq.n	8005e92 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f022 0204 	bic.w	r2, r2, #4
 8005e62:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2204      	movs	r2, #4
 8005e6a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e72:	f043 0201 	orr.w	r2, r3, #1
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2204      	movs	r2, #4
 8005e80:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 f86f 	bl	8005f70 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d023      	beq.n	8005ee4 <HAL_LTDC_IRQHandler+0xbc>
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d01e      	beq.n	8005ee4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 0202 	bic.w	r2, r2, #2
 8005eb4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2202      	movs	r2, #2
 8005ebc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005ec4:	f043 0202 	orr.w	r2, r3, #2
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2204      	movs	r2, #4
 8005ed2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f846 	bl	8005f70 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d01b      	beq.n	8005f26 <HAL_LTDC_IRQHandler+0xfe>
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d016      	beq.n	8005f26 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 0201 	bic.w	r2, r2, #1
 8005f06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f82f 	bl	8005f84 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f003 0308 	and.w	r3, r3, #8
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d01b      	beq.n	8005f68 <HAL_LTDC_IRQHandler+0x140>
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	f003 0308 	and.w	r3, r3, #8
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d016      	beq.n	8005f68 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f022 0208 	bic.w	r2, r2, #8
 8005f48:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2208      	movs	r2, #8
 8005f50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f818 	bl	8005f98 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005f68:	bf00      	nop
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005f78:	bf00      	nop
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005fac:	b5b0      	push	{r4, r5, r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d101      	bne.n	8005fc6 <HAL_LTDC_ConfigLayer+0x1a>
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	e02c      	b.n	8006020 <HAL_LTDC_ConfigLayer+0x74>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2202      	movs	r2, #2
 8005fd2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2134      	movs	r1, #52	; 0x34
 8005fdc:	fb01 f303 	mul.w	r3, r1, r3
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	4614      	mov	r4, r2
 8005fea:	461d      	mov	r5, r3
 8005fec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ff0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ff4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ff6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ff8:	682b      	ldr	r3, [r5, #0]
 8005ffa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	68b9      	ldr	r1, [r7, #8]
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f000 f811 	bl	8006028 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2201      	movs	r2, #1
 800600c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bdb0      	pop	{r4, r5, r7, pc}

08006028 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006028:	b480      	push	{r7}
 800602a:	b089      	sub	sp, #36	; 0x24
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	685a      	ldr	r2, [r3, #4]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	0c1b      	lsrs	r3, r3, #16
 8006040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006044:	4413      	add	r3, r2
 8006046:	041b      	lsls	r3, r3, #16
 8006048:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	461a      	mov	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	01db      	lsls	r3, r3, #7
 8006054:	4413      	add	r3, r2
 8006056:	3384      	adds	r3, #132	; 0x84
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	6812      	ldr	r2, [r2, #0]
 800605e:	4611      	mov	r1, r2
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	01d2      	lsls	r2, r2, #7
 8006064:	440a      	add	r2, r1
 8006066:	3284      	adds	r2, #132	; 0x84
 8006068:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800606c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	0c1b      	lsrs	r3, r3, #16
 800607a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800607e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006080:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4619      	mov	r1, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	01db      	lsls	r3, r3, #7
 800608c:	440b      	add	r3, r1
 800608e:	3384      	adds	r3, #132	; 0x84
 8006090:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006096:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	68da      	ldr	r2, [r3, #12]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060a6:	4413      	add	r3, r2
 80060a8:	041b      	lsls	r3, r3, #16
 80060aa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	461a      	mov	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	01db      	lsls	r3, r3, #7
 80060b6:	4413      	add	r3, r2
 80060b8:	3384      	adds	r3, #132	; 0x84
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	6812      	ldr	r2, [r2, #0]
 80060c0:	4611      	mov	r1, r2
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	01d2      	lsls	r2, r2, #7
 80060c6:	440a      	add	r2, r1
 80060c8:	3284      	adds	r2, #132	; 0x84
 80060ca:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80060ce:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	689a      	ldr	r2, [r3, #8]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060de:	4413      	add	r3, r2
 80060e0:	1c5a      	adds	r2, r3, #1
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4619      	mov	r1, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	01db      	lsls	r3, r3, #7
 80060ec:	440b      	add	r3, r1
 80060ee:	3384      	adds	r3, #132	; 0x84
 80060f0:	4619      	mov	r1, r3
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	461a      	mov	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	01db      	lsls	r3, r3, #7
 8006102:	4413      	add	r3, r2
 8006104:	3384      	adds	r3, #132	; 0x84
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	6812      	ldr	r2, [r2, #0]
 800610c:	4611      	mov	r1, r2
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	01d2      	lsls	r2, r2, #7
 8006112:	440a      	add	r2, r1
 8006114:	3284      	adds	r2, #132	; 0x84
 8006116:	f023 0307 	bic.w	r3, r3, #7
 800611a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	461a      	mov	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	01db      	lsls	r3, r3, #7
 8006126:	4413      	add	r3, r2
 8006128:	3384      	adds	r3, #132	; 0x84
 800612a:	461a      	mov	r2, r3
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006138:	021b      	lsls	r3, r3, #8
 800613a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006142:	041b      	lsls	r3, r3, #16
 8006144:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	061b      	lsls	r3, r3, #24
 800614c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	461a      	mov	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	01db      	lsls	r3, r3, #7
 8006158:	4413      	add	r3, r2
 800615a:	3384      	adds	r3, #132	; 0x84
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	461a      	mov	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	01db      	lsls	r3, r3, #7
 8006168:	4413      	add	r3, r2
 800616a:	3384      	adds	r3, #132	; 0x84
 800616c:	461a      	mov	r2, r3
 800616e:	2300      	movs	r3, #0
 8006170:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006178:	461a      	mov	r2, r3
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	431a      	orrs	r2, r3
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	431a      	orrs	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4619      	mov	r1, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	01db      	lsls	r3, r3, #7
 800618c:	440b      	add	r3, r1
 800618e:	3384      	adds	r3, #132	; 0x84
 8006190:	4619      	mov	r1, r3
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	4313      	orrs	r3, r2
 8006196:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	461a      	mov	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	01db      	lsls	r3, r3, #7
 80061a2:	4413      	add	r3, r2
 80061a4:	3384      	adds	r3, #132	; 0x84
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	6812      	ldr	r2, [r2, #0]
 80061ac:	4611      	mov	r1, r2
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	01d2      	lsls	r2, r2, #7
 80061b2:	440a      	add	r2, r1
 80061b4:	3284      	adds	r2, #132	; 0x84
 80061b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80061ba:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	461a      	mov	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	01db      	lsls	r3, r3, #7
 80061c6:	4413      	add	r3, r2
 80061c8:	3384      	adds	r3, #132	; 0x84
 80061ca:	461a      	mov	r2, r3
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	461a      	mov	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	01db      	lsls	r3, r3, #7
 80061dc:	4413      	add	r3, r2
 80061de:	3384      	adds	r3, #132	; 0x84
 80061e0:	69db      	ldr	r3, [r3, #28]
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	6812      	ldr	r2, [r2, #0]
 80061e6:	4611      	mov	r1, r2
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	01d2      	lsls	r2, r2, #7
 80061ec:	440a      	add	r2, r1
 80061ee:	3284      	adds	r2, #132	; 0x84
 80061f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80061f4:	f023 0307 	bic.w	r3, r3, #7
 80061f8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	69da      	ldr	r2, [r3, #28]
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	68f9      	ldr	r1, [r7, #12]
 8006204:	6809      	ldr	r1, [r1, #0]
 8006206:	4608      	mov	r0, r1
 8006208:	6879      	ldr	r1, [r7, #4]
 800620a:	01c9      	lsls	r1, r1, #7
 800620c:	4401      	add	r1, r0
 800620e:	3184      	adds	r1, #132	; 0x84
 8006210:	4313      	orrs	r3, r2
 8006212:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	461a      	mov	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	01db      	lsls	r3, r3, #7
 800621e:	4413      	add	r3, r2
 8006220:	3384      	adds	r3, #132	; 0x84
 8006222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	461a      	mov	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	01db      	lsls	r3, r3, #7
 800622e:	4413      	add	r3, r2
 8006230:	3384      	adds	r3, #132	; 0x84
 8006232:	461a      	mov	r2, r3
 8006234:	2300      	movs	r3, #0
 8006236:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	461a      	mov	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	01db      	lsls	r3, r3, #7
 8006242:	4413      	add	r3, r2
 8006244:	3384      	adds	r3, #132	; 0x84
 8006246:	461a      	mov	r2, r3
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d102      	bne.n	800625c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006256:	2304      	movs	r3, #4
 8006258:	61fb      	str	r3, [r7, #28]
 800625a:	e01b      	b.n	8006294 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d102      	bne.n	800626a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006264:	2303      	movs	r3, #3
 8006266:	61fb      	str	r3, [r7, #28]
 8006268:	e014      	b.n	8006294 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	2b04      	cmp	r3, #4
 8006270:	d00b      	beq.n	800628a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006276:	2b02      	cmp	r3, #2
 8006278:	d007      	beq.n	800628a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800627e:	2b03      	cmp	r3, #3
 8006280:	d003      	beq.n	800628a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006286:	2b07      	cmp	r3, #7
 8006288:	d102      	bne.n	8006290 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800628a:	2302      	movs	r3, #2
 800628c:	61fb      	str	r3, [r7, #28]
 800628e:	e001      	b.n	8006294 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006290:	2301      	movs	r3, #1
 8006292:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	461a      	mov	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	01db      	lsls	r3, r3, #7
 800629e:	4413      	add	r3, r2
 80062a0:	3384      	adds	r3, #132	; 0x84
 80062a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	6812      	ldr	r2, [r2, #0]
 80062a8:	4611      	mov	r1, r2
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	01d2      	lsls	r2, r2, #7
 80062ae:	440a      	add	r2, r1
 80062b0:	3284      	adds	r2, #132	; 0x84
 80062b2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80062b6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062bc:	69fa      	ldr	r2, [r7, #28]
 80062be:	fb02 f303 	mul.w	r3, r2, r3
 80062c2:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	6859      	ldr	r1, [r3, #4]
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	1acb      	subs	r3, r1, r3
 80062ce:	69f9      	ldr	r1, [r7, #28]
 80062d0:	fb01 f303 	mul.w	r3, r1, r3
 80062d4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80062d6:	68f9      	ldr	r1, [r7, #12]
 80062d8:	6809      	ldr	r1, [r1, #0]
 80062da:	4608      	mov	r0, r1
 80062dc:	6879      	ldr	r1, [r7, #4]
 80062de:	01c9      	lsls	r1, r1, #7
 80062e0:	4401      	add	r1, r0
 80062e2:	3184      	adds	r1, #132	; 0x84
 80062e4:	4313      	orrs	r3, r2
 80062e6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	461a      	mov	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	01db      	lsls	r3, r3, #7
 80062f2:	4413      	add	r3, r2
 80062f4:	3384      	adds	r3, #132	; 0x84
 80062f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	6812      	ldr	r2, [r2, #0]
 80062fc:	4611      	mov	r1, r2
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	01d2      	lsls	r2, r2, #7
 8006302:	440a      	add	r2, r1
 8006304:	3284      	adds	r2, #132	; 0x84
 8006306:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800630a:	f023 0307 	bic.w	r3, r3, #7
 800630e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	461a      	mov	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	01db      	lsls	r3, r3, #7
 800631a:	4413      	add	r3, r2
 800631c:	3384      	adds	r3, #132	; 0x84
 800631e:	461a      	mov	r2, r3
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006324:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	461a      	mov	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	01db      	lsls	r3, r3, #7
 8006330:	4413      	add	r3, r2
 8006332:	3384      	adds	r3, #132	; 0x84
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	6812      	ldr	r2, [r2, #0]
 800633a:	4611      	mov	r1, r2
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	01d2      	lsls	r2, r2, #7
 8006340:	440a      	add	r2, r1
 8006342:	3284      	adds	r2, #132	; 0x84
 8006344:	f043 0301 	orr.w	r3, r3, #1
 8006348:	6013      	str	r3, [r2, #0]
}
 800634a:	bf00      	nop
 800634c:	3724      	adds	r7, #36	; 0x24
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
	...

08006358 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800635e:	2300      	movs	r3, #0
 8006360:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006362:	2300      	movs	r3, #0
 8006364:	603b      	str	r3, [r7, #0]
 8006366:	4b20      	ldr	r3, [pc, #128]	; (80063e8 <HAL_PWREx_EnableOverDrive+0x90>)
 8006368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636a:	4a1f      	ldr	r2, [pc, #124]	; (80063e8 <HAL_PWREx_EnableOverDrive+0x90>)
 800636c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006370:	6413      	str	r3, [r2, #64]	; 0x40
 8006372:	4b1d      	ldr	r3, [pc, #116]	; (80063e8 <HAL_PWREx_EnableOverDrive+0x90>)
 8006374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800637a:	603b      	str	r3, [r7, #0]
 800637c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800637e:	4b1b      	ldr	r3, [pc, #108]	; (80063ec <HAL_PWREx_EnableOverDrive+0x94>)
 8006380:	2201      	movs	r2, #1
 8006382:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006384:	f7fb fdf8 	bl	8001f78 <HAL_GetTick>
 8006388:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800638a:	e009      	b.n	80063a0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800638c:	f7fb fdf4 	bl	8001f78 <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800639a:	d901      	bls.n	80063a0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e01f      	b.n	80063e0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80063a0:	4b13      	ldr	r3, [pc, #76]	; (80063f0 <HAL_PWREx_EnableOverDrive+0x98>)
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ac:	d1ee      	bne.n	800638c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80063ae:	4b11      	ldr	r3, [pc, #68]	; (80063f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80063b0:	2201      	movs	r2, #1
 80063b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80063b4:	f7fb fde0 	bl	8001f78 <HAL_GetTick>
 80063b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80063ba:	e009      	b.n	80063d0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80063bc:	f7fb fddc 	bl	8001f78 <HAL_GetTick>
 80063c0:	4602      	mov	r2, r0
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063ca:	d901      	bls.n	80063d0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e007      	b.n	80063e0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80063d0:	4b07      	ldr	r3, [pc, #28]	; (80063f0 <HAL_PWREx_EnableOverDrive+0x98>)
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063dc:	d1ee      	bne.n	80063bc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	40023800 	.word	0x40023800
 80063ec:	420e0040 	.word	0x420e0040
 80063f0:	40007000 	.word	0x40007000
 80063f4:	420e0044 	.word	0x420e0044

080063f8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af02      	add	r7, sp, #8
 80063fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006400:	f7fb fdba 	bl	8001f78 <HAL_GetTick>
 8006404:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d101      	bne.n	8006410 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e069      	b.n	80064e4 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b00      	cmp	r3, #0
 800641a:	d10b      	bne.n	8006434 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f7fb f917 	bl	8001658 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800642a:	f241 3188 	movw	r1, #5000	; 0x1388
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f85e 	bl	80064f0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	3b01      	subs	r3, #1
 8006444:	021a      	lsls	r2, r3, #8
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	430a      	orrs	r2, r1
 800644c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	2120      	movs	r1, #32
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f856 	bl	800650c <QSPI_WaitFlagStateUntilTimeout>
 8006460:	4603      	mov	r3, r0
 8006462:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006464:	7afb      	ldrb	r3, [r7, #11]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d137      	bne.n	80064da <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006474:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	6852      	ldr	r2, [r2, #4]
 800647c:	0611      	lsls	r1, r2, #24
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	68d2      	ldr	r2, [r2, #12]
 8006482:	4311      	orrs	r1, r2
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	69d2      	ldr	r2, [r2, #28]
 8006488:	4311      	orrs	r1, r2
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	6a12      	ldr	r2, [r2, #32]
 800648e:	4311      	orrs	r1, r2
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	6812      	ldr	r2, [r2, #0]
 8006494:	430b      	orrs	r3, r1
 8006496:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	685a      	ldr	r2, [r3, #4]
 800649e:	4b13      	ldr	r3, [pc, #76]	; (80064ec <HAL_QSPI_Init+0xf4>)
 80064a0:	4013      	ands	r3, r2
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	6912      	ldr	r2, [r2, #16]
 80064a6:	0411      	lsls	r1, r2, #16
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	6952      	ldr	r2, [r2, #20]
 80064ac:	4311      	orrs	r1, r2
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	6992      	ldr	r2, [r2, #24]
 80064b2:	4311      	orrs	r1, r2
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	6812      	ldr	r2, [r2, #0]
 80064b8:	430b      	orrs	r3, r1
 80064ba:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f042 0201 	orr.w	r2, r2, #1
 80064ca:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80064e2:	7afb      	ldrb	r3, [r7, #11]
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	ffe0f8fe 	.word	0xffe0f8fe

080064f0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	683a      	ldr	r2, [r7, #0]
 80064fe:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	603b      	str	r3, [r7, #0]
 8006518:	4613      	mov	r3, r2
 800651a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800651c:	e01a      	b.n	8006554 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006524:	d016      	beq.n	8006554 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006526:	f7fb fd27 	bl	8001f78 <HAL_GetTick>
 800652a:	4602      	mov	r2, r0
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	69ba      	ldr	r2, [r7, #24]
 8006532:	429a      	cmp	r2, r3
 8006534:	d302      	bcc.n	800653c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d10b      	bne.n	8006554 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2204      	movs	r2, #4
 8006540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006548:	f043 0201 	orr.w	r2, r3, #1
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e00e      	b.n	8006572 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	689a      	ldr	r2, [r3, #8]
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	4013      	ands	r3, r2
 800655e:	2b00      	cmp	r3, #0
 8006560:	bf14      	ite	ne
 8006562:	2301      	movne	r3, #1
 8006564:	2300      	moveq	r3, #0
 8006566:	b2db      	uxtb	r3, r3
 8006568:	461a      	mov	r2, r3
 800656a:	79fb      	ldrb	r3, [r7, #7]
 800656c:	429a      	cmp	r2, r3
 800656e:	d1d6      	bne.n	800651e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
	...

0800657c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d101      	bne.n	8006590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e0cc      	b.n	800672a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006590:	4b68      	ldr	r3, [pc, #416]	; (8006734 <HAL_RCC_ClockConfig+0x1b8>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 030f 	and.w	r3, r3, #15
 8006598:	683a      	ldr	r2, [r7, #0]
 800659a:	429a      	cmp	r2, r3
 800659c:	d90c      	bls.n	80065b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800659e:	4b65      	ldr	r3, [pc, #404]	; (8006734 <HAL_RCC_ClockConfig+0x1b8>)
 80065a0:	683a      	ldr	r2, [r7, #0]
 80065a2:	b2d2      	uxtb	r2, r2
 80065a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065a6:	4b63      	ldr	r3, [pc, #396]	; (8006734 <HAL_RCC_ClockConfig+0x1b8>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 030f 	and.w	r3, r3, #15
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d001      	beq.n	80065b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e0b8      	b.n	800672a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0302 	and.w	r3, r3, #2
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d020      	beq.n	8006606 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0304 	and.w	r3, r3, #4
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d005      	beq.n	80065dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065d0:	4b59      	ldr	r3, [pc, #356]	; (8006738 <HAL_RCC_ClockConfig+0x1bc>)
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	4a58      	ldr	r2, [pc, #352]	; (8006738 <HAL_RCC_ClockConfig+0x1bc>)
 80065d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80065da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 0308 	and.w	r3, r3, #8
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d005      	beq.n	80065f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80065e8:	4b53      	ldr	r3, [pc, #332]	; (8006738 <HAL_RCC_ClockConfig+0x1bc>)
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	4a52      	ldr	r2, [pc, #328]	; (8006738 <HAL_RCC_ClockConfig+0x1bc>)
 80065ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80065f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065f4:	4b50      	ldr	r3, [pc, #320]	; (8006738 <HAL_RCC_ClockConfig+0x1bc>)
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	494d      	ldr	r1, [pc, #308]	; (8006738 <HAL_RCC_ClockConfig+0x1bc>)
 8006602:	4313      	orrs	r3, r2
 8006604:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	2b00      	cmp	r3, #0
 8006610:	d044      	beq.n	800669c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d107      	bne.n	800662a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800661a:	4b47      	ldr	r3, [pc, #284]	; (8006738 <HAL_RCC_ClockConfig+0x1bc>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d119      	bne.n	800665a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e07f      	b.n	800672a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	2b02      	cmp	r3, #2
 8006630:	d003      	beq.n	800663a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006636:	2b03      	cmp	r3, #3
 8006638:	d107      	bne.n	800664a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800663a:	4b3f      	ldr	r3, [pc, #252]	; (8006738 <HAL_RCC_ClockConfig+0x1bc>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d109      	bne.n	800665a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e06f      	b.n	800672a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800664a:	4b3b      	ldr	r3, [pc, #236]	; (8006738 <HAL_RCC_ClockConfig+0x1bc>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 0302 	and.w	r3, r3, #2
 8006652:	2b00      	cmp	r3, #0
 8006654:	d101      	bne.n	800665a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e067      	b.n	800672a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800665a:	4b37      	ldr	r3, [pc, #220]	; (8006738 <HAL_RCC_ClockConfig+0x1bc>)
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f023 0203 	bic.w	r2, r3, #3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	4934      	ldr	r1, [pc, #208]	; (8006738 <HAL_RCC_ClockConfig+0x1bc>)
 8006668:	4313      	orrs	r3, r2
 800666a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800666c:	f7fb fc84 	bl	8001f78 <HAL_GetTick>
 8006670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006672:	e00a      	b.n	800668a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006674:	f7fb fc80 	bl	8001f78 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006682:	4293      	cmp	r3, r2
 8006684:	d901      	bls.n	800668a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e04f      	b.n	800672a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800668a:	4b2b      	ldr	r3, [pc, #172]	; (8006738 <HAL_RCC_ClockConfig+0x1bc>)
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f003 020c 	and.w	r2, r3, #12
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	429a      	cmp	r2, r3
 800669a:	d1eb      	bne.n	8006674 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800669c:	4b25      	ldr	r3, [pc, #148]	; (8006734 <HAL_RCC_ClockConfig+0x1b8>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 030f 	and.w	r3, r3, #15
 80066a4:	683a      	ldr	r2, [r7, #0]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d20c      	bcs.n	80066c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066aa:	4b22      	ldr	r3, [pc, #136]	; (8006734 <HAL_RCC_ClockConfig+0x1b8>)
 80066ac:	683a      	ldr	r2, [r7, #0]
 80066ae:	b2d2      	uxtb	r2, r2
 80066b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066b2:	4b20      	ldr	r3, [pc, #128]	; (8006734 <HAL_RCC_ClockConfig+0x1b8>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 030f 	and.w	r3, r3, #15
 80066ba:	683a      	ldr	r2, [r7, #0]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d001      	beq.n	80066c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e032      	b.n	800672a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0304 	and.w	r3, r3, #4
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d008      	beq.n	80066e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066d0:	4b19      	ldr	r3, [pc, #100]	; (8006738 <HAL_RCC_ClockConfig+0x1bc>)
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	4916      	ldr	r1, [pc, #88]	; (8006738 <HAL_RCC_ClockConfig+0x1bc>)
 80066de:	4313      	orrs	r3, r2
 80066e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0308 	and.w	r3, r3, #8
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d009      	beq.n	8006702 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066ee:	4b12      	ldr	r3, [pc, #72]	; (8006738 <HAL_RCC_ClockConfig+0x1bc>)
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	00db      	lsls	r3, r3, #3
 80066fc:	490e      	ldr	r1, [pc, #56]	; (8006738 <HAL_RCC_ClockConfig+0x1bc>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006702:	f000 f821 	bl	8006748 <HAL_RCC_GetSysClockFreq>
 8006706:	4602      	mov	r2, r0
 8006708:	4b0b      	ldr	r3, [pc, #44]	; (8006738 <HAL_RCC_ClockConfig+0x1bc>)
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	091b      	lsrs	r3, r3, #4
 800670e:	f003 030f 	and.w	r3, r3, #15
 8006712:	490a      	ldr	r1, [pc, #40]	; (800673c <HAL_RCC_ClockConfig+0x1c0>)
 8006714:	5ccb      	ldrb	r3, [r1, r3]
 8006716:	fa22 f303 	lsr.w	r3, r2, r3
 800671a:	4a09      	ldr	r2, [pc, #36]	; (8006740 <HAL_RCC_ClockConfig+0x1c4>)
 800671c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800671e:	4b09      	ldr	r3, [pc, #36]	; (8006744 <HAL_RCC_ClockConfig+0x1c8>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4618      	mov	r0, r3
 8006724:	f7fb fa2c 	bl	8001b80 <HAL_InitTick>

  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	40023c00 	.word	0x40023c00
 8006738:	40023800 	.word	0x40023800
 800673c:	0802e634 	.word	0x0802e634
 8006740:	20000004 	.word	0x20000004
 8006744:	20000008 	.word	0x20000008

08006748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800674c:	b094      	sub	sp, #80	; 0x50
 800674e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006750:	2300      	movs	r3, #0
 8006752:	647b      	str	r3, [r7, #68]	; 0x44
 8006754:	2300      	movs	r3, #0
 8006756:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006758:	2300      	movs	r3, #0
 800675a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800675c:	2300      	movs	r3, #0
 800675e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006760:	4b79      	ldr	r3, [pc, #484]	; (8006948 <HAL_RCC_GetSysClockFreq+0x200>)
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f003 030c 	and.w	r3, r3, #12
 8006768:	2b08      	cmp	r3, #8
 800676a:	d00d      	beq.n	8006788 <HAL_RCC_GetSysClockFreq+0x40>
 800676c:	2b08      	cmp	r3, #8
 800676e:	f200 80e1 	bhi.w	8006934 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006772:	2b00      	cmp	r3, #0
 8006774:	d002      	beq.n	800677c <HAL_RCC_GetSysClockFreq+0x34>
 8006776:	2b04      	cmp	r3, #4
 8006778:	d003      	beq.n	8006782 <HAL_RCC_GetSysClockFreq+0x3a>
 800677a:	e0db      	b.n	8006934 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800677c:	4b73      	ldr	r3, [pc, #460]	; (800694c <HAL_RCC_GetSysClockFreq+0x204>)
 800677e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006780:	e0db      	b.n	800693a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006782:	4b73      	ldr	r3, [pc, #460]	; (8006950 <HAL_RCC_GetSysClockFreq+0x208>)
 8006784:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006786:	e0d8      	b.n	800693a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006788:	4b6f      	ldr	r3, [pc, #444]	; (8006948 <HAL_RCC_GetSysClockFreq+0x200>)
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006790:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006792:	4b6d      	ldr	r3, [pc, #436]	; (8006948 <HAL_RCC_GetSysClockFreq+0x200>)
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d063      	beq.n	8006866 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800679e:	4b6a      	ldr	r3, [pc, #424]	; (8006948 <HAL_RCC_GetSysClockFreq+0x200>)
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	099b      	lsrs	r3, r3, #6
 80067a4:	2200      	movs	r2, #0
 80067a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80067a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80067aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067b0:	633b      	str	r3, [r7, #48]	; 0x30
 80067b2:	2300      	movs	r3, #0
 80067b4:	637b      	str	r3, [r7, #52]	; 0x34
 80067b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80067ba:	4622      	mov	r2, r4
 80067bc:	462b      	mov	r3, r5
 80067be:	f04f 0000 	mov.w	r0, #0
 80067c2:	f04f 0100 	mov.w	r1, #0
 80067c6:	0159      	lsls	r1, r3, #5
 80067c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067cc:	0150      	lsls	r0, r2, #5
 80067ce:	4602      	mov	r2, r0
 80067d0:	460b      	mov	r3, r1
 80067d2:	4621      	mov	r1, r4
 80067d4:	1a51      	subs	r1, r2, r1
 80067d6:	6139      	str	r1, [r7, #16]
 80067d8:	4629      	mov	r1, r5
 80067da:	eb63 0301 	sbc.w	r3, r3, r1
 80067de:	617b      	str	r3, [r7, #20]
 80067e0:	f04f 0200 	mov.w	r2, #0
 80067e4:	f04f 0300 	mov.w	r3, #0
 80067e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067ec:	4659      	mov	r1, fp
 80067ee:	018b      	lsls	r3, r1, #6
 80067f0:	4651      	mov	r1, sl
 80067f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80067f6:	4651      	mov	r1, sl
 80067f8:	018a      	lsls	r2, r1, #6
 80067fa:	4651      	mov	r1, sl
 80067fc:	ebb2 0801 	subs.w	r8, r2, r1
 8006800:	4659      	mov	r1, fp
 8006802:	eb63 0901 	sbc.w	r9, r3, r1
 8006806:	f04f 0200 	mov.w	r2, #0
 800680a:	f04f 0300 	mov.w	r3, #0
 800680e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006812:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006816:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800681a:	4690      	mov	r8, r2
 800681c:	4699      	mov	r9, r3
 800681e:	4623      	mov	r3, r4
 8006820:	eb18 0303 	adds.w	r3, r8, r3
 8006824:	60bb      	str	r3, [r7, #8]
 8006826:	462b      	mov	r3, r5
 8006828:	eb49 0303 	adc.w	r3, r9, r3
 800682c:	60fb      	str	r3, [r7, #12]
 800682e:	f04f 0200 	mov.w	r2, #0
 8006832:	f04f 0300 	mov.w	r3, #0
 8006836:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800683a:	4629      	mov	r1, r5
 800683c:	024b      	lsls	r3, r1, #9
 800683e:	4621      	mov	r1, r4
 8006840:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006844:	4621      	mov	r1, r4
 8006846:	024a      	lsls	r2, r1, #9
 8006848:	4610      	mov	r0, r2
 800684a:	4619      	mov	r1, r3
 800684c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800684e:	2200      	movs	r2, #0
 8006850:	62bb      	str	r3, [r7, #40]	; 0x28
 8006852:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006854:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006858:	f7f9 fd22 	bl	80002a0 <__aeabi_uldivmod>
 800685c:	4602      	mov	r2, r0
 800685e:	460b      	mov	r3, r1
 8006860:	4613      	mov	r3, r2
 8006862:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006864:	e058      	b.n	8006918 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006866:	4b38      	ldr	r3, [pc, #224]	; (8006948 <HAL_RCC_GetSysClockFreq+0x200>)
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	099b      	lsrs	r3, r3, #6
 800686c:	2200      	movs	r2, #0
 800686e:	4618      	mov	r0, r3
 8006870:	4611      	mov	r1, r2
 8006872:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006876:	623b      	str	r3, [r7, #32]
 8006878:	2300      	movs	r3, #0
 800687a:	627b      	str	r3, [r7, #36]	; 0x24
 800687c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006880:	4642      	mov	r2, r8
 8006882:	464b      	mov	r3, r9
 8006884:	f04f 0000 	mov.w	r0, #0
 8006888:	f04f 0100 	mov.w	r1, #0
 800688c:	0159      	lsls	r1, r3, #5
 800688e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006892:	0150      	lsls	r0, r2, #5
 8006894:	4602      	mov	r2, r0
 8006896:	460b      	mov	r3, r1
 8006898:	4641      	mov	r1, r8
 800689a:	ebb2 0a01 	subs.w	sl, r2, r1
 800689e:	4649      	mov	r1, r9
 80068a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80068a4:	f04f 0200 	mov.w	r2, #0
 80068a8:	f04f 0300 	mov.w	r3, #0
 80068ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80068b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80068b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80068b8:	ebb2 040a 	subs.w	r4, r2, sl
 80068bc:	eb63 050b 	sbc.w	r5, r3, fp
 80068c0:	f04f 0200 	mov.w	r2, #0
 80068c4:	f04f 0300 	mov.w	r3, #0
 80068c8:	00eb      	lsls	r3, r5, #3
 80068ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068ce:	00e2      	lsls	r2, r4, #3
 80068d0:	4614      	mov	r4, r2
 80068d2:	461d      	mov	r5, r3
 80068d4:	4643      	mov	r3, r8
 80068d6:	18e3      	adds	r3, r4, r3
 80068d8:	603b      	str	r3, [r7, #0]
 80068da:	464b      	mov	r3, r9
 80068dc:	eb45 0303 	adc.w	r3, r5, r3
 80068e0:	607b      	str	r3, [r7, #4]
 80068e2:	f04f 0200 	mov.w	r2, #0
 80068e6:	f04f 0300 	mov.w	r3, #0
 80068ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80068ee:	4629      	mov	r1, r5
 80068f0:	028b      	lsls	r3, r1, #10
 80068f2:	4621      	mov	r1, r4
 80068f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80068f8:	4621      	mov	r1, r4
 80068fa:	028a      	lsls	r2, r1, #10
 80068fc:	4610      	mov	r0, r2
 80068fe:	4619      	mov	r1, r3
 8006900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006902:	2200      	movs	r2, #0
 8006904:	61bb      	str	r3, [r7, #24]
 8006906:	61fa      	str	r2, [r7, #28]
 8006908:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800690c:	f7f9 fcc8 	bl	80002a0 <__aeabi_uldivmod>
 8006910:	4602      	mov	r2, r0
 8006912:	460b      	mov	r3, r1
 8006914:	4613      	mov	r3, r2
 8006916:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006918:	4b0b      	ldr	r3, [pc, #44]	; (8006948 <HAL_RCC_GetSysClockFreq+0x200>)
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	0c1b      	lsrs	r3, r3, #16
 800691e:	f003 0303 	and.w	r3, r3, #3
 8006922:	3301      	adds	r3, #1
 8006924:	005b      	lsls	r3, r3, #1
 8006926:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006928:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800692a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800692c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006930:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006932:	e002      	b.n	800693a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006934:	4b05      	ldr	r3, [pc, #20]	; (800694c <HAL_RCC_GetSysClockFreq+0x204>)
 8006936:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006938:	bf00      	nop
    }
  }
  return sysclockfreq;
 800693a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800693c:	4618      	mov	r0, r3
 800693e:	3750      	adds	r7, #80	; 0x50
 8006940:	46bd      	mov	sp, r7
 8006942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006946:	bf00      	nop
 8006948:	40023800 	.word	0x40023800
 800694c:	00f42400 	.word	0x00f42400
 8006950:	007a1200 	.word	0x007a1200

08006954 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006954:	b480      	push	{r7}
 8006956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006958:	4b03      	ldr	r3, [pc, #12]	; (8006968 <HAL_RCC_GetHCLKFreq+0x14>)
 800695a:	681b      	ldr	r3, [r3, #0]
}
 800695c:	4618      	mov	r0, r3
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	20000004 	.word	0x20000004

0800696c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006970:	f7ff fff0 	bl	8006954 <HAL_RCC_GetHCLKFreq>
 8006974:	4602      	mov	r2, r0
 8006976:	4b05      	ldr	r3, [pc, #20]	; (800698c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	0a9b      	lsrs	r3, r3, #10
 800697c:	f003 0307 	and.w	r3, r3, #7
 8006980:	4903      	ldr	r1, [pc, #12]	; (8006990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006982:	5ccb      	ldrb	r3, [r1, r3]
 8006984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006988:	4618      	mov	r0, r3
 800698a:	bd80      	pop	{r7, pc}
 800698c:	40023800 	.word	0x40023800
 8006990:	0802e644 	.word	0x0802e644

08006994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006998:	f7ff ffdc 	bl	8006954 <HAL_RCC_GetHCLKFreq>
 800699c:	4602      	mov	r2, r0
 800699e:	4b05      	ldr	r3, [pc, #20]	; (80069b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	0b5b      	lsrs	r3, r3, #13
 80069a4:	f003 0307 	and.w	r3, r3, #7
 80069a8:	4903      	ldr	r1, [pc, #12]	; (80069b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80069aa:	5ccb      	ldrb	r3, [r1, r3]
 80069ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	40023800 	.word	0x40023800
 80069b8:	0802e644 	.word	0x0802e644

080069bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	220f      	movs	r2, #15
 80069ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80069cc:	4b12      	ldr	r3, [pc, #72]	; (8006a18 <HAL_RCC_GetClockConfig+0x5c>)
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	f003 0203 	and.w	r2, r3, #3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80069d8:	4b0f      	ldr	r3, [pc, #60]	; (8006a18 <HAL_RCC_GetClockConfig+0x5c>)
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80069e4:	4b0c      	ldr	r3, [pc, #48]	; (8006a18 <HAL_RCC_GetClockConfig+0x5c>)
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80069f0:	4b09      	ldr	r3, [pc, #36]	; (8006a18 <HAL_RCC_GetClockConfig+0x5c>)
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	08db      	lsrs	r3, r3, #3
 80069f6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80069fe:	4b07      	ldr	r3, [pc, #28]	; (8006a1c <HAL_RCC_GetClockConfig+0x60>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 020f 	and.w	r2, r3, #15
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	601a      	str	r2, [r3, #0]
}
 8006a0a:	bf00      	nop
 8006a0c:	370c      	adds	r7, #12
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	40023800 	.word	0x40023800
 8006a1c:	40023c00 	.word	0x40023c00

08006a20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b088      	sub	sp, #32
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8006a30:	2300      	movs	r3, #0
 8006a32:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8006a34:	2300      	movs	r3, #0
 8006a36:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00a      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006a48:	4b66      	ldr	r3, [pc, #408]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006a4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a4e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a56:	4963      	ldr	r1, [pc, #396]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00a      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006a6a:	4b5e      	ldr	r3, [pc, #376]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a70:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a78:	495a      	ldr	r1, [pc, #360]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0301 	and.w	r3, r3, #1
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d10b      	bne.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d105      	bne.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d075      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006aa4:	4b50      	ldr	r3, [pc, #320]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006aaa:	f7fb fa65 	bl	8001f78 <HAL_GetTick>
 8006aae:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ab0:	e008      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006ab2:	f7fb fa61 	bl	8001f78 <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d901      	bls.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e1dc      	b.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ac4:	4b47      	ldr	r3, [pc, #284]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1f0      	bne.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0301 	and.w	r3, r3, #1
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d009      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	019a      	lsls	r2, r3, #6
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	071b      	lsls	r3, r3, #28
 8006ae8:	493e      	ldr	r1, [pc, #248]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006aea:	4313      	orrs	r3, r2
 8006aec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 0302 	and.w	r3, r3, #2
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d01f      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006afc:	4b39      	ldr	r3, [pc, #228]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b02:	0f1b      	lsrs	r3, r3, #28
 8006b04:	f003 0307 	and.w	r3, r3, #7
 8006b08:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	019a      	lsls	r2, r3, #6
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	061b      	lsls	r3, r3, #24
 8006b16:	431a      	orrs	r2, r3
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	071b      	lsls	r3, r3, #28
 8006b1c:	4931      	ldr	r1, [pc, #196]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006b24:	4b2f      	ldr	r3, [pc, #188]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b2a:	f023 021f 	bic.w	r2, r3, #31
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	3b01      	subs	r3, #1
 8006b34:	492b      	ldr	r1, [pc, #172]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006b36:	4313      	orrs	r3, r2
 8006b38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00d      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	019a      	lsls	r2, r3, #6
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	061b      	lsls	r3, r3, #24
 8006b54:	431a      	orrs	r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	071b      	lsls	r3, r3, #28
 8006b5c:	4921      	ldr	r1, [pc, #132]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006b64:	4b20      	ldr	r3, [pc, #128]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006b66:	2201      	movs	r2, #1
 8006b68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b6a:	f7fb fa05 	bl	8001f78 <HAL_GetTick>
 8006b6e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b70:	e008      	b.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006b72:	f7fb fa01 	bl	8001f78 <HAL_GetTick>
 8006b76:	4602      	mov	r2, r0
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d901      	bls.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	e17c      	b.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b84:	4b17      	ldr	r3, [pc, #92]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d0f0      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0304 	and.w	r3, r3, #4
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d112      	bne.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10c      	bne.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f000 80ce 	beq.w	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8006bba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bbe:	f040 80c8 	bne.w	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006bc2:	4b0a      	ldr	r3, [pc, #40]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bc8:	f7fb f9d6 	bl	8001f78 <HAL_GetTick>
 8006bcc:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006bce:	e00f      	b.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006bd0:	f7fb f9d2 	bl	8001f78 <HAL_GetTick>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d908      	bls.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e14d      	b.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8006be2:	bf00      	nop
 8006be4:	40023800 	.word	0x40023800
 8006be8:	42470068 	.word	0x42470068
 8006bec:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006bf0:	4ba5      	ldr	r3, [pc, #660]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bfc:	d0e8      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 0304 	and.w	r3, r3, #4
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d02e      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006c0a:	4b9f      	ldr	r3, [pc, #636]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c10:	0c1b      	lsrs	r3, r3, #16
 8006c12:	f003 0303 	and.w	r3, r3, #3
 8006c16:	3301      	adds	r3, #1
 8006c18:	005b      	lsls	r3, r3, #1
 8006c1a:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006c1c:	4b9a      	ldr	r3, [pc, #616]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c22:	0f1b      	lsrs	r3, r3, #28
 8006c24:	f003 0307 	and.w	r3, r3, #7
 8006c28:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	019a      	lsls	r2, r3, #6
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	085b      	lsrs	r3, r3, #1
 8006c34:	3b01      	subs	r3, #1
 8006c36:	041b      	lsls	r3, r3, #16
 8006c38:	431a      	orrs	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	699b      	ldr	r3, [r3, #24]
 8006c3e:	061b      	lsls	r3, r3, #24
 8006c40:	431a      	orrs	r2, r3
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	071b      	lsls	r3, r3, #28
 8006c46:	4990      	ldr	r1, [pc, #576]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006c4e:	4b8e      	ldr	r3, [pc, #568]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c54:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	021b      	lsls	r3, r3, #8
 8006c60:	4989      	ldr	r1, [pc, #548]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0308 	and.w	r3, r3, #8
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d02c      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006c74:	4b84      	ldr	r3, [pc, #528]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c7a:	0c1b      	lsrs	r3, r3, #16
 8006c7c:	f003 0303 	and.w	r3, r3, #3
 8006c80:	3301      	adds	r3, #1
 8006c82:	005b      	lsls	r3, r3, #1
 8006c84:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006c86:	4b80      	ldr	r3, [pc, #512]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c8c:	0e1b      	lsrs	r3, r3, #24
 8006c8e:	f003 030f 	and.w	r3, r3, #15
 8006c92:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	019a      	lsls	r2, r3, #6
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	085b      	lsrs	r3, r3, #1
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	041b      	lsls	r3, r3, #16
 8006ca2:	431a      	orrs	r2, r3
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	061b      	lsls	r3, r3, #24
 8006ca8:	431a      	orrs	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	071b      	lsls	r3, r3, #28
 8006cb0:	4975      	ldr	r1, [pc, #468]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006cb8:	4b73      	ldr	r3, [pc, #460]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006cba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cbe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc6:	4970      	ldr	r1, [pc, #448]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d024      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8006cde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ce2:	d11f      	bne.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006ce4:	4b68      	ldr	r3, [pc, #416]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cea:	0e1b      	lsrs	r3, r3, #24
 8006cec:	f003 030f 	and.w	r3, r3, #15
 8006cf0:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006cf2:	4b65      	ldr	r3, [pc, #404]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cf8:	0f1b      	lsrs	r3, r3, #28
 8006cfa:	f003 0307 	and.w	r3, r3, #7
 8006cfe:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	019a      	lsls	r2, r3, #6
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	085b      	lsrs	r3, r3, #1
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	041b      	lsls	r3, r3, #16
 8006d10:	431a      	orrs	r2, r3
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	061b      	lsls	r3, r3, #24
 8006d16:	431a      	orrs	r2, r3
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	071b      	lsls	r3, r3, #28
 8006d1c:	495a      	ldr	r1, [pc, #360]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006d24:	4b59      	ldr	r3, [pc, #356]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8006d26:	2201      	movs	r2, #1
 8006d28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d2a:	f7fb f925 	bl	8001f78 <HAL_GetTick>
 8006d2e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d30:	e008      	b.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006d32:	f7fb f921 	bl	8001f78 <HAL_GetTick>
 8006d36:	4602      	mov	r2, r0
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d901      	bls.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	e09c      	b.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d44:	4b50      	ldr	r3, [pc, #320]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d50:	d1ef      	bne.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0320 	and.w	r3, r3, #32
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f000 8083 	beq.w	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d60:	2300      	movs	r3, #0
 8006d62:	60bb      	str	r3, [r7, #8]
 8006d64:	4b48      	ldr	r3, [pc, #288]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d68:	4a47      	ldr	r2, [pc, #284]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d6e:	6413      	str	r3, [r2, #64]	; 0x40
 8006d70:	4b45      	ldr	r3, [pc, #276]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d78:	60bb      	str	r3, [r7, #8]
 8006d7a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006d7c:	4b44      	ldr	r3, [pc, #272]	; (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a43      	ldr	r2, [pc, #268]	; (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d86:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006d88:	f7fb f8f6 	bl	8001f78 <HAL_GetTick>
 8006d8c:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006d8e:	e008      	b.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006d90:	f7fb f8f2 	bl	8001f78 <HAL_GetTick>
 8006d94:	4602      	mov	r2, r0
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d901      	bls.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e06d      	b.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006da2:	4b3b      	ldr	r3, [pc, #236]	; (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d0f0      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006dae:	4b36      	ldr	r3, [pc, #216]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006db6:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d02f      	beq.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dc6:	69ba      	ldr	r2, [r7, #24]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d028      	beq.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006dcc:	4b2e      	ldr	r3, [pc, #184]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dd4:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006dd6:	4b2f      	ldr	r3, [pc, #188]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006dd8:	2201      	movs	r2, #1
 8006dda:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ddc:	4b2d      	ldr	r3, [pc, #180]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006dde:	2200      	movs	r2, #0
 8006de0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006de2:	4a29      	ldr	r2, [pc, #164]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006de8:	4b27      	ldr	r3, [pc, #156]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dec:	f003 0301 	and.w	r3, r3, #1
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d114      	bne.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006df4:	f7fb f8c0 	bl	8001f78 <HAL_GetTick>
 8006df8:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dfa:	e00a      	b.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dfc:	f7fb f8bc 	bl	8001f78 <HAL_GetTick>
 8006e00:	4602      	mov	r2, r0
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d901      	bls.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e035      	b.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e12:	4b1d      	ldr	r3, [pc, #116]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e16:	f003 0302 	and.w	r3, r3, #2
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d0ee      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e2a:	d10d      	bne.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8006e2c:	4b16      	ldr	r3, [pc, #88]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e38:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006e3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e40:	4911      	ldr	r1, [pc, #68]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	608b      	str	r3, [r1, #8]
 8006e46:	e005      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8006e48:	4b0f      	ldr	r3, [pc, #60]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	4a0e      	ldr	r2, [pc, #56]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006e4e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006e52:	6093      	str	r3, [r2, #8]
 8006e54:	4b0c      	ldr	r3, [pc, #48]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006e56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e60:	4909      	ldr	r1, [pc, #36]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0310 	and.w	r3, r3, #16
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d004      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006e78:	4b07      	ldr	r3, [pc, #28]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8006e7a:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3720      	adds	r7, #32
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	40023800 	.word	0x40023800
 8006e8c:	42470070 	.word	0x42470070
 8006e90:	40007000 	.word	0x40007000
 8006e94:	42470e40 	.word	0x42470e40
 8006e98:	424711e0 	.word	0x424711e0

08006e9c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b086      	sub	sp, #24
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d101      	bne.n	8006eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e273      	b.n	8007396 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0301 	and.w	r3, r3, #1
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d075      	beq.n	8006fa6 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006eba:	4b88      	ldr	r3, [pc, #544]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f003 030c 	and.w	r3, r3, #12
 8006ec2:	2b04      	cmp	r3, #4
 8006ec4:	d00c      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ec6:	4b85      	ldr	r3, [pc, #532]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006ece:	2b08      	cmp	r3, #8
 8006ed0:	d112      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ed2:	4b82      	ldr	r3, [pc, #520]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006eda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ede:	d10b      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ee0:	4b7e      	ldr	r3, [pc, #504]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d05b      	beq.n	8006fa4 <HAL_RCC_OscConfig+0x108>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d157      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e24e      	b.n	8007396 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f00:	d106      	bne.n	8006f10 <HAL_RCC_OscConfig+0x74>
 8006f02:	4b76      	ldr	r3, [pc, #472]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a75      	ldr	r2, [pc, #468]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f0c:	6013      	str	r3, [r2, #0]
 8006f0e:	e01d      	b.n	8006f4c <HAL_RCC_OscConfig+0xb0>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f18:	d10c      	bne.n	8006f34 <HAL_RCC_OscConfig+0x98>
 8006f1a:	4b70      	ldr	r3, [pc, #448]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a6f      	ldr	r2, [pc, #444]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f24:	6013      	str	r3, [r2, #0]
 8006f26:	4b6d      	ldr	r3, [pc, #436]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a6c      	ldr	r2, [pc, #432]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f30:	6013      	str	r3, [r2, #0]
 8006f32:	e00b      	b.n	8006f4c <HAL_RCC_OscConfig+0xb0>
 8006f34:	4b69      	ldr	r3, [pc, #420]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a68      	ldr	r2, [pc, #416]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f3e:	6013      	str	r3, [r2, #0]
 8006f40:	4b66      	ldr	r3, [pc, #408]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a65      	ldr	r2, [pc, #404]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d013      	beq.n	8006f7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f54:	f7fb f810 	bl	8001f78 <HAL_GetTick>
 8006f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f5a:	e008      	b.n	8006f6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f5c:	f7fb f80c 	bl	8001f78 <HAL_GetTick>
 8006f60:	4602      	mov	r2, r0
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	2b64      	cmp	r3, #100	; 0x64
 8006f68:	d901      	bls.n	8006f6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e213      	b.n	8007396 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f6e:	4b5b      	ldr	r3, [pc, #364]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d0f0      	beq.n	8006f5c <HAL_RCC_OscConfig+0xc0>
 8006f7a:	e014      	b.n	8006fa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f7c:	f7fa fffc 	bl	8001f78 <HAL_GetTick>
 8006f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f82:	e008      	b.n	8006f96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f84:	f7fa fff8 	bl	8001f78 <HAL_GetTick>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	2b64      	cmp	r3, #100	; 0x64
 8006f90:	d901      	bls.n	8006f96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f92:	2303      	movs	r3, #3
 8006f94:	e1ff      	b.n	8007396 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f96:	4b51      	ldr	r3, [pc, #324]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1f0      	bne.n	8006f84 <HAL_RCC_OscConfig+0xe8>
 8006fa2:	e000      	b.n	8006fa6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 0302 	and.w	r3, r3, #2
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d063      	beq.n	800707a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006fb2:	4b4a      	ldr	r3, [pc, #296]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	f003 030c 	and.w	r3, r3, #12
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00b      	beq.n	8006fd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006fbe:	4b47      	ldr	r3, [pc, #284]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006fc6:	2b08      	cmp	r3, #8
 8006fc8:	d11c      	bne.n	8007004 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006fca:	4b44      	ldr	r3, [pc, #272]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d116      	bne.n	8007004 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fd6:	4b41      	ldr	r3, [pc, #260]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0302 	and.w	r3, r3, #2
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d005      	beq.n	8006fee <HAL_RCC_OscConfig+0x152>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d001      	beq.n	8006fee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e1d3      	b.n	8007396 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fee:	4b3b      	ldr	r3, [pc, #236]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	00db      	lsls	r3, r3, #3
 8006ffc:	4937      	ldr	r1, [pc, #220]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006ffe:	4313      	orrs	r3, r2
 8007000:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007002:	e03a      	b.n	800707a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d020      	beq.n	800704e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800700c:	4b34      	ldr	r3, [pc, #208]	; (80070e0 <HAL_RCC_OscConfig+0x244>)
 800700e:	2201      	movs	r2, #1
 8007010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007012:	f7fa ffb1 	bl	8001f78 <HAL_GetTick>
 8007016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007018:	e008      	b.n	800702c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800701a:	f7fa ffad 	bl	8001f78 <HAL_GetTick>
 800701e:	4602      	mov	r2, r0
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	2b02      	cmp	r3, #2
 8007026:	d901      	bls.n	800702c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007028:	2303      	movs	r3, #3
 800702a:	e1b4      	b.n	8007396 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800702c:	4b2b      	ldr	r3, [pc, #172]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0302 	and.w	r3, r3, #2
 8007034:	2b00      	cmp	r3, #0
 8007036:	d0f0      	beq.n	800701a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007038:	4b28      	ldr	r3, [pc, #160]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	00db      	lsls	r3, r3, #3
 8007046:	4925      	ldr	r1, [pc, #148]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8007048:	4313      	orrs	r3, r2
 800704a:	600b      	str	r3, [r1, #0]
 800704c:	e015      	b.n	800707a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800704e:	4b24      	ldr	r3, [pc, #144]	; (80070e0 <HAL_RCC_OscConfig+0x244>)
 8007050:	2200      	movs	r2, #0
 8007052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007054:	f7fa ff90 	bl	8001f78 <HAL_GetTick>
 8007058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800705a:	e008      	b.n	800706e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800705c:	f7fa ff8c 	bl	8001f78 <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	2b02      	cmp	r3, #2
 8007068:	d901      	bls.n	800706e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e193      	b.n	8007396 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800706e:	4b1b      	ldr	r3, [pc, #108]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 0302 	and.w	r3, r3, #2
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1f0      	bne.n	800705c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0308 	and.w	r3, r3, #8
 8007082:	2b00      	cmp	r3, #0
 8007084:	d036      	beq.n	80070f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d016      	beq.n	80070bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800708e:	4b15      	ldr	r3, [pc, #84]	; (80070e4 <HAL_RCC_OscConfig+0x248>)
 8007090:	2201      	movs	r2, #1
 8007092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007094:	f7fa ff70 	bl	8001f78 <HAL_GetTick>
 8007098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800709a:	e008      	b.n	80070ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800709c:	f7fa ff6c 	bl	8001f78 <HAL_GetTick>
 80070a0:	4602      	mov	r2, r0
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d901      	bls.n	80070ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e173      	b.n	8007396 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070ae:	4b0b      	ldr	r3, [pc, #44]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 80070b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070b2:	f003 0302 	and.w	r3, r3, #2
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d0f0      	beq.n	800709c <HAL_RCC_OscConfig+0x200>
 80070ba:	e01b      	b.n	80070f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070bc:	4b09      	ldr	r3, [pc, #36]	; (80070e4 <HAL_RCC_OscConfig+0x248>)
 80070be:	2200      	movs	r2, #0
 80070c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070c2:	f7fa ff59 	bl	8001f78 <HAL_GetTick>
 80070c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070c8:	e00e      	b.n	80070e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80070ca:	f7fa ff55 	bl	8001f78 <HAL_GetTick>
 80070ce:	4602      	mov	r2, r0
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d907      	bls.n	80070e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e15c      	b.n	8007396 <HAL_RCC_OscConfig+0x4fa>
 80070dc:	40023800 	.word	0x40023800
 80070e0:	42470000 	.word	0x42470000
 80070e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070e8:	4b8a      	ldr	r3, [pc, #552]	; (8007314 <HAL_RCC_OscConfig+0x478>)
 80070ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070ec:	f003 0302 	and.w	r3, r3, #2
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d1ea      	bne.n	80070ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0304 	and.w	r3, r3, #4
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f000 8097 	beq.w	8007230 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007102:	2300      	movs	r3, #0
 8007104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007106:	4b83      	ldr	r3, [pc, #524]	; (8007314 <HAL_RCC_OscConfig+0x478>)
 8007108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10f      	bne.n	8007132 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007112:	2300      	movs	r3, #0
 8007114:	60bb      	str	r3, [r7, #8]
 8007116:	4b7f      	ldr	r3, [pc, #508]	; (8007314 <HAL_RCC_OscConfig+0x478>)
 8007118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711a:	4a7e      	ldr	r2, [pc, #504]	; (8007314 <HAL_RCC_OscConfig+0x478>)
 800711c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007120:	6413      	str	r3, [r2, #64]	; 0x40
 8007122:	4b7c      	ldr	r3, [pc, #496]	; (8007314 <HAL_RCC_OscConfig+0x478>)
 8007124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800712a:	60bb      	str	r3, [r7, #8]
 800712c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800712e:	2301      	movs	r3, #1
 8007130:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007132:	4b79      	ldr	r3, [pc, #484]	; (8007318 <HAL_RCC_OscConfig+0x47c>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800713a:	2b00      	cmp	r3, #0
 800713c:	d118      	bne.n	8007170 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800713e:	4b76      	ldr	r3, [pc, #472]	; (8007318 <HAL_RCC_OscConfig+0x47c>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a75      	ldr	r2, [pc, #468]	; (8007318 <HAL_RCC_OscConfig+0x47c>)
 8007144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800714a:	f7fa ff15 	bl	8001f78 <HAL_GetTick>
 800714e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007150:	e008      	b.n	8007164 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007152:	f7fa ff11 	bl	8001f78 <HAL_GetTick>
 8007156:	4602      	mov	r2, r0
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	2b02      	cmp	r3, #2
 800715e:	d901      	bls.n	8007164 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e118      	b.n	8007396 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007164:	4b6c      	ldr	r3, [pc, #432]	; (8007318 <HAL_RCC_OscConfig+0x47c>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800716c:	2b00      	cmp	r3, #0
 800716e:	d0f0      	beq.n	8007152 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d106      	bne.n	8007186 <HAL_RCC_OscConfig+0x2ea>
 8007178:	4b66      	ldr	r3, [pc, #408]	; (8007314 <HAL_RCC_OscConfig+0x478>)
 800717a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800717c:	4a65      	ldr	r2, [pc, #404]	; (8007314 <HAL_RCC_OscConfig+0x478>)
 800717e:	f043 0301 	orr.w	r3, r3, #1
 8007182:	6713      	str	r3, [r2, #112]	; 0x70
 8007184:	e01c      	b.n	80071c0 <HAL_RCC_OscConfig+0x324>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	2b05      	cmp	r3, #5
 800718c:	d10c      	bne.n	80071a8 <HAL_RCC_OscConfig+0x30c>
 800718e:	4b61      	ldr	r3, [pc, #388]	; (8007314 <HAL_RCC_OscConfig+0x478>)
 8007190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007192:	4a60      	ldr	r2, [pc, #384]	; (8007314 <HAL_RCC_OscConfig+0x478>)
 8007194:	f043 0304 	orr.w	r3, r3, #4
 8007198:	6713      	str	r3, [r2, #112]	; 0x70
 800719a:	4b5e      	ldr	r3, [pc, #376]	; (8007314 <HAL_RCC_OscConfig+0x478>)
 800719c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800719e:	4a5d      	ldr	r2, [pc, #372]	; (8007314 <HAL_RCC_OscConfig+0x478>)
 80071a0:	f043 0301 	orr.w	r3, r3, #1
 80071a4:	6713      	str	r3, [r2, #112]	; 0x70
 80071a6:	e00b      	b.n	80071c0 <HAL_RCC_OscConfig+0x324>
 80071a8:	4b5a      	ldr	r3, [pc, #360]	; (8007314 <HAL_RCC_OscConfig+0x478>)
 80071aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ac:	4a59      	ldr	r2, [pc, #356]	; (8007314 <HAL_RCC_OscConfig+0x478>)
 80071ae:	f023 0301 	bic.w	r3, r3, #1
 80071b2:	6713      	str	r3, [r2, #112]	; 0x70
 80071b4:	4b57      	ldr	r3, [pc, #348]	; (8007314 <HAL_RCC_OscConfig+0x478>)
 80071b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071b8:	4a56      	ldr	r2, [pc, #344]	; (8007314 <HAL_RCC_OscConfig+0x478>)
 80071ba:	f023 0304 	bic.w	r3, r3, #4
 80071be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d015      	beq.n	80071f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071c8:	f7fa fed6 	bl	8001f78 <HAL_GetTick>
 80071cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071ce:	e00a      	b.n	80071e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071d0:	f7fa fed2 	bl	8001f78 <HAL_GetTick>
 80071d4:	4602      	mov	r2, r0
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	f241 3288 	movw	r2, #5000	; 0x1388
 80071de:	4293      	cmp	r3, r2
 80071e0:	d901      	bls.n	80071e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e0d7      	b.n	8007396 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071e6:	4b4b      	ldr	r3, [pc, #300]	; (8007314 <HAL_RCC_OscConfig+0x478>)
 80071e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ea:	f003 0302 	and.w	r3, r3, #2
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d0ee      	beq.n	80071d0 <HAL_RCC_OscConfig+0x334>
 80071f2:	e014      	b.n	800721e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071f4:	f7fa fec0 	bl	8001f78 <HAL_GetTick>
 80071f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071fa:	e00a      	b.n	8007212 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071fc:	f7fa febc 	bl	8001f78 <HAL_GetTick>
 8007200:	4602      	mov	r2, r0
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	f241 3288 	movw	r2, #5000	; 0x1388
 800720a:	4293      	cmp	r3, r2
 800720c:	d901      	bls.n	8007212 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e0c1      	b.n	8007396 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007212:	4b40      	ldr	r3, [pc, #256]	; (8007314 <HAL_RCC_OscConfig+0x478>)
 8007214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007216:	f003 0302 	and.w	r3, r3, #2
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1ee      	bne.n	80071fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800721e:	7dfb      	ldrb	r3, [r7, #23]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d105      	bne.n	8007230 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007224:	4b3b      	ldr	r3, [pc, #236]	; (8007314 <HAL_RCC_OscConfig+0x478>)
 8007226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007228:	4a3a      	ldr	r2, [pc, #232]	; (8007314 <HAL_RCC_OscConfig+0x478>)
 800722a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800722e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	699b      	ldr	r3, [r3, #24]
 8007234:	2b00      	cmp	r3, #0
 8007236:	f000 80ad 	beq.w	8007394 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800723a:	4b36      	ldr	r3, [pc, #216]	; (8007314 <HAL_RCC_OscConfig+0x478>)
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	f003 030c 	and.w	r3, r3, #12
 8007242:	2b08      	cmp	r3, #8
 8007244:	d060      	beq.n	8007308 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	699b      	ldr	r3, [r3, #24]
 800724a:	2b02      	cmp	r3, #2
 800724c:	d145      	bne.n	80072da <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800724e:	4b33      	ldr	r3, [pc, #204]	; (800731c <HAL_RCC_OscConfig+0x480>)
 8007250:	2200      	movs	r2, #0
 8007252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007254:	f7fa fe90 	bl	8001f78 <HAL_GetTick>
 8007258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800725a:	e008      	b.n	800726e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800725c:	f7fa fe8c 	bl	8001f78 <HAL_GetTick>
 8007260:	4602      	mov	r2, r0
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	2b02      	cmp	r3, #2
 8007268:	d901      	bls.n	800726e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	e093      	b.n	8007396 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800726e:	4b29      	ldr	r3, [pc, #164]	; (8007314 <HAL_RCC_OscConfig+0x478>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1f0      	bne.n	800725c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	69da      	ldr	r2, [r3, #28]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	431a      	orrs	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007288:	019b      	lsls	r3, r3, #6
 800728a:	431a      	orrs	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007290:	085b      	lsrs	r3, r3, #1
 8007292:	3b01      	subs	r3, #1
 8007294:	041b      	lsls	r3, r3, #16
 8007296:	431a      	orrs	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729c:	061b      	lsls	r3, r3, #24
 800729e:	431a      	orrs	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a4:	071b      	lsls	r3, r3, #28
 80072a6:	491b      	ldr	r1, [pc, #108]	; (8007314 <HAL_RCC_OscConfig+0x478>)
 80072a8:	4313      	orrs	r3, r2
 80072aa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072ac:	4b1b      	ldr	r3, [pc, #108]	; (800731c <HAL_RCC_OscConfig+0x480>)
 80072ae:	2201      	movs	r2, #1
 80072b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072b2:	f7fa fe61 	bl	8001f78 <HAL_GetTick>
 80072b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072b8:	e008      	b.n	80072cc <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072ba:	f7fa fe5d 	bl	8001f78 <HAL_GetTick>
 80072be:	4602      	mov	r2, r0
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d901      	bls.n	80072cc <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80072c8:	2303      	movs	r3, #3
 80072ca:	e064      	b.n	8007396 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072cc:	4b11      	ldr	r3, [pc, #68]	; (8007314 <HAL_RCC_OscConfig+0x478>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d0f0      	beq.n	80072ba <HAL_RCC_OscConfig+0x41e>
 80072d8:	e05c      	b.n	8007394 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072da:	4b10      	ldr	r3, [pc, #64]	; (800731c <HAL_RCC_OscConfig+0x480>)
 80072dc:	2200      	movs	r2, #0
 80072de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072e0:	f7fa fe4a 	bl	8001f78 <HAL_GetTick>
 80072e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072e6:	e008      	b.n	80072fa <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072e8:	f7fa fe46 	bl	8001f78 <HAL_GetTick>
 80072ec:	4602      	mov	r2, r0
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d901      	bls.n	80072fa <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	e04d      	b.n	8007396 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072fa:	4b06      	ldr	r3, [pc, #24]	; (8007314 <HAL_RCC_OscConfig+0x478>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1f0      	bne.n	80072e8 <HAL_RCC_OscConfig+0x44c>
 8007306:	e045      	b.n	8007394 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d107      	bne.n	8007320 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e040      	b.n	8007396 <HAL_RCC_OscConfig+0x4fa>
 8007314:	40023800 	.word	0x40023800
 8007318:	40007000 	.word	0x40007000
 800731c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007320:	4b1f      	ldr	r3, [pc, #124]	; (80073a0 <HAL_RCC_OscConfig+0x504>)
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d030      	beq.n	8007390 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007338:	429a      	cmp	r2, r3
 800733a:	d129      	bne.n	8007390 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007346:	429a      	cmp	r2, r3
 8007348:	d122      	bne.n	8007390 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007350:	4013      	ands	r3, r2
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007356:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007358:	4293      	cmp	r3, r2
 800735a:	d119      	bne.n	8007390 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007366:	085b      	lsrs	r3, r3, #1
 8007368:	3b01      	subs	r3, #1
 800736a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800736c:	429a      	cmp	r2, r3
 800736e:	d10f      	bne.n	8007390 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800737c:	429a      	cmp	r2, r3
 800737e:	d107      	bne.n	8007390 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800738a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800738c:	429a      	cmp	r2, r3
 800738e:	d001      	beq.n	8007394 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e000      	b.n	8007396 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3718      	adds	r7, #24
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	40023800 	.word	0x40023800

080073a4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 80073ac:	2300      	movs	r3, #0
 80073ae:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 80073b0:	2300      	movs	r3, #0
 80073b2:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 80073b4:	2300      	movs	r3, #0
 80073b6:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 80073b8:	2300      	movs	r3, #0
 80073ba:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d101      	bne.n	80073c6 <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e10c      	b.n	80075e0 <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d106      	bne.n	80073e0 <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f7fa fb70 	bl	8001ac0 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2202      	movs	r2, #2
 80073e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 f903 	bl	80075f4 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 f938 	bl	8007664 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a1b      	ldr	r3, [r3, #32]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d030      	beq.n	800745e <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 f957 	bl	80076b0 <SAI_GetInputClock>
 8007402:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8007404:	68ba      	ldr	r2, [r7, #8]
 8007406:	4613      	mov	r3, r2
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	4413      	add	r3, r2
 800740c:	005b      	lsls	r3, r3, #1
 800740e:	461a      	mov	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a1b      	ldr	r3, [r3, #32]
 8007414:	025b      	lsls	r3, r3, #9
 8007416:	fbb2 f3f3 	udiv	r3, r2, r3
 800741a:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	4a72      	ldr	r2, [pc, #456]	; (80075e8 <HAL_SAI_Init+0x244>)
 8007420:	fba2 2303 	umull	r2, r3, r2, r3
 8007424:	08da      	lsrs	r2, r3, #3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 800742a:	68f9      	ldr	r1, [r7, #12]
 800742c:	4b6e      	ldr	r3, [pc, #440]	; (80075e8 <HAL_SAI_Init+0x244>)
 800742e:	fba3 2301 	umull	r2, r3, r3, r1
 8007432:	08da      	lsrs	r2, r3, #3
 8007434:	4613      	mov	r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	4413      	add	r3, r2
 800743a:	005b      	lsls	r3, r3, #1
 800743c:	1aca      	subs	r2, r1, r3
 800743e:	2a08      	cmp	r2, #8
 8007440:	d904      	bls.n	800744c <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007446:	1c5a      	adds	r2, r3, #1
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007450:	2b04      	cmp	r3, #4
 8007452:	d104      	bne.n	800745e <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007458:	085a      	lsrs	r2, r3, #1
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d003      	beq.n	800746e <HAL_SAI_Init+0xca>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	2b02      	cmp	r3, #2
 800746c:	d109      	bne.n	8007482 <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007472:	2b01      	cmp	r3, #1
 8007474:	d101      	bne.n	800747a <HAL_SAI_Init+0xd6>
 8007476:	2300      	movs	r3, #0
 8007478:	e001      	b.n	800747e <HAL_SAI_Init+0xda>
 800747a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800747e:	617b      	str	r3, [r7, #20]
 8007480:	e008      	b.n	8007494 <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007486:	2b01      	cmp	r3, #1
 8007488:	d102      	bne.n	8007490 <HAL_SAI_Init+0xec>
 800748a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800748e:	e000      	b.n	8007492 <HAL_SAI_Init+0xee>
 8007490:	2300      	movs	r3, #0
 8007492:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	2b03      	cmp	r3, #3
 800749a:	d811      	bhi.n	80074c0 <HAL_SAI_Init+0x11c>
 800749c:	2b02      	cmp	r3, #2
 800749e:	d20b      	bcs.n	80074b8 <HAL_SAI_Init+0x114>
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d002      	beq.n	80074aa <HAL_SAI_Init+0x106>
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d003      	beq.n	80074b0 <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 80074a8:	e00a      	b.n	80074c0 <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 80074aa:	2300      	movs	r3, #0
 80074ac:	613b      	str	r3, [r7, #16]
    break;
 80074ae:	e008      	b.n	80074c2 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80074b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074b4:	613b      	str	r3, [r7, #16]
    break;
 80074b6:	e004      	b.n	80074c2 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80074b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80074bc:	613b      	str	r3, [r7, #16]
    break;
 80074be:	e000      	b.n	80074c2 <HAL_SAI_Init+0x11e>
      break;
 80074c0:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6819      	ldr	r1, [r3, #0]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	4b47      	ldr	r3, [pc, #284]	; (80075ec <HAL_SAI_Init+0x248>)
 80074ce:	400b      	ands	r3, r1
 80074d0:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	6819      	ldr	r1, [r3, #0]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	685a      	ldr	r2, [r3, #4]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074e0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80074e6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ec:	431a      	orrs	r2, r3
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 80074fa:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007506:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750c:	051b      	lsls	r3, r3, #20
 800750e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	430a      	orrs	r2, r1
 8007516:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	6812      	ldr	r2, [r2, #0]
 8007522:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007526:	f023 030f 	bic.w	r3, r3, #15
 800752a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6859      	ldr	r1, [r3, #4]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	699a      	ldr	r2, [r3, #24]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753a:	431a      	orrs	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007540:	431a      	orrs	r2, r3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	430a      	orrs	r2, r1
 8007548:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	6899      	ldr	r1, [r3, #8]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	4b26      	ldr	r3, [pc, #152]	; (80075f0 <HAL_SAI_Init+0x24c>)
 8007556:	400b      	ands	r3, r1
 8007558:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	6899      	ldr	r1, [r3, #8]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007564:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800756a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSOffset     |
 8007570:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                           hsai->FrameInit.FSDefinition |
 8007576:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800757c:	3b01      	subs	r3, #1
 800757e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007580:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	430a      	orrs	r2, r1
 8007588:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	68d9      	ldr	r1, [r3, #12]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007598:	400b      	ands	r3, r1
 800759a:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68d9      	ldr	r1, [r3, #12]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075aa:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075b0:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80075b2:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075b8:	3b01      	subs	r3, #1
 80075ba:	021b      	lsls	r3, r3, #8
 80075bc:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	430a      	orrs	r2, r1
 80075c4:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3718      	adds	r7, #24
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	cccccccd 	.word	0xcccccccd
 80075ec:	ff05c010 	.word	0xff05c010
 80075f0:	fff88000 	.word	0xfff88000

080075f4 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80075fc:	4b17      	ldr	r3, [pc, #92]	; (800765c <SAI_Disable+0x68>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a17      	ldr	r2, [pc, #92]	; (8007660 <SAI_Disable+0x6c>)
 8007602:	fba2 2303 	umull	r2, r3, r2, r3
 8007606:	0b1b      	lsrs	r3, r3, #12
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800760c:	2300      	movs	r3, #0
 800760e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800761e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	1e5a      	subs	r2, r3, #1
 8007624:	60fa      	str	r2, [r7, #12]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d10a      	bne.n	8007640 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007630:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      status = HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	72fb      	strb	r3, [r7, #11]
      break;
 800763e:	e006      	b.n	800764e <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800764a:	2b00      	cmp	r3, #0
 800764c:	d1e8      	bne.n	8007620 <SAI_Disable+0x2c>

  return status;
 800764e:	7afb      	ldrb	r3, [r7, #11]
}
 8007650:	4618      	mov	r0, r3
 8007652:	3714      	adds	r7, #20
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr
 800765c:	20000004 	.word	0x20000004
 8007660:	95cbec1b 	.word	0x95cbec1b

08007664 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(const SAI_HandleTypeDef *hsai)
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
    defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	2b02      	cmp	r3, #2
 8007672:	d00c      	beq.n	800768e <SAI_BlockSynchroConfig+0x2a>
 8007674:	2b02      	cmp	r3, #2
 8007676:	d80d      	bhi.n	8007694 <SAI_BlockSynchroConfig+0x30>
 8007678:	2b00      	cmp	r3, #0
 800767a:	d002      	beq.n	8007682 <SAI_BlockSynchroConfig+0x1e>
 800767c:	2b01      	cmp	r3, #1
 800767e:	d003      	beq.n	8007688 <SAI_BlockSynchroConfig+0x24>
 8007680:	e008      	b.n	8007694 <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 8007682:	2300      	movs	r3, #0
 8007684:	60fb      	str	r3, [r7, #12]
      break;
 8007686:	e008      	b.n	800769a <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007688:	2310      	movs	r3, #16
 800768a:	60fb      	str	r3, [r7, #12]
      break;
 800768c:	e005      	b.n	800769a <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800768e:	2320      	movs	r3, #32
 8007690:	60fb      	str	r3, [r7, #12]
      break;
 8007692:	e002      	b.n	800769a <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 8007694:	2300      	movs	r3, #0
 8007696:	60fb      	str	r3, [r7, #12]
      break;
 8007698:	bf00      	nop
  }
  SAI1->GCR = tmpregisterGCR;
 800769a:	4a04      	ldr	r2, [pc, #16]	; (80076ac <SAI_BlockSynchroConfig+0x48>)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6013      	str	r3, [r2, #0]
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 80076a0:	bf00      	nop
 80076a2:	3714      	adds	r7, #20
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	40015800 	.word	0x40015800

080076b0 <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(const SAI_HandleTypeDef *hsai)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b087      	sub	sp, #28
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 80076b8:	2300      	movs	r3, #0
 80076ba:	617b      	str	r3, [r7, #20]
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
  defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t vcoinput = 0U, tmpreg = 0U;
 80076bc:	2300      	movs	r3, #0
 80076be:	613b      	str	r3, [r7, #16]
 80076c0:	2300      	movs	r3, #0
 80076c2:	60fb      	str	r3, [r7, #12]

  /* Check the SAI Block parameters */
  assert_param(IS_SAI_CLK_SOURCE(hsai->Init.ClockSource));

  /* SAI Block clock source selection */
  if (hsai->Instance == SAI1_Block_A)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a46      	ldr	r2, [pc, #280]	; (80077e4 <SAI_GetInputClock+0x134>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d10b      	bne.n	80076e6 <SAI_GetInputClock+0x36>
  {
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
 80076ce:	4b46      	ldr	r3, [pc, #280]	; (80077e8 <SAI_GetInputClock+0x138>)
 80076d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	69db      	ldr	r3, [r3, #28]
 80076dc:	4942      	ldr	r1, [pc, #264]	; (80077e8 <SAI_GetInputClock+0x138>)
 80076de:	4313      	orrs	r3, r2
 80076e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 80076e4:	e00b      	b.n	80076fe <SAI_GetInputClock+0x4e>
  }
  else
  {
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG((uint32_t)(hsai->Init.ClockSource << 2U));
 80076e6:	4b40      	ldr	r3, [pc, #256]	; (80077e8 <SAI_GetInputClock+0x138>)
 80076e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	69db      	ldr	r3, [r3, #28]
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	493c      	ldr	r1, [pc, #240]	; (80077e8 <SAI_GetInputClock+0x138>)
 80076f8:	4313      	orrs	r3, r2
 80076fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /* VCO Input Clock value calculation */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80076fe:	4b3a      	ldr	r3, [pc, #232]	; (80077e8 <SAI_GetInputClock+0x138>)
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d108      	bne.n	800771c <SAI_GetInputClock+0x6c>
  {
    /* In Case the PLL Source is HSI (Internal Clock) */
    vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800770a:	4b37      	ldr	r3, [pc, #220]	; (80077e8 <SAI_GetInputClock+0x138>)
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007712:	4a36      	ldr	r2, [pc, #216]	; (80077ec <SAI_GetInputClock+0x13c>)
 8007714:	fbb2 f3f3 	udiv	r3, r2, r3
 8007718:	613b      	str	r3, [r7, #16]
 800771a:	e007      	b.n	800772c <SAI_GetInputClock+0x7c>
  }
  else
  {
    /* In Case the PLL Source is HSE (External Clock) */
    vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800771c:	4b32      	ldr	r3, [pc, #200]	; (80077e8 <SAI_GetInputClock+0x138>)
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007724:	4a32      	ldr	r2, [pc, #200]	; (80077f0 <SAI_GetInputClock+0x140>)
 8007726:	fbb2 f3f3 	udiv	r3, r2, r3
 800772a:	613b      	str	r3, [r7, #16]
  {
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#else
  /* SAI_CLK_x : SAI Block Clock configuration for different clock sources selected */
  if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLSAI)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	69db      	ldr	r3, [r3, #28]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d121      	bne.n	8007778 <SAI_GetInputClock+0xc8>
  {
    /* Configure the PLLI2S division factor */
    /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
    /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
    tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8007734:	4b2c      	ldr	r3, [pc, #176]	; (80077e8 <SAI_GetInputClock+0x138>)
 8007736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800773a:	0e1b      	lsrs	r3, r3, #24
 800773c:	f003 030f 	and.w	r3, r3, #15
 8007740:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg);
 8007742:	4b29      	ldr	r3, [pc, #164]	; (80077e8 <SAI_GetInputClock+0x138>)
 8007744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007748:	099b      	lsrs	r3, r3, #6
 800774a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800774e:	693a      	ldr	r2, [r7, #16]
 8007750:	fb03 f202 	mul.w	r2, r3, r2
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	fbb2 f3f3 	udiv	r3, r2, r3
 800775a:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
    tmpreg = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 800775c:	4b22      	ldr	r3, [pc, #136]	; (80077e8 <SAI_GetInputClock+0x138>)
 800775e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007762:	0a1b      	lsrs	r3, r3, #8
 8007764:	f003 031f 	and.w	r3, r3, #31
 8007768:	3301      	adds	r3, #1
 800776a:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	fbb2 f3f3 	udiv	r3, r2, r3
 8007774:	617b      	str	r3, [r7, #20]
 8007776:	e02d      	b.n	80077d4 <SAI_GetInputClock+0x124>

  }
  else if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLI2S)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	69db      	ldr	r3, [r3, #28]
 800777c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007780:	d120      	bne.n	80077c4 <SAI_GetInputClock+0x114>
  {
    /* Configure the PLLI2S division factor */
    /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
    /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
    tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8007782:	4b19      	ldr	r3, [pc, #100]	; (80077e8 <SAI_GetInputClock+0x138>)
 8007784:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007788:	0e1b      	lsrs	r3, r3, #24
 800778a:	f003 030f 	and.w	r3, r3, #15
 800778e:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8007790:	4b15      	ldr	r3, [pc, #84]	; (80077e8 <SAI_GetInputClock+0x138>)
 8007792:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007796:	099b      	lsrs	r3, r3, #6
 8007798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800779c:	693a      	ldr	r2, [r7, #16]
 800779e:	fb03 f202 	mul.w	r2, r3, r2
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80077a8:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
    tmpreg = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 80077aa:	4b0f      	ldr	r3, [pc, #60]	; (80077e8 <SAI_GetInputClock+0x138>)
 80077ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077b0:	f003 031f 	and.w	r3, r3, #31
 80077b4:	3301      	adds	r3, #1
 80077b6:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 80077b8:	697a      	ldr	r2, [r7, #20]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80077c0:	617b      	str	r3, [r7, #20]
 80077c2:	e007      	b.n	80077d4 <SAI_GetInputClock+0x124>
  }
  else /* sConfig->ClockSource == SAI_CLKSource_Ext */
  {
    /* Enable the External Clock selection */
    __HAL_RCC_I2S_CONFIG(RCC_I2SCLKSOURCE_EXT);
 80077c4:	4b08      	ldr	r3, [pc, #32]	; (80077e8 <SAI_GetInputClock+0x138>)
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	4a07      	ldr	r2, [pc, #28]	; (80077e8 <SAI_GetInputClock+0x138>)
 80077ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80077ce:	6093      	str	r3, [r2, #8]

    saiclocksource = EXTERNAL_CLOCK_VALUE;
 80077d0:	4b08      	ldr	r3, [pc, #32]	; (80077f4 <SAI_GetInputClock+0x144>)
 80077d2:	617b      	str	r3, [r7, #20]
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 80077d4:	697b      	ldr	r3, [r7, #20]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	371c      	adds	r7, #28
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	40015804 	.word	0x40015804
 80077e8:	40023800 	.word	0x40023800
 80077ec:	00f42400 	.word	0x00f42400
 80077f0:	007a1200 	.word	0x007a1200
 80077f4:	00bb8000 	.word	0x00bb8000

080077f8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d101      	bne.n	800780a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e022      	b.n	8007850 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007810:	b2db      	uxtb	r3, r3
 8007812:	2b00      	cmp	r3, #0
 8007814:	d105      	bne.n	8007822 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f7f9 ff95 	bl	800174c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2203      	movs	r2, #3
 8007826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 f814 	bl	8007858 <HAL_SD_InitCard>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d001      	beq.n	800783a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e00a      	b.n	8007850 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2201      	movs	r2, #1
 800784a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3708      	adds	r7, #8
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007858:	b5b0      	push	{r4, r5, r7, lr}
 800785a:	b08e      	sub	sp, #56	; 0x38
 800785c:	af04      	add	r7, sp, #16
 800785e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007860:	2300      	movs	r3, #0
 8007862:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007864:	2300      	movs	r3, #0
 8007866:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007868:	2300      	movs	r3, #0
 800786a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800786c:	2300      	movs	r3, #0
 800786e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007870:	2300      	movs	r3, #0
 8007872:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007874:	2376      	movs	r3, #118	; 0x76
 8007876:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681d      	ldr	r5, [r3, #0]
 800787c:	466c      	mov	r4, sp
 800787e:	f107 0314 	add.w	r3, r7, #20
 8007882:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007886:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800788a:	f107 0308 	add.w	r3, r7, #8
 800788e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007890:	4628      	mov	r0, r5
 8007892:	f002 f877 	bl	8009984 <SDIO_Init>
 8007896:	4603      	mov	r3, r0
 8007898:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800789c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d001      	beq.n	80078a8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e04f      	b.n	8007948 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80078a8:	4b29      	ldr	r3, [pc, #164]	; (8007950 <HAL_SD_InitCard+0xf8>)
 80078aa:	2200      	movs	r2, #0
 80078ac:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4618      	mov	r0, r3
 80078b4:	f002 f89e 	bl	80099f4 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80078b8:	4b25      	ldr	r3, [pc, #148]	; (8007950 <HAL_SD_InitCard+0xf8>)
 80078ba:	2201      	movs	r2, #1
 80078bc:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80078be:	2002      	movs	r0, #2
 80078c0:	f7fa fb66 	bl	8001f90 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 fe0b 	bl	80084e0 <SD_PowerON>
 80078ca:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80078cc:	6a3b      	ldr	r3, [r7, #32]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00b      	beq.n	80078ea <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2201      	movs	r2, #1
 80078d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078de:	6a3b      	ldr	r3, [r7, #32]
 80078e0:	431a      	orrs	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e02e      	b.n	8007948 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fd2a 	bl	8008344 <SD_InitCard>
 80078f0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80078f2:	6a3b      	ldr	r3, [r7, #32]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00b      	beq.n	8007910 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007904:	6a3b      	ldr	r3, [r7, #32]
 8007906:	431a      	orrs	r2, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e01b      	b.n	8007948 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007918:	4618      	mov	r0, r3
 800791a:	f002 f8fd 	bl	8009b18 <SDMMC_CmdBlockLength>
 800791e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007920:	6a3b      	ldr	r3, [r7, #32]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00f      	beq.n	8007946 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a0a      	ldr	r2, [pc, #40]	; (8007954 <HAL_SD_InitCard+0xfc>)
 800792c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007932:	6a3b      	ldr	r3, [r7, #32]
 8007934:	431a      	orrs	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2201      	movs	r2, #1
 800793e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e000      	b.n	8007948 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8007946:	2300      	movs	r3, #0
}
 8007948:	4618      	mov	r0, r3
 800794a:	3728      	adds	r7, #40	; 0x28
 800794c:	46bd      	mov	sp, r7
 800794e:	bdb0      	pop	{r4, r5, r7, pc}
 8007950:	422580a0 	.word	0x422580a0
 8007954:	004005ff 	.word	0x004005ff

08007958 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b08c      	sub	sp, #48	; 0x30
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	607a      	str	r2, [r7, #4]
 8007964:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d107      	bne.n	8007980 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007974:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	e0be      	b.n	8007afe <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007986:	b2db      	uxtb	r3, r3
 8007988:	2b01      	cmp	r3, #1
 800798a:	f040 80b7 	bne.w	8007afc <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2200      	movs	r2, #0
 8007992:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007994:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	441a      	add	r2, r3
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800799e:	429a      	cmp	r2, r3
 80079a0:	d907      	bls.n	80079b2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e0a5      	b.n	8007afe <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2203      	movs	r2, #3
 80079b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2200      	movs	r2, #0
 80079c0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80079d0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d6:	4a4c      	ldr	r2, [pc, #304]	; (8007b08 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 80079d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079de:	4a4b      	ldr	r2, [pc, #300]	; (8007b0c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80079e0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e6:	2200      	movs	r2, #0
 80079e8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ee:	2200      	movs	r2, #0
 80079f0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a02:	689a      	ldr	r2, [r3, #8]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	430a      	orrs	r2, r1
 8007a0c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	3380      	adds	r3, #128	; 0x80
 8007a18:	4619      	mov	r1, r3
 8007a1a:	68ba      	ldr	r2, [r7, #8]
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	025b      	lsls	r3, r3, #9
 8007a20:	089b      	lsrs	r3, r3, #2
 8007a22:	f7fa fcd3 	bl	80023cc <HAL_DMA_Start_IT>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d017      	beq.n	8007a5c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8007a3a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a33      	ldr	r2, [pc, #204]	; (8007b10 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007a42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a48:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e050      	b.n	8007afe <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007a5c:	4b2d      	ldr	r3, [pc, #180]	; (8007b14 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007a5e:	2201      	movs	r2, #1
 8007a60:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d002      	beq.n	8007a70 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 8007a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6c:	025b      	lsls	r3, r3, #9
 8007a6e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007a70:	f04f 33ff 	mov.w	r3, #4294967295
 8007a74:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	025b      	lsls	r3, r3, #9
 8007a7a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007a7c:	2390      	movs	r3, #144	; 0x90
 8007a7e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007a80:	2302      	movs	r3, #2
 8007a82:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007a84:	2300      	movs	r3, #0
 8007a86:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f107 0210 	add.w	r2, r7, #16
 8007a94:	4611      	mov	r1, r2
 8007a96:	4618      	mov	r0, r3
 8007a98:	f002 f812 	bl	8009ac0 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d90a      	bls.n	8007ab8 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2282      	movs	r2, #130	; 0x82
 8007aa6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f002 f876 	bl	8009ba0 <SDMMC_CmdReadMultiBlock>
 8007ab4:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007ab6:	e009      	b.n	8007acc <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2281      	movs	r2, #129	; 0x81
 8007abc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f002 f849 	bl	8009b5c <SDMMC_CmdReadSingleBlock>
 8007aca:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d012      	beq.n	8007af8 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a0e      	ldr	r2, [pc, #56]	; (8007b10 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007ad8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae0:	431a      	orrs	r2, r3
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e002      	b.n	8007afe <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 8007af8:	2300      	movs	r3, #0
 8007afa:	e000      	b.n	8007afe <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 8007afc:	2302      	movs	r3, #2
  }
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3730      	adds	r7, #48	; 0x30
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	0800822f 	.word	0x0800822f
 8007b0c:	080082a1 	.word	0x080082a1
 8007b10:	004005ff 	.word	0x004005ff
 8007b14:	4225858c 	.word	0x4225858c

08007b18 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b08c      	sub	sp, #48	; 0x30
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	607a      	str	r2, [r7, #4]
 8007b24:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d107      	bne.n	8007b40 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b34:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e0c1      	b.n	8007cc4 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	f040 80ba 	bne.w	8007cc2 <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2200      	movs	r2, #0
 8007b52:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007b54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	441a      	add	r2, r3
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d907      	bls.n	8007b72 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b66:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e0a8      	b.n	8007cc4 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2203      	movs	r2, #3
 8007b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f042 021a 	orr.w	r2, r2, #26
 8007b90:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b96:	4a4d      	ldr	r2, [pc, #308]	; (8007ccc <HAL_SD_WriteBlocks_DMA+0x1b4>)
 8007b98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b9e:	4a4c      	ldr	r2, [pc, #304]	; (8007cd0 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 8007ba0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d002      	beq.n	8007bb8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8007bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb4:	025b      	lsls	r3, r3, #9
 8007bb6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d90a      	bls.n	8007bd4 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	22a0      	movs	r2, #160	; 0xa0
 8007bc2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f002 f82c 	bl	8009c28 <SDMMC_CmdWriteMultiBlock>
 8007bd0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007bd2:	e009      	b.n	8007be8 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2290      	movs	r2, #144	; 0x90
 8007bd8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007be0:	4618      	mov	r0, r3
 8007be2:	f001 ffff 	bl	8009be4 <SDMMC_CmdWriteSingleBlock>
 8007be6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d012      	beq.n	8007c14 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a38      	ldr	r2, [pc, #224]	; (8007cd4 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8007bf4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfc:	431a      	orrs	r2, r3
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2201      	movs	r2, #1
 8007c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	e057      	b.n	8007cc4 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007c14:	4b30      	ldr	r3, [pc, #192]	; (8007cd8 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8007c16:	2201      	movs	r2, #1
 8007c18:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c1e:	2240      	movs	r2, #64	; 0x40
 8007c20:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c32:	689a      	ldr	r2, [r3, #8]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	430a      	orrs	r2, r1
 8007c3c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007c42:	68b9      	ldr	r1, [r7, #8]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	3380      	adds	r3, #128	; 0x80
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	025b      	lsls	r3, r3, #9
 8007c50:	089b      	lsrs	r3, r3, #2
 8007c52:	f7fa fbbb 	bl	80023cc <HAL_DMA_Start_IT>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d01a      	beq.n	8007c92 <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f022 021a 	bic.w	r2, r2, #26
 8007c6a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a18      	ldr	r2, [pc, #96]	; (8007cd4 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8007c72:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c78:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e018      	b.n	8007cc4 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007c92:	f04f 33ff 	mov.w	r3, #4294967295
 8007c96:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	025b      	lsls	r3, r3, #9
 8007c9c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007c9e:	2390      	movs	r3, #144	; 0x90
 8007ca0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007caa:	2301      	movs	r3, #1
 8007cac:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f107 0210 	add.w	r2, r7, #16
 8007cb6:	4611      	mov	r1, r2
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f001 ff01 	bl	8009ac0 <SDIO_ConfigData>

      return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	e000      	b.n	8007cc4 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 8007cc2:	2302      	movs	r3, #2
  }
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3730      	adds	r7, #48	; 0x30
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	08008205 	.word	0x08008205
 8007cd0:	080082a1 	.word	0x080082a1
 8007cd4:	004005ff 	.word	0x004005ff
 8007cd8:	4225858c 	.word	0x4225858c

08007cdc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007ce4:	bf00      	nop
 8007ce6:	370c      	adds	r7, #12
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cfe:	0f9b      	lsrs	r3, r3, #30
 8007d00:	b2da      	uxtb	r2, r3
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d0a:	0e9b      	lsrs	r3, r3, #26
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	f003 030f 	and.w	r3, r3, #15
 8007d12:	b2da      	uxtb	r2, r3
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d1c:	0e1b      	lsrs	r3, r3, #24
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	f003 0303 	and.w	r3, r3, #3
 8007d24:	b2da      	uxtb	r2, r3
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d2e:	0c1b      	lsrs	r3, r3, #16
 8007d30:	b2da      	uxtb	r2, r3
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d3a:	0a1b      	lsrs	r3, r3, #8
 8007d3c:	b2da      	uxtb	r2, r3
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d46:	b2da      	uxtb	r2, r3
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d50:	0d1b      	lsrs	r3, r3, #20
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d5c:	0c1b      	lsrs	r3, r3, #16
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	f003 030f 	and.w	r3, r3, #15
 8007d64:	b2da      	uxtb	r2, r3
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d6e:	0bdb      	lsrs	r3, r3, #15
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	f003 0301 	and.w	r3, r3, #1
 8007d76:	b2da      	uxtb	r2, r3
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d80:	0b9b      	lsrs	r3, r3, #14
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	f003 0301 	and.w	r3, r3, #1
 8007d88:	b2da      	uxtb	r2, r3
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d92:	0b5b      	lsrs	r3, r3, #13
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	b2da      	uxtb	r2, r3
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007da4:	0b1b      	lsrs	r3, r3, #12
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	f003 0301 	and.w	r3, r3, #1
 8007dac:	b2da      	uxtb	r2, r3
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	2200      	movs	r2, #0
 8007db6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d163      	bne.n	8007e88 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dc4:	009a      	lsls	r2, r3, #2
 8007dc6:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007dca:	4013      	ands	r3, r2
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007dd0:	0f92      	lsrs	r2, r2, #30
 8007dd2:	431a      	orrs	r2, r3
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ddc:	0edb      	lsrs	r3, r3, #27
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	f003 0307 	and.w	r3, r3, #7
 8007de4:	b2da      	uxtb	r2, r3
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dee:	0e1b      	lsrs	r3, r3, #24
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	f003 0307 	and.w	r3, r3, #7
 8007df6:	b2da      	uxtb	r2, r3
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e00:	0d5b      	lsrs	r3, r3, #21
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	f003 0307 	and.w	r3, r3, #7
 8007e08:	b2da      	uxtb	r2, r3
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e12:	0c9b      	lsrs	r3, r3, #18
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	f003 0307 	and.w	r3, r3, #7
 8007e1a:	b2da      	uxtb	r2, r3
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e24:	0bdb      	lsrs	r3, r3, #15
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	f003 0307 	and.w	r3, r3, #7
 8007e2c:	b2da      	uxtb	r2, r3
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	1c5a      	adds	r2, r3, #1
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	7e1b      	ldrb	r3, [r3, #24]
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	f003 0307 	and.w	r3, r3, #7
 8007e46:	3302      	adds	r3, #2
 8007e48:	2201      	movs	r2, #1
 8007e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007e52:	fb03 f202 	mul.w	r2, r3, r2
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	7a1b      	ldrb	r3, [r3, #8]
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	f003 030f 	and.w	r3, r3, #15
 8007e64:	2201      	movs	r2, #1
 8007e66:	409a      	lsls	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007e74:	0a52      	lsrs	r2, r2, #9
 8007e76:	fb03 f202 	mul.w	r2, r3, r2
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e84:	661a      	str	r2, [r3, #96]	; 0x60
 8007e86:	e031      	b.n	8007eec <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d11d      	bne.n	8007ecc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e94:	041b      	lsls	r3, r3, #16
 8007e96:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e9e:	0c1b      	lsrs	r3, r3, #16
 8007ea0:	431a      	orrs	r2, r3
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	029a      	lsls	r2, r3, #10
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ec0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	661a      	str	r2, [r3, #96]	; 0x60
 8007eca:	e00f      	b.n	8007eec <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a58      	ldr	r2, [pc, #352]	; (8008034 <HAL_SD_GetCardCSD+0x344>)
 8007ed2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e09d      	b.n	8008028 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ef0:	0b9b      	lsrs	r3, r3, #14
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	f003 0301 	and.w	r3, r3, #1
 8007ef8:	b2da      	uxtb	r2, r3
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f02:	09db      	lsrs	r3, r3, #7
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f0a:	b2da      	uxtb	r2, r3
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f1a:	b2da      	uxtb	r2, r3
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f24:	0fdb      	lsrs	r3, r3, #31
 8007f26:	b2da      	uxtb	r2, r3
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f30:	0f5b      	lsrs	r3, r3, #29
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	f003 0303 	and.w	r3, r3, #3
 8007f38:	b2da      	uxtb	r2, r3
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f42:	0e9b      	lsrs	r3, r3, #26
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	f003 0307 	and.w	r3, r3, #7
 8007f4a:	b2da      	uxtb	r2, r3
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f54:	0d9b      	lsrs	r3, r3, #22
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	f003 030f 	and.w	r3, r3, #15
 8007f5c:	b2da      	uxtb	r2, r3
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f66:	0d5b      	lsrs	r3, r3, #21
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	f003 0301 	and.w	r3, r3, #1
 8007f6e:	b2da      	uxtb	r2, r3
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f82:	0c1b      	lsrs	r3, r3, #16
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	f003 0301 	and.w	r3, r3, #1
 8007f8a:	b2da      	uxtb	r2, r3
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f96:	0bdb      	lsrs	r3, r3, #15
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	f003 0301 	and.w	r3, r3, #1
 8007f9e:	b2da      	uxtb	r2, r3
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007faa:	0b9b      	lsrs	r3, r3, #14
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	f003 0301 	and.w	r3, r3, #1
 8007fb2:	b2da      	uxtb	r2, r3
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fbe:	0b5b      	lsrs	r3, r3, #13
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	f003 0301 	and.w	r3, r3, #1
 8007fc6:	b2da      	uxtb	r2, r3
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd2:	0b1b      	lsrs	r3, r3, #12
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	f003 0301 	and.w	r3, r3, #1
 8007fda:	b2da      	uxtb	r2, r3
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fe6:	0a9b      	lsrs	r3, r3, #10
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	f003 0303 	and.w	r3, r3, #3
 8007fee:	b2da      	uxtb	r2, r3
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ffa:	0a1b      	lsrs	r3, r3, #8
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	f003 0303 	and.w	r3, r3, #3
 8008002:	b2da      	uxtb	r2, r3
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800800e:	085b      	lsrs	r3, r3, #1
 8008010:	b2db      	uxtb	r3, r3
 8008012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008016:	b2da      	uxtb	r2, r3
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	2201      	movs	r2, #1
 8008022:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr
 8008034:	004005ff 	.word	0x004005ff

08008038 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008090:	b5b0      	push	{r4, r5, r7, lr}
 8008092:	b08e      	sub	sp, #56	; 0x38
 8008094:	af04      	add	r7, sp, #16
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800809a:	2300      	movs	r3, #0
 800809c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2203      	movs	r2, #3
 80080a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ac:	2b03      	cmp	r3, #3
 80080ae:	d02e      	beq.n	800810e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080b6:	d106      	bne.n	80080c6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	639a      	str	r2, [r3, #56]	; 0x38
 80080c4:	e029      	b.n	800811a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080cc:	d10a      	bne.n	80080e4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 fabc 	bl	800864c <SD_WideBus_Enable>
 80080d4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080da:	6a3b      	ldr	r3, [r7, #32]
 80080dc:	431a      	orrs	r2, r3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	639a      	str	r2, [r3, #56]	; 0x38
 80080e2:	e01a      	b.n	800811a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d10a      	bne.n	8008100 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 faf9 	bl	80086e2 <SD_WideBus_Disable>
 80080f0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080f6:	6a3b      	ldr	r3, [r7, #32]
 80080f8:	431a      	orrs	r2, r3
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	639a      	str	r2, [r3, #56]	; 0x38
 80080fe:	e00c      	b.n	800811a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008104:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	639a      	str	r2, [r3, #56]	; 0x38
 800810c:	e005      	b.n	800811a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008112:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00b      	beq.n	800813a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a26      	ldr	r2, [pc, #152]	; (80081c0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008128:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2201      	movs	r2, #1
 800812e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008138:	e01f      	b.n	800817a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	695b      	ldr	r3, [r3, #20]
 8008154:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	699b      	ldr	r3, [r3, #24]
 800815a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681d      	ldr	r5, [r3, #0]
 8008160:	466c      	mov	r4, sp
 8008162:	f107 0314 	add.w	r3, r7, #20
 8008166:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800816a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800816e:	f107 0308 	add.w	r3, r7, #8
 8008172:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008174:	4628      	mov	r0, r5
 8008176:	f001 fc05 	bl	8009984 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008182:	4618      	mov	r0, r3
 8008184:	f001 fcc8 	bl	8009b18 <SDMMC_CmdBlockLength>
 8008188:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800818a:	6a3b      	ldr	r3, [r7, #32]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00c      	beq.n	80081aa <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a0a      	ldr	r2, [pc, #40]	; (80081c0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008196:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800819c:	6a3b      	ldr	r3, [r7, #32]
 800819e:	431a      	orrs	r2, r3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2201      	movs	r2, #1
 80081ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80081b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3728      	adds	r7, #40	; 0x28
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bdb0      	pop	{r4, r5, r7, pc}
 80081be:	bf00      	nop
 80081c0:	004005ff 	.word	0x004005ff

080081c4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b086      	sub	sp, #24
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80081cc:	2300      	movs	r3, #0
 80081ce:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80081d0:	f107 030c 	add.w	r3, r7, #12
 80081d4:	4619      	mov	r1, r3
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fa10 	bl	80085fc <SD_SendStatus>
 80081dc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d005      	beq.n	80081f0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	431a      	orrs	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	0a5b      	lsrs	r3, r3, #9
 80081f4:	f003 030f 	and.w	r3, r3, #15
 80081f8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80081fa:	693b      	ldr	r3, [r7, #16]
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3718      	adds	r7, #24
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008210:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008220:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008222:	bf00      	nop
 8008224:	3714      	adds	r7, #20
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr

0800822e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b084      	sub	sp, #16
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008240:	2b82      	cmp	r3, #130	; 0x82
 8008242:	d111      	bne.n	8008268 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4618      	mov	r0, r3
 800824a:	f001 fd0f 	bl	8009c6c <SDMMC_CmdStopTransfer>
 800824e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d008      	beq.n	8008268 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	431a      	orrs	r2, r3
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008262:	68f8      	ldr	r0, [r7, #12]
 8008264:	f7ff fd3a 	bl	8007cdc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f022 0208 	bic.w	r2, r2, #8
 8008276:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f240 523a 	movw	r2, #1338	; 0x53a
 8008280:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2201      	movs	r2, #1
 8008286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2200      	movs	r2, #0
 800828e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	f003 fac5 	bl	800b820 <HAL_SD_RxCpltCallback>
#endif
}
 8008296:	bf00      	nop
 8008298:	3710      	adds	r7, #16
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
	...

080082a0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b086      	sub	sp, #24
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ac:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f7fa f8e4 	bl	800247c <HAL_DMA_GetError>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	d03e      	beq.n	8008338 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082c0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082c8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d002      	beq.n	80082d6 <SD_DMAError+0x36>
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d12d      	bne.n	8008332 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a19      	ldr	r2, [pc, #100]	; (8008340 <SD_DMAError+0xa0>)
 80082dc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80082ec:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80082fa:	6978      	ldr	r0, [r7, #20]
 80082fc:	f7ff ff62 	bl	80081c4 <HAL_SD_GetCardState>
 8008300:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	2b06      	cmp	r3, #6
 8008306:	d002      	beq.n	800830e <SD_DMAError+0x6e>
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	2b05      	cmp	r3, #5
 800830c:	d10a      	bne.n	8008324 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4618      	mov	r0, r3
 8008314:	f001 fcaa 	bl	8009c6c <SDMMC_CmdStopTransfer>
 8008318:	4602      	mov	r2, r0
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831e:	431a      	orrs	r2, r3
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	2200      	movs	r2, #0
 8008330:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008332:	6978      	ldr	r0, [r7, #20]
 8008334:	f7ff fcd2 	bl	8007cdc <HAL_SD_ErrorCallback>
#endif
  }
}
 8008338:	bf00      	nop
 800833a:	3718      	adds	r7, #24
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}
 8008340:	004005ff 	.word	0x004005ff

08008344 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008344:	b5b0      	push	{r4, r5, r7, lr}
 8008346:	b094      	sub	sp, #80	; 0x50
 8008348:	af04      	add	r7, sp, #16
 800834a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800834c:	2301      	movs	r3, #1
 800834e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4618      	mov	r0, r3
 8008356:	f001 fb5b 	bl	8009a10 <SDIO_GetPowerState>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d102      	bne.n	8008366 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008360:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008364:	e0b8      	b.n	80084d8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800836a:	2b03      	cmp	r3, #3
 800836c:	d02f      	beq.n	80083ce <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4618      	mov	r0, r3
 8008374:	f001 fd84 	bl	8009e80 <SDMMC_CmdSendCID>
 8008378:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800837a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800837c:	2b00      	cmp	r3, #0
 800837e:	d001      	beq.n	8008384 <SD_InitCard+0x40>
    {
      return errorstate;
 8008380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008382:	e0a9      	b.n	80084d8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	2100      	movs	r1, #0
 800838a:	4618      	mov	r0, r3
 800838c:	f001 fb85 	bl	8009a9a <SDIO_GetResponse>
 8008390:	4602      	mov	r2, r0
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2104      	movs	r1, #4
 800839c:	4618      	mov	r0, r3
 800839e:	f001 fb7c 	bl	8009a9a <SDIO_GetResponse>
 80083a2:	4602      	mov	r2, r0
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2108      	movs	r1, #8
 80083ae:	4618      	mov	r0, r3
 80083b0:	f001 fb73 	bl	8009a9a <SDIO_GetResponse>
 80083b4:	4602      	mov	r2, r0
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	210c      	movs	r1, #12
 80083c0:	4618      	mov	r0, r3
 80083c2:	f001 fb6a 	bl	8009a9a <SDIO_GetResponse>
 80083c6:	4602      	mov	r2, r0
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083d2:	2b03      	cmp	r3, #3
 80083d4:	d00d      	beq.n	80083f2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f107 020e 	add.w	r2, r7, #14
 80083de:	4611      	mov	r1, r2
 80083e0:	4618      	mov	r0, r3
 80083e2:	f001 fd8a 	bl	8009efa <SDMMC_CmdSetRelAdd>
 80083e6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80083e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d001      	beq.n	80083f2 <SD_InitCard+0xae>
    {
      return errorstate;
 80083ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083f0:	e072      	b.n	80084d8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083f6:	2b03      	cmp	r3, #3
 80083f8:	d036      	beq.n	8008468 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80083fa:	89fb      	ldrh	r3, [r7, #14]
 80083fc:	461a      	mov	r2, r3
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800840a:	041b      	lsls	r3, r3, #16
 800840c:	4619      	mov	r1, r3
 800840e:	4610      	mov	r0, r2
 8008410:	f001 fd54 	bl	8009ebc <SDMMC_CmdSendCSD>
 8008414:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008418:	2b00      	cmp	r3, #0
 800841a:	d001      	beq.n	8008420 <SD_InitCard+0xdc>
    {
      return errorstate;
 800841c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800841e:	e05b      	b.n	80084d8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2100      	movs	r1, #0
 8008426:	4618      	mov	r0, r3
 8008428:	f001 fb37 	bl	8009a9a <SDIO_GetResponse>
 800842c:	4602      	mov	r2, r0
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2104      	movs	r1, #4
 8008438:	4618      	mov	r0, r3
 800843a:	f001 fb2e 	bl	8009a9a <SDIO_GetResponse>
 800843e:	4602      	mov	r2, r0
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2108      	movs	r1, #8
 800844a:	4618      	mov	r0, r3
 800844c:	f001 fb25 	bl	8009a9a <SDIO_GetResponse>
 8008450:	4602      	mov	r2, r0
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	210c      	movs	r1, #12
 800845c:	4618      	mov	r0, r3
 800845e:	f001 fb1c 	bl	8009a9a <SDIO_GetResponse>
 8008462:	4602      	mov	r2, r0
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	2104      	movs	r1, #4
 800846e:	4618      	mov	r0, r3
 8008470:	f001 fb13 	bl	8009a9a <SDIO_GetResponse>
 8008474:	4603      	mov	r3, r0
 8008476:	0d1a      	lsrs	r2, r3, #20
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800847c:	f107 0310 	add.w	r3, r7, #16
 8008480:	4619      	mov	r1, r3
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f7ff fc34 	bl	8007cf0 <HAL_SD_GetCardCSD>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d002      	beq.n	8008494 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800848e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008492:	e021      	b.n	80084d8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6819      	ldr	r1, [r3, #0]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800849c:	041b      	lsls	r3, r3, #16
 800849e:	2200      	movs	r2, #0
 80084a0:	461c      	mov	r4, r3
 80084a2:	4615      	mov	r5, r2
 80084a4:	4622      	mov	r2, r4
 80084a6:	462b      	mov	r3, r5
 80084a8:	4608      	mov	r0, r1
 80084aa:	f001 fc01 	bl	8009cb0 <SDMMC_CmdSelDesel>
 80084ae:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80084b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d001      	beq.n	80084ba <SD_InitCard+0x176>
  {
    return errorstate;
 80084b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084b8:	e00e      	b.n	80084d8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681d      	ldr	r5, [r3, #0]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	466c      	mov	r4, sp
 80084c2:	f103 0210 	add.w	r2, r3, #16
 80084c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80084c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80084cc:	3304      	adds	r3, #4
 80084ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80084d0:	4628      	mov	r0, r5
 80084d2:	f001 fa57 	bl	8009984 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3740      	adds	r7, #64	; 0x40
 80084dc:	46bd      	mov	sp, r7
 80084de:	bdb0      	pop	{r4, r5, r7, pc}

080084e0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b086      	sub	sp, #24
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80084e8:	2300      	movs	r3, #0
 80084ea:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80084ec:	2300      	movs	r3, #0
 80084ee:	617b      	str	r3, [r7, #20]
 80084f0:	2300      	movs	r3, #0
 80084f2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4618      	mov	r0, r3
 80084fa:	f001 fbfc 	bl	8009cf6 <SDMMC_CmdGoIdleState>
 80084fe:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d001      	beq.n	800850a <SD_PowerON+0x2a>
  {
    return errorstate;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	e072      	b.n	80085f0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4618      	mov	r0, r3
 8008510:	f001 fc0f 	bl	8009d32 <SDMMC_CmdOperCond>
 8008514:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00d      	beq.n	8008538 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4618      	mov	r0, r3
 8008528:	f001 fbe5 	bl	8009cf6 <SDMMC_CmdGoIdleState>
 800852c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d004      	beq.n	800853e <SD_PowerON+0x5e>
    {
      return errorstate;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	e05b      	b.n	80085f0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008542:	2b01      	cmp	r3, #1
 8008544:	d137      	bne.n	80085b6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2100      	movs	r1, #0
 800854c:	4618      	mov	r0, r3
 800854e:	f001 fc0f 	bl	8009d70 <SDMMC_CmdAppCommand>
 8008552:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d02d      	beq.n	80085b6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800855a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800855e:	e047      	b.n	80085f0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2100      	movs	r1, #0
 8008566:	4618      	mov	r0, r3
 8008568:	f001 fc02 	bl	8009d70 <SDMMC_CmdAppCommand>
 800856c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d001      	beq.n	8008578 <SD_PowerON+0x98>
    {
      return errorstate;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	e03b      	b.n	80085f0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	491e      	ldr	r1, [pc, #120]	; (80085f8 <SD_PowerON+0x118>)
 800857e:	4618      	mov	r0, r3
 8008580:	f001 fc18 	bl	8009db4 <SDMMC_CmdAppOperCommand>
 8008584:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d002      	beq.n	8008592 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800858c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008590:	e02e      	b.n	80085f0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	2100      	movs	r1, #0
 8008598:	4618      	mov	r0, r3
 800859a:	f001 fa7e 	bl	8009a9a <SDIO_GetResponse>
 800859e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	0fdb      	lsrs	r3, r3, #31
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d101      	bne.n	80085ac <SD_PowerON+0xcc>
 80085a8:	2301      	movs	r3, #1
 80085aa:	e000      	b.n	80085ae <SD_PowerON+0xce>
 80085ac:	2300      	movs	r3, #0
 80085ae:	613b      	str	r3, [r7, #16]

    count++;
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	3301      	adds	r3, #1
 80085b4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80085bc:	4293      	cmp	r3, r2
 80085be:	d802      	bhi.n	80085c6 <SD_PowerON+0xe6>
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d0cc      	beq.n	8008560 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d902      	bls.n	80085d6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80085d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80085d4:	e00c      	b.n	80085f0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d003      	beq.n	80085e8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	645a      	str	r2, [r3, #68]	; 0x44
 80085e6:	e002      	b.n	80085ee <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3718      	adds	r7, #24
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}
 80085f8:	c1100000 	.word	0xc1100000

080085fc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d102      	bne.n	8008612 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800860c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008610:	e018      	b.n	8008644 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800861a:	041b      	lsls	r3, r3, #16
 800861c:	4619      	mov	r1, r3
 800861e:	4610      	mov	r0, r2
 8008620:	f001 fc8c 	bl	8009f3c <SDMMC_CmdSendStatus>
 8008624:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d001      	beq.n	8008630 <SD_SendStatus+0x34>
  {
    return errorstate;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	e009      	b.n	8008644 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2100      	movs	r1, #0
 8008636:	4618      	mov	r0, r3
 8008638:	f001 fa2f 	bl	8009a9a <SDIO_GetResponse>
 800863c:	4602      	mov	r2, r0
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008642:	2300      	movs	r3, #0
}
 8008644:	4618      	mov	r0, r3
 8008646:	3710      	adds	r7, #16
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b086      	sub	sp, #24
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008654:	2300      	movs	r3, #0
 8008656:	60fb      	str	r3, [r7, #12]
 8008658:	2300      	movs	r3, #0
 800865a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2100      	movs	r1, #0
 8008662:	4618      	mov	r0, r3
 8008664:	f001 fa19 	bl	8009a9a <SDIO_GetResponse>
 8008668:	4603      	mov	r3, r0
 800866a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800866e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008672:	d102      	bne.n	800867a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008674:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008678:	e02f      	b.n	80086da <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800867a:	f107 030c 	add.w	r3, r7, #12
 800867e:	4619      	mov	r1, r3
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 f879 	bl	8008778 <SD_FindSCR>
 8008686:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d001      	beq.n	8008692 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	e023      	b.n	80086da <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008698:	2b00      	cmp	r3, #0
 800869a:	d01c      	beq.n	80086d6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086a4:	041b      	lsls	r3, r3, #16
 80086a6:	4619      	mov	r1, r3
 80086a8:	4610      	mov	r0, r2
 80086aa:	f001 fb61 	bl	8009d70 <SDMMC_CmdAppCommand>
 80086ae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d001      	beq.n	80086ba <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	e00f      	b.n	80086da <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2102      	movs	r1, #2
 80086c0:	4618      	mov	r0, r3
 80086c2:	f001 fb9a 	bl	8009dfa <SDMMC_CmdBusWidth>
 80086c6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d001      	beq.n	80086d2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	e003      	b.n	80086da <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80086d2:	2300      	movs	r3, #0
 80086d4:	e001      	b.n	80086da <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80086d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3718      	adds	r7, #24
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b086      	sub	sp, #24
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80086ea:	2300      	movs	r3, #0
 80086ec:	60fb      	str	r3, [r7, #12]
 80086ee:	2300      	movs	r3, #0
 80086f0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2100      	movs	r1, #0
 80086f8:	4618      	mov	r0, r3
 80086fa:	f001 f9ce 	bl	8009a9a <SDIO_GetResponse>
 80086fe:	4603      	mov	r3, r0
 8008700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008704:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008708:	d102      	bne.n	8008710 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800870a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800870e:	e02f      	b.n	8008770 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008710:	f107 030c 	add.w	r3, r7, #12
 8008714:	4619      	mov	r1, r3
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 f82e 	bl	8008778 <SD_FindSCR>
 800871c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d001      	beq.n	8008728 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	e023      	b.n	8008770 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800872e:	2b00      	cmp	r3, #0
 8008730:	d01c      	beq.n	800876c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800873a:	041b      	lsls	r3, r3, #16
 800873c:	4619      	mov	r1, r3
 800873e:	4610      	mov	r0, r2
 8008740:	f001 fb16 	bl	8009d70 <SDMMC_CmdAppCommand>
 8008744:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d001      	beq.n	8008750 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	e00f      	b.n	8008770 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2100      	movs	r1, #0
 8008756:	4618      	mov	r0, r3
 8008758:	f001 fb4f 	bl	8009dfa <SDMMC_CmdBusWidth>
 800875c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d001      	beq.n	8008768 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	e003      	b.n	8008770 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008768:	2300      	movs	r3, #0
 800876a:	e001      	b.n	8008770 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800876c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008770:	4618      	mov	r0, r3
 8008772:	3718      	adds	r7, #24
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008778:	b590      	push	{r4, r7, lr}
 800877a:	b08f      	sub	sp, #60	; 0x3c
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008782:	f7f9 fbf9 	bl	8001f78 <HAL_GetTick>
 8008786:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008788:	2300      	movs	r3, #0
 800878a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800878c:	2300      	movs	r3, #0
 800878e:	60bb      	str	r3, [r7, #8]
 8008790:	2300      	movs	r3, #0
 8008792:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2108      	movs	r1, #8
 800879e:	4618      	mov	r0, r3
 80087a0:	f001 f9ba 	bl	8009b18 <SDMMC_CmdBlockLength>
 80087a4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80087a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d001      	beq.n	80087b0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80087ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ae:	e0b2      	b.n	8008916 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087b8:	041b      	lsls	r3, r3, #16
 80087ba:	4619      	mov	r1, r3
 80087bc:	4610      	mov	r0, r2
 80087be:	f001 fad7 	bl	8009d70 <SDMMC_CmdAppCommand>
 80087c2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80087c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d001      	beq.n	80087ce <SD_FindSCR+0x56>
  {
    return errorstate;
 80087ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087cc:	e0a3      	b.n	8008916 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80087ce:	f04f 33ff 	mov.w	r3, #4294967295
 80087d2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80087d4:	2308      	movs	r3, #8
 80087d6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80087d8:	2330      	movs	r3, #48	; 0x30
 80087da:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80087dc:	2302      	movs	r3, #2
 80087de:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80087e0:	2300      	movs	r3, #0
 80087e2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80087e4:	2301      	movs	r3, #1
 80087e6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f107 0210 	add.w	r2, r7, #16
 80087f0:	4611      	mov	r1, r2
 80087f2:	4618      	mov	r0, r3
 80087f4:	f001 f964 	bl	8009ac0 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4618      	mov	r0, r3
 80087fe:	f001 fb1e 	bl	8009e3e <SDMMC_CmdSendSCR>
 8008802:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008806:	2b00      	cmp	r3, #0
 8008808:	d02a      	beq.n	8008860 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800880a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880c:	e083      	b.n	8008916 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008818:	2b00      	cmp	r3, #0
 800881a:	d00f      	beq.n	800883c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6819      	ldr	r1, [r3, #0]
 8008820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	f107 0208 	add.w	r2, r7, #8
 8008828:	18d4      	adds	r4, r2, r3
 800882a:	4608      	mov	r0, r1
 800882c:	f001 f8d5 	bl	80099da <SDIO_ReadFIFO>
 8008830:	4603      	mov	r3, r0
 8008832:	6023      	str	r3, [r4, #0]
      index++;
 8008834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008836:	3301      	adds	r3, #1
 8008838:	637b      	str	r3, [r7, #52]	; 0x34
 800883a:	e006      	b.n	800884a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008842:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008846:	2b00      	cmp	r3, #0
 8008848:	d012      	beq.n	8008870 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800884a:	f7f9 fb95 	bl	8001f78 <HAL_GetTick>
 800884e:	4602      	mov	r2, r0
 8008850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008852:	1ad3      	subs	r3, r2, r3
 8008854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008858:	d102      	bne.n	8008860 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800885a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800885e:	e05a      	b.n	8008916 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008866:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800886a:	2b00      	cmp	r3, #0
 800886c:	d0cf      	beq.n	800880e <SD_FindSCR+0x96>
 800886e:	e000      	b.n	8008872 <SD_FindSCR+0xfa>
      break;
 8008870:	bf00      	nop
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008878:	f003 0308 	and.w	r3, r3, #8
 800887c:	2b00      	cmp	r3, #0
 800887e:	d005      	beq.n	800888c <SD_FindSCR+0x114>
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2208      	movs	r2, #8
 8008886:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008888:	2308      	movs	r3, #8
 800888a:	e044      	b.n	8008916 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008892:	f003 0302 	and.w	r3, r3, #2
 8008896:	2b00      	cmp	r3, #0
 8008898:	d005      	beq.n	80088a6 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2202      	movs	r2, #2
 80088a0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80088a2:	2302      	movs	r3, #2
 80088a4:	e037      	b.n	8008916 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ac:	f003 0320 	and.w	r3, r3, #32
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d005      	beq.n	80088c0 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2220      	movs	r2, #32
 80088ba:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80088bc:	2320      	movs	r3, #32
 80088be:	e02a      	b.n	8008916 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f240 523a 	movw	r2, #1338	; 0x53a
 80088c8:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	061a      	lsls	r2, r3, #24
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	021b      	lsls	r3, r3, #8
 80088d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80088d6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	0a1b      	lsrs	r3, r3, #8
 80088dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80088e0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	0e1b      	lsrs	r3, r3, #24
 80088e6:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80088e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ea:	601a      	str	r2, [r3, #0]
    scr++;
 80088ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ee:	3304      	adds	r3, #4
 80088f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	061a      	lsls	r2, r3, #24
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	021b      	lsls	r3, r3, #8
 80088fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80088fe:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	0a1b      	lsrs	r3, r3, #8
 8008904:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008908:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	0e1b      	lsrs	r3, r3, #24
 800890e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008912:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008914:	2300      	movs	r3, #0
}
 8008916:	4618      	mov	r0, r3
 8008918:	373c      	adds	r7, #60	; 0x3c
 800891a:	46bd      	mov	sp, r7
 800891c:	bd90      	pop	{r4, r7, pc}

0800891e <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b082      	sub	sp, #8
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
 8008926:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d101      	bne.n	8008932 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	e025      	b.n	800897e <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008938:	b2db      	uxtb	r3, r3
 800893a:	2b00      	cmp	r3, #0
 800893c:	d106      	bne.n	800894c <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f7f9 f8b0 	bl	8001aac <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2202      	movs	r2, #2
 8008950:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	3304      	adds	r3, #4
 800895c:	4619      	mov	r1, r3
 800895e:	4610      	mov	r0, r2
 8008960:	f000 ff4a 	bl	80097f8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6818      	ldr	r0, [r3, #0]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	461a      	mov	r2, r3
 800896e:	6839      	ldr	r1, [r7, #0]
 8008970:	f000 ff9f 	bl	80098b2 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2201      	movs	r2, #1
 8008978:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800897c:	2300      	movs	r3, #0
}
 800897e:	4618      	mov	r0, r3
 8008980:	3708      	adds	r7, #8
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b082      	sub	sp, #8
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d101      	bne.n	8008998 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008994:	2301      	movs	r3, #1
 8008996:	e041      	b.n	8008a1c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d106      	bne.n	80089b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f7f8 ff35 	bl	800181c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2202      	movs	r2, #2
 80089b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	3304      	adds	r3, #4
 80089c2:	4619      	mov	r1, r3
 80089c4:	4610      	mov	r0, r2
 80089c6:	f000 fa7d 	bl	8008ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2201      	movs	r2, #1
 80089ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2201      	movs	r2, #1
 80089d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2201      	movs	r2, #1
 80089de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2201      	movs	r2, #1
 80089e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2201      	movs	r2, #1
 80089ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2201      	movs	r2, #1
 80089f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2201      	movs	r2, #1
 80089fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2201      	movs	r2, #1
 8008a06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2201      	movs	r2, #1
 8008a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3708      	adds	r7, #8
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b085      	sub	sp, #20
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d001      	beq.n	8008a3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e04e      	b.n	8008ada <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2202      	movs	r2, #2
 8008a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68da      	ldr	r2, [r3, #12]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f042 0201 	orr.w	r2, r2, #1
 8008a52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a23      	ldr	r2, [pc, #140]	; (8008ae8 <HAL_TIM_Base_Start_IT+0xc4>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d022      	beq.n	8008aa4 <HAL_TIM_Base_Start_IT+0x80>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a66:	d01d      	beq.n	8008aa4 <HAL_TIM_Base_Start_IT+0x80>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a1f      	ldr	r2, [pc, #124]	; (8008aec <HAL_TIM_Base_Start_IT+0xc8>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d018      	beq.n	8008aa4 <HAL_TIM_Base_Start_IT+0x80>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a1e      	ldr	r2, [pc, #120]	; (8008af0 <HAL_TIM_Base_Start_IT+0xcc>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d013      	beq.n	8008aa4 <HAL_TIM_Base_Start_IT+0x80>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a1c      	ldr	r2, [pc, #112]	; (8008af4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d00e      	beq.n	8008aa4 <HAL_TIM_Base_Start_IT+0x80>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a1b      	ldr	r2, [pc, #108]	; (8008af8 <HAL_TIM_Base_Start_IT+0xd4>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d009      	beq.n	8008aa4 <HAL_TIM_Base_Start_IT+0x80>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a19      	ldr	r2, [pc, #100]	; (8008afc <HAL_TIM_Base_Start_IT+0xd8>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d004      	beq.n	8008aa4 <HAL_TIM_Base_Start_IT+0x80>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a18      	ldr	r2, [pc, #96]	; (8008b00 <HAL_TIM_Base_Start_IT+0xdc>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d111      	bne.n	8008ac8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	f003 0307 	and.w	r3, r3, #7
 8008aae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2b06      	cmp	r3, #6
 8008ab4:	d010      	beq.n	8008ad8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f042 0201 	orr.w	r2, r2, #1
 8008ac4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ac6:	e007      	b.n	8008ad8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f042 0201 	orr.w	r2, r2, #1
 8008ad6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ad8:	2300      	movs	r3, #0
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3714      	adds	r7, #20
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr
 8008ae6:	bf00      	nop
 8008ae8:	40010000 	.word	0x40010000
 8008aec:	40000400 	.word	0x40000400
 8008af0:	40000800 	.word	0x40000800
 8008af4:	40000c00 	.word	0x40000c00
 8008af8:	40010400 	.word	0x40010400
 8008afc:	40014000 	.word	0x40014000
 8008b00:	40001800 	.word	0x40001800

08008b04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	691b      	ldr	r3, [r3, #16]
 8008b1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	f003 0302 	and.w	r3, r3, #2
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d020      	beq.n	8008b68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f003 0302 	and.w	r3, r3, #2
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d01b      	beq.n	8008b68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f06f 0202 	mvn.w	r2, #2
 8008b38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	699b      	ldr	r3, [r3, #24]
 8008b46:	f003 0303 	and.w	r3, r3, #3
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d003      	beq.n	8008b56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 f999 	bl	8008e86 <HAL_TIM_IC_CaptureCallback>
 8008b54:	e005      	b.n	8008b62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 f98b 	bl	8008e72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 f99c 	bl	8008e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	f003 0304 	and.w	r3, r3, #4
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d020      	beq.n	8008bb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f003 0304 	and.w	r3, r3, #4
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d01b      	beq.n	8008bb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f06f 0204 	mvn.w	r2, #4
 8008b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2202      	movs	r2, #2
 8008b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	699b      	ldr	r3, [r3, #24]
 8008b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d003      	beq.n	8008ba2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 f973 	bl	8008e86 <HAL_TIM_IC_CaptureCallback>
 8008ba0:	e005      	b.n	8008bae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 f965 	bl	8008e72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 f976 	bl	8008e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	f003 0308 	and.w	r3, r3, #8
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d020      	beq.n	8008c00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f003 0308 	and.w	r3, r3, #8
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d01b      	beq.n	8008c00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f06f 0208 	mvn.w	r2, #8
 8008bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2204      	movs	r2, #4
 8008bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	69db      	ldr	r3, [r3, #28]
 8008bde:	f003 0303 	and.w	r3, r3, #3
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d003      	beq.n	8008bee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f94d 	bl	8008e86 <HAL_TIM_IC_CaptureCallback>
 8008bec:	e005      	b.n	8008bfa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 f93f 	bl	8008e72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 f950 	bl	8008e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	f003 0310 	and.w	r3, r3, #16
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d020      	beq.n	8008c4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f003 0310 	and.w	r3, r3, #16
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d01b      	beq.n	8008c4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f06f 0210 	mvn.w	r2, #16
 8008c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2208      	movs	r2, #8
 8008c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	69db      	ldr	r3, [r3, #28]
 8008c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d003      	beq.n	8008c3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 f927 	bl	8008e86 <HAL_TIM_IC_CaptureCallback>
 8008c38:	e005      	b.n	8008c46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 f919 	bl	8008e72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 f92a 	bl	8008e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	f003 0301 	and.w	r3, r3, #1
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d00c      	beq.n	8008c70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f003 0301 	and.w	r3, r3, #1
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d007      	beq.n	8008c70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f06f 0201 	mvn.w	r2, #1
 8008c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f7f8 fb1a 	bl	80012a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d00c      	beq.n	8008c94 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d007      	beq.n	8008c94 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 fae4 	bl	800925c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d00c      	beq.n	8008cb8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d007      	beq.n	8008cb8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 f8fb 	bl	8008eae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	f003 0320 	and.w	r3, r3, #32
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00c      	beq.n	8008cdc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f003 0320 	and.w	r3, r3, #32
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d007      	beq.n	8008cdc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f06f 0220 	mvn.w	r2, #32
 8008cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 fab6 	bl	8009248 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008cdc:	bf00      	nop
 8008cde:	3710      	adds	r7, #16
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d101      	bne.n	8008d00 <HAL_TIM_ConfigClockSource+0x1c>
 8008cfc:	2302      	movs	r3, #2
 8008cfe:	e0b4      	b.n	8008e6a <HAL_TIM_ConfigClockSource+0x186>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2202      	movs	r2, #2
 8008d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008d1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	68ba      	ldr	r2, [r7, #8]
 8008d2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d38:	d03e      	beq.n	8008db8 <HAL_TIM_ConfigClockSource+0xd4>
 8008d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d3e:	f200 8087 	bhi.w	8008e50 <HAL_TIM_ConfigClockSource+0x16c>
 8008d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d46:	f000 8086 	beq.w	8008e56 <HAL_TIM_ConfigClockSource+0x172>
 8008d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d4e:	d87f      	bhi.n	8008e50 <HAL_TIM_ConfigClockSource+0x16c>
 8008d50:	2b70      	cmp	r3, #112	; 0x70
 8008d52:	d01a      	beq.n	8008d8a <HAL_TIM_ConfigClockSource+0xa6>
 8008d54:	2b70      	cmp	r3, #112	; 0x70
 8008d56:	d87b      	bhi.n	8008e50 <HAL_TIM_ConfigClockSource+0x16c>
 8008d58:	2b60      	cmp	r3, #96	; 0x60
 8008d5a:	d050      	beq.n	8008dfe <HAL_TIM_ConfigClockSource+0x11a>
 8008d5c:	2b60      	cmp	r3, #96	; 0x60
 8008d5e:	d877      	bhi.n	8008e50 <HAL_TIM_ConfigClockSource+0x16c>
 8008d60:	2b50      	cmp	r3, #80	; 0x50
 8008d62:	d03c      	beq.n	8008dde <HAL_TIM_ConfigClockSource+0xfa>
 8008d64:	2b50      	cmp	r3, #80	; 0x50
 8008d66:	d873      	bhi.n	8008e50 <HAL_TIM_ConfigClockSource+0x16c>
 8008d68:	2b40      	cmp	r3, #64	; 0x40
 8008d6a:	d058      	beq.n	8008e1e <HAL_TIM_ConfigClockSource+0x13a>
 8008d6c:	2b40      	cmp	r3, #64	; 0x40
 8008d6e:	d86f      	bhi.n	8008e50 <HAL_TIM_ConfigClockSource+0x16c>
 8008d70:	2b30      	cmp	r3, #48	; 0x30
 8008d72:	d064      	beq.n	8008e3e <HAL_TIM_ConfigClockSource+0x15a>
 8008d74:	2b30      	cmp	r3, #48	; 0x30
 8008d76:	d86b      	bhi.n	8008e50 <HAL_TIM_ConfigClockSource+0x16c>
 8008d78:	2b20      	cmp	r3, #32
 8008d7a:	d060      	beq.n	8008e3e <HAL_TIM_ConfigClockSource+0x15a>
 8008d7c:	2b20      	cmp	r3, #32
 8008d7e:	d867      	bhi.n	8008e50 <HAL_TIM_ConfigClockSource+0x16c>
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d05c      	beq.n	8008e3e <HAL_TIM_ConfigClockSource+0x15a>
 8008d84:	2b10      	cmp	r3, #16
 8008d86:	d05a      	beq.n	8008e3e <HAL_TIM_ConfigClockSource+0x15a>
 8008d88:	e062      	b.n	8008e50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008d9a:	f000 f9b9 	bl	8009110 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008dac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68ba      	ldr	r2, [r7, #8]
 8008db4:	609a      	str	r2, [r3, #8]
      break;
 8008db6:	e04f      	b.n	8008e58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008dc8:	f000 f9a2 	bl	8009110 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	689a      	ldr	r2, [r3, #8]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008dda:	609a      	str	r2, [r3, #8]
      break;
 8008ddc:	e03c      	b.n	8008e58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008dea:	461a      	mov	r2, r3
 8008dec:	f000 f916 	bl	800901c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	2150      	movs	r1, #80	; 0x50
 8008df6:	4618      	mov	r0, r3
 8008df8:	f000 f96f 	bl	80090da <TIM_ITRx_SetConfig>
      break;
 8008dfc:	e02c      	b.n	8008e58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	f000 f935 	bl	800907a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2160      	movs	r1, #96	; 0x60
 8008e16:	4618      	mov	r0, r3
 8008e18:	f000 f95f 	bl	80090da <TIM_ITRx_SetConfig>
      break;
 8008e1c:	e01c      	b.n	8008e58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	f000 f8f6 	bl	800901c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2140      	movs	r1, #64	; 0x40
 8008e36:	4618      	mov	r0, r3
 8008e38:	f000 f94f 	bl	80090da <TIM_ITRx_SetConfig>
      break;
 8008e3c:	e00c      	b.n	8008e58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4619      	mov	r1, r3
 8008e48:	4610      	mov	r0, r2
 8008e4a:	f000 f946 	bl	80090da <TIM_ITRx_SetConfig>
      break;
 8008e4e:	e003      	b.n	8008e58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008e50:	2301      	movs	r3, #1
 8008e52:	73fb      	strb	r3, [r7, #15]
      break;
 8008e54:	e000      	b.n	8008e58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008e56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e72:	b480      	push	{r7}
 8008e74:	b083      	sub	sp, #12
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e7a:	bf00      	nop
 8008e7c:	370c      	adds	r7, #12
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr

08008e86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e86:	b480      	push	{r7}
 8008e88:	b083      	sub	sp, #12
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e8e:	bf00      	nop
 8008e90:	370c      	adds	r7, #12
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr

08008e9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e9a:	b480      	push	{r7}
 8008e9c:	b083      	sub	sp, #12
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ea2:	bf00      	nop
 8008ea4:	370c      	adds	r7, #12
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr

08008eae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008eae:	b480      	push	{r7}
 8008eb0:	b083      	sub	sp, #12
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008eb6:	bf00      	nop
 8008eb8:	370c      	adds	r7, #12
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr
	...

08008ec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b085      	sub	sp, #20
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4a46      	ldr	r2, [pc, #280]	; (8008ff0 <TIM_Base_SetConfig+0x12c>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d013      	beq.n	8008f04 <TIM_Base_SetConfig+0x40>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ee2:	d00f      	beq.n	8008f04 <TIM_Base_SetConfig+0x40>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	4a43      	ldr	r2, [pc, #268]	; (8008ff4 <TIM_Base_SetConfig+0x130>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d00b      	beq.n	8008f04 <TIM_Base_SetConfig+0x40>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4a42      	ldr	r2, [pc, #264]	; (8008ff8 <TIM_Base_SetConfig+0x134>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d007      	beq.n	8008f04 <TIM_Base_SetConfig+0x40>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	4a41      	ldr	r2, [pc, #260]	; (8008ffc <TIM_Base_SetConfig+0x138>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d003      	beq.n	8008f04 <TIM_Base_SetConfig+0x40>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	4a40      	ldr	r2, [pc, #256]	; (8009000 <TIM_Base_SetConfig+0x13c>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d108      	bne.n	8008f16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	68fa      	ldr	r2, [r7, #12]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	4a35      	ldr	r2, [pc, #212]	; (8008ff0 <TIM_Base_SetConfig+0x12c>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d02b      	beq.n	8008f76 <TIM_Base_SetConfig+0xb2>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f24:	d027      	beq.n	8008f76 <TIM_Base_SetConfig+0xb2>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	4a32      	ldr	r2, [pc, #200]	; (8008ff4 <TIM_Base_SetConfig+0x130>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d023      	beq.n	8008f76 <TIM_Base_SetConfig+0xb2>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	4a31      	ldr	r2, [pc, #196]	; (8008ff8 <TIM_Base_SetConfig+0x134>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d01f      	beq.n	8008f76 <TIM_Base_SetConfig+0xb2>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	4a30      	ldr	r2, [pc, #192]	; (8008ffc <TIM_Base_SetConfig+0x138>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d01b      	beq.n	8008f76 <TIM_Base_SetConfig+0xb2>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	4a2f      	ldr	r2, [pc, #188]	; (8009000 <TIM_Base_SetConfig+0x13c>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d017      	beq.n	8008f76 <TIM_Base_SetConfig+0xb2>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	4a2e      	ldr	r2, [pc, #184]	; (8009004 <TIM_Base_SetConfig+0x140>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d013      	beq.n	8008f76 <TIM_Base_SetConfig+0xb2>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	4a2d      	ldr	r2, [pc, #180]	; (8009008 <TIM_Base_SetConfig+0x144>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d00f      	beq.n	8008f76 <TIM_Base_SetConfig+0xb2>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	4a2c      	ldr	r2, [pc, #176]	; (800900c <TIM_Base_SetConfig+0x148>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d00b      	beq.n	8008f76 <TIM_Base_SetConfig+0xb2>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	4a2b      	ldr	r2, [pc, #172]	; (8009010 <TIM_Base_SetConfig+0x14c>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d007      	beq.n	8008f76 <TIM_Base_SetConfig+0xb2>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	4a2a      	ldr	r2, [pc, #168]	; (8009014 <TIM_Base_SetConfig+0x150>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d003      	beq.n	8008f76 <TIM_Base_SetConfig+0xb2>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	4a29      	ldr	r2, [pc, #164]	; (8009018 <TIM_Base_SetConfig+0x154>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d108      	bne.n	8008f88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	68fa      	ldr	r2, [r7, #12]
 8008f84:	4313      	orrs	r3, r2
 8008f86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	695b      	ldr	r3, [r3, #20]
 8008f92:	4313      	orrs	r3, r2
 8008f94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	68fa      	ldr	r2, [r7, #12]
 8008f9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	689a      	ldr	r2, [r3, #8]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	4a10      	ldr	r2, [pc, #64]	; (8008ff0 <TIM_Base_SetConfig+0x12c>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d003      	beq.n	8008fbc <TIM_Base_SetConfig+0xf8>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4a12      	ldr	r2, [pc, #72]	; (8009000 <TIM_Base_SetConfig+0x13c>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d103      	bne.n	8008fc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	691a      	ldr	r2, [r3, #16]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	691b      	ldr	r3, [r3, #16]
 8008fce:	f003 0301 	and.w	r3, r3, #1
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d105      	bne.n	8008fe2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	691b      	ldr	r3, [r3, #16]
 8008fda:	f023 0201 	bic.w	r2, r3, #1
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	611a      	str	r2, [r3, #16]
  }
}
 8008fe2:	bf00      	nop
 8008fe4:	3714      	adds	r7, #20
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop
 8008ff0:	40010000 	.word	0x40010000
 8008ff4:	40000400 	.word	0x40000400
 8008ff8:	40000800 	.word	0x40000800
 8008ffc:	40000c00 	.word	0x40000c00
 8009000:	40010400 	.word	0x40010400
 8009004:	40014000 	.word	0x40014000
 8009008:	40014400 	.word	0x40014400
 800900c:	40014800 	.word	0x40014800
 8009010:	40001800 	.word	0x40001800
 8009014:	40001c00 	.word	0x40001c00
 8009018:	40002000 	.word	0x40002000

0800901c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800901c:	b480      	push	{r7}
 800901e:	b087      	sub	sp, #28
 8009020:	af00      	add	r7, sp, #0
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	60b9      	str	r1, [r7, #8]
 8009026:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	6a1b      	ldr	r3, [r3, #32]
 800902c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6a1b      	ldr	r3, [r3, #32]
 8009032:	f023 0201 	bic.w	r2, r3, #1
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	699b      	ldr	r3, [r3, #24]
 800903e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009046:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	011b      	lsls	r3, r3, #4
 800904c:	693a      	ldr	r2, [r7, #16]
 800904e:	4313      	orrs	r3, r2
 8009050:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	f023 030a 	bic.w	r3, r3, #10
 8009058:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800905a:	697a      	ldr	r2, [r7, #20]
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	4313      	orrs	r3, r2
 8009060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	693a      	ldr	r2, [r7, #16]
 8009066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	697a      	ldr	r2, [r7, #20]
 800906c:	621a      	str	r2, [r3, #32]
}
 800906e:	bf00      	nop
 8009070:	371c      	adds	r7, #28
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr

0800907a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800907a:	b480      	push	{r7}
 800907c:	b087      	sub	sp, #28
 800907e:	af00      	add	r7, sp, #0
 8009080:	60f8      	str	r0, [r7, #12]
 8009082:	60b9      	str	r1, [r7, #8]
 8009084:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	6a1b      	ldr	r3, [r3, #32]
 800908a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	6a1b      	ldr	r3, [r3, #32]
 8009090:	f023 0210 	bic.w	r2, r3, #16
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	699b      	ldr	r3, [r3, #24]
 800909c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80090a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	031b      	lsls	r3, r3, #12
 80090aa:	693a      	ldr	r2, [r7, #16]
 80090ac:	4313      	orrs	r3, r2
 80090ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80090b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	011b      	lsls	r3, r3, #4
 80090bc:	697a      	ldr	r2, [r7, #20]
 80090be:	4313      	orrs	r3, r2
 80090c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	693a      	ldr	r2, [r7, #16]
 80090c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	697a      	ldr	r2, [r7, #20]
 80090cc:	621a      	str	r2, [r3, #32]
}
 80090ce:	bf00      	nop
 80090d0:	371c      	adds	r7, #28
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr

080090da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80090da:	b480      	push	{r7}
 80090dc:	b085      	sub	sp, #20
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
 80090e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80090f2:	683a      	ldr	r2, [r7, #0]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	4313      	orrs	r3, r2
 80090f8:	f043 0307 	orr.w	r3, r3, #7
 80090fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	609a      	str	r2, [r3, #8]
}
 8009104:	bf00      	nop
 8009106:	3714      	adds	r7, #20
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009110:	b480      	push	{r7}
 8009112:	b087      	sub	sp, #28
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	60b9      	str	r1, [r7, #8]
 800911a:	607a      	str	r2, [r7, #4]
 800911c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800912a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	021a      	lsls	r2, r3, #8
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	431a      	orrs	r2, r3
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	4313      	orrs	r3, r2
 8009138:	697a      	ldr	r2, [r7, #20]
 800913a:	4313      	orrs	r3, r2
 800913c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	697a      	ldr	r2, [r7, #20]
 8009142:	609a      	str	r2, [r3, #8]
}
 8009144:	bf00      	nop
 8009146:	371c      	adds	r7, #28
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009150:	b480      	push	{r7}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009160:	2b01      	cmp	r3, #1
 8009162:	d101      	bne.n	8009168 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009164:	2302      	movs	r3, #2
 8009166:	e05a      	b.n	800921e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2201      	movs	r2, #1
 800916c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2202      	movs	r2, #2
 8009174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800918e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	4313      	orrs	r3, r2
 8009198:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	68fa      	ldr	r2, [r7, #12]
 80091a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a21      	ldr	r2, [pc, #132]	; (800922c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d022      	beq.n	80091f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091b4:	d01d      	beq.n	80091f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a1d      	ldr	r2, [pc, #116]	; (8009230 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d018      	beq.n	80091f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a1b      	ldr	r2, [pc, #108]	; (8009234 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d013      	beq.n	80091f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a1a      	ldr	r2, [pc, #104]	; (8009238 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d00e      	beq.n	80091f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a18      	ldr	r2, [pc, #96]	; (800923c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d009      	beq.n	80091f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a17      	ldr	r2, [pc, #92]	; (8009240 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d004      	beq.n	80091f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a15      	ldr	r2, [pc, #84]	; (8009244 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d10c      	bne.n	800920c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	68ba      	ldr	r2, [r7, #8]
 8009200:	4313      	orrs	r3, r2
 8009202:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	68ba      	ldr	r2, [r7, #8]
 800920a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2201      	movs	r2, #1
 8009210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3714      	adds	r7, #20
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr
 800922a:	bf00      	nop
 800922c:	40010000 	.word	0x40010000
 8009230:	40000400 	.word	0x40000400
 8009234:	40000800 	.word	0x40000800
 8009238:	40000c00 	.word	0x40000c00
 800923c:	40010400 	.word	0x40010400
 8009240:	40014000 	.word	0x40014000
 8009244:	40001800 	.word	0x40001800

08009248 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009250:	bf00      	nop
 8009252:	370c      	adds	r7, #12
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr

0800925c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009264:	bf00      	nop
 8009266:	370c      	adds	r7, #12
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr

08009270 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d101      	bne.n	8009282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	e042      	b.n	8009308 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009288:	b2db      	uxtb	r3, r3
 800928a:	2b00      	cmp	r3, #0
 800928c:	d106      	bne.n	800929c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f7f8 fae2 	bl	8001860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2224      	movs	r2, #36	; 0x24
 80092a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	68da      	ldr	r2, [r3, #12]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80092b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 f82b 	bl	8009310 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	691a      	ldr	r2, [r3, #16]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80092c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	695a      	ldr	r2, [r3, #20]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80092d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	68da      	ldr	r2, [r3, #12]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80092e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2220      	movs	r2, #32
 80092f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2220      	movs	r2, #32
 80092fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	3708      	adds	r7, #8
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009314:	b0c0      	sub	sp, #256	; 0x100
 8009316:	af00      	add	r7, sp, #0
 8009318:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800931c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	691b      	ldr	r3, [r3, #16]
 8009324:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800932c:	68d9      	ldr	r1, [r3, #12]
 800932e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	ea40 0301 	orr.w	r3, r0, r1
 8009338:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800933a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800933e:	689a      	ldr	r2, [r3, #8]
 8009340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009344:	691b      	ldr	r3, [r3, #16]
 8009346:	431a      	orrs	r2, r3
 8009348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800934c:	695b      	ldr	r3, [r3, #20]
 800934e:	431a      	orrs	r2, r3
 8009350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009354:	69db      	ldr	r3, [r3, #28]
 8009356:	4313      	orrs	r3, r2
 8009358:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800935c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	68db      	ldr	r3, [r3, #12]
 8009364:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009368:	f021 010c 	bic.w	r1, r1, #12
 800936c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009376:	430b      	orrs	r3, r1
 8009378:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800937a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	695b      	ldr	r3, [r3, #20]
 8009382:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800938a:	6999      	ldr	r1, [r3, #24]
 800938c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	ea40 0301 	orr.w	r3, r0, r1
 8009396:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	4b8f      	ldr	r3, [pc, #572]	; (80095dc <UART_SetConfig+0x2cc>)
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d005      	beq.n	80093b0 <UART_SetConfig+0xa0>
 80093a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	4b8d      	ldr	r3, [pc, #564]	; (80095e0 <UART_SetConfig+0x2d0>)
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d104      	bne.n	80093ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80093b0:	f7fd faf0 	bl	8006994 <HAL_RCC_GetPCLK2Freq>
 80093b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80093b8:	e003      	b.n	80093c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80093ba:	f7fd fad7 	bl	800696c <HAL_RCC_GetPCLK1Freq>
 80093be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093c6:	69db      	ldr	r3, [r3, #28]
 80093c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093cc:	f040 810c 	bne.w	80095e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80093d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093d4:	2200      	movs	r2, #0
 80093d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80093da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80093de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80093e2:	4622      	mov	r2, r4
 80093e4:	462b      	mov	r3, r5
 80093e6:	1891      	adds	r1, r2, r2
 80093e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80093ea:	415b      	adcs	r3, r3
 80093ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80093f2:	4621      	mov	r1, r4
 80093f4:	eb12 0801 	adds.w	r8, r2, r1
 80093f8:	4629      	mov	r1, r5
 80093fa:	eb43 0901 	adc.w	r9, r3, r1
 80093fe:	f04f 0200 	mov.w	r2, #0
 8009402:	f04f 0300 	mov.w	r3, #0
 8009406:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800940a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800940e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009412:	4690      	mov	r8, r2
 8009414:	4699      	mov	r9, r3
 8009416:	4623      	mov	r3, r4
 8009418:	eb18 0303 	adds.w	r3, r8, r3
 800941c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009420:	462b      	mov	r3, r5
 8009422:	eb49 0303 	adc.w	r3, r9, r3
 8009426:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800942a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	2200      	movs	r2, #0
 8009432:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009436:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800943a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800943e:	460b      	mov	r3, r1
 8009440:	18db      	adds	r3, r3, r3
 8009442:	653b      	str	r3, [r7, #80]	; 0x50
 8009444:	4613      	mov	r3, r2
 8009446:	eb42 0303 	adc.w	r3, r2, r3
 800944a:	657b      	str	r3, [r7, #84]	; 0x54
 800944c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009450:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009454:	f7f6 ff24 	bl	80002a0 <__aeabi_uldivmod>
 8009458:	4602      	mov	r2, r0
 800945a:	460b      	mov	r3, r1
 800945c:	4b61      	ldr	r3, [pc, #388]	; (80095e4 <UART_SetConfig+0x2d4>)
 800945e:	fba3 2302 	umull	r2, r3, r3, r2
 8009462:	095b      	lsrs	r3, r3, #5
 8009464:	011c      	lsls	r4, r3, #4
 8009466:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800946a:	2200      	movs	r2, #0
 800946c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009470:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009474:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009478:	4642      	mov	r2, r8
 800947a:	464b      	mov	r3, r9
 800947c:	1891      	adds	r1, r2, r2
 800947e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009480:	415b      	adcs	r3, r3
 8009482:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009484:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009488:	4641      	mov	r1, r8
 800948a:	eb12 0a01 	adds.w	sl, r2, r1
 800948e:	4649      	mov	r1, r9
 8009490:	eb43 0b01 	adc.w	fp, r3, r1
 8009494:	f04f 0200 	mov.w	r2, #0
 8009498:	f04f 0300 	mov.w	r3, #0
 800949c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80094a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80094a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80094a8:	4692      	mov	sl, r2
 80094aa:	469b      	mov	fp, r3
 80094ac:	4643      	mov	r3, r8
 80094ae:	eb1a 0303 	adds.w	r3, sl, r3
 80094b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80094b6:	464b      	mov	r3, r9
 80094b8:	eb4b 0303 	adc.w	r3, fp, r3
 80094bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80094c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80094cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80094d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80094d4:	460b      	mov	r3, r1
 80094d6:	18db      	adds	r3, r3, r3
 80094d8:	643b      	str	r3, [r7, #64]	; 0x40
 80094da:	4613      	mov	r3, r2
 80094dc:	eb42 0303 	adc.w	r3, r2, r3
 80094e0:	647b      	str	r3, [r7, #68]	; 0x44
 80094e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80094e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80094ea:	f7f6 fed9 	bl	80002a0 <__aeabi_uldivmod>
 80094ee:	4602      	mov	r2, r0
 80094f0:	460b      	mov	r3, r1
 80094f2:	4611      	mov	r1, r2
 80094f4:	4b3b      	ldr	r3, [pc, #236]	; (80095e4 <UART_SetConfig+0x2d4>)
 80094f6:	fba3 2301 	umull	r2, r3, r3, r1
 80094fa:	095b      	lsrs	r3, r3, #5
 80094fc:	2264      	movs	r2, #100	; 0x64
 80094fe:	fb02 f303 	mul.w	r3, r2, r3
 8009502:	1acb      	subs	r3, r1, r3
 8009504:	00db      	lsls	r3, r3, #3
 8009506:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800950a:	4b36      	ldr	r3, [pc, #216]	; (80095e4 <UART_SetConfig+0x2d4>)
 800950c:	fba3 2302 	umull	r2, r3, r3, r2
 8009510:	095b      	lsrs	r3, r3, #5
 8009512:	005b      	lsls	r3, r3, #1
 8009514:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009518:	441c      	add	r4, r3
 800951a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800951e:	2200      	movs	r2, #0
 8009520:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009524:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009528:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800952c:	4642      	mov	r2, r8
 800952e:	464b      	mov	r3, r9
 8009530:	1891      	adds	r1, r2, r2
 8009532:	63b9      	str	r1, [r7, #56]	; 0x38
 8009534:	415b      	adcs	r3, r3
 8009536:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009538:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800953c:	4641      	mov	r1, r8
 800953e:	1851      	adds	r1, r2, r1
 8009540:	6339      	str	r1, [r7, #48]	; 0x30
 8009542:	4649      	mov	r1, r9
 8009544:	414b      	adcs	r3, r1
 8009546:	637b      	str	r3, [r7, #52]	; 0x34
 8009548:	f04f 0200 	mov.w	r2, #0
 800954c:	f04f 0300 	mov.w	r3, #0
 8009550:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009554:	4659      	mov	r1, fp
 8009556:	00cb      	lsls	r3, r1, #3
 8009558:	4651      	mov	r1, sl
 800955a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800955e:	4651      	mov	r1, sl
 8009560:	00ca      	lsls	r2, r1, #3
 8009562:	4610      	mov	r0, r2
 8009564:	4619      	mov	r1, r3
 8009566:	4603      	mov	r3, r0
 8009568:	4642      	mov	r2, r8
 800956a:	189b      	adds	r3, r3, r2
 800956c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009570:	464b      	mov	r3, r9
 8009572:	460a      	mov	r2, r1
 8009574:	eb42 0303 	adc.w	r3, r2, r3
 8009578:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800957c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009588:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800958c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009590:	460b      	mov	r3, r1
 8009592:	18db      	adds	r3, r3, r3
 8009594:	62bb      	str	r3, [r7, #40]	; 0x28
 8009596:	4613      	mov	r3, r2
 8009598:	eb42 0303 	adc.w	r3, r2, r3
 800959c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800959e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80095a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80095a6:	f7f6 fe7b 	bl	80002a0 <__aeabi_uldivmod>
 80095aa:	4602      	mov	r2, r0
 80095ac:	460b      	mov	r3, r1
 80095ae:	4b0d      	ldr	r3, [pc, #52]	; (80095e4 <UART_SetConfig+0x2d4>)
 80095b0:	fba3 1302 	umull	r1, r3, r3, r2
 80095b4:	095b      	lsrs	r3, r3, #5
 80095b6:	2164      	movs	r1, #100	; 0x64
 80095b8:	fb01 f303 	mul.w	r3, r1, r3
 80095bc:	1ad3      	subs	r3, r2, r3
 80095be:	00db      	lsls	r3, r3, #3
 80095c0:	3332      	adds	r3, #50	; 0x32
 80095c2:	4a08      	ldr	r2, [pc, #32]	; (80095e4 <UART_SetConfig+0x2d4>)
 80095c4:	fba2 2303 	umull	r2, r3, r2, r3
 80095c8:	095b      	lsrs	r3, r3, #5
 80095ca:	f003 0207 	and.w	r2, r3, #7
 80095ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4422      	add	r2, r4
 80095d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80095d8:	e106      	b.n	80097e8 <UART_SetConfig+0x4d8>
 80095da:	bf00      	nop
 80095dc:	40011000 	.word	0x40011000
 80095e0:	40011400 	.word	0x40011400
 80095e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80095e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095ec:	2200      	movs	r2, #0
 80095ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80095f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80095f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80095fa:	4642      	mov	r2, r8
 80095fc:	464b      	mov	r3, r9
 80095fe:	1891      	adds	r1, r2, r2
 8009600:	6239      	str	r1, [r7, #32]
 8009602:	415b      	adcs	r3, r3
 8009604:	627b      	str	r3, [r7, #36]	; 0x24
 8009606:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800960a:	4641      	mov	r1, r8
 800960c:	1854      	adds	r4, r2, r1
 800960e:	4649      	mov	r1, r9
 8009610:	eb43 0501 	adc.w	r5, r3, r1
 8009614:	f04f 0200 	mov.w	r2, #0
 8009618:	f04f 0300 	mov.w	r3, #0
 800961c:	00eb      	lsls	r3, r5, #3
 800961e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009622:	00e2      	lsls	r2, r4, #3
 8009624:	4614      	mov	r4, r2
 8009626:	461d      	mov	r5, r3
 8009628:	4643      	mov	r3, r8
 800962a:	18e3      	adds	r3, r4, r3
 800962c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009630:	464b      	mov	r3, r9
 8009632:	eb45 0303 	adc.w	r3, r5, r3
 8009636:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800963a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009646:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800964a:	f04f 0200 	mov.w	r2, #0
 800964e:	f04f 0300 	mov.w	r3, #0
 8009652:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009656:	4629      	mov	r1, r5
 8009658:	008b      	lsls	r3, r1, #2
 800965a:	4621      	mov	r1, r4
 800965c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009660:	4621      	mov	r1, r4
 8009662:	008a      	lsls	r2, r1, #2
 8009664:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009668:	f7f6 fe1a 	bl	80002a0 <__aeabi_uldivmod>
 800966c:	4602      	mov	r2, r0
 800966e:	460b      	mov	r3, r1
 8009670:	4b60      	ldr	r3, [pc, #384]	; (80097f4 <UART_SetConfig+0x4e4>)
 8009672:	fba3 2302 	umull	r2, r3, r3, r2
 8009676:	095b      	lsrs	r3, r3, #5
 8009678:	011c      	lsls	r4, r3, #4
 800967a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800967e:	2200      	movs	r2, #0
 8009680:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009684:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009688:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800968c:	4642      	mov	r2, r8
 800968e:	464b      	mov	r3, r9
 8009690:	1891      	adds	r1, r2, r2
 8009692:	61b9      	str	r1, [r7, #24]
 8009694:	415b      	adcs	r3, r3
 8009696:	61fb      	str	r3, [r7, #28]
 8009698:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800969c:	4641      	mov	r1, r8
 800969e:	1851      	adds	r1, r2, r1
 80096a0:	6139      	str	r1, [r7, #16]
 80096a2:	4649      	mov	r1, r9
 80096a4:	414b      	adcs	r3, r1
 80096a6:	617b      	str	r3, [r7, #20]
 80096a8:	f04f 0200 	mov.w	r2, #0
 80096ac:	f04f 0300 	mov.w	r3, #0
 80096b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80096b4:	4659      	mov	r1, fp
 80096b6:	00cb      	lsls	r3, r1, #3
 80096b8:	4651      	mov	r1, sl
 80096ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80096be:	4651      	mov	r1, sl
 80096c0:	00ca      	lsls	r2, r1, #3
 80096c2:	4610      	mov	r0, r2
 80096c4:	4619      	mov	r1, r3
 80096c6:	4603      	mov	r3, r0
 80096c8:	4642      	mov	r2, r8
 80096ca:	189b      	adds	r3, r3, r2
 80096cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80096d0:	464b      	mov	r3, r9
 80096d2:	460a      	mov	r2, r1
 80096d4:	eb42 0303 	adc.w	r3, r2, r3
 80096d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80096dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80096e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80096e8:	f04f 0200 	mov.w	r2, #0
 80096ec:	f04f 0300 	mov.w	r3, #0
 80096f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80096f4:	4649      	mov	r1, r9
 80096f6:	008b      	lsls	r3, r1, #2
 80096f8:	4641      	mov	r1, r8
 80096fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80096fe:	4641      	mov	r1, r8
 8009700:	008a      	lsls	r2, r1, #2
 8009702:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009706:	f7f6 fdcb 	bl	80002a0 <__aeabi_uldivmod>
 800970a:	4602      	mov	r2, r0
 800970c:	460b      	mov	r3, r1
 800970e:	4611      	mov	r1, r2
 8009710:	4b38      	ldr	r3, [pc, #224]	; (80097f4 <UART_SetConfig+0x4e4>)
 8009712:	fba3 2301 	umull	r2, r3, r3, r1
 8009716:	095b      	lsrs	r3, r3, #5
 8009718:	2264      	movs	r2, #100	; 0x64
 800971a:	fb02 f303 	mul.w	r3, r2, r3
 800971e:	1acb      	subs	r3, r1, r3
 8009720:	011b      	lsls	r3, r3, #4
 8009722:	3332      	adds	r3, #50	; 0x32
 8009724:	4a33      	ldr	r2, [pc, #204]	; (80097f4 <UART_SetConfig+0x4e4>)
 8009726:	fba2 2303 	umull	r2, r3, r2, r3
 800972a:	095b      	lsrs	r3, r3, #5
 800972c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009730:	441c      	add	r4, r3
 8009732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009736:	2200      	movs	r2, #0
 8009738:	673b      	str	r3, [r7, #112]	; 0x70
 800973a:	677a      	str	r2, [r7, #116]	; 0x74
 800973c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009740:	4642      	mov	r2, r8
 8009742:	464b      	mov	r3, r9
 8009744:	1891      	adds	r1, r2, r2
 8009746:	60b9      	str	r1, [r7, #8]
 8009748:	415b      	adcs	r3, r3
 800974a:	60fb      	str	r3, [r7, #12]
 800974c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009750:	4641      	mov	r1, r8
 8009752:	1851      	adds	r1, r2, r1
 8009754:	6039      	str	r1, [r7, #0]
 8009756:	4649      	mov	r1, r9
 8009758:	414b      	adcs	r3, r1
 800975a:	607b      	str	r3, [r7, #4]
 800975c:	f04f 0200 	mov.w	r2, #0
 8009760:	f04f 0300 	mov.w	r3, #0
 8009764:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009768:	4659      	mov	r1, fp
 800976a:	00cb      	lsls	r3, r1, #3
 800976c:	4651      	mov	r1, sl
 800976e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009772:	4651      	mov	r1, sl
 8009774:	00ca      	lsls	r2, r1, #3
 8009776:	4610      	mov	r0, r2
 8009778:	4619      	mov	r1, r3
 800977a:	4603      	mov	r3, r0
 800977c:	4642      	mov	r2, r8
 800977e:	189b      	adds	r3, r3, r2
 8009780:	66bb      	str	r3, [r7, #104]	; 0x68
 8009782:	464b      	mov	r3, r9
 8009784:	460a      	mov	r2, r1
 8009786:	eb42 0303 	adc.w	r3, r2, r3
 800978a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800978c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	663b      	str	r3, [r7, #96]	; 0x60
 8009796:	667a      	str	r2, [r7, #100]	; 0x64
 8009798:	f04f 0200 	mov.w	r2, #0
 800979c:	f04f 0300 	mov.w	r3, #0
 80097a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80097a4:	4649      	mov	r1, r9
 80097a6:	008b      	lsls	r3, r1, #2
 80097a8:	4641      	mov	r1, r8
 80097aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80097ae:	4641      	mov	r1, r8
 80097b0:	008a      	lsls	r2, r1, #2
 80097b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80097b6:	f7f6 fd73 	bl	80002a0 <__aeabi_uldivmod>
 80097ba:	4602      	mov	r2, r0
 80097bc:	460b      	mov	r3, r1
 80097be:	4b0d      	ldr	r3, [pc, #52]	; (80097f4 <UART_SetConfig+0x4e4>)
 80097c0:	fba3 1302 	umull	r1, r3, r3, r2
 80097c4:	095b      	lsrs	r3, r3, #5
 80097c6:	2164      	movs	r1, #100	; 0x64
 80097c8:	fb01 f303 	mul.w	r3, r1, r3
 80097cc:	1ad3      	subs	r3, r2, r3
 80097ce:	011b      	lsls	r3, r3, #4
 80097d0:	3332      	adds	r3, #50	; 0x32
 80097d2:	4a08      	ldr	r2, [pc, #32]	; (80097f4 <UART_SetConfig+0x4e4>)
 80097d4:	fba2 2303 	umull	r2, r3, r2, r3
 80097d8:	095b      	lsrs	r3, r3, #5
 80097da:	f003 020f 	and.w	r2, r3, #15
 80097de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4422      	add	r2, r4
 80097e6:	609a      	str	r2, [r3, #8]
}
 80097e8:	bf00      	nop
 80097ea:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80097ee:	46bd      	mov	sp, r7
 80097f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80097f4:	51eb851f 	.word	0x51eb851f

080097f8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d123      	bne.n	8009852 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009812:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009816:	683a      	ldr	r2, [r7, #0]
 8009818:	6851      	ldr	r1, [r2, #4]
 800981a:	683a      	ldr	r2, [r7, #0]
 800981c:	6892      	ldr	r2, [r2, #8]
 800981e:	4311      	orrs	r1, r2
 8009820:	683a      	ldr	r2, [r7, #0]
 8009822:	68d2      	ldr	r2, [r2, #12]
 8009824:	4311      	orrs	r1, r2
 8009826:	683a      	ldr	r2, [r7, #0]
 8009828:	6912      	ldr	r2, [r2, #16]
 800982a:	4311      	orrs	r1, r2
 800982c:	683a      	ldr	r2, [r7, #0]
 800982e:	6952      	ldr	r2, [r2, #20]
 8009830:	4311      	orrs	r1, r2
 8009832:	683a      	ldr	r2, [r7, #0]
 8009834:	6992      	ldr	r2, [r2, #24]
 8009836:	4311      	orrs	r1, r2
 8009838:	683a      	ldr	r2, [r7, #0]
 800983a:	69d2      	ldr	r2, [r2, #28]
 800983c:	4311      	orrs	r1, r2
 800983e:	683a      	ldr	r2, [r7, #0]
 8009840:	6a12      	ldr	r2, [r2, #32]
 8009842:	4311      	orrs	r1, r2
 8009844:	683a      	ldr	r2, [r7, #0]
 8009846:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009848:	430a      	orrs	r2, r1
 800984a:	431a      	orrs	r2, r3
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	601a      	str	r2, [r3, #0]
 8009850:	e028      	b.n	80098a4 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	69d9      	ldr	r1, [r3, #28]
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	6a1b      	ldr	r3, [r3, #32]
 8009862:	4319      	orrs	r1, r3
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009868:	430b      	orrs	r3, r1
 800986a:	431a      	orrs	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009878:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800987c:	683a      	ldr	r2, [r7, #0]
 800987e:	6851      	ldr	r1, [r2, #4]
 8009880:	683a      	ldr	r2, [r7, #0]
 8009882:	6892      	ldr	r2, [r2, #8]
 8009884:	4311      	orrs	r1, r2
 8009886:	683a      	ldr	r2, [r7, #0]
 8009888:	68d2      	ldr	r2, [r2, #12]
 800988a:	4311      	orrs	r1, r2
 800988c:	683a      	ldr	r2, [r7, #0]
 800988e:	6912      	ldr	r2, [r2, #16]
 8009890:	4311      	orrs	r1, r2
 8009892:	683a      	ldr	r2, [r7, #0]
 8009894:	6952      	ldr	r2, [r2, #20]
 8009896:	4311      	orrs	r1, r2
 8009898:	683a      	ldr	r2, [r7, #0]
 800989a:	6992      	ldr	r2, [r2, #24]
 800989c:	430a      	orrs	r2, r1
 800989e:	431a      	orrs	r2, r3
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	370c      	adds	r7, #12
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr

080098b2 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80098b2:	b480      	push	{r7}
 80098b4:	b085      	sub	sp, #20
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	60f8      	str	r0, [r7, #12]
 80098ba:	60b9      	str	r1, [r7, #8]
 80098bc:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d128      	bne.n	8009916 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	689b      	ldr	r3, [r3, #8]
 80098c8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	1e59      	subs	r1, r3, #1
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	3b01      	subs	r3, #1
 80098d8:	011b      	lsls	r3, r3, #4
 80098da:	4319      	orrs	r1, r3
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	3b01      	subs	r3, #1
 80098e2:	021b      	lsls	r3, r3, #8
 80098e4:	4319      	orrs	r1, r3
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	68db      	ldr	r3, [r3, #12]
 80098ea:	3b01      	subs	r3, #1
 80098ec:	031b      	lsls	r3, r3, #12
 80098ee:	4319      	orrs	r1, r3
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	691b      	ldr	r3, [r3, #16]
 80098f4:	3b01      	subs	r3, #1
 80098f6:	041b      	lsls	r3, r3, #16
 80098f8:	4319      	orrs	r1, r3
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	695b      	ldr	r3, [r3, #20]
 80098fe:	3b01      	subs	r3, #1
 8009900:	051b      	lsls	r3, r3, #20
 8009902:	4319      	orrs	r1, r3
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	699b      	ldr	r3, [r3, #24]
 8009908:	3b01      	subs	r3, #1
 800990a:	061b      	lsls	r3, r3, #24
 800990c:	430b      	orrs	r3, r1
 800990e:	431a      	orrs	r2, r3
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	609a      	str	r2, [r3, #8]
 8009914:	e02f      	b.n	8009976 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	689b      	ldr	r3, [r3, #8]
 800991a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800991e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009922:	68ba      	ldr	r2, [r7, #8]
 8009924:	68d2      	ldr	r2, [r2, #12]
 8009926:	3a01      	subs	r2, #1
 8009928:	0311      	lsls	r1, r2, #12
 800992a:	68ba      	ldr	r2, [r7, #8]
 800992c:	6952      	ldr	r2, [r2, #20]
 800992e:	3a01      	subs	r2, #1
 8009930:	0512      	lsls	r2, r2, #20
 8009932:	430a      	orrs	r2, r1
 8009934:	431a      	orrs	r2, r3
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	68db      	ldr	r3, [r3, #12]
 800993e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	1e59      	subs	r1, r3, #1
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	3b01      	subs	r3, #1
 800994e:	011b      	lsls	r3, r3, #4
 8009950:	4319      	orrs	r1, r3
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	689b      	ldr	r3, [r3, #8]
 8009956:	3b01      	subs	r3, #1
 8009958:	021b      	lsls	r3, r3, #8
 800995a:	4319      	orrs	r1, r3
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	691b      	ldr	r3, [r3, #16]
 8009960:	3b01      	subs	r3, #1
 8009962:	041b      	lsls	r3, r3, #16
 8009964:	4319      	orrs	r1, r3
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	699b      	ldr	r3, [r3, #24]
 800996a:	3b01      	subs	r3, #1
 800996c:	061b      	lsls	r3, r3, #24
 800996e:	430b      	orrs	r3, r1
 8009970:	431a      	orrs	r2, r3
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8009976:	2300      	movs	r3, #0
}
 8009978:	4618      	mov	r0, r3
 800997a:	3714      	adds	r7, #20
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr

08009984 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009984:	b084      	sub	sp, #16
 8009986:	b480      	push	{r7}
 8009988:	b085      	sub	sp, #20
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
 800998e:	f107 001c 	add.w	r0, r7, #28
 8009992:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009996:	2300      	movs	r3, #0
 8009998:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800999a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800999c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800999e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80099a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80099a2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80099a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80099a6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80099a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80099aa:	431a      	orrs	r2, r3
             Init.ClockDiv
 80099ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80099ae:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80099b0:	68fa      	ldr	r2, [r7, #12]
 80099b2:	4313      	orrs	r3, r2
 80099b4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80099be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80099c2:	68fa      	ldr	r2, [r7, #12]
 80099c4:	431a      	orrs	r2, r3
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80099ca:	2300      	movs	r3, #0
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3714      	adds	r7, #20
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	b004      	add	sp, #16
 80099d8:	4770      	bx	lr

080099da <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80099da:	b480      	push	{r7}
 80099dc:	b083      	sub	sp, #12
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	370c      	adds	r7, #12
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2203      	movs	r2, #3
 8009a00:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009a02:	2300      	movs	r3, #0
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	370c      	adds	r7, #12
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr

08009a10 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f003 0303 	and.w	r3, r3, #3
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	370c      	adds	r7, #12
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b085      	sub	sp, #20
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009a36:	2300      	movs	r3, #0
 8009a38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009a4a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009a50:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009a56:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009a58:	68fa      	ldr	r2, [r7, #12]
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009a66:	f023 030f 	bic.w	r3, r3, #15
 8009a6a:	68fa      	ldr	r2, [r7, #12]
 8009a6c:	431a      	orrs	r2, r3
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009a72:	2300      	movs	r3, #0
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3714      	adds	r7, #20
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b083      	sub	sp, #12
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	691b      	ldr	r3, [r3, #16]
 8009a8c:	b2db      	uxtb	r3, r3
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	370c      	adds	r7, #12
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr

08009a9a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009a9a:	b480      	push	{r7}
 8009a9c:	b085      	sub	sp, #20
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
 8009aa2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	3314      	adds	r3, #20
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	4413      	add	r3, r2
 8009aae:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
}  
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3714      	adds	r7, #20
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b085      	sub	sp, #20
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009aca:	2300      	movs	r3, #0
 8009acc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	685a      	ldr	r2, [r3, #4]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009ae6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009aec:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009af2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009af4:	68fa      	ldr	r2, [r7, #12]
 8009af6:	4313      	orrs	r3, r2
 8009af8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009afe:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	431a      	orrs	r2, r3
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009b0a:	2300      	movs	r3, #0

}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3714      	adds	r7, #20
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b088      	sub	sp, #32
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009b26:	2310      	movs	r3, #16
 8009b28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009b2a:	2340      	movs	r3, #64	; 0x40
 8009b2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b38:	f107 0308 	add.w	r3, r7, #8
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f7ff ff74 	bl	8009a2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b48:	2110      	movs	r1, #16
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 fa18 	bl	8009f80 <SDMMC_GetCmdResp1>
 8009b50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b52:	69fb      	ldr	r3, [r7, #28]
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3720      	adds	r7, #32
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b088      	sub	sp, #32
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009b6a:	2311      	movs	r3, #17
 8009b6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009b6e:	2340      	movs	r3, #64	; 0x40
 8009b70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b72:	2300      	movs	r3, #0
 8009b74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b7a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b7c:	f107 0308 	add.w	r3, r7, #8
 8009b80:	4619      	mov	r1, r3
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f7ff ff52 	bl	8009a2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b8c:	2111      	movs	r1, #17
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 f9f6 	bl	8009f80 <SDMMC_GetCmdResp1>
 8009b94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b96:	69fb      	ldr	r3, [r7, #28]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3720      	adds	r7, #32
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b088      	sub	sp, #32
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009bae:	2312      	movs	r3, #18
 8009bb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009bb2:	2340      	movs	r3, #64	; 0x40
 8009bb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009bba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bbe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009bc0:	f107 0308 	add.w	r3, r7, #8
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f7ff ff30 	bl	8009a2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bd0:	2112      	movs	r1, #18
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 f9d4 	bl	8009f80 <SDMMC_GetCmdResp1>
 8009bd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bda:	69fb      	ldr	r3, [r7, #28]
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3720      	adds	r7, #32
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b088      	sub	sp, #32
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009bf2:	2318      	movs	r3, #24
 8009bf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009bf6:	2340      	movs	r3, #64	; 0x40
 8009bf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009bfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c04:	f107 0308 	add.w	r3, r7, #8
 8009c08:	4619      	mov	r1, r3
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f7ff ff0e 	bl	8009a2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c14:	2118      	movs	r1, #24
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 f9b2 	bl	8009f80 <SDMMC_GetCmdResp1>
 8009c1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c1e:	69fb      	ldr	r3, [r7, #28]
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3720      	adds	r7, #32
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b088      	sub	sp, #32
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009c36:	2319      	movs	r3, #25
 8009c38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009c3a:	2340      	movs	r3, #64	; 0x40
 8009c3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009c42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c46:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c48:	f107 0308 	add.w	r3, r7, #8
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f7ff feec 	bl	8009a2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c58:	2119      	movs	r1, #25
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 f990 	bl	8009f80 <SDMMC_GetCmdResp1>
 8009c60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c62:	69fb      	ldr	r3, [r7, #28]
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3720      	adds	r7, #32
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b088      	sub	sp, #32
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009c74:	2300      	movs	r3, #0
 8009c76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009c78:	230c      	movs	r3, #12
 8009c7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009c7c:	2340      	movs	r3, #64	; 0x40
 8009c7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009c80:	2300      	movs	r3, #0
 8009c82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009c84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c88:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c8a:	f107 0308 	add.w	r3, r7, #8
 8009c8e:	4619      	mov	r1, r3
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f7ff fecb 	bl	8009a2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009c96:	4a05      	ldr	r2, [pc, #20]	; (8009cac <SDMMC_CmdStopTransfer+0x40>)
 8009c98:	210c      	movs	r1, #12
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 f970 	bl	8009f80 <SDMMC_GetCmdResp1>
 8009ca0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ca2:	69fb      	ldr	r3, [r7, #28]
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3720      	adds	r7, #32
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	05f5e100 	.word	0x05f5e100

08009cb0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b08a      	sub	sp, #40	; 0x28
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009cc0:	2307      	movs	r3, #7
 8009cc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009cc4:	2340      	movs	r3, #64	; 0x40
 8009cc6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ccc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cd0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009cd2:	f107 0310 	add.w	r3, r7, #16
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	68f8      	ldr	r0, [r7, #12]
 8009cda:	f7ff fea7 	bl	8009a2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ce2:	2107      	movs	r1, #7
 8009ce4:	68f8      	ldr	r0, [r7, #12]
 8009ce6:	f000 f94b 	bl	8009f80 <SDMMC_GetCmdResp1>
 8009cea:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3728      	adds	r7, #40	; 0x28
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}

08009cf6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009cf6:	b580      	push	{r7, lr}
 8009cf8:	b088      	sub	sp, #32
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009d02:	2300      	movs	r3, #0
 8009d04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009d06:	2300      	movs	r3, #0
 8009d08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009d14:	f107 0308 	add.w	r3, r7, #8
 8009d18:	4619      	mov	r1, r3
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f7ff fe86 	bl	8009a2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 fb65 	bl	800a3f0 <SDMMC_GetCmdError>
 8009d26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d28:	69fb      	ldr	r3, [r7, #28]
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3720      	adds	r7, #32
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}

08009d32 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009d32:	b580      	push	{r7, lr}
 8009d34:	b088      	sub	sp, #32
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009d3a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009d3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009d40:	2308      	movs	r3, #8
 8009d42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009d44:	2340      	movs	r3, #64	; 0x40
 8009d46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009d4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d50:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009d52:	f107 0308 	add.w	r3, r7, #8
 8009d56:	4619      	mov	r1, r3
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f7ff fe67 	bl	8009a2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 faf8 	bl	800a354 <SDMMC_GetCmdResp7>
 8009d64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d66:	69fb      	ldr	r3, [r7, #28]
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3720      	adds	r7, #32
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b088      	sub	sp, #32
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009d7e:	2337      	movs	r3, #55	; 0x37
 8009d80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009d82:	2340      	movs	r3, #64	; 0x40
 8009d84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009d86:	2300      	movs	r3, #0
 8009d88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009d8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d8e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009d90:	f107 0308 	add.w	r3, r7, #8
 8009d94:	4619      	mov	r1, r3
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f7ff fe48 	bl	8009a2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009da0:	2137      	movs	r1, #55	; 0x37
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 f8ec 	bl	8009f80 <SDMMC_GetCmdResp1>
 8009da8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009daa:	69fb      	ldr	r3, [r7, #28]
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3720      	adds	r7, #32
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b088      	sub	sp, #32
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009dc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009dc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009dca:	2329      	movs	r3, #41	; 0x29
 8009dcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009dce:	2340      	movs	r3, #64	; 0x40
 8009dd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dda:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009ddc:	f107 0308 	add.w	r3, r7, #8
 8009de0:	4619      	mov	r1, r3
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f7ff fe22 	bl	8009a2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f000 f9ff 	bl	800a1ec <SDMMC_GetCmdResp3>
 8009dee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009df0:	69fb      	ldr	r3, [r7, #28]
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3720      	adds	r7, #32
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}

08009dfa <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b088      	sub	sp, #32
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
 8009e02:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009e08:	2306      	movs	r3, #6
 8009e0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e0c:	2340      	movs	r3, #64	; 0x40
 8009e0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e10:	2300      	movs	r3, #0
 8009e12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e18:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e1a:	f107 0308 	add.w	r3, r7, #8
 8009e1e:	4619      	mov	r1, r3
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f7ff fe03 	bl	8009a2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e2a:	2106      	movs	r1, #6
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 f8a7 	bl	8009f80 <SDMMC_GetCmdResp1>
 8009e32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e34:	69fb      	ldr	r3, [r7, #28]
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3720      	adds	r7, #32
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}

08009e3e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8009e3e:	b580      	push	{r7, lr}
 8009e40:	b088      	sub	sp, #32
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009e46:	2300      	movs	r3, #0
 8009e48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009e4a:	2333      	movs	r3, #51	; 0x33
 8009e4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e4e:	2340      	movs	r3, #64	; 0x40
 8009e50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e52:	2300      	movs	r3, #0
 8009e54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e5c:	f107 0308 	add.w	r3, r7, #8
 8009e60:	4619      	mov	r1, r3
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f7ff fde2 	bl	8009a2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e6c:	2133      	movs	r1, #51	; 0x33
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 f886 	bl	8009f80 <SDMMC_GetCmdResp1>
 8009e74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e76:	69fb      	ldr	r3, [r7, #28]
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3720      	adds	r7, #32
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b088      	sub	sp, #32
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009e8c:	2302      	movs	r3, #2
 8009e8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009e90:	23c0      	movs	r3, #192	; 0xc0
 8009e92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e94:	2300      	movs	r3, #0
 8009e96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e9c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e9e:	f107 0308 	add.w	r3, r7, #8
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f7ff fdc1 	bl	8009a2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 f956 	bl	800a15c <SDMMC_GetCmdResp2>
 8009eb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009eb2:	69fb      	ldr	r3, [r7, #28]
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3720      	adds	r7, #32
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b088      	sub	sp, #32
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009eca:	2309      	movs	r3, #9
 8009ecc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009ece:	23c0      	movs	r3, #192	; 0xc0
 8009ed0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009eda:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009edc:	f107 0308 	add.w	r3, r7, #8
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f7ff fda2 	bl	8009a2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 f937 	bl	800a15c <SDMMC_GetCmdResp2>
 8009eee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ef0:	69fb      	ldr	r3, [r7, #28]
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3720      	adds	r7, #32
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b088      	sub	sp, #32
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
 8009f02:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009f04:	2300      	movs	r3, #0
 8009f06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009f08:	2303      	movs	r3, #3
 8009f0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f0c:	2340      	movs	r3, #64	; 0x40
 8009f0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f10:	2300      	movs	r3, #0
 8009f12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f18:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f1a:	f107 0308 	add.w	r3, r7, #8
 8009f1e:	4619      	mov	r1, r3
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f7ff fd83 	bl	8009a2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009f26:	683a      	ldr	r2, [r7, #0]
 8009f28:	2103      	movs	r1, #3
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 f99c 	bl	800a268 <SDMMC_GetCmdResp6>
 8009f30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f32:	69fb      	ldr	r3, [r7, #28]
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3720      	adds	r7, #32
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b088      	sub	sp, #32
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009f4a:	230d      	movs	r3, #13
 8009f4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f4e:	2340      	movs	r3, #64	; 0x40
 8009f50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f52:	2300      	movs	r3, #0
 8009f54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f5c:	f107 0308 	add.w	r3, r7, #8
 8009f60:	4619      	mov	r1, r3
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f7ff fd62 	bl	8009a2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f6c:	210d      	movs	r1, #13
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 f806 	bl	8009f80 <SDMMC_GetCmdResp1>
 8009f74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f76:	69fb      	ldr	r3, [r7, #28]
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3720      	adds	r7, #32
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b088      	sub	sp, #32
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	60f8      	str	r0, [r7, #12]
 8009f88:	460b      	mov	r3, r1
 8009f8a:	607a      	str	r2, [r7, #4]
 8009f8c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009f8e:	4b70      	ldr	r3, [pc, #448]	; (800a150 <SDMMC_GetCmdResp1+0x1d0>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4a70      	ldr	r2, [pc, #448]	; (800a154 <SDMMC_GetCmdResp1+0x1d4>)
 8009f94:	fba2 2303 	umull	r2, r3, r2, r3
 8009f98:	0a5a      	lsrs	r2, r3, #9
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	fb02 f303 	mul.w	r3, r2, r3
 8009fa0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009fa2:	69fb      	ldr	r3, [r7, #28]
 8009fa4:	1e5a      	subs	r2, r3, #1
 8009fa6:	61fa      	str	r2, [r7, #28]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d102      	bne.n	8009fb2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009fac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009fb0:	e0c9      	b.n	800a146 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fb6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009fb8:	69bb      	ldr	r3, [r7, #24]
 8009fba:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d0ef      	beq.n	8009fa2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009fc2:	69bb      	ldr	r3, [r7, #24]
 8009fc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d1ea      	bne.n	8009fa2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fd0:	f003 0304 	and.w	r3, r3, #4
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d004      	beq.n	8009fe2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2204      	movs	r2, #4
 8009fdc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009fde:	2304      	movs	r3, #4
 8009fe0:	e0b1      	b.n	800a146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fe6:	f003 0301 	and.w	r3, r3, #1
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d004      	beq.n	8009ff8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	e0a6      	b.n	800a146 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	22c5      	movs	r2, #197	; 0xc5
 8009ffc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009ffe:	68f8      	ldr	r0, [r7, #12]
 800a000:	f7ff fd3e 	bl	8009a80 <SDIO_GetCommandResponse>
 800a004:	4603      	mov	r3, r0
 800a006:	461a      	mov	r2, r3
 800a008:	7afb      	ldrb	r3, [r7, #11]
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d001      	beq.n	800a012 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a00e:	2301      	movs	r3, #1
 800a010:	e099      	b.n	800a146 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a012:	2100      	movs	r1, #0
 800a014:	68f8      	ldr	r0, [r7, #12]
 800a016:	f7ff fd40 	bl	8009a9a <SDIO_GetResponse>
 800a01a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a01c:	697a      	ldr	r2, [r7, #20]
 800a01e:	4b4e      	ldr	r3, [pc, #312]	; (800a158 <SDMMC_GetCmdResp1+0x1d8>)
 800a020:	4013      	ands	r3, r2
 800a022:	2b00      	cmp	r3, #0
 800a024:	d101      	bne.n	800a02a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a026:	2300      	movs	r3, #0
 800a028:	e08d      	b.n	800a146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	da02      	bge.n	800a036 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a030:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a034:	e087      	b.n	800a146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d001      	beq.n	800a044 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a040:	2340      	movs	r3, #64	; 0x40
 800a042:	e080      	b.n	800a146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d001      	beq.n	800a052 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a04e:	2380      	movs	r3, #128	; 0x80
 800a050:	e079      	b.n	800a146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d002      	beq.n	800a062 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a05c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a060:	e071      	b.n	800a146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d002      	beq.n	800a072 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a06c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a070:	e069      	b.n	800a146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d002      	beq.n	800a082 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a07c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a080:	e061      	b.n	800a146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d002      	beq.n	800a092 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a08c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a090:	e059      	b.n	800a146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d002      	beq.n	800a0a2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a09c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a0a0:	e051      	b.n	800a146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d002      	beq.n	800a0b2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a0ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a0b0:	e049      	b.n	800a146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d002      	beq.n	800a0c2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a0bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a0c0:	e041      	b.n	800a146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d002      	beq.n	800a0d2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a0cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0d0:	e039      	b.n	800a146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d002      	beq.n	800a0e2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a0dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a0e0:	e031      	b.n	800a146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d002      	beq.n	800a0f2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a0ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a0f0:	e029      	b.n	800a146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d002      	beq.n	800a102 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a0fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a100:	e021      	b.n	800a146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d002      	beq.n	800a112 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a10c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a110:	e019      	b.n	800a146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d002      	beq.n	800a122 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a11c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a120:	e011      	b.n	800a146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d002      	beq.n	800a132 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a12c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a130:	e009      	b.n	800a146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	f003 0308 	and.w	r3, r3, #8
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d002      	beq.n	800a142 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a13c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a140:	e001      	b.n	800a146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a142:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a146:	4618      	mov	r0, r3
 800a148:	3720      	adds	r7, #32
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	20000004 	.word	0x20000004
 800a154:	10624dd3 	.word	0x10624dd3
 800a158:	fdffe008 	.word	0xfdffe008

0800a15c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b085      	sub	sp, #20
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a164:	4b1f      	ldr	r3, [pc, #124]	; (800a1e4 <SDMMC_GetCmdResp2+0x88>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a1f      	ldr	r2, [pc, #124]	; (800a1e8 <SDMMC_GetCmdResp2+0x8c>)
 800a16a:	fba2 2303 	umull	r2, r3, r2, r3
 800a16e:	0a5b      	lsrs	r3, r3, #9
 800a170:	f241 3288 	movw	r2, #5000	; 0x1388
 800a174:	fb02 f303 	mul.w	r3, r2, r3
 800a178:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	1e5a      	subs	r2, r3, #1
 800a17e:	60fa      	str	r2, [r7, #12]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d102      	bne.n	800a18a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a184:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a188:	e026      	b.n	800a1d8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a18e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a196:	2b00      	cmp	r3, #0
 800a198:	d0ef      	beq.n	800a17a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d1ea      	bne.n	800a17a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1a8:	f003 0304 	and.w	r3, r3, #4
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d004      	beq.n	800a1ba <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2204      	movs	r2, #4
 800a1b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a1b6:	2304      	movs	r3, #4
 800a1b8:	e00e      	b.n	800a1d8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1be:	f003 0301 	and.w	r3, r3, #1
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d004      	beq.n	800a1d0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	e003      	b.n	800a1d8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	22c5      	movs	r2, #197	; 0xc5
 800a1d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a1d6:	2300      	movs	r3, #0
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3714      	adds	r7, #20
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr
 800a1e4:	20000004 	.word	0x20000004
 800a1e8:	10624dd3 	.word	0x10624dd3

0800a1ec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b085      	sub	sp, #20
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a1f4:	4b1a      	ldr	r3, [pc, #104]	; (800a260 <SDMMC_GetCmdResp3+0x74>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a1a      	ldr	r2, [pc, #104]	; (800a264 <SDMMC_GetCmdResp3+0x78>)
 800a1fa:	fba2 2303 	umull	r2, r3, r2, r3
 800a1fe:	0a5b      	lsrs	r3, r3, #9
 800a200:	f241 3288 	movw	r2, #5000	; 0x1388
 800a204:	fb02 f303 	mul.w	r3, r2, r3
 800a208:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	1e5a      	subs	r2, r3, #1
 800a20e:	60fa      	str	r2, [r7, #12]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d102      	bne.n	800a21a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a214:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a218:	e01b      	b.n	800a252 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a21e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a226:	2b00      	cmp	r3, #0
 800a228:	d0ef      	beq.n	800a20a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a230:	2b00      	cmp	r3, #0
 800a232:	d1ea      	bne.n	800a20a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a238:	f003 0304 	and.w	r3, r3, #4
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d004      	beq.n	800a24a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2204      	movs	r2, #4
 800a244:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a246:	2304      	movs	r3, #4
 800a248:	e003      	b.n	800a252 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	22c5      	movs	r2, #197	; 0xc5
 800a24e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a250:	2300      	movs	r3, #0
}
 800a252:	4618      	mov	r0, r3
 800a254:	3714      	adds	r7, #20
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr
 800a25e:	bf00      	nop
 800a260:	20000004 	.word	0x20000004
 800a264:	10624dd3 	.word	0x10624dd3

0800a268 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b088      	sub	sp, #32
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	460b      	mov	r3, r1
 800a272:	607a      	str	r2, [r7, #4]
 800a274:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a276:	4b35      	ldr	r3, [pc, #212]	; (800a34c <SDMMC_GetCmdResp6+0xe4>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4a35      	ldr	r2, [pc, #212]	; (800a350 <SDMMC_GetCmdResp6+0xe8>)
 800a27c:	fba2 2303 	umull	r2, r3, r2, r3
 800a280:	0a5b      	lsrs	r3, r3, #9
 800a282:	f241 3288 	movw	r2, #5000	; 0x1388
 800a286:	fb02 f303 	mul.w	r3, r2, r3
 800a28a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a28c:	69fb      	ldr	r3, [r7, #28]
 800a28e:	1e5a      	subs	r2, r3, #1
 800a290:	61fa      	str	r2, [r7, #28]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d102      	bne.n	800a29c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a296:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a29a:	e052      	b.n	800a342 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2a0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a2a2:	69bb      	ldr	r3, [r7, #24]
 800a2a4:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d0ef      	beq.n	800a28c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a2ac:	69bb      	ldr	r3, [r7, #24]
 800a2ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d1ea      	bne.n	800a28c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2ba:	f003 0304 	and.w	r3, r3, #4
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d004      	beq.n	800a2cc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2204      	movs	r2, #4
 800a2c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a2c8:	2304      	movs	r3, #4
 800a2ca:	e03a      	b.n	800a342 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2d0:	f003 0301 	and.w	r3, r3, #1
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d004      	beq.n	800a2e2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	e02f      	b.n	800a342 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a2e2:	68f8      	ldr	r0, [r7, #12]
 800a2e4:	f7ff fbcc 	bl	8009a80 <SDIO_GetCommandResponse>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	7afb      	ldrb	r3, [r7, #11]
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d001      	beq.n	800a2f6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	e025      	b.n	800a342 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	22c5      	movs	r2, #197	; 0xc5
 800a2fa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a2fc:	2100      	movs	r1, #0
 800a2fe:	68f8      	ldr	r0, [r7, #12]
 800a300:	f7ff fbcb 	bl	8009a9a <SDIO_GetResponse>
 800a304:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d106      	bne.n	800a31e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	0c1b      	lsrs	r3, r3, #16
 800a314:	b29a      	uxth	r2, r3
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a31a:	2300      	movs	r3, #0
 800a31c:	e011      	b.n	800a342 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a324:	2b00      	cmp	r3, #0
 800a326:	d002      	beq.n	800a32e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a328:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a32c:	e009      	b.n	800a342 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a334:	2b00      	cmp	r3, #0
 800a336:	d002      	beq.n	800a33e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a33c:	e001      	b.n	800a342 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a33e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a342:	4618      	mov	r0, r3
 800a344:	3720      	adds	r7, #32
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	bf00      	nop
 800a34c:	20000004 	.word	0x20000004
 800a350:	10624dd3 	.word	0x10624dd3

0800a354 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a354:	b480      	push	{r7}
 800a356:	b085      	sub	sp, #20
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a35c:	4b22      	ldr	r3, [pc, #136]	; (800a3e8 <SDMMC_GetCmdResp7+0x94>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a22      	ldr	r2, [pc, #136]	; (800a3ec <SDMMC_GetCmdResp7+0x98>)
 800a362:	fba2 2303 	umull	r2, r3, r2, r3
 800a366:	0a5b      	lsrs	r3, r3, #9
 800a368:	f241 3288 	movw	r2, #5000	; 0x1388
 800a36c:	fb02 f303 	mul.w	r3, r2, r3
 800a370:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	1e5a      	subs	r2, r3, #1
 800a376:	60fa      	str	r2, [r7, #12]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d102      	bne.n	800a382 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a37c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a380:	e02c      	b.n	800a3dc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a386:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d0ef      	beq.n	800a372 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d1ea      	bne.n	800a372 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3a0:	f003 0304 	and.w	r3, r3, #4
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d004      	beq.n	800a3b2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2204      	movs	r2, #4
 800a3ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a3ae:	2304      	movs	r3, #4
 800a3b0:	e014      	b.n	800a3dc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3b6:	f003 0301 	and.w	r3, r3, #1
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d004      	beq.n	800a3c8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	e009      	b.n	800a3dc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d002      	beq.n	800a3da <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2240      	movs	r2, #64	; 0x40
 800a3d8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a3da:	2300      	movs	r3, #0
  
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3714      	adds	r7, #20
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr
 800a3e8:	20000004 	.word	0x20000004
 800a3ec:	10624dd3 	.word	0x10624dd3

0800a3f0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b085      	sub	sp, #20
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a3f8:	4b11      	ldr	r3, [pc, #68]	; (800a440 <SDMMC_GetCmdError+0x50>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a11      	ldr	r2, [pc, #68]	; (800a444 <SDMMC_GetCmdError+0x54>)
 800a3fe:	fba2 2303 	umull	r2, r3, r2, r3
 800a402:	0a5b      	lsrs	r3, r3, #9
 800a404:	f241 3288 	movw	r2, #5000	; 0x1388
 800a408:	fb02 f303 	mul.w	r3, r2, r3
 800a40c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	1e5a      	subs	r2, r3, #1
 800a412:	60fa      	str	r2, [r7, #12]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d102      	bne.n	800a41e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a418:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a41c:	e009      	b.n	800a432 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a426:	2b00      	cmp	r3, #0
 800a428:	d0f1      	beq.n	800a40e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	22c5      	movs	r2, #197	; 0xc5
 800a42e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a430:	2300      	movs	r3, #0
}
 800a432:	4618      	mov	r0, r3
 800a434:	3714      	adds	r7, #20
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr
 800a43e:	bf00      	nop
 800a440:	20000004 	.word	0x20000004
 800a444:	10624dd3 	.word	0x10624dd3

0800a448 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a448:	b084      	sub	sp, #16
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b084      	sub	sp, #16
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
 800a452:	f107 001c 	add.w	r0, r7, #28
 800a456:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a45a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a45e:	2b01      	cmp	r3, #1
 800a460:	d123      	bne.n	800a4aa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a466:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	68db      	ldr	r3, [r3, #12]
 800a472:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a476:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a47a:	687a      	ldr	r2, [r7, #4]
 800a47c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	68db      	ldr	r3, [r3, #12]
 800a482:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a48a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d105      	bne.n	800a49e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	68db      	ldr	r3, [r3, #12]
 800a496:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 f9dc 	bl	800a85c <USB_CoreReset>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	73fb      	strb	r3, [r7, #15]
 800a4a8:	e01b      	b.n	800a4e2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	68db      	ldr	r3, [r3, #12]
 800a4ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f000 f9d0 	bl	800a85c <USB_CoreReset>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a4c0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d106      	bne.n	800a4d6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	639a      	str	r2, [r3, #56]	; 0x38
 800a4d4:	e005      	b.n	800a4e2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a4e2:	7fbb      	ldrb	r3, [r7, #30]
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d10b      	bne.n	800a500 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	f043 0206 	orr.w	r2, r3, #6
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	f043 0220 	orr.w	r2, r3, #32
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a500:	7bfb      	ldrb	r3, [r7, #15]
}
 800a502:	4618      	mov	r0, r3
 800a504:	3710      	adds	r7, #16
 800a506:	46bd      	mov	sp, r7
 800a508:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a50c:	b004      	add	sp, #16
 800a50e:	4770      	bx	lr

0800a510 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a510:	b480      	push	{r7}
 800a512:	b083      	sub	sp, #12
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	689b      	ldr	r3, [r3, #8]
 800a51c:	f043 0201 	orr.w	r2, r3, #1
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a524:	2300      	movs	r3, #0
}
 800a526:	4618      	mov	r0, r3
 800a528:	370c      	adds	r7, #12
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr

0800a532 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a532:	b480      	push	{r7}
 800a534:	b083      	sub	sp, #12
 800a536:	af00      	add	r7, sp, #0
 800a538:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	689b      	ldr	r3, [r3, #8]
 800a53e:	f023 0201 	bic.w	r2, r3, #1
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a546:	2300      	movs	r3, #0
}
 800a548:	4618      	mov	r0, r3
 800a54a:	370c      	adds	r7, #12
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr

0800a554 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	460b      	mov	r3, r1
 800a55e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a560:	2300      	movs	r3, #0
 800a562:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	68db      	ldr	r3, [r3, #12]
 800a568:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a570:	78fb      	ldrb	r3, [r7, #3]
 800a572:	2b01      	cmp	r3, #1
 800a574:	d115      	bne.n	800a5a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	68db      	ldr	r3, [r3, #12]
 800a57a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a582:	200a      	movs	r0, #10
 800a584:	f7f7 fd04 	bl	8001f90 <HAL_Delay>
      ms += 10U;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	330a      	adds	r3, #10
 800a58c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 f956 	bl	800a840 <USB_GetMode>
 800a594:	4603      	mov	r3, r0
 800a596:	2b01      	cmp	r3, #1
 800a598:	d01e      	beq.n	800a5d8 <USB_SetCurrentMode+0x84>
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	2bc7      	cmp	r3, #199	; 0xc7
 800a59e:	d9f0      	bls.n	800a582 <USB_SetCurrentMode+0x2e>
 800a5a0:	e01a      	b.n	800a5d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a5a2:	78fb      	ldrb	r3, [r7, #3]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d115      	bne.n	800a5d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	68db      	ldr	r3, [r3, #12]
 800a5ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a5b4:	200a      	movs	r0, #10
 800a5b6:	f7f7 fceb 	bl	8001f90 <HAL_Delay>
      ms += 10U;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	330a      	adds	r3, #10
 800a5be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f000 f93d 	bl	800a840 <USB_GetMode>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d005      	beq.n	800a5d8 <USB_SetCurrentMode+0x84>
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2bc7      	cmp	r3, #199	; 0xc7
 800a5d0:	d9f0      	bls.n	800a5b4 <USB_SetCurrentMode+0x60>
 800a5d2:	e001      	b.n	800a5d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	e005      	b.n	800a5e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2bc8      	cmp	r3, #200	; 0xc8
 800a5dc:	d101      	bne.n	800a5e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	e000      	b.n	800a5e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a5e2:	2300      	movs	r3, #0
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3710      	adds	r7, #16
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b085      	sub	sp, #20
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800a606:	d901      	bls.n	800a60c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a608:	2303      	movs	r3, #3
 800a60a:	e01b      	b.n	800a644 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	691b      	ldr	r3, [r3, #16]
 800a610:	2b00      	cmp	r3, #0
 800a612:	daf2      	bge.n	800a5fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a614:	2300      	movs	r3, #0
 800a616:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	019b      	lsls	r3, r3, #6
 800a61c:	f043 0220 	orr.w	r2, r3, #32
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	3301      	adds	r3, #1
 800a628:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800a630:	d901      	bls.n	800a636 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a632:	2303      	movs	r3, #3
 800a634:	e006      	b.n	800a644 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	691b      	ldr	r3, [r3, #16]
 800a63a:	f003 0320 	and.w	r3, r3, #32
 800a63e:	2b20      	cmp	r3, #32
 800a640:	d0f0      	beq.n	800a624 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a642:	2300      	movs	r3, #0
}
 800a644:	4618      	mov	r0, r3
 800a646:	3714      	adds	r7, #20
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr

0800a650 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a650:	b480      	push	{r7}
 800a652:	b085      	sub	sp, #20
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a658:	2300      	movs	r3, #0
 800a65a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	3301      	adds	r3, #1
 800a660:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800a668:	d901      	bls.n	800a66e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a66a:	2303      	movs	r3, #3
 800a66c:	e018      	b.n	800a6a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	691b      	ldr	r3, [r3, #16]
 800a672:	2b00      	cmp	r3, #0
 800a674:	daf2      	bge.n	800a65c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a676:	2300      	movs	r3, #0
 800a678:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2210      	movs	r2, #16
 800a67e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	3301      	adds	r3, #1
 800a684:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800a68c:	d901      	bls.n	800a692 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a68e:	2303      	movs	r3, #3
 800a690:	e006      	b.n	800a6a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	691b      	ldr	r3, [r3, #16]
 800a696:	f003 0310 	and.w	r3, r3, #16
 800a69a:	2b10      	cmp	r3, #16
 800a69c:	d0f0      	beq.n	800a680 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a69e:	2300      	movs	r3, #0
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3714      	adds	r7, #20
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr

0800a6ac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b089      	sub	sp, #36	; 0x24
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	60f8      	str	r0, [r7, #12]
 800a6b4:	60b9      	str	r1, [r7, #8]
 800a6b6:	4611      	mov	r1, r2
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	460b      	mov	r3, r1
 800a6bc:	71fb      	strb	r3, [r7, #7]
 800a6be:	4613      	mov	r3, r2
 800a6c0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a6ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d123      	bne.n	800a71a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a6d2:	88bb      	ldrh	r3, [r7, #4]
 800a6d4:	3303      	adds	r3, #3
 800a6d6:	089b      	lsrs	r3, r3, #2
 800a6d8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a6da:	2300      	movs	r3, #0
 800a6dc:	61bb      	str	r3, [r7, #24]
 800a6de:	e018      	b.n	800a712 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a6e0:	79fb      	ldrb	r3, [r7, #7]
 800a6e2:	031a      	lsls	r2, r3, #12
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	69fb      	ldr	r3, [r7, #28]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a6f4:	69fb      	ldr	r3, [r7, #28]
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a6fa:	69fb      	ldr	r3, [r7, #28]
 800a6fc:	3301      	adds	r3, #1
 800a6fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a700:	69fb      	ldr	r3, [r7, #28]
 800a702:	3301      	adds	r3, #1
 800a704:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a706:	69fb      	ldr	r3, [r7, #28]
 800a708:	3301      	adds	r3, #1
 800a70a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a70c:	69bb      	ldr	r3, [r7, #24]
 800a70e:	3301      	adds	r3, #1
 800a710:	61bb      	str	r3, [r7, #24]
 800a712:	69ba      	ldr	r2, [r7, #24]
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	429a      	cmp	r2, r3
 800a718:	d3e2      	bcc.n	800a6e0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a71a:	2300      	movs	r3, #0
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3724      	adds	r7, #36	; 0x24
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr

0800a728 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a728:	b480      	push	{r7}
 800a72a:	b08b      	sub	sp, #44	; 0x2c
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	60f8      	str	r0, [r7, #12]
 800a730:	60b9      	str	r1, [r7, #8]
 800a732:	4613      	mov	r3, r2
 800a734:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a73e:	88fb      	ldrh	r3, [r7, #6]
 800a740:	089b      	lsrs	r3, r3, #2
 800a742:	b29b      	uxth	r3, r3
 800a744:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a746:	88fb      	ldrh	r3, [r7, #6]
 800a748:	f003 0303 	and.w	r3, r3, #3
 800a74c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a74e:	2300      	movs	r3, #0
 800a750:	623b      	str	r3, [r7, #32]
 800a752:	e014      	b.n	800a77e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a754:	69bb      	ldr	r3, [r7, #24]
 800a756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75e:	601a      	str	r2, [r3, #0]
    pDest++;
 800a760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a762:	3301      	adds	r3, #1
 800a764:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a768:	3301      	adds	r3, #1
 800a76a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76e:	3301      	adds	r3, #1
 800a770:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a774:	3301      	adds	r3, #1
 800a776:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a778:	6a3b      	ldr	r3, [r7, #32]
 800a77a:	3301      	adds	r3, #1
 800a77c:	623b      	str	r3, [r7, #32]
 800a77e:	6a3a      	ldr	r2, [r7, #32]
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	429a      	cmp	r2, r3
 800a784:	d3e6      	bcc.n	800a754 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a786:	8bfb      	ldrh	r3, [r7, #30]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d01e      	beq.n	800a7ca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a78c:	2300      	movs	r3, #0
 800a78e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a790:	69bb      	ldr	r3, [r7, #24]
 800a792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a796:	461a      	mov	r2, r3
 800a798:	f107 0310 	add.w	r3, r7, #16
 800a79c:	6812      	ldr	r2, [r2, #0]
 800a79e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a7a0:	693a      	ldr	r2, [r7, #16]
 800a7a2:	6a3b      	ldr	r3, [r7, #32]
 800a7a4:	b2db      	uxtb	r3, r3
 800a7a6:	00db      	lsls	r3, r3, #3
 800a7a8:	fa22 f303 	lsr.w	r3, r2, r3
 800a7ac:	b2da      	uxtb	r2, r3
 800a7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b0:	701a      	strb	r2, [r3, #0]
      i++;
 800a7b2:	6a3b      	ldr	r3, [r7, #32]
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	623b      	str	r3, [r7, #32]
      pDest++;
 800a7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a7be:	8bfb      	ldrh	r3, [r7, #30]
 800a7c0:	3b01      	subs	r3, #1
 800a7c2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a7c4:	8bfb      	ldrh	r3, [r7, #30]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d1ea      	bne.n	800a7a0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	372c      	adds	r7, #44	; 0x2c
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b085      	sub	sp, #20
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	695b      	ldr	r3, [r3, #20]
 800a7e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	699b      	ldr	r3, [r3, #24]
 800a7ea:	68fa      	ldr	r2, [r7, #12]
 800a7ec:	4013      	ands	r3, r2
 800a7ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3714      	adds	r7, #20
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr

0800a7fe <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800a7fe:	b480      	push	{r7}
 800a800:	b085      	sub	sp, #20
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
 800a806:	460b      	mov	r3, r1
 800a808:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800a80e:	78fb      	ldrb	r3, [r7, #3]
 800a810:	015a      	lsls	r2, r3, #5
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	4413      	add	r3, r2
 800a816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a81a:	689b      	ldr	r3, [r3, #8]
 800a81c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800a81e:	78fb      	ldrb	r3, [r7, #3]
 800a820:	015a      	lsls	r2, r3, #5
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	4413      	add	r3, r2
 800a826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a82a:	68db      	ldr	r3, [r3, #12]
 800a82c:	68ba      	ldr	r2, [r7, #8]
 800a82e:	4013      	ands	r3, r2
 800a830:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a832:	68bb      	ldr	r3, [r7, #8]
}
 800a834:	4618      	mov	r0, r3
 800a836:	3714      	adds	r7, #20
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr

0800a840 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a840:	b480      	push	{r7}
 800a842:	b083      	sub	sp, #12
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	695b      	ldr	r3, [r3, #20]
 800a84c:	f003 0301 	and.w	r3, r3, #1
}
 800a850:	4618      	mov	r0, r3
 800a852:	370c      	adds	r7, #12
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b085      	sub	sp, #20
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a864:	2300      	movs	r3, #0
 800a866:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	3301      	adds	r3, #1
 800a86c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800a874:	d901      	bls.n	800a87a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a876:	2303      	movs	r3, #3
 800a878:	e01b      	b.n	800a8b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	691b      	ldr	r3, [r3, #16]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	daf2      	bge.n	800a868 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a882:	2300      	movs	r3, #0
 800a884:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	691b      	ldr	r3, [r3, #16]
 800a88a:	f043 0201 	orr.w	r2, r3, #1
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	3301      	adds	r3, #1
 800a896:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800a89e:	d901      	bls.n	800a8a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a8a0:	2303      	movs	r3, #3
 800a8a2:	e006      	b.n	800a8b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	691b      	ldr	r3, [r3, #16]
 800a8a8:	f003 0301 	and.w	r3, r3, #1
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d0f0      	beq.n	800a892 <USB_CoreReset+0x36>

  return HAL_OK;
 800a8b0:	2300      	movs	r3, #0
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3714      	adds	r7, #20
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr
	...

0800a8c0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a8c0:	b084      	sub	sp, #16
 800a8c2:	b580      	push	{r7, lr}
 800a8c4:	b086      	sub	sp, #24
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	6078      	str	r0, [r7, #4]
 800a8ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a8ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ea:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	68db      	ldr	r3, [r3, #12]
 800a8f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d119      	bne.n	800a932 <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a8fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a902:	2b01      	cmp	r3, #1
 800a904:	d10a      	bne.n	800a91c <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	68fa      	ldr	r2, [r7, #12]
 800a910:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a914:	f043 0304 	orr.w	r3, r3, #4
 800a918:	6013      	str	r3, [r2, #0]
 800a91a:	e014      	b.n	800a946 <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	68fa      	ldr	r2, [r7, #12]
 800a926:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a92a:	f023 0304 	bic.w	r3, r3, #4
 800a92e:	6013      	str	r3, [r2, #0]
 800a930:	e009      	b.n	800a946 <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	68fa      	ldr	r2, [r7, #12]
 800a93c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a940:	f023 0304 	bic.w	r3, r3, #4
 800a944:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a946:	2110      	movs	r1, #16
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f7ff fe4f 	bl	800a5ec <USB_FlushTxFifo>
 800a94e:	4603      	mov	r3, r0
 800a950:	2b00      	cmp	r3, #0
 800a952:	d001      	beq.n	800a958 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 800a954:	2301      	movs	r3, #1
 800a956:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f7ff fe79 	bl	800a650 <USB_FlushRxFifo>
 800a95e:	4603      	mov	r3, r0
 800a960:	2b00      	cmp	r3, #0
 800a962:	d001      	beq.n	800a968 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 800a964:	2301      	movs	r3, #1
 800a966:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a968:	2300      	movs	r3, #0
 800a96a:	613b      	str	r3, [r7, #16]
 800a96c:	e015      	b.n	800a99a <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	015a      	lsls	r2, r3, #5
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	4413      	add	r3, r2
 800a976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a97a:	461a      	mov	r2, r3
 800a97c:	f04f 33ff 	mov.w	r3, #4294967295
 800a980:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	015a      	lsls	r2, r3, #5
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	4413      	add	r3, r2
 800a98a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a98e:	461a      	mov	r2, r3
 800a990:	2300      	movs	r3, #0
 800a992:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	3301      	adds	r3, #1
 800a998:	613b      	str	r3, [r7, #16]
 800a99a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a99e:	461a      	mov	r2, r3
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d3e3      	bcc.n	800a96e <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a9b2:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	4a18      	ldr	r2, [pc, #96]	; (800aa18 <USB_HostInit+0x158>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d10b      	bne.n	800a9d4 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a9c2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	4a15      	ldr	r2, [pc, #84]	; (800aa1c <USB_HostInit+0x15c>)
 800a9c8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	4a14      	ldr	r2, [pc, #80]	; (800aa20 <USB_HostInit+0x160>)
 800a9ce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800a9d2:	e009      	b.n	800a9e8 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2280      	movs	r2, #128	; 0x80
 800a9d8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	4a11      	ldr	r2, [pc, #68]	; (800aa24 <USB_HostInit+0x164>)
 800a9de:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	4a11      	ldr	r2, [pc, #68]	; (800aa28 <USB_HostInit+0x168>)
 800a9e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a9e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d105      	bne.n	800a9fc <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	699b      	ldr	r3, [r3, #24]
 800a9f4:	f043 0210 	orr.w	r2, r3, #16
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	699a      	ldr	r2, [r3, #24]
 800aa00:	4b0a      	ldr	r3, [pc, #40]	; (800aa2c <USB_HostInit+0x16c>)
 800aa02:	4313      	orrs	r3, r2
 800aa04:	687a      	ldr	r2, [r7, #4]
 800aa06:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800aa08:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3718      	adds	r7, #24
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aa14:	b004      	add	sp, #16
 800aa16:	4770      	bx	lr
 800aa18:	40040000 	.word	0x40040000
 800aa1c:	01000200 	.word	0x01000200
 800aa20:	00e00300 	.word	0x00e00300
 800aa24:	00600080 	.word	0x00600080
 800aa28:	004000e0 	.word	0x004000e0
 800aa2c:	a3200008 	.word	0xa3200008

0800aa30 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b085      	sub	sp, #20
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	460b      	mov	r3, r1
 800aa3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	68fa      	ldr	r2, [r7, #12]
 800aa4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa4e:	f023 0303 	bic.w	r3, r3, #3
 800aa52:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	78fb      	ldrb	r3, [r7, #3]
 800aa5e:	f003 0303 	and.w	r3, r3, #3
 800aa62:	68f9      	ldr	r1, [r7, #12]
 800aa64:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800aa6c:	78fb      	ldrb	r3, [r7, #3]
 800aa6e:	2b01      	cmp	r3, #1
 800aa70:	d107      	bne.n	800aa82 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa78:	461a      	mov	r2, r3
 800aa7a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800aa7e:	6053      	str	r3, [r2, #4]
 800aa80:	e00c      	b.n	800aa9c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800aa82:	78fb      	ldrb	r3, [r7, #3]
 800aa84:	2b02      	cmp	r3, #2
 800aa86:	d107      	bne.n	800aa98 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa8e:	461a      	mov	r2, r3
 800aa90:	f241 7370 	movw	r3, #6000	; 0x1770
 800aa94:	6053      	str	r3, [r2, #4]
 800aa96:	e001      	b.n	800aa9c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	e000      	b.n	800aa9e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800aa9c:	2300      	movs	r3, #0
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3714      	adds	r7, #20
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr

0800aaaa <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800aaaa:	b580      	push	{r7, lr}
 800aaac:	b084      	sub	sp, #16
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800aab6:	2300      	movs	r3, #0
 800aab8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800aaca:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	68fa      	ldr	r2, [r7, #12]
 800aad0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800aad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aad8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800aada:	2064      	movs	r0, #100	; 0x64
 800aadc:	f7f7 fa58 	bl	8001f90 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	68fa      	ldr	r2, [r7, #12]
 800aae4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800aae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aaec:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800aaee:	200a      	movs	r0, #10
 800aaf0:	f7f7 fa4e 	bl	8001f90 <HAL_Delay>

  return HAL_OK;
 800aaf4:	2300      	movs	r3, #0
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3710      	adds	r7, #16
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}

0800aafe <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800aafe:	b480      	push	{r7}
 800ab00:	b085      	sub	sp, #20
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
 800ab06:	460b      	mov	r3, r1
 800ab08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800ab22:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d109      	bne.n	800ab42 <USB_DriveVbus+0x44>
 800ab2e:	78fb      	ldrb	r3, [r7, #3]
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	d106      	bne.n	800ab42 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	68fa      	ldr	r2, [r7, #12]
 800ab38:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ab3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ab40:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ab48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab4c:	d109      	bne.n	800ab62 <USB_DriveVbus+0x64>
 800ab4e:	78fb      	ldrb	r3, [r7, #3]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d106      	bne.n	800ab62 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	68fa      	ldr	r2, [r7, #12]
 800ab58:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ab5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab60:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800ab62:	2300      	movs	r3, #0
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3714      	adds	r7, #20
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr

0800ab70 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b085      	sub	sp, #20
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	0c5b      	lsrs	r3, r3, #17
 800ab8e:	f003 0303 	and.w	r3, r3, #3
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3714      	adds	r7, #20
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr

0800ab9e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800ab9e:	b480      	push	{r7}
 800aba0:	b085      	sub	sp, #20
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800abb0:	689b      	ldr	r3, [r3, #8]
 800abb2:	b29b      	uxth	r3, r3
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3714      	adds	r7, #20
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr

0800abc0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b088      	sub	sp, #32
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
 800abc8:	4608      	mov	r0, r1
 800abca:	4611      	mov	r1, r2
 800abcc:	461a      	mov	r2, r3
 800abce:	4603      	mov	r3, r0
 800abd0:	70fb      	strb	r3, [r7, #3]
 800abd2:	460b      	mov	r3, r1
 800abd4:	70bb      	strb	r3, [r7, #2]
 800abd6:	4613      	mov	r3, r2
 800abd8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800abda:	2300      	movs	r3, #0
 800abdc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800abe2:	78fb      	ldrb	r3, [r7, #3]
 800abe4:	015a      	lsls	r2, r3, #5
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	4413      	add	r3, r2
 800abea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abee:	461a      	mov	r2, r3
 800abf0:	f04f 33ff 	mov.w	r3, #4294967295
 800abf4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800abf6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800abfa:	2b03      	cmp	r3, #3
 800abfc:	d87c      	bhi.n	800acf8 <USB_HC_Init+0x138>
 800abfe:	a201      	add	r2, pc, #4	; (adr r2, 800ac04 <USB_HC_Init+0x44>)
 800ac00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac04:	0800ac15 	.word	0x0800ac15
 800ac08:	0800acbb 	.word	0x0800acbb
 800ac0c:	0800ac15 	.word	0x0800ac15
 800ac10:	0800ac7d 	.word	0x0800ac7d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ac14:	78fb      	ldrb	r3, [r7, #3]
 800ac16:	015a      	lsls	r2, r3, #5
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	4413      	add	r3, r2
 800ac1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac20:	461a      	mov	r2, r3
 800ac22:	f240 439d 	movw	r3, #1181	; 0x49d
 800ac26:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800ac28:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	da10      	bge.n	800ac52 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ac30:	78fb      	ldrb	r3, [r7, #3]
 800ac32:	015a      	lsls	r2, r3, #5
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	4413      	add	r3, r2
 800ac38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac3c:	68db      	ldr	r3, [r3, #12]
 800ac3e:	78fa      	ldrb	r2, [r7, #3]
 800ac40:	0151      	lsls	r1, r2, #5
 800ac42:	693a      	ldr	r2, [r7, #16]
 800ac44:	440a      	add	r2, r1
 800ac46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac4e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800ac50:	e055      	b.n	800acfe <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	4a6f      	ldr	r2, [pc, #444]	; (800ae14 <USB_HC_Init+0x254>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d151      	bne.n	800acfe <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800ac5a:	78fb      	ldrb	r3, [r7, #3]
 800ac5c:	015a      	lsls	r2, r3, #5
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	4413      	add	r3, r2
 800ac62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac66:	68db      	ldr	r3, [r3, #12]
 800ac68:	78fa      	ldrb	r2, [r7, #3]
 800ac6a:	0151      	lsls	r1, r2, #5
 800ac6c:	693a      	ldr	r2, [r7, #16]
 800ac6e:	440a      	add	r2, r1
 800ac70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac74:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ac78:	60d3      	str	r3, [r2, #12]
      break;
 800ac7a:	e040      	b.n	800acfe <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ac7c:	78fb      	ldrb	r3, [r7, #3]
 800ac7e:	015a      	lsls	r2, r3, #5
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	4413      	add	r3, r2
 800ac84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac88:	461a      	mov	r2, r3
 800ac8a:	f240 639d 	movw	r3, #1693	; 0x69d
 800ac8e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ac90:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	da34      	bge.n	800ad02 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ac98:	78fb      	ldrb	r3, [r7, #3]
 800ac9a:	015a      	lsls	r2, r3, #5
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	4413      	add	r3, r2
 800aca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aca4:	68db      	ldr	r3, [r3, #12]
 800aca6:	78fa      	ldrb	r2, [r7, #3]
 800aca8:	0151      	lsls	r1, r2, #5
 800acaa:	693a      	ldr	r2, [r7, #16]
 800acac:	440a      	add	r2, r1
 800acae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800acb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acb6:	60d3      	str	r3, [r2, #12]
      }

      break;
 800acb8:	e023      	b.n	800ad02 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800acba:	78fb      	ldrb	r3, [r7, #3]
 800acbc:	015a      	lsls	r2, r3, #5
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	4413      	add	r3, r2
 800acc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acc6:	461a      	mov	r2, r3
 800acc8:	f240 2325 	movw	r3, #549	; 0x225
 800accc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800acce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	da17      	bge.n	800ad06 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800acd6:	78fb      	ldrb	r3, [r7, #3]
 800acd8:	015a      	lsls	r2, r3, #5
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	4413      	add	r3, r2
 800acde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	78fa      	ldrb	r2, [r7, #3]
 800ace6:	0151      	lsls	r1, r2, #5
 800ace8:	693a      	ldr	r2, [r7, #16]
 800acea:	440a      	add	r2, r1
 800acec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800acf0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800acf4:	60d3      	str	r3, [r2, #12]
      }
      break;
 800acf6:	e006      	b.n	800ad06 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800acf8:	2301      	movs	r3, #1
 800acfa:	77fb      	strb	r3, [r7, #31]
      break;
 800acfc:	e004      	b.n	800ad08 <USB_HC_Init+0x148>
      break;
 800acfe:	bf00      	nop
 800ad00:	e002      	b.n	800ad08 <USB_HC_Init+0x148>
      break;
 800ad02:	bf00      	nop
 800ad04:	e000      	b.n	800ad08 <USB_HC_Init+0x148>
      break;
 800ad06:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800ad08:	78fb      	ldrb	r3, [r7, #3]
 800ad0a:	015a      	lsls	r2, r3, #5
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	4413      	add	r3, r2
 800ad10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad14:	461a      	mov	r2, r3
 800ad16:	2300      	movs	r3, #0
 800ad18:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800ad1a:	78fb      	ldrb	r3, [r7, #3]
 800ad1c:	015a      	lsls	r2, r3, #5
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	4413      	add	r3, r2
 800ad22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad26:	68db      	ldr	r3, [r3, #12]
 800ad28:	78fa      	ldrb	r2, [r7, #3]
 800ad2a:	0151      	lsls	r1, r2, #5
 800ad2c:	693a      	ldr	r2, [r7, #16]
 800ad2e:	440a      	add	r2, r1
 800ad30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad34:	f043 0302 	orr.w	r3, r3, #2
 800ad38:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad40:	699a      	ldr	r2, [r3, #24]
 800ad42:	78fb      	ldrb	r3, [r7, #3]
 800ad44:	f003 030f 	and.w	r3, r3, #15
 800ad48:	2101      	movs	r1, #1
 800ad4a:	fa01 f303 	lsl.w	r3, r1, r3
 800ad4e:	6939      	ldr	r1, [r7, #16]
 800ad50:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ad54:	4313      	orrs	r3, r2
 800ad56:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	699b      	ldr	r3, [r3, #24]
 800ad5c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800ad64:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	da03      	bge.n	800ad74 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800ad6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad70:	61bb      	str	r3, [r7, #24]
 800ad72:	e001      	b.n	800ad78 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800ad74:	2300      	movs	r3, #0
 800ad76:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f7ff fef9 	bl	800ab70 <USB_GetHostSpeed>
 800ad7e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800ad80:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ad84:	2b02      	cmp	r3, #2
 800ad86:	d106      	bne.n	800ad96 <USB_HC_Init+0x1d6>
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	2b02      	cmp	r3, #2
 800ad8c:	d003      	beq.n	800ad96 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800ad8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ad92:	617b      	str	r3, [r7, #20]
 800ad94:	e001      	b.n	800ad9a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800ad96:	2300      	movs	r3, #0
 800ad98:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ad9a:	787b      	ldrb	r3, [r7, #1]
 800ad9c:	059b      	lsls	r3, r3, #22
 800ad9e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ada2:	78bb      	ldrb	r3, [r7, #2]
 800ada4:	02db      	lsls	r3, r3, #11
 800ada6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800adaa:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800adac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800adb0:	049b      	lsls	r3, r3, #18
 800adb2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800adb6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800adb8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800adba:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800adbe:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800adc0:	69bb      	ldr	r3, [r7, #24]
 800adc2:	431a      	orrs	r2, r3
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800adc8:	78fa      	ldrb	r2, [r7, #3]
 800adca:	0151      	lsls	r1, r2, #5
 800adcc:	693a      	ldr	r2, [r7, #16]
 800adce:	440a      	add	r2, r1
 800add0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800add4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800add8:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800adda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800adde:	2b03      	cmp	r3, #3
 800ade0:	d003      	beq.n	800adea <USB_HC_Init+0x22a>
 800ade2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ade6:	2b01      	cmp	r3, #1
 800ade8:	d10f      	bne.n	800ae0a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800adea:	78fb      	ldrb	r3, [r7, #3]
 800adec:	015a      	lsls	r2, r3, #5
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	4413      	add	r3, r2
 800adf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	78fa      	ldrb	r2, [r7, #3]
 800adfa:	0151      	lsls	r1, r2, #5
 800adfc:	693a      	ldr	r2, [r7, #16]
 800adfe:	440a      	add	r2, r1
 800ae00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ae08:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800ae0a:	7ffb      	ldrb	r3, [r7, #31]
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3720      	adds	r7, #32
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}
 800ae14:	40040000 	.word	0x40040000

0800ae18 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b08c      	sub	sp, #48	; 0x30
 800ae1c:	af02      	add	r7, sp, #8
 800ae1e:	60f8      	str	r0, [r7, #12]
 800ae20:	60b9      	str	r1, [r7, #8]
 800ae22:	4613      	mov	r3, r2
 800ae24:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	785b      	ldrb	r3, [r3, #1]
 800ae2e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800ae30:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae34:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	4a5d      	ldr	r2, [pc, #372]	; (800afb0 <USB_HC_StartXfer+0x198>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d12f      	bne.n	800ae9e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800ae3e:	79fb      	ldrb	r3, [r7, #7]
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d11c      	bne.n	800ae7e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	7c9b      	ldrb	r3, [r3, #18]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d003      	beq.n	800ae54 <USB_HC_StartXfer+0x3c>
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	7c9b      	ldrb	r3, [r3, #18]
 800ae50:	2b02      	cmp	r3, #2
 800ae52:	d124      	bne.n	800ae9e <USB_HC_StartXfer+0x86>
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	799b      	ldrb	r3, [r3, #6]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d120      	bne.n	800ae9e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800ae5c:	69fb      	ldr	r3, [r7, #28]
 800ae5e:	015a      	lsls	r2, r3, #5
 800ae60:	6a3b      	ldr	r3, [r7, #32]
 800ae62:	4413      	add	r3, r2
 800ae64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae68:	68db      	ldr	r3, [r3, #12]
 800ae6a:	69fa      	ldr	r2, [r7, #28]
 800ae6c:	0151      	lsls	r1, r2, #5
 800ae6e:	6a3a      	ldr	r2, [r7, #32]
 800ae70:	440a      	add	r2, r1
 800ae72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae7a:	60d3      	str	r3, [r2, #12]
 800ae7c:	e00f      	b.n	800ae9e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	791b      	ldrb	r3, [r3, #4]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d10b      	bne.n	800ae9e <USB_HC_StartXfer+0x86>
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	795b      	ldrb	r3, [r3, #5]
 800ae8a:	2b01      	cmp	r3, #1
 800ae8c:	d107      	bne.n	800ae9e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	785b      	ldrb	r3, [r3, #1]
 800ae92:	4619      	mov	r1, r3
 800ae94:	68f8      	ldr	r0, [r7, #12]
 800ae96:	f000 fb6b 	bl	800b570 <USB_DoPing>
        return HAL_OK;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	e232      	b.n	800b304 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	799b      	ldrb	r3, [r3, #6]
 800aea2:	2b01      	cmp	r3, #1
 800aea4:	d158      	bne.n	800af58 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800aea6:	2301      	movs	r3, #1
 800aea8:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	78db      	ldrb	r3, [r3, #3]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d007      	beq.n	800aec2 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800aeb2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aeb4:	68ba      	ldr	r2, [r7, #8]
 800aeb6:	8a92      	ldrh	r2, [r2, #20]
 800aeb8:	fb03 f202 	mul.w	r2, r3, r2
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	61da      	str	r2, [r3, #28]
 800aec0:	e07c      	b.n	800afbc <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	7c9b      	ldrb	r3, [r3, #18]
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	d130      	bne.n	800af2c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	6a1b      	ldr	r3, [r3, #32]
 800aece:	2bbc      	cmp	r3, #188	; 0xbc
 800aed0:	d918      	bls.n	800af04 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	8a9b      	ldrh	r3, [r3, #20]
 800aed6:	461a      	mov	r2, r3
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	69da      	ldr	r2, [r3, #28]
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	68db      	ldr	r3, [r3, #12]
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d003      	beq.n	800aef4 <USB_HC_StartXfer+0xdc>
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	68db      	ldr	r3, [r3, #12]
 800aef0:	2b02      	cmp	r3, #2
 800aef2:	d103      	bne.n	800aefc <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	2202      	movs	r2, #2
 800aef8:	60da      	str	r2, [r3, #12]
 800aefa:	e05f      	b.n	800afbc <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	2201      	movs	r2, #1
 800af00:	60da      	str	r2, [r3, #12]
 800af02:	e05b      	b.n	800afbc <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	6a1a      	ldr	r2, [r3, #32]
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	68db      	ldr	r3, [r3, #12]
 800af10:	2b01      	cmp	r3, #1
 800af12:	d007      	beq.n	800af24 <USB_HC_StartXfer+0x10c>
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	68db      	ldr	r3, [r3, #12]
 800af18:	2b02      	cmp	r3, #2
 800af1a:	d003      	beq.n	800af24 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	2204      	movs	r2, #4
 800af20:	60da      	str	r2, [r3, #12]
 800af22:	e04b      	b.n	800afbc <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	2203      	movs	r2, #3
 800af28:	60da      	str	r2, [r3, #12]
 800af2a:	e047      	b.n	800afbc <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800af2c:	79fb      	ldrb	r3, [r7, #7]
 800af2e:	2b01      	cmp	r3, #1
 800af30:	d10d      	bne.n	800af4e <USB_HC_StartXfer+0x136>
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	6a1b      	ldr	r3, [r3, #32]
 800af36:	68ba      	ldr	r2, [r7, #8]
 800af38:	8a92      	ldrh	r2, [r2, #20]
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d907      	bls.n	800af4e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800af3e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800af40:	68ba      	ldr	r2, [r7, #8]
 800af42:	8a92      	ldrh	r2, [r2, #20]
 800af44:	fb03 f202 	mul.w	r2, r3, r2
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	61da      	str	r2, [r3, #28]
 800af4c:	e036      	b.n	800afbc <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	6a1a      	ldr	r2, [r3, #32]
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	61da      	str	r2, [r3, #28]
 800af56:	e031      	b.n	800afbc <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	6a1b      	ldr	r3, [r3, #32]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d018      	beq.n	800af92 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	6a1b      	ldr	r3, [r3, #32]
 800af64:	68ba      	ldr	r2, [r7, #8]
 800af66:	8a92      	ldrh	r2, [r2, #20]
 800af68:	4413      	add	r3, r2
 800af6a:	3b01      	subs	r3, #1
 800af6c:	68ba      	ldr	r2, [r7, #8]
 800af6e:	8a92      	ldrh	r2, [r2, #20]
 800af70:	fbb3 f3f2 	udiv	r3, r3, r2
 800af74:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 800af76:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800af78:	8b7b      	ldrh	r3, [r7, #26]
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d90b      	bls.n	800af96 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800af7e:	8b7b      	ldrh	r3, [r7, #26]
 800af80:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800af82:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800af84:	68ba      	ldr	r2, [r7, #8]
 800af86:	8a92      	ldrh	r2, [r2, #20]
 800af88:	fb03 f202 	mul.w	r2, r3, r2
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	61da      	str	r2, [r3, #28]
 800af90:	e001      	b.n	800af96 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800af92:	2301      	movs	r3, #1
 800af94:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	78db      	ldrb	r3, [r3, #3]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d00a      	beq.n	800afb4 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800af9e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800afa0:	68ba      	ldr	r2, [r7, #8]
 800afa2:	8a92      	ldrh	r2, [r2, #20]
 800afa4:	fb03 f202 	mul.w	r2, r3, r2
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	61da      	str	r2, [r3, #28]
 800afac:	e006      	b.n	800afbc <USB_HC_StartXfer+0x1a4>
 800afae:	bf00      	nop
 800afb0:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	6a1a      	ldr	r2, [r3, #32]
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	69db      	ldr	r3, [r3, #28]
 800afc0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800afc4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800afc6:	04d9      	lsls	r1, r3, #19
 800afc8:	4ba3      	ldr	r3, [pc, #652]	; (800b258 <USB_HC_StartXfer+0x440>)
 800afca:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800afcc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	7d9b      	ldrb	r3, [r3, #22]
 800afd2:	075b      	lsls	r3, r3, #29
 800afd4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800afd8:	69f9      	ldr	r1, [r7, #28]
 800afda:	0148      	lsls	r0, r1, #5
 800afdc:	6a39      	ldr	r1, [r7, #32]
 800afde:	4401      	add	r1, r0
 800afe0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800afe4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800afe6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800afe8:	79fb      	ldrb	r3, [r7, #7]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d009      	beq.n	800b002 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	6999      	ldr	r1, [r3, #24]
 800aff2:	69fb      	ldr	r3, [r7, #28]
 800aff4:	015a      	lsls	r2, r3, #5
 800aff6:	6a3b      	ldr	r3, [r7, #32]
 800aff8:	4413      	add	r3, r2
 800affa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800affe:	460a      	mov	r2, r1
 800b000:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800b002:	6a3b      	ldr	r3, [r7, #32]
 800b004:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b008:	689b      	ldr	r3, [r3, #8]
 800b00a:	f003 0301 	and.w	r3, r3, #1
 800b00e:	2b00      	cmp	r3, #0
 800b010:	bf0c      	ite	eq
 800b012:	2301      	moveq	r3, #1
 800b014:	2300      	movne	r3, #0
 800b016:	b2db      	uxtb	r3, r3
 800b018:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800b01a:	69fb      	ldr	r3, [r7, #28]
 800b01c:	015a      	lsls	r2, r3, #5
 800b01e:	6a3b      	ldr	r3, [r7, #32]
 800b020:	4413      	add	r3, r2
 800b022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	69fa      	ldr	r2, [r7, #28]
 800b02a:	0151      	lsls	r1, r2, #5
 800b02c:	6a3a      	ldr	r2, [r7, #32]
 800b02e:	440a      	add	r2, r1
 800b030:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b034:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b038:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800b03a:	69fb      	ldr	r3, [r7, #28]
 800b03c:	015a      	lsls	r2, r3, #5
 800b03e:	6a3b      	ldr	r3, [r7, #32]
 800b040:	4413      	add	r3, r2
 800b042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	7e7b      	ldrb	r3, [r7, #25]
 800b04a:	075b      	lsls	r3, r3, #29
 800b04c:	69f9      	ldr	r1, [r7, #28]
 800b04e:	0148      	lsls	r0, r1, #5
 800b050:	6a39      	ldr	r1, [r7, #32]
 800b052:	4401      	add	r1, r0
 800b054:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800b058:	4313      	orrs	r3, r2
 800b05a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	799b      	ldrb	r3, [r3, #6]
 800b060:	2b01      	cmp	r3, #1
 800b062:	f040 80c3 	bne.w	800b1ec <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	7c5b      	ldrb	r3, [r3, #17]
 800b06a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800b06c:	68ba      	ldr	r2, [r7, #8]
 800b06e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b070:	4313      	orrs	r3, r2
 800b072:	69fa      	ldr	r2, [r7, #28]
 800b074:	0151      	lsls	r1, r2, #5
 800b076:	6a3a      	ldr	r2, [r7, #32]
 800b078:	440a      	add	r2, r1
 800b07a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800b07e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b082:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800b084:	69fb      	ldr	r3, [r7, #28]
 800b086:	015a      	lsls	r2, r3, #5
 800b088:	6a3b      	ldr	r3, [r7, #32]
 800b08a:	4413      	add	r3, r2
 800b08c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b090:	68db      	ldr	r3, [r3, #12]
 800b092:	69fa      	ldr	r2, [r7, #28]
 800b094:	0151      	lsls	r1, r2, #5
 800b096:	6a3a      	ldr	r2, [r7, #32]
 800b098:	440a      	add	r2, r1
 800b09a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b09e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b0a2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	79db      	ldrb	r3, [r3, #7]
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d123      	bne.n	800b0f4 <USB_HC_StartXfer+0x2dc>
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	78db      	ldrb	r3, [r3, #3]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d11f      	bne.n	800b0f4 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800b0b4:	69fb      	ldr	r3, [r7, #28]
 800b0b6:	015a      	lsls	r2, r3, #5
 800b0b8:	6a3b      	ldr	r3, [r7, #32]
 800b0ba:	4413      	add	r3, r2
 800b0bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	69fa      	ldr	r2, [r7, #28]
 800b0c4:	0151      	lsls	r1, r2, #5
 800b0c6:	6a3a      	ldr	r2, [r7, #32]
 800b0c8:	440a      	add	r2, r1
 800b0ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b0ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b0d2:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800b0d4:	69fb      	ldr	r3, [r7, #28]
 800b0d6:	015a      	lsls	r2, r3, #5
 800b0d8:	6a3b      	ldr	r3, [r7, #32]
 800b0da:	4413      	add	r3, r2
 800b0dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b0e0:	68db      	ldr	r3, [r3, #12]
 800b0e2:	69fa      	ldr	r2, [r7, #28]
 800b0e4:	0151      	lsls	r1, r2, #5
 800b0e6:	6a3a      	ldr	r2, [r7, #32]
 800b0e8:	440a      	add	r2, r1
 800b0ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b0ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0f2:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	7c9b      	ldrb	r3, [r3, #18]
 800b0f8:	2b01      	cmp	r3, #1
 800b0fa:	d003      	beq.n	800b104 <USB_HC_StartXfer+0x2ec>
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	7c9b      	ldrb	r3, [r3, #18]
 800b100:	2b03      	cmp	r3, #3
 800b102:	d117      	bne.n	800b134 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800b108:	2b01      	cmp	r3, #1
 800b10a:	d113      	bne.n	800b134 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	78db      	ldrb	r3, [r3, #3]
 800b110:	2b01      	cmp	r3, #1
 800b112:	d10f      	bne.n	800b134 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800b114:	69fb      	ldr	r3, [r7, #28]
 800b116:	015a      	lsls	r2, r3, #5
 800b118:	6a3b      	ldr	r3, [r7, #32]
 800b11a:	4413      	add	r3, r2
 800b11c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	69fa      	ldr	r2, [r7, #28]
 800b124:	0151      	lsls	r1, r2, #5
 800b126:	6a3a      	ldr	r2, [r7, #32]
 800b128:	440a      	add	r2, r1
 800b12a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b12e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b132:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	7c9b      	ldrb	r3, [r3, #18]
 800b138:	2b01      	cmp	r3, #1
 800b13a:	d162      	bne.n	800b202 <USB_HC_StartXfer+0x3ea>
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	78db      	ldrb	r3, [r3, #3]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d15e      	bne.n	800b202 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	68db      	ldr	r3, [r3, #12]
 800b148:	3b01      	subs	r3, #1
 800b14a:	2b03      	cmp	r3, #3
 800b14c:	d858      	bhi.n	800b200 <USB_HC_StartXfer+0x3e8>
 800b14e:	a201      	add	r2, pc, #4	; (adr r2, 800b154 <USB_HC_StartXfer+0x33c>)
 800b150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b154:	0800b165 	.word	0x0800b165
 800b158:	0800b187 	.word	0x0800b187
 800b15c:	0800b1a9 	.word	0x0800b1a9
 800b160:	0800b1cb 	.word	0x0800b1cb
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800b164:	69fb      	ldr	r3, [r7, #28]
 800b166:	015a      	lsls	r2, r3, #5
 800b168:	6a3b      	ldr	r3, [r7, #32]
 800b16a:	4413      	add	r3, r2
 800b16c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	69fa      	ldr	r2, [r7, #28]
 800b174:	0151      	lsls	r1, r2, #5
 800b176:	6a3a      	ldr	r2, [r7, #32]
 800b178:	440a      	add	r2, r1
 800b17a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b17e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b182:	6053      	str	r3, [r2, #4]
          break;
 800b184:	e03d      	b.n	800b202 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800b186:	69fb      	ldr	r3, [r7, #28]
 800b188:	015a      	lsls	r2, r3, #5
 800b18a:	6a3b      	ldr	r3, [r7, #32]
 800b18c:	4413      	add	r3, r2
 800b18e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	69fa      	ldr	r2, [r7, #28]
 800b196:	0151      	lsls	r1, r2, #5
 800b198:	6a3a      	ldr	r2, [r7, #32]
 800b19a:	440a      	add	r2, r1
 800b19c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b1a0:	f043 030e 	orr.w	r3, r3, #14
 800b1a4:	6053      	str	r3, [r2, #4]
          break;
 800b1a6:	e02c      	b.n	800b202 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800b1a8:	69fb      	ldr	r3, [r7, #28]
 800b1aa:	015a      	lsls	r2, r3, #5
 800b1ac:	6a3b      	ldr	r3, [r7, #32]
 800b1ae:	4413      	add	r3, r2
 800b1b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	69fa      	ldr	r2, [r7, #28]
 800b1b8:	0151      	lsls	r1, r2, #5
 800b1ba:	6a3a      	ldr	r2, [r7, #32]
 800b1bc:	440a      	add	r2, r1
 800b1be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b1c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b1c6:	6053      	str	r3, [r2, #4]
          break;
 800b1c8:	e01b      	b.n	800b202 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800b1ca:	69fb      	ldr	r3, [r7, #28]
 800b1cc:	015a      	lsls	r2, r3, #5
 800b1ce:	6a3b      	ldr	r3, [r7, #32]
 800b1d0:	4413      	add	r3, r2
 800b1d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	69fa      	ldr	r2, [r7, #28]
 800b1da:	0151      	lsls	r1, r2, #5
 800b1dc:	6a3a      	ldr	r2, [r7, #32]
 800b1de:	440a      	add	r2, r1
 800b1e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b1e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b1e8:	6053      	str	r3, [r2, #4]
          break;
 800b1ea:	e00a      	b.n	800b202 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800b1ec:	69fb      	ldr	r3, [r7, #28]
 800b1ee:	015a      	lsls	r2, r3, #5
 800b1f0:	6a3b      	ldr	r3, [r7, #32]
 800b1f2:	4413      	add	r3, r2
 800b1f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	6053      	str	r3, [r2, #4]
 800b1fe:	e000      	b.n	800b202 <USB_HC_StartXfer+0x3ea>
          break;
 800b200:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	015a      	lsls	r2, r3, #5
 800b206:	6a3b      	ldr	r3, [r7, #32]
 800b208:	4413      	add	r3, r2
 800b20a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b218:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	78db      	ldrb	r3, [r3, #3]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d004      	beq.n	800b22c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b228:	613b      	str	r3, [r7, #16]
 800b22a:	e003      	b.n	800b234 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b232:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b23a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b23c:	69fb      	ldr	r3, [r7, #28]
 800b23e:	015a      	lsls	r2, r3, #5
 800b240:	6a3b      	ldr	r3, [r7, #32]
 800b242:	4413      	add	r3, r2
 800b244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b248:	461a      	mov	r2, r3
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800b24e:	79fb      	ldrb	r3, [r7, #7]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d003      	beq.n	800b25c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800b254:	2300      	movs	r3, #0
 800b256:	e055      	b.n	800b304 <USB_HC_StartXfer+0x4ec>
 800b258:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	78db      	ldrb	r3, [r3, #3]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d14e      	bne.n	800b302 <USB_HC_StartXfer+0x4ea>
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	6a1b      	ldr	r3, [r3, #32]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d04a      	beq.n	800b302 <USB_HC_StartXfer+0x4ea>
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	79db      	ldrb	r3, [r3, #7]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d146      	bne.n	800b302 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	7c9b      	ldrb	r3, [r3, #18]
 800b278:	2b03      	cmp	r3, #3
 800b27a:	d831      	bhi.n	800b2e0 <USB_HC_StartXfer+0x4c8>
 800b27c:	a201      	add	r2, pc, #4	; (adr r2, 800b284 <USB_HC_StartXfer+0x46c>)
 800b27e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b282:	bf00      	nop
 800b284:	0800b295 	.word	0x0800b295
 800b288:	0800b2b9 	.word	0x0800b2b9
 800b28c:	0800b295 	.word	0x0800b295
 800b290:	0800b2b9 	.word	0x0800b2b9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	6a1b      	ldr	r3, [r3, #32]
 800b298:	3303      	adds	r3, #3
 800b29a:	089b      	lsrs	r3, r3, #2
 800b29c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800b29e:	8afa      	ldrh	r2, [r7, #22]
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a4:	b29b      	uxth	r3, r3
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d91c      	bls.n	800b2e4 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	699b      	ldr	r3, [r3, #24]
 800b2ae:	f043 0220 	orr.w	r2, r3, #32
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	619a      	str	r2, [r3, #24]
        }
        break;
 800b2b6:	e015      	b.n	800b2e4 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	6a1b      	ldr	r3, [r3, #32]
 800b2bc:	3303      	adds	r3, #3
 800b2be:	089b      	lsrs	r3, r3, #2
 800b2c0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800b2c2:	8afa      	ldrh	r2, [r7, #22]
 800b2c4:	6a3b      	ldr	r3, [r7, #32]
 800b2c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b2ca:	691b      	ldr	r3, [r3, #16]
 800b2cc:	b29b      	uxth	r3, r3
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	d90a      	bls.n	800b2e8 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	699b      	ldr	r3, [r3, #24]
 800b2d6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	619a      	str	r2, [r3, #24]
        }
        break;
 800b2de:	e003      	b.n	800b2e8 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800b2e0:	bf00      	nop
 800b2e2:	e002      	b.n	800b2ea <USB_HC_StartXfer+0x4d2>
        break;
 800b2e4:	bf00      	nop
 800b2e6:	e000      	b.n	800b2ea <USB_HC_StartXfer+0x4d2>
        break;
 800b2e8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	6999      	ldr	r1, [r3, #24]
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	785a      	ldrb	r2, [r3, #1]
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	6a1b      	ldr	r3, [r3, #32]
 800b2f6:	b29b      	uxth	r3, r3
 800b2f8:	2000      	movs	r0, #0
 800b2fa:	9000      	str	r0, [sp, #0]
 800b2fc:	68f8      	ldr	r0, [r7, #12]
 800b2fe:	f7ff f9d5 	bl	800a6ac <USB_WritePacket>
  }

  return HAL_OK;
 800b302:	2300      	movs	r3, #0
}
 800b304:	4618      	mov	r0, r3
 800b306:	3728      	adds	r7, #40	; 0x28
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}

0800b30c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b085      	sub	sp, #20
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b31e:	695b      	ldr	r3, [r3, #20]
 800b320:	b29b      	uxth	r3, r3
}
 800b322:	4618      	mov	r0, r3
 800b324:	3714      	adds	r7, #20
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr

0800b32e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b32e:	b480      	push	{r7}
 800b330:	b089      	sub	sp, #36	; 0x24
 800b332:	af00      	add	r7, sp, #0
 800b334:	6078      	str	r0, [r7, #4]
 800b336:	460b      	mov	r3, r1
 800b338:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800b33e:	78fb      	ldrb	r3, [r7, #3]
 800b340:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800b342:	2300      	movs	r3, #0
 800b344:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b346:	69bb      	ldr	r3, [r7, #24]
 800b348:	015a      	lsls	r2, r3, #5
 800b34a:	69fb      	ldr	r3, [r7, #28]
 800b34c:	4413      	add	r3, r2
 800b34e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	0c9b      	lsrs	r3, r3, #18
 800b356:	f003 0303 	and.w	r3, r3, #3
 800b35a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800b35c:	69bb      	ldr	r3, [r7, #24]
 800b35e:	015a      	lsls	r2, r3, #5
 800b360:	69fb      	ldr	r3, [r7, #28]
 800b362:	4413      	add	r3, r2
 800b364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	0fdb      	lsrs	r3, r3, #31
 800b36c:	f003 0301 	and.w	r3, r3, #1
 800b370:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800b372:	69bb      	ldr	r3, [r7, #24]
 800b374:	015a      	lsls	r2, r3, #5
 800b376:	69fb      	ldr	r3, [r7, #28]
 800b378:	4413      	add	r3, r2
 800b37a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	0fdb      	lsrs	r3, r3, #31
 800b382:	f003 0301 	and.w	r3, r3, #1
 800b386:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	689b      	ldr	r3, [r3, #8]
 800b38c:	f003 0320 	and.w	r3, r3, #32
 800b390:	2b20      	cmp	r3, #32
 800b392:	d10d      	bne.n	800b3b0 <USB_HC_Halt+0x82>
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d10a      	bne.n	800b3b0 <USB_HC_Halt+0x82>
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d005      	beq.n	800b3ac <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d002      	beq.n	800b3ac <USB_HC_Halt+0x7e>
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	2b03      	cmp	r3, #3
 800b3aa:	d101      	bne.n	800b3b0 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	e0d8      	b.n	800b562 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d002      	beq.n	800b3bc <USB_HC_Halt+0x8e>
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	2b02      	cmp	r3, #2
 800b3ba:	d173      	bne.n	800b4a4 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b3bc:	69bb      	ldr	r3, [r7, #24]
 800b3be:	015a      	lsls	r2, r3, #5
 800b3c0:	69fb      	ldr	r3, [r7, #28]
 800b3c2:	4413      	add	r3, r2
 800b3c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	69ba      	ldr	r2, [r7, #24]
 800b3cc:	0151      	lsls	r1, r2, #5
 800b3ce:	69fa      	ldr	r2, [r7, #28]
 800b3d0:	440a      	add	r2, r1
 800b3d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b3d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b3da:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	689b      	ldr	r3, [r3, #8]
 800b3e0:	f003 0320 	and.w	r3, r3, #32
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d14a      	bne.n	800b47e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d133      	bne.n	800b45c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b3f4:	69bb      	ldr	r3, [r7, #24]
 800b3f6:	015a      	lsls	r2, r3, #5
 800b3f8:	69fb      	ldr	r3, [r7, #28]
 800b3fa:	4413      	add	r3, r2
 800b3fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	69ba      	ldr	r2, [r7, #24]
 800b404:	0151      	lsls	r1, r2, #5
 800b406:	69fa      	ldr	r2, [r7, #28]
 800b408:	440a      	add	r2, r1
 800b40a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b40e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b412:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b414:	69bb      	ldr	r3, [r7, #24]
 800b416:	015a      	lsls	r2, r3, #5
 800b418:	69fb      	ldr	r3, [r7, #28]
 800b41a:	4413      	add	r3, r2
 800b41c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	69ba      	ldr	r2, [r7, #24]
 800b424:	0151      	lsls	r1, r2, #5
 800b426:	69fa      	ldr	r2, [r7, #28]
 800b428:	440a      	add	r2, r1
 800b42a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b42e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b432:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	3301      	adds	r3, #1
 800b438:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b440:	d82e      	bhi.n	800b4a0 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b442:	69bb      	ldr	r3, [r7, #24]
 800b444:	015a      	lsls	r2, r3, #5
 800b446:	69fb      	ldr	r3, [r7, #28]
 800b448:	4413      	add	r3, r2
 800b44a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b454:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b458:	d0ec      	beq.n	800b434 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b45a:	e081      	b.n	800b560 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b45c:	69bb      	ldr	r3, [r7, #24]
 800b45e:	015a      	lsls	r2, r3, #5
 800b460:	69fb      	ldr	r3, [r7, #28]
 800b462:	4413      	add	r3, r2
 800b464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	69ba      	ldr	r2, [r7, #24]
 800b46c:	0151      	lsls	r1, r2, #5
 800b46e:	69fa      	ldr	r2, [r7, #28]
 800b470:	440a      	add	r2, r1
 800b472:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b476:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b47a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b47c:	e070      	b.n	800b560 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b47e:	69bb      	ldr	r3, [r7, #24]
 800b480:	015a      	lsls	r2, r3, #5
 800b482:	69fb      	ldr	r3, [r7, #28]
 800b484:	4413      	add	r3, r2
 800b486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	69ba      	ldr	r2, [r7, #24]
 800b48e:	0151      	lsls	r1, r2, #5
 800b490:	69fa      	ldr	r2, [r7, #28]
 800b492:	440a      	add	r2, r1
 800b494:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b498:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b49c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b49e:	e05f      	b.n	800b560 <USB_HC_Halt+0x232>
            break;
 800b4a0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b4a2:	e05d      	b.n	800b560 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b4a4:	69bb      	ldr	r3, [r7, #24]
 800b4a6:	015a      	lsls	r2, r3, #5
 800b4a8:	69fb      	ldr	r3, [r7, #28]
 800b4aa:	4413      	add	r3, r2
 800b4ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	69ba      	ldr	r2, [r7, #24]
 800b4b4:	0151      	lsls	r1, r2, #5
 800b4b6:	69fa      	ldr	r2, [r7, #28]
 800b4b8:	440a      	add	r2, r1
 800b4ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b4be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b4c2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b4c4:	69fb      	ldr	r3, [r7, #28]
 800b4c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b4ca:	691b      	ldr	r3, [r3, #16]
 800b4cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d133      	bne.n	800b53c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b4d4:	69bb      	ldr	r3, [r7, #24]
 800b4d6:	015a      	lsls	r2, r3, #5
 800b4d8:	69fb      	ldr	r3, [r7, #28]
 800b4da:	4413      	add	r3, r2
 800b4dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	69ba      	ldr	r2, [r7, #24]
 800b4e4:	0151      	lsls	r1, r2, #5
 800b4e6:	69fa      	ldr	r2, [r7, #28]
 800b4e8:	440a      	add	r2, r1
 800b4ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b4ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b4f2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b4f4:	69bb      	ldr	r3, [r7, #24]
 800b4f6:	015a      	lsls	r2, r3, #5
 800b4f8:	69fb      	ldr	r3, [r7, #28]
 800b4fa:	4413      	add	r3, r2
 800b4fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	69ba      	ldr	r2, [r7, #24]
 800b504:	0151      	lsls	r1, r2, #5
 800b506:	69fa      	ldr	r2, [r7, #28]
 800b508:	440a      	add	r2, r1
 800b50a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b50e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b512:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	3301      	adds	r3, #1
 800b518:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b520:	d81d      	bhi.n	800b55e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b522:	69bb      	ldr	r3, [r7, #24]
 800b524:	015a      	lsls	r2, r3, #5
 800b526:	69fb      	ldr	r3, [r7, #28]
 800b528:	4413      	add	r3, r2
 800b52a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b534:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b538:	d0ec      	beq.n	800b514 <USB_HC_Halt+0x1e6>
 800b53a:	e011      	b.n	800b560 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b53c:	69bb      	ldr	r3, [r7, #24]
 800b53e:	015a      	lsls	r2, r3, #5
 800b540:	69fb      	ldr	r3, [r7, #28]
 800b542:	4413      	add	r3, r2
 800b544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	69ba      	ldr	r2, [r7, #24]
 800b54c:	0151      	lsls	r1, r2, #5
 800b54e:	69fa      	ldr	r2, [r7, #28]
 800b550:	440a      	add	r2, r1
 800b552:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b556:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b55a:	6013      	str	r3, [r2, #0]
 800b55c:	e000      	b.n	800b560 <USB_HC_Halt+0x232>
          break;
 800b55e:	bf00      	nop
    }
  }

  return HAL_OK;
 800b560:	2300      	movs	r3, #0
}
 800b562:	4618      	mov	r0, r3
 800b564:	3724      	adds	r7, #36	; 0x24
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr
	...

0800b570 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800b570:	b480      	push	{r7}
 800b572:	b087      	sub	sp, #28
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	460b      	mov	r3, r1
 800b57a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800b580:	78fb      	ldrb	r3, [r7, #3]
 800b582:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800b584:	2301      	movs	r3, #1
 800b586:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	04da      	lsls	r2, r3, #19
 800b58c:	4b15      	ldr	r3, [pc, #84]	; (800b5e4 <USB_DoPing+0x74>)
 800b58e:	4013      	ands	r3, r2
 800b590:	693a      	ldr	r2, [r7, #16]
 800b592:	0151      	lsls	r1, r2, #5
 800b594:	697a      	ldr	r2, [r7, #20]
 800b596:	440a      	add	r2, r1
 800b598:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b59c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b5a0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	015a      	lsls	r2, r3, #5
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	4413      	add	r3, r2
 800b5aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b5b8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b5c0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	015a      	lsls	r2, r3, #5
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	4413      	add	r3, r2
 800b5ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b5d4:	2300      	movs	r3, #0
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	371c      	adds	r7, #28
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e0:	4770      	bx	lr
 800b5e2:	bf00      	nop
 800b5e4:	1ff80000 	.word	0x1ff80000

0800b5e8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b088      	sub	sp, #32
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f7fe ff98 	bl	800a532 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b602:	2110      	movs	r1, #16
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f7fe fff1 	bl	800a5ec <USB_FlushTxFifo>
 800b60a:	4603      	mov	r3, r0
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d001      	beq.n	800b614 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800b610:	2301      	movs	r3, #1
 800b612:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f7ff f81b 	bl	800a650 <USB_FlushRxFifo>
 800b61a:	4603      	mov	r3, r0
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d001      	beq.n	800b624 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800b620:	2301      	movs	r3, #1
 800b622:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b624:	2300      	movs	r3, #0
 800b626:	61bb      	str	r3, [r7, #24]
 800b628:	e01f      	b.n	800b66a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800b62a:	69bb      	ldr	r3, [r7, #24]
 800b62c:	015a      	lsls	r2, r3, #5
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	4413      	add	r3, r2
 800b632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b640:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b648:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b650:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b652:	69bb      	ldr	r3, [r7, #24]
 800b654:	015a      	lsls	r2, r3, #5
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	4413      	add	r3, r2
 800b65a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b65e:	461a      	mov	r2, r3
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b664:	69bb      	ldr	r3, [r7, #24]
 800b666:	3301      	adds	r3, #1
 800b668:	61bb      	str	r3, [r7, #24]
 800b66a:	69bb      	ldr	r3, [r7, #24]
 800b66c:	2b0f      	cmp	r3, #15
 800b66e:	d9dc      	bls.n	800b62a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b670:	2300      	movs	r3, #0
 800b672:	61bb      	str	r3, [r7, #24]
 800b674:	e034      	b.n	800b6e0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800b676:	69bb      	ldr	r3, [r7, #24]
 800b678:	015a      	lsls	r2, r3, #5
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	4413      	add	r3, r2
 800b67e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b68c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b694:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b69c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	015a      	lsls	r2, r3, #5
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	4413      	add	r3, r2
 800b6a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	3301      	adds	r3, #1
 800b6b4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b6bc:	d80c      	bhi.n	800b6d8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b6be:	69bb      	ldr	r3, [r7, #24]
 800b6c0:	015a      	lsls	r2, r3, #5
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	4413      	add	r3, r2
 800b6c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b6d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b6d4:	d0ec      	beq.n	800b6b0 <USB_StopHost+0xc8>
 800b6d6:	e000      	b.n	800b6da <USB_StopHost+0xf2>
        break;
 800b6d8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b6da:	69bb      	ldr	r3, [r7, #24]
 800b6dc:	3301      	adds	r3, #1
 800b6de:	61bb      	str	r3, [r7, #24]
 800b6e0:	69bb      	ldr	r3, [r7, #24]
 800b6e2:	2b0f      	cmp	r3, #15
 800b6e4:	d9c7      	bls.n	800b676 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	f04f 33ff 	mov.w	r3, #4294967295
 800b6f2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f04f 32ff 	mov.w	r2, #4294967295
 800b6fa:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f7fe ff07 	bl	800a510 <USB_EnableGlobalInt>

  return ret;
 800b702:	7ffb      	ldrb	r3, [r7, #31]
}
 800b704:	4618      	mov	r0, r3
 800b706:	3720      	adds	r7, #32
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}

0800b70c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b710:	4904      	ldr	r1, [pc, #16]	; (800b724 <MX_FATFS_Init+0x18>)
 800b712:	4805      	ldr	r0, [pc, #20]	; (800b728 <MX_FATFS_Init+0x1c>)
 800b714:	f002 fd72 	bl	800e1fc <FATFS_LinkDriver>
 800b718:	4603      	mov	r3, r0
 800b71a:	461a      	mov	r2, r3
 800b71c:	4b03      	ldr	r3, [pc, #12]	; (800b72c <MX_FATFS_Init+0x20>)
 800b71e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b720:	bf00      	nop
 800b722:	bd80      	pop	{r7, pc}
 800b724:	200005d4 	.word	0x200005d4
 800b728:	0802e64c 	.word	0x0802e64c
 800b72c:	200005d0 	.word	0x200005d0

0800b730 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b082      	sub	sp, #8
 800b734:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b736:	2300      	movs	r3, #0
 800b738:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b73a:	f000 f87b 	bl	800b834 <BSP_SD_IsDetected>
 800b73e:	4603      	mov	r3, r0
 800b740:	2b01      	cmp	r3, #1
 800b742:	d001      	beq.n	800b748 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800b744:	2301      	movs	r3, #1
 800b746:	e012      	b.n	800b76e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800b748:	480b      	ldr	r0, [pc, #44]	; (800b778 <BSP_SD_Init+0x48>)
 800b74a:	f7fc f855 	bl	80077f8 <HAL_SD_Init>
 800b74e:	4603      	mov	r3, r0
 800b750:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b752:	79fb      	ldrb	r3, [r7, #7]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d109      	bne.n	800b76c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800b758:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b75c:	4806      	ldr	r0, [pc, #24]	; (800b778 <BSP_SD_Init+0x48>)
 800b75e:	f7fc fc97 	bl	8008090 <HAL_SD_ConfigWideBusOperation>
 800b762:	4603      	mov	r3, r0
 800b764:	2b00      	cmp	r3, #0
 800b766:	d001      	beq.n	800b76c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b768:	2301      	movs	r3, #1
 800b76a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b76c:	79fb      	ldrb	r3, [r7, #7]
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3708      	adds	r7, #8
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
 800b776:	bf00      	nop
 800b778:	200003e4 	.word	0x200003e4

0800b77c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b086      	sub	sp, #24
 800b780:	af00      	add	r7, sp, #0
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	60b9      	str	r1, [r7, #8]
 800b786:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b788:	2300      	movs	r3, #0
 800b78a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	68ba      	ldr	r2, [r7, #8]
 800b790:	68f9      	ldr	r1, [r7, #12]
 800b792:	4806      	ldr	r0, [pc, #24]	; (800b7ac <BSP_SD_ReadBlocks_DMA+0x30>)
 800b794:	f7fc f8e0 	bl	8007958 <HAL_SD_ReadBlocks_DMA>
 800b798:	4603      	mov	r3, r0
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d001      	beq.n	800b7a2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b79e:	2301      	movs	r3, #1
 800b7a0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b7a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3718      	adds	r7, #24
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}
 800b7ac:	200003e4 	.word	0x200003e4

0800b7b0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b086      	sub	sp, #24
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	60b9      	str	r1, [r7, #8]
 800b7ba:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	68ba      	ldr	r2, [r7, #8]
 800b7c4:	68f9      	ldr	r1, [r7, #12]
 800b7c6:	4806      	ldr	r0, [pc, #24]	; (800b7e0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800b7c8:	f7fc f9a6 	bl	8007b18 <HAL_SD_WriteBlocks_DMA>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d001      	beq.n	800b7d6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b7d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3718      	adds	r7, #24
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}
 800b7e0:	200003e4 	.word	0x200003e4

0800b7e4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b7e8:	4805      	ldr	r0, [pc, #20]	; (800b800 <BSP_SD_GetCardState+0x1c>)
 800b7ea:	f7fc fceb 	bl	80081c4 <HAL_SD_GetCardState>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	2b04      	cmp	r3, #4
 800b7f2:	bf14      	ite	ne
 800b7f4:	2301      	movne	r3, #1
 800b7f6:	2300      	moveq	r3, #0
 800b7f8:	b2db      	uxtb	r3, r3
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	bd80      	pop	{r7, pc}
 800b7fe:	bf00      	nop
 800b800:	200003e4 	.word	0x200003e4

0800b804 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b082      	sub	sp, #8
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800b80c:	6879      	ldr	r1, [r7, #4]
 800b80e:	4803      	ldr	r0, [pc, #12]	; (800b81c <BSP_SD_GetCardInfo+0x18>)
 800b810:	f7fc fc12 	bl	8008038 <HAL_SD_GetCardInfo>
}
 800b814:	bf00      	nop
 800b816:	3708      	adds	r7, #8
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}
 800b81c:	200003e4 	.word	0x200003e4

0800b820 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b082      	sub	sp, #8
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b828:	f000 f9a2 	bl	800bb70 <BSP_SD_ReadCpltCallback>
}
 800b82c:	bf00      	nop
 800b82e:	3708      	adds	r7, #8
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}

0800b834 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b082      	sub	sp, #8
 800b838:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b83a:	2301      	movs	r3, #1
 800b83c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b83e:	f000 f80b 	bl	800b858 <BSP_PlatformIsDetected>
 800b842:	4603      	mov	r3, r0
 800b844:	2b00      	cmp	r3, #0
 800b846:	d101      	bne.n	800b84c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b848:	2300      	movs	r3, #0
 800b84a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b84c:	79fb      	ldrb	r3, [r7, #7]
 800b84e:	b2db      	uxtb	r3, r3
}
 800b850:	4618      	mov	r0, r3
 800b852:	3708      	adds	r7, #8
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}

0800b858 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b85e:	2301      	movs	r3, #1
 800b860:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b862:	2104      	movs	r1, #4
 800b864:	4806      	ldr	r0, [pc, #24]	; (800b880 <BSP_PlatformIsDetected+0x28>)
 800b866:	f7f7 ff7f 	bl	8003768 <HAL_GPIO_ReadPin>
 800b86a:	4603      	mov	r3, r0
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d001      	beq.n	800b874 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800b870:	2300      	movs	r3, #0
 800b872:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b874:	79fb      	ldrb	r3, [r7, #7]
}
 800b876:	4618      	mov	r0, r3
 800b878:	3708      	adds	r7, #8
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}
 800b87e:	bf00      	nop
 800b880:	40021800 	.word	0x40021800

0800b884 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800b88c:	f002 fd76 	bl	800e37c <osKernelGetTickCount>
 800b890:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800b892:	e006      	b.n	800b8a2 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b894:	f7ff ffa6 	bl	800b7e4 <BSP_SD_GetCardState>
 800b898:	4603      	mov	r3, r0
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d101      	bne.n	800b8a2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	e009      	b.n	800b8b6 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800b8a2:	f002 fd6b 	bl	800e37c <osKernelGetTickCount>
 800b8a6:	4602      	mov	r2, r0
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	1ad3      	subs	r3, r2, r3
 800b8ac:	687a      	ldr	r2, [r7, #4]
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d8f0      	bhi.n	800b894 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b8b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3710      	adds	r7, #16
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}
	...

0800b8c0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b082      	sub	sp, #8
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b8ca:	4b0b      	ldr	r3, [pc, #44]	; (800b8f8 <SD_CheckStatus+0x38>)
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b8d0:	f7ff ff88 	bl	800b7e4 <BSP_SD_GetCardState>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d107      	bne.n	800b8ea <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b8da:	4b07      	ldr	r3, [pc, #28]	; (800b8f8 <SD_CheckStatus+0x38>)
 800b8dc:	781b      	ldrb	r3, [r3, #0]
 800b8de:	b2db      	uxtb	r3, r3
 800b8e0:	f023 0301 	bic.w	r3, r3, #1
 800b8e4:	b2da      	uxtb	r2, r3
 800b8e6:	4b04      	ldr	r3, [pc, #16]	; (800b8f8 <SD_CheckStatus+0x38>)
 800b8e8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b8ea:	4b03      	ldr	r3, [pc, #12]	; (800b8f8 <SD_CheckStatus+0x38>)
 800b8ec:	781b      	ldrb	r3, [r3, #0]
 800b8ee:	b2db      	uxtb	r3, r3
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3708      	adds	r7, #8
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}
 800b8f8:	2000000d 	.word	0x2000000d

0800b8fc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b082      	sub	sp, #8
 800b900:	af00      	add	r7, sp, #0
 800b902:	4603      	mov	r3, r0
 800b904:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b906:	4b1c      	ldr	r3, [pc, #112]	; (800b978 <SD_initialize+0x7c>)
 800b908:	2201      	movs	r2, #1
 800b90a:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800b90c:	f002 fcee 	bl	800e2ec <osKernelGetState>
 800b910:	4603      	mov	r3, r0
 800b912:	2b02      	cmp	r3, #2
 800b914:	d129      	bne.n	800b96a <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800b916:	f7ff ff0b 	bl	800b730 <BSP_SD_Init>
 800b91a:	4603      	mov	r3, r0
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d107      	bne.n	800b930 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800b920:	79fb      	ldrb	r3, [r7, #7]
 800b922:	4618      	mov	r0, r3
 800b924:	f7ff ffcc 	bl	800b8c0 <SD_CheckStatus>
 800b928:	4603      	mov	r3, r0
 800b92a:	461a      	mov	r2, r3
 800b92c:	4b12      	ldr	r3, [pc, #72]	; (800b978 <SD_initialize+0x7c>)
 800b92e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800b930:	4b11      	ldr	r3, [pc, #68]	; (800b978 <SD_initialize+0x7c>)
 800b932:	781b      	ldrb	r3, [r3, #0]
 800b934:	b2db      	uxtb	r3, r3
 800b936:	2b01      	cmp	r3, #1
 800b938:	d017      	beq.n	800b96a <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800b93a:	4b10      	ldr	r3, [pc, #64]	; (800b97c <SD_initialize+0x80>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d107      	bne.n	800b952 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800b942:	2200      	movs	r2, #0
 800b944:	2102      	movs	r1, #2
 800b946:	200a      	movs	r0, #10
 800b948:	f002 fefa 	bl	800e740 <osMessageQueueNew>
 800b94c:	4603      	mov	r3, r0
 800b94e:	4a0b      	ldr	r2, [pc, #44]	; (800b97c <SD_initialize+0x80>)
 800b950:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800b952:	4b0a      	ldr	r3, [pc, #40]	; (800b97c <SD_initialize+0x80>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d107      	bne.n	800b96a <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800b95a:	4b07      	ldr	r3, [pc, #28]	; (800b978 <SD_initialize+0x7c>)
 800b95c:	781b      	ldrb	r3, [r3, #0]
 800b95e:	b2db      	uxtb	r3, r3
 800b960:	f043 0301 	orr.w	r3, r3, #1
 800b964:	b2da      	uxtb	r2, r3
 800b966:	4b04      	ldr	r3, [pc, #16]	; (800b978 <SD_initialize+0x7c>)
 800b968:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800b96a:	4b03      	ldr	r3, [pc, #12]	; (800b978 <SD_initialize+0x7c>)
 800b96c:	781b      	ldrb	r3, [r3, #0]
 800b96e:	b2db      	uxtb	r3, r3
}
 800b970:	4618      	mov	r0, r3
 800b972:	3708      	adds	r7, #8
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}
 800b978:	2000000d 	.word	0x2000000d
 800b97c:	200005d8 	.word	0x200005d8

0800b980 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b082      	sub	sp, #8
 800b984:	af00      	add	r7, sp, #0
 800b986:	4603      	mov	r3, r0
 800b988:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b98a:	79fb      	ldrb	r3, [r7, #7]
 800b98c:	4618      	mov	r0, r3
 800b98e:	f7ff ff97 	bl	800b8c0 <SD_CheckStatus>
 800b992:	4603      	mov	r3, r0
}
 800b994:	4618      	mov	r0, r3
 800b996:	3708      	adds	r7, #8
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b088      	sub	sp, #32
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	60b9      	str	r1, [r7, #8]
 800b9a4:	607a      	str	r2, [r7, #4]
 800b9a6:	603b      	str	r3, [r7, #0]
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b9b0:	f247 5030 	movw	r0, #30000	; 0x7530
 800b9b4:	f7ff ff66 	bl	800b884 <SD_CheckStatusWithTimeout>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	da01      	bge.n	800b9c2 <SD_read+0x26>
  {
    return res;
 800b9be:	7ffb      	ldrb	r3, [r7, #31]
 800b9c0:	e02f      	b.n	800ba22 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800b9c2:	683a      	ldr	r2, [r7, #0]
 800b9c4:	6879      	ldr	r1, [r7, #4]
 800b9c6:	68b8      	ldr	r0, [r7, #8]
 800b9c8:	f7ff fed8 	bl	800b77c <BSP_SD_ReadBlocks_DMA>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800b9d0:	7fbb      	ldrb	r3, [r7, #30]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d124      	bne.n	800ba20 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800b9d6:	4b15      	ldr	r3, [pc, #84]	; (800ba2c <SD_read+0x90>)
 800b9d8:	6818      	ldr	r0, [r3, #0]
 800b9da:	f107 0112 	add.w	r1, r7, #18
 800b9de:	f247 5330 	movw	r3, #30000	; 0x7530
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	f002 ff80 	bl	800e8e8 <osMessageQueueGet>
 800b9e8:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800b9ea:	69bb      	ldr	r3, [r7, #24]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d117      	bne.n	800ba20 <SD_read+0x84>
 800b9f0:	8a7b      	ldrh	r3, [r7, #18]
 800b9f2:	2b01      	cmp	r3, #1
 800b9f4:	d114      	bne.n	800ba20 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800b9f6:	f002 fcc1 	bl	800e37c <osKernelGetTickCount>
 800b9fa:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800b9fc:	e007      	b.n	800ba0e <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b9fe:	f7ff fef1 	bl	800b7e4 <BSP_SD_GetCardState>
 800ba02:	4603      	mov	r3, r0
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d102      	bne.n	800ba0e <SD_read+0x72>
              {
                res = RES_OK;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800ba0c:	e008      	b.n	800ba20 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800ba0e:	f002 fcb5 	bl	800e37c <osKernelGetTickCount>
 800ba12:	4602      	mov	r2, r0
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	1ad3      	subs	r3, r2, r3
 800ba18:	f247 522f 	movw	r2, #29999	; 0x752f
 800ba1c:	4293      	cmp	r3, r2
 800ba1e:	d9ee      	bls.n	800b9fe <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800ba20:	7ffb      	ldrb	r3, [r7, #31]
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3720      	adds	r7, #32
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
 800ba2a:	bf00      	nop
 800ba2c:	200005d8 	.word	0x200005d8

0800ba30 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b088      	sub	sp, #32
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	60b9      	str	r1, [r7, #8]
 800ba38:	607a      	str	r2, [r7, #4]
 800ba3a:	603b      	str	r3, [r7, #0]
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ba40:	2301      	movs	r3, #1
 800ba42:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ba44:	f247 5030 	movw	r0, #30000	; 0x7530
 800ba48:	f7ff ff1c 	bl	800b884 <SD_CheckStatusWithTimeout>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	da01      	bge.n	800ba56 <SD_write+0x26>
  {
    return res;
 800ba52:	7ffb      	ldrb	r3, [r7, #31]
 800ba54:	e02d      	b.n	800bab2 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ba56:	683a      	ldr	r2, [r7, #0]
 800ba58:	6879      	ldr	r1, [r7, #4]
 800ba5a:	68b8      	ldr	r0, [r7, #8]
 800ba5c:	f7ff fea8 	bl	800b7b0 <BSP_SD_WriteBlocks_DMA>
 800ba60:	4603      	mov	r3, r0
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d124      	bne.n	800bab0 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800ba66:	4b15      	ldr	r3, [pc, #84]	; (800babc <SD_write+0x8c>)
 800ba68:	6818      	ldr	r0, [r3, #0]
 800ba6a:	f107 0112 	add.w	r1, r7, #18
 800ba6e:	f247 5330 	movw	r3, #30000	; 0x7530
 800ba72:	2200      	movs	r2, #0
 800ba74:	f002 ff38 	bl	800e8e8 <osMessageQueueGet>
 800ba78:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800ba7a:	69bb      	ldr	r3, [r7, #24]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d117      	bne.n	800bab0 <SD_write+0x80>
 800ba80:	8a7b      	ldrh	r3, [r7, #18]
 800ba82:	2b02      	cmp	r3, #2
 800ba84:	d114      	bne.n	800bab0 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800ba86:	f002 fc79 	bl	800e37c <osKernelGetTickCount>
 800ba8a:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800ba8c:	e007      	b.n	800ba9e <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ba8e:	f7ff fea9 	bl	800b7e4 <BSP_SD_GetCardState>
 800ba92:	4603      	mov	r3, r0
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d102      	bne.n	800ba9e <SD_write+0x6e>
          {
            res = RES_OK;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	77fb      	strb	r3, [r7, #31]
            break;
 800ba9c:	e008      	b.n	800bab0 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800ba9e:	f002 fc6d 	bl	800e37c <osKernelGetTickCount>
 800baa2:	4602      	mov	r2, r0
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	1ad3      	subs	r3, r2, r3
 800baa8:	f247 522f 	movw	r2, #29999	; 0x752f
 800baac:	4293      	cmp	r3, r2
 800baae:	d9ee      	bls.n	800ba8e <SD_write+0x5e>
    }

  }
#endif

  return res;
 800bab0:	7ffb      	ldrb	r3, [r7, #31]
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3720      	adds	r7, #32
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}
 800baba:	bf00      	nop
 800babc:	200005d8 	.word	0x200005d8

0800bac0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b08c      	sub	sp, #48	; 0x30
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	4603      	mov	r3, r0
 800bac8:	603a      	str	r2, [r7, #0]
 800baca:	71fb      	strb	r3, [r7, #7]
 800bacc:	460b      	mov	r3, r1
 800bace:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800bad0:	2301      	movs	r3, #1
 800bad2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800bad6:	4b25      	ldr	r3, [pc, #148]	; (800bb6c <SD_ioctl+0xac>)
 800bad8:	781b      	ldrb	r3, [r3, #0]
 800bada:	b2db      	uxtb	r3, r3
 800badc:	f003 0301 	and.w	r3, r3, #1
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d001      	beq.n	800bae8 <SD_ioctl+0x28>
 800bae4:	2303      	movs	r3, #3
 800bae6:	e03c      	b.n	800bb62 <SD_ioctl+0xa2>

  switch (cmd)
 800bae8:	79bb      	ldrb	r3, [r7, #6]
 800baea:	2b03      	cmp	r3, #3
 800baec:	d834      	bhi.n	800bb58 <SD_ioctl+0x98>
 800baee:	a201      	add	r2, pc, #4	; (adr r2, 800baf4 <SD_ioctl+0x34>)
 800baf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baf4:	0800bb05 	.word	0x0800bb05
 800baf8:	0800bb0d 	.word	0x0800bb0d
 800bafc:	0800bb25 	.word	0x0800bb25
 800bb00:	0800bb3f 	.word	0x0800bb3f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800bb04:	2300      	movs	r3, #0
 800bb06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bb0a:	e028      	b.n	800bb5e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800bb0c:	f107 030c 	add.w	r3, r7, #12
 800bb10:	4618      	mov	r0, r3
 800bb12:	f7ff fe77 	bl	800b804 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800bb16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bb22:	e01c      	b.n	800bb5e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bb24:	f107 030c 	add.w	r3, r7, #12
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f7ff fe6b 	bl	800b804 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800bb2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb30:	b29a      	uxth	r2, r3
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800bb36:	2300      	movs	r3, #0
 800bb38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bb3c:	e00f      	b.n	800bb5e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bb3e:	f107 030c 	add.w	r3, r7, #12
 800bb42:	4618      	mov	r0, r3
 800bb44:	f7ff fe5e 	bl	800b804 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800bb48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb4a:	0a5a      	lsrs	r2, r3, #9
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bb50:	2300      	movs	r3, #0
 800bb52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bb56:	e002      	b.n	800bb5e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800bb58:	2304      	movs	r3, #4
 800bb5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800bb5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3730      	adds	r7, #48	; 0x30
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}
 800bb6a:	bf00      	nop
 800bb6c:	2000000d 	.word	0x2000000d

0800bb70 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b082      	sub	sp, #8
 800bb74:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800bb76:	2301      	movs	r3, #1
 800bb78:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 800bb7a:	4b05      	ldr	r3, [pc, #20]	; (800bb90 <BSP_SD_ReadCpltCallback+0x20>)
 800bb7c:	6818      	ldr	r0, [r3, #0]
 800bb7e:	1db9      	adds	r1, r7, #6
 800bb80:	2300      	movs	r3, #0
 800bb82:	2200      	movs	r2, #0
 800bb84:	f002 fe50 	bl	800e828 <osMessageQueuePut>
#endif
}
 800bb88:	bf00      	nop
 800bb8a:	3708      	adds	r7, #8
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}
 800bb90:	200005d8 	.word	0x200005d8

0800bb94 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800bb94:	b590      	push	{r4, r7, lr}
 800bb96:	b089      	sub	sp, #36	; 0x24
 800bb98:	af04      	add	r7, sp, #16
 800bb9a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	2202      	movs	r2, #2
 800bba0:	2102      	movs	r1, #2
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f000 fcd1 	bl	800c54a <USBH_FindInterface>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800bbac:	7bfb      	ldrb	r3, [r7, #15]
 800bbae:	2bff      	cmp	r3, #255	; 0xff
 800bbb0:	d002      	beq.n	800bbb8 <USBH_CDC_InterfaceInit+0x24>
 800bbb2:	7bfb      	ldrb	r3, [r7, #15]
 800bbb4:	2b01      	cmp	r3, #1
 800bbb6:	d901      	bls.n	800bbbc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800bbb8:	2302      	movs	r3, #2
 800bbba:	e13d      	b.n	800be38 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800bbbc:	7bfb      	ldrb	r3, [r7, #15]
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f000 fca6 	bl	800c512 <USBH_SelectInterface>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800bbca:	7bbb      	ldrb	r3, [r7, #14]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d001      	beq.n	800bbd4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800bbd0:	2302      	movs	r3, #2
 800bbd2:	e131      	b.n	800be38 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800bbda:	2050      	movs	r0, #80	; 0x50
 800bbdc:	f020 ffc8 	bl	802cb70 <malloc>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bbea:	69db      	ldr	r3, [r3, #28]
 800bbec:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d101      	bne.n	800bbf8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800bbf4:	2302      	movs	r3, #2
 800bbf6:	e11f      	b.n	800be38 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800bbf8:	2250      	movs	r2, #80	; 0x50
 800bbfa:	2100      	movs	r1, #0
 800bbfc:	68b8      	ldr	r0, [r7, #8]
 800bbfe:	f021 f998 	bl	802cf32 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800bc02:	7bfb      	ldrb	r3, [r7, #15]
 800bc04:	687a      	ldr	r2, [r7, #4]
 800bc06:	211a      	movs	r1, #26
 800bc08:	fb01 f303 	mul.w	r3, r1, r3
 800bc0c:	4413      	add	r3, r2
 800bc0e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bc12:	781b      	ldrb	r3, [r3, #0]
 800bc14:	b25b      	sxtb	r3, r3
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	da15      	bge.n	800bc46 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800bc1a:	7bfb      	ldrb	r3, [r7, #15]
 800bc1c:	687a      	ldr	r2, [r7, #4]
 800bc1e:	211a      	movs	r1, #26
 800bc20:	fb01 f303 	mul.w	r3, r1, r3
 800bc24:	4413      	add	r3, r2
 800bc26:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bc2a:	781a      	ldrb	r2, [r3, #0]
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bc30:	7bfb      	ldrb	r3, [r7, #15]
 800bc32:	687a      	ldr	r2, [r7, #4]
 800bc34:	211a      	movs	r1, #26
 800bc36:	fb01 f303 	mul.w	r3, r1, r3
 800bc3a:	4413      	add	r3, r2
 800bc3c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800bc40:	881a      	ldrh	r2, [r3, #0]
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	785b      	ldrb	r3, [r3, #1]
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f002 fa26 	bl	800e09e <USBH_AllocPipe>
 800bc52:	4603      	mov	r3, r0
 800bc54:	461a      	mov	r2, r3
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	7819      	ldrb	r1, [r3, #0]
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	7858      	ldrb	r0, [r3, #1]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bc6e:	68ba      	ldr	r2, [r7, #8]
 800bc70:	8952      	ldrh	r2, [r2, #10]
 800bc72:	9202      	str	r2, [sp, #8]
 800bc74:	2203      	movs	r2, #3
 800bc76:	9201      	str	r2, [sp, #4]
 800bc78:	9300      	str	r3, [sp, #0]
 800bc7a:	4623      	mov	r3, r4
 800bc7c:	4602      	mov	r2, r0
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f002 f9de 	bl	800e040 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	781b      	ldrb	r3, [r3, #0]
 800bc88:	2200      	movs	r2, #0
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f00a f9ab 	bl	8015fe8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800bc92:	2300      	movs	r3, #0
 800bc94:	2200      	movs	r2, #0
 800bc96:	210a      	movs	r1, #10
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	f000 fc56 	bl	800c54a <USBH_FindInterface>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800bca2:	7bfb      	ldrb	r3, [r7, #15]
 800bca4:	2bff      	cmp	r3, #255	; 0xff
 800bca6:	d002      	beq.n	800bcae <USBH_CDC_InterfaceInit+0x11a>
 800bca8:	7bfb      	ldrb	r3, [r7, #15]
 800bcaa:	2b01      	cmp	r3, #1
 800bcac:	d901      	bls.n	800bcb2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800bcae:	2302      	movs	r3, #2
 800bcb0:	e0c2      	b.n	800be38 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800bcb2:	7bfb      	ldrb	r3, [r7, #15]
 800bcb4:	687a      	ldr	r2, [r7, #4]
 800bcb6:	211a      	movs	r1, #26
 800bcb8:	fb01 f303 	mul.w	r3, r1, r3
 800bcbc:	4413      	add	r3, r2
 800bcbe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bcc2:	781b      	ldrb	r3, [r3, #0]
 800bcc4:	b25b      	sxtb	r3, r3
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	da16      	bge.n	800bcf8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800bcca:	7bfb      	ldrb	r3, [r7, #15]
 800bccc:	687a      	ldr	r2, [r7, #4]
 800bcce:	211a      	movs	r1, #26
 800bcd0:	fb01 f303 	mul.w	r3, r1, r3
 800bcd4:	4413      	add	r3, r2
 800bcd6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bcda:	781a      	ldrb	r2, [r3, #0]
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bce0:	7bfb      	ldrb	r3, [r7, #15]
 800bce2:	687a      	ldr	r2, [r7, #4]
 800bce4:	211a      	movs	r1, #26
 800bce6:	fb01 f303 	mul.w	r3, r1, r3
 800bcea:	4413      	add	r3, r2
 800bcec:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800bcf0:	881a      	ldrh	r2, [r3, #0]
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	835a      	strh	r2, [r3, #26]
 800bcf6:	e015      	b.n	800bd24 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800bcf8:	7bfb      	ldrb	r3, [r7, #15]
 800bcfa:	687a      	ldr	r2, [r7, #4]
 800bcfc:	211a      	movs	r1, #26
 800bcfe:	fb01 f303 	mul.w	r3, r1, r3
 800bd02:	4413      	add	r3, r2
 800bd04:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bd08:	781a      	ldrb	r2, [r3, #0]
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bd0e:	7bfb      	ldrb	r3, [r7, #15]
 800bd10:	687a      	ldr	r2, [r7, #4]
 800bd12:	211a      	movs	r1, #26
 800bd14:	fb01 f303 	mul.w	r3, r1, r3
 800bd18:	4413      	add	r3, r2
 800bd1a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800bd1e:	881a      	ldrh	r2, [r3, #0]
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800bd24:	7bfb      	ldrb	r3, [r7, #15]
 800bd26:	687a      	ldr	r2, [r7, #4]
 800bd28:	211a      	movs	r1, #26
 800bd2a:	fb01 f303 	mul.w	r3, r1, r3
 800bd2e:	4413      	add	r3, r2
 800bd30:	f203 3356 	addw	r3, r3, #854	; 0x356
 800bd34:	781b      	ldrb	r3, [r3, #0]
 800bd36:	b25b      	sxtb	r3, r3
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	da16      	bge.n	800bd6a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800bd3c:	7bfb      	ldrb	r3, [r7, #15]
 800bd3e:	687a      	ldr	r2, [r7, #4]
 800bd40:	211a      	movs	r1, #26
 800bd42:	fb01 f303 	mul.w	r3, r1, r3
 800bd46:	4413      	add	r3, r2
 800bd48:	f203 3356 	addw	r3, r3, #854	; 0x356
 800bd4c:	781a      	ldrb	r2, [r3, #0]
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800bd52:	7bfb      	ldrb	r3, [r7, #15]
 800bd54:	687a      	ldr	r2, [r7, #4]
 800bd56:	211a      	movs	r1, #26
 800bd58:	fb01 f303 	mul.w	r3, r1, r3
 800bd5c:	4413      	add	r3, r2
 800bd5e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800bd62:	881a      	ldrh	r2, [r3, #0]
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	835a      	strh	r2, [r3, #26]
 800bd68:	e015      	b.n	800bd96 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800bd6a:	7bfb      	ldrb	r3, [r7, #15]
 800bd6c:	687a      	ldr	r2, [r7, #4]
 800bd6e:	211a      	movs	r1, #26
 800bd70:	fb01 f303 	mul.w	r3, r1, r3
 800bd74:	4413      	add	r3, r2
 800bd76:	f203 3356 	addw	r3, r3, #854	; 0x356
 800bd7a:	781a      	ldrb	r2, [r3, #0]
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800bd80:	7bfb      	ldrb	r3, [r7, #15]
 800bd82:	687a      	ldr	r2, [r7, #4]
 800bd84:	211a      	movs	r1, #26
 800bd86:	fb01 f303 	mul.w	r3, r1, r3
 800bd8a:	4413      	add	r3, r2
 800bd8c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800bd90:	881a      	ldrh	r2, [r3, #0]
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	7b9b      	ldrb	r3, [r3, #14]
 800bd9a:	4619      	mov	r1, r3
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f002 f97e 	bl	800e09e <USBH_AllocPipe>
 800bda2:	4603      	mov	r3, r0
 800bda4:	461a      	mov	r2, r3
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	7bdb      	ldrb	r3, [r3, #15]
 800bdae:	4619      	mov	r1, r3
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f002 f974 	bl	800e09e <USBH_AllocPipe>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	461a      	mov	r2, r3
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	7b59      	ldrb	r1, [r3, #13]
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	7b98      	ldrb	r0, [r3, #14]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bdd2:	68ba      	ldr	r2, [r7, #8]
 800bdd4:	8b12      	ldrh	r2, [r2, #24]
 800bdd6:	9202      	str	r2, [sp, #8]
 800bdd8:	2202      	movs	r2, #2
 800bdda:	9201      	str	r2, [sp, #4]
 800bddc:	9300      	str	r3, [sp, #0]
 800bdde:	4623      	mov	r3, r4
 800bde0:	4602      	mov	r2, r0
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f002 f92c 	bl	800e040 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	7b19      	ldrb	r1, [r3, #12]
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	7bd8      	ldrb	r0, [r3, #15]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bdfc:	68ba      	ldr	r2, [r7, #8]
 800bdfe:	8b52      	ldrh	r2, [r2, #26]
 800be00:	9202      	str	r2, [sp, #8]
 800be02:	2202      	movs	r2, #2
 800be04:	9201      	str	r2, [sp, #4]
 800be06:	9300      	str	r3, [sp, #0]
 800be08:	4623      	mov	r3, r4
 800be0a:	4602      	mov	r2, r0
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f002 f917 	bl	800e040 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	2200      	movs	r2, #0
 800be16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	7b5b      	ldrb	r3, [r3, #13]
 800be1e:	2200      	movs	r2, #0
 800be20:	4619      	mov	r1, r3
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f00a f8e0 	bl	8015fe8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	7b1b      	ldrb	r3, [r3, #12]
 800be2c:	2200      	movs	r2, #0
 800be2e:	4619      	mov	r1, r3
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f00a f8d9 	bl	8015fe8 <USBH_LL_SetToggle>

  return USBH_OK;
 800be36:	2300      	movs	r3, #0
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3714      	adds	r7, #20
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd90      	pop	{r4, r7, pc}

0800be40 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b084      	sub	sp, #16
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800be4e:	69db      	ldr	r3, [r3, #28]
 800be50:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d00e      	beq.n	800be78 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	4619      	mov	r1, r3
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f002 f90c 	bl	800e07e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	781b      	ldrb	r3, [r3, #0]
 800be6a:	4619      	mov	r1, r3
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f002 f937 	bl	800e0e0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2200      	movs	r2, #0
 800be76:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	7b1b      	ldrb	r3, [r3, #12]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d00e      	beq.n	800be9e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	7b1b      	ldrb	r3, [r3, #12]
 800be84:	4619      	mov	r1, r3
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f002 f8f9 	bl	800e07e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	7b1b      	ldrb	r3, [r3, #12]
 800be90:	4619      	mov	r1, r3
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f002 f924 	bl	800e0e0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	2200      	movs	r2, #0
 800be9c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	7b5b      	ldrb	r3, [r3, #13]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d00e      	beq.n	800bec4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	7b5b      	ldrb	r3, [r3, #13]
 800beaa:	4619      	mov	r1, r3
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f002 f8e6 	bl	800e07e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	7b5b      	ldrb	r3, [r3, #13]
 800beb6:	4619      	mov	r1, r3
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f002 f911 	bl	800e0e0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	2200      	movs	r2, #0
 800bec2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800beca:	69db      	ldr	r3, [r3, #28]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d00b      	beq.n	800bee8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bed6:	69db      	ldr	r3, [r3, #28]
 800bed8:	4618      	mov	r0, r3
 800beda:	f020 fe51 	bl	802cb80 <free>
    phost->pActiveClass->pData = 0U;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bee4:	2200      	movs	r2, #0
 800bee6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800bee8:	2300      	movs	r3, #0
}
 800beea:	4618      	mov	r0, r3
 800beec:	3710      	adds	r7, #16
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}

0800bef2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800bef2:	b580      	push	{r7, lr}
 800bef4:	b084      	sub	sp, #16
 800bef6:	af00      	add	r7, sp, #0
 800bef8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf00:	69db      	ldr	r3, [r3, #28]
 800bf02:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	3340      	adds	r3, #64	; 0x40
 800bf08:	4619      	mov	r1, r3
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f000 f8b1 	bl	800c072 <GetLineCoding>
 800bf10:	4603      	mov	r3, r0
 800bf12:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800bf14:	7afb      	ldrb	r3, [r7, #11]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d105      	bne.n	800bf26 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bf20:	2102      	movs	r1, #2
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800bf26:	7afb      	ldrb	r3, [r7, #11]
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3710      	adds	r7, #16
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b084      	sub	sp, #16
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800bf38:	2301      	movs	r3, #1
 800bf3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf46:	69db      	ldr	r3, [r3, #28]
 800bf48:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800bf50:	2b04      	cmp	r3, #4
 800bf52:	d877      	bhi.n	800c044 <USBH_CDC_Process+0x114>
 800bf54:	a201      	add	r2, pc, #4	; (adr r2, 800bf5c <USBH_CDC_Process+0x2c>)
 800bf56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf5a:	bf00      	nop
 800bf5c:	0800bf71 	.word	0x0800bf71
 800bf60:	0800bf77 	.word	0x0800bf77
 800bf64:	0800bfa7 	.word	0x0800bfa7
 800bf68:	0800c01b 	.word	0x0800c01b
 800bf6c:	0800c029 	.word	0x0800c029
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800bf70:	2300      	movs	r3, #0
 800bf72:	73fb      	strb	r3, [r7, #15]
      break;
 800bf74:	e06d      	b.n	800c052 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f000 f897 	bl	800c0b0 <SetLineCoding>
 800bf82:	4603      	mov	r3, r0
 800bf84:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800bf86:	7bbb      	ldrb	r3, [r7, #14]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d104      	bne.n	800bf96 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	2202      	movs	r2, #2
 800bf90:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800bf94:	e058      	b.n	800c048 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800bf96:	7bbb      	ldrb	r3, [r7, #14]
 800bf98:	2b01      	cmp	r3, #1
 800bf9a:	d055      	beq.n	800c048 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	2204      	movs	r2, #4
 800bfa0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800bfa4:	e050      	b.n	800c048 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	3340      	adds	r3, #64	; 0x40
 800bfaa:	4619      	mov	r1, r3
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f000 f860 	bl	800c072 <GetLineCoding>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800bfb6:	7bbb      	ldrb	r3, [r7, #14]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d126      	bne.n	800c00a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfce:	791b      	ldrb	r3, [r3, #4]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d13b      	bne.n	800c04c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfde:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d133      	bne.n	800c04c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfee:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d12b      	bne.n	800c04c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bffc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800bffe:	429a      	cmp	r2, r3
 800c000:	d124      	bne.n	800c04c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f000 f982 	bl	800c30c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c008:	e020      	b.n	800c04c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800c00a:	7bbb      	ldrb	r3, [r7, #14]
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	d01d      	beq.n	800c04c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	2204      	movs	r2, #4
 800c014:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800c018:	e018      	b.n	800c04c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f000 f867 	bl	800c0ee <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f000 f8f6 	bl	800c212 <CDC_ProcessReception>
      break;
 800c026:	e014      	b.n	800c052 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800c028:	2100      	movs	r1, #0
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f001 f98a 	bl	800d344 <USBH_ClrFeature>
 800c030:	4603      	mov	r3, r0
 800c032:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c034:	7bbb      	ldrb	r3, [r7, #14]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d10a      	bne.n	800c050 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	2200      	movs	r2, #0
 800c03e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800c042:	e005      	b.n	800c050 <USBH_CDC_Process+0x120>

    default:
      break;
 800c044:	bf00      	nop
 800c046:	e004      	b.n	800c052 <USBH_CDC_Process+0x122>
      break;
 800c048:	bf00      	nop
 800c04a:	e002      	b.n	800c052 <USBH_CDC_Process+0x122>
      break;
 800c04c:	bf00      	nop
 800c04e:	e000      	b.n	800c052 <USBH_CDC_Process+0x122>
      break;
 800c050:	bf00      	nop

  }

  return status;
 800c052:	7bfb      	ldrb	r3, [r7, #15]
}
 800c054:	4618      	mov	r0, r3
 800c056:	3710      	adds	r7, #16
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}

0800c05c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800c05c:	b480      	push	{r7}
 800c05e:	b083      	sub	sp, #12
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800c064:	2300      	movs	r3, #0
}
 800c066:	4618      	mov	r0, r3
 800c068:	370c      	adds	r7, #12
 800c06a:	46bd      	mov	sp, r7
 800c06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c070:	4770      	bx	lr

0800c072 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800c072:	b580      	push	{r7, lr}
 800c074:	b082      	sub	sp, #8
 800c076:	af00      	add	r7, sp, #0
 800c078:	6078      	str	r0, [r7, #4]
 800c07a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	22a1      	movs	r2, #161	; 0xa1
 800c080:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2221      	movs	r2, #33	; 0x21
 800c086:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2200      	movs	r2, #0
 800c08c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2200      	movs	r2, #0
 800c092:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2207      	movs	r2, #7
 800c098:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	2207      	movs	r2, #7
 800c09e:	4619      	mov	r1, r3
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f001 fc8b 	bl	800d9bc <USBH_CtlReq>
 800c0a6:	4603      	mov	r3, r0
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3708      	adds	r7, #8
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b082      	sub	sp, #8
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2221      	movs	r2, #33	; 0x21
 800c0be:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2220      	movs	r2, #32
 800c0c4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2207      	movs	r2, #7
 800c0d6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	2207      	movs	r2, #7
 800c0dc:	4619      	mov	r1, r3
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f001 fc6c 	bl	800d9bc <USBH_CtlReq>
 800c0e4:	4603      	mov	r3, r0
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3708      	adds	r7, #8
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}

0800c0ee <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800c0ee:	b580      	push	{r7, lr}
 800c0f0:	b086      	sub	sp, #24
 800c0f2:	af02      	add	r7, sp, #8
 800c0f4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c0fc:	69db      	ldr	r3, [r3, #28]
 800c0fe:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c100:	2300      	movs	r3, #0
 800c102:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800c10a:	2b01      	cmp	r3, #1
 800c10c:	d002      	beq.n	800c114 <CDC_ProcessTransmission+0x26>
 800c10e:	2b02      	cmp	r3, #2
 800c110:	d023      	beq.n	800c15a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800c112:	e07a      	b.n	800c20a <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c118:	68fa      	ldr	r2, [r7, #12]
 800c11a:	8b12      	ldrh	r2, [r2, #24]
 800c11c:	4293      	cmp	r3, r2
 800c11e:	d90b      	bls.n	800c138 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	69d9      	ldr	r1, [r3, #28]
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	8b1a      	ldrh	r2, [r3, #24]
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	7b5b      	ldrb	r3, [r3, #13]
 800c12c:	2001      	movs	r0, #1
 800c12e:	9000      	str	r0, [sp, #0]
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f001 ff42 	bl	800dfba <USBH_BulkSendData>
 800c136:	e00b      	b.n	800c150 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800c140:	b29a      	uxth	r2, r3
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	7b5b      	ldrb	r3, [r3, #13]
 800c146:	2001      	movs	r0, #1
 800c148:	9000      	str	r0, [sp, #0]
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f001 ff35 	bl	800dfba <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	2202      	movs	r2, #2
 800c154:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800c158:	e057      	b.n	800c20a <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	7b5b      	ldrb	r3, [r3, #13]
 800c15e:	4619      	mov	r1, r3
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f009 ff17 	bl	8015f94 <USBH_LL_GetURBState>
 800c166:	4603      	mov	r3, r0
 800c168:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800c16a:	7afb      	ldrb	r3, [r7, #11]
 800c16c:	2b01      	cmp	r3, #1
 800c16e:	d136      	bne.n	800c1de <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c174:	68fa      	ldr	r2, [r7, #12]
 800c176:	8b12      	ldrh	r2, [r2, #24]
 800c178:	4293      	cmp	r3, r2
 800c17a:	d90e      	bls.n	800c19a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c180:	68fa      	ldr	r2, [r7, #12]
 800c182:	8b12      	ldrh	r2, [r2, #24]
 800c184:	1a9a      	subs	r2, r3, r2
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	69db      	ldr	r3, [r3, #28]
 800c18e:	68fa      	ldr	r2, [r7, #12]
 800c190:	8b12      	ldrh	r2, [r2, #24]
 800c192:	441a      	add	r2, r3
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	61da      	str	r2, [r3, #28]
 800c198:	e002      	b.n	800c1a0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2200      	movs	r2, #0
 800c19e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d004      	beq.n	800c1b2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800c1b0:	e006      	b.n	800c1c0 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f000 f892 	bl	800c2e4 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2204      	movs	r2, #4
 800c1c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	f002 fb26 	bl	800e828 <osMessageQueuePut>
      break;
 800c1dc:	e014      	b.n	800c208 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800c1de:	7afb      	ldrb	r3, [r7, #11]
 800c1e0:	2b02      	cmp	r3, #2
 800c1e2:	d111      	bne.n	800c208 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2204      	movs	r2, #4
 800c1f0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c200:	2300      	movs	r3, #0
 800c202:	2200      	movs	r2, #0
 800c204:	f002 fb10 	bl	800e828 <osMessageQueuePut>
      break;
 800c208:	bf00      	nop
  }
}
 800c20a:	bf00      	nop
 800c20c:	3710      	adds	r7, #16
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}

0800c212 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800c212:	b580      	push	{r7, lr}
 800c214:	b086      	sub	sp, #24
 800c216:	af00      	add	r7, sp, #0
 800c218:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c220:	69db      	ldr	r3, [r3, #28]
 800c222:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c224:	2300      	movs	r3, #0
 800c226:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800c22e:	2b03      	cmp	r3, #3
 800c230:	d002      	beq.n	800c238 <CDC_ProcessReception+0x26>
 800c232:	2b04      	cmp	r3, #4
 800c234:	d00e      	beq.n	800c254 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800c236:	e051      	b.n	800c2dc <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	6a19      	ldr	r1, [r3, #32]
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	8b5a      	ldrh	r2, [r3, #26]
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	7b1b      	ldrb	r3, [r3, #12]
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f001 fedd 	bl	800e004 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	2204      	movs	r2, #4
 800c24e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800c252:	e043      	b.n	800c2dc <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	7b1b      	ldrb	r3, [r3, #12]
 800c258:	4619      	mov	r1, r3
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f009 fe9a 	bl	8015f94 <USBH_LL_GetURBState>
 800c260:	4603      	mov	r3, r0
 800c262:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800c264:	7cfb      	ldrb	r3, [r7, #19]
 800c266:	2b01      	cmp	r3, #1
 800c268:	d137      	bne.n	800c2da <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800c26a:	697b      	ldr	r3, [r7, #20]
 800c26c:	7b1b      	ldrb	r3, [r3, #12]
 800c26e:	4619      	mov	r1, r3
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f009 fdfd 	bl	8015e70 <USBH_LL_GetLastXferSize>
 800c276:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c27c:	68fa      	ldr	r2, [r7, #12]
 800c27e:	429a      	cmp	r2, r3
 800c280:	d016      	beq.n	800c2b0 <CDC_ProcessReception+0x9e>
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	8b5b      	ldrh	r3, [r3, #26]
 800c286:	461a      	mov	r2, r3
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d910      	bls.n	800c2b0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	1ad2      	subs	r2, r2, r3
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	6a1a      	ldr	r2, [r3, #32]
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	441a      	add	r2, r3
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	2203      	movs	r2, #3
 800c2aa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800c2ae:	e006      	b.n	800c2be <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f000 f81d 	bl	800c2f8 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2204      	movs	r2, #4
 800c2c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	f002 faa7 	bl	800e828 <osMessageQueuePut>
      break;
 800c2da:	bf00      	nop
  }
}
 800c2dc:	bf00      	nop
 800c2de:	3718      	adds	r7, #24
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}

0800c2e4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b083      	sub	sp, #12
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c2ec:	bf00      	nop
 800c2ee:	370c      	adds	r7, #12
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr

0800c2f8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	b083      	sub	sp, #12
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c300:	bf00      	nop
 800c302:	370c      	adds	r7, #12
 800c304:	46bd      	mov	sp, r7
 800c306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30a:	4770      	bx	lr

0800c30c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b083      	sub	sp, #12
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c314:	bf00      	nop
 800c316:	370c      	adds	r7, #12
 800c318:	46bd      	mov	sp, r7
 800c31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31e:	4770      	bx	lr

0800c320 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b084      	sub	sp, #16
 800c324:	af00      	add	r7, sp, #0
 800c326:	60f8      	str	r0, [r7, #12]
 800c328:	60b9      	str	r1, [r7, #8]
 800c32a:	4613      	mov	r3, r2
 800c32c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d101      	bne.n	800c338 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c334:	2302      	movs	r3, #2
 800c336:	e044      	b.n	800c3c2 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	79fa      	ldrb	r2, [r7, #7]
 800c33c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	2200      	movs	r2, #0
 800c344:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2200      	movs	r2, #0
 800c34c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800c350:	68f8      	ldr	r0, [r7, #12]
 800c352:	f000 f841 	bl	800c3d8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	2200      	movs	r2, #0
 800c35a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	2200      	movs	r2, #0
 800c362:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	2200      	movs	r2, #0
 800c36a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	2200      	movs	r2, #0
 800c372:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d003      	beq.n	800c384 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	68ba      	ldr	r2, [r7, #8]
 800c380:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800c384:	2200      	movs	r2, #0
 800c386:	2104      	movs	r1, #4
 800c388:	2010      	movs	r0, #16
 800c38a:	f002 f9d9 	bl	800e740 <osMessageQueueNew>
 800c38e:	4602      	mov	r2, r0
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800c396:	4b0d      	ldr	r3, [pc, #52]	; (800c3cc <USBH_Init+0xac>)
 800c398:	4a0d      	ldr	r2, [pc, #52]	; (800c3d0 <USBH_Init+0xb0>)
 800c39a:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800c39c:	4b0b      	ldr	r3, [pc, #44]	; (800c3cc <USBH_Init+0xac>)
 800c39e:	2280      	movs	r2, #128	; 0x80
 800c3a0:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800c3a2:	4b0a      	ldr	r3, [pc, #40]	; (800c3cc <USBH_Init+0xac>)
 800c3a4:	2218      	movs	r2, #24
 800c3a6:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800c3a8:	4a08      	ldr	r2, [pc, #32]	; (800c3cc <USBH_Init+0xac>)
 800c3aa:	68f9      	ldr	r1, [r7, #12]
 800c3ac:	4809      	ldr	r0, [pc, #36]	; (800c3d4 <USBH_Init+0xb4>)
 800c3ae:	f001 fffa 	bl	800e3a6 <osThreadNew>
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800c3ba:	68f8      	ldr	r0, [r7, #12]
 800c3bc:	f009 fca4 	bl	8015d08 <USBH_LL_Init>

  return USBH_OK;
 800c3c0:	2300      	movs	r3, #0
}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	3710      	adds	r7, #16
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}
 800c3ca:	bf00      	nop
 800c3cc:	200005dc 	.word	0x200005dc
 800c3d0:	0802dc50 	.word	0x0802dc50
 800c3d4:	0800d095 	.word	0x0800d095

0800c3d8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b084      	sub	sp, #16
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	60fb      	str	r3, [r7, #12]
 800c3e8:	e009      	b.n	800c3fe <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	33e0      	adds	r3, #224	; 0xe0
 800c3f0:	009b      	lsls	r3, r3, #2
 800c3f2:	4413      	add	r3, r2
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	60fb      	str	r3, [r7, #12]
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	2b0f      	cmp	r3, #15
 800c402:	d9f2      	bls.n	800c3ea <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c404:	2300      	movs	r3, #0
 800c406:	60fb      	str	r3, [r7, #12]
 800c408:	e009      	b.n	800c41e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800c40a:	687a      	ldr	r2, [r7, #4]
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	4413      	add	r3, r2
 800c410:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c414:	2200      	movs	r2, #0
 800c416:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	3301      	adds	r3, #1
 800c41c:	60fb      	str	r3, [r7, #12]
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c424:	d3f1      	bcc.n	800c40a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2200      	movs	r2, #0
 800c42a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2200      	movs	r2, #0
 800c430:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2201      	movs	r2, #1
 800c436:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2200      	movs	r2, #0
 800c43c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2201      	movs	r2, #1
 800c444:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2240      	movs	r2, #64	; 0x40
 800c44a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2200      	movs	r2, #0
 800c450:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2200      	movs	r2, #0
 800c456:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2201      	movs	r2, #1
 800c45e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2200      	movs	r2, #0
 800c466:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2200      	movs	r2, #0
 800c46e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	331c      	adds	r3, #28
 800c476:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c47a:	2100      	movs	r1, #0
 800c47c:	4618      	mov	r0, r3
 800c47e:	f020 fd58 	bl	802cf32 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c488:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c48c:	2100      	movs	r1, #0
 800c48e:	4618      	mov	r0, r3
 800c490:	f020 fd4f 	bl	802cf32 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f203 3326 	addw	r3, r3, #806	; 0x326
 800c49a:	2212      	movs	r2, #18
 800c49c:	2100      	movs	r1, #0
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f020 fd47 	bl	802cf32 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c4aa:	223e      	movs	r2, #62	; 0x3e
 800c4ac:	2100      	movs	r1, #0
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f020 fd3f 	bl	802cf32 <memset>

  return USBH_OK;
 800c4b4:	2300      	movs	r3, #0
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3710      	adds	r7, #16
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}

0800c4be <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c4be:	b480      	push	{r7}
 800c4c0:	b085      	sub	sp, #20
 800c4c2:	af00      	add	r7, sp, #0
 800c4c4:	6078      	str	r0, [r7, #4]
 800c4c6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d016      	beq.n	800c500 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d10e      	bne.n	800c4fa <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c4e2:	1c59      	adds	r1, r3, #1
 800c4e4:	687a      	ldr	r2, [r7, #4]
 800c4e6:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800c4ea:	687a      	ldr	r2, [r7, #4]
 800c4ec:	33de      	adds	r3, #222	; 0xde
 800c4ee:	6839      	ldr	r1, [r7, #0]
 800c4f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	73fb      	strb	r3, [r7, #15]
 800c4f8:	e004      	b.n	800c504 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c4fa:	2302      	movs	r3, #2
 800c4fc:	73fb      	strb	r3, [r7, #15]
 800c4fe:	e001      	b.n	800c504 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c500:	2302      	movs	r3, #2
 800c502:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c504:	7bfb      	ldrb	r3, [r7, #15]
}
 800c506:	4618      	mov	r0, r3
 800c508:	3714      	adds	r7, #20
 800c50a:	46bd      	mov	sp, r7
 800c50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c510:	4770      	bx	lr

0800c512 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c512:	b480      	push	{r7}
 800c514:	b085      	sub	sp, #20
 800c516:	af00      	add	r7, sp, #0
 800c518:	6078      	str	r0, [r7, #4]
 800c51a:	460b      	mov	r3, r1
 800c51c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c51e:	2300      	movs	r3, #0
 800c520:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800c528:	78fa      	ldrb	r2, [r7, #3]
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d204      	bcs.n	800c538 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	78fa      	ldrb	r2, [r7, #3]
 800c532:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800c536:	e001      	b.n	800c53c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c538:	2302      	movs	r3, #2
 800c53a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c53c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3714      	adds	r7, #20
 800c542:	46bd      	mov	sp, r7
 800c544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c548:	4770      	bx	lr

0800c54a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c54a:	b480      	push	{r7}
 800c54c:	b087      	sub	sp, #28
 800c54e:	af00      	add	r7, sp, #0
 800c550:	6078      	str	r0, [r7, #4]
 800c552:	4608      	mov	r0, r1
 800c554:	4611      	mov	r1, r2
 800c556:	461a      	mov	r2, r3
 800c558:	4603      	mov	r3, r0
 800c55a:	70fb      	strb	r3, [r7, #3]
 800c55c:	460b      	mov	r3, r1
 800c55e:	70bb      	strb	r3, [r7, #2]
 800c560:	4613      	mov	r3, r2
 800c562:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c564:	2300      	movs	r3, #0
 800c566:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c568:	2300      	movs	r3, #0
 800c56a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c572:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c574:	e025      	b.n	800c5c2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c576:	7dfb      	ldrb	r3, [r7, #23]
 800c578:	221a      	movs	r2, #26
 800c57a:	fb02 f303 	mul.w	r3, r2, r3
 800c57e:	3308      	adds	r3, #8
 800c580:	68fa      	ldr	r2, [r7, #12]
 800c582:	4413      	add	r3, r2
 800c584:	3302      	adds	r3, #2
 800c586:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c588:	693b      	ldr	r3, [r7, #16]
 800c58a:	795b      	ldrb	r3, [r3, #5]
 800c58c:	78fa      	ldrb	r2, [r7, #3]
 800c58e:	429a      	cmp	r2, r3
 800c590:	d002      	beq.n	800c598 <USBH_FindInterface+0x4e>
 800c592:	78fb      	ldrb	r3, [r7, #3]
 800c594:	2bff      	cmp	r3, #255	; 0xff
 800c596:	d111      	bne.n	800c5bc <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c59c:	78ba      	ldrb	r2, [r7, #2]
 800c59e:	429a      	cmp	r2, r3
 800c5a0:	d002      	beq.n	800c5a8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c5a2:	78bb      	ldrb	r3, [r7, #2]
 800c5a4:	2bff      	cmp	r3, #255	; 0xff
 800c5a6:	d109      	bne.n	800c5bc <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c5ac:	787a      	ldrb	r2, [r7, #1]
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d002      	beq.n	800c5b8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c5b2:	787b      	ldrb	r3, [r7, #1]
 800c5b4:	2bff      	cmp	r3, #255	; 0xff
 800c5b6:	d101      	bne.n	800c5bc <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c5b8:	7dfb      	ldrb	r3, [r7, #23]
 800c5ba:	e006      	b.n	800c5ca <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c5bc:	7dfb      	ldrb	r3, [r7, #23]
 800c5be:	3301      	adds	r3, #1
 800c5c0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c5c2:	7dfb      	ldrb	r3, [r7, #23]
 800c5c4:	2b01      	cmp	r3, #1
 800c5c6:	d9d6      	bls.n	800c576 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c5c8:	23ff      	movs	r3, #255	; 0xff
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	371c      	adds	r7, #28
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d4:	4770      	bx	lr

0800c5d6 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800c5d6:	b580      	push	{r7, lr}
 800c5d8:	b082      	sub	sp, #8
 800c5da:	af00      	add	r7, sp, #0
 800c5dc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f009 fbce 	bl	8015d80 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800c5e4:	2101      	movs	r1, #1
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f009 fce7 	bl	8015fba <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c5ec:	2300      	movs	r3, #0
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3708      	adds	r7, #8
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
	...

0800c5f8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b088      	sub	sp, #32
 800c5fc:	af04      	add	r7, sp, #16
 800c5fe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c600:	2302      	movs	r3, #2
 800c602:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c604:	2300      	movs	r3, #0
 800c606:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800c60e:	b2db      	uxtb	r3, r3
 800c610:	2b01      	cmp	r3, #1
 800c612:	d102      	bne.n	800c61a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2203      	movs	r2, #3
 800c618:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	781b      	ldrb	r3, [r3, #0]
 800c61e:	b2db      	uxtb	r3, r3
 800c620:	2b0b      	cmp	r3, #11
 800c622:	f200 8247 	bhi.w	800cab4 <USBH_Process+0x4bc>
 800c626:	a201      	add	r2, pc, #4	; (adr r2, 800c62c <USBH_Process+0x34>)
 800c628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c62c:	0800c65d 	.word	0x0800c65d
 800c630:	0800c6ab 	.word	0x0800c6ab
 800c634:	0800c72f 	.word	0x0800c72f
 800c638:	0800ca33 	.word	0x0800ca33
 800c63c:	0800cab5 	.word	0x0800cab5
 800c640:	0800c7ef 	.word	0x0800c7ef
 800c644:	0800c9bd 	.word	0x0800c9bd
 800c648:	0800c841 	.word	0x0800c841
 800c64c:	0800c87d 	.word	0x0800c87d
 800c650:	0800c8b7 	.word	0x0800c8b7
 800c654:	0800c915 	.word	0x0800c915
 800c658:	0800ca1b 	.word	0x0800ca1b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c662:	b2db      	uxtb	r3, r3
 800c664:	2b00      	cmp	r3, #0
 800c666:	f000 8227 	beq.w	800cab8 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2201      	movs	r2, #1
 800c66e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c670:	20c8      	movs	r0, #200	; 0xc8
 800c672:	f009 fcec 	bl	801604e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f009 fbdf 	bl	8015e3a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2200      	movs	r2, #0
 800c680:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2200      	movs	r2, #0
 800c688:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2201      	movs	r2, #1
 800c690:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	f002 f8c0 	bl	800e828 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800c6a8:	e206      	b.n	800cab8 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800c6b0:	2b01      	cmp	r3, #1
 800c6b2:	d107      	bne.n	800c6c4 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2202      	movs	r2, #2
 800c6c0:	701a      	strb	r2, [r3, #0]
 800c6c2:	e025      	b.n	800c710 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c6ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c6ce:	d914      	bls.n	800c6fa <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c6d6:	3301      	adds	r3, #1
 800c6d8:	b2da      	uxtb	r2, r3
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c6e6:	2b03      	cmp	r3, #3
 800c6e8:	d903      	bls.n	800c6f2 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	220d      	movs	r2, #13
 800c6ee:	701a      	strb	r2, [r3, #0]
 800c6f0:	e00e      	b.n	800c710 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	701a      	strb	r2, [r3, #0]
 800c6f8:	e00a      	b.n	800c710 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c700:	f103 020a 	add.w	r2, r3, #10
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800c70a:	200a      	movs	r0, #10
 800c70c:	f009 fc9f 	bl	801604e <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2201      	movs	r2, #1
 800c714:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c724:	2300      	movs	r3, #0
 800c726:	2200      	movs	r2, #0
 800c728:	f002 f87e 	bl	800e828 <osMessageQueuePut>
#endif
#endif
      break;
 800c72c:	e1cb      	b.n	800cac6 <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c734:	2b00      	cmp	r3, #0
 800c736:	d005      	beq.n	800c744 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c73e:	2104      	movs	r1, #4
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c744:	2064      	movs	r0, #100	; 0x64
 800c746:	f009 fc82 	bl	801604e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f009 fb4e 	bl	8015dec <USBH_LL_GetSpeed>
 800c750:	4603      	mov	r3, r0
 800c752:	461a      	mov	r2, r3
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2205      	movs	r2, #5
 800c75e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c760:	2100      	movs	r1, #0
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f001 fc9b 	bl	800e09e <USBH_AllocPipe>
 800c768:	4603      	mov	r3, r0
 800c76a:	461a      	mov	r2, r3
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c770:	2180      	movs	r1, #128	; 0x80
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f001 fc93 	bl	800e09e <USBH_AllocPipe>
 800c778:	4603      	mov	r3, r0
 800c77a:	461a      	mov	r2, r3
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	7919      	ldrb	r1, [r3, #4]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c790:	687a      	ldr	r2, [r7, #4]
 800c792:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c794:	b292      	uxth	r2, r2
 800c796:	9202      	str	r2, [sp, #8]
 800c798:	2200      	movs	r2, #0
 800c79a:	9201      	str	r2, [sp, #4]
 800c79c:	9300      	str	r3, [sp, #0]
 800c79e:	4603      	mov	r3, r0
 800c7a0:	2280      	movs	r2, #128	; 0x80
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f001 fc4c 	bl	800e040 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	7959      	ldrb	r1, [r3, #5]
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c7b8:	687a      	ldr	r2, [r7, #4]
 800c7ba:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c7bc:	b292      	uxth	r2, r2
 800c7be:	9202      	str	r2, [sp, #8]
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	9201      	str	r2, [sp, #4]
 800c7c4:	9300      	str	r3, [sp, #0]
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f001 fc38 	bl	800e040 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	f002 f81e 	bl	800e828 <osMessageQueuePut>
#endif
#endif
      break;
 800c7ec:	e16b      	b.n	800cac6 <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f000 f96e 	bl	800cad0 <USBH_HandleEnum>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800c7f8:	7bbb      	ldrb	r3, [r7, #14]
 800c7fa:	b2db      	uxtb	r3, r3
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	f040 815d 	bne.w	800cabc <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2200      	movs	r2, #0
 800c806:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800c810:	2b01      	cmp	r3, #1
 800c812:	d103      	bne.n	800c81c <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2208      	movs	r2, #8
 800c818:	701a      	strb	r2, [r3, #0]
 800c81a:	e002      	b.n	800c822 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2207      	movs	r2, #7
 800c820:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2205      	movs	r2, #5
 800c826:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c836:	2300      	movs	r3, #0
 800c838:	2200      	movs	r2, #0
 800c83a:	f001 fff5 	bl	800e828 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800c83e:	e13d      	b.n	800cabc <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c846:	2b00      	cmp	r3, #0
 800c848:	f000 813a 	beq.w	800cac0 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c852:	2101      	movs	r1, #1
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2208      	movs	r2, #8
 800c85c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2205      	movs	r2, #5
 800c862:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c872:	2300      	movs	r3, #0
 800c874:	2200      	movs	r2, #0
 800c876:	f001 ffd7 	bl	800e828 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800c87a:	e121      	b.n	800cac0 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800c882:	b29b      	uxth	r3, r3
 800c884:	4619      	mov	r1, r3
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f000 fd15 	bl	800d2b6 <USBH_SetCfg>
 800c88c:	4603      	mov	r3, r0
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d102      	bne.n	800c898 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2209      	movs	r2, #9
 800c896:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2201      	movs	r2, #1
 800c89c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	f001 ffba 	bl	800e828 <osMessageQueuePut>
#endif
#endif
      break;
 800c8b4:	e107      	b.n	800cac6 <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800c8bc:	f003 0320 	and.w	r3, r3, #32
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d015      	beq.n	800c8f0 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800c8c4:	2101      	movs	r1, #1
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f000 fd18 	bl	800d2fc <USBH_SetFeature>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c8d0:	7bbb      	ldrb	r3, [r7, #14]
 800c8d2:	b2db      	uxtb	r3, r3
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d103      	bne.n	800c8e0 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	220a      	movs	r2, #10
 800c8dc:	701a      	strb	r2, [r3, #0]
 800c8de:	e00a      	b.n	800c8f6 <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800c8e0:	7bbb      	ldrb	r3, [r7, #14]
 800c8e2:	b2db      	uxtb	r3, r3
 800c8e4:	2b03      	cmp	r3, #3
 800c8e6:	d106      	bne.n	800c8f6 <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	220a      	movs	r2, #10
 800c8ec:	701a      	strb	r2, [r3, #0]
 800c8ee:	e002      	b.n	800c8f6 <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	220a      	movs	r2, #10
 800c8f4:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2201      	movs	r2, #1
 800c8fa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c90a:	2300      	movs	r3, #0
 800c90c:	2200      	movs	r2, #0
 800c90e:	f001 ff8b 	bl	800e828 <osMessageQueuePut>
#endif
#endif
      break;
 800c912:	e0d8      	b.n	800cac6 <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d03f      	beq.n	800c99e <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2200      	movs	r2, #0
 800c922:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c926:	2300      	movs	r3, #0
 800c928:	73fb      	strb	r3, [r7, #15]
 800c92a:	e016      	b.n	800c95a <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c92c:	7bfa      	ldrb	r2, [r7, #15]
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	32de      	adds	r2, #222	; 0xde
 800c932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c936:	791a      	ldrb	r2, [r3, #4]
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800c93e:	429a      	cmp	r2, r3
 800c940:	d108      	bne.n	800c954 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 800c942:	7bfa      	ldrb	r2, [r7, #15]
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	32de      	adds	r2, #222	; 0xde
 800c948:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800c952:	e005      	b.n	800c960 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c954:	7bfb      	ldrb	r3, [r7, #15]
 800c956:	3301      	adds	r3, #1
 800c958:	73fb      	strb	r3, [r7, #15]
 800c95a:	7bfb      	ldrb	r3, [r7, #15]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d0e5      	beq.n	800c92c <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c966:	2b00      	cmp	r3, #0
 800c968:	d016      	beq.n	800c998 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c970:	689b      	ldr	r3, [r3, #8]
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	4798      	blx	r3
 800c976:	4603      	mov	r3, r0
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d109      	bne.n	800c990 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2206      	movs	r2, #6
 800c980:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c988:	2103      	movs	r1, #3
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	4798      	blx	r3
 800c98e:	e006      	b.n	800c99e <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	220d      	movs	r2, #13
 800c994:	701a      	strb	r2, [r3, #0]
 800c996:	e002      	b.n	800c99e <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	220d      	movs	r2, #13
 800c99c:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2205      	movs	r2, #5
 800c9a2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	f001 ff37 	bl	800e828 <osMessageQueuePut>
#endif
#endif
      break;
 800c9ba:	e084      	b.n	800cac6 <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d017      	beq.n	800c9f6 <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c9cc:	691b      	ldr	r3, [r3, #16]
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	4798      	blx	r3
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c9d6:	7bbb      	ldrb	r3, [r7, #14]
 800c9d8:	b2db      	uxtb	r3, r3
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d103      	bne.n	800c9e6 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	220b      	movs	r2, #11
 800c9e2:	701a      	strb	r2, [r3, #0]
 800c9e4:	e00a      	b.n	800c9fc <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 800c9e6:	7bbb      	ldrb	r3, [r7, #14]
 800c9e8:	b2db      	uxtb	r3, r3
 800c9ea:	2b02      	cmp	r3, #2
 800c9ec:	d106      	bne.n	800c9fc <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	220d      	movs	r2, #13
 800c9f2:	701a      	strb	r2, [r3, #0]
 800c9f4:	e002      	b.n	800c9fc <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	220d      	movs	r2, #13
 800c9fa:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2205      	movs	r2, #5
 800ca00:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ca10:	2300      	movs	r3, #0
 800ca12:	2200      	movs	r2, #0
 800ca14:	f001 ff08 	bl	800e828 <osMessageQueuePut>
#endif
#endif
      break;
 800ca18:	e055      	b.n	800cac6 <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d04f      	beq.n	800cac4 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ca2a:	695b      	ldr	r3, [r3, #20]
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	4798      	blx	r3
      }
      break;
 800ca30:	e048      	b.n	800cac4 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2200      	movs	r2, #0
 800ca36:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f7ff fccc 	bl	800c3d8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d009      	beq.n	800ca5e <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ca50:	68db      	ldr	r3, [r3, #12]
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2200      	movs	r2, #0
 800ca5a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d005      	beq.n	800ca74 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ca6e:	2105      	movs	r1, #5
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800ca7a:	b2db      	uxtb	r3, r3
 800ca7c:	2b01      	cmp	r3, #1
 800ca7e:	d107      	bne.n	800ca90 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2200      	movs	r2, #0
 800ca84:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f7ff fda4 	bl	800c5d6 <USBH_Start>
 800ca8e:	e002      	b.n	800ca96 <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f009 f975 	bl	8015d80 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	2201      	movs	r2, #1
 800ca9a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800caaa:	2300      	movs	r3, #0
 800caac:	2200      	movs	r2, #0
 800caae:	f001 febb 	bl	800e828 <osMessageQueuePut>
#endif
#endif
      break;
 800cab2:	e008      	b.n	800cac6 <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 800cab4:	bf00      	nop
 800cab6:	e006      	b.n	800cac6 <USBH_Process+0x4ce>
      break;
 800cab8:	bf00      	nop
 800caba:	e004      	b.n	800cac6 <USBH_Process+0x4ce>
      break;
 800cabc:	bf00      	nop
 800cabe:	e002      	b.n	800cac6 <USBH_Process+0x4ce>
    break;
 800cac0:	bf00      	nop
 800cac2:	e000      	b.n	800cac6 <USBH_Process+0x4ce>
      break;
 800cac4:	bf00      	nop
  }
  return USBH_OK;
 800cac6:	2300      	movs	r3, #0
}
 800cac8:	4618      	mov	r0, r3
 800caca:	3710      	adds	r7, #16
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}

0800cad0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b088      	sub	sp, #32
 800cad4:	af04      	add	r7, sp, #16
 800cad6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800cad8:	2301      	movs	r3, #1
 800cada:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800cadc:	2301      	movs	r3, #1
 800cade:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	785b      	ldrb	r3, [r3, #1]
 800cae4:	2b07      	cmp	r3, #7
 800cae6:	f200 8208 	bhi.w	800cefa <USBH_HandleEnum+0x42a>
 800caea:	a201      	add	r2, pc, #4	; (adr r2, 800caf0 <USBH_HandleEnum+0x20>)
 800caec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caf0:	0800cb11 	.word	0x0800cb11
 800caf4:	0800cbcf 	.word	0x0800cbcf
 800caf8:	0800cc39 	.word	0x0800cc39
 800cafc:	0800ccc7 	.word	0x0800ccc7
 800cb00:	0800cd31 	.word	0x0800cd31
 800cb04:	0800cda1 	.word	0x0800cda1
 800cb08:	0800ce3d 	.word	0x0800ce3d
 800cb0c:	0800cebb 	.word	0x0800cebb
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800cb10:	2108      	movs	r1, #8
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f000 faec 	bl	800d0f0 <USBH_Get_DevDesc>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cb1c:	7bbb      	ldrb	r3, [r7, #14]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d130      	bne.n	800cb84 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2201      	movs	r2, #1
 800cb30:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	7919      	ldrb	r1, [r3, #4]
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800cb42:	687a      	ldr	r2, [r7, #4]
 800cb44:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800cb46:	b292      	uxth	r2, r2
 800cb48:	9202      	str	r2, [sp, #8]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	9201      	str	r2, [sp, #4]
 800cb4e:	9300      	str	r3, [sp, #0]
 800cb50:	4603      	mov	r3, r0
 800cb52:	2280      	movs	r2, #128	; 0x80
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f001 fa73 	bl	800e040 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	7959      	ldrb	r1, [r3, #5]
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800cb6a:	687a      	ldr	r2, [r7, #4]
 800cb6c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cb6e:	b292      	uxth	r2, r2
 800cb70:	9202      	str	r2, [sp, #8]
 800cb72:	2200      	movs	r2, #0
 800cb74:	9201      	str	r2, [sp, #4]
 800cb76:	9300      	str	r3, [sp, #0]
 800cb78:	4603      	mov	r3, r0
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f001 fa5f 	bl	800e040 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800cb82:	e1bc      	b.n	800cefe <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cb84:	7bbb      	ldrb	r3, [r7, #14]
 800cb86:	2b03      	cmp	r3, #3
 800cb88:	f040 81b9 	bne.w	800cefe <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cb92:	3301      	adds	r3, #1
 800cb94:	b2da      	uxtb	r2, r3
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cba2:	2b03      	cmp	r3, #3
 800cba4:	d903      	bls.n	800cbae <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	220d      	movs	r2, #13
 800cbaa:	701a      	strb	r2, [r3, #0]
      break;
 800cbac:	e1a7      	b.n	800cefe <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	795b      	ldrb	r3, [r3, #5]
 800cbb2:	4619      	mov	r1, r3
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	f001 fa93 	bl	800e0e0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	791b      	ldrb	r3, [r3, #4]
 800cbbe:	4619      	mov	r1, r3
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	f001 fa8d 	bl	800e0e0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2200      	movs	r2, #0
 800cbca:	701a      	strb	r2, [r3, #0]
      break;
 800cbcc:	e197      	b.n	800cefe <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800cbce:	2112      	movs	r1, #18
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f000 fa8d 	bl	800d0f0 <USBH_Get_DevDesc>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cbda:	7bbb      	ldrb	r3, [r7, #14]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d103      	bne.n	800cbe8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2202      	movs	r2, #2
 800cbe4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cbe6:	e18c      	b.n	800cf02 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cbe8:	7bbb      	ldrb	r3, [r7, #14]
 800cbea:	2b03      	cmp	r3, #3
 800cbec:	f040 8189 	bne.w	800cf02 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cbf6:	3301      	adds	r3, #1
 800cbf8:	b2da      	uxtb	r2, r3
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cc06:	2b03      	cmp	r3, #3
 800cc08:	d903      	bls.n	800cc12 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	220d      	movs	r2, #13
 800cc0e:	701a      	strb	r2, [r3, #0]
      break;
 800cc10:	e177      	b.n	800cf02 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	795b      	ldrb	r3, [r3, #5]
 800cc16:	4619      	mov	r1, r3
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f001 fa61 	bl	800e0e0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	791b      	ldrb	r3, [r3, #4]
 800cc22:	4619      	mov	r1, r3
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f001 fa5b 	bl	800e0e0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2200      	movs	r2, #0
 800cc34:	701a      	strb	r2, [r3, #0]
      break;
 800cc36:	e164      	b.n	800cf02 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800cc38:	2101      	movs	r1, #1
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f000 fb17 	bl	800d26e <USBH_SetAddress>
 800cc40:	4603      	mov	r3, r0
 800cc42:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cc44:	7bbb      	ldrb	r3, [r7, #14]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d132      	bne.n	800ccb0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800cc4a:	2002      	movs	r0, #2
 800cc4c:	f009 f9ff 	bl	801604e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2201      	movs	r2, #1
 800cc54:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2203      	movs	r2, #3
 800cc5c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	7919      	ldrb	r1, [r3, #4]
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800cc6e:	687a      	ldr	r2, [r7, #4]
 800cc70:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800cc72:	b292      	uxth	r2, r2
 800cc74:	9202      	str	r2, [sp, #8]
 800cc76:	2200      	movs	r2, #0
 800cc78:	9201      	str	r2, [sp, #4]
 800cc7a:	9300      	str	r3, [sp, #0]
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	2280      	movs	r2, #128	; 0x80
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f001 f9dd 	bl	800e040 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	7959      	ldrb	r1, [r3, #5]
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800cc96:	687a      	ldr	r2, [r7, #4]
 800cc98:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cc9a:	b292      	uxth	r2, r2
 800cc9c:	9202      	str	r2, [sp, #8]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	9201      	str	r2, [sp, #4]
 800cca2:	9300      	str	r3, [sp, #0]
 800cca4:	4603      	mov	r3, r0
 800cca6:	2200      	movs	r2, #0
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f001 f9c9 	bl	800e040 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ccae:	e12a      	b.n	800cf06 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ccb0:	7bbb      	ldrb	r3, [r7, #14]
 800ccb2:	2b03      	cmp	r3, #3
 800ccb4:	f040 8127 	bne.w	800cf06 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	220d      	movs	r2, #13
 800ccbc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	705a      	strb	r2, [r3, #1]
      break;
 800ccc4:	e11f      	b.n	800cf06 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ccc6:	2109      	movs	r1, #9
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f000 fa3d 	bl	800d148 <USBH_Get_CfgDesc>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ccd2:	7bbb      	ldrb	r3, [r7, #14]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d103      	bne.n	800cce0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2204      	movs	r2, #4
 800ccdc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ccde:	e114      	b.n	800cf0a <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cce0:	7bbb      	ldrb	r3, [r7, #14]
 800cce2:	2b03      	cmp	r3, #3
 800cce4:	f040 8111 	bne.w	800cf0a <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ccee:	3301      	adds	r3, #1
 800ccf0:	b2da      	uxtb	r2, r3
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ccfe:	2b03      	cmp	r3, #3
 800cd00:	d903      	bls.n	800cd0a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	220d      	movs	r2, #13
 800cd06:	701a      	strb	r2, [r3, #0]
      break;
 800cd08:	e0ff      	b.n	800cf0a <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	795b      	ldrb	r3, [r3, #5]
 800cd0e:	4619      	mov	r1, r3
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f001 f9e5 	bl	800e0e0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	791b      	ldrb	r3, [r3, #4]
 800cd1a:	4619      	mov	r1, r3
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f001 f9df 	bl	800e0e0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2200      	movs	r2, #0
 800cd26:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	701a      	strb	r2, [r3, #0]
      break;
 800cd2e:	e0ec      	b.n	800cf0a <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800cd36:	4619      	mov	r1, r3
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f000 fa05 	bl	800d148 <USBH_Get_CfgDesc>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cd42:	7bbb      	ldrb	r3, [r7, #14]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d103      	bne.n	800cd50 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2205      	movs	r2, #5
 800cd4c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cd4e:	e0de      	b.n	800cf0e <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cd50:	7bbb      	ldrb	r3, [r7, #14]
 800cd52:	2b03      	cmp	r3, #3
 800cd54:	f040 80db 	bne.w	800cf0e <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cd5e:	3301      	adds	r3, #1
 800cd60:	b2da      	uxtb	r2, r3
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cd6e:	2b03      	cmp	r3, #3
 800cd70:	d903      	bls.n	800cd7a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	220d      	movs	r2, #13
 800cd76:	701a      	strb	r2, [r3, #0]
      break;
 800cd78:	e0c9      	b.n	800cf0e <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	795b      	ldrb	r3, [r3, #5]
 800cd7e:	4619      	mov	r1, r3
 800cd80:	6878      	ldr	r0, [r7, #4]
 800cd82:	f001 f9ad 	bl	800e0e0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	791b      	ldrb	r3, [r3, #4]
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f001 f9a7 	bl	800e0e0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2200      	movs	r2, #0
 800cd96:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	701a      	strb	r2, [r3, #0]
      break;
 800cd9e:	e0b6      	b.n	800cf0e <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d036      	beq.n	800ce18 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800cdb6:	23ff      	movs	r3, #255	; 0xff
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f000 f9ef 	bl	800d19c <USBH_Get_StringDesc>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cdc2:	7bbb      	ldrb	r3, [r7, #14]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d111      	bne.n	800cdec <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2206      	movs	r2, #6
 800cdcc:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2205      	movs	r2, #5
 800cdd2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cde2:	2300      	movs	r3, #0
 800cde4:	2200      	movs	r2, #0
 800cde6:	f001 fd1f 	bl	800e828 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cdea:	e092      	b.n	800cf12 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cdec:	7bbb      	ldrb	r3, [r7, #14]
 800cdee:	2b03      	cmp	r3, #3
 800cdf0:	f040 808f 	bne.w	800cf12 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2206      	movs	r2, #6
 800cdf8:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2205      	movs	r2, #5
 800cdfe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ce0e:	2300      	movs	r3, #0
 800ce10:	2200      	movs	r2, #0
 800ce12:	f001 fd09 	bl	800e828 <osMessageQueuePut>
      break;
 800ce16:	e07c      	b.n	800cf12 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2206      	movs	r2, #6
 800ce1c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2205      	movs	r2, #5
 800ce22:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ce32:	2300      	movs	r3, #0
 800ce34:	2200      	movs	r2, #0
 800ce36:	f001 fcf7 	bl	800e828 <osMessageQueuePut>
      break;
 800ce3a:	e06a      	b.n	800cf12 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d027      	beq.n	800ce96 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ce52:	23ff      	movs	r3, #255	; 0xff
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f000 f9a1 	bl	800d19c <USBH_Get_StringDesc>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ce5e:	7bbb      	ldrb	r3, [r7, #14]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d103      	bne.n	800ce6c <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2207      	movs	r2, #7
 800ce68:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ce6a:	e054      	b.n	800cf16 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ce6c:	7bbb      	ldrb	r3, [r7, #14]
 800ce6e:	2b03      	cmp	r3, #3
 800ce70:	d151      	bne.n	800cf16 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2207      	movs	r2, #7
 800ce76:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2205      	movs	r2, #5
 800ce7c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	2200      	movs	r2, #0
 800ce90:	f001 fcca 	bl	800e828 <osMessageQueuePut>
      break;
 800ce94:	e03f      	b.n	800cf16 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2207      	movs	r2, #7
 800ce9a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2205      	movs	r2, #5
 800cea0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	f001 fcb8 	bl	800e828 <osMessageQueuePut>
      break;
 800ceb8:	e02d      	b.n	800cf16 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d017      	beq.n	800cef4 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ced0:	23ff      	movs	r3, #255	; 0xff
 800ced2:	6878      	ldr	r0, [r7, #4]
 800ced4:	f000 f962 	bl	800d19c <USBH_Get_StringDesc>
 800ced8:	4603      	mov	r3, r0
 800ceda:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cedc:	7bbb      	ldrb	r3, [r7, #14]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d102      	bne.n	800cee8 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800cee2:	2300      	movs	r3, #0
 800cee4:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800cee6:	e018      	b.n	800cf1a <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cee8:	7bbb      	ldrb	r3, [r7, #14]
 800ceea:	2b03      	cmp	r3, #3
 800ceec:	d115      	bne.n	800cf1a <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800ceee:	2300      	movs	r3, #0
 800cef0:	73fb      	strb	r3, [r7, #15]
      break;
 800cef2:	e012      	b.n	800cf1a <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800cef4:	2300      	movs	r3, #0
 800cef6:	73fb      	strb	r3, [r7, #15]
      break;
 800cef8:	e00f      	b.n	800cf1a <USBH_HandleEnum+0x44a>

    default:
      break;
 800cefa:	bf00      	nop
 800cefc:	e00e      	b.n	800cf1c <USBH_HandleEnum+0x44c>
      break;
 800cefe:	bf00      	nop
 800cf00:	e00c      	b.n	800cf1c <USBH_HandleEnum+0x44c>
      break;
 800cf02:	bf00      	nop
 800cf04:	e00a      	b.n	800cf1c <USBH_HandleEnum+0x44c>
      break;
 800cf06:	bf00      	nop
 800cf08:	e008      	b.n	800cf1c <USBH_HandleEnum+0x44c>
      break;
 800cf0a:	bf00      	nop
 800cf0c:	e006      	b.n	800cf1c <USBH_HandleEnum+0x44c>
      break;
 800cf0e:	bf00      	nop
 800cf10:	e004      	b.n	800cf1c <USBH_HandleEnum+0x44c>
      break;
 800cf12:	bf00      	nop
 800cf14:	e002      	b.n	800cf1c <USBH_HandleEnum+0x44c>
      break;
 800cf16:	bf00      	nop
 800cf18:	e000      	b.n	800cf1c <USBH_HandleEnum+0x44c>
      break;
 800cf1a:	bf00      	nop
  }
  return Status;
 800cf1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3710      	adds	r7, #16
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}
 800cf26:	bf00      	nop

0800cf28 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800cf28:	b480      	push	{r7}
 800cf2a:	b083      	sub	sp, #12
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
 800cf30:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	683a      	ldr	r2, [r7, #0]
 800cf36:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800cf3a:	bf00      	nop
 800cf3c:	370c      	adds	r7, #12
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf44:	4770      	bx	lr

0800cf46 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800cf46:	b580      	push	{r7, lr}
 800cf48:	b082      	sub	sp, #8
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cf54:	1c5a      	adds	r2, r3, #1
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800cf5c:	6878      	ldr	r0, [r7, #4]
 800cf5e:	f000 f804 	bl	800cf6a <USBH_HandleSof>
}
 800cf62:	bf00      	nop
 800cf64:	3708      	adds	r7, #8
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}

0800cf6a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800cf6a:	b580      	push	{r7, lr}
 800cf6c:	b082      	sub	sp, #8
 800cf6e:	af00      	add	r7, sp, #0
 800cf70:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	781b      	ldrb	r3, [r3, #0]
 800cf76:	b2db      	uxtb	r3, r3
 800cf78:	2b0b      	cmp	r3, #11
 800cf7a:	d10a      	bne.n	800cf92 <USBH_HandleSof+0x28>
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d005      	beq.n	800cf92 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cf8c:	699b      	ldr	r3, [r3, #24]
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	4798      	blx	r3
  }
}
 800cf92:	bf00      	nop
 800cf94:	3708      	adds	r7, #8
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}

0800cf9a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800cf9a:	b580      	push	{r7, lr}
 800cf9c:	b082      	sub	sp, #8
 800cf9e:	af00      	add	r7, sp, #0
 800cfa0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2201      	movs	r2, #1
 800cfa6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2201      	movs	r2, #1
 800cfae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	f001 fc31 	bl	800e828 <osMessageQueuePut>
#endif
#endif

  return;
 800cfc6:	bf00      	nop
}
 800cfc8:	3708      	adds	r7, #8
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}

0800cfce <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800cfce:	b480      	push	{r7}
 800cfd0:	b083      	sub	sp, #12
 800cfd2:	af00      	add	r7, sp, #0
 800cfd4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2200      	movs	r2, #0
 800cfda:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800cfde:	bf00      	nop
}
 800cfe0:	370c      	adds	r7, #12
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe8:	4770      	bx	lr

0800cfea <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800cfea:	b580      	push	{r7, lr}
 800cfec:	b082      	sub	sp, #8
 800cfee:	af00      	add	r7, sp, #0
 800cff0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2201      	movs	r2, #1
 800cff6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2200      	movs	r2, #0
 800cffe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2200      	movs	r2, #0
 800d006:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2201      	movs	r2, #1
 800d00e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d01e:	2300      	movs	r3, #0
 800d020:	2200      	movs	r2, #0
 800d022:	f001 fc01 	bl	800e828 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800d026:	2300      	movs	r3, #0
}
 800d028:	4618      	mov	r0, r3
 800d02a:	3708      	adds	r7, #8
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}

0800d030 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b082      	sub	sp, #8
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2201      	movs	r2, #1
 800d03c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2200      	movs	r2, #0
 800d044:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2200      	movs	r2, #0
 800d04c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f008 feb0 	bl	8015db6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	791b      	ldrb	r3, [r3, #4]
 800d05a:	4619      	mov	r1, r3
 800d05c:	6878      	ldr	r0, [r7, #4]
 800d05e:	f001 f83f 	bl	800e0e0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	795b      	ldrb	r3, [r3, #5]
 800d066:	4619      	mov	r1, r3
 800d068:	6878      	ldr	r0, [r7, #4]
 800d06a:	f001 f839 	bl	800e0e0 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2201      	movs	r2, #1
 800d072:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d082:	2300      	movs	r3, #0
 800d084:	2200      	movs	r2, #0
 800d086:	f001 fbcf 	bl	800e828 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800d08a:	2300      	movs	r3, #0
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	3708      	adds	r7, #8
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}

0800d094 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b084      	sub	sp, #16
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d0a8:	f04f 33ff 	mov.w	r3, #4294967295
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	f001 fc1b 	bl	800e8e8 <osMessageQueueGet>
 800d0b2:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d1f0      	bne.n	800d09c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f7ff fa9c 	bl	800c5f8 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d0c0:	e7ec      	b.n	800d09c <USBH_Process_OS+0x8>

0800d0c2 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800d0c2:	b580      	push	{r7, lr}
 800d0c4:	b082      	sub	sp, #8
 800d0c6:	af00      	add	r7, sp, #0
 800d0c8:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2201      	movs	r2, #1
 800d0ce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d0de:	2300      	movs	r3, #0
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	f001 fba1 	bl	800e828 <osMessageQueuePut>
#endif

  return USBH_OK;
 800d0e6:	2300      	movs	r3, #0
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	3708      	adds	r7, #8
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}

0800d0f0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b086      	sub	sp, #24
 800d0f4:	af02      	add	r7, sp, #8
 800d0f6:	6078      	str	r0, [r7, #4]
 800d0f8:	460b      	mov	r3, r1
 800d0fa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800d0fc:	887b      	ldrh	r3, [r7, #2]
 800d0fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d102:	d901      	bls.n	800d108 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d104:	2303      	movs	r3, #3
 800d106:	e01b      	b.n	800d140 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800d10e:	887b      	ldrh	r3, [r7, #2]
 800d110:	9300      	str	r3, [sp, #0]
 800d112:	4613      	mov	r3, r2
 800d114:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d118:	2100      	movs	r1, #0
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f000 f872 	bl	800d204 <USBH_GetDescriptor>
 800d120:	4603      	mov	r3, r0
 800d122:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800d124:	7bfb      	ldrb	r3, [r7, #15]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d109      	bne.n	800d13e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d130:	887a      	ldrh	r2, [r7, #2]
 800d132:	4619      	mov	r1, r3
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f000 f929 	bl	800d38c <USBH_ParseDevDesc>
 800d13a:	4603      	mov	r3, r0
 800d13c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d13e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d140:	4618      	mov	r0, r3
 800d142:	3710      	adds	r7, #16
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}

0800d148 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b086      	sub	sp, #24
 800d14c:	af02      	add	r7, sp, #8
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	460b      	mov	r3, r1
 800d152:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	331c      	adds	r3, #28
 800d158:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800d15a:	887b      	ldrh	r3, [r7, #2]
 800d15c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d160:	d901      	bls.n	800d166 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d162:	2303      	movs	r3, #3
 800d164:	e016      	b.n	800d194 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d166:	887b      	ldrh	r3, [r7, #2]
 800d168:	9300      	str	r3, [sp, #0]
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d170:	2100      	movs	r1, #0
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f000 f846 	bl	800d204 <USBH_GetDescriptor>
 800d178:	4603      	mov	r3, r0
 800d17a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800d17c:	7bfb      	ldrb	r3, [r7, #15]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d107      	bne.n	800d192 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800d182:	887b      	ldrh	r3, [r7, #2]
 800d184:	461a      	mov	r2, r3
 800d186:	68b9      	ldr	r1, [r7, #8]
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f000 f9b3 	bl	800d4f4 <USBH_ParseCfgDesc>
 800d18e:	4603      	mov	r3, r0
 800d190:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d192:	7bfb      	ldrb	r3, [r7, #15]
}
 800d194:	4618      	mov	r0, r3
 800d196:	3710      	adds	r7, #16
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd80      	pop	{r7, pc}

0800d19c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b088      	sub	sp, #32
 800d1a0:	af02      	add	r7, sp, #8
 800d1a2:	60f8      	str	r0, [r7, #12]
 800d1a4:	607a      	str	r2, [r7, #4]
 800d1a6:	461a      	mov	r2, r3
 800d1a8:	460b      	mov	r3, r1
 800d1aa:	72fb      	strb	r3, [r7, #11]
 800d1ac:	4613      	mov	r3, r2
 800d1ae:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800d1b0:	893b      	ldrh	r3, [r7, #8]
 800d1b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d1b6:	d802      	bhi.n	800d1be <USBH_Get_StringDesc+0x22>
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d101      	bne.n	800d1c2 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d1be:	2303      	movs	r3, #3
 800d1c0:	e01c      	b.n	800d1fc <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800d1c2:	7afb      	ldrb	r3, [r7, #11]
 800d1c4:	b29b      	uxth	r3, r3
 800d1c6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800d1ca:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800d1d2:	893b      	ldrh	r3, [r7, #8]
 800d1d4:	9300      	str	r3, [sp, #0]
 800d1d6:	460b      	mov	r3, r1
 800d1d8:	2100      	movs	r1, #0
 800d1da:	68f8      	ldr	r0, [r7, #12]
 800d1dc:	f000 f812 	bl	800d204 <USBH_GetDescriptor>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800d1e4:	7dfb      	ldrb	r3, [r7, #23]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d107      	bne.n	800d1fa <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d1f0:	893a      	ldrh	r2, [r7, #8]
 800d1f2:	6879      	ldr	r1, [r7, #4]
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f000 fb93 	bl	800d920 <USBH_ParseStringDesc>
  }

  return status;
 800d1fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3718      	adds	r7, #24
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}

0800d204 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b084      	sub	sp, #16
 800d208:	af00      	add	r7, sp, #0
 800d20a:	60f8      	str	r0, [r7, #12]
 800d20c:	607b      	str	r3, [r7, #4]
 800d20e:	460b      	mov	r3, r1
 800d210:	72fb      	strb	r3, [r7, #11]
 800d212:	4613      	mov	r3, r2
 800d214:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	789b      	ldrb	r3, [r3, #2]
 800d21a:	2b01      	cmp	r3, #1
 800d21c:	d11c      	bne.n	800d258 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d21e:	7afb      	ldrb	r3, [r7, #11]
 800d220:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d224:	b2da      	uxtb	r2, r3
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	2206      	movs	r2, #6
 800d22e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	893a      	ldrh	r2, [r7, #8]
 800d234:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d236:	893b      	ldrh	r3, [r7, #8]
 800d238:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d23c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d240:	d104      	bne.n	800d24c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	f240 4209 	movw	r2, #1033	; 0x409
 800d248:	829a      	strh	r2, [r3, #20]
 800d24a:	e002      	b.n	800d252 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	2200      	movs	r2, #0
 800d250:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	8b3a      	ldrh	r2, [r7, #24]
 800d256:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d258:	8b3b      	ldrh	r3, [r7, #24]
 800d25a:	461a      	mov	r2, r3
 800d25c:	6879      	ldr	r1, [r7, #4]
 800d25e:	68f8      	ldr	r0, [r7, #12]
 800d260:	f000 fbac 	bl	800d9bc <USBH_CtlReq>
 800d264:	4603      	mov	r3, r0
}
 800d266:	4618      	mov	r0, r3
 800d268:	3710      	adds	r7, #16
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}

0800d26e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d26e:	b580      	push	{r7, lr}
 800d270:	b082      	sub	sp, #8
 800d272:	af00      	add	r7, sp, #0
 800d274:	6078      	str	r0, [r7, #4]
 800d276:	460b      	mov	r3, r1
 800d278:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	789b      	ldrb	r3, [r3, #2]
 800d27e:	2b01      	cmp	r3, #1
 800d280:	d10f      	bne.n	800d2a2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2200      	movs	r2, #0
 800d286:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2205      	movs	r2, #5
 800d28c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d28e:	78fb      	ldrb	r3, [r7, #3]
 800d290:	b29a      	uxth	r2, r3
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2200      	movs	r2, #0
 800d29a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	2100      	movs	r1, #0
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f000 fb88 	bl	800d9bc <USBH_CtlReq>
 800d2ac:	4603      	mov	r3, r0
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3708      	adds	r7, #8
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}

0800d2b6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d2b6:	b580      	push	{r7, lr}
 800d2b8:	b082      	sub	sp, #8
 800d2ba:	af00      	add	r7, sp, #0
 800d2bc:	6078      	str	r0, [r7, #4]
 800d2be:	460b      	mov	r3, r1
 800d2c0:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	789b      	ldrb	r3, [r3, #2]
 800d2c6:	2b01      	cmp	r3, #1
 800d2c8:	d10e      	bne.n	800d2e8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2209      	movs	r2, #9
 800d2d4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	887a      	ldrh	r2, [r7, #2]
 800d2da:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	2100      	movs	r1, #0
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f000 fb65 	bl	800d9bc <USBH_CtlReq>
 800d2f2:	4603      	mov	r3, r0
}
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	3708      	adds	r7, #8
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}

0800d2fc <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b082      	sub	sp, #8
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	460b      	mov	r3, r1
 800d306:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	789b      	ldrb	r3, [r3, #2]
 800d30c:	2b01      	cmp	r3, #1
 800d30e:	d10f      	bne.n	800d330 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2200      	movs	r2, #0
 800d314:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2203      	movs	r2, #3
 800d31a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d31c:	78fb      	ldrb	r3, [r7, #3]
 800d31e:	b29a      	uxth	r2, r3
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2200      	movs	r2, #0
 800d328:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2200      	movs	r2, #0
 800d32e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d330:	2200      	movs	r2, #0
 800d332:	2100      	movs	r1, #0
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f000 fb41 	bl	800d9bc <USBH_CtlReq>
 800d33a:	4603      	mov	r3, r0
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3708      	adds	r7, #8
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}

0800d344 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b082      	sub	sp, #8
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	460b      	mov	r3, r1
 800d34e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	789b      	ldrb	r3, [r3, #2]
 800d354:	2b01      	cmp	r3, #1
 800d356:	d10f      	bne.n	800d378 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2202      	movs	r2, #2
 800d35c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2201      	movs	r2, #1
 800d362:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2200      	movs	r2, #0
 800d368:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d36a:	78fb      	ldrb	r3, [r7, #3]
 800d36c:	b29a      	uxth	r2, r3
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	2200      	movs	r2, #0
 800d376:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d378:	2200      	movs	r2, #0
 800d37a:	2100      	movs	r1, #0
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	f000 fb1d 	bl	800d9bc <USBH_CtlReq>
 800d382:	4603      	mov	r3, r0
}
 800d384:	4618      	mov	r0, r3
 800d386:	3708      	adds	r7, #8
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}

0800d38c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d38c:	b480      	push	{r7}
 800d38e:	b087      	sub	sp, #28
 800d390:	af00      	add	r7, sp, #0
 800d392:	60f8      	str	r0, [r7, #12]
 800d394:	60b9      	str	r1, [r7, #8]
 800d396:	4613      	mov	r3, r2
 800d398:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	f203 3326 	addw	r3, r3, #806	; 0x326
 800d3a0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800d3a6:	68bb      	ldr	r3, [r7, #8]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d101      	bne.n	800d3b0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800d3ac:	2302      	movs	r3, #2
 800d3ae:	e098      	b.n	800d4e2 <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	781a      	ldrb	r2, [r3, #0]
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	785a      	ldrb	r2, [r3, #1]
 800d3bc:	693b      	ldr	r3, [r7, #16]
 800d3be:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	3302      	adds	r3, #2
 800d3c4:	781b      	ldrb	r3, [r3, #0]
 800d3c6:	b29a      	uxth	r2, r3
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	3303      	adds	r3, #3
 800d3cc:	781b      	ldrb	r3, [r3, #0]
 800d3ce:	b29b      	uxth	r3, r3
 800d3d0:	021b      	lsls	r3, r3, #8
 800d3d2:	b29b      	uxth	r3, r3
 800d3d4:	4313      	orrs	r3, r2
 800d3d6:	b29a      	uxth	r2, r3
 800d3d8:	693b      	ldr	r3, [r7, #16]
 800d3da:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	791a      	ldrb	r2, [r3, #4]
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	795a      	ldrb	r2, [r3, #5]
 800d3e8:	693b      	ldr	r3, [r7, #16]
 800d3ea:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	799a      	ldrb	r2, [r3, #6]
 800d3f0:	693b      	ldr	r3, [r7, #16]
 800d3f2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	79da      	ldrb	r2, [r3, #7]
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d402:	2b00      	cmp	r3, #0
 800d404:	d004      	beq.n	800d410 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800d40c:	2b01      	cmp	r3, #1
 800d40e:	d11b      	bne.n	800d448 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	79db      	ldrb	r3, [r3, #7]
 800d414:	2b20      	cmp	r3, #32
 800d416:	dc0f      	bgt.n	800d438 <USBH_ParseDevDesc+0xac>
 800d418:	2b08      	cmp	r3, #8
 800d41a:	db0f      	blt.n	800d43c <USBH_ParseDevDesc+0xb0>
 800d41c:	3b08      	subs	r3, #8
 800d41e:	4a34      	ldr	r2, [pc, #208]	; (800d4f0 <USBH_ParseDevDesc+0x164>)
 800d420:	fa22 f303 	lsr.w	r3, r2, r3
 800d424:	f003 0301 	and.w	r3, r3, #1
 800d428:	2b00      	cmp	r3, #0
 800d42a:	bf14      	ite	ne
 800d42c:	2301      	movne	r3, #1
 800d42e:	2300      	moveq	r3, #0
 800d430:	b2db      	uxtb	r3, r3
 800d432:	2b00      	cmp	r3, #0
 800d434:	d106      	bne.n	800d444 <USBH_ParseDevDesc+0xb8>
 800d436:	e001      	b.n	800d43c <USBH_ParseDevDesc+0xb0>
 800d438:	2b40      	cmp	r3, #64	; 0x40
 800d43a:	d003      	beq.n	800d444 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	2208      	movs	r2, #8
 800d440:	71da      	strb	r2, [r3, #7]
        break;
 800d442:	e000      	b.n	800d446 <USBH_ParseDevDesc+0xba>
        break;
 800d444:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800d446:	e00e      	b.n	800d466 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d44e:	2b02      	cmp	r3, #2
 800d450:	d107      	bne.n	800d462 <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800d452:	693b      	ldr	r3, [r7, #16]
 800d454:	79db      	ldrb	r3, [r3, #7]
 800d456:	2b08      	cmp	r3, #8
 800d458:	d005      	beq.n	800d466 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800d45a:	693b      	ldr	r3, [r7, #16]
 800d45c:	2208      	movs	r2, #8
 800d45e:	71da      	strb	r2, [r3, #7]
 800d460:	e001      	b.n	800d466 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800d462:	2303      	movs	r3, #3
 800d464:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800d466:	88fb      	ldrh	r3, [r7, #6]
 800d468:	2b08      	cmp	r3, #8
 800d46a:	d939      	bls.n	800d4e0 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800d46c:	68bb      	ldr	r3, [r7, #8]
 800d46e:	3308      	adds	r3, #8
 800d470:	781b      	ldrb	r3, [r3, #0]
 800d472:	b29a      	uxth	r2, r3
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	3309      	adds	r3, #9
 800d478:	781b      	ldrb	r3, [r3, #0]
 800d47a:	b29b      	uxth	r3, r3
 800d47c:	021b      	lsls	r3, r3, #8
 800d47e:	b29b      	uxth	r3, r3
 800d480:	4313      	orrs	r3, r2
 800d482:	b29a      	uxth	r2, r3
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	330a      	adds	r3, #10
 800d48c:	781b      	ldrb	r3, [r3, #0]
 800d48e:	b29a      	uxth	r2, r3
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	330b      	adds	r3, #11
 800d494:	781b      	ldrb	r3, [r3, #0]
 800d496:	b29b      	uxth	r3, r3
 800d498:	021b      	lsls	r3, r3, #8
 800d49a:	b29b      	uxth	r3, r3
 800d49c:	4313      	orrs	r3, r2
 800d49e:	b29a      	uxth	r2, r3
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	330c      	adds	r3, #12
 800d4a8:	781b      	ldrb	r3, [r3, #0]
 800d4aa:	b29a      	uxth	r2, r3
 800d4ac:	68bb      	ldr	r3, [r7, #8]
 800d4ae:	330d      	adds	r3, #13
 800d4b0:	781b      	ldrb	r3, [r3, #0]
 800d4b2:	b29b      	uxth	r3, r3
 800d4b4:	021b      	lsls	r3, r3, #8
 800d4b6:	b29b      	uxth	r3, r3
 800d4b8:	4313      	orrs	r3, r2
 800d4ba:	b29a      	uxth	r2, r3
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	7b9a      	ldrb	r2, [r3, #14]
 800d4c4:	693b      	ldr	r3, [r7, #16]
 800d4c6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	7bda      	ldrb	r2, [r3, #15]
 800d4cc:	693b      	ldr	r3, [r7, #16]
 800d4ce:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800d4d0:	68bb      	ldr	r3, [r7, #8]
 800d4d2:	7c1a      	ldrb	r2, [r3, #16]
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	7c5a      	ldrb	r2, [r3, #17]
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800d4e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	371c      	adds	r7, #28
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ec:	4770      	bx	lr
 800d4ee:	bf00      	nop
 800d4f0:	01000101 	.word	0x01000101

0800d4f4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b08c      	sub	sp, #48	; 0x30
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	60f8      	str	r0, [r7, #12]
 800d4fc:	60b9      	str	r1, [r7, #8]
 800d4fe:	4613      	mov	r3, r2
 800d500:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d508:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800d50a:	2300      	movs	r3, #0
 800d50c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d510:	2300      	movs	r3, #0
 800d512:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800d516:	2300      	movs	r3, #0
 800d518:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d101      	bne.n	800d526 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800d522:	2302      	movs	r3, #2
 800d524:	e0db      	b.n	800d6de <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	781a      	ldrb	r2, [r3, #0]
 800d52e:	6a3b      	ldr	r3, [r7, #32]
 800d530:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	785a      	ldrb	r2, [r3, #1]
 800d536:	6a3b      	ldr	r3, [r7, #32]
 800d538:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	3302      	adds	r3, #2
 800d53e:	781b      	ldrb	r3, [r3, #0]
 800d540:	b29a      	uxth	r2, r3
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	3303      	adds	r3, #3
 800d546:	781b      	ldrb	r3, [r3, #0]
 800d548:	b29b      	uxth	r3, r3
 800d54a:	021b      	lsls	r3, r3, #8
 800d54c:	b29b      	uxth	r3, r3
 800d54e:	4313      	orrs	r3, r2
 800d550:	b29b      	uxth	r3, r3
 800d552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d556:	bf28      	it	cs
 800d558:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800d55c:	b29a      	uxth	r2, r3
 800d55e:	6a3b      	ldr	r3, [r7, #32]
 800d560:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	791a      	ldrb	r2, [r3, #4]
 800d566:	6a3b      	ldr	r3, [r7, #32]
 800d568:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	795a      	ldrb	r2, [r3, #5]
 800d56e:	6a3b      	ldr	r3, [r7, #32]
 800d570:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	799a      	ldrb	r2, [r3, #6]
 800d576:	6a3b      	ldr	r3, [r7, #32]
 800d578:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	79da      	ldrb	r2, [r3, #7]
 800d57e:	6a3b      	ldr	r3, [r7, #32]
 800d580:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	7a1a      	ldrb	r2, [r3, #8]
 800d586:	6a3b      	ldr	r3, [r7, #32]
 800d588:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800d58a:	6a3b      	ldr	r3, [r7, #32]
 800d58c:	781b      	ldrb	r3, [r3, #0]
 800d58e:	2b09      	cmp	r3, #9
 800d590:	d002      	beq.n	800d598 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800d592:	6a3b      	ldr	r3, [r7, #32]
 800d594:	2209      	movs	r2, #9
 800d596:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d598:	88fb      	ldrh	r3, [r7, #6]
 800d59a:	2b09      	cmp	r3, #9
 800d59c:	f240 809d 	bls.w	800d6da <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 800d5a0:	2309      	movs	r3, #9
 800d5a2:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d5a8:	e081      	b.n	800d6ae <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d5aa:	f107 0316 	add.w	r3, r7, #22
 800d5ae:	4619      	mov	r1, r3
 800d5b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5b2:	f000 f9e8 	bl	800d986 <USBH_GetNextDesc>
 800d5b6:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800d5b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ba:	785b      	ldrb	r3, [r3, #1]
 800d5bc:	2b04      	cmp	r3, #4
 800d5be:	d176      	bne.n	800d6ae <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800d5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5c2:	781b      	ldrb	r3, [r3, #0]
 800d5c4:	2b09      	cmp	r3, #9
 800d5c6:	d002      	beq.n	800d5ce <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800d5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ca:	2209      	movs	r2, #9
 800d5cc:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800d5ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5d2:	221a      	movs	r2, #26
 800d5d4:	fb02 f303 	mul.w	r3, r2, r3
 800d5d8:	3308      	adds	r3, #8
 800d5da:	6a3a      	ldr	r2, [r7, #32]
 800d5dc:	4413      	add	r3, r2
 800d5de:	3302      	adds	r3, #2
 800d5e0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d5e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d5e4:	69f8      	ldr	r0, [r7, #28]
 800d5e6:	f000 f87e 	bl	800d6e6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d5f4:	e043      	b.n	800d67e <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d5f6:	f107 0316 	add.w	r3, r7, #22
 800d5fa:	4619      	mov	r1, r3
 800d5fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5fe:	f000 f9c2 	bl	800d986 <USBH_GetNextDesc>
 800d602:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d606:	785b      	ldrb	r3, [r3, #1]
 800d608:	2b05      	cmp	r3, #5
 800d60a:	d138      	bne.n	800d67e <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800d60c:	69fb      	ldr	r3, [r7, #28]
 800d60e:	795b      	ldrb	r3, [r3, #5]
 800d610:	2b01      	cmp	r3, #1
 800d612:	d113      	bne.n	800d63c <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800d614:	69fb      	ldr	r3, [r7, #28]
 800d616:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800d618:	2b02      	cmp	r3, #2
 800d61a:	d003      	beq.n	800d624 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800d61c:	69fb      	ldr	r3, [r7, #28]
 800d61e:	799b      	ldrb	r3, [r3, #6]
 800d620:	2b03      	cmp	r3, #3
 800d622:	d10b      	bne.n	800d63c <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d624:	69fb      	ldr	r3, [r7, #28]
 800d626:	79db      	ldrb	r3, [r3, #7]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d10b      	bne.n	800d644 <USBH_ParseCfgDesc+0x150>
 800d62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d62e:	781b      	ldrb	r3, [r3, #0]
 800d630:	2b09      	cmp	r3, #9
 800d632:	d007      	beq.n	800d644 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 800d634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d636:	2209      	movs	r2, #9
 800d638:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d63a:	e003      	b.n	800d644 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800d63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d63e:	2207      	movs	r2, #7
 800d640:	701a      	strb	r2, [r3, #0]
 800d642:	e000      	b.n	800d646 <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d644:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d646:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d64a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d64e:	3201      	adds	r2, #1
 800d650:	00d2      	lsls	r2, r2, #3
 800d652:	211a      	movs	r1, #26
 800d654:	fb01 f303 	mul.w	r3, r1, r3
 800d658:	4413      	add	r3, r2
 800d65a:	3308      	adds	r3, #8
 800d65c:	6a3a      	ldr	r2, [r7, #32]
 800d65e:	4413      	add	r3, r2
 800d660:	3304      	adds	r3, #4
 800d662:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800d664:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d666:	69b9      	ldr	r1, [r7, #24]
 800d668:	68f8      	ldr	r0, [r7, #12]
 800d66a:	f000 f870 	bl	800d74e <USBH_ParseEPDesc>
 800d66e:	4603      	mov	r3, r0
 800d670:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800d674:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d678:	3301      	adds	r3, #1
 800d67a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d67e:	69fb      	ldr	r3, [r7, #28]
 800d680:	791b      	ldrb	r3, [r3, #4]
 800d682:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d686:	429a      	cmp	r2, r3
 800d688:	d204      	bcs.n	800d694 <USBH_ParseCfgDesc+0x1a0>
 800d68a:	6a3b      	ldr	r3, [r7, #32]
 800d68c:	885a      	ldrh	r2, [r3, #2]
 800d68e:	8afb      	ldrh	r3, [r7, #22]
 800d690:	429a      	cmp	r2, r3
 800d692:	d8b0      	bhi.n	800d5f6 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800d694:	69fb      	ldr	r3, [r7, #28]
 800d696:	791b      	ldrb	r3, [r3, #4]
 800d698:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d69c:	429a      	cmp	r2, r3
 800d69e:	d201      	bcs.n	800d6a4 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 800d6a0:	2303      	movs	r3, #3
 800d6a2:	e01c      	b.n	800d6de <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 800d6a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6a8:	3301      	adds	r3, #1
 800d6aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d6ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6b2:	2b01      	cmp	r3, #1
 800d6b4:	d805      	bhi.n	800d6c2 <USBH_ParseCfgDesc+0x1ce>
 800d6b6:	6a3b      	ldr	r3, [r7, #32]
 800d6b8:	885a      	ldrh	r2, [r3, #2]
 800d6ba:	8afb      	ldrh	r3, [r7, #22]
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	f63f af74 	bhi.w	800d5aa <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800d6c2:	6a3b      	ldr	r3, [r7, #32]
 800d6c4:	791b      	ldrb	r3, [r3, #4]
 800d6c6:	2b02      	cmp	r3, #2
 800d6c8:	bf28      	it	cs
 800d6ca:	2302      	movcs	r3, #2
 800d6cc:	b2db      	uxtb	r3, r3
 800d6ce:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d6d2:	429a      	cmp	r2, r3
 800d6d4:	d201      	bcs.n	800d6da <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 800d6d6:	2303      	movs	r3, #3
 800d6d8:	e001      	b.n	800d6de <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 800d6da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	3730      	adds	r7, #48	; 0x30
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}

0800d6e6 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800d6e6:	b480      	push	{r7}
 800d6e8:	b083      	sub	sp, #12
 800d6ea:	af00      	add	r7, sp, #0
 800d6ec:	6078      	str	r0, [r7, #4]
 800d6ee:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	781a      	ldrb	r2, [r3, #0]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	785a      	ldrb	r2, [r3, #1]
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	789a      	ldrb	r2, [r3, #2]
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	78da      	ldrb	r2, [r3, #3]
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	3304      	adds	r3, #4
 800d714:	781b      	ldrb	r3, [r3, #0]
 800d716:	2b02      	cmp	r3, #2
 800d718:	bf28      	it	cs
 800d71a:	2302      	movcs	r3, #2
 800d71c:	b2da      	uxtb	r2, r3
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	795a      	ldrb	r2, [r3, #5]
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	799a      	ldrb	r2, [r3, #6]
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	79da      	ldrb	r2, [r3, #7]
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	7a1a      	ldrb	r2, [r3, #8]
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	721a      	strb	r2, [r3, #8]
}
 800d742:	bf00      	nop
 800d744:	370c      	adds	r7, #12
 800d746:	46bd      	mov	sp, r7
 800d748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74c:	4770      	bx	lr

0800d74e <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800d74e:	b480      	push	{r7}
 800d750:	b087      	sub	sp, #28
 800d752:	af00      	add	r7, sp, #0
 800d754:	60f8      	str	r0, [r7, #12]
 800d756:	60b9      	str	r1, [r7, #8]
 800d758:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800d75a:	2300      	movs	r3, #0
 800d75c:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	781a      	ldrb	r2, [r3, #0]
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	785a      	ldrb	r2, [r3, #1]
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	789a      	ldrb	r2, [r3, #2]
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	78da      	ldrb	r2, [r3, #3]
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	3304      	adds	r3, #4
 800d782:	781b      	ldrb	r3, [r3, #0]
 800d784:	b29a      	uxth	r2, r3
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	3305      	adds	r3, #5
 800d78a:	781b      	ldrb	r3, [r3, #0]
 800d78c:	b29b      	uxth	r3, r3
 800d78e:	021b      	lsls	r3, r3, #8
 800d790:	b29b      	uxth	r3, r3
 800d792:	4313      	orrs	r3, r2
 800d794:	b29a      	uxth	r2, r3
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	799a      	ldrb	r2, [r3, #6]
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	889b      	ldrh	r3, [r3, #4]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d009      	beq.n	800d7be <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800d7ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d7b2:	d804      	bhi.n	800d7be <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800d7b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d7bc:	d901      	bls.n	800d7c2 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 800d7be:	2303      	movs	r3, #3
 800d7c0:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d136      	bne.n	800d83a <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	78db      	ldrb	r3, [r3, #3]
 800d7d0:	f003 0303 	and.w	r3, r3, #3
 800d7d4:	2b02      	cmp	r3, #2
 800d7d6:	d108      	bne.n	800d7ea <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	889b      	ldrh	r3, [r3, #4]
 800d7dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d7e0:	f240 8097 	bls.w	800d912 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800d7e4:	2303      	movs	r3, #3
 800d7e6:	75fb      	strb	r3, [r7, #23]
 800d7e8:	e093      	b.n	800d912 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	78db      	ldrb	r3, [r3, #3]
 800d7ee:	f003 0303 	and.w	r3, r3, #3
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d107      	bne.n	800d806 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	889b      	ldrh	r3, [r3, #4]
 800d7fa:	2b40      	cmp	r3, #64	; 0x40
 800d7fc:	f240 8089 	bls.w	800d912 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800d800:	2303      	movs	r3, #3
 800d802:	75fb      	strb	r3, [r7, #23]
 800d804:	e085      	b.n	800d912 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	78db      	ldrb	r3, [r3, #3]
 800d80a:	f003 0303 	and.w	r3, r3, #3
 800d80e:	2b01      	cmp	r3, #1
 800d810:	d005      	beq.n	800d81e <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	78db      	ldrb	r3, [r3, #3]
 800d816:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d81a:	2b03      	cmp	r3, #3
 800d81c:	d10a      	bne.n	800d834 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	799b      	ldrb	r3, [r3, #6]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d003      	beq.n	800d82e <USBH_ParseEPDesc+0xe0>
 800d826:	68bb      	ldr	r3, [r7, #8]
 800d828:	799b      	ldrb	r3, [r3, #6]
 800d82a:	2b10      	cmp	r3, #16
 800d82c:	d970      	bls.n	800d910 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d82e:	2303      	movs	r3, #3
 800d830:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d832:	e06d      	b.n	800d910 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d834:	2303      	movs	r3, #3
 800d836:	75fb      	strb	r3, [r7, #23]
 800d838:	e06b      	b.n	800d912 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d840:	2b01      	cmp	r3, #1
 800d842:	d13c      	bne.n	800d8be <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	78db      	ldrb	r3, [r3, #3]
 800d848:	f003 0303 	and.w	r3, r3, #3
 800d84c:	2b02      	cmp	r3, #2
 800d84e:	d005      	beq.n	800d85c <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800d850:	68bb      	ldr	r3, [r7, #8]
 800d852:	78db      	ldrb	r3, [r3, #3]
 800d854:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d106      	bne.n	800d86a <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	889b      	ldrh	r3, [r3, #4]
 800d860:	2b40      	cmp	r3, #64	; 0x40
 800d862:	d956      	bls.n	800d912 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800d864:	2303      	movs	r3, #3
 800d866:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d868:	e053      	b.n	800d912 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	78db      	ldrb	r3, [r3, #3]
 800d86e:	f003 0303 	and.w	r3, r3, #3
 800d872:	2b01      	cmp	r3, #1
 800d874:	d10e      	bne.n	800d894 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	799b      	ldrb	r3, [r3, #6]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d007      	beq.n	800d88e <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800d882:	2b10      	cmp	r3, #16
 800d884:	d803      	bhi.n	800d88e <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800d88a:	2b40      	cmp	r3, #64	; 0x40
 800d88c:	d941      	bls.n	800d912 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800d88e:	2303      	movs	r3, #3
 800d890:	75fb      	strb	r3, [r7, #23]
 800d892:	e03e      	b.n	800d912 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800d894:	68bb      	ldr	r3, [r7, #8]
 800d896:	78db      	ldrb	r3, [r3, #3]
 800d898:	f003 0303 	and.w	r3, r3, #3
 800d89c:	2b03      	cmp	r3, #3
 800d89e:	d10b      	bne.n	800d8b8 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	799b      	ldrb	r3, [r3, #6]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d004      	beq.n	800d8b2 <USBH_ParseEPDesc+0x164>
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	889b      	ldrh	r3, [r3, #4]
 800d8ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d8b0:	d32f      	bcc.n	800d912 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800d8b2:	2303      	movs	r3, #3
 800d8b4:	75fb      	strb	r3, [r7, #23]
 800d8b6:	e02c      	b.n	800d912 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d8b8:	2303      	movs	r3, #3
 800d8ba:	75fb      	strb	r3, [r7, #23]
 800d8bc:	e029      	b.n	800d912 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d8c4:	2b02      	cmp	r3, #2
 800d8c6:	d120      	bne.n	800d90a <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	78db      	ldrb	r3, [r3, #3]
 800d8cc:	f003 0303 	and.w	r3, r3, #3
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d106      	bne.n	800d8e2 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	889b      	ldrh	r3, [r3, #4]
 800d8d8:	2b08      	cmp	r3, #8
 800d8da:	d01a      	beq.n	800d912 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800d8dc:	2303      	movs	r3, #3
 800d8de:	75fb      	strb	r3, [r7, #23]
 800d8e0:	e017      	b.n	800d912 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	78db      	ldrb	r3, [r3, #3]
 800d8e6:	f003 0303 	and.w	r3, r3, #3
 800d8ea:	2b03      	cmp	r3, #3
 800d8ec:	d10a      	bne.n	800d904 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800d8ee:	68bb      	ldr	r3, [r7, #8]
 800d8f0:	799b      	ldrb	r3, [r3, #6]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d003      	beq.n	800d8fe <USBH_ParseEPDesc+0x1b0>
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	889b      	ldrh	r3, [r3, #4]
 800d8fa:	2b08      	cmp	r3, #8
 800d8fc:	d909      	bls.n	800d912 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800d8fe:	2303      	movs	r3, #3
 800d900:	75fb      	strb	r3, [r7, #23]
 800d902:	e006      	b.n	800d912 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d904:	2303      	movs	r3, #3
 800d906:	75fb      	strb	r3, [r7, #23]
 800d908:	e003      	b.n	800d912 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800d90a:	2303      	movs	r3, #3
 800d90c:	75fb      	strb	r3, [r7, #23]
 800d90e:	e000      	b.n	800d912 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d910:	bf00      	nop
  }

  return status;
 800d912:	7dfb      	ldrb	r3, [r7, #23]
}
 800d914:	4618      	mov	r0, r3
 800d916:	371c      	adds	r7, #28
 800d918:	46bd      	mov	sp, r7
 800d91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91e:	4770      	bx	lr

0800d920 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d920:	b480      	push	{r7}
 800d922:	b087      	sub	sp, #28
 800d924:	af00      	add	r7, sp, #0
 800d926:	60f8      	str	r0, [r7, #12]
 800d928:	60b9      	str	r1, [r7, #8]
 800d92a:	4613      	mov	r3, r2
 800d92c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	3301      	adds	r3, #1
 800d932:	781b      	ldrb	r3, [r3, #0]
 800d934:	2b03      	cmp	r3, #3
 800d936:	d120      	bne.n	800d97a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	781b      	ldrb	r3, [r3, #0]
 800d93c:	1e9a      	subs	r2, r3, #2
 800d93e:	88fb      	ldrh	r3, [r7, #6]
 800d940:	4293      	cmp	r3, r2
 800d942:	bf28      	it	cs
 800d944:	4613      	movcs	r3, r2
 800d946:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	3302      	adds	r3, #2
 800d94c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d94e:	2300      	movs	r3, #0
 800d950:	82fb      	strh	r3, [r7, #22]
 800d952:	e00b      	b.n	800d96c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d954:	8afb      	ldrh	r3, [r7, #22]
 800d956:	68fa      	ldr	r2, [r7, #12]
 800d958:	4413      	add	r3, r2
 800d95a:	781a      	ldrb	r2, [r3, #0]
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	3301      	adds	r3, #1
 800d964:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d966:	8afb      	ldrh	r3, [r7, #22]
 800d968:	3302      	adds	r3, #2
 800d96a:	82fb      	strh	r3, [r7, #22]
 800d96c:	8afa      	ldrh	r2, [r7, #22]
 800d96e:	8abb      	ldrh	r3, [r7, #20]
 800d970:	429a      	cmp	r2, r3
 800d972:	d3ef      	bcc.n	800d954 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	2200      	movs	r2, #0
 800d978:	701a      	strb	r2, [r3, #0]
  }
}
 800d97a:	bf00      	nop
 800d97c:	371c      	adds	r7, #28
 800d97e:	46bd      	mov	sp, r7
 800d980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d984:	4770      	bx	lr

0800d986 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d986:	b480      	push	{r7}
 800d988:	b085      	sub	sp, #20
 800d98a:	af00      	add	r7, sp, #0
 800d98c:	6078      	str	r0, [r7, #4]
 800d98e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	881a      	ldrh	r2, [r3, #0]
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	781b      	ldrb	r3, [r3, #0]
 800d998:	b29b      	uxth	r3, r3
 800d99a:	4413      	add	r3, r2
 800d99c:	b29a      	uxth	r2, r3
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	781b      	ldrb	r3, [r3, #0]
 800d9a6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	4413      	add	r3, r2
 800d9ac:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d9ae:	68fb      	ldr	r3, [r7, #12]
}
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	3714      	adds	r7, #20
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ba:	4770      	bx	lr

0800d9bc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b086      	sub	sp, #24
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	60f8      	str	r0, [r7, #12]
 800d9c4:	60b9      	str	r1, [r7, #8]
 800d9c6:	4613      	mov	r3, r2
 800d9c8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	789b      	ldrb	r3, [r3, #2]
 800d9d2:	2b01      	cmp	r3, #1
 800d9d4:	d002      	beq.n	800d9dc <USBH_CtlReq+0x20>
 800d9d6:	2b02      	cmp	r3, #2
 800d9d8:	d01d      	beq.n	800da16 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800d9da:	e043      	b.n	800da64 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	68ba      	ldr	r2, [r7, #8]
 800d9e0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	88fa      	ldrh	r2, [r7, #6]
 800d9e6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	2201      	movs	r2, #1
 800d9ec:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	2202      	movs	r2, #2
 800d9f2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	2203      	movs	r2, #3
 800d9fc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800da0c:	2300      	movs	r3, #0
 800da0e:	2200      	movs	r2, #0
 800da10:	f000 ff0a 	bl	800e828 <osMessageQueuePut>
      break;
 800da14:	e026      	b.n	800da64 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800da16:	68f8      	ldr	r0, [r7, #12]
 800da18:	f000 f82a 	bl	800da70 <USBH_HandleControl>
 800da1c:	4603      	mov	r3, r0
 800da1e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800da20:	7dfb      	ldrb	r3, [r7, #23]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d002      	beq.n	800da2c <USBH_CtlReq+0x70>
 800da26:	7dfb      	ldrb	r3, [r7, #23]
 800da28:	2b03      	cmp	r3, #3
 800da2a:	d106      	bne.n	800da3a <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	2201      	movs	r2, #1
 800da30:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	2200      	movs	r2, #0
 800da36:	761a      	strb	r2, [r3, #24]
 800da38:	e005      	b.n	800da46 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800da3a:	7dfb      	ldrb	r3, [r7, #23]
 800da3c:	2b02      	cmp	r3, #2
 800da3e:	d102      	bne.n	800da46 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	2201      	movs	r2, #1
 800da44:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	2203      	movs	r2, #3
 800da4a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800da5a:	2300      	movs	r3, #0
 800da5c:	2200      	movs	r2, #0
 800da5e:	f000 fee3 	bl	800e828 <osMessageQueuePut>
      break;
 800da62:	bf00      	nop
  }
  return status;
 800da64:	7dfb      	ldrb	r3, [r7, #23]
}
 800da66:	4618      	mov	r0, r3
 800da68:	3718      	adds	r7, #24
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}
	...

0800da70 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b086      	sub	sp, #24
 800da74:	af02      	add	r7, sp, #8
 800da76:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800da78:	2301      	movs	r3, #1
 800da7a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800da7c:	2300      	movs	r3, #0
 800da7e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	7e1b      	ldrb	r3, [r3, #24]
 800da84:	3b01      	subs	r3, #1
 800da86:	2b0a      	cmp	r3, #10
 800da88:	f200 8229 	bhi.w	800dede <USBH_HandleControl+0x46e>
 800da8c:	a201      	add	r2, pc, #4	; (adr r2, 800da94 <USBH_HandleControl+0x24>)
 800da8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da92:	bf00      	nop
 800da94:	0800dac1 	.word	0x0800dac1
 800da98:	0800dadb 	.word	0x0800dadb
 800da9c:	0800db7d 	.word	0x0800db7d
 800daa0:	0800dba3 	.word	0x0800dba3
 800daa4:	0800dc2f 	.word	0x0800dc2f
 800daa8:	0800dc59 	.word	0x0800dc59
 800daac:	0800dd1b 	.word	0x0800dd1b
 800dab0:	0800dd3d 	.word	0x0800dd3d
 800dab4:	0800ddcf 	.word	0x0800ddcf
 800dab8:	0800ddf5 	.word	0x0800ddf5
 800dabc:	0800de87 	.word	0x0800de87
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f103 0110 	add.w	r1, r3, #16
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	795b      	ldrb	r3, [r3, #5]
 800daca:	461a      	mov	r2, r3
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f000 fa17 	bl	800df00 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2202      	movs	r2, #2
 800dad6:	761a      	strb	r2, [r3, #24]
      break;
 800dad8:	e20c      	b.n	800def4 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	795b      	ldrb	r3, [r3, #5]
 800dade:	4619      	mov	r1, r3
 800dae0:	6878      	ldr	r0, [r7, #4]
 800dae2:	f008 fa57 	bl	8015f94 <USBH_LL_GetURBState>
 800dae6:	4603      	mov	r3, r0
 800dae8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800daea:	7bbb      	ldrb	r3, [r7, #14]
 800daec:	2b01      	cmp	r3, #1
 800daee:	d12c      	bne.n	800db4a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	7c1b      	ldrb	r3, [r3, #16]
 800daf4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800daf8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	8adb      	ldrh	r3, [r3, #22]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d00a      	beq.n	800db18 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800db02:	7b7b      	ldrb	r3, [r7, #13]
 800db04:	2b80      	cmp	r3, #128	; 0x80
 800db06:	d103      	bne.n	800db10 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2203      	movs	r2, #3
 800db0c:	761a      	strb	r2, [r3, #24]
 800db0e:	e00d      	b.n	800db2c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2205      	movs	r2, #5
 800db14:	761a      	strb	r2, [r3, #24]
 800db16:	e009      	b.n	800db2c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800db18:	7b7b      	ldrb	r3, [r7, #13]
 800db1a:	2b80      	cmp	r3, #128	; 0x80
 800db1c:	d103      	bne.n	800db26 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	2209      	movs	r2, #9
 800db22:	761a      	strb	r2, [r3, #24]
 800db24:	e002      	b.n	800db2c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2207      	movs	r2, #7
 800db2a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2203      	movs	r2, #3
 800db30:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800db40:	2300      	movs	r3, #0
 800db42:	2200      	movs	r2, #0
 800db44:	f000 fe70 	bl	800e828 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800db48:	e1cb      	b.n	800dee2 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800db4a:	7bbb      	ldrb	r3, [r7, #14]
 800db4c:	2b04      	cmp	r3, #4
 800db4e:	d003      	beq.n	800db58 <USBH_HandleControl+0xe8>
 800db50:	7bbb      	ldrb	r3, [r7, #14]
 800db52:	2b02      	cmp	r3, #2
 800db54:	f040 81c5 	bne.w	800dee2 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	220b      	movs	r2, #11
 800db5c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2203      	movs	r2, #3
 800db62:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800db72:	2300      	movs	r3, #0
 800db74:	2200      	movs	r2, #0
 800db76:	f000 fe57 	bl	800e828 <osMessageQueuePut>
      break;
 800db7a:	e1b2      	b.n	800dee2 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800db82:	b29a      	uxth	r2, r3
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6899      	ldr	r1, [r3, #8]
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	899a      	ldrh	r2, [r3, #12]
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	791b      	ldrb	r3, [r3, #4]
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f000 f9f2 	bl	800df7e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2204      	movs	r2, #4
 800db9e:	761a      	strb	r2, [r3, #24]
      break;
 800dba0:	e1a8      	b.n	800def4 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	791b      	ldrb	r3, [r3, #4]
 800dba6:	4619      	mov	r1, r3
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f008 f9f3 	bl	8015f94 <USBH_LL_GetURBState>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800dbb2:	7bbb      	ldrb	r3, [r7, #14]
 800dbb4:	2b01      	cmp	r3, #1
 800dbb6:	d110      	bne.n	800dbda <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2209      	movs	r2, #9
 800dbbc:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2203      	movs	r2, #3
 800dbc2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	f000 fe27 	bl	800e828 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800dbda:	7bbb      	ldrb	r3, [r7, #14]
 800dbdc:	2b05      	cmp	r3, #5
 800dbde:	d110      	bne.n	800dc02 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800dbe0:	2303      	movs	r3, #3
 800dbe2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2203      	movs	r2, #3
 800dbe8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	f000 fe14 	bl	800e828 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800dc00:	e171      	b.n	800dee6 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800dc02:	7bbb      	ldrb	r3, [r7, #14]
 800dc04:	2b04      	cmp	r3, #4
 800dc06:	f040 816e 	bne.w	800dee6 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	220b      	movs	r2, #11
 800dc0e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2203      	movs	r2, #3
 800dc14:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dc24:	2300      	movs	r3, #0
 800dc26:	2200      	movs	r2, #0
 800dc28:	f000 fdfe 	bl	800e828 <osMessageQueuePut>
      break;
 800dc2c:	e15b      	b.n	800dee6 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6899      	ldr	r1, [r3, #8]
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	899a      	ldrh	r2, [r3, #12]
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	795b      	ldrb	r3, [r3, #5]
 800dc3a:	2001      	movs	r0, #1
 800dc3c:	9000      	str	r0, [sp, #0]
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f000 f978 	bl	800df34 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800dc4a:	b29a      	uxth	r2, r3
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2206      	movs	r2, #6
 800dc54:	761a      	strb	r2, [r3, #24]
      break;
 800dc56:	e14d      	b.n	800def4 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	795b      	ldrb	r3, [r3, #5]
 800dc5c:	4619      	mov	r1, r3
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	f008 f998 	bl	8015f94 <USBH_LL_GetURBState>
 800dc64:	4603      	mov	r3, r0
 800dc66:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800dc68:	7bbb      	ldrb	r3, [r7, #14]
 800dc6a:	2b01      	cmp	r3, #1
 800dc6c:	d111      	bne.n	800dc92 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	2207      	movs	r2, #7
 800dc72:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2203      	movs	r2, #3
 800dc78:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dc88:	2300      	movs	r3, #0
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	f000 fdcc 	bl	800e828 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800dc90:	e12b      	b.n	800deea <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800dc92:	7bbb      	ldrb	r3, [r7, #14]
 800dc94:	2b05      	cmp	r3, #5
 800dc96:	d113      	bne.n	800dcc0 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	220c      	movs	r2, #12
 800dc9c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800dc9e:	2303      	movs	r3, #3
 800dca0:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2203      	movs	r2, #3
 800dca6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	2200      	movs	r2, #0
 800dcba:	f000 fdb5 	bl	800e828 <osMessageQueuePut>
      break;
 800dcbe:	e114      	b.n	800deea <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800dcc0:	7bbb      	ldrb	r3, [r7, #14]
 800dcc2:	2b02      	cmp	r3, #2
 800dcc4:	d111      	bne.n	800dcea <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2205      	movs	r2, #5
 800dcca:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2203      	movs	r2, #3
 800dcd0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dce0:	2300      	movs	r3, #0
 800dce2:	2200      	movs	r2, #0
 800dce4:	f000 fda0 	bl	800e828 <osMessageQueuePut>
      break;
 800dce8:	e0ff      	b.n	800deea <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800dcea:	7bbb      	ldrb	r3, [r7, #14]
 800dcec:	2b04      	cmp	r3, #4
 800dcee:	f040 80fc 	bne.w	800deea <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	220b      	movs	r2, #11
 800dcf6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800dcf8:	2302      	movs	r3, #2
 800dcfa:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2203      	movs	r2, #3
 800dd00:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dd10:	2300      	movs	r3, #0
 800dd12:	2200      	movs	r2, #0
 800dd14:	f000 fd88 	bl	800e828 <osMessageQueuePut>
      break;
 800dd18:	e0e7      	b.n	800deea <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	791b      	ldrb	r3, [r3, #4]
 800dd1e:	2200      	movs	r2, #0
 800dd20:	2100      	movs	r1, #0
 800dd22:	6878      	ldr	r0, [r7, #4]
 800dd24:	f000 f92b 	bl	800df7e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800dd2e:	b29a      	uxth	r2, r3
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2208      	movs	r2, #8
 800dd38:	761a      	strb	r2, [r3, #24]

      break;
 800dd3a:	e0db      	b.n	800def4 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	791b      	ldrb	r3, [r3, #4]
 800dd40:	4619      	mov	r1, r3
 800dd42:	6878      	ldr	r0, [r7, #4]
 800dd44:	f008 f926 	bl	8015f94 <USBH_LL_GetURBState>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800dd4c:	7bbb      	ldrb	r3, [r7, #14]
 800dd4e:	2b01      	cmp	r3, #1
 800dd50:	d113      	bne.n	800dd7a <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	220d      	movs	r2, #13
 800dd56:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800dd58:	2300      	movs	r3, #0
 800dd5a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2203      	movs	r2, #3
 800dd60:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dd70:	2300      	movs	r3, #0
 800dd72:	2200      	movs	r2, #0
 800dd74:	f000 fd58 	bl	800e828 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800dd78:	e0b9      	b.n	800deee <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800dd7a:	7bbb      	ldrb	r3, [r7, #14]
 800dd7c:	2b04      	cmp	r3, #4
 800dd7e:	d111      	bne.n	800dda4 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	220b      	movs	r2, #11
 800dd84:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	2203      	movs	r2, #3
 800dd8a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	f000 fd43 	bl	800e828 <osMessageQueuePut>
      break;
 800dda2:	e0a4      	b.n	800deee <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800dda4:	7bbb      	ldrb	r3, [r7, #14]
 800dda6:	2b05      	cmp	r3, #5
 800dda8:	f040 80a1 	bne.w	800deee <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800ddac:	2303      	movs	r3, #3
 800ddae:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2203      	movs	r2, #3
 800ddb4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	f000 fd2e 	bl	800e828 <osMessageQueuePut>
      break;
 800ddcc:	e08f      	b.n	800deee <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	795b      	ldrb	r3, [r3, #5]
 800ddd2:	2201      	movs	r2, #1
 800ddd4:	9200      	str	r2, [sp, #0]
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	2100      	movs	r1, #0
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	f000 f8aa 	bl	800df34 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800dde6:	b29a      	uxth	r2, r3
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	220a      	movs	r2, #10
 800ddf0:	761a      	strb	r2, [r3, #24]
      break;
 800ddf2:	e07f      	b.n	800def4 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	795b      	ldrb	r3, [r3, #5]
 800ddf8:	4619      	mov	r1, r3
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f008 f8ca 	bl	8015f94 <USBH_LL_GetURBState>
 800de00:	4603      	mov	r3, r0
 800de02:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800de04:	7bbb      	ldrb	r3, [r7, #14]
 800de06:	2b01      	cmp	r3, #1
 800de08:	d113      	bne.n	800de32 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800de0a:	2300      	movs	r3, #0
 800de0c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	220d      	movs	r2, #13
 800de12:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2203      	movs	r2, #3
 800de18:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800de28:	2300      	movs	r3, #0
 800de2a:	2200      	movs	r2, #0
 800de2c:	f000 fcfc 	bl	800e828 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800de30:	e05f      	b.n	800def2 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800de32:	7bbb      	ldrb	r3, [r7, #14]
 800de34:	2b02      	cmp	r3, #2
 800de36:	d111      	bne.n	800de5c <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2209      	movs	r2, #9
 800de3c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	2203      	movs	r2, #3
 800de42:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800de52:	2300      	movs	r3, #0
 800de54:	2200      	movs	r2, #0
 800de56:	f000 fce7 	bl	800e828 <osMessageQueuePut>
      break;
 800de5a:	e04a      	b.n	800def2 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800de5c:	7bbb      	ldrb	r3, [r7, #14]
 800de5e:	2b04      	cmp	r3, #4
 800de60:	d147      	bne.n	800def2 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	220b      	movs	r2, #11
 800de66:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2203      	movs	r2, #3
 800de6c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800de7c:	2300      	movs	r3, #0
 800de7e:	2200      	movs	r2, #0
 800de80:	f000 fcd2 	bl	800e828 <osMessageQueuePut>
      break;
 800de84:	e035      	b.n	800def2 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	7e5b      	ldrb	r3, [r3, #25]
 800de8a:	3301      	adds	r3, #1
 800de8c:	b2da      	uxtb	r2, r3
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	765a      	strb	r2, [r3, #25]
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	7e5b      	ldrb	r3, [r3, #25]
 800de96:	2b02      	cmp	r3, #2
 800de98:	d806      	bhi.n	800dea8 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	2201      	movs	r2, #1
 800de9e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2201      	movs	r2, #1
 800dea4:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800dea6:	e025      	b.n	800def4 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800deae:	2106      	movs	r1, #6
 800deb0:	6878      	ldr	r0, [r7, #4]
 800deb2:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2200      	movs	r2, #0
 800deb8:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	795b      	ldrb	r3, [r3, #5]
 800debe:	4619      	mov	r1, r3
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f000 f90d 	bl	800e0e0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	791b      	ldrb	r3, [r3, #4]
 800deca:	4619      	mov	r1, r3
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f000 f907 	bl	800e0e0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	2200      	movs	r2, #0
 800ded6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ded8:	2302      	movs	r3, #2
 800deda:	73fb      	strb	r3, [r7, #15]
      break;
 800dedc:	e00a      	b.n	800def4 <USBH_HandleControl+0x484>

    default:
      break;
 800dede:	bf00      	nop
 800dee0:	e008      	b.n	800def4 <USBH_HandleControl+0x484>
      break;
 800dee2:	bf00      	nop
 800dee4:	e006      	b.n	800def4 <USBH_HandleControl+0x484>
      break;
 800dee6:	bf00      	nop
 800dee8:	e004      	b.n	800def4 <USBH_HandleControl+0x484>
      break;
 800deea:	bf00      	nop
 800deec:	e002      	b.n	800def4 <USBH_HandleControl+0x484>
      break;
 800deee:	bf00      	nop
 800def0:	e000      	b.n	800def4 <USBH_HandleControl+0x484>
      break;
 800def2:	bf00      	nop
  }

  return status;
 800def4:	7bfb      	ldrb	r3, [r7, #15]
}
 800def6:	4618      	mov	r0, r3
 800def8:	3710      	adds	r7, #16
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}
 800defe:	bf00      	nop

0800df00 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b088      	sub	sp, #32
 800df04:	af04      	add	r7, sp, #16
 800df06:	60f8      	str	r0, [r7, #12]
 800df08:	60b9      	str	r1, [r7, #8]
 800df0a:	4613      	mov	r3, r2
 800df0c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800df0e:	79f9      	ldrb	r1, [r7, #7]
 800df10:	2300      	movs	r3, #0
 800df12:	9303      	str	r3, [sp, #12]
 800df14:	2308      	movs	r3, #8
 800df16:	9302      	str	r3, [sp, #8]
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	9301      	str	r3, [sp, #4]
 800df1c:	2300      	movs	r3, #0
 800df1e:	9300      	str	r3, [sp, #0]
 800df20:	2300      	movs	r3, #0
 800df22:	2200      	movs	r2, #0
 800df24:	68f8      	ldr	r0, [r7, #12]
 800df26:	f008 f804 	bl	8015f32 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800df2a:	2300      	movs	r3, #0
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3710      	adds	r7, #16
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}

0800df34 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b088      	sub	sp, #32
 800df38:	af04      	add	r7, sp, #16
 800df3a:	60f8      	str	r0, [r7, #12]
 800df3c:	60b9      	str	r1, [r7, #8]
 800df3e:	4611      	mov	r1, r2
 800df40:	461a      	mov	r2, r3
 800df42:	460b      	mov	r3, r1
 800df44:	80fb      	strh	r3, [r7, #6]
 800df46:	4613      	mov	r3, r2
 800df48:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800df50:	2b00      	cmp	r3, #0
 800df52:	d001      	beq.n	800df58 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800df54:	2300      	movs	r3, #0
 800df56:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800df58:	7979      	ldrb	r1, [r7, #5]
 800df5a:	7e3b      	ldrb	r3, [r7, #24]
 800df5c:	9303      	str	r3, [sp, #12]
 800df5e:	88fb      	ldrh	r3, [r7, #6]
 800df60:	9302      	str	r3, [sp, #8]
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	9301      	str	r3, [sp, #4]
 800df66:	2301      	movs	r3, #1
 800df68:	9300      	str	r3, [sp, #0]
 800df6a:	2300      	movs	r3, #0
 800df6c:	2200      	movs	r2, #0
 800df6e:	68f8      	ldr	r0, [r7, #12]
 800df70:	f007 ffdf 	bl	8015f32 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800df74:	2300      	movs	r3, #0
}
 800df76:	4618      	mov	r0, r3
 800df78:	3710      	adds	r7, #16
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}

0800df7e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800df7e:	b580      	push	{r7, lr}
 800df80:	b088      	sub	sp, #32
 800df82:	af04      	add	r7, sp, #16
 800df84:	60f8      	str	r0, [r7, #12]
 800df86:	60b9      	str	r1, [r7, #8]
 800df88:	4611      	mov	r1, r2
 800df8a:	461a      	mov	r2, r3
 800df8c:	460b      	mov	r3, r1
 800df8e:	80fb      	strh	r3, [r7, #6]
 800df90:	4613      	mov	r3, r2
 800df92:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800df94:	7979      	ldrb	r1, [r7, #5]
 800df96:	2300      	movs	r3, #0
 800df98:	9303      	str	r3, [sp, #12]
 800df9a:	88fb      	ldrh	r3, [r7, #6]
 800df9c:	9302      	str	r3, [sp, #8]
 800df9e:	68bb      	ldr	r3, [r7, #8]
 800dfa0:	9301      	str	r3, [sp, #4]
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	9300      	str	r3, [sp, #0]
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	2201      	movs	r2, #1
 800dfaa:	68f8      	ldr	r0, [r7, #12]
 800dfac:	f007 ffc1 	bl	8015f32 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800dfb0:	2300      	movs	r3, #0

}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	3710      	adds	r7, #16
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}

0800dfba <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800dfba:	b580      	push	{r7, lr}
 800dfbc:	b088      	sub	sp, #32
 800dfbe:	af04      	add	r7, sp, #16
 800dfc0:	60f8      	str	r0, [r7, #12]
 800dfc2:	60b9      	str	r1, [r7, #8]
 800dfc4:	4611      	mov	r1, r2
 800dfc6:	461a      	mov	r2, r3
 800dfc8:	460b      	mov	r3, r1
 800dfca:	80fb      	strh	r3, [r7, #6]
 800dfcc:	4613      	mov	r3, r2
 800dfce:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d001      	beq.n	800dfde <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800dfda:	2300      	movs	r3, #0
 800dfdc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800dfde:	7979      	ldrb	r1, [r7, #5]
 800dfe0:	7e3b      	ldrb	r3, [r7, #24]
 800dfe2:	9303      	str	r3, [sp, #12]
 800dfe4:	88fb      	ldrh	r3, [r7, #6]
 800dfe6:	9302      	str	r3, [sp, #8]
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	9301      	str	r3, [sp, #4]
 800dfec:	2301      	movs	r3, #1
 800dfee:	9300      	str	r3, [sp, #0]
 800dff0:	2302      	movs	r3, #2
 800dff2:	2200      	movs	r2, #0
 800dff4:	68f8      	ldr	r0, [r7, #12]
 800dff6:	f007 ff9c 	bl	8015f32 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800dffa:	2300      	movs	r3, #0
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	3710      	adds	r7, #16
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}

0800e004 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b088      	sub	sp, #32
 800e008:	af04      	add	r7, sp, #16
 800e00a:	60f8      	str	r0, [r7, #12]
 800e00c:	60b9      	str	r1, [r7, #8]
 800e00e:	4611      	mov	r1, r2
 800e010:	461a      	mov	r2, r3
 800e012:	460b      	mov	r3, r1
 800e014:	80fb      	strh	r3, [r7, #6]
 800e016:	4613      	mov	r3, r2
 800e018:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e01a:	7979      	ldrb	r1, [r7, #5]
 800e01c:	2300      	movs	r3, #0
 800e01e:	9303      	str	r3, [sp, #12]
 800e020:	88fb      	ldrh	r3, [r7, #6]
 800e022:	9302      	str	r3, [sp, #8]
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	9301      	str	r3, [sp, #4]
 800e028:	2301      	movs	r3, #1
 800e02a:	9300      	str	r3, [sp, #0]
 800e02c:	2302      	movs	r3, #2
 800e02e:	2201      	movs	r2, #1
 800e030:	68f8      	ldr	r0, [r7, #12]
 800e032:	f007 ff7e 	bl	8015f32 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e036:	2300      	movs	r3, #0
}
 800e038:	4618      	mov	r0, r3
 800e03a:	3710      	adds	r7, #16
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}

0800e040 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b086      	sub	sp, #24
 800e044:	af04      	add	r7, sp, #16
 800e046:	6078      	str	r0, [r7, #4]
 800e048:	4608      	mov	r0, r1
 800e04a:	4611      	mov	r1, r2
 800e04c:	461a      	mov	r2, r3
 800e04e:	4603      	mov	r3, r0
 800e050:	70fb      	strb	r3, [r7, #3]
 800e052:	460b      	mov	r3, r1
 800e054:	70bb      	strb	r3, [r7, #2]
 800e056:	4613      	mov	r3, r2
 800e058:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e05a:	7878      	ldrb	r0, [r7, #1]
 800e05c:	78ba      	ldrb	r2, [r7, #2]
 800e05e:	78f9      	ldrb	r1, [r7, #3]
 800e060:	8b3b      	ldrh	r3, [r7, #24]
 800e062:	9302      	str	r3, [sp, #8]
 800e064:	7d3b      	ldrb	r3, [r7, #20]
 800e066:	9301      	str	r3, [sp, #4]
 800e068:	7c3b      	ldrb	r3, [r7, #16]
 800e06a:	9300      	str	r3, [sp, #0]
 800e06c:	4603      	mov	r3, r0
 800e06e:	6878      	ldr	r0, [r7, #4]
 800e070:	f007 ff11 	bl	8015e96 <USBH_LL_OpenPipe>

  return USBH_OK;
 800e074:	2300      	movs	r3, #0
}
 800e076:	4618      	mov	r0, r3
 800e078:	3708      	adds	r7, #8
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}

0800e07e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e07e:	b580      	push	{r7, lr}
 800e080:	b082      	sub	sp, #8
 800e082:	af00      	add	r7, sp, #0
 800e084:	6078      	str	r0, [r7, #4]
 800e086:	460b      	mov	r3, r1
 800e088:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800e08a:	78fb      	ldrb	r3, [r7, #3]
 800e08c:	4619      	mov	r1, r3
 800e08e:	6878      	ldr	r0, [r7, #4]
 800e090:	f007 ff30 	bl	8015ef4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e094:	2300      	movs	r3, #0
}
 800e096:	4618      	mov	r0, r3
 800e098:	3708      	adds	r7, #8
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}

0800e09e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e09e:	b580      	push	{r7, lr}
 800e0a0:	b084      	sub	sp, #16
 800e0a2:	af00      	add	r7, sp, #0
 800e0a4:	6078      	str	r0, [r7, #4]
 800e0a6:	460b      	mov	r3, r1
 800e0a8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f000 f836 	bl	800e11c <USBH_GetFreePipe>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e0b4:	89fb      	ldrh	r3, [r7, #14]
 800e0b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e0ba:	4293      	cmp	r3, r2
 800e0bc:	d00a      	beq.n	800e0d4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800e0be:	78fa      	ldrb	r2, [r7, #3]
 800e0c0:	89fb      	ldrh	r3, [r7, #14]
 800e0c2:	f003 030f 	and.w	r3, r3, #15
 800e0c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e0ca:	6879      	ldr	r1, [r7, #4]
 800e0cc:	33e0      	adds	r3, #224	; 0xe0
 800e0ce:	009b      	lsls	r3, r3, #2
 800e0d0:	440b      	add	r3, r1
 800e0d2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e0d4:	89fb      	ldrh	r3, [r7, #14]
 800e0d6:	b2db      	uxtb	r3, r3
}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	3710      	adds	r7, #16
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bd80      	pop	{r7, pc}

0800e0e0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e0e0:	b480      	push	{r7}
 800e0e2:	b083      	sub	sp, #12
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
 800e0e8:	460b      	mov	r3, r1
 800e0ea:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800e0ec:	78fb      	ldrb	r3, [r7, #3]
 800e0ee:	2b0f      	cmp	r3, #15
 800e0f0:	d80d      	bhi.n	800e10e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e0f2:	78fb      	ldrb	r3, [r7, #3]
 800e0f4:	687a      	ldr	r2, [r7, #4]
 800e0f6:	33e0      	adds	r3, #224	; 0xe0
 800e0f8:	009b      	lsls	r3, r3, #2
 800e0fa:	4413      	add	r3, r2
 800e0fc:	685a      	ldr	r2, [r3, #4]
 800e0fe:	78fb      	ldrb	r3, [r7, #3]
 800e100:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e104:	6879      	ldr	r1, [r7, #4]
 800e106:	33e0      	adds	r3, #224	; 0xe0
 800e108:	009b      	lsls	r3, r3, #2
 800e10a:	440b      	add	r3, r1
 800e10c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e10e:	2300      	movs	r3, #0
}
 800e110:	4618      	mov	r0, r3
 800e112:	370c      	adds	r7, #12
 800e114:	46bd      	mov	sp, r7
 800e116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11a:	4770      	bx	lr

0800e11c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e11c:	b480      	push	{r7}
 800e11e:	b085      	sub	sp, #20
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e124:	2300      	movs	r3, #0
 800e126:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800e128:	2300      	movs	r3, #0
 800e12a:	73fb      	strb	r3, [r7, #15]
 800e12c:	e00f      	b.n	800e14e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e12e:	7bfb      	ldrb	r3, [r7, #15]
 800e130:	687a      	ldr	r2, [r7, #4]
 800e132:	33e0      	adds	r3, #224	; 0xe0
 800e134:	009b      	lsls	r3, r3, #2
 800e136:	4413      	add	r3, r2
 800e138:	685b      	ldr	r3, [r3, #4]
 800e13a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d102      	bne.n	800e148 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800e142:	7bfb      	ldrb	r3, [r7, #15]
 800e144:	b29b      	uxth	r3, r3
 800e146:	e007      	b.n	800e158 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800e148:	7bfb      	ldrb	r3, [r7, #15]
 800e14a:	3301      	adds	r3, #1
 800e14c:	73fb      	strb	r3, [r7, #15]
 800e14e:	7bfb      	ldrb	r3, [r7, #15]
 800e150:	2b0f      	cmp	r3, #15
 800e152:	d9ec      	bls.n	800e12e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e154:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800e158:	4618      	mov	r0, r3
 800e15a:	3714      	adds	r7, #20
 800e15c:	46bd      	mov	sp, r7
 800e15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e162:	4770      	bx	lr

0800e164 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e164:	b480      	push	{r7}
 800e166:	b087      	sub	sp, #28
 800e168:	af00      	add	r7, sp, #0
 800e16a:	60f8      	str	r0, [r7, #12]
 800e16c:	60b9      	str	r1, [r7, #8]
 800e16e:	4613      	mov	r3, r2
 800e170:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e172:	2301      	movs	r3, #1
 800e174:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e176:	2300      	movs	r3, #0
 800e178:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e17a:	4b1f      	ldr	r3, [pc, #124]	; (800e1f8 <FATFS_LinkDriverEx+0x94>)
 800e17c:	7a5b      	ldrb	r3, [r3, #9]
 800e17e:	b2db      	uxtb	r3, r3
 800e180:	2b00      	cmp	r3, #0
 800e182:	d131      	bne.n	800e1e8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e184:	4b1c      	ldr	r3, [pc, #112]	; (800e1f8 <FATFS_LinkDriverEx+0x94>)
 800e186:	7a5b      	ldrb	r3, [r3, #9]
 800e188:	b2db      	uxtb	r3, r3
 800e18a:	461a      	mov	r2, r3
 800e18c:	4b1a      	ldr	r3, [pc, #104]	; (800e1f8 <FATFS_LinkDriverEx+0x94>)
 800e18e:	2100      	movs	r1, #0
 800e190:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e192:	4b19      	ldr	r3, [pc, #100]	; (800e1f8 <FATFS_LinkDriverEx+0x94>)
 800e194:	7a5b      	ldrb	r3, [r3, #9]
 800e196:	b2db      	uxtb	r3, r3
 800e198:	4a17      	ldr	r2, [pc, #92]	; (800e1f8 <FATFS_LinkDriverEx+0x94>)
 800e19a:	009b      	lsls	r3, r3, #2
 800e19c:	4413      	add	r3, r2
 800e19e:	68fa      	ldr	r2, [r7, #12]
 800e1a0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e1a2:	4b15      	ldr	r3, [pc, #84]	; (800e1f8 <FATFS_LinkDriverEx+0x94>)
 800e1a4:	7a5b      	ldrb	r3, [r3, #9]
 800e1a6:	b2db      	uxtb	r3, r3
 800e1a8:	461a      	mov	r2, r3
 800e1aa:	4b13      	ldr	r3, [pc, #76]	; (800e1f8 <FATFS_LinkDriverEx+0x94>)
 800e1ac:	4413      	add	r3, r2
 800e1ae:	79fa      	ldrb	r2, [r7, #7]
 800e1b0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e1b2:	4b11      	ldr	r3, [pc, #68]	; (800e1f8 <FATFS_LinkDriverEx+0x94>)
 800e1b4:	7a5b      	ldrb	r3, [r3, #9]
 800e1b6:	b2db      	uxtb	r3, r3
 800e1b8:	1c5a      	adds	r2, r3, #1
 800e1ba:	b2d1      	uxtb	r1, r2
 800e1bc:	4a0e      	ldr	r2, [pc, #56]	; (800e1f8 <FATFS_LinkDriverEx+0x94>)
 800e1be:	7251      	strb	r1, [r2, #9]
 800e1c0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e1c2:	7dbb      	ldrb	r3, [r7, #22]
 800e1c4:	3330      	adds	r3, #48	; 0x30
 800e1c6:	b2da      	uxtb	r2, r3
 800e1c8:	68bb      	ldr	r3, [r7, #8]
 800e1ca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e1cc:	68bb      	ldr	r3, [r7, #8]
 800e1ce:	3301      	adds	r3, #1
 800e1d0:	223a      	movs	r2, #58	; 0x3a
 800e1d2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	3302      	adds	r3, #2
 800e1d8:	222f      	movs	r2, #47	; 0x2f
 800e1da:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	3303      	adds	r3, #3
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e1e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	371c      	adds	r7, #28
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f4:	4770      	bx	lr
 800e1f6:	bf00      	nop
 800e1f8:	20000600 	.word	0x20000600

0800e1fc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b082      	sub	sp, #8
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
 800e204:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e206:	2200      	movs	r2, #0
 800e208:	6839      	ldr	r1, [r7, #0]
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f7ff ffaa 	bl	800e164 <FATFS_LinkDriverEx>
 800e210:	4603      	mov	r3, r0
}
 800e212:	4618      	mov	r0, r3
 800e214:	3708      	adds	r7, #8
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}
	...

0800e21c <__NVIC_SetPriority>:
{
 800e21c:	b480      	push	{r7}
 800e21e:	b083      	sub	sp, #12
 800e220:	af00      	add	r7, sp, #0
 800e222:	4603      	mov	r3, r0
 800e224:	6039      	str	r1, [r7, #0]
 800e226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	db0a      	blt.n	800e246 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	b2da      	uxtb	r2, r3
 800e234:	490c      	ldr	r1, [pc, #48]	; (800e268 <__NVIC_SetPriority+0x4c>)
 800e236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e23a:	0112      	lsls	r2, r2, #4
 800e23c:	b2d2      	uxtb	r2, r2
 800e23e:	440b      	add	r3, r1
 800e240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e244:	e00a      	b.n	800e25c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	b2da      	uxtb	r2, r3
 800e24a:	4908      	ldr	r1, [pc, #32]	; (800e26c <__NVIC_SetPriority+0x50>)
 800e24c:	79fb      	ldrb	r3, [r7, #7]
 800e24e:	f003 030f 	and.w	r3, r3, #15
 800e252:	3b04      	subs	r3, #4
 800e254:	0112      	lsls	r2, r2, #4
 800e256:	b2d2      	uxtb	r2, r2
 800e258:	440b      	add	r3, r1
 800e25a:	761a      	strb	r2, [r3, #24]
}
 800e25c:	bf00      	nop
 800e25e:	370c      	adds	r7, #12
 800e260:	46bd      	mov	sp, r7
 800e262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e266:	4770      	bx	lr
 800e268:	e000e100 	.word	0xe000e100
 800e26c:	e000ed00 	.word	0xe000ed00

0800e270 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e270:	b580      	push	{r7, lr}
 800e272:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e274:	4b05      	ldr	r3, [pc, #20]	; (800e28c <SysTick_Handler+0x1c>)
 800e276:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e278:	f002 fb10 	bl	801089c <xTaskGetSchedulerState>
 800e27c:	4603      	mov	r3, r0
 800e27e:	2b01      	cmp	r3, #1
 800e280:	d001      	beq.n	800e286 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e282:	f003 f9f9 	bl	8011678 <xPortSysTickHandler>
  }
}
 800e286:	bf00      	nop
 800e288:	bd80      	pop	{r7, pc}
 800e28a:	bf00      	nop
 800e28c:	e000e010 	.word	0xe000e010

0800e290 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e290:	b580      	push	{r7, lr}
 800e292:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e294:	2100      	movs	r1, #0
 800e296:	f06f 0004 	mvn.w	r0, #4
 800e29a:	f7ff ffbf 	bl	800e21c <__NVIC_SetPriority>
#endif
}
 800e29e:	bf00      	nop
 800e2a0:	bd80      	pop	{r7, pc}
	...

0800e2a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e2a4:	b480      	push	{r7}
 800e2a6:	b083      	sub	sp, #12
 800e2a8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e2aa:	f3ef 8305 	mrs	r3, IPSR
 800e2ae:	603b      	str	r3, [r7, #0]
  return(result);
 800e2b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d003      	beq.n	800e2be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e2b6:	f06f 0305 	mvn.w	r3, #5
 800e2ba:	607b      	str	r3, [r7, #4]
 800e2bc:	e00c      	b.n	800e2d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e2be:	4b0a      	ldr	r3, [pc, #40]	; (800e2e8 <osKernelInitialize+0x44>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d105      	bne.n	800e2d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e2c6:	4b08      	ldr	r3, [pc, #32]	; (800e2e8 <osKernelInitialize+0x44>)
 800e2c8:	2201      	movs	r2, #1
 800e2ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	607b      	str	r3, [r7, #4]
 800e2d0:	e002      	b.n	800e2d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e2d2:	f04f 33ff 	mov.w	r3, #4294967295
 800e2d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e2d8:	687b      	ldr	r3, [r7, #4]
}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	370c      	adds	r7, #12
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e4:	4770      	bx	lr
 800e2e6:	bf00      	nop
 800e2e8:	2000060c 	.word	0x2000060c

0800e2ec <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b082      	sub	sp, #8
 800e2f0:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800e2f2:	f002 fad3 	bl	801089c <xTaskGetSchedulerState>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d004      	beq.n	800e306 <osKernelGetState+0x1a>
 800e2fc:	2b02      	cmp	r3, #2
 800e2fe:	d105      	bne.n	800e30c <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800e300:	2302      	movs	r3, #2
 800e302:	607b      	str	r3, [r7, #4]
      break;
 800e304:	e00c      	b.n	800e320 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800e306:	2303      	movs	r3, #3
 800e308:	607b      	str	r3, [r7, #4]
      break;
 800e30a:	e009      	b.n	800e320 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800e30c:	4b07      	ldr	r3, [pc, #28]	; (800e32c <osKernelGetState+0x40>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	2b01      	cmp	r3, #1
 800e312:	d102      	bne.n	800e31a <osKernelGetState+0x2e>
        state = osKernelReady;
 800e314:	2301      	movs	r3, #1
 800e316:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800e318:	e001      	b.n	800e31e <osKernelGetState+0x32>
        state = osKernelInactive;
 800e31a:	2300      	movs	r3, #0
 800e31c:	607b      	str	r3, [r7, #4]
      break;
 800e31e:	bf00      	nop
  }

  return (state);
 800e320:	687b      	ldr	r3, [r7, #4]
}
 800e322:	4618      	mov	r0, r3
 800e324:	3708      	adds	r7, #8
 800e326:	46bd      	mov	sp, r7
 800e328:	bd80      	pop	{r7, pc}
 800e32a:	bf00      	nop
 800e32c:	2000060c 	.word	0x2000060c

0800e330 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800e330:	b580      	push	{r7, lr}
 800e332:	b082      	sub	sp, #8
 800e334:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e336:	f3ef 8305 	mrs	r3, IPSR
 800e33a:	603b      	str	r3, [r7, #0]
  return(result);
 800e33c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d003      	beq.n	800e34a <osKernelStart+0x1a>
    stat = osErrorISR;
 800e342:	f06f 0305 	mvn.w	r3, #5
 800e346:	607b      	str	r3, [r7, #4]
 800e348:	e010      	b.n	800e36c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e34a:	4b0b      	ldr	r3, [pc, #44]	; (800e378 <osKernelStart+0x48>)
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	2b01      	cmp	r3, #1
 800e350:	d109      	bne.n	800e366 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e352:	f7ff ff9d 	bl	800e290 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e356:	4b08      	ldr	r3, [pc, #32]	; (800e378 <osKernelStart+0x48>)
 800e358:	2202      	movs	r2, #2
 800e35a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e35c:	f001 fe08 	bl	800ff70 <vTaskStartScheduler>
      stat = osOK;
 800e360:	2300      	movs	r3, #0
 800e362:	607b      	str	r3, [r7, #4]
 800e364:	e002      	b.n	800e36c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e366:	f04f 33ff 	mov.w	r3, #4294967295
 800e36a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e36c:	687b      	ldr	r3, [r7, #4]
}
 800e36e:	4618      	mov	r0, r3
 800e370:	3708      	adds	r7, #8
 800e372:	46bd      	mov	sp, r7
 800e374:	bd80      	pop	{r7, pc}
 800e376:	bf00      	nop
 800e378:	2000060c 	.word	0x2000060c

0800e37c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b082      	sub	sp, #8
 800e380:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e382:	f3ef 8305 	mrs	r3, IPSR
 800e386:	603b      	str	r3, [r7, #0]
  return(result);
 800e388:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d003      	beq.n	800e396 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800e38e:	f001 ff1b 	bl	80101c8 <xTaskGetTickCountFromISR>
 800e392:	6078      	str	r0, [r7, #4]
 800e394:	e002      	b.n	800e39c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800e396:	f001 ff07 	bl	80101a8 <xTaskGetTickCount>
 800e39a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800e39c:	687b      	ldr	r3, [r7, #4]
}
 800e39e:	4618      	mov	r0, r3
 800e3a0:	3708      	adds	r7, #8
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	bd80      	pop	{r7, pc}

0800e3a6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e3a6:	b580      	push	{r7, lr}
 800e3a8:	b08e      	sub	sp, #56	; 0x38
 800e3aa:	af04      	add	r7, sp, #16
 800e3ac:	60f8      	str	r0, [r7, #12]
 800e3ae:	60b9      	str	r1, [r7, #8]
 800e3b0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e3b6:	f3ef 8305 	mrs	r3, IPSR
 800e3ba:	617b      	str	r3, [r7, #20]
  return(result);
 800e3bc:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d17e      	bne.n	800e4c0 <osThreadNew+0x11a>
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d07b      	beq.n	800e4c0 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e3c8:	2380      	movs	r3, #128	; 0x80
 800e3ca:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e3cc:	2318      	movs	r3, #24
 800e3ce:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800e3d4:	f04f 33ff 	mov.w	r3, #4294967295
 800e3d8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d045      	beq.n	800e46c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d002      	beq.n	800e3ee <osThreadNew+0x48>
        name = attr->name;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	699b      	ldr	r3, [r3, #24]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d002      	beq.n	800e3fc <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	699b      	ldr	r3, [r3, #24]
 800e3fa:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e3fc:	69fb      	ldr	r3, [r7, #28]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d008      	beq.n	800e414 <osThreadNew+0x6e>
 800e402:	69fb      	ldr	r3, [r7, #28]
 800e404:	2b38      	cmp	r3, #56	; 0x38
 800e406:	d805      	bhi.n	800e414 <osThreadNew+0x6e>
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	685b      	ldr	r3, [r3, #4]
 800e40c:	f003 0301 	and.w	r3, r3, #1
 800e410:	2b00      	cmp	r3, #0
 800e412:	d001      	beq.n	800e418 <osThreadNew+0x72>
        return (NULL);
 800e414:	2300      	movs	r3, #0
 800e416:	e054      	b.n	800e4c2 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	695b      	ldr	r3, [r3, #20]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d003      	beq.n	800e428 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	695b      	ldr	r3, [r3, #20]
 800e424:	089b      	lsrs	r3, r3, #2
 800e426:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	689b      	ldr	r3, [r3, #8]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d00e      	beq.n	800e44e <osThreadNew+0xa8>
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	68db      	ldr	r3, [r3, #12]
 800e434:	2bab      	cmp	r3, #171	; 0xab
 800e436:	d90a      	bls.n	800e44e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d006      	beq.n	800e44e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	695b      	ldr	r3, [r3, #20]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d002      	beq.n	800e44e <osThreadNew+0xa8>
        mem = 1;
 800e448:	2301      	movs	r3, #1
 800e44a:	61bb      	str	r3, [r7, #24]
 800e44c:	e010      	b.n	800e470 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	689b      	ldr	r3, [r3, #8]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d10c      	bne.n	800e470 <osThreadNew+0xca>
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	68db      	ldr	r3, [r3, #12]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d108      	bne.n	800e470 <osThreadNew+0xca>
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	691b      	ldr	r3, [r3, #16]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d104      	bne.n	800e470 <osThreadNew+0xca>
          mem = 0;
 800e466:	2300      	movs	r3, #0
 800e468:	61bb      	str	r3, [r7, #24]
 800e46a:	e001      	b.n	800e470 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e46c:	2300      	movs	r3, #0
 800e46e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e470:	69bb      	ldr	r3, [r7, #24]
 800e472:	2b01      	cmp	r3, #1
 800e474:	d110      	bne.n	800e498 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e47a:	687a      	ldr	r2, [r7, #4]
 800e47c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e47e:	9202      	str	r2, [sp, #8]
 800e480:	9301      	str	r3, [sp, #4]
 800e482:	69fb      	ldr	r3, [r7, #28]
 800e484:	9300      	str	r3, [sp, #0]
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	6a3a      	ldr	r2, [r7, #32]
 800e48a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e48c:	68f8      	ldr	r0, [r7, #12]
 800e48e:	f001 fb7f 	bl	800fb90 <xTaskCreateStatic>
 800e492:	4603      	mov	r3, r0
 800e494:	613b      	str	r3, [r7, #16]
 800e496:	e013      	b.n	800e4c0 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e498:	69bb      	ldr	r3, [r7, #24]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d110      	bne.n	800e4c0 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e49e:	6a3b      	ldr	r3, [r7, #32]
 800e4a0:	b29a      	uxth	r2, r3
 800e4a2:	f107 0310 	add.w	r3, r7, #16
 800e4a6:	9301      	str	r3, [sp, #4]
 800e4a8:	69fb      	ldr	r3, [r7, #28]
 800e4aa:	9300      	str	r3, [sp, #0]
 800e4ac:	68bb      	ldr	r3, [r7, #8]
 800e4ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e4b0:	68f8      	ldr	r0, [r7, #12]
 800e4b2:	f001 fbca 	bl	800fc4a <xTaskCreate>
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	2b01      	cmp	r3, #1
 800e4ba:	d001      	beq.n	800e4c0 <osThreadNew+0x11a>
            hTask = NULL;
 800e4bc:	2300      	movs	r3, #0
 800e4be:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e4c0:	693b      	ldr	r3, [r7, #16]
}
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	3728      	adds	r7, #40	; 0x28
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}

0800e4ca <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800e4ca:	b580      	push	{r7, lr}
 800e4cc:	b084      	sub	sp, #16
 800e4ce:	af00      	add	r7, sp, #0
 800e4d0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e4d2:	f3ef 8305 	mrs	r3, IPSR
 800e4d6:	60bb      	str	r3, [r7, #8]
  return(result);
 800e4d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d003      	beq.n	800e4e6 <osDelay+0x1c>
    stat = osErrorISR;
 800e4de:	f06f 0305 	mvn.w	r3, #5
 800e4e2:	60fb      	str	r3, [r7, #12]
 800e4e4:	e007      	b.n	800e4f6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d002      	beq.n	800e4f6 <osDelay+0x2c>
      vTaskDelay(ticks);
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f001 fd09 	bl	800ff08 <vTaskDelay>
    }
  }

  return (stat);
 800e4f6:	68fb      	ldr	r3, [r7, #12]
}
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	3710      	adds	r7, #16
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}

0800e500 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800e500:	b580      	push	{r7, lr}
 800e502:	b08a      	sub	sp, #40	; 0x28
 800e504:	af02      	add	r7, sp, #8
 800e506:	60f8      	str	r0, [r7, #12]
 800e508:	60b9      	str	r1, [r7, #8]
 800e50a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800e50c:	2300      	movs	r3, #0
 800e50e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e510:	f3ef 8305 	mrs	r3, IPSR
 800e514:	613b      	str	r3, [r7, #16]
  return(result);
 800e516:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d175      	bne.n	800e608 <osSemaphoreNew+0x108>
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d072      	beq.n	800e608 <osSemaphoreNew+0x108>
 800e522:	68ba      	ldr	r2, [r7, #8]
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	429a      	cmp	r2, r3
 800e528:	d86e      	bhi.n	800e608 <osSemaphoreNew+0x108>
    mem = -1;
 800e52a:	f04f 33ff 	mov.w	r3, #4294967295
 800e52e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d015      	beq.n	800e562 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	689b      	ldr	r3, [r3, #8]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d006      	beq.n	800e54c <osSemaphoreNew+0x4c>
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	68db      	ldr	r3, [r3, #12]
 800e542:	2b4f      	cmp	r3, #79	; 0x4f
 800e544:	d902      	bls.n	800e54c <osSemaphoreNew+0x4c>
        mem = 1;
 800e546:	2301      	movs	r3, #1
 800e548:	61bb      	str	r3, [r7, #24]
 800e54a:	e00c      	b.n	800e566 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	689b      	ldr	r3, [r3, #8]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d108      	bne.n	800e566 <osSemaphoreNew+0x66>
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	68db      	ldr	r3, [r3, #12]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d104      	bne.n	800e566 <osSemaphoreNew+0x66>
          mem = 0;
 800e55c:	2300      	movs	r3, #0
 800e55e:	61bb      	str	r3, [r7, #24]
 800e560:	e001      	b.n	800e566 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800e562:	2300      	movs	r3, #0
 800e564:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800e566:	69bb      	ldr	r3, [r7, #24]
 800e568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e56c:	d04c      	beq.n	800e608 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	2b01      	cmp	r3, #1
 800e572:	d128      	bne.n	800e5c6 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800e574:	69bb      	ldr	r3, [r7, #24]
 800e576:	2b01      	cmp	r3, #1
 800e578:	d10a      	bne.n	800e590 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	689b      	ldr	r3, [r3, #8]
 800e57e:	2203      	movs	r2, #3
 800e580:	9200      	str	r2, [sp, #0]
 800e582:	2200      	movs	r2, #0
 800e584:	2100      	movs	r1, #0
 800e586:	2001      	movs	r0, #1
 800e588:	f000 fb5c 	bl	800ec44 <xQueueGenericCreateStatic>
 800e58c:	61f8      	str	r0, [r7, #28]
 800e58e:	e005      	b.n	800e59c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800e590:	2203      	movs	r2, #3
 800e592:	2100      	movs	r1, #0
 800e594:	2001      	movs	r0, #1
 800e596:	f000 fbcd 	bl	800ed34 <xQueueGenericCreate>
 800e59a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800e59c:	69fb      	ldr	r3, [r7, #28]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d022      	beq.n	800e5e8 <osSemaphoreNew+0xe8>
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d01f      	beq.n	800e5e8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	2100      	movs	r1, #0
 800e5ae:	69f8      	ldr	r0, [r7, #28]
 800e5b0:	f000 fc88 	bl	800eec4 <xQueueGenericSend>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	2b01      	cmp	r3, #1
 800e5b8:	d016      	beq.n	800e5e8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800e5ba:	69f8      	ldr	r0, [r7, #28]
 800e5bc:	f001 f914 	bl	800f7e8 <vQueueDelete>
            hSemaphore = NULL;
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	61fb      	str	r3, [r7, #28]
 800e5c4:	e010      	b.n	800e5e8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800e5c6:	69bb      	ldr	r3, [r7, #24]
 800e5c8:	2b01      	cmp	r3, #1
 800e5ca:	d108      	bne.n	800e5de <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	689b      	ldr	r3, [r3, #8]
 800e5d0:	461a      	mov	r2, r3
 800e5d2:	68b9      	ldr	r1, [r7, #8]
 800e5d4:	68f8      	ldr	r0, [r7, #12]
 800e5d6:	f000 fc0a 	bl	800edee <xQueueCreateCountingSemaphoreStatic>
 800e5da:	61f8      	str	r0, [r7, #28]
 800e5dc:	e004      	b.n	800e5e8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800e5de:	68b9      	ldr	r1, [r7, #8]
 800e5e0:	68f8      	ldr	r0, [r7, #12]
 800e5e2:	f000 fc3b 	bl	800ee5c <xQueueCreateCountingSemaphore>
 800e5e6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800e5e8:	69fb      	ldr	r3, [r7, #28]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d00c      	beq.n	800e608 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d003      	beq.n	800e5fc <osSemaphoreNew+0xfc>
          name = attr->name;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	617b      	str	r3, [r7, #20]
 800e5fa:	e001      	b.n	800e600 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800e600:	6979      	ldr	r1, [r7, #20]
 800e602:	69f8      	ldr	r0, [r7, #28]
 800e604:	f001 fa3c 	bl	800fa80 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800e608:	69fb      	ldr	r3, [r7, #28]
}
 800e60a:	4618      	mov	r0, r3
 800e60c:	3720      	adds	r7, #32
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}
	...

0800e614 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800e614:	b580      	push	{r7, lr}
 800e616:	b086      	sub	sp, #24
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
 800e61c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e622:	2300      	movs	r3, #0
 800e624:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800e626:	693b      	ldr	r3, [r7, #16]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d103      	bne.n	800e634 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800e62c:	f06f 0303 	mvn.w	r3, #3
 800e630:	617b      	str	r3, [r7, #20]
 800e632:	e039      	b.n	800e6a8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e634:	f3ef 8305 	mrs	r3, IPSR
 800e638:	60fb      	str	r3, [r7, #12]
  return(result);
 800e63a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d022      	beq.n	800e686 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d003      	beq.n	800e64e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800e646:	f06f 0303 	mvn.w	r3, #3
 800e64a:	617b      	str	r3, [r7, #20]
 800e64c:	e02c      	b.n	800e6a8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800e64e:	2300      	movs	r3, #0
 800e650:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800e652:	f107 0308 	add.w	r3, r7, #8
 800e656:	461a      	mov	r2, r3
 800e658:	2100      	movs	r1, #0
 800e65a:	6938      	ldr	r0, [r7, #16]
 800e65c:	f001 f844 	bl	800f6e8 <xQueueReceiveFromISR>
 800e660:	4603      	mov	r3, r0
 800e662:	2b01      	cmp	r3, #1
 800e664:	d003      	beq.n	800e66e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800e666:	f06f 0302 	mvn.w	r3, #2
 800e66a:	617b      	str	r3, [r7, #20]
 800e66c:	e01c      	b.n	800e6a8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d019      	beq.n	800e6a8 <osSemaphoreAcquire+0x94>
 800e674:	4b0f      	ldr	r3, [pc, #60]	; (800e6b4 <osSemaphoreAcquire+0xa0>)
 800e676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e67a:	601a      	str	r2, [r3, #0]
 800e67c:	f3bf 8f4f 	dsb	sy
 800e680:	f3bf 8f6f 	isb	sy
 800e684:	e010      	b.n	800e6a8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800e686:	6839      	ldr	r1, [r7, #0]
 800e688:	6938      	ldr	r0, [r7, #16]
 800e68a:	f000 ff21 	bl	800f4d0 <xQueueSemaphoreTake>
 800e68e:	4603      	mov	r3, r0
 800e690:	2b01      	cmp	r3, #1
 800e692:	d009      	beq.n	800e6a8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d003      	beq.n	800e6a2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800e69a:	f06f 0301 	mvn.w	r3, #1
 800e69e:	617b      	str	r3, [r7, #20]
 800e6a0:	e002      	b.n	800e6a8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800e6a2:	f06f 0302 	mvn.w	r3, #2
 800e6a6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800e6a8:	697b      	ldr	r3, [r7, #20]
}
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	3718      	adds	r7, #24
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	bd80      	pop	{r7, pc}
 800e6b2:	bf00      	nop
 800e6b4:	e000ed04 	.word	0xe000ed04

0800e6b8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b086      	sub	sp, #24
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800e6c8:	693b      	ldr	r3, [r7, #16]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d103      	bne.n	800e6d6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800e6ce:	f06f 0303 	mvn.w	r3, #3
 800e6d2:	617b      	str	r3, [r7, #20]
 800e6d4:	e02c      	b.n	800e730 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e6d6:	f3ef 8305 	mrs	r3, IPSR
 800e6da:	60fb      	str	r3, [r7, #12]
  return(result);
 800e6dc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d01a      	beq.n	800e718 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e6e6:	f107 0308 	add.w	r3, r7, #8
 800e6ea:	4619      	mov	r1, r3
 800e6ec:	6938      	ldr	r0, [r7, #16]
 800e6ee:	f000 fd82 	bl	800f1f6 <xQueueGiveFromISR>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	2b01      	cmp	r3, #1
 800e6f6:	d003      	beq.n	800e700 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800e6f8:	f06f 0302 	mvn.w	r3, #2
 800e6fc:	617b      	str	r3, [r7, #20]
 800e6fe:	e017      	b.n	800e730 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800e700:	68bb      	ldr	r3, [r7, #8]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d014      	beq.n	800e730 <osSemaphoreRelease+0x78>
 800e706:	4b0d      	ldr	r3, [pc, #52]	; (800e73c <osSemaphoreRelease+0x84>)
 800e708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e70c:	601a      	str	r2, [r3, #0]
 800e70e:	f3bf 8f4f 	dsb	sy
 800e712:	f3bf 8f6f 	isb	sy
 800e716:	e00b      	b.n	800e730 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e718:	2300      	movs	r3, #0
 800e71a:	2200      	movs	r2, #0
 800e71c:	2100      	movs	r1, #0
 800e71e:	6938      	ldr	r0, [r7, #16]
 800e720:	f000 fbd0 	bl	800eec4 <xQueueGenericSend>
 800e724:	4603      	mov	r3, r0
 800e726:	2b01      	cmp	r3, #1
 800e728:	d002      	beq.n	800e730 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800e72a:	f06f 0302 	mvn.w	r3, #2
 800e72e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800e730:	697b      	ldr	r3, [r7, #20]
}
 800e732:	4618      	mov	r0, r3
 800e734:	3718      	adds	r7, #24
 800e736:	46bd      	mov	sp, r7
 800e738:	bd80      	pop	{r7, pc}
 800e73a:	bf00      	nop
 800e73c:	e000ed04 	.word	0xe000ed04

0800e740 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e740:	b580      	push	{r7, lr}
 800e742:	b08a      	sub	sp, #40	; 0x28
 800e744:	af02      	add	r7, sp, #8
 800e746:	60f8      	str	r0, [r7, #12]
 800e748:	60b9      	str	r1, [r7, #8]
 800e74a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800e74c:	2300      	movs	r3, #0
 800e74e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e750:	f3ef 8305 	mrs	r3, IPSR
 800e754:	613b      	str	r3, [r7, #16]
  return(result);
 800e756:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d15f      	bne.n	800e81c <osMessageQueueNew+0xdc>
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d05c      	beq.n	800e81c <osMessageQueueNew+0xdc>
 800e762:	68bb      	ldr	r3, [r7, #8]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d059      	beq.n	800e81c <osMessageQueueNew+0xdc>
    mem = -1;
 800e768:	f04f 33ff 	mov.w	r3, #4294967295
 800e76c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d029      	beq.n	800e7c8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	689b      	ldr	r3, [r3, #8]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d012      	beq.n	800e7a2 <osMessageQueueNew+0x62>
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	68db      	ldr	r3, [r3, #12]
 800e780:	2b4f      	cmp	r3, #79	; 0x4f
 800e782:	d90e      	bls.n	800e7a2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d00a      	beq.n	800e7a2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	695a      	ldr	r2, [r3, #20]
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	68b9      	ldr	r1, [r7, #8]
 800e794:	fb01 f303 	mul.w	r3, r1, r3
 800e798:	429a      	cmp	r2, r3
 800e79a:	d302      	bcc.n	800e7a2 <osMessageQueueNew+0x62>
        mem = 1;
 800e79c:	2301      	movs	r3, #1
 800e79e:	61bb      	str	r3, [r7, #24]
 800e7a0:	e014      	b.n	800e7cc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	689b      	ldr	r3, [r3, #8]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d110      	bne.n	800e7cc <osMessageQueueNew+0x8c>
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	68db      	ldr	r3, [r3, #12]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d10c      	bne.n	800e7cc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d108      	bne.n	800e7cc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	695b      	ldr	r3, [r3, #20]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d104      	bne.n	800e7cc <osMessageQueueNew+0x8c>
          mem = 0;
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	61bb      	str	r3, [r7, #24]
 800e7c6:	e001      	b.n	800e7cc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e7cc:	69bb      	ldr	r3, [r7, #24]
 800e7ce:	2b01      	cmp	r3, #1
 800e7d0:	d10b      	bne.n	800e7ea <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	691a      	ldr	r2, [r3, #16]
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	689b      	ldr	r3, [r3, #8]
 800e7da:	2100      	movs	r1, #0
 800e7dc:	9100      	str	r1, [sp, #0]
 800e7de:	68b9      	ldr	r1, [r7, #8]
 800e7e0:	68f8      	ldr	r0, [r7, #12]
 800e7e2:	f000 fa2f 	bl	800ec44 <xQueueGenericCreateStatic>
 800e7e6:	61f8      	str	r0, [r7, #28]
 800e7e8:	e008      	b.n	800e7fc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800e7ea:	69bb      	ldr	r3, [r7, #24]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d105      	bne.n	800e7fc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	68b9      	ldr	r1, [r7, #8]
 800e7f4:	68f8      	ldr	r0, [r7, #12]
 800e7f6:	f000 fa9d 	bl	800ed34 <xQueueGenericCreate>
 800e7fa:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800e7fc:	69fb      	ldr	r3, [r7, #28]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d00c      	beq.n	800e81c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d003      	beq.n	800e810 <osMessageQueueNew+0xd0>
        name = attr->name;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	617b      	str	r3, [r7, #20]
 800e80e:	e001      	b.n	800e814 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800e810:	2300      	movs	r3, #0
 800e812:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800e814:	6979      	ldr	r1, [r7, #20]
 800e816:	69f8      	ldr	r0, [r7, #28]
 800e818:	f001 f932 	bl	800fa80 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800e81c:	69fb      	ldr	r3, [r7, #28]
}
 800e81e:	4618      	mov	r0, r3
 800e820:	3720      	adds	r7, #32
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}
	...

0800e828 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800e828:	b580      	push	{r7, lr}
 800e82a:	b088      	sub	sp, #32
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	60f8      	str	r0, [r7, #12]
 800e830:	60b9      	str	r1, [r7, #8]
 800e832:	603b      	str	r3, [r7, #0]
 800e834:	4613      	mov	r3, r2
 800e836:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e83c:	2300      	movs	r3, #0
 800e83e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e840:	f3ef 8305 	mrs	r3, IPSR
 800e844:	617b      	str	r3, [r7, #20]
  return(result);
 800e846:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d028      	beq.n	800e89e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e84c:	69bb      	ldr	r3, [r7, #24]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d005      	beq.n	800e85e <osMessageQueuePut+0x36>
 800e852:	68bb      	ldr	r3, [r7, #8]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d002      	beq.n	800e85e <osMessageQueuePut+0x36>
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d003      	beq.n	800e866 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800e85e:	f06f 0303 	mvn.w	r3, #3
 800e862:	61fb      	str	r3, [r7, #28]
 800e864:	e038      	b.n	800e8d8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800e866:	2300      	movs	r3, #0
 800e868:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e86a:	f107 0210 	add.w	r2, r7, #16
 800e86e:	2300      	movs	r3, #0
 800e870:	68b9      	ldr	r1, [r7, #8]
 800e872:	69b8      	ldr	r0, [r7, #24]
 800e874:	f000 fc24 	bl	800f0c0 <xQueueGenericSendFromISR>
 800e878:	4603      	mov	r3, r0
 800e87a:	2b01      	cmp	r3, #1
 800e87c:	d003      	beq.n	800e886 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800e87e:	f06f 0302 	mvn.w	r3, #2
 800e882:	61fb      	str	r3, [r7, #28]
 800e884:	e028      	b.n	800e8d8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800e886:	693b      	ldr	r3, [r7, #16]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d025      	beq.n	800e8d8 <osMessageQueuePut+0xb0>
 800e88c:	4b15      	ldr	r3, [pc, #84]	; (800e8e4 <osMessageQueuePut+0xbc>)
 800e88e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e892:	601a      	str	r2, [r3, #0]
 800e894:	f3bf 8f4f 	dsb	sy
 800e898:	f3bf 8f6f 	isb	sy
 800e89c:	e01c      	b.n	800e8d8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e89e:	69bb      	ldr	r3, [r7, #24]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d002      	beq.n	800e8aa <osMessageQueuePut+0x82>
 800e8a4:	68bb      	ldr	r3, [r7, #8]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d103      	bne.n	800e8b2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800e8aa:	f06f 0303 	mvn.w	r3, #3
 800e8ae:	61fb      	str	r3, [r7, #28]
 800e8b0:	e012      	b.n	800e8d8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	683a      	ldr	r2, [r7, #0]
 800e8b6:	68b9      	ldr	r1, [r7, #8]
 800e8b8:	69b8      	ldr	r0, [r7, #24]
 800e8ba:	f000 fb03 	bl	800eec4 <xQueueGenericSend>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	2b01      	cmp	r3, #1
 800e8c2:	d009      	beq.n	800e8d8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800e8c4:	683b      	ldr	r3, [r7, #0]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d003      	beq.n	800e8d2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800e8ca:	f06f 0301 	mvn.w	r3, #1
 800e8ce:	61fb      	str	r3, [r7, #28]
 800e8d0:	e002      	b.n	800e8d8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800e8d2:	f06f 0302 	mvn.w	r3, #2
 800e8d6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e8d8:	69fb      	ldr	r3, [r7, #28]
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	3720      	adds	r7, #32
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}
 800e8e2:	bf00      	nop
 800e8e4:	e000ed04 	.word	0xe000ed04

0800e8e8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b088      	sub	sp, #32
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	60f8      	str	r0, [r7, #12]
 800e8f0:	60b9      	str	r1, [r7, #8]
 800e8f2:	607a      	str	r2, [r7, #4]
 800e8f4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e8fe:	f3ef 8305 	mrs	r3, IPSR
 800e902:	617b      	str	r3, [r7, #20]
  return(result);
 800e904:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e906:	2b00      	cmp	r3, #0
 800e908:	d028      	beq.n	800e95c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e90a:	69bb      	ldr	r3, [r7, #24]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d005      	beq.n	800e91c <osMessageQueueGet+0x34>
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d002      	beq.n	800e91c <osMessageQueueGet+0x34>
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d003      	beq.n	800e924 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800e91c:	f06f 0303 	mvn.w	r3, #3
 800e920:	61fb      	str	r3, [r7, #28]
 800e922:	e037      	b.n	800e994 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800e924:	2300      	movs	r3, #0
 800e926:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e928:	f107 0310 	add.w	r3, r7, #16
 800e92c:	461a      	mov	r2, r3
 800e92e:	68b9      	ldr	r1, [r7, #8]
 800e930:	69b8      	ldr	r0, [r7, #24]
 800e932:	f000 fed9 	bl	800f6e8 <xQueueReceiveFromISR>
 800e936:	4603      	mov	r3, r0
 800e938:	2b01      	cmp	r3, #1
 800e93a:	d003      	beq.n	800e944 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800e93c:	f06f 0302 	mvn.w	r3, #2
 800e940:	61fb      	str	r3, [r7, #28]
 800e942:	e027      	b.n	800e994 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800e944:	693b      	ldr	r3, [r7, #16]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d024      	beq.n	800e994 <osMessageQueueGet+0xac>
 800e94a:	4b15      	ldr	r3, [pc, #84]	; (800e9a0 <osMessageQueueGet+0xb8>)
 800e94c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e950:	601a      	str	r2, [r3, #0]
 800e952:	f3bf 8f4f 	dsb	sy
 800e956:	f3bf 8f6f 	isb	sy
 800e95a:	e01b      	b.n	800e994 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e95c:	69bb      	ldr	r3, [r7, #24]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d002      	beq.n	800e968 <osMessageQueueGet+0x80>
 800e962:	68bb      	ldr	r3, [r7, #8]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d103      	bne.n	800e970 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800e968:	f06f 0303 	mvn.w	r3, #3
 800e96c:	61fb      	str	r3, [r7, #28]
 800e96e:	e011      	b.n	800e994 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e970:	683a      	ldr	r2, [r7, #0]
 800e972:	68b9      	ldr	r1, [r7, #8]
 800e974:	69b8      	ldr	r0, [r7, #24]
 800e976:	f000 fccb 	bl	800f310 <xQueueReceive>
 800e97a:	4603      	mov	r3, r0
 800e97c:	2b01      	cmp	r3, #1
 800e97e:	d009      	beq.n	800e994 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d003      	beq.n	800e98e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800e986:	f06f 0301 	mvn.w	r3, #1
 800e98a:	61fb      	str	r3, [r7, #28]
 800e98c:	e002      	b.n	800e994 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800e98e:	f06f 0302 	mvn.w	r3, #2
 800e992:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e994:	69fb      	ldr	r3, [r7, #28]
}
 800e996:	4618      	mov	r0, r3
 800e998:	3720      	adds	r7, #32
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}
 800e99e:	bf00      	nop
 800e9a0:	e000ed04 	.word	0xe000ed04

0800e9a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e9a4:	b480      	push	{r7}
 800e9a6:	b085      	sub	sp, #20
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	60f8      	str	r0, [r7, #12]
 800e9ac:	60b9      	str	r1, [r7, #8]
 800e9ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	4a07      	ldr	r2, [pc, #28]	; (800e9d0 <vApplicationGetIdleTaskMemory+0x2c>)
 800e9b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e9b6:	68bb      	ldr	r3, [r7, #8]
 800e9b8:	4a06      	ldr	r2, [pc, #24]	; (800e9d4 <vApplicationGetIdleTaskMemory+0x30>)
 800e9ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2280      	movs	r2, #128	; 0x80
 800e9c0:	601a      	str	r2, [r3, #0]
}
 800e9c2:	bf00      	nop
 800e9c4:	3714      	adds	r7, #20
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9cc:	4770      	bx	lr
 800e9ce:	bf00      	nop
 800e9d0:	20000610 	.word	0x20000610
 800e9d4:	200006bc 	.word	0x200006bc

0800e9d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e9d8:	b480      	push	{r7}
 800e9da:	b085      	sub	sp, #20
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	60f8      	str	r0, [r7, #12]
 800e9e0:	60b9      	str	r1, [r7, #8]
 800e9e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	4a07      	ldr	r2, [pc, #28]	; (800ea04 <vApplicationGetTimerTaskMemory+0x2c>)
 800e9e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	4a06      	ldr	r2, [pc, #24]	; (800ea08 <vApplicationGetTimerTaskMemory+0x30>)
 800e9ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e9f6:	601a      	str	r2, [r3, #0]
}
 800e9f8:	bf00      	nop
 800e9fa:	3714      	adds	r7, #20
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea02:	4770      	bx	lr
 800ea04:	200008bc 	.word	0x200008bc
 800ea08:	20000968 	.word	0x20000968

0800ea0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ea0c:	b480      	push	{r7}
 800ea0e:	b083      	sub	sp, #12
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	f103 0208 	add.w	r2, r3, #8
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	f04f 32ff 	mov.w	r2, #4294967295
 800ea24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	f103 0208 	add.w	r2, r3, #8
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	f103 0208 	add.w	r2, r3, #8
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ea40:	bf00      	nop
 800ea42:	370c      	adds	r7, #12
 800ea44:	46bd      	mov	sp, r7
 800ea46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4a:	4770      	bx	lr

0800ea4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ea4c:	b480      	push	{r7}
 800ea4e:	b083      	sub	sp, #12
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2200      	movs	r2, #0
 800ea58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ea5a:	bf00      	nop
 800ea5c:	370c      	adds	r7, #12
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea64:	4770      	bx	lr

0800ea66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ea66:	b480      	push	{r7}
 800ea68:	b085      	sub	sp, #20
 800ea6a:	af00      	add	r7, sp, #0
 800ea6c:	6078      	str	r0, [r7, #4]
 800ea6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	685b      	ldr	r3, [r3, #4]
 800ea74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	68fa      	ldr	r2, [r7, #12]
 800ea7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	689a      	ldr	r2, [r3, #8]
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	689b      	ldr	r3, [r3, #8]
 800ea88:	683a      	ldr	r2, [r7, #0]
 800ea8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	683a      	ldr	r2, [r7, #0]
 800ea90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	687a      	ldr	r2, [r7, #4]
 800ea96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	1c5a      	adds	r2, r3, #1
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	601a      	str	r2, [r3, #0]
}
 800eaa2:	bf00      	nop
 800eaa4:	3714      	adds	r7, #20
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaac:	4770      	bx	lr

0800eaae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eaae:	b480      	push	{r7}
 800eab0:	b085      	sub	sp, #20
 800eab2:	af00      	add	r7, sp, #0
 800eab4:	6078      	str	r0, [r7, #4]
 800eab6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800eabe:	68bb      	ldr	r3, [r7, #8]
 800eac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eac4:	d103      	bne.n	800eace <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	691b      	ldr	r3, [r3, #16]
 800eaca:	60fb      	str	r3, [r7, #12]
 800eacc:	e00c      	b.n	800eae8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	3308      	adds	r3, #8
 800ead2:	60fb      	str	r3, [r7, #12]
 800ead4:	e002      	b.n	800eadc <vListInsert+0x2e>
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	685b      	ldr	r3, [r3, #4]
 800eada:	60fb      	str	r3, [r7, #12]
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	685b      	ldr	r3, [r3, #4]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	68ba      	ldr	r2, [r7, #8]
 800eae4:	429a      	cmp	r2, r3
 800eae6:	d2f6      	bcs.n	800ead6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	685a      	ldr	r2, [r3, #4]
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	685b      	ldr	r3, [r3, #4]
 800eaf4:	683a      	ldr	r2, [r7, #0]
 800eaf6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	68fa      	ldr	r2, [r7, #12]
 800eafc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	683a      	ldr	r2, [r7, #0]
 800eb02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	687a      	ldr	r2, [r7, #4]
 800eb08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	1c5a      	adds	r2, r3, #1
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	601a      	str	r2, [r3, #0]
}
 800eb14:	bf00      	nop
 800eb16:	3714      	adds	r7, #20
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1e:	4770      	bx	lr

0800eb20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800eb20:	b480      	push	{r7}
 800eb22:	b085      	sub	sp, #20
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	691b      	ldr	r3, [r3, #16]
 800eb2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	685b      	ldr	r3, [r3, #4]
 800eb32:	687a      	ldr	r2, [r7, #4]
 800eb34:	6892      	ldr	r2, [r2, #8]
 800eb36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	689b      	ldr	r3, [r3, #8]
 800eb3c:	687a      	ldr	r2, [r7, #4]
 800eb3e:	6852      	ldr	r2, [r2, #4]
 800eb40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	685b      	ldr	r3, [r3, #4]
 800eb46:	687a      	ldr	r2, [r7, #4]
 800eb48:	429a      	cmp	r2, r3
 800eb4a:	d103      	bne.n	800eb54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	689a      	ldr	r2, [r3, #8]
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2200      	movs	r2, #0
 800eb58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	1e5a      	subs	r2, r3, #1
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	681b      	ldr	r3, [r3, #0]
}
 800eb68:	4618      	mov	r0, r3
 800eb6a:	3714      	adds	r7, #20
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb72:	4770      	bx	lr

0800eb74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b084      	sub	sp, #16
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
 800eb7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d10a      	bne.n	800eb9e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800eb88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb8c:	f383 8811 	msr	BASEPRI, r3
 800eb90:	f3bf 8f6f 	isb	sy
 800eb94:	f3bf 8f4f 	dsb	sy
 800eb98:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800eb9a:	bf00      	nop
 800eb9c:	e7fe      	b.n	800eb9c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800eb9e:	f002 fcd9 	bl	8011554 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	681a      	ldr	r2, [r3, #0]
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebaa:	68f9      	ldr	r1, [r7, #12]
 800ebac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ebae:	fb01 f303 	mul.w	r3, r1, r3
 800ebb2:	441a      	add	r2, r3
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	2200      	movs	r2, #0
 800ebbc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	681a      	ldr	r2, [r3, #0]
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	681a      	ldr	r2, [r3, #0]
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebce:	3b01      	subs	r3, #1
 800ebd0:	68f9      	ldr	r1, [r7, #12]
 800ebd2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ebd4:	fb01 f303 	mul.w	r3, r1, r3
 800ebd8:	441a      	add	r2, r3
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	22ff      	movs	r2, #255	; 0xff
 800ebe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	22ff      	movs	r2, #255	; 0xff
 800ebea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ebee:	683b      	ldr	r3, [r7, #0]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d114      	bne.n	800ec1e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	691b      	ldr	r3, [r3, #16]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d01a      	beq.n	800ec32 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	3310      	adds	r3, #16
 800ec00:	4618      	mov	r0, r3
 800ec02:	f001 fc87 	bl	8010514 <xTaskRemoveFromEventList>
 800ec06:	4603      	mov	r3, r0
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d012      	beq.n	800ec32 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ec0c:	4b0c      	ldr	r3, [pc, #48]	; (800ec40 <xQueueGenericReset+0xcc>)
 800ec0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec12:	601a      	str	r2, [r3, #0]
 800ec14:	f3bf 8f4f 	dsb	sy
 800ec18:	f3bf 8f6f 	isb	sy
 800ec1c:	e009      	b.n	800ec32 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	3310      	adds	r3, #16
 800ec22:	4618      	mov	r0, r3
 800ec24:	f7ff fef2 	bl	800ea0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	3324      	adds	r3, #36	; 0x24
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	f7ff feed 	bl	800ea0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ec32:	f002 fcbf 	bl	80115b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ec36:	2301      	movs	r3, #1
}
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3710      	adds	r7, #16
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}
 800ec40:	e000ed04 	.word	0xe000ed04

0800ec44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b08e      	sub	sp, #56	; 0x38
 800ec48:	af02      	add	r7, sp, #8
 800ec4a:	60f8      	str	r0, [r7, #12]
 800ec4c:	60b9      	str	r1, [r7, #8]
 800ec4e:	607a      	str	r2, [r7, #4]
 800ec50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d10a      	bne.n	800ec6e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ec58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec5c:	f383 8811 	msr	BASEPRI, r3
 800ec60:	f3bf 8f6f 	isb	sy
 800ec64:	f3bf 8f4f 	dsb	sy
 800ec68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ec6a:	bf00      	nop
 800ec6c:	e7fe      	b.n	800ec6c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d10a      	bne.n	800ec8a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ec74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec78:	f383 8811 	msr	BASEPRI, r3
 800ec7c:	f3bf 8f6f 	isb	sy
 800ec80:	f3bf 8f4f 	dsb	sy
 800ec84:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ec86:	bf00      	nop
 800ec88:	e7fe      	b.n	800ec88 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d002      	beq.n	800ec96 <xQueueGenericCreateStatic+0x52>
 800ec90:	68bb      	ldr	r3, [r7, #8]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d001      	beq.n	800ec9a <xQueueGenericCreateStatic+0x56>
 800ec96:	2301      	movs	r3, #1
 800ec98:	e000      	b.n	800ec9c <xQueueGenericCreateStatic+0x58>
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d10a      	bne.n	800ecb6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800eca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eca4:	f383 8811 	msr	BASEPRI, r3
 800eca8:	f3bf 8f6f 	isb	sy
 800ecac:	f3bf 8f4f 	dsb	sy
 800ecb0:	623b      	str	r3, [r7, #32]
}
 800ecb2:	bf00      	nop
 800ecb4:	e7fe      	b.n	800ecb4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d102      	bne.n	800ecc2 <xQueueGenericCreateStatic+0x7e>
 800ecbc:	68bb      	ldr	r3, [r7, #8]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d101      	bne.n	800ecc6 <xQueueGenericCreateStatic+0x82>
 800ecc2:	2301      	movs	r3, #1
 800ecc4:	e000      	b.n	800ecc8 <xQueueGenericCreateStatic+0x84>
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d10a      	bne.n	800ece2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800eccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecd0:	f383 8811 	msr	BASEPRI, r3
 800ecd4:	f3bf 8f6f 	isb	sy
 800ecd8:	f3bf 8f4f 	dsb	sy
 800ecdc:	61fb      	str	r3, [r7, #28]
}
 800ecde:	bf00      	nop
 800ece0:	e7fe      	b.n	800ece0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ece2:	2350      	movs	r3, #80	; 0x50
 800ece4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ece6:	697b      	ldr	r3, [r7, #20]
 800ece8:	2b50      	cmp	r3, #80	; 0x50
 800ecea:	d00a      	beq.n	800ed02 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ecec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecf0:	f383 8811 	msr	BASEPRI, r3
 800ecf4:	f3bf 8f6f 	isb	sy
 800ecf8:	f3bf 8f4f 	dsb	sy
 800ecfc:	61bb      	str	r3, [r7, #24]
}
 800ecfe:	bf00      	nop
 800ed00:	e7fe      	b.n	800ed00 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ed02:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ed04:	683b      	ldr	r3, [r7, #0]
 800ed06:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ed08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d00d      	beq.n	800ed2a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ed0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed10:	2201      	movs	r2, #1
 800ed12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ed16:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ed1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed1c:	9300      	str	r3, [sp, #0]
 800ed1e:	4613      	mov	r3, r2
 800ed20:	687a      	ldr	r2, [r7, #4]
 800ed22:	68b9      	ldr	r1, [r7, #8]
 800ed24:	68f8      	ldr	r0, [r7, #12]
 800ed26:	f000 f83f 	bl	800eda8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ed2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	3730      	adds	r7, #48	; 0x30
 800ed30:	46bd      	mov	sp, r7
 800ed32:	bd80      	pop	{r7, pc}

0800ed34 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b08a      	sub	sp, #40	; 0x28
 800ed38:	af02      	add	r7, sp, #8
 800ed3a:	60f8      	str	r0, [r7, #12]
 800ed3c:	60b9      	str	r1, [r7, #8]
 800ed3e:	4613      	mov	r3, r2
 800ed40:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d10a      	bne.n	800ed5e <xQueueGenericCreate+0x2a>
	__asm volatile
 800ed48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed4c:	f383 8811 	msr	BASEPRI, r3
 800ed50:	f3bf 8f6f 	isb	sy
 800ed54:	f3bf 8f4f 	dsb	sy
 800ed58:	613b      	str	r3, [r7, #16]
}
 800ed5a:	bf00      	nop
 800ed5c:	e7fe      	b.n	800ed5c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	68ba      	ldr	r2, [r7, #8]
 800ed62:	fb02 f303 	mul.w	r3, r2, r3
 800ed66:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ed68:	69fb      	ldr	r3, [r7, #28]
 800ed6a:	3350      	adds	r3, #80	; 0x50
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	f002 fd13 	bl	8011798 <pvPortMalloc>
 800ed72:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ed74:	69bb      	ldr	r3, [r7, #24]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d011      	beq.n	800ed9e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ed7a:	69bb      	ldr	r3, [r7, #24]
 800ed7c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ed7e:	697b      	ldr	r3, [r7, #20]
 800ed80:	3350      	adds	r3, #80	; 0x50
 800ed82:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ed84:	69bb      	ldr	r3, [r7, #24]
 800ed86:	2200      	movs	r2, #0
 800ed88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ed8c:	79fa      	ldrb	r2, [r7, #7]
 800ed8e:	69bb      	ldr	r3, [r7, #24]
 800ed90:	9300      	str	r3, [sp, #0]
 800ed92:	4613      	mov	r3, r2
 800ed94:	697a      	ldr	r2, [r7, #20]
 800ed96:	68b9      	ldr	r1, [r7, #8]
 800ed98:	68f8      	ldr	r0, [r7, #12]
 800ed9a:	f000 f805 	bl	800eda8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ed9e:	69bb      	ldr	r3, [r7, #24]
	}
 800eda0:	4618      	mov	r0, r3
 800eda2:	3720      	adds	r7, #32
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}

0800eda8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b084      	sub	sp, #16
 800edac:	af00      	add	r7, sp, #0
 800edae:	60f8      	str	r0, [r7, #12]
 800edb0:	60b9      	str	r1, [r7, #8]
 800edb2:	607a      	str	r2, [r7, #4]
 800edb4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800edb6:	68bb      	ldr	r3, [r7, #8]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d103      	bne.n	800edc4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800edbc:	69bb      	ldr	r3, [r7, #24]
 800edbe:	69ba      	ldr	r2, [r7, #24]
 800edc0:	601a      	str	r2, [r3, #0]
 800edc2:	e002      	b.n	800edca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800edc4:	69bb      	ldr	r3, [r7, #24]
 800edc6:	687a      	ldr	r2, [r7, #4]
 800edc8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800edca:	69bb      	ldr	r3, [r7, #24]
 800edcc:	68fa      	ldr	r2, [r7, #12]
 800edce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800edd0:	69bb      	ldr	r3, [r7, #24]
 800edd2:	68ba      	ldr	r2, [r7, #8]
 800edd4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800edd6:	2101      	movs	r1, #1
 800edd8:	69b8      	ldr	r0, [r7, #24]
 800edda:	f7ff fecb 	bl	800eb74 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800edde:	69bb      	ldr	r3, [r7, #24]
 800ede0:	78fa      	ldrb	r2, [r7, #3]
 800ede2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ede6:	bf00      	nop
 800ede8:	3710      	adds	r7, #16
 800edea:	46bd      	mov	sp, r7
 800edec:	bd80      	pop	{r7, pc}

0800edee <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800edee:	b580      	push	{r7, lr}
 800edf0:	b08a      	sub	sp, #40	; 0x28
 800edf2:	af02      	add	r7, sp, #8
 800edf4:	60f8      	str	r0, [r7, #12]
 800edf6:	60b9      	str	r1, [r7, #8]
 800edf8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d10a      	bne.n	800ee16 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800ee00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee04:	f383 8811 	msr	BASEPRI, r3
 800ee08:	f3bf 8f6f 	isb	sy
 800ee0c:	f3bf 8f4f 	dsb	sy
 800ee10:	61bb      	str	r3, [r7, #24]
}
 800ee12:	bf00      	nop
 800ee14:	e7fe      	b.n	800ee14 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ee16:	68ba      	ldr	r2, [r7, #8]
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	429a      	cmp	r2, r3
 800ee1c:	d90a      	bls.n	800ee34 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800ee1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee22:	f383 8811 	msr	BASEPRI, r3
 800ee26:	f3bf 8f6f 	isb	sy
 800ee2a:	f3bf 8f4f 	dsb	sy
 800ee2e:	617b      	str	r3, [r7, #20]
}
 800ee30:	bf00      	nop
 800ee32:	e7fe      	b.n	800ee32 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ee34:	2302      	movs	r3, #2
 800ee36:	9300      	str	r3, [sp, #0]
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	2100      	movs	r1, #0
 800ee3e:	68f8      	ldr	r0, [r7, #12]
 800ee40:	f7ff ff00 	bl	800ec44 <xQueueGenericCreateStatic>
 800ee44:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800ee46:	69fb      	ldr	r3, [r7, #28]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d002      	beq.n	800ee52 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ee4c:	69fb      	ldr	r3, [r7, #28]
 800ee4e:	68ba      	ldr	r2, [r7, #8]
 800ee50:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ee52:	69fb      	ldr	r3, [r7, #28]
	}
 800ee54:	4618      	mov	r0, r3
 800ee56:	3720      	adds	r7, #32
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}

0800ee5c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b086      	sub	sp, #24
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
 800ee64:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d10a      	bne.n	800ee82 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800ee6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee70:	f383 8811 	msr	BASEPRI, r3
 800ee74:	f3bf 8f6f 	isb	sy
 800ee78:	f3bf 8f4f 	dsb	sy
 800ee7c:	613b      	str	r3, [r7, #16]
}
 800ee7e:	bf00      	nop
 800ee80:	e7fe      	b.n	800ee80 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ee82:	683a      	ldr	r2, [r7, #0]
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	429a      	cmp	r2, r3
 800ee88:	d90a      	bls.n	800eea0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800ee8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee8e:	f383 8811 	msr	BASEPRI, r3
 800ee92:	f3bf 8f6f 	isb	sy
 800ee96:	f3bf 8f4f 	dsb	sy
 800ee9a:	60fb      	str	r3, [r7, #12]
}
 800ee9c:	bf00      	nop
 800ee9e:	e7fe      	b.n	800ee9e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800eea0:	2202      	movs	r2, #2
 800eea2:	2100      	movs	r1, #0
 800eea4:	6878      	ldr	r0, [r7, #4]
 800eea6:	f7ff ff45 	bl	800ed34 <xQueueGenericCreate>
 800eeaa:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800eeac:	697b      	ldr	r3, [r7, #20]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d002      	beq.n	800eeb8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800eeb2:	697b      	ldr	r3, [r7, #20]
 800eeb4:	683a      	ldr	r2, [r7, #0]
 800eeb6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800eeb8:	697b      	ldr	r3, [r7, #20]
	}
 800eeba:	4618      	mov	r0, r3
 800eebc:	3718      	adds	r7, #24
 800eebe:	46bd      	mov	sp, r7
 800eec0:	bd80      	pop	{r7, pc}
	...

0800eec4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b08e      	sub	sp, #56	; 0x38
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	60f8      	str	r0, [r7, #12]
 800eecc:	60b9      	str	r1, [r7, #8]
 800eece:	607a      	str	r2, [r7, #4]
 800eed0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800eed2:	2300      	movs	r3, #0
 800eed4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800eeda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d10a      	bne.n	800eef6 <xQueueGenericSend+0x32>
	__asm volatile
 800eee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eee4:	f383 8811 	msr	BASEPRI, r3
 800eee8:	f3bf 8f6f 	isb	sy
 800eeec:	f3bf 8f4f 	dsb	sy
 800eef0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800eef2:	bf00      	nop
 800eef4:	e7fe      	b.n	800eef4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eef6:	68bb      	ldr	r3, [r7, #8]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d103      	bne.n	800ef04 <xQueueGenericSend+0x40>
 800eefc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eefe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d101      	bne.n	800ef08 <xQueueGenericSend+0x44>
 800ef04:	2301      	movs	r3, #1
 800ef06:	e000      	b.n	800ef0a <xQueueGenericSend+0x46>
 800ef08:	2300      	movs	r3, #0
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d10a      	bne.n	800ef24 <xQueueGenericSend+0x60>
	__asm volatile
 800ef0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef12:	f383 8811 	msr	BASEPRI, r3
 800ef16:	f3bf 8f6f 	isb	sy
 800ef1a:	f3bf 8f4f 	dsb	sy
 800ef1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ef20:	bf00      	nop
 800ef22:	e7fe      	b.n	800ef22 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	2b02      	cmp	r3, #2
 800ef28:	d103      	bne.n	800ef32 <xQueueGenericSend+0x6e>
 800ef2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef2e:	2b01      	cmp	r3, #1
 800ef30:	d101      	bne.n	800ef36 <xQueueGenericSend+0x72>
 800ef32:	2301      	movs	r3, #1
 800ef34:	e000      	b.n	800ef38 <xQueueGenericSend+0x74>
 800ef36:	2300      	movs	r3, #0
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d10a      	bne.n	800ef52 <xQueueGenericSend+0x8e>
	__asm volatile
 800ef3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef40:	f383 8811 	msr	BASEPRI, r3
 800ef44:	f3bf 8f6f 	isb	sy
 800ef48:	f3bf 8f4f 	dsb	sy
 800ef4c:	623b      	str	r3, [r7, #32]
}
 800ef4e:	bf00      	nop
 800ef50:	e7fe      	b.n	800ef50 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ef52:	f001 fca3 	bl	801089c <xTaskGetSchedulerState>
 800ef56:	4603      	mov	r3, r0
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d102      	bne.n	800ef62 <xQueueGenericSend+0x9e>
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d101      	bne.n	800ef66 <xQueueGenericSend+0xa2>
 800ef62:	2301      	movs	r3, #1
 800ef64:	e000      	b.n	800ef68 <xQueueGenericSend+0xa4>
 800ef66:	2300      	movs	r3, #0
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d10a      	bne.n	800ef82 <xQueueGenericSend+0xbe>
	__asm volatile
 800ef6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef70:	f383 8811 	msr	BASEPRI, r3
 800ef74:	f3bf 8f6f 	isb	sy
 800ef78:	f3bf 8f4f 	dsb	sy
 800ef7c:	61fb      	str	r3, [r7, #28]
}
 800ef7e:	bf00      	nop
 800ef80:	e7fe      	b.n	800ef80 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ef82:	f002 fae7 	bl	8011554 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ef86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef8e:	429a      	cmp	r2, r3
 800ef90:	d302      	bcc.n	800ef98 <xQueueGenericSend+0xd4>
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	2b02      	cmp	r3, #2
 800ef96:	d129      	bne.n	800efec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ef98:	683a      	ldr	r2, [r7, #0]
 800ef9a:	68b9      	ldr	r1, [r7, #8]
 800ef9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef9e:	f000 fc5e 	bl	800f85e <prvCopyDataToQueue>
 800efa2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800efa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d010      	beq.n	800efce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800efac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efae:	3324      	adds	r3, #36	; 0x24
 800efb0:	4618      	mov	r0, r3
 800efb2:	f001 faaf 	bl	8010514 <xTaskRemoveFromEventList>
 800efb6:	4603      	mov	r3, r0
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d013      	beq.n	800efe4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800efbc:	4b3f      	ldr	r3, [pc, #252]	; (800f0bc <xQueueGenericSend+0x1f8>)
 800efbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efc2:	601a      	str	r2, [r3, #0]
 800efc4:	f3bf 8f4f 	dsb	sy
 800efc8:	f3bf 8f6f 	isb	sy
 800efcc:	e00a      	b.n	800efe4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800efce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d007      	beq.n	800efe4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800efd4:	4b39      	ldr	r3, [pc, #228]	; (800f0bc <xQueueGenericSend+0x1f8>)
 800efd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efda:	601a      	str	r2, [r3, #0]
 800efdc:	f3bf 8f4f 	dsb	sy
 800efe0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800efe4:	f002 fae6 	bl	80115b4 <vPortExitCritical>
				return pdPASS;
 800efe8:	2301      	movs	r3, #1
 800efea:	e063      	b.n	800f0b4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d103      	bne.n	800effa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800eff2:	f002 fadf 	bl	80115b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800eff6:	2300      	movs	r3, #0
 800eff8:	e05c      	b.n	800f0b4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800effa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800effc:	2b00      	cmp	r3, #0
 800effe:	d106      	bne.n	800f00e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f000:	f107 0314 	add.w	r3, r7, #20
 800f004:	4618      	mov	r0, r3
 800f006:	f001 fae9 	bl	80105dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f00a:	2301      	movs	r3, #1
 800f00c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f00e:	f002 fad1 	bl	80115b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f012:	f001 f81d 	bl	8010050 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f016:	f002 fa9d 	bl	8011554 <vPortEnterCritical>
 800f01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f01c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f020:	b25b      	sxtb	r3, r3
 800f022:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f026:	d103      	bne.n	800f030 <xQueueGenericSend+0x16c>
 800f028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f02a:	2200      	movs	r2, #0
 800f02c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f032:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f036:	b25b      	sxtb	r3, r3
 800f038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f03c:	d103      	bne.n	800f046 <xQueueGenericSend+0x182>
 800f03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f040:	2200      	movs	r2, #0
 800f042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f046:	f002 fab5 	bl	80115b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f04a:	1d3a      	adds	r2, r7, #4
 800f04c:	f107 0314 	add.w	r3, r7, #20
 800f050:	4611      	mov	r1, r2
 800f052:	4618      	mov	r0, r3
 800f054:	f001 fad8 	bl	8010608 <xTaskCheckForTimeOut>
 800f058:	4603      	mov	r3, r0
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d124      	bne.n	800f0a8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f05e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f060:	f000 fcf5 	bl	800fa4e <prvIsQueueFull>
 800f064:	4603      	mov	r3, r0
 800f066:	2b00      	cmp	r3, #0
 800f068:	d018      	beq.n	800f09c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f06c:	3310      	adds	r3, #16
 800f06e:	687a      	ldr	r2, [r7, #4]
 800f070:	4611      	mov	r1, r2
 800f072:	4618      	mov	r0, r3
 800f074:	f001 f9fe 	bl	8010474 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f078:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f07a:	f000 fc80 	bl	800f97e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f07e:	f000 fff5 	bl	801006c <xTaskResumeAll>
 800f082:	4603      	mov	r3, r0
 800f084:	2b00      	cmp	r3, #0
 800f086:	f47f af7c 	bne.w	800ef82 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f08a:	4b0c      	ldr	r3, [pc, #48]	; (800f0bc <xQueueGenericSend+0x1f8>)
 800f08c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f090:	601a      	str	r2, [r3, #0]
 800f092:	f3bf 8f4f 	dsb	sy
 800f096:	f3bf 8f6f 	isb	sy
 800f09a:	e772      	b.n	800ef82 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f09c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f09e:	f000 fc6e 	bl	800f97e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f0a2:	f000 ffe3 	bl	801006c <xTaskResumeAll>
 800f0a6:	e76c      	b.n	800ef82 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f0a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0aa:	f000 fc68 	bl	800f97e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f0ae:	f000 ffdd 	bl	801006c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f0b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	3738      	adds	r7, #56	; 0x38
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd80      	pop	{r7, pc}
 800f0bc:	e000ed04 	.word	0xe000ed04

0800f0c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b090      	sub	sp, #64	; 0x40
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	60f8      	str	r0, [r7, #12]
 800f0c8:	60b9      	str	r1, [r7, #8]
 800f0ca:	607a      	str	r2, [r7, #4]
 800f0cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800f0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d10a      	bne.n	800f0ee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800f0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0dc:	f383 8811 	msr	BASEPRI, r3
 800f0e0:	f3bf 8f6f 	isb	sy
 800f0e4:	f3bf 8f4f 	dsb	sy
 800f0e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f0ea:	bf00      	nop
 800f0ec:	e7fe      	b.n	800f0ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d103      	bne.n	800f0fc <xQueueGenericSendFromISR+0x3c>
 800f0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d101      	bne.n	800f100 <xQueueGenericSendFromISR+0x40>
 800f0fc:	2301      	movs	r3, #1
 800f0fe:	e000      	b.n	800f102 <xQueueGenericSendFromISR+0x42>
 800f100:	2300      	movs	r3, #0
 800f102:	2b00      	cmp	r3, #0
 800f104:	d10a      	bne.n	800f11c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800f106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f10a:	f383 8811 	msr	BASEPRI, r3
 800f10e:	f3bf 8f6f 	isb	sy
 800f112:	f3bf 8f4f 	dsb	sy
 800f116:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f118:	bf00      	nop
 800f11a:	e7fe      	b.n	800f11a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f11c:	683b      	ldr	r3, [r7, #0]
 800f11e:	2b02      	cmp	r3, #2
 800f120:	d103      	bne.n	800f12a <xQueueGenericSendFromISR+0x6a>
 800f122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f126:	2b01      	cmp	r3, #1
 800f128:	d101      	bne.n	800f12e <xQueueGenericSendFromISR+0x6e>
 800f12a:	2301      	movs	r3, #1
 800f12c:	e000      	b.n	800f130 <xQueueGenericSendFromISR+0x70>
 800f12e:	2300      	movs	r3, #0
 800f130:	2b00      	cmp	r3, #0
 800f132:	d10a      	bne.n	800f14a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800f134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f138:	f383 8811 	msr	BASEPRI, r3
 800f13c:	f3bf 8f6f 	isb	sy
 800f140:	f3bf 8f4f 	dsb	sy
 800f144:	623b      	str	r3, [r7, #32]
}
 800f146:	bf00      	nop
 800f148:	e7fe      	b.n	800f148 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f14a:	f002 fae5 	bl	8011718 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f14e:	f3ef 8211 	mrs	r2, BASEPRI
 800f152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f156:	f383 8811 	msr	BASEPRI, r3
 800f15a:	f3bf 8f6f 	isb	sy
 800f15e:	f3bf 8f4f 	dsb	sy
 800f162:	61fa      	str	r2, [r7, #28]
 800f164:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f166:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f168:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f16c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f172:	429a      	cmp	r2, r3
 800f174:	d302      	bcc.n	800f17c <xQueueGenericSendFromISR+0xbc>
 800f176:	683b      	ldr	r3, [r7, #0]
 800f178:	2b02      	cmp	r3, #2
 800f17a:	d12f      	bne.n	800f1dc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f17e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f18a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f18c:	683a      	ldr	r2, [r7, #0]
 800f18e:	68b9      	ldr	r1, [r7, #8]
 800f190:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f192:	f000 fb64 	bl	800f85e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f196:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800f19a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f19e:	d112      	bne.n	800f1c6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d016      	beq.n	800f1d6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1aa:	3324      	adds	r3, #36	; 0x24
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	f001 f9b1 	bl	8010514 <xTaskRemoveFromEventList>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d00e      	beq.n	800f1d6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d00b      	beq.n	800f1d6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2201      	movs	r2, #1
 800f1c2:	601a      	str	r2, [r3, #0]
 800f1c4:	e007      	b.n	800f1d6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f1c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f1ca:	3301      	adds	r3, #1
 800f1cc:	b2db      	uxtb	r3, r3
 800f1ce:	b25a      	sxtb	r2, r3
 800f1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f1d6:	2301      	movs	r3, #1
 800f1d8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800f1da:	e001      	b.n	800f1e0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f1dc:	2300      	movs	r3, #0
 800f1de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f1e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1e2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f1e4:	697b      	ldr	r3, [r7, #20]
 800f1e6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f1ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f1ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	3740      	adds	r7, #64	; 0x40
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bd80      	pop	{r7, pc}

0800f1f6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f1f6:	b580      	push	{r7, lr}
 800f1f8:	b08e      	sub	sp, #56	; 0x38
 800f1fa:	af00      	add	r7, sp, #0
 800f1fc:	6078      	str	r0, [r7, #4]
 800f1fe:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f206:	2b00      	cmp	r3, #0
 800f208:	d10a      	bne.n	800f220 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800f20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f20e:	f383 8811 	msr	BASEPRI, r3
 800f212:	f3bf 8f6f 	isb	sy
 800f216:	f3bf 8f4f 	dsb	sy
 800f21a:	623b      	str	r3, [r7, #32]
}
 800f21c:	bf00      	nop
 800f21e:	e7fe      	b.n	800f21e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f224:	2b00      	cmp	r3, #0
 800f226:	d00a      	beq.n	800f23e <xQueueGiveFromISR+0x48>
	__asm volatile
 800f228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f22c:	f383 8811 	msr	BASEPRI, r3
 800f230:	f3bf 8f6f 	isb	sy
 800f234:	f3bf 8f4f 	dsb	sy
 800f238:	61fb      	str	r3, [r7, #28]
}
 800f23a:	bf00      	nop
 800f23c:	e7fe      	b.n	800f23c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800f23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d103      	bne.n	800f24e <xQueueGiveFromISR+0x58>
 800f246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f248:	689b      	ldr	r3, [r3, #8]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d101      	bne.n	800f252 <xQueueGiveFromISR+0x5c>
 800f24e:	2301      	movs	r3, #1
 800f250:	e000      	b.n	800f254 <xQueueGiveFromISR+0x5e>
 800f252:	2300      	movs	r3, #0
 800f254:	2b00      	cmp	r3, #0
 800f256:	d10a      	bne.n	800f26e <xQueueGiveFromISR+0x78>
	__asm volatile
 800f258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f25c:	f383 8811 	msr	BASEPRI, r3
 800f260:	f3bf 8f6f 	isb	sy
 800f264:	f3bf 8f4f 	dsb	sy
 800f268:	61bb      	str	r3, [r7, #24]
}
 800f26a:	bf00      	nop
 800f26c:	e7fe      	b.n	800f26c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f26e:	f002 fa53 	bl	8011718 <vPortValidateInterruptPriority>
	__asm volatile
 800f272:	f3ef 8211 	mrs	r2, BASEPRI
 800f276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f27a:	f383 8811 	msr	BASEPRI, r3
 800f27e:	f3bf 8f6f 	isb	sy
 800f282:	f3bf 8f4f 	dsb	sy
 800f286:	617a      	str	r2, [r7, #20]
 800f288:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800f28a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f28c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f292:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f29a:	429a      	cmp	r2, r3
 800f29c:	d22b      	bcs.n	800f2f6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f2a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2aa:	1c5a      	adds	r2, r3, #1
 800f2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f2b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f2b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2b8:	d112      	bne.n	800f2e0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d016      	beq.n	800f2f0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2c4:	3324      	adds	r3, #36	; 0x24
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f001 f924 	bl	8010514 <xTaskRemoveFromEventList>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d00e      	beq.n	800f2f0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d00b      	beq.n	800f2f0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	2201      	movs	r2, #1
 800f2dc:	601a      	str	r2, [r3, #0]
 800f2de:	e007      	b.n	800f2f0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f2e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2e4:	3301      	adds	r3, #1
 800f2e6:	b2db      	uxtb	r3, r3
 800f2e8:	b25a      	sxtb	r2, r3
 800f2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f2f0:	2301      	movs	r3, #1
 800f2f2:	637b      	str	r3, [r7, #52]	; 0x34
 800f2f4:	e001      	b.n	800f2fa <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	637b      	str	r3, [r7, #52]	; 0x34
 800f2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2fc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	f383 8811 	msr	BASEPRI, r3
}
 800f304:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f308:	4618      	mov	r0, r3
 800f30a:	3738      	adds	r7, #56	; 0x38
 800f30c:	46bd      	mov	sp, r7
 800f30e:	bd80      	pop	{r7, pc}

0800f310 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b08c      	sub	sp, #48	; 0x30
 800f314:	af00      	add	r7, sp, #0
 800f316:	60f8      	str	r0, [r7, #12]
 800f318:	60b9      	str	r1, [r7, #8]
 800f31a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f31c:	2300      	movs	r3, #0
 800f31e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f326:	2b00      	cmp	r3, #0
 800f328:	d10a      	bne.n	800f340 <xQueueReceive+0x30>
	__asm volatile
 800f32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f32e:	f383 8811 	msr	BASEPRI, r3
 800f332:	f3bf 8f6f 	isb	sy
 800f336:	f3bf 8f4f 	dsb	sy
 800f33a:	623b      	str	r3, [r7, #32]
}
 800f33c:	bf00      	nop
 800f33e:	e7fe      	b.n	800f33e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f340:	68bb      	ldr	r3, [r7, #8]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d103      	bne.n	800f34e <xQueueReceive+0x3e>
 800f346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d101      	bne.n	800f352 <xQueueReceive+0x42>
 800f34e:	2301      	movs	r3, #1
 800f350:	e000      	b.n	800f354 <xQueueReceive+0x44>
 800f352:	2300      	movs	r3, #0
 800f354:	2b00      	cmp	r3, #0
 800f356:	d10a      	bne.n	800f36e <xQueueReceive+0x5e>
	__asm volatile
 800f358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f35c:	f383 8811 	msr	BASEPRI, r3
 800f360:	f3bf 8f6f 	isb	sy
 800f364:	f3bf 8f4f 	dsb	sy
 800f368:	61fb      	str	r3, [r7, #28]
}
 800f36a:	bf00      	nop
 800f36c:	e7fe      	b.n	800f36c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f36e:	f001 fa95 	bl	801089c <xTaskGetSchedulerState>
 800f372:	4603      	mov	r3, r0
 800f374:	2b00      	cmp	r3, #0
 800f376:	d102      	bne.n	800f37e <xQueueReceive+0x6e>
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d101      	bne.n	800f382 <xQueueReceive+0x72>
 800f37e:	2301      	movs	r3, #1
 800f380:	e000      	b.n	800f384 <xQueueReceive+0x74>
 800f382:	2300      	movs	r3, #0
 800f384:	2b00      	cmp	r3, #0
 800f386:	d10a      	bne.n	800f39e <xQueueReceive+0x8e>
	__asm volatile
 800f388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f38c:	f383 8811 	msr	BASEPRI, r3
 800f390:	f3bf 8f6f 	isb	sy
 800f394:	f3bf 8f4f 	dsb	sy
 800f398:	61bb      	str	r3, [r7, #24]
}
 800f39a:	bf00      	nop
 800f39c:	e7fe      	b.n	800f39c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f39e:	f002 f8d9 	bl	8011554 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d01f      	beq.n	800f3ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f3ae:	68b9      	ldr	r1, [r7, #8]
 800f3b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3b2:	f000 fabe 	bl	800f932 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3b8:	1e5a      	subs	r2, r3, #1
 800f3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3c0:	691b      	ldr	r3, [r3, #16]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d00f      	beq.n	800f3e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3c8:	3310      	adds	r3, #16
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	f001 f8a2 	bl	8010514 <xTaskRemoveFromEventList>
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d007      	beq.n	800f3e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f3d6:	4b3d      	ldr	r3, [pc, #244]	; (800f4cc <xQueueReceive+0x1bc>)
 800f3d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3dc:	601a      	str	r2, [r3, #0]
 800f3de:	f3bf 8f4f 	dsb	sy
 800f3e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f3e6:	f002 f8e5 	bl	80115b4 <vPortExitCritical>
				return pdPASS;
 800f3ea:	2301      	movs	r3, #1
 800f3ec:	e069      	b.n	800f4c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d103      	bne.n	800f3fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f3f4:	f002 f8de 	bl	80115b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	e062      	b.n	800f4c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d106      	bne.n	800f410 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f402:	f107 0310 	add.w	r3, r7, #16
 800f406:	4618      	mov	r0, r3
 800f408:	f001 f8e8 	bl	80105dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f40c:	2301      	movs	r3, #1
 800f40e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f410:	f002 f8d0 	bl	80115b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f414:	f000 fe1c 	bl	8010050 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f418:	f002 f89c 	bl	8011554 <vPortEnterCritical>
 800f41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f41e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f422:	b25b      	sxtb	r3, r3
 800f424:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f428:	d103      	bne.n	800f432 <xQueueReceive+0x122>
 800f42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f42c:	2200      	movs	r2, #0
 800f42e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f434:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f438:	b25b      	sxtb	r3, r3
 800f43a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f43e:	d103      	bne.n	800f448 <xQueueReceive+0x138>
 800f440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f442:	2200      	movs	r2, #0
 800f444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f448:	f002 f8b4 	bl	80115b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f44c:	1d3a      	adds	r2, r7, #4
 800f44e:	f107 0310 	add.w	r3, r7, #16
 800f452:	4611      	mov	r1, r2
 800f454:	4618      	mov	r0, r3
 800f456:	f001 f8d7 	bl	8010608 <xTaskCheckForTimeOut>
 800f45a:	4603      	mov	r3, r0
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d123      	bne.n	800f4a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f460:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f462:	f000 fade 	bl	800fa22 <prvIsQueueEmpty>
 800f466:	4603      	mov	r3, r0
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d017      	beq.n	800f49c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f46e:	3324      	adds	r3, #36	; 0x24
 800f470:	687a      	ldr	r2, [r7, #4]
 800f472:	4611      	mov	r1, r2
 800f474:	4618      	mov	r0, r3
 800f476:	f000 fffd 	bl	8010474 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f47a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f47c:	f000 fa7f 	bl	800f97e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f480:	f000 fdf4 	bl	801006c <xTaskResumeAll>
 800f484:	4603      	mov	r3, r0
 800f486:	2b00      	cmp	r3, #0
 800f488:	d189      	bne.n	800f39e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f48a:	4b10      	ldr	r3, [pc, #64]	; (800f4cc <xQueueReceive+0x1bc>)
 800f48c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f490:	601a      	str	r2, [r3, #0]
 800f492:	f3bf 8f4f 	dsb	sy
 800f496:	f3bf 8f6f 	isb	sy
 800f49a:	e780      	b.n	800f39e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f49c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f49e:	f000 fa6e 	bl	800f97e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f4a2:	f000 fde3 	bl	801006c <xTaskResumeAll>
 800f4a6:	e77a      	b.n	800f39e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f4a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4aa:	f000 fa68 	bl	800f97e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f4ae:	f000 fddd 	bl	801006c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f4b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4b4:	f000 fab5 	bl	800fa22 <prvIsQueueEmpty>
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	f43f af6f 	beq.w	800f39e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f4c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	3730      	adds	r7, #48	; 0x30
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	bd80      	pop	{r7, pc}
 800f4ca:	bf00      	nop
 800f4cc:	e000ed04 	.word	0xe000ed04

0800f4d0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b08e      	sub	sp, #56	; 0x38
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
 800f4d8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f4da:	2300      	movs	r3, #0
 800f4dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d10a      	bne.n	800f502 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800f4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4f0:	f383 8811 	msr	BASEPRI, r3
 800f4f4:	f3bf 8f6f 	isb	sy
 800f4f8:	f3bf 8f4f 	dsb	sy
 800f4fc:	623b      	str	r3, [r7, #32]
}
 800f4fe:	bf00      	nop
 800f500:	e7fe      	b.n	800f500 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f506:	2b00      	cmp	r3, #0
 800f508:	d00a      	beq.n	800f520 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800f50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f50e:	f383 8811 	msr	BASEPRI, r3
 800f512:	f3bf 8f6f 	isb	sy
 800f516:	f3bf 8f4f 	dsb	sy
 800f51a:	61fb      	str	r3, [r7, #28]
}
 800f51c:	bf00      	nop
 800f51e:	e7fe      	b.n	800f51e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f520:	f001 f9bc 	bl	801089c <xTaskGetSchedulerState>
 800f524:	4603      	mov	r3, r0
 800f526:	2b00      	cmp	r3, #0
 800f528:	d102      	bne.n	800f530 <xQueueSemaphoreTake+0x60>
 800f52a:	683b      	ldr	r3, [r7, #0]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d101      	bne.n	800f534 <xQueueSemaphoreTake+0x64>
 800f530:	2301      	movs	r3, #1
 800f532:	e000      	b.n	800f536 <xQueueSemaphoreTake+0x66>
 800f534:	2300      	movs	r3, #0
 800f536:	2b00      	cmp	r3, #0
 800f538:	d10a      	bne.n	800f550 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800f53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f53e:	f383 8811 	msr	BASEPRI, r3
 800f542:	f3bf 8f6f 	isb	sy
 800f546:	f3bf 8f4f 	dsb	sy
 800f54a:	61bb      	str	r3, [r7, #24]
}
 800f54c:	bf00      	nop
 800f54e:	e7fe      	b.n	800f54e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f550:	f002 f800 	bl	8011554 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f558:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d024      	beq.n	800f5aa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f562:	1e5a      	subs	r2, r3, #1
 800f564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f566:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d104      	bne.n	800f57a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f570:	f001 fb0a 	bl	8010b88 <pvTaskIncrementMutexHeldCount>
 800f574:	4602      	mov	r2, r0
 800f576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f578:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f57c:	691b      	ldr	r3, [r3, #16]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d00f      	beq.n	800f5a2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f584:	3310      	adds	r3, #16
 800f586:	4618      	mov	r0, r3
 800f588:	f000 ffc4 	bl	8010514 <xTaskRemoveFromEventList>
 800f58c:	4603      	mov	r3, r0
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d007      	beq.n	800f5a2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f592:	4b54      	ldr	r3, [pc, #336]	; (800f6e4 <xQueueSemaphoreTake+0x214>)
 800f594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f598:	601a      	str	r2, [r3, #0]
 800f59a:	f3bf 8f4f 	dsb	sy
 800f59e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f5a2:	f002 f807 	bl	80115b4 <vPortExitCritical>
				return pdPASS;
 800f5a6:	2301      	movs	r3, #1
 800f5a8:	e097      	b.n	800f6da <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d111      	bne.n	800f5d4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d00a      	beq.n	800f5cc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800f5b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ba:	f383 8811 	msr	BASEPRI, r3
 800f5be:	f3bf 8f6f 	isb	sy
 800f5c2:	f3bf 8f4f 	dsb	sy
 800f5c6:	617b      	str	r3, [r7, #20]
}
 800f5c8:	bf00      	nop
 800f5ca:	e7fe      	b.n	800f5ca <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f5cc:	f001 fff2 	bl	80115b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	e082      	b.n	800f6da <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f5d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d106      	bne.n	800f5e8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f5da:	f107 030c 	add.w	r3, r7, #12
 800f5de:	4618      	mov	r0, r3
 800f5e0:	f000 fffc 	bl	80105dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f5e4:	2301      	movs	r3, #1
 800f5e6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f5e8:	f001 ffe4 	bl	80115b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f5ec:	f000 fd30 	bl	8010050 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f5f0:	f001 ffb0 	bl	8011554 <vPortEnterCritical>
 800f5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f5fa:	b25b      	sxtb	r3, r3
 800f5fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f600:	d103      	bne.n	800f60a <xQueueSemaphoreTake+0x13a>
 800f602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f604:	2200      	movs	r2, #0
 800f606:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f60c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f610:	b25b      	sxtb	r3, r3
 800f612:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f616:	d103      	bne.n	800f620 <xQueueSemaphoreTake+0x150>
 800f618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f61a:	2200      	movs	r2, #0
 800f61c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f620:	f001 ffc8 	bl	80115b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f624:	463a      	mov	r2, r7
 800f626:	f107 030c 	add.w	r3, r7, #12
 800f62a:	4611      	mov	r1, r2
 800f62c:	4618      	mov	r0, r3
 800f62e:	f000 ffeb 	bl	8010608 <xTaskCheckForTimeOut>
 800f632:	4603      	mov	r3, r0
 800f634:	2b00      	cmp	r3, #0
 800f636:	d132      	bne.n	800f69e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f638:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f63a:	f000 f9f2 	bl	800fa22 <prvIsQueueEmpty>
 800f63e:	4603      	mov	r3, r0
 800f640:	2b00      	cmp	r3, #0
 800f642:	d026      	beq.n	800f692 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d109      	bne.n	800f660 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800f64c:	f001 ff82 	bl	8011554 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f652:	689b      	ldr	r3, [r3, #8]
 800f654:	4618      	mov	r0, r3
 800f656:	f001 f93f 	bl	80108d8 <xTaskPriorityInherit>
 800f65a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f65c:	f001 ffaa 	bl	80115b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f662:	3324      	adds	r3, #36	; 0x24
 800f664:	683a      	ldr	r2, [r7, #0]
 800f666:	4611      	mov	r1, r2
 800f668:	4618      	mov	r0, r3
 800f66a:	f000 ff03 	bl	8010474 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f66e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f670:	f000 f985 	bl	800f97e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f674:	f000 fcfa 	bl	801006c <xTaskResumeAll>
 800f678:	4603      	mov	r3, r0
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	f47f af68 	bne.w	800f550 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800f680:	4b18      	ldr	r3, [pc, #96]	; (800f6e4 <xQueueSemaphoreTake+0x214>)
 800f682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f686:	601a      	str	r2, [r3, #0]
 800f688:	f3bf 8f4f 	dsb	sy
 800f68c:	f3bf 8f6f 	isb	sy
 800f690:	e75e      	b.n	800f550 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f692:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f694:	f000 f973 	bl	800f97e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f698:	f000 fce8 	bl	801006c <xTaskResumeAll>
 800f69c:	e758      	b.n	800f550 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f69e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f6a0:	f000 f96d 	bl	800f97e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f6a4:	f000 fce2 	bl	801006c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f6a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f6aa:	f000 f9ba 	bl	800fa22 <prvIsQueueEmpty>
 800f6ae:	4603      	mov	r3, r0
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	f43f af4d 	beq.w	800f550 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d00d      	beq.n	800f6d8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800f6bc:	f001 ff4a 	bl	8011554 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f6c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f6c2:	f000 f8b4 	bl	800f82e <prvGetDisinheritPriorityAfterTimeout>
 800f6c6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ca:	689b      	ldr	r3, [r3, #8]
 800f6cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	f001 f9d8 	bl	8010a84 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f6d4:	f001 ff6e 	bl	80115b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f6d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f6da:	4618      	mov	r0, r3
 800f6dc:	3738      	adds	r7, #56	; 0x38
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	bd80      	pop	{r7, pc}
 800f6e2:	bf00      	nop
 800f6e4:	e000ed04 	.word	0xe000ed04

0800f6e8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b08e      	sub	sp, #56	; 0x38
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	60f8      	str	r0, [r7, #12]
 800f6f0:	60b9      	str	r1, [r7, #8]
 800f6f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d10a      	bne.n	800f714 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800f6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f702:	f383 8811 	msr	BASEPRI, r3
 800f706:	f3bf 8f6f 	isb	sy
 800f70a:	f3bf 8f4f 	dsb	sy
 800f70e:	623b      	str	r3, [r7, #32]
}
 800f710:	bf00      	nop
 800f712:	e7fe      	b.n	800f712 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f714:	68bb      	ldr	r3, [r7, #8]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d103      	bne.n	800f722 <xQueueReceiveFromISR+0x3a>
 800f71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f71c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d101      	bne.n	800f726 <xQueueReceiveFromISR+0x3e>
 800f722:	2301      	movs	r3, #1
 800f724:	e000      	b.n	800f728 <xQueueReceiveFromISR+0x40>
 800f726:	2300      	movs	r3, #0
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d10a      	bne.n	800f742 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800f72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f730:	f383 8811 	msr	BASEPRI, r3
 800f734:	f3bf 8f6f 	isb	sy
 800f738:	f3bf 8f4f 	dsb	sy
 800f73c:	61fb      	str	r3, [r7, #28]
}
 800f73e:	bf00      	nop
 800f740:	e7fe      	b.n	800f740 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f742:	f001 ffe9 	bl	8011718 <vPortValidateInterruptPriority>
	__asm volatile
 800f746:	f3ef 8211 	mrs	r2, BASEPRI
 800f74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f74e:	f383 8811 	msr	BASEPRI, r3
 800f752:	f3bf 8f6f 	isb	sy
 800f756:	f3bf 8f4f 	dsb	sy
 800f75a:	61ba      	str	r2, [r7, #24]
 800f75c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f75e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f760:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f766:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d02f      	beq.n	800f7ce <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f770:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f774:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f778:	68b9      	ldr	r1, [r7, #8]
 800f77a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f77c:	f000 f8d9 	bl	800f932 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f782:	1e5a      	subs	r2, r3, #1
 800f784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f786:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f788:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f78c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f790:	d112      	bne.n	800f7b8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f794:	691b      	ldr	r3, [r3, #16]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d016      	beq.n	800f7c8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f79c:	3310      	adds	r3, #16
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f000 feb8 	bl	8010514 <xTaskRemoveFromEventList>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d00e      	beq.n	800f7c8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d00b      	beq.n	800f7c8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	2201      	movs	r2, #1
 800f7b4:	601a      	str	r2, [r3, #0]
 800f7b6:	e007      	b.n	800f7c8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f7b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7bc:	3301      	adds	r3, #1
 800f7be:	b2db      	uxtb	r3, r3
 800f7c0:	b25a      	sxtb	r2, r3
 800f7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f7c8:	2301      	movs	r3, #1
 800f7ca:	637b      	str	r3, [r7, #52]	; 0x34
 800f7cc:	e001      	b.n	800f7d2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	637b      	str	r3, [r7, #52]	; 0x34
 800f7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7d4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f7d6:	693b      	ldr	r3, [r7, #16]
 800f7d8:	f383 8811 	msr	BASEPRI, r3
}
 800f7dc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f7de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	3738      	adds	r7, #56	; 0x38
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	bd80      	pop	{r7, pc}

0800f7e8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b084      	sub	sp, #16
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d10a      	bne.n	800f810 <vQueueDelete+0x28>
	__asm volatile
 800f7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7fe:	f383 8811 	msr	BASEPRI, r3
 800f802:	f3bf 8f6f 	isb	sy
 800f806:	f3bf 8f4f 	dsb	sy
 800f80a:	60bb      	str	r3, [r7, #8]
}
 800f80c:	bf00      	nop
 800f80e:	e7fe      	b.n	800f80e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800f810:	68f8      	ldr	r0, [r7, #12]
 800f812:	f000 f95f 	bl	800fad4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d102      	bne.n	800f826 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800f820:	68f8      	ldr	r0, [r7, #12]
 800f822:	f002 f889 	bl	8011938 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f826:	bf00      	nop
 800f828:	3710      	adds	r7, #16
 800f82a:	46bd      	mov	sp, r7
 800f82c:	bd80      	pop	{r7, pc}

0800f82e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f82e:	b480      	push	{r7}
 800f830:	b085      	sub	sp, #20
 800f832:	af00      	add	r7, sp, #0
 800f834:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d006      	beq.n	800f84c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800f848:	60fb      	str	r3, [r7, #12]
 800f84a:	e001      	b.n	800f850 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f84c:	2300      	movs	r3, #0
 800f84e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f850:	68fb      	ldr	r3, [r7, #12]
	}
 800f852:	4618      	mov	r0, r3
 800f854:	3714      	adds	r7, #20
 800f856:	46bd      	mov	sp, r7
 800f858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85c:	4770      	bx	lr

0800f85e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f85e:	b580      	push	{r7, lr}
 800f860:	b086      	sub	sp, #24
 800f862:	af00      	add	r7, sp, #0
 800f864:	60f8      	str	r0, [r7, #12]
 800f866:	60b9      	str	r1, [r7, #8]
 800f868:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f86a:	2300      	movs	r3, #0
 800f86c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f872:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d10d      	bne.n	800f898 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d14d      	bne.n	800f920 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	689b      	ldr	r3, [r3, #8]
 800f888:	4618      	mov	r0, r3
 800f88a:	f001 f88d 	bl	80109a8 <xTaskPriorityDisinherit>
 800f88e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	2200      	movs	r2, #0
 800f894:	609a      	str	r2, [r3, #8]
 800f896:	e043      	b.n	800f920 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d119      	bne.n	800f8d2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	6858      	ldr	r0, [r3, #4]
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8a6:	461a      	mov	r2, r3
 800f8a8:	68b9      	ldr	r1, [r7, #8]
 800f8aa:	f01d fc68 	bl	802d17e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	685a      	ldr	r2, [r3, #4]
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8b6:	441a      	add	r2, r3
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	685a      	ldr	r2, [r3, #4]
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	689b      	ldr	r3, [r3, #8]
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	d32b      	bcc.n	800f920 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	681a      	ldr	r2, [r3, #0]
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	605a      	str	r2, [r3, #4]
 800f8d0:	e026      	b.n	800f920 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	68d8      	ldr	r0, [r3, #12]
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8da:	461a      	mov	r2, r3
 800f8dc:	68b9      	ldr	r1, [r7, #8]
 800f8de:	f01d fc4e 	bl	802d17e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	68da      	ldr	r2, [r3, #12]
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8ea:	425b      	negs	r3, r3
 800f8ec:	441a      	add	r2, r3
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	68da      	ldr	r2, [r3, #12]
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	d207      	bcs.n	800f90e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	689a      	ldr	r2, [r3, #8]
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f906:	425b      	negs	r3, r3
 800f908:	441a      	add	r2, r3
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	2b02      	cmp	r3, #2
 800f912:	d105      	bne.n	800f920 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f914:	693b      	ldr	r3, [r7, #16]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d002      	beq.n	800f920 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f91a:	693b      	ldr	r3, [r7, #16]
 800f91c:	3b01      	subs	r3, #1
 800f91e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f920:	693b      	ldr	r3, [r7, #16]
 800f922:	1c5a      	adds	r2, r3, #1
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f928:	697b      	ldr	r3, [r7, #20]
}
 800f92a:	4618      	mov	r0, r3
 800f92c:	3718      	adds	r7, #24
 800f92e:	46bd      	mov	sp, r7
 800f930:	bd80      	pop	{r7, pc}

0800f932 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f932:	b580      	push	{r7, lr}
 800f934:	b082      	sub	sp, #8
 800f936:	af00      	add	r7, sp, #0
 800f938:	6078      	str	r0, [r7, #4]
 800f93a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f940:	2b00      	cmp	r3, #0
 800f942:	d018      	beq.n	800f976 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	68da      	ldr	r2, [r3, #12]
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f94c:	441a      	add	r2, r3
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	68da      	ldr	r2, [r3, #12]
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	689b      	ldr	r3, [r3, #8]
 800f95a:	429a      	cmp	r2, r3
 800f95c:	d303      	bcc.n	800f966 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681a      	ldr	r2, [r3, #0]
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	68d9      	ldr	r1, [r3, #12]
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f96e:	461a      	mov	r2, r3
 800f970:	6838      	ldr	r0, [r7, #0]
 800f972:	f01d fc04 	bl	802d17e <memcpy>
	}
}
 800f976:	bf00      	nop
 800f978:	3708      	adds	r7, #8
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}

0800f97e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f97e:	b580      	push	{r7, lr}
 800f980:	b084      	sub	sp, #16
 800f982:	af00      	add	r7, sp, #0
 800f984:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f986:	f001 fde5 	bl	8011554 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f990:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f992:	e011      	b.n	800f9b8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d012      	beq.n	800f9c2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	3324      	adds	r3, #36	; 0x24
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	f000 fdb7 	bl	8010514 <xTaskRemoveFromEventList>
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d001      	beq.n	800f9b0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f9ac:	f000 fe8e 	bl	80106cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f9b0:	7bfb      	ldrb	r3, [r7, #15]
 800f9b2:	3b01      	subs	r3, #1
 800f9b4:	b2db      	uxtb	r3, r3
 800f9b6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f9b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	dce9      	bgt.n	800f994 <prvUnlockQueue+0x16>
 800f9c0:	e000      	b.n	800f9c4 <prvUnlockQueue+0x46>
					break;
 800f9c2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	22ff      	movs	r2, #255	; 0xff
 800f9c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f9cc:	f001 fdf2 	bl	80115b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f9d0:	f001 fdc0 	bl	8011554 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f9da:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f9dc:	e011      	b.n	800fa02 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	691b      	ldr	r3, [r3, #16]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d012      	beq.n	800fa0c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	3310      	adds	r3, #16
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	f000 fd92 	bl	8010514 <xTaskRemoveFromEventList>
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d001      	beq.n	800f9fa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f9f6:	f000 fe69 	bl	80106cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f9fa:	7bbb      	ldrb	r3, [r7, #14]
 800f9fc:	3b01      	subs	r3, #1
 800f9fe:	b2db      	uxtb	r3, r3
 800fa00:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fa02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	dce9      	bgt.n	800f9de <prvUnlockQueue+0x60>
 800fa0a:	e000      	b.n	800fa0e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800fa0c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	22ff      	movs	r2, #255	; 0xff
 800fa12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800fa16:	f001 fdcd 	bl	80115b4 <vPortExitCritical>
}
 800fa1a:	bf00      	nop
 800fa1c:	3710      	adds	r7, #16
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bd80      	pop	{r7, pc}

0800fa22 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fa22:	b580      	push	{r7, lr}
 800fa24:	b084      	sub	sp, #16
 800fa26:	af00      	add	r7, sp, #0
 800fa28:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fa2a:	f001 fd93 	bl	8011554 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d102      	bne.n	800fa3c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800fa36:	2301      	movs	r3, #1
 800fa38:	60fb      	str	r3, [r7, #12]
 800fa3a:	e001      	b.n	800fa40 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fa40:	f001 fdb8 	bl	80115b4 <vPortExitCritical>

	return xReturn;
 800fa44:	68fb      	ldr	r3, [r7, #12]
}
 800fa46:	4618      	mov	r0, r3
 800fa48:	3710      	adds	r7, #16
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	bd80      	pop	{r7, pc}

0800fa4e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800fa4e:	b580      	push	{r7, lr}
 800fa50:	b084      	sub	sp, #16
 800fa52:	af00      	add	r7, sp, #0
 800fa54:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fa56:	f001 fd7d 	bl	8011554 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa62:	429a      	cmp	r2, r3
 800fa64:	d102      	bne.n	800fa6c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fa66:	2301      	movs	r3, #1
 800fa68:	60fb      	str	r3, [r7, #12]
 800fa6a:	e001      	b.n	800fa70 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fa70:	f001 fda0 	bl	80115b4 <vPortExitCritical>

	return xReturn;
 800fa74:	68fb      	ldr	r3, [r7, #12]
}
 800fa76:	4618      	mov	r0, r3
 800fa78:	3710      	adds	r7, #16
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	bd80      	pop	{r7, pc}
	...

0800fa80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800fa80:	b480      	push	{r7}
 800fa82:	b085      	sub	sp, #20
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
 800fa88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	60fb      	str	r3, [r7, #12]
 800fa8e:	e014      	b.n	800faba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800fa90:	4a0f      	ldr	r2, [pc, #60]	; (800fad0 <vQueueAddToRegistry+0x50>)
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d10b      	bne.n	800fab4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800fa9c:	490c      	ldr	r1, [pc, #48]	; (800fad0 <vQueueAddToRegistry+0x50>)
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	683a      	ldr	r2, [r7, #0]
 800faa2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800faa6:	4a0a      	ldr	r2, [pc, #40]	; (800fad0 <vQueueAddToRegistry+0x50>)
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	00db      	lsls	r3, r3, #3
 800faac:	4413      	add	r3, r2
 800faae:	687a      	ldr	r2, [r7, #4]
 800fab0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800fab2:	e006      	b.n	800fac2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	3301      	adds	r3, #1
 800fab8:	60fb      	str	r3, [r7, #12]
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	2b07      	cmp	r3, #7
 800fabe:	d9e7      	bls.n	800fa90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800fac0:	bf00      	nop
 800fac2:	bf00      	nop
 800fac4:	3714      	adds	r7, #20
 800fac6:	46bd      	mov	sp, r7
 800fac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800facc:	4770      	bx	lr
 800face:	bf00      	nop
 800fad0:	20000d68 	.word	0x20000d68

0800fad4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800fad4:	b480      	push	{r7}
 800fad6:	b085      	sub	sp, #20
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fadc:	2300      	movs	r3, #0
 800fade:	60fb      	str	r3, [r7, #12]
 800fae0:	e016      	b.n	800fb10 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800fae2:	4a10      	ldr	r2, [pc, #64]	; (800fb24 <vQueueUnregisterQueue+0x50>)
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	00db      	lsls	r3, r3, #3
 800fae8:	4413      	add	r3, r2
 800faea:	685b      	ldr	r3, [r3, #4]
 800faec:	687a      	ldr	r2, [r7, #4]
 800faee:	429a      	cmp	r2, r3
 800faf0:	d10b      	bne.n	800fb0a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800faf2:	4a0c      	ldr	r2, [pc, #48]	; (800fb24 <vQueueUnregisterQueue+0x50>)
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	2100      	movs	r1, #0
 800faf8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800fafc:	4a09      	ldr	r2, [pc, #36]	; (800fb24 <vQueueUnregisterQueue+0x50>)
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	00db      	lsls	r3, r3, #3
 800fb02:	4413      	add	r3, r2
 800fb04:	2200      	movs	r2, #0
 800fb06:	605a      	str	r2, [r3, #4]
				break;
 800fb08:	e006      	b.n	800fb18 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	3301      	adds	r3, #1
 800fb0e:	60fb      	str	r3, [r7, #12]
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	2b07      	cmp	r3, #7
 800fb14:	d9e5      	bls.n	800fae2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800fb16:	bf00      	nop
 800fb18:	bf00      	nop
 800fb1a:	3714      	adds	r7, #20
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb22:	4770      	bx	lr
 800fb24:	20000d68 	.word	0x20000d68

0800fb28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b086      	sub	sp, #24
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	60f8      	str	r0, [r7, #12]
 800fb30:	60b9      	str	r1, [r7, #8]
 800fb32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800fb38:	f001 fd0c 	bl	8011554 <vPortEnterCritical>
 800fb3c:	697b      	ldr	r3, [r7, #20]
 800fb3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fb42:	b25b      	sxtb	r3, r3
 800fb44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb48:	d103      	bne.n	800fb52 <vQueueWaitForMessageRestricted+0x2a>
 800fb4a:	697b      	ldr	r3, [r7, #20]
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fb52:	697b      	ldr	r3, [r7, #20]
 800fb54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fb58:	b25b      	sxtb	r3, r3
 800fb5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb5e:	d103      	bne.n	800fb68 <vQueueWaitForMessageRestricted+0x40>
 800fb60:	697b      	ldr	r3, [r7, #20]
 800fb62:	2200      	movs	r2, #0
 800fb64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fb68:	f001 fd24 	bl	80115b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800fb6c:	697b      	ldr	r3, [r7, #20]
 800fb6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d106      	bne.n	800fb82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800fb74:	697b      	ldr	r3, [r7, #20]
 800fb76:	3324      	adds	r3, #36	; 0x24
 800fb78:	687a      	ldr	r2, [r7, #4]
 800fb7a:	68b9      	ldr	r1, [r7, #8]
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	f000 fc9d 	bl	80104bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800fb82:	6978      	ldr	r0, [r7, #20]
 800fb84:	f7ff fefb 	bl	800f97e <prvUnlockQueue>
	}
 800fb88:	bf00      	nop
 800fb8a:	3718      	adds	r7, #24
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	bd80      	pop	{r7, pc}

0800fb90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b08e      	sub	sp, #56	; 0x38
 800fb94:	af04      	add	r7, sp, #16
 800fb96:	60f8      	str	r0, [r7, #12]
 800fb98:	60b9      	str	r1, [r7, #8]
 800fb9a:	607a      	str	r2, [r7, #4]
 800fb9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800fb9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d10a      	bne.n	800fbba <xTaskCreateStatic+0x2a>
	__asm volatile
 800fba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fba8:	f383 8811 	msr	BASEPRI, r3
 800fbac:	f3bf 8f6f 	isb	sy
 800fbb0:	f3bf 8f4f 	dsb	sy
 800fbb4:	623b      	str	r3, [r7, #32]
}
 800fbb6:	bf00      	nop
 800fbb8:	e7fe      	b.n	800fbb8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800fbba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d10a      	bne.n	800fbd6 <xTaskCreateStatic+0x46>
	__asm volatile
 800fbc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbc4:	f383 8811 	msr	BASEPRI, r3
 800fbc8:	f3bf 8f6f 	isb	sy
 800fbcc:	f3bf 8f4f 	dsb	sy
 800fbd0:	61fb      	str	r3, [r7, #28]
}
 800fbd2:	bf00      	nop
 800fbd4:	e7fe      	b.n	800fbd4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fbd6:	23ac      	movs	r3, #172	; 0xac
 800fbd8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fbda:	693b      	ldr	r3, [r7, #16]
 800fbdc:	2bac      	cmp	r3, #172	; 0xac
 800fbde:	d00a      	beq.n	800fbf6 <xTaskCreateStatic+0x66>
	__asm volatile
 800fbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbe4:	f383 8811 	msr	BASEPRI, r3
 800fbe8:	f3bf 8f6f 	isb	sy
 800fbec:	f3bf 8f4f 	dsb	sy
 800fbf0:	61bb      	str	r3, [r7, #24]
}
 800fbf2:	bf00      	nop
 800fbf4:	e7fe      	b.n	800fbf4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fbf6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fbf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d01e      	beq.n	800fc3c <xTaskCreateStatic+0xac>
 800fbfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d01b      	beq.n	800fc3c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc06:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fc0c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fc0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc10:	2202      	movs	r2, #2
 800fc12:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fc16:	2300      	movs	r3, #0
 800fc18:	9303      	str	r3, [sp, #12]
 800fc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc1c:	9302      	str	r3, [sp, #8]
 800fc1e:	f107 0314 	add.w	r3, r7, #20
 800fc22:	9301      	str	r3, [sp, #4]
 800fc24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc26:	9300      	str	r3, [sp, #0]
 800fc28:	683b      	ldr	r3, [r7, #0]
 800fc2a:	687a      	ldr	r2, [r7, #4]
 800fc2c:	68b9      	ldr	r1, [r7, #8]
 800fc2e:	68f8      	ldr	r0, [r7, #12]
 800fc30:	f000 f850 	bl	800fcd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fc34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fc36:	f000 f8f7 	bl	800fe28 <prvAddNewTaskToReadyList>
 800fc3a:	e001      	b.n	800fc40 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fc40:	697b      	ldr	r3, [r7, #20]
	}
 800fc42:	4618      	mov	r0, r3
 800fc44:	3728      	adds	r7, #40	; 0x28
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd80      	pop	{r7, pc}

0800fc4a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fc4a:	b580      	push	{r7, lr}
 800fc4c:	b08c      	sub	sp, #48	; 0x30
 800fc4e:	af04      	add	r7, sp, #16
 800fc50:	60f8      	str	r0, [r7, #12]
 800fc52:	60b9      	str	r1, [r7, #8]
 800fc54:	603b      	str	r3, [r7, #0]
 800fc56:	4613      	mov	r3, r2
 800fc58:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fc5a:	88fb      	ldrh	r3, [r7, #6]
 800fc5c:	009b      	lsls	r3, r3, #2
 800fc5e:	4618      	mov	r0, r3
 800fc60:	f001 fd9a 	bl	8011798 <pvPortMalloc>
 800fc64:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d00e      	beq.n	800fc8a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fc6c:	20ac      	movs	r0, #172	; 0xac
 800fc6e:	f001 fd93 	bl	8011798 <pvPortMalloc>
 800fc72:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fc74:	69fb      	ldr	r3, [r7, #28]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d003      	beq.n	800fc82 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fc7a:	69fb      	ldr	r3, [r7, #28]
 800fc7c:	697a      	ldr	r2, [r7, #20]
 800fc7e:	631a      	str	r2, [r3, #48]	; 0x30
 800fc80:	e005      	b.n	800fc8e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fc82:	6978      	ldr	r0, [r7, #20]
 800fc84:	f001 fe58 	bl	8011938 <vPortFree>
 800fc88:	e001      	b.n	800fc8e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fc8e:	69fb      	ldr	r3, [r7, #28]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d017      	beq.n	800fcc4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fc94:	69fb      	ldr	r3, [r7, #28]
 800fc96:	2200      	movs	r2, #0
 800fc98:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fc9c:	88fa      	ldrh	r2, [r7, #6]
 800fc9e:	2300      	movs	r3, #0
 800fca0:	9303      	str	r3, [sp, #12]
 800fca2:	69fb      	ldr	r3, [r7, #28]
 800fca4:	9302      	str	r3, [sp, #8]
 800fca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fca8:	9301      	str	r3, [sp, #4]
 800fcaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcac:	9300      	str	r3, [sp, #0]
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	68b9      	ldr	r1, [r7, #8]
 800fcb2:	68f8      	ldr	r0, [r7, #12]
 800fcb4:	f000 f80e 	bl	800fcd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fcb8:	69f8      	ldr	r0, [r7, #28]
 800fcba:	f000 f8b5 	bl	800fe28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fcbe:	2301      	movs	r3, #1
 800fcc0:	61bb      	str	r3, [r7, #24]
 800fcc2:	e002      	b.n	800fcca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fcc4:	f04f 33ff 	mov.w	r3, #4294967295
 800fcc8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fcca:	69bb      	ldr	r3, [r7, #24]
	}
 800fccc:	4618      	mov	r0, r3
 800fcce:	3720      	adds	r7, #32
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	bd80      	pop	{r7, pc}

0800fcd4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b088      	sub	sp, #32
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	60f8      	str	r0, [r7, #12]
 800fcdc:	60b9      	str	r1, [r7, #8]
 800fcde:	607a      	str	r2, [r7, #4]
 800fce0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fce4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	009b      	lsls	r3, r3, #2
 800fcea:	461a      	mov	r2, r3
 800fcec:	21a5      	movs	r1, #165	; 0xa5
 800fcee:	f01d f920 	bl	802cf32 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fcf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fcfc:	3b01      	subs	r3, #1
 800fcfe:	009b      	lsls	r3, r3, #2
 800fd00:	4413      	add	r3, r2
 800fd02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fd04:	69bb      	ldr	r3, [r7, #24]
 800fd06:	f023 0307 	bic.w	r3, r3, #7
 800fd0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fd0c:	69bb      	ldr	r3, [r7, #24]
 800fd0e:	f003 0307 	and.w	r3, r3, #7
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d00a      	beq.n	800fd2c <prvInitialiseNewTask+0x58>
	__asm volatile
 800fd16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd1a:	f383 8811 	msr	BASEPRI, r3
 800fd1e:	f3bf 8f6f 	isb	sy
 800fd22:	f3bf 8f4f 	dsb	sy
 800fd26:	617b      	str	r3, [r7, #20]
}
 800fd28:	bf00      	nop
 800fd2a:	e7fe      	b.n	800fd2a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fd2c:	68bb      	ldr	r3, [r7, #8]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d01f      	beq.n	800fd72 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fd32:	2300      	movs	r3, #0
 800fd34:	61fb      	str	r3, [r7, #28]
 800fd36:	e012      	b.n	800fd5e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fd38:	68ba      	ldr	r2, [r7, #8]
 800fd3a:	69fb      	ldr	r3, [r7, #28]
 800fd3c:	4413      	add	r3, r2
 800fd3e:	7819      	ldrb	r1, [r3, #0]
 800fd40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd42:	69fb      	ldr	r3, [r7, #28]
 800fd44:	4413      	add	r3, r2
 800fd46:	3334      	adds	r3, #52	; 0x34
 800fd48:	460a      	mov	r2, r1
 800fd4a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fd4c:	68ba      	ldr	r2, [r7, #8]
 800fd4e:	69fb      	ldr	r3, [r7, #28]
 800fd50:	4413      	add	r3, r2
 800fd52:	781b      	ldrb	r3, [r3, #0]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d006      	beq.n	800fd66 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fd58:	69fb      	ldr	r3, [r7, #28]
 800fd5a:	3301      	adds	r3, #1
 800fd5c:	61fb      	str	r3, [r7, #28]
 800fd5e:	69fb      	ldr	r3, [r7, #28]
 800fd60:	2b0f      	cmp	r3, #15
 800fd62:	d9e9      	bls.n	800fd38 <prvInitialiseNewTask+0x64>
 800fd64:	e000      	b.n	800fd68 <prvInitialiseNewTask+0x94>
			{
				break;
 800fd66:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fd70:	e003      	b.n	800fd7a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fd72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd74:	2200      	movs	r2, #0
 800fd76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fd7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd7c:	2b37      	cmp	r3, #55	; 0x37
 800fd7e:	d901      	bls.n	800fd84 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fd80:	2337      	movs	r3, #55	; 0x37
 800fd82:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd88:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd8e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800fd90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd92:	2200      	movs	r2, #0
 800fd94:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd98:	3304      	adds	r3, #4
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	f7fe fe56 	bl	800ea4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fda2:	3318      	adds	r3, #24
 800fda4:	4618      	mov	r0, r3
 800fda6:	f7fe fe51 	bl	800ea4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fdaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fdae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fdb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdb2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fdb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdb8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fdba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fdbe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800fdc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fdc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdc8:	2200      	movs	r2, #0
 800fdca:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fdce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800fdd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdd8:	3358      	adds	r3, #88	; 0x58
 800fdda:	224c      	movs	r2, #76	; 0x4c
 800fddc:	2100      	movs	r1, #0
 800fdde:	4618      	mov	r0, r3
 800fde0:	f01d f8a7 	bl	802cf32 <memset>
 800fde4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fde6:	4a0d      	ldr	r2, [pc, #52]	; (800fe1c <prvInitialiseNewTask+0x148>)
 800fde8:	65da      	str	r2, [r3, #92]	; 0x5c
 800fdea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdec:	4a0c      	ldr	r2, [pc, #48]	; (800fe20 <prvInitialiseNewTask+0x14c>)
 800fdee:	661a      	str	r2, [r3, #96]	; 0x60
 800fdf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdf2:	4a0c      	ldr	r2, [pc, #48]	; (800fe24 <prvInitialiseNewTask+0x150>)
 800fdf4:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fdf6:	683a      	ldr	r2, [r7, #0]
 800fdf8:	68f9      	ldr	r1, [r7, #12]
 800fdfa:	69b8      	ldr	r0, [r7, #24]
 800fdfc:	f001 fa7a 	bl	80112f4 <pxPortInitialiseStack>
 800fe00:	4602      	mov	r2, r0
 800fe02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe04:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fe06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d002      	beq.n	800fe12 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fe0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fe12:	bf00      	nop
 800fe14:	3720      	adds	r7, #32
 800fe16:	46bd      	mov	sp, r7
 800fe18:	bd80      	pop	{r7, pc}
 800fe1a:	bf00      	nop
 800fe1c:	2000b8a4 	.word	0x2000b8a4
 800fe20:	2000b90c 	.word	0x2000b90c
 800fe24:	2000b974 	.word	0x2000b974

0800fe28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b082      	sub	sp, #8
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fe30:	f001 fb90 	bl	8011554 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fe34:	4b2d      	ldr	r3, [pc, #180]	; (800feec <prvAddNewTaskToReadyList+0xc4>)
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	3301      	adds	r3, #1
 800fe3a:	4a2c      	ldr	r2, [pc, #176]	; (800feec <prvAddNewTaskToReadyList+0xc4>)
 800fe3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fe3e:	4b2c      	ldr	r3, [pc, #176]	; (800fef0 <prvAddNewTaskToReadyList+0xc8>)
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d109      	bne.n	800fe5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fe46:	4a2a      	ldr	r2, [pc, #168]	; (800fef0 <prvAddNewTaskToReadyList+0xc8>)
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fe4c:	4b27      	ldr	r3, [pc, #156]	; (800feec <prvAddNewTaskToReadyList+0xc4>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	2b01      	cmp	r3, #1
 800fe52:	d110      	bne.n	800fe76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fe54:	f000 fc60 	bl	8010718 <prvInitialiseTaskLists>
 800fe58:	e00d      	b.n	800fe76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fe5a:	4b26      	ldr	r3, [pc, #152]	; (800fef4 <prvAddNewTaskToReadyList+0xcc>)
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d109      	bne.n	800fe76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fe62:	4b23      	ldr	r3, [pc, #140]	; (800fef0 <prvAddNewTaskToReadyList+0xc8>)
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe6c:	429a      	cmp	r2, r3
 800fe6e:	d802      	bhi.n	800fe76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fe70:	4a1f      	ldr	r2, [pc, #124]	; (800fef0 <prvAddNewTaskToReadyList+0xc8>)
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fe76:	4b20      	ldr	r3, [pc, #128]	; (800fef8 <prvAddNewTaskToReadyList+0xd0>)
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	3301      	adds	r3, #1
 800fe7c:	4a1e      	ldr	r2, [pc, #120]	; (800fef8 <prvAddNewTaskToReadyList+0xd0>)
 800fe7e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fe80:	4b1d      	ldr	r3, [pc, #116]	; (800fef8 <prvAddNewTaskToReadyList+0xd0>)
 800fe82:	681a      	ldr	r2, [r3, #0]
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe8c:	4b1b      	ldr	r3, [pc, #108]	; (800fefc <prvAddNewTaskToReadyList+0xd4>)
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	429a      	cmp	r2, r3
 800fe92:	d903      	bls.n	800fe9c <prvAddNewTaskToReadyList+0x74>
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe98:	4a18      	ldr	r2, [pc, #96]	; (800fefc <prvAddNewTaskToReadyList+0xd4>)
 800fe9a:	6013      	str	r3, [r2, #0]
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fea0:	4613      	mov	r3, r2
 800fea2:	009b      	lsls	r3, r3, #2
 800fea4:	4413      	add	r3, r2
 800fea6:	009b      	lsls	r3, r3, #2
 800fea8:	4a15      	ldr	r2, [pc, #84]	; (800ff00 <prvAddNewTaskToReadyList+0xd8>)
 800feaa:	441a      	add	r2, r3
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	3304      	adds	r3, #4
 800feb0:	4619      	mov	r1, r3
 800feb2:	4610      	mov	r0, r2
 800feb4:	f7fe fdd7 	bl	800ea66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800feb8:	f001 fb7c 	bl	80115b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800febc:	4b0d      	ldr	r3, [pc, #52]	; (800fef4 <prvAddNewTaskToReadyList+0xcc>)
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d00e      	beq.n	800fee2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fec4:	4b0a      	ldr	r3, [pc, #40]	; (800fef0 <prvAddNewTaskToReadyList+0xc8>)
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fece:	429a      	cmp	r2, r3
 800fed0:	d207      	bcs.n	800fee2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fed2:	4b0c      	ldr	r3, [pc, #48]	; (800ff04 <prvAddNewTaskToReadyList+0xdc>)
 800fed4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fed8:	601a      	str	r2, [r3, #0]
 800feda:	f3bf 8f4f 	dsb	sy
 800fede:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fee2:	bf00      	nop
 800fee4:	3708      	adds	r7, #8
 800fee6:	46bd      	mov	sp, r7
 800fee8:	bd80      	pop	{r7, pc}
 800feea:	bf00      	nop
 800feec:	2000127c 	.word	0x2000127c
 800fef0:	20000da8 	.word	0x20000da8
 800fef4:	20001288 	.word	0x20001288
 800fef8:	20001298 	.word	0x20001298
 800fefc:	20001284 	.word	0x20001284
 800ff00:	20000dac 	.word	0x20000dac
 800ff04:	e000ed04 	.word	0xe000ed04

0800ff08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b084      	sub	sp, #16
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ff10:	2300      	movs	r3, #0
 800ff12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d017      	beq.n	800ff4a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ff1a:	4b13      	ldr	r3, [pc, #76]	; (800ff68 <vTaskDelay+0x60>)
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d00a      	beq.n	800ff38 <vTaskDelay+0x30>
	__asm volatile
 800ff22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff26:	f383 8811 	msr	BASEPRI, r3
 800ff2a:	f3bf 8f6f 	isb	sy
 800ff2e:	f3bf 8f4f 	dsb	sy
 800ff32:	60bb      	str	r3, [r7, #8]
}
 800ff34:	bf00      	nop
 800ff36:	e7fe      	b.n	800ff36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ff38:	f000 f88a 	bl	8010050 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ff3c:	2100      	movs	r1, #0
 800ff3e:	6878      	ldr	r0, [r7, #4]
 800ff40:	f000 fe36 	bl	8010bb0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ff44:	f000 f892 	bl	801006c <xTaskResumeAll>
 800ff48:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d107      	bne.n	800ff60 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ff50:	4b06      	ldr	r3, [pc, #24]	; (800ff6c <vTaskDelay+0x64>)
 800ff52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff56:	601a      	str	r2, [r3, #0]
 800ff58:	f3bf 8f4f 	dsb	sy
 800ff5c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ff60:	bf00      	nop
 800ff62:	3710      	adds	r7, #16
 800ff64:	46bd      	mov	sp, r7
 800ff66:	bd80      	pop	{r7, pc}
 800ff68:	200012a4 	.word	0x200012a4
 800ff6c:	e000ed04 	.word	0xe000ed04

0800ff70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b08a      	sub	sp, #40	; 0x28
 800ff74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ff76:	2300      	movs	r3, #0
 800ff78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ff7e:	463a      	mov	r2, r7
 800ff80:	1d39      	adds	r1, r7, #4
 800ff82:	f107 0308 	add.w	r3, r7, #8
 800ff86:	4618      	mov	r0, r3
 800ff88:	f7fe fd0c 	bl	800e9a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ff8c:	6839      	ldr	r1, [r7, #0]
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	68ba      	ldr	r2, [r7, #8]
 800ff92:	9202      	str	r2, [sp, #8]
 800ff94:	9301      	str	r3, [sp, #4]
 800ff96:	2300      	movs	r3, #0
 800ff98:	9300      	str	r3, [sp, #0]
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	460a      	mov	r2, r1
 800ff9e:	4924      	ldr	r1, [pc, #144]	; (8010030 <vTaskStartScheduler+0xc0>)
 800ffa0:	4824      	ldr	r0, [pc, #144]	; (8010034 <vTaskStartScheduler+0xc4>)
 800ffa2:	f7ff fdf5 	bl	800fb90 <xTaskCreateStatic>
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	4a23      	ldr	r2, [pc, #140]	; (8010038 <vTaskStartScheduler+0xc8>)
 800ffaa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ffac:	4b22      	ldr	r3, [pc, #136]	; (8010038 <vTaskStartScheduler+0xc8>)
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d002      	beq.n	800ffba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ffb4:	2301      	movs	r3, #1
 800ffb6:	617b      	str	r3, [r7, #20]
 800ffb8:	e001      	b.n	800ffbe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ffba:	2300      	movs	r3, #0
 800ffbc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ffbe:	697b      	ldr	r3, [r7, #20]
 800ffc0:	2b01      	cmp	r3, #1
 800ffc2:	d102      	bne.n	800ffca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ffc4:	f000 fe48 	bl	8010c58 <xTimerCreateTimerTask>
 800ffc8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ffca:	697b      	ldr	r3, [r7, #20]
 800ffcc:	2b01      	cmp	r3, #1
 800ffce:	d11b      	bne.n	8010008 <vTaskStartScheduler+0x98>
	__asm volatile
 800ffd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffd4:	f383 8811 	msr	BASEPRI, r3
 800ffd8:	f3bf 8f6f 	isb	sy
 800ffdc:	f3bf 8f4f 	dsb	sy
 800ffe0:	613b      	str	r3, [r7, #16]
}
 800ffe2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ffe4:	4b15      	ldr	r3, [pc, #84]	; (801003c <vTaskStartScheduler+0xcc>)
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	3358      	adds	r3, #88	; 0x58
 800ffea:	4a15      	ldr	r2, [pc, #84]	; (8010040 <vTaskStartScheduler+0xd0>)
 800ffec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ffee:	4b15      	ldr	r3, [pc, #84]	; (8010044 <vTaskStartScheduler+0xd4>)
 800fff0:	f04f 32ff 	mov.w	r2, #4294967295
 800fff4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fff6:	4b14      	ldr	r3, [pc, #80]	; (8010048 <vTaskStartScheduler+0xd8>)
 800fff8:	2201      	movs	r2, #1
 800fffa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fffc:	4b13      	ldr	r3, [pc, #76]	; (801004c <vTaskStartScheduler+0xdc>)
 800fffe:	2200      	movs	r2, #0
 8010000:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010002:	f001 fa05 	bl	8011410 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010006:	e00e      	b.n	8010026 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010008:	697b      	ldr	r3, [r7, #20]
 801000a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801000e:	d10a      	bne.n	8010026 <vTaskStartScheduler+0xb6>
	__asm volatile
 8010010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010014:	f383 8811 	msr	BASEPRI, r3
 8010018:	f3bf 8f6f 	isb	sy
 801001c:	f3bf 8f4f 	dsb	sy
 8010020:	60fb      	str	r3, [r7, #12]
}
 8010022:	bf00      	nop
 8010024:	e7fe      	b.n	8010024 <vTaskStartScheduler+0xb4>
}
 8010026:	bf00      	nop
 8010028:	3718      	adds	r7, #24
 801002a:	46bd      	mov	sp, r7
 801002c:	bd80      	pop	{r7, pc}
 801002e:	bf00      	nop
 8010030:	0802dc5c 	.word	0x0802dc5c
 8010034:	080106e5 	.word	0x080106e5
 8010038:	200012a0 	.word	0x200012a0
 801003c:	20000da8 	.word	0x20000da8
 8010040:	20000110 	.word	0x20000110
 8010044:	2000129c 	.word	0x2000129c
 8010048:	20001288 	.word	0x20001288
 801004c:	20001280 	.word	0x20001280

08010050 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010050:	b480      	push	{r7}
 8010052:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010054:	4b04      	ldr	r3, [pc, #16]	; (8010068 <vTaskSuspendAll+0x18>)
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	3301      	adds	r3, #1
 801005a:	4a03      	ldr	r2, [pc, #12]	; (8010068 <vTaskSuspendAll+0x18>)
 801005c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801005e:	bf00      	nop
 8010060:	46bd      	mov	sp, r7
 8010062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010066:	4770      	bx	lr
 8010068:	200012a4 	.word	0x200012a4

0801006c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801006c:	b580      	push	{r7, lr}
 801006e:	b084      	sub	sp, #16
 8010070:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010072:	2300      	movs	r3, #0
 8010074:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010076:	2300      	movs	r3, #0
 8010078:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801007a:	4b42      	ldr	r3, [pc, #264]	; (8010184 <xTaskResumeAll+0x118>)
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d10a      	bne.n	8010098 <xTaskResumeAll+0x2c>
	__asm volatile
 8010082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010086:	f383 8811 	msr	BASEPRI, r3
 801008a:	f3bf 8f6f 	isb	sy
 801008e:	f3bf 8f4f 	dsb	sy
 8010092:	603b      	str	r3, [r7, #0]
}
 8010094:	bf00      	nop
 8010096:	e7fe      	b.n	8010096 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010098:	f001 fa5c 	bl	8011554 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801009c:	4b39      	ldr	r3, [pc, #228]	; (8010184 <xTaskResumeAll+0x118>)
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	3b01      	subs	r3, #1
 80100a2:	4a38      	ldr	r2, [pc, #224]	; (8010184 <xTaskResumeAll+0x118>)
 80100a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80100a6:	4b37      	ldr	r3, [pc, #220]	; (8010184 <xTaskResumeAll+0x118>)
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d162      	bne.n	8010174 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80100ae:	4b36      	ldr	r3, [pc, #216]	; (8010188 <xTaskResumeAll+0x11c>)
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d05e      	beq.n	8010174 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80100b6:	e02f      	b.n	8010118 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80100b8:	4b34      	ldr	r3, [pc, #208]	; (801018c <xTaskResumeAll+0x120>)
 80100ba:	68db      	ldr	r3, [r3, #12]
 80100bc:	68db      	ldr	r3, [r3, #12]
 80100be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	3318      	adds	r3, #24
 80100c4:	4618      	mov	r0, r3
 80100c6:	f7fe fd2b 	bl	800eb20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	3304      	adds	r3, #4
 80100ce:	4618      	mov	r0, r3
 80100d0:	f7fe fd26 	bl	800eb20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100d8:	4b2d      	ldr	r3, [pc, #180]	; (8010190 <xTaskResumeAll+0x124>)
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	429a      	cmp	r2, r3
 80100de:	d903      	bls.n	80100e8 <xTaskResumeAll+0x7c>
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100e4:	4a2a      	ldr	r2, [pc, #168]	; (8010190 <xTaskResumeAll+0x124>)
 80100e6:	6013      	str	r3, [r2, #0]
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100ec:	4613      	mov	r3, r2
 80100ee:	009b      	lsls	r3, r3, #2
 80100f0:	4413      	add	r3, r2
 80100f2:	009b      	lsls	r3, r3, #2
 80100f4:	4a27      	ldr	r2, [pc, #156]	; (8010194 <xTaskResumeAll+0x128>)
 80100f6:	441a      	add	r2, r3
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	3304      	adds	r3, #4
 80100fc:	4619      	mov	r1, r3
 80100fe:	4610      	mov	r0, r2
 8010100:	f7fe fcb1 	bl	800ea66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010108:	4b23      	ldr	r3, [pc, #140]	; (8010198 <xTaskResumeAll+0x12c>)
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801010e:	429a      	cmp	r2, r3
 8010110:	d302      	bcc.n	8010118 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8010112:	4b22      	ldr	r3, [pc, #136]	; (801019c <xTaskResumeAll+0x130>)
 8010114:	2201      	movs	r2, #1
 8010116:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010118:	4b1c      	ldr	r3, [pc, #112]	; (801018c <xTaskResumeAll+0x120>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d1cb      	bne.n	80100b8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d001      	beq.n	801012a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010126:	f000 fb99 	bl	801085c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801012a:	4b1d      	ldr	r3, [pc, #116]	; (80101a0 <xTaskResumeAll+0x134>)
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d010      	beq.n	8010158 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010136:	f000 f859 	bl	80101ec <xTaskIncrementTick>
 801013a:	4603      	mov	r3, r0
 801013c:	2b00      	cmp	r3, #0
 801013e:	d002      	beq.n	8010146 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8010140:	4b16      	ldr	r3, [pc, #88]	; (801019c <xTaskResumeAll+0x130>)
 8010142:	2201      	movs	r2, #1
 8010144:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	3b01      	subs	r3, #1
 801014a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d1f1      	bne.n	8010136 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8010152:	4b13      	ldr	r3, [pc, #76]	; (80101a0 <xTaskResumeAll+0x134>)
 8010154:	2200      	movs	r2, #0
 8010156:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010158:	4b10      	ldr	r3, [pc, #64]	; (801019c <xTaskResumeAll+0x130>)
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d009      	beq.n	8010174 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010160:	2301      	movs	r3, #1
 8010162:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010164:	4b0f      	ldr	r3, [pc, #60]	; (80101a4 <xTaskResumeAll+0x138>)
 8010166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801016a:	601a      	str	r2, [r3, #0]
 801016c:	f3bf 8f4f 	dsb	sy
 8010170:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010174:	f001 fa1e 	bl	80115b4 <vPortExitCritical>

	return xAlreadyYielded;
 8010178:	68bb      	ldr	r3, [r7, #8]
}
 801017a:	4618      	mov	r0, r3
 801017c:	3710      	adds	r7, #16
 801017e:	46bd      	mov	sp, r7
 8010180:	bd80      	pop	{r7, pc}
 8010182:	bf00      	nop
 8010184:	200012a4 	.word	0x200012a4
 8010188:	2000127c 	.word	0x2000127c
 801018c:	2000123c 	.word	0x2000123c
 8010190:	20001284 	.word	0x20001284
 8010194:	20000dac 	.word	0x20000dac
 8010198:	20000da8 	.word	0x20000da8
 801019c:	20001290 	.word	0x20001290
 80101a0:	2000128c 	.word	0x2000128c
 80101a4:	e000ed04 	.word	0xe000ed04

080101a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80101a8:	b480      	push	{r7}
 80101aa:	b083      	sub	sp, #12
 80101ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80101ae:	4b05      	ldr	r3, [pc, #20]	; (80101c4 <xTaskGetTickCount+0x1c>)
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80101b4:	687b      	ldr	r3, [r7, #4]
}
 80101b6:	4618      	mov	r0, r3
 80101b8:	370c      	adds	r7, #12
 80101ba:	46bd      	mov	sp, r7
 80101bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c0:	4770      	bx	lr
 80101c2:	bf00      	nop
 80101c4:	20001280 	.word	0x20001280

080101c8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b082      	sub	sp, #8
 80101cc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80101ce:	f001 faa3 	bl	8011718 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80101d2:	2300      	movs	r3, #0
 80101d4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80101d6:	4b04      	ldr	r3, [pc, #16]	; (80101e8 <xTaskGetTickCountFromISR+0x20>)
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80101dc:	683b      	ldr	r3, [r7, #0]
}
 80101de:	4618      	mov	r0, r3
 80101e0:	3708      	adds	r7, #8
 80101e2:	46bd      	mov	sp, r7
 80101e4:	bd80      	pop	{r7, pc}
 80101e6:	bf00      	nop
 80101e8:	20001280 	.word	0x20001280

080101ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b086      	sub	sp, #24
 80101f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80101f2:	2300      	movs	r3, #0
 80101f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80101f6:	4b4f      	ldr	r3, [pc, #316]	; (8010334 <xTaskIncrementTick+0x148>)
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	f040 808f 	bne.w	801031e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010200:	4b4d      	ldr	r3, [pc, #308]	; (8010338 <xTaskIncrementTick+0x14c>)
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	3301      	adds	r3, #1
 8010206:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010208:	4a4b      	ldr	r2, [pc, #300]	; (8010338 <xTaskIncrementTick+0x14c>)
 801020a:	693b      	ldr	r3, [r7, #16]
 801020c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801020e:	693b      	ldr	r3, [r7, #16]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d120      	bne.n	8010256 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010214:	4b49      	ldr	r3, [pc, #292]	; (801033c <xTaskIncrementTick+0x150>)
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d00a      	beq.n	8010234 <xTaskIncrementTick+0x48>
	__asm volatile
 801021e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010222:	f383 8811 	msr	BASEPRI, r3
 8010226:	f3bf 8f6f 	isb	sy
 801022a:	f3bf 8f4f 	dsb	sy
 801022e:	603b      	str	r3, [r7, #0]
}
 8010230:	bf00      	nop
 8010232:	e7fe      	b.n	8010232 <xTaskIncrementTick+0x46>
 8010234:	4b41      	ldr	r3, [pc, #260]	; (801033c <xTaskIncrementTick+0x150>)
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	60fb      	str	r3, [r7, #12]
 801023a:	4b41      	ldr	r3, [pc, #260]	; (8010340 <xTaskIncrementTick+0x154>)
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	4a3f      	ldr	r2, [pc, #252]	; (801033c <xTaskIncrementTick+0x150>)
 8010240:	6013      	str	r3, [r2, #0]
 8010242:	4a3f      	ldr	r2, [pc, #252]	; (8010340 <xTaskIncrementTick+0x154>)
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	6013      	str	r3, [r2, #0]
 8010248:	4b3e      	ldr	r3, [pc, #248]	; (8010344 <xTaskIncrementTick+0x158>)
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	3301      	adds	r3, #1
 801024e:	4a3d      	ldr	r2, [pc, #244]	; (8010344 <xTaskIncrementTick+0x158>)
 8010250:	6013      	str	r3, [r2, #0]
 8010252:	f000 fb03 	bl	801085c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010256:	4b3c      	ldr	r3, [pc, #240]	; (8010348 <xTaskIncrementTick+0x15c>)
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	693a      	ldr	r2, [r7, #16]
 801025c:	429a      	cmp	r2, r3
 801025e:	d349      	bcc.n	80102f4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010260:	4b36      	ldr	r3, [pc, #216]	; (801033c <xTaskIncrementTick+0x150>)
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d104      	bne.n	8010274 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801026a:	4b37      	ldr	r3, [pc, #220]	; (8010348 <xTaskIncrementTick+0x15c>)
 801026c:	f04f 32ff 	mov.w	r2, #4294967295
 8010270:	601a      	str	r2, [r3, #0]
					break;
 8010272:	e03f      	b.n	80102f4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010274:	4b31      	ldr	r3, [pc, #196]	; (801033c <xTaskIncrementTick+0x150>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	68db      	ldr	r3, [r3, #12]
 801027a:	68db      	ldr	r3, [r3, #12]
 801027c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801027e:	68bb      	ldr	r3, [r7, #8]
 8010280:	685b      	ldr	r3, [r3, #4]
 8010282:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010284:	693a      	ldr	r2, [r7, #16]
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	429a      	cmp	r2, r3
 801028a:	d203      	bcs.n	8010294 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801028c:	4a2e      	ldr	r2, [pc, #184]	; (8010348 <xTaskIncrementTick+0x15c>)
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010292:	e02f      	b.n	80102f4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010294:	68bb      	ldr	r3, [r7, #8]
 8010296:	3304      	adds	r3, #4
 8010298:	4618      	mov	r0, r3
 801029a:	f7fe fc41 	bl	800eb20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801029e:	68bb      	ldr	r3, [r7, #8]
 80102a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d004      	beq.n	80102b0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80102a6:	68bb      	ldr	r3, [r7, #8]
 80102a8:	3318      	adds	r3, #24
 80102aa:	4618      	mov	r0, r3
 80102ac:	f7fe fc38 	bl	800eb20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80102b0:	68bb      	ldr	r3, [r7, #8]
 80102b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102b4:	4b25      	ldr	r3, [pc, #148]	; (801034c <xTaskIncrementTick+0x160>)
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	429a      	cmp	r2, r3
 80102ba:	d903      	bls.n	80102c4 <xTaskIncrementTick+0xd8>
 80102bc:	68bb      	ldr	r3, [r7, #8]
 80102be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102c0:	4a22      	ldr	r2, [pc, #136]	; (801034c <xTaskIncrementTick+0x160>)
 80102c2:	6013      	str	r3, [r2, #0]
 80102c4:	68bb      	ldr	r3, [r7, #8]
 80102c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102c8:	4613      	mov	r3, r2
 80102ca:	009b      	lsls	r3, r3, #2
 80102cc:	4413      	add	r3, r2
 80102ce:	009b      	lsls	r3, r3, #2
 80102d0:	4a1f      	ldr	r2, [pc, #124]	; (8010350 <xTaskIncrementTick+0x164>)
 80102d2:	441a      	add	r2, r3
 80102d4:	68bb      	ldr	r3, [r7, #8]
 80102d6:	3304      	adds	r3, #4
 80102d8:	4619      	mov	r1, r3
 80102da:	4610      	mov	r0, r2
 80102dc:	f7fe fbc3 	bl	800ea66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80102e0:	68bb      	ldr	r3, [r7, #8]
 80102e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102e4:	4b1b      	ldr	r3, [pc, #108]	; (8010354 <xTaskIncrementTick+0x168>)
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102ea:	429a      	cmp	r2, r3
 80102ec:	d3b8      	bcc.n	8010260 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80102ee:	2301      	movs	r3, #1
 80102f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80102f2:	e7b5      	b.n	8010260 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80102f4:	4b17      	ldr	r3, [pc, #92]	; (8010354 <xTaskIncrementTick+0x168>)
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102fa:	4915      	ldr	r1, [pc, #84]	; (8010350 <xTaskIncrementTick+0x164>)
 80102fc:	4613      	mov	r3, r2
 80102fe:	009b      	lsls	r3, r3, #2
 8010300:	4413      	add	r3, r2
 8010302:	009b      	lsls	r3, r3, #2
 8010304:	440b      	add	r3, r1
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	2b01      	cmp	r3, #1
 801030a:	d901      	bls.n	8010310 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801030c:	2301      	movs	r3, #1
 801030e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010310:	4b11      	ldr	r3, [pc, #68]	; (8010358 <xTaskIncrementTick+0x16c>)
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d007      	beq.n	8010328 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8010318:	2301      	movs	r3, #1
 801031a:	617b      	str	r3, [r7, #20]
 801031c:	e004      	b.n	8010328 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801031e:	4b0f      	ldr	r3, [pc, #60]	; (801035c <xTaskIncrementTick+0x170>)
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	3301      	adds	r3, #1
 8010324:	4a0d      	ldr	r2, [pc, #52]	; (801035c <xTaskIncrementTick+0x170>)
 8010326:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010328:	697b      	ldr	r3, [r7, #20]
}
 801032a:	4618      	mov	r0, r3
 801032c:	3718      	adds	r7, #24
 801032e:	46bd      	mov	sp, r7
 8010330:	bd80      	pop	{r7, pc}
 8010332:	bf00      	nop
 8010334:	200012a4 	.word	0x200012a4
 8010338:	20001280 	.word	0x20001280
 801033c:	20001234 	.word	0x20001234
 8010340:	20001238 	.word	0x20001238
 8010344:	20001294 	.word	0x20001294
 8010348:	2000129c 	.word	0x2000129c
 801034c:	20001284 	.word	0x20001284
 8010350:	20000dac 	.word	0x20000dac
 8010354:	20000da8 	.word	0x20000da8
 8010358:	20001290 	.word	0x20001290
 801035c:	2000128c 	.word	0x2000128c

08010360 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010360:	b580      	push	{r7, lr}
 8010362:	b086      	sub	sp, #24
 8010364:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010366:	4b3d      	ldr	r3, [pc, #244]	; (801045c <vTaskSwitchContext+0xfc>)
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d003      	beq.n	8010376 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801036e:	4b3c      	ldr	r3, [pc, #240]	; (8010460 <vTaskSwitchContext+0x100>)
 8010370:	2201      	movs	r2, #1
 8010372:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010374:	e06d      	b.n	8010452 <vTaskSwitchContext+0xf2>
		xYieldPending = pdFALSE;
 8010376:	4b3a      	ldr	r3, [pc, #232]	; (8010460 <vTaskSwitchContext+0x100>)
 8010378:	2200      	movs	r2, #0
 801037a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 801037c:	4b39      	ldr	r3, [pc, #228]	; (8010464 <vTaskSwitchContext+0x104>)
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010382:	613b      	str	r3, [r7, #16]
 8010384:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8010388:	60fb      	str	r3, [r7, #12]
 801038a:	693b      	ldr	r3, [r7, #16]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	68fa      	ldr	r2, [r7, #12]
 8010390:	429a      	cmp	r2, r3
 8010392:	d111      	bne.n	80103b8 <vTaskSwitchContext+0x58>
 8010394:	693b      	ldr	r3, [r7, #16]
 8010396:	3304      	adds	r3, #4
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	68fa      	ldr	r2, [r7, #12]
 801039c:	429a      	cmp	r2, r3
 801039e:	d10b      	bne.n	80103b8 <vTaskSwitchContext+0x58>
 80103a0:	693b      	ldr	r3, [r7, #16]
 80103a2:	3308      	adds	r3, #8
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	68fa      	ldr	r2, [r7, #12]
 80103a8:	429a      	cmp	r2, r3
 80103aa:	d105      	bne.n	80103b8 <vTaskSwitchContext+0x58>
 80103ac:	693b      	ldr	r3, [r7, #16]
 80103ae:	330c      	adds	r3, #12
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	68fa      	ldr	r2, [r7, #12]
 80103b4:	429a      	cmp	r2, r3
 80103b6:	d008      	beq.n	80103ca <vTaskSwitchContext+0x6a>
 80103b8:	4b2a      	ldr	r3, [pc, #168]	; (8010464 <vTaskSwitchContext+0x104>)
 80103ba:	681a      	ldr	r2, [r3, #0]
 80103bc:	4b29      	ldr	r3, [pc, #164]	; (8010464 <vTaskSwitchContext+0x104>)
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	3334      	adds	r3, #52	; 0x34
 80103c2:	4619      	mov	r1, r3
 80103c4:	4610      	mov	r0, r2
 80103c6:	f7f0 f8f0 	bl	80005aa <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80103ca:	4b27      	ldr	r3, [pc, #156]	; (8010468 <vTaskSwitchContext+0x108>)
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	617b      	str	r3, [r7, #20]
 80103d0:	e010      	b.n	80103f4 <vTaskSwitchContext+0x94>
 80103d2:	697b      	ldr	r3, [r7, #20]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d10a      	bne.n	80103ee <vTaskSwitchContext+0x8e>
	__asm volatile
 80103d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103dc:	f383 8811 	msr	BASEPRI, r3
 80103e0:	f3bf 8f6f 	isb	sy
 80103e4:	f3bf 8f4f 	dsb	sy
 80103e8:	607b      	str	r3, [r7, #4]
}
 80103ea:	bf00      	nop
 80103ec:	e7fe      	b.n	80103ec <vTaskSwitchContext+0x8c>
 80103ee:	697b      	ldr	r3, [r7, #20]
 80103f0:	3b01      	subs	r3, #1
 80103f2:	617b      	str	r3, [r7, #20]
 80103f4:	491d      	ldr	r1, [pc, #116]	; (801046c <vTaskSwitchContext+0x10c>)
 80103f6:	697a      	ldr	r2, [r7, #20]
 80103f8:	4613      	mov	r3, r2
 80103fa:	009b      	lsls	r3, r3, #2
 80103fc:	4413      	add	r3, r2
 80103fe:	009b      	lsls	r3, r3, #2
 8010400:	440b      	add	r3, r1
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d0e4      	beq.n	80103d2 <vTaskSwitchContext+0x72>
 8010408:	697a      	ldr	r2, [r7, #20]
 801040a:	4613      	mov	r3, r2
 801040c:	009b      	lsls	r3, r3, #2
 801040e:	4413      	add	r3, r2
 8010410:	009b      	lsls	r3, r3, #2
 8010412:	4a16      	ldr	r2, [pc, #88]	; (801046c <vTaskSwitchContext+0x10c>)
 8010414:	4413      	add	r3, r2
 8010416:	60bb      	str	r3, [r7, #8]
 8010418:	68bb      	ldr	r3, [r7, #8]
 801041a:	685b      	ldr	r3, [r3, #4]
 801041c:	685a      	ldr	r2, [r3, #4]
 801041e:	68bb      	ldr	r3, [r7, #8]
 8010420:	605a      	str	r2, [r3, #4]
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	685a      	ldr	r2, [r3, #4]
 8010426:	68bb      	ldr	r3, [r7, #8]
 8010428:	3308      	adds	r3, #8
 801042a:	429a      	cmp	r2, r3
 801042c:	d104      	bne.n	8010438 <vTaskSwitchContext+0xd8>
 801042e:	68bb      	ldr	r3, [r7, #8]
 8010430:	685b      	ldr	r3, [r3, #4]
 8010432:	685a      	ldr	r2, [r3, #4]
 8010434:	68bb      	ldr	r3, [r7, #8]
 8010436:	605a      	str	r2, [r3, #4]
 8010438:	68bb      	ldr	r3, [r7, #8]
 801043a:	685b      	ldr	r3, [r3, #4]
 801043c:	68db      	ldr	r3, [r3, #12]
 801043e:	4a09      	ldr	r2, [pc, #36]	; (8010464 <vTaskSwitchContext+0x104>)
 8010440:	6013      	str	r3, [r2, #0]
 8010442:	4a09      	ldr	r2, [pc, #36]	; (8010468 <vTaskSwitchContext+0x108>)
 8010444:	697b      	ldr	r3, [r7, #20]
 8010446:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010448:	4b06      	ldr	r3, [pc, #24]	; (8010464 <vTaskSwitchContext+0x104>)
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	3358      	adds	r3, #88	; 0x58
 801044e:	4a08      	ldr	r2, [pc, #32]	; (8010470 <vTaskSwitchContext+0x110>)
 8010450:	6013      	str	r3, [r2, #0]
}
 8010452:	bf00      	nop
 8010454:	3718      	adds	r7, #24
 8010456:	46bd      	mov	sp, r7
 8010458:	bd80      	pop	{r7, pc}
 801045a:	bf00      	nop
 801045c:	200012a4 	.word	0x200012a4
 8010460:	20001290 	.word	0x20001290
 8010464:	20000da8 	.word	0x20000da8
 8010468:	20001284 	.word	0x20001284
 801046c:	20000dac 	.word	0x20000dac
 8010470:	20000110 	.word	0x20000110

08010474 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010474:	b580      	push	{r7, lr}
 8010476:	b084      	sub	sp, #16
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
 801047c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d10a      	bne.n	801049a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8010484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010488:	f383 8811 	msr	BASEPRI, r3
 801048c:	f3bf 8f6f 	isb	sy
 8010490:	f3bf 8f4f 	dsb	sy
 8010494:	60fb      	str	r3, [r7, #12]
}
 8010496:	bf00      	nop
 8010498:	e7fe      	b.n	8010498 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801049a:	4b07      	ldr	r3, [pc, #28]	; (80104b8 <vTaskPlaceOnEventList+0x44>)
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	3318      	adds	r3, #24
 80104a0:	4619      	mov	r1, r3
 80104a2:	6878      	ldr	r0, [r7, #4]
 80104a4:	f7fe fb03 	bl	800eaae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80104a8:	2101      	movs	r1, #1
 80104aa:	6838      	ldr	r0, [r7, #0]
 80104ac:	f000 fb80 	bl	8010bb0 <prvAddCurrentTaskToDelayedList>
}
 80104b0:	bf00      	nop
 80104b2:	3710      	adds	r7, #16
 80104b4:	46bd      	mov	sp, r7
 80104b6:	bd80      	pop	{r7, pc}
 80104b8:	20000da8 	.word	0x20000da8

080104bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80104bc:	b580      	push	{r7, lr}
 80104be:	b086      	sub	sp, #24
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	60f8      	str	r0, [r7, #12]
 80104c4:	60b9      	str	r1, [r7, #8]
 80104c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d10a      	bne.n	80104e4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80104ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104d2:	f383 8811 	msr	BASEPRI, r3
 80104d6:	f3bf 8f6f 	isb	sy
 80104da:	f3bf 8f4f 	dsb	sy
 80104de:	617b      	str	r3, [r7, #20]
}
 80104e0:	bf00      	nop
 80104e2:	e7fe      	b.n	80104e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80104e4:	4b0a      	ldr	r3, [pc, #40]	; (8010510 <vTaskPlaceOnEventListRestricted+0x54>)
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	3318      	adds	r3, #24
 80104ea:	4619      	mov	r1, r3
 80104ec:	68f8      	ldr	r0, [r7, #12]
 80104ee:	f7fe faba 	bl	800ea66 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d002      	beq.n	80104fe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80104f8:	f04f 33ff 	mov.w	r3, #4294967295
 80104fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80104fe:	6879      	ldr	r1, [r7, #4]
 8010500:	68b8      	ldr	r0, [r7, #8]
 8010502:	f000 fb55 	bl	8010bb0 <prvAddCurrentTaskToDelayedList>
	}
 8010506:	bf00      	nop
 8010508:	3718      	adds	r7, #24
 801050a:	46bd      	mov	sp, r7
 801050c:	bd80      	pop	{r7, pc}
 801050e:	bf00      	nop
 8010510:	20000da8 	.word	0x20000da8

08010514 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b086      	sub	sp, #24
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	68db      	ldr	r3, [r3, #12]
 8010520:	68db      	ldr	r3, [r3, #12]
 8010522:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010524:	693b      	ldr	r3, [r7, #16]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d10a      	bne.n	8010540 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801052a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801052e:	f383 8811 	msr	BASEPRI, r3
 8010532:	f3bf 8f6f 	isb	sy
 8010536:	f3bf 8f4f 	dsb	sy
 801053a:	60fb      	str	r3, [r7, #12]
}
 801053c:	bf00      	nop
 801053e:	e7fe      	b.n	801053e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010540:	693b      	ldr	r3, [r7, #16]
 8010542:	3318      	adds	r3, #24
 8010544:	4618      	mov	r0, r3
 8010546:	f7fe faeb 	bl	800eb20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801054a:	4b1e      	ldr	r3, [pc, #120]	; (80105c4 <xTaskRemoveFromEventList+0xb0>)
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d11d      	bne.n	801058e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010552:	693b      	ldr	r3, [r7, #16]
 8010554:	3304      	adds	r3, #4
 8010556:	4618      	mov	r0, r3
 8010558:	f7fe fae2 	bl	800eb20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801055c:	693b      	ldr	r3, [r7, #16]
 801055e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010560:	4b19      	ldr	r3, [pc, #100]	; (80105c8 <xTaskRemoveFromEventList+0xb4>)
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	429a      	cmp	r2, r3
 8010566:	d903      	bls.n	8010570 <xTaskRemoveFromEventList+0x5c>
 8010568:	693b      	ldr	r3, [r7, #16]
 801056a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801056c:	4a16      	ldr	r2, [pc, #88]	; (80105c8 <xTaskRemoveFromEventList+0xb4>)
 801056e:	6013      	str	r3, [r2, #0]
 8010570:	693b      	ldr	r3, [r7, #16]
 8010572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010574:	4613      	mov	r3, r2
 8010576:	009b      	lsls	r3, r3, #2
 8010578:	4413      	add	r3, r2
 801057a:	009b      	lsls	r3, r3, #2
 801057c:	4a13      	ldr	r2, [pc, #76]	; (80105cc <xTaskRemoveFromEventList+0xb8>)
 801057e:	441a      	add	r2, r3
 8010580:	693b      	ldr	r3, [r7, #16]
 8010582:	3304      	adds	r3, #4
 8010584:	4619      	mov	r1, r3
 8010586:	4610      	mov	r0, r2
 8010588:	f7fe fa6d 	bl	800ea66 <vListInsertEnd>
 801058c:	e005      	b.n	801059a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801058e:	693b      	ldr	r3, [r7, #16]
 8010590:	3318      	adds	r3, #24
 8010592:	4619      	mov	r1, r3
 8010594:	480e      	ldr	r0, [pc, #56]	; (80105d0 <xTaskRemoveFromEventList+0xbc>)
 8010596:	f7fe fa66 	bl	800ea66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801059a:	693b      	ldr	r3, [r7, #16]
 801059c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801059e:	4b0d      	ldr	r3, [pc, #52]	; (80105d4 <xTaskRemoveFromEventList+0xc0>)
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105a4:	429a      	cmp	r2, r3
 80105a6:	d905      	bls.n	80105b4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80105a8:	2301      	movs	r3, #1
 80105aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80105ac:	4b0a      	ldr	r3, [pc, #40]	; (80105d8 <xTaskRemoveFromEventList+0xc4>)
 80105ae:	2201      	movs	r2, #1
 80105b0:	601a      	str	r2, [r3, #0]
 80105b2:	e001      	b.n	80105b8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80105b4:	2300      	movs	r3, #0
 80105b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80105b8:	697b      	ldr	r3, [r7, #20]
}
 80105ba:	4618      	mov	r0, r3
 80105bc:	3718      	adds	r7, #24
 80105be:	46bd      	mov	sp, r7
 80105c0:	bd80      	pop	{r7, pc}
 80105c2:	bf00      	nop
 80105c4:	200012a4 	.word	0x200012a4
 80105c8:	20001284 	.word	0x20001284
 80105cc:	20000dac 	.word	0x20000dac
 80105d0:	2000123c 	.word	0x2000123c
 80105d4:	20000da8 	.word	0x20000da8
 80105d8:	20001290 	.word	0x20001290

080105dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80105dc:	b480      	push	{r7}
 80105de:	b083      	sub	sp, #12
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80105e4:	4b06      	ldr	r3, [pc, #24]	; (8010600 <vTaskInternalSetTimeOutState+0x24>)
 80105e6:	681a      	ldr	r2, [r3, #0]
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80105ec:	4b05      	ldr	r3, [pc, #20]	; (8010604 <vTaskInternalSetTimeOutState+0x28>)
 80105ee:	681a      	ldr	r2, [r3, #0]
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	605a      	str	r2, [r3, #4]
}
 80105f4:	bf00      	nop
 80105f6:	370c      	adds	r7, #12
 80105f8:	46bd      	mov	sp, r7
 80105fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fe:	4770      	bx	lr
 8010600:	20001294 	.word	0x20001294
 8010604:	20001280 	.word	0x20001280

08010608 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010608:	b580      	push	{r7, lr}
 801060a:	b088      	sub	sp, #32
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
 8010610:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d10a      	bne.n	801062e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010618:	f04f 0350 	mov.w	r3, #80	; 0x50
 801061c:	f383 8811 	msr	BASEPRI, r3
 8010620:	f3bf 8f6f 	isb	sy
 8010624:	f3bf 8f4f 	dsb	sy
 8010628:	613b      	str	r3, [r7, #16]
}
 801062a:	bf00      	nop
 801062c:	e7fe      	b.n	801062c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801062e:	683b      	ldr	r3, [r7, #0]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d10a      	bne.n	801064a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010638:	f383 8811 	msr	BASEPRI, r3
 801063c:	f3bf 8f6f 	isb	sy
 8010640:	f3bf 8f4f 	dsb	sy
 8010644:	60fb      	str	r3, [r7, #12]
}
 8010646:	bf00      	nop
 8010648:	e7fe      	b.n	8010648 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801064a:	f000 ff83 	bl	8011554 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801064e:	4b1d      	ldr	r3, [pc, #116]	; (80106c4 <xTaskCheckForTimeOut+0xbc>)
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	685b      	ldr	r3, [r3, #4]
 8010658:	69ba      	ldr	r2, [r7, #24]
 801065a:	1ad3      	subs	r3, r2, r3
 801065c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801065e:	683b      	ldr	r3, [r7, #0]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010666:	d102      	bne.n	801066e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010668:	2300      	movs	r3, #0
 801066a:	61fb      	str	r3, [r7, #28]
 801066c:	e023      	b.n	80106b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	681a      	ldr	r2, [r3, #0]
 8010672:	4b15      	ldr	r3, [pc, #84]	; (80106c8 <xTaskCheckForTimeOut+0xc0>)
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	429a      	cmp	r2, r3
 8010678:	d007      	beq.n	801068a <xTaskCheckForTimeOut+0x82>
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	685b      	ldr	r3, [r3, #4]
 801067e:	69ba      	ldr	r2, [r7, #24]
 8010680:	429a      	cmp	r2, r3
 8010682:	d302      	bcc.n	801068a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010684:	2301      	movs	r3, #1
 8010686:	61fb      	str	r3, [r7, #28]
 8010688:	e015      	b.n	80106b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801068a:	683b      	ldr	r3, [r7, #0]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	697a      	ldr	r2, [r7, #20]
 8010690:	429a      	cmp	r2, r3
 8010692:	d20b      	bcs.n	80106ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010694:	683b      	ldr	r3, [r7, #0]
 8010696:	681a      	ldr	r2, [r3, #0]
 8010698:	697b      	ldr	r3, [r7, #20]
 801069a:	1ad2      	subs	r2, r2, r3
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80106a0:	6878      	ldr	r0, [r7, #4]
 80106a2:	f7ff ff9b 	bl	80105dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80106a6:	2300      	movs	r3, #0
 80106a8:	61fb      	str	r3, [r7, #28]
 80106aa:	e004      	b.n	80106b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80106ac:	683b      	ldr	r3, [r7, #0]
 80106ae:	2200      	movs	r2, #0
 80106b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80106b2:	2301      	movs	r3, #1
 80106b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80106b6:	f000 ff7d 	bl	80115b4 <vPortExitCritical>

	return xReturn;
 80106ba:	69fb      	ldr	r3, [r7, #28]
}
 80106bc:	4618      	mov	r0, r3
 80106be:	3720      	adds	r7, #32
 80106c0:	46bd      	mov	sp, r7
 80106c2:	bd80      	pop	{r7, pc}
 80106c4:	20001280 	.word	0x20001280
 80106c8:	20001294 	.word	0x20001294

080106cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80106cc:	b480      	push	{r7}
 80106ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80106d0:	4b03      	ldr	r3, [pc, #12]	; (80106e0 <vTaskMissedYield+0x14>)
 80106d2:	2201      	movs	r2, #1
 80106d4:	601a      	str	r2, [r3, #0]
}
 80106d6:	bf00      	nop
 80106d8:	46bd      	mov	sp, r7
 80106da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106de:	4770      	bx	lr
 80106e0:	20001290 	.word	0x20001290

080106e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b082      	sub	sp, #8
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80106ec:	f000 f854 	bl	8010798 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80106f0:	4b07      	ldr	r3, [pc, #28]	; (8010710 <prvIdleTask+0x2c>)
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	2b01      	cmp	r3, #1
 80106f6:	d907      	bls.n	8010708 <prvIdleTask+0x24>
			{
				taskYIELD();
 80106f8:	4b06      	ldr	r3, [pc, #24]	; (8010714 <prvIdleTask+0x30>)
 80106fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106fe:	601a      	str	r2, [r3, #0]
 8010700:	f3bf 8f4f 	dsb	sy
 8010704:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8010708:	f7ef ff48 	bl	800059c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 801070c:	e7ee      	b.n	80106ec <prvIdleTask+0x8>
 801070e:	bf00      	nop
 8010710:	20000dac 	.word	0x20000dac
 8010714:	e000ed04 	.word	0xe000ed04

08010718 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b082      	sub	sp, #8
 801071c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801071e:	2300      	movs	r3, #0
 8010720:	607b      	str	r3, [r7, #4]
 8010722:	e00c      	b.n	801073e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010724:	687a      	ldr	r2, [r7, #4]
 8010726:	4613      	mov	r3, r2
 8010728:	009b      	lsls	r3, r3, #2
 801072a:	4413      	add	r3, r2
 801072c:	009b      	lsls	r3, r3, #2
 801072e:	4a12      	ldr	r2, [pc, #72]	; (8010778 <prvInitialiseTaskLists+0x60>)
 8010730:	4413      	add	r3, r2
 8010732:	4618      	mov	r0, r3
 8010734:	f7fe f96a 	bl	800ea0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	3301      	adds	r3, #1
 801073c:	607b      	str	r3, [r7, #4]
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	2b37      	cmp	r3, #55	; 0x37
 8010742:	d9ef      	bls.n	8010724 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010744:	480d      	ldr	r0, [pc, #52]	; (801077c <prvInitialiseTaskLists+0x64>)
 8010746:	f7fe f961 	bl	800ea0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801074a:	480d      	ldr	r0, [pc, #52]	; (8010780 <prvInitialiseTaskLists+0x68>)
 801074c:	f7fe f95e 	bl	800ea0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010750:	480c      	ldr	r0, [pc, #48]	; (8010784 <prvInitialiseTaskLists+0x6c>)
 8010752:	f7fe f95b 	bl	800ea0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010756:	480c      	ldr	r0, [pc, #48]	; (8010788 <prvInitialiseTaskLists+0x70>)
 8010758:	f7fe f958 	bl	800ea0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801075c:	480b      	ldr	r0, [pc, #44]	; (801078c <prvInitialiseTaskLists+0x74>)
 801075e:	f7fe f955 	bl	800ea0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010762:	4b0b      	ldr	r3, [pc, #44]	; (8010790 <prvInitialiseTaskLists+0x78>)
 8010764:	4a05      	ldr	r2, [pc, #20]	; (801077c <prvInitialiseTaskLists+0x64>)
 8010766:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010768:	4b0a      	ldr	r3, [pc, #40]	; (8010794 <prvInitialiseTaskLists+0x7c>)
 801076a:	4a05      	ldr	r2, [pc, #20]	; (8010780 <prvInitialiseTaskLists+0x68>)
 801076c:	601a      	str	r2, [r3, #0]
}
 801076e:	bf00      	nop
 8010770:	3708      	adds	r7, #8
 8010772:	46bd      	mov	sp, r7
 8010774:	bd80      	pop	{r7, pc}
 8010776:	bf00      	nop
 8010778:	20000dac 	.word	0x20000dac
 801077c:	2000120c 	.word	0x2000120c
 8010780:	20001220 	.word	0x20001220
 8010784:	2000123c 	.word	0x2000123c
 8010788:	20001250 	.word	0x20001250
 801078c:	20001268 	.word	0x20001268
 8010790:	20001234 	.word	0x20001234
 8010794:	20001238 	.word	0x20001238

08010798 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b082      	sub	sp, #8
 801079c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801079e:	e019      	b.n	80107d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80107a0:	f000 fed8 	bl	8011554 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80107a4:	4b10      	ldr	r3, [pc, #64]	; (80107e8 <prvCheckTasksWaitingTermination+0x50>)
 80107a6:	68db      	ldr	r3, [r3, #12]
 80107a8:	68db      	ldr	r3, [r3, #12]
 80107aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	3304      	adds	r3, #4
 80107b0:	4618      	mov	r0, r3
 80107b2:	f7fe f9b5 	bl	800eb20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80107b6:	4b0d      	ldr	r3, [pc, #52]	; (80107ec <prvCheckTasksWaitingTermination+0x54>)
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	3b01      	subs	r3, #1
 80107bc:	4a0b      	ldr	r2, [pc, #44]	; (80107ec <prvCheckTasksWaitingTermination+0x54>)
 80107be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80107c0:	4b0b      	ldr	r3, [pc, #44]	; (80107f0 <prvCheckTasksWaitingTermination+0x58>)
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	3b01      	subs	r3, #1
 80107c6:	4a0a      	ldr	r2, [pc, #40]	; (80107f0 <prvCheckTasksWaitingTermination+0x58>)
 80107c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80107ca:	f000 fef3 	bl	80115b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80107ce:	6878      	ldr	r0, [r7, #4]
 80107d0:	f000 f810 	bl	80107f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80107d4:	4b06      	ldr	r3, [pc, #24]	; (80107f0 <prvCheckTasksWaitingTermination+0x58>)
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d1e1      	bne.n	80107a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80107dc:	bf00      	nop
 80107de:	bf00      	nop
 80107e0:	3708      	adds	r7, #8
 80107e2:	46bd      	mov	sp, r7
 80107e4:	bd80      	pop	{r7, pc}
 80107e6:	bf00      	nop
 80107e8:	20001250 	.word	0x20001250
 80107ec:	2000127c 	.word	0x2000127c
 80107f0:	20001264 	.word	0x20001264

080107f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b084      	sub	sp, #16
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	3358      	adds	r3, #88	; 0x58
 8010800:	4618      	mov	r0, r3
 8010802:	f01c fbdf 	bl	802cfc4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 801080c:	2b00      	cmp	r3, #0
 801080e:	d108      	bne.n	8010822 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010814:	4618      	mov	r0, r3
 8010816:	f001 f88f 	bl	8011938 <vPortFree>
				vPortFree( pxTCB );
 801081a:	6878      	ldr	r0, [r7, #4]
 801081c:	f001 f88c 	bl	8011938 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010820:	e018      	b.n	8010854 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8010828:	2b01      	cmp	r3, #1
 801082a:	d103      	bne.n	8010834 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801082c:	6878      	ldr	r0, [r7, #4]
 801082e:	f001 f883 	bl	8011938 <vPortFree>
	}
 8010832:	e00f      	b.n	8010854 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 801083a:	2b02      	cmp	r3, #2
 801083c:	d00a      	beq.n	8010854 <prvDeleteTCB+0x60>
	__asm volatile
 801083e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010842:	f383 8811 	msr	BASEPRI, r3
 8010846:	f3bf 8f6f 	isb	sy
 801084a:	f3bf 8f4f 	dsb	sy
 801084e:	60fb      	str	r3, [r7, #12]
}
 8010850:	bf00      	nop
 8010852:	e7fe      	b.n	8010852 <prvDeleteTCB+0x5e>
	}
 8010854:	bf00      	nop
 8010856:	3710      	adds	r7, #16
 8010858:	46bd      	mov	sp, r7
 801085a:	bd80      	pop	{r7, pc}

0801085c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801085c:	b480      	push	{r7}
 801085e:	b083      	sub	sp, #12
 8010860:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010862:	4b0c      	ldr	r3, [pc, #48]	; (8010894 <prvResetNextTaskUnblockTime+0x38>)
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d104      	bne.n	8010876 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801086c:	4b0a      	ldr	r3, [pc, #40]	; (8010898 <prvResetNextTaskUnblockTime+0x3c>)
 801086e:	f04f 32ff 	mov.w	r2, #4294967295
 8010872:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010874:	e008      	b.n	8010888 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010876:	4b07      	ldr	r3, [pc, #28]	; (8010894 <prvResetNextTaskUnblockTime+0x38>)
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	68db      	ldr	r3, [r3, #12]
 801087c:	68db      	ldr	r3, [r3, #12]
 801087e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	685b      	ldr	r3, [r3, #4]
 8010884:	4a04      	ldr	r2, [pc, #16]	; (8010898 <prvResetNextTaskUnblockTime+0x3c>)
 8010886:	6013      	str	r3, [r2, #0]
}
 8010888:	bf00      	nop
 801088a:	370c      	adds	r7, #12
 801088c:	46bd      	mov	sp, r7
 801088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010892:	4770      	bx	lr
 8010894:	20001234 	.word	0x20001234
 8010898:	2000129c 	.word	0x2000129c

0801089c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801089c:	b480      	push	{r7}
 801089e:	b083      	sub	sp, #12
 80108a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80108a2:	4b0b      	ldr	r3, [pc, #44]	; (80108d0 <xTaskGetSchedulerState+0x34>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d102      	bne.n	80108b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80108aa:	2301      	movs	r3, #1
 80108ac:	607b      	str	r3, [r7, #4]
 80108ae:	e008      	b.n	80108c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80108b0:	4b08      	ldr	r3, [pc, #32]	; (80108d4 <xTaskGetSchedulerState+0x38>)
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d102      	bne.n	80108be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80108b8:	2302      	movs	r3, #2
 80108ba:	607b      	str	r3, [r7, #4]
 80108bc:	e001      	b.n	80108c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80108be:	2300      	movs	r3, #0
 80108c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80108c2:	687b      	ldr	r3, [r7, #4]
	}
 80108c4:	4618      	mov	r0, r3
 80108c6:	370c      	adds	r7, #12
 80108c8:	46bd      	mov	sp, r7
 80108ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ce:	4770      	bx	lr
 80108d0:	20001288 	.word	0x20001288
 80108d4:	200012a4 	.word	0x200012a4

080108d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80108d8:	b580      	push	{r7, lr}
 80108da:	b084      	sub	sp, #16
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80108e4:	2300      	movs	r3, #0
 80108e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d051      	beq.n	8010992 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80108ee:	68bb      	ldr	r3, [r7, #8]
 80108f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108f2:	4b2a      	ldr	r3, [pc, #168]	; (801099c <xTaskPriorityInherit+0xc4>)
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108f8:	429a      	cmp	r2, r3
 80108fa:	d241      	bcs.n	8010980 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80108fc:	68bb      	ldr	r3, [r7, #8]
 80108fe:	699b      	ldr	r3, [r3, #24]
 8010900:	2b00      	cmp	r3, #0
 8010902:	db06      	blt.n	8010912 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010904:	4b25      	ldr	r3, [pc, #148]	; (801099c <xTaskPriorityInherit+0xc4>)
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801090a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801090e:	68bb      	ldr	r3, [r7, #8]
 8010910:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010912:	68bb      	ldr	r3, [r7, #8]
 8010914:	6959      	ldr	r1, [r3, #20]
 8010916:	68bb      	ldr	r3, [r7, #8]
 8010918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801091a:	4613      	mov	r3, r2
 801091c:	009b      	lsls	r3, r3, #2
 801091e:	4413      	add	r3, r2
 8010920:	009b      	lsls	r3, r3, #2
 8010922:	4a1f      	ldr	r2, [pc, #124]	; (80109a0 <xTaskPriorityInherit+0xc8>)
 8010924:	4413      	add	r3, r2
 8010926:	4299      	cmp	r1, r3
 8010928:	d122      	bne.n	8010970 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801092a:	68bb      	ldr	r3, [r7, #8]
 801092c:	3304      	adds	r3, #4
 801092e:	4618      	mov	r0, r3
 8010930:	f7fe f8f6 	bl	800eb20 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010934:	4b19      	ldr	r3, [pc, #100]	; (801099c <xTaskPriorityInherit+0xc4>)
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801093a:	68bb      	ldr	r3, [r7, #8]
 801093c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801093e:	68bb      	ldr	r3, [r7, #8]
 8010940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010942:	4b18      	ldr	r3, [pc, #96]	; (80109a4 <xTaskPriorityInherit+0xcc>)
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	429a      	cmp	r2, r3
 8010948:	d903      	bls.n	8010952 <xTaskPriorityInherit+0x7a>
 801094a:	68bb      	ldr	r3, [r7, #8]
 801094c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801094e:	4a15      	ldr	r2, [pc, #84]	; (80109a4 <xTaskPriorityInherit+0xcc>)
 8010950:	6013      	str	r3, [r2, #0]
 8010952:	68bb      	ldr	r3, [r7, #8]
 8010954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010956:	4613      	mov	r3, r2
 8010958:	009b      	lsls	r3, r3, #2
 801095a:	4413      	add	r3, r2
 801095c:	009b      	lsls	r3, r3, #2
 801095e:	4a10      	ldr	r2, [pc, #64]	; (80109a0 <xTaskPriorityInherit+0xc8>)
 8010960:	441a      	add	r2, r3
 8010962:	68bb      	ldr	r3, [r7, #8]
 8010964:	3304      	adds	r3, #4
 8010966:	4619      	mov	r1, r3
 8010968:	4610      	mov	r0, r2
 801096a:	f7fe f87c 	bl	800ea66 <vListInsertEnd>
 801096e:	e004      	b.n	801097a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010970:	4b0a      	ldr	r3, [pc, #40]	; (801099c <xTaskPriorityInherit+0xc4>)
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010976:	68bb      	ldr	r3, [r7, #8]
 8010978:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801097a:	2301      	movs	r3, #1
 801097c:	60fb      	str	r3, [r7, #12]
 801097e:	e008      	b.n	8010992 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010980:	68bb      	ldr	r3, [r7, #8]
 8010982:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010984:	4b05      	ldr	r3, [pc, #20]	; (801099c <xTaskPriorityInherit+0xc4>)
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801098a:	429a      	cmp	r2, r3
 801098c:	d201      	bcs.n	8010992 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801098e:	2301      	movs	r3, #1
 8010990:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010992:	68fb      	ldr	r3, [r7, #12]
	}
 8010994:	4618      	mov	r0, r3
 8010996:	3710      	adds	r7, #16
 8010998:	46bd      	mov	sp, r7
 801099a:	bd80      	pop	{r7, pc}
 801099c:	20000da8 	.word	0x20000da8
 80109a0:	20000dac 	.word	0x20000dac
 80109a4:	20001284 	.word	0x20001284

080109a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b086      	sub	sp, #24
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80109b4:	2300      	movs	r3, #0
 80109b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d056      	beq.n	8010a6c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80109be:	4b2e      	ldr	r3, [pc, #184]	; (8010a78 <xTaskPriorityDisinherit+0xd0>)
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	693a      	ldr	r2, [r7, #16]
 80109c4:	429a      	cmp	r2, r3
 80109c6:	d00a      	beq.n	80109de <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80109c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109cc:	f383 8811 	msr	BASEPRI, r3
 80109d0:	f3bf 8f6f 	isb	sy
 80109d4:	f3bf 8f4f 	dsb	sy
 80109d8:	60fb      	str	r3, [r7, #12]
}
 80109da:	bf00      	nop
 80109dc:	e7fe      	b.n	80109dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80109de:	693b      	ldr	r3, [r7, #16]
 80109e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d10a      	bne.n	80109fc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80109e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109ea:	f383 8811 	msr	BASEPRI, r3
 80109ee:	f3bf 8f6f 	isb	sy
 80109f2:	f3bf 8f4f 	dsb	sy
 80109f6:	60bb      	str	r3, [r7, #8]
}
 80109f8:	bf00      	nop
 80109fa:	e7fe      	b.n	80109fa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80109fc:	693b      	ldr	r3, [r7, #16]
 80109fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a00:	1e5a      	subs	r2, r3, #1
 8010a02:	693b      	ldr	r3, [r7, #16]
 8010a04:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010a06:	693b      	ldr	r3, [r7, #16]
 8010a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a0a:	693b      	ldr	r3, [r7, #16]
 8010a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010a0e:	429a      	cmp	r2, r3
 8010a10:	d02c      	beq.n	8010a6c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010a12:	693b      	ldr	r3, [r7, #16]
 8010a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d128      	bne.n	8010a6c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010a1a:	693b      	ldr	r3, [r7, #16]
 8010a1c:	3304      	adds	r3, #4
 8010a1e:	4618      	mov	r0, r3
 8010a20:	f7fe f87e 	bl	800eb20 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010a24:	693b      	ldr	r3, [r7, #16]
 8010a26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010a28:	693b      	ldr	r3, [r7, #16]
 8010a2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010a2c:	693b      	ldr	r3, [r7, #16]
 8010a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a30:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010a34:	693b      	ldr	r3, [r7, #16]
 8010a36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010a38:	693b      	ldr	r3, [r7, #16]
 8010a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a3c:	4b0f      	ldr	r3, [pc, #60]	; (8010a7c <xTaskPriorityDisinherit+0xd4>)
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	429a      	cmp	r2, r3
 8010a42:	d903      	bls.n	8010a4c <xTaskPriorityDisinherit+0xa4>
 8010a44:	693b      	ldr	r3, [r7, #16]
 8010a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a48:	4a0c      	ldr	r2, [pc, #48]	; (8010a7c <xTaskPriorityDisinherit+0xd4>)
 8010a4a:	6013      	str	r3, [r2, #0]
 8010a4c:	693b      	ldr	r3, [r7, #16]
 8010a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a50:	4613      	mov	r3, r2
 8010a52:	009b      	lsls	r3, r3, #2
 8010a54:	4413      	add	r3, r2
 8010a56:	009b      	lsls	r3, r3, #2
 8010a58:	4a09      	ldr	r2, [pc, #36]	; (8010a80 <xTaskPriorityDisinherit+0xd8>)
 8010a5a:	441a      	add	r2, r3
 8010a5c:	693b      	ldr	r3, [r7, #16]
 8010a5e:	3304      	adds	r3, #4
 8010a60:	4619      	mov	r1, r3
 8010a62:	4610      	mov	r0, r2
 8010a64:	f7fd ffff 	bl	800ea66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010a68:	2301      	movs	r3, #1
 8010a6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010a6c:	697b      	ldr	r3, [r7, #20]
	}
 8010a6e:	4618      	mov	r0, r3
 8010a70:	3718      	adds	r7, #24
 8010a72:	46bd      	mov	sp, r7
 8010a74:	bd80      	pop	{r7, pc}
 8010a76:	bf00      	nop
 8010a78:	20000da8 	.word	0x20000da8
 8010a7c:	20001284 	.word	0x20001284
 8010a80:	20000dac 	.word	0x20000dac

08010a84 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b088      	sub	sp, #32
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
 8010a8c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010a92:	2301      	movs	r3, #1
 8010a94:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d06a      	beq.n	8010b72 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010a9c:	69bb      	ldr	r3, [r7, #24]
 8010a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d10a      	bne.n	8010aba <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8010aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aa8:	f383 8811 	msr	BASEPRI, r3
 8010aac:	f3bf 8f6f 	isb	sy
 8010ab0:	f3bf 8f4f 	dsb	sy
 8010ab4:	60fb      	str	r3, [r7, #12]
}
 8010ab6:	bf00      	nop
 8010ab8:	e7fe      	b.n	8010ab8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010aba:	69bb      	ldr	r3, [r7, #24]
 8010abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010abe:	683a      	ldr	r2, [r7, #0]
 8010ac0:	429a      	cmp	r2, r3
 8010ac2:	d902      	bls.n	8010aca <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010ac4:	683b      	ldr	r3, [r7, #0]
 8010ac6:	61fb      	str	r3, [r7, #28]
 8010ac8:	e002      	b.n	8010ad0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010aca:	69bb      	ldr	r3, [r7, #24]
 8010acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010ace:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010ad0:	69bb      	ldr	r3, [r7, #24]
 8010ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ad4:	69fa      	ldr	r2, [r7, #28]
 8010ad6:	429a      	cmp	r2, r3
 8010ad8:	d04b      	beq.n	8010b72 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010ada:	69bb      	ldr	r3, [r7, #24]
 8010adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ade:	697a      	ldr	r2, [r7, #20]
 8010ae0:	429a      	cmp	r2, r3
 8010ae2:	d146      	bne.n	8010b72 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010ae4:	4b25      	ldr	r3, [pc, #148]	; (8010b7c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	69ba      	ldr	r2, [r7, #24]
 8010aea:	429a      	cmp	r2, r3
 8010aec:	d10a      	bne.n	8010b04 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8010aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010af2:	f383 8811 	msr	BASEPRI, r3
 8010af6:	f3bf 8f6f 	isb	sy
 8010afa:	f3bf 8f4f 	dsb	sy
 8010afe:	60bb      	str	r3, [r7, #8]
}
 8010b00:	bf00      	nop
 8010b02:	e7fe      	b.n	8010b02 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010b04:	69bb      	ldr	r3, [r7, #24]
 8010b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b08:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010b0a:	69bb      	ldr	r3, [r7, #24]
 8010b0c:	69fa      	ldr	r2, [r7, #28]
 8010b0e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010b10:	69bb      	ldr	r3, [r7, #24]
 8010b12:	699b      	ldr	r3, [r3, #24]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	db04      	blt.n	8010b22 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b18:	69fb      	ldr	r3, [r7, #28]
 8010b1a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010b1e:	69bb      	ldr	r3, [r7, #24]
 8010b20:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010b22:	69bb      	ldr	r3, [r7, #24]
 8010b24:	6959      	ldr	r1, [r3, #20]
 8010b26:	693a      	ldr	r2, [r7, #16]
 8010b28:	4613      	mov	r3, r2
 8010b2a:	009b      	lsls	r3, r3, #2
 8010b2c:	4413      	add	r3, r2
 8010b2e:	009b      	lsls	r3, r3, #2
 8010b30:	4a13      	ldr	r2, [pc, #76]	; (8010b80 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010b32:	4413      	add	r3, r2
 8010b34:	4299      	cmp	r1, r3
 8010b36:	d11c      	bne.n	8010b72 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010b38:	69bb      	ldr	r3, [r7, #24]
 8010b3a:	3304      	adds	r3, #4
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	f7fd ffef 	bl	800eb20 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010b42:	69bb      	ldr	r3, [r7, #24]
 8010b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b46:	4b0f      	ldr	r3, [pc, #60]	; (8010b84 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	429a      	cmp	r2, r3
 8010b4c:	d903      	bls.n	8010b56 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8010b4e:	69bb      	ldr	r3, [r7, #24]
 8010b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b52:	4a0c      	ldr	r2, [pc, #48]	; (8010b84 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010b54:	6013      	str	r3, [r2, #0]
 8010b56:	69bb      	ldr	r3, [r7, #24]
 8010b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b5a:	4613      	mov	r3, r2
 8010b5c:	009b      	lsls	r3, r3, #2
 8010b5e:	4413      	add	r3, r2
 8010b60:	009b      	lsls	r3, r3, #2
 8010b62:	4a07      	ldr	r2, [pc, #28]	; (8010b80 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010b64:	441a      	add	r2, r3
 8010b66:	69bb      	ldr	r3, [r7, #24]
 8010b68:	3304      	adds	r3, #4
 8010b6a:	4619      	mov	r1, r3
 8010b6c:	4610      	mov	r0, r2
 8010b6e:	f7fd ff7a 	bl	800ea66 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010b72:	bf00      	nop
 8010b74:	3720      	adds	r7, #32
 8010b76:	46bd      	mov	sp, r7
 8010b78:	bd80      	pop	{r7, pc}
 8010b7a:	bf00      	nop
 8010b7c:	20000da8 	.word	0x20000da8
 8010b80:	20000dac 	.word	0x20000dac
 8010b84:	20001284 	.word	0x20001284

08010b88 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010b88:	b480      	push	{r7}
 8010b8a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010b8c:	4b07      	ldr	r3, [pc, #28]	; (8010bac <pvTaskIncrementMutexHeldCount+0x24>)
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d004      	beq.n	8010b9e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010b94:	4b05      	ldr	r3, [pc, #20]	; (8010bac <pvTaskIncrementMutexHeldCount+0x24>)
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010b9a:	3201      	adds	r2, #1
 8010b9c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8010b9e:	4b03      	ldr	r3, [pc, #12]	; (8010bac <pvTaskIncrementMutexHeldCount+0x24>)
 8010ba0:	681b      	ldr	r3, [r3, #0]
	}
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	46bd      	mov	sp, r7
 8010ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010baa:	4770      	bx	lr
 8010bac:	20000da8 	.word	0x20000da8

08010bb0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b084      	sub	sp, #16
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	6078      	str	r0, [r7, #4]
 8010bb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010bba:	4b21      	ldr	r3, [pc, #132]	; (8010c40 <prvAddCurrentTaskToDelayedList+0x90>)
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010bc0:	4b20      	ldr	r3, [pc, #128]	; (8010c44 <prvAddCurrentTaskToDelayedList+0x94>)
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	3304      	adds	r3, #4
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	f7fd ffaa 	bl	800eb20 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bd2:	d10a      	bne.n	8010bea <prvAddCurrentTaskToDelayedList+0x3a>
 8010bd4:	683b      	ldr	r3, [r7, #0]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d007      	beq.n	8010bea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010bda:	4b1a      	ldr	r3, [pc, #104]	; (8010c44 <prvAddCurrentTaskToDelayedList+0x94>)
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	3304      	adds	r3, #4
 8010be0:	4619      	mov	r1, r3
 8010be2:	4819      	ldr	r0, [pc, #100]	; (8010c48 <prvAddCurrentTaskToDelayedList+0x98>)
 8010be4:	f7fd ff3f 	bl	800ea66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010be8:	e026      	b.n	8010c38 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010bea:	68fa      	ldr	r2, [r7, #12]
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	4413      	add	r3, r2
 8010bf0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010bf2:	4b14      	ldr	r3, [pc, #80]	; (8010c44 <prvAddCurrentTaskToDelayedList+0x94>)
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	68ba      	ldr	r2, [r7, #8]
 8010bf8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010bfa:	68ba      	ldr	r2, [r7, #8]
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	429a      	cmp	r2, r3
 8010c00:	d209      	bcs.n	8010c16 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010c02:	4b12      	ldr	r3, [pc, #72]	; (8010c4c <prvAddCurrentTaskToDelayedList+0x9c>)
 8010c04:	681a      	ldr	r2, [r3, #0]
 8010c06:	4b0f      	ldr	r3, [pc, #60]	; (8010c44 <prvAddCurrentTaskToDelayedList+0x94>)
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	3304      	adds	r3, #4
 8010c0c:	4619      	mov	r1, r3
 8010c0e:	4610      	mov	r0, r2
 8010c10:	f7fd ff4d 	bl	800eaae <vListInsert>
}
 8010c14:	e010      	b.n	8010c38 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010c16:	4b0e      	ldr	r3, [pc, #56]	; (8010c50 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010c18:	681a      	ldr	r2, [r3, #0]
 8010c1a:	4b0a      	ldr	r3, [pc, #40]	; (8010c44 <prvAddCurrentTaskToDelayedList+0x94>)
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	3304      	adds	r3, #4
 8010c20:	4619      	mov	r1, r3
 8010c22:	4610      	mov	r0, r2
 8010c24:	f7fd ff43 	bl	800eaae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010c28:	4b0a      	ldr	r3, [pc, #40]	; (8010c54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	68ba      	ldr	r2, [r7, #8]
 8010c2e:	429a      	cmp	r2, r3
 8010c30:	d202      	bcs.n	8010c38 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010c32:	4a08      	ldr	r2, [pc, #32]	; (8010c54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010c34:	68bb      	ldr	r3, [r7, #8]
 8010c36:	6013      	str	r3, [r2, #0]
}
 8010c38:	bf00      	nop
 8010c3a:	3710      	adds	r7, #16
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	bd80      	pop	{r7, pc}
 8010c40:	20001280 	.word	0x20001280
 8010c44:	20000da8 	.word	0x20000da8
 8010c48:	20001268 	.word	0x20001268
 8010c4c:	20001238 	.word	0x20001238
 8010c50:	20001234 	.word	0x20001234
 8010c54:	2000129c 	.word	0x2000129c

08010c58 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b08a      	sub	sp, #40	; 0x28
 8010c5c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010c5e:	2300      	movs	r3, #0
 8010c60:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010c62:	f000 fb07 	bl	8011274 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010c66:	4b1c      	ldr	r3, [pc, #112]	; (8010cd8 <xTimerCreateTimerTask+0x80>)
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d021      	beq.n	8010cb2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010c6e:	2300      	movs	r3, #0
 8010c70:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010c72:	2300      	movs	r3, #0
 8010c74:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010c76:	1d3a      	adds	r2, r7, #4
 8010c78:	f107 0108 	add.w	r1, r7, #8
 8010c7c:	f107 030c 	add.w	r3, r7, #12
 8010c80:	4618      	mov	r0, r3
 8010c82:	f7fd fea9 	bl	800e9d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010c86:	6879      	ldr	r1, [r7, #4]
 8010c88:	68bb      	ldr	r3, [r7, #8]
 8010c8a:	68fa      	ldr	r2, [r7, #12]
 8010c8c:	9202      	str	r2, [sp, #8]
 8010c8e:	9301      	str	r3, [sp, #4]
 8010c90:	2302      	movs	r3, #2
 8010c92:	9300      	str	r3, [sp, #0]
 8010c94:	2300      	movs	r3, #0
 8010c96:	460a      	mov	r2, r1
 8010c98:	4910      	ldr	r1, [pc, #64]	; (8010cdc <xTimerCreateTimerTask+0x84>)
 8010c9a:	4811      	ldr	r0, [pc, #68]	; (8010ce0 <xTimerCreateTimerTask+0x88>)
 8010c9c:	f7fe ff78 	bl	800fb90 <xTaskCreateStatic>
 8010ca0:	4603      	mov	r3, r0
 8010ca2:	4a10      	ldr	r2, [pc, #64]	; (8010ce4 <xTimerCreateTimerTask+0x8c>)
 8010ca4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010ca6:	4b0f      	ldr	r3, [pc, #60]	; (8010ce4 <xTimerCreateTimerTask+0x8c>)
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d001      	beq.n	8010cb2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010cae:	2301      	movs	r3, #1
 8010cb0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010cb2:	697b      	ldr	r3, [r7, #20]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d10a      	bne.n	8010cce <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cbc:	f383 8811 	msr	BASEPRI, r3
 8010cc0:	f3bf 8f6f 	isb	sy
 8010cc4:	f3bf 8f4f 	dsb	sy
 8010cc8:	613b      	str	r3, [r7, #16]
}
 8010cca:	bf00      	nop
 8010ccc:	e7fe      	b.n	8010ccc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010cce:	697b      	ldr	r3, [r7, #20]
}
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	3718      	adds	r7, #24
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	bd80      	pop	{r7, pc}
 8010cd8:	200012d8 	.word	0x200012d8
 8010cdc:	0802dc64 	.word	0x0802dc64
 8010ce0:	08010e1d 	.word	0x08010e1d
 8010ce4:	200012dc 	.word	0x200012dc

08010ce8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b08a      	sub	sp, #40	; 0x28
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	60f8      	str	r0, [r7, #12]
 8010cf0:	60b9      	str	r1, [r7, #8]
 8010cf2:	607a      	str	r2, [r7, #4]
 8010cf4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d10a      	bne.n	8010d16 <xTimerGenericCommand+0x2e>
	__asm volatile
 8010d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d04:	f383 8811 	msr	BASEPRI, r3
 8010d08:	f3bf 8f6f 	isb	sy
 8010d0c:	f3bf 8f4f 	dsb	sy
 8010d10:	623b      	str	r3, [r7, #32]
}
 8010d12:	bf00      	nop
 8010d14:	e7fe      	b.n	8010d14 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010d16:	4b1a      	ldr	r3, [pc, #104]	; (8010d80 <xTimerGenericCommand+0x98>)
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d02a      	beq.n	8010d74 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010d1e:	68bb      	ldr	r3, [r7, #8]
 8010d20:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010d2a:	68bb      	ldr	r3, [r7, #8]
 8010d2c:	2b05      	cmp	r3, #5
 8010d2e:	dc18      	bgt.n	8010d62 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010d30:	f7ff fdb4 	bl	801089c <xTaskGetSchedulerState>
 8010d34:	4603      	mov	r3, r0
 8010d36:	2b02      	cmp	r3, #2
 8010d38:	d109      	bne.n	8010d4e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010d3a:	4b11      	ldr	r3, [pc, #68]	; (8010d80 <xTimerGenericCommand+0x98>)
 8010d3c:	6818      	ldr	r0, [r3, #0]
 8010d3e:	f107 0110 	add.w	r1, r7, #16
 8010d42:	2300      	movs	r3, #0
 8010d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d46:	f7fe f8bd 	bl	800eec4 <xQueueGenericSend>
 8010d4a:	6278      	str	r0, [r7, #36]	; 0x24
 8010d4c:	e012      	b.n	8010d74 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010d4e:	4b0c      	ldr	r3, [pc, #48]	; (8010d80 <xTimerGenericCommand+0x98>)
 8010d50:	6818      	ldr	r0, [r3, #0]
 8010d52:	f107 0110 	add.w	r1, r7, #16
 8010d56:	2300      	movs	r3, #0
 8010d58:	2200      	movs	r2, #0
 8010d5a:	f7fe f8b3 	bl	800eec4 <xQueueGenericSend>
 8010d5e:	6278      	str	r0, [r7, #36]	; 0x24
 8010d60:	e008      	b.n	8010d74 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010d62:	4b07      	ldr	r3, [pc, #28]	; (8010d80 <xTimerGenericCommand+0x98>)
 8010d64:	6818      	ldr	r0, [r3, #0]
 8010d66:	f107 0110 	add.w	r1, r7, #16
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	683a      	ldr	r2, [r7, #0]
 8010d6e:	f7fe f9a7 	bl	800f0c0 <xQueueGenericSendFromISR>
 8010d72:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010d76:	4618      	mov	r0, r3
 8010d78:	3728      	adds	r7, #40	; 0x28
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	bd80      	pop	{r7, pc}
 8010d7e:	bf00      	nop
 8010d80:	200012d8 	.word	0x200012d8

08010d84 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b088      	sub	sp, #32
 8010d88:	af02      	add	r7, sp, #8
 8010d8a:	6078      	str	r0, [r7, #4]
 8010d8c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d8e:	4b22      	ldr	r3, [pc, #136]	; (8010e18 <prvProcessExpiredTimer+0x94>)
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	68db      	ldr	r3, [r3, #12]
 8010d94:	68db      	ldr	r3, [r3, #12]
 8010d96:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010d98:	697b      	ldr	r3, [r7, #20]
 8010d9a:	3304      	adds	r3, #4
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f7fd febf 	bl	800eb20 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010da2:	697b      	ldr	r3, [r7, #20]
 8010da4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010da8:	f003 0304 	and.w	r3, r3, #4
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d022      	beq.n	8010df6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010db0:	697b      	ldr	r3, [r7, #20]
 8010db2:	699a      	ldr	r2, [r3, #24]
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	18d1      	adds	r1, r2, r3
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	683a      	ldr	r2, [r7, #0]
 8010dbc:	6978      	ldr	r0, [r7, #20]
 8010dbe:	f000 f8d1 	bl	8010f64 <prvInsertTimerInActiveList>
 8010dc2:	4603      	mov	r3, r0
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d01f      	beq.n	8010e08 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010dc8:	2300      	movs	r3, #0
 8010dca:	9300      	str	r3, [sp, #0]
 8010dcc:	2300      	movs	r3, #0
 8010dce:	687a      	ldr	r2, [r7, #4]
 8010dd0:	2100      	movs	r1, #0
 8010dd2:	6978      	ldr	r0, [r7, #20]
 8010dd4:	f7ff ff88 	bl	8010ce8 <xTimerGenericCommand>
 8010dd8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010dda:	693b      	ldr	r3, [r7, #16]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d113      	bne.n	8010e08 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8010de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010de4:	f383 8811 	msr	BASEPRI, r3
 8010de8:	f3bf 8f6f 	isb	sy
 8010dec:	f3bf 8f4f 	dsb	sy
 8010df0:	60fb      	str	r3, [r7, #12]
}
 8010df2:	bf00      	nop
 8010df4:	e7fe      	b.n	8010df4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010df6:	697b      	ldr	r3, [r7, #20]
 8010df8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010dfc:	f023 0301 	bic.w	r3, r3, #1
 8010e00:	b2da      	uxtb	r2, r3
 8010e02:	697b      	ldr	r3, [r7, #20]
 8010e04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010e08:	697b      	ldr	r3, [r7, #20]
 8010e0a:	6a1b      	ldr	r3, [r3, #32]
 8010e0c:	6978      	ldr	r0, [r7, #20]
 8010e0e:	4798      	blx	r3
}
 8010e10:	bf00      	nop
 8010e12:	3718      	adds	r7, #24
 8010e14:	46bd      	mov	sp, r7
 8010e16:	bd80      	pop	{r7, pc}
 8010e18:	200012d0 	.word	0x200012d0

08010e1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	b084      	sub	sp, #16
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010e24:	f107 0308 	add.w	r3, r7, #8
 8010e28:	4618      	mov	r0, r3
 8010e2a:	f000 f857 	bl	8010edc <prvGetNextExpireTime>
 8010e2e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010e30:	68bb      	ldr	r3, [r7, #8]
 8010e32:	4619      	mov	r1, r3
 8010e34:	68f8      	ldr	r0, [r7, #12]
 8010e36:	f000 f803 	bl	8010e40 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010e3a:	f000 f8d5 	bl	8010fe8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010e3e:	e7f1      	b.n	8010e24 <prvTimerTask+0x8>

08010e40 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b084      	sub	sp, #16
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
 8010e48:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010e4a:	f7ff f901 	bl	8010050 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010e4e:	f107 0308 	add.w	r3, r7, #8
 8010e52:	4618      	mov	r0, r3
 8010e54:	f000 f866 	bl	8010f24 <prvSampleTimeNow>
 8010e58:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010e5a:	68bb      	ldr	r3, [r7, #8]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d130      	bne.n	8010ec2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010e60:	683b      	ldr	r3, [r7, #0]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d10a      	bne.n	8010e7c <prvProcessTimerOrBlockTask+0x3c>
 8010e66:	687a      	ldr	r2, [r7, #4]
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	429a      	cmp	r2, r3
 8010e6c:	d806      	bhi.n	8010e7c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010e6e:	f7ff f8fd 	bl	801006c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010e72:	68f9      	ldr	r1, [r7, #12]
 8010e74:	6878      	ldr	r0, [r7, #4]
 8010e76:	f7ff ff85 	bl	8010d84 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010e7a:	e024      	b.n	8010ec6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010e7c:	683b      	ldr	r3, [r7, #0]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d008      	beq.n	8010e94 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010e82:	4b13      	ldr	r3, [pc, #76]	; (8010ed0 <prvProcessTimerOrBlockTask+0x90>)
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d101      	bne.n	8010e90 <prvProcessTimerOrBlockTask+0x50>
 8010e8c:	2301      	movs	r3, #1
 8010e8e:	e000      	b.n	8010e92 <prvProcessTimerOrBlockTask+0x52>
 8010e90:	2300      	movs	r3, #0
 8010e92:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010e94:	4b0f      	ldr	r3, [pc, #60]	; (8010ed4 <prvProcessTimerOrBlockTask+0x94>)
 8010e96:	6818      	ldr	r0, [r3, #0]
 8010e98:	687a      	ldr	r2, [r7, #4]
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	1ad3      	subs	r3, r2, r3
 8010e9e:	683a      	ldr	r2, [r7, #0]
 8010ea0:	4619      	mov	r1, r3
 8010ea2:	f7fe fe41 	bl	800fb28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010ea6:	f7ff f8e1 	bl	801006c <xTaskResumeAll>
 8010eaa:	4603      	mov	r3, r0
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d10a      	bne.n	8010ec6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010eb0:	4b09      	ldr	r3, [pc, #36]	; (8010ed8 <prvProcessTimerOrBlockTask+0x98>)
 8010eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010eb6:	601a      	str	r2, [r3, #0]
 8010eb8:	f3bf 8f4f 	dsb	sy
 8010ebc:	f3bf 8f6f 	isb	sy
}
 8010ec0:	e001      	b.n	8010ec6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010ec2:	f7ff f8d3 	bl	801006c <xTaskResumeAll>
}
 8010ec6:	bf00      	nop
 8010ec8:	3710      	adds	r7, #16
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	bd80      	pop	{r7, pc}
 8010ece:	bf00      	nop
 8010ed0:	200012d4 	.word	0x200012d4
 8010ed4:	200012d8 	.word	0x200012d8
 8010ed8:	e000ed04 	.word	0xe000ed04

08010edc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010edc:	b480      	push	{r7}
 8010ede:	b085      	sub	sp, #20
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010ee4:	4b0e      	ldr	r3, [pc, #56]	; (8010f20 <prvGetNextExpireTime+0x44>)
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d101      	bne.n	8010ef2 <prvGetNextExpireTime+0x16>
 8010eee:	2201      	movs	r2, #1
 8010ef0:	e000      	b.n	8010ef4 <prvGetNextExpireTime+0x18>
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d105      	bne.n	8010f0c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010f00:	4b07      	ldr	r3, [pc, #28]	; (8010f20 <prvGetNextExpireTime+0x44>)
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	68db      	ldr	r3, [r3, #12]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	60fb      	str	r3, [r7, #12]
 8010f0a:	e001      	b.n	8010f10 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010f10:	68fb      	ldr	r3, [r7, #12]
}
 8010f12:	4618      	mov	r0, r3
 8010f14:	3714      	adds	r7, #20
 8010f16:	46bd      	mov	sp, r7
 8010f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1c:	4770      	bx	lr
 8010f1e:	bf00      	nop
 8010f20:	200012d0 	.word	0x200012d0

08010f24 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b084      	sub	sp, #16
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010f2c:	f7ff f93c 	bl	80101a8 <xTaskGetTickCount>
 8010f30:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010f32:	4b0b      	ldr	r3, [pc, #44]	; (8010f60 <prvSampleTimeNow+0x3c>)
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	68fa      	ldr	r2, [r7, #12]
 8010f38:	429a      	cmp	r2, r3
 8010f3a:	d205      	bcs.n	8010f48 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010f3c:	f000 f936 	bl	80111ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	2201      	movs	r2, #1
 8010f44:	601a      	str	r2, [r3, #0]
 8010f46:	e002      	b.n	8010f4e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010f4e:	4a04      	ldr	r2, [pc, #16]	; (8010f60 <prvSampleTimeNow+0x3c>)
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010f54:	68fb      	ldr	r3, [r7, #12]
}
 8010f56:	4618      	mov	r0, r3
 8010f58:	3710      	adds	r7, #16
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	bd80      	pop	{r7, pc}
 8010f5e:	bf00      	nop
 8010f60:	200012e0 	.word	0x200012e0

08010f64 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b086      	sub	sp, #24
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	60f8      	str	r0, [r7, #12]
 8010f6c:	60b9      	str	r1, [r7, #8]
 8010f6e:	607a      	str	r2, [r7, #4]
 8010f70:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010f72:	2300      	movs	r3, #0
 8010f74:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	68ba      	ldr	r2, [r7, #8]
 8010f7a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	68fa      	ldr	r2, [r7, #12]
 8010f80:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010f82:	68ba      	ldr	r2, [r7, #8]
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	429a      	cmp	r2, r3
 8010f88:	d812      	bhi.n	8010fb0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f8a:	687a      	ldr	r2, [r7, #4]
 8010f8c:	683b      	ldr	r3, [r7, #0]
 8010f8e:	1ad2      	subs	r2, r2, r3
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	699b      	ldr	r3, [r3, #24]
 8010f94:	429a      	cmp	r2, r3
 8010f96:	d302      	bcc.n	8010f9e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010f98:	2301      	movs	r3, #1
 8010f9a:	617b      	str	r3, [r7, #20]
 8010f9c:	e01b      	b.n	8010fd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010f9e:	4b10      	ldr	r3, [pc, #64]	; (8010fe0 <prvInsertTimerInActiveList+0x7c>)
 8010fa0:	681a      	ldr	r2, [r3, #0]
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	3304      	adds	r3, #4
 8010fa6:	4619      	mov	r1, r3
 8010fa8:	4610      	mov	r0, r2
 8010faa:	f7fd fd80 	bl	800eaae <vListInsert>
 8010fae:	e012      	b.n	8010fd6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010fb0:	687a      	ldr	r2, [r7, #4]
 8010fb2:	683b      	ldr	r3, [r7, #0]
 8010fb4:	429a      	cmp	r2, r3
 8010fb6:	d206      	bcs.n	8010fc6 <prvInsertTimerInActiveList+0x62>
 8010fb8:	68ba      	ldr	r2, [r7, #8]
 8010fba:	683b      	ldr	r3, [r7, #0]
 8010fbc:	429a      	cmp	r2, r3
 8010fbe:	d302      	bcc.n	8010fc6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010fc0:	2301      	movs	r3, #1
 8010fc2:	617b      	str	r3, [r7, #20]
 8010fc4:	e007      	b.n	8010fd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010fc6:	4b07      	ldr	r3, [pc, #28]	; (8010fe4 <prvInsertTimerInActiveList+0x80>)
 8010fc8:	681a      	ldr	r2, [r3, #0]
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	3304      	adds	r3, #4
 8010fce:	4619      	mov	r1, r3
 8010fd0:	4610      	mov	r0, r2
 8010fd2:	f7fd fd6c 	bl	800eaae <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010fd6:	697b      	ldr	r3, [r7, #20]
}
 8010fd8:	4618      	mov	r0, r3
 8010fda:	3718      	adds	r7, #24
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	bd80      	pop	{r7, pc}
 8010fe0:	200012d4 	.word	0x200012d4
 8010fe4:	200012d0 	.word	0x200012d0

08010fe8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b08e      	sub	sp, #56	; 0x38
 8010fec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010fee:	e0ca      	b.n	8011186 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	da18      	bge.n	8011028 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010ff6:	1d3b      	adds	r3, r7, #4
 8010ff8:	3304      	adds	r3, #4
 8010ffa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d10a      	bne.n	8011018 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8011002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011006:	f383 8811 	msr	BASEPRI, r3
 801100a:	f3bf 8f6f 	isb	sy
 801100e:	f3bf 8f4f 	dsb	sy
 8011012:	61fb      	str	r3, [r7, #28]
}
 8011014:	bf00      	nop
 8011016:	e7fe      	b.n	8011016 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801101e:	6850      	ldr	r0, [r2, #4]
 8011020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011022:	6892      	ldr	r2, [r2, #8]
 8011024:	4611      	mov	r1, r2
 8011026:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	2b00      	cmp	r3, #0
 801102c:	f2c0 80ab 	blt.w	8011186 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011036:	695b      	ldr	r3, [r3, #20]
 8011038:	2b00      	cmp	r3, #0
 801103a:	d004      	beq.n	8011046 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801103c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801103e:	3304      	adds	r3, #4
 8011040:	4618      	mov	r0, r3
 8011042:	f7fd fd6d 	bl	800eb20 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011046:	463b      	mov	r3, r7
 8011048:	4618      	mov	r0, r3
 801104a:	f7ff ff6b 	bl	8010f24 <prvSampleTimeNow>
 801104e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	2b09      	cmp	r3, #9
 8011054:	f200 8096 	bhi.w	8011184 <prvProcessReceivedCommands+0x19c>
 8011058:	a201      	add	r2, pc, #4	; (adr r2, 8011060 <prvProcessReceivedCommands+0x78>)
 801105a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801105e:	bf00      	nop
 8011060:	08011089 	.word	0x08011089
 8011064:	08011089 	.word	0x08011089
 8011068:	08011089 	.word	0x08011089
 801106c:	080110fd 	.word	0x080110fd
 8011070:	08011111 	.word	0x08011111
 8011074:	0801115b 	.word	0x0801115b
 8011078:	08011089 	.word	0x08011089
 801107c:	08011089 	.word	0x08011089
 8011080:	080110fd 	.word	0x080110fd
 8011084:	08011111 	.word	0x08011111
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801108a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801108e:	f043 0301 	orr.w	r3, r3, #1
 8011092:	b2da      	uxtb	r2, r3
 8011094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011096:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801109a:	68ba      	ldr	r2, [r7, #8]
 801109c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801109e:	699b      	ldr	r3, [r3, #24]
 80110a0:	18d1      	adds	r1, r2, r3
 80110a2:	68bb      	ldr	r3, [r7, #8]
 80110a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80110a8:	f7ff ff5c 	bl	8010f64 <prvInsertTimerInActiveList>
 80110ac:	4603      	mov	r3, r0
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d069      	beq.n	8011186 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80110b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110b4:	6a1b      	ldr	r3, [r3, #32]
 80110b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80110b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80110ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80110c0:	f003 0304 	and.w	r3, r3, #4
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d05e      	beq.n	8011186 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80110c8:	68ba      	ldr	r2, [r7, #8]
 80110ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110cc:	699b      	ldr	r3, [r3, #24]
 80110ce:	441a      	add	r2, r3
 80110d0:	2300      	movs	r3, #0
 80110d2:	9300      	str	r3, [sp, #0]
 80110d4:	2300      	movs	r3, #0
 80110d6:	2100      	movs	r1, #0
 80110d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80110da:	f7ff fe05 	bl	8010ce8 <xTimerGenericCommand>
 80110de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80110e0:	6a3b      	ldr	r3, [r7, #32]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d14f      	bne.n	8011186 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80110e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110ea:	f383 8811 	msr	BASEPRI, r3
 80110ee:	f3bf 8f6f 	isb	sy
 80110f2:	f3bf 8f4f 	dsb	sy
 80110f6:	61bb      	str	r3, [r7, #24]
}
 80110f8:	bf00      	nop
 80110fa:	e7fe      	b.n	80110fa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80110fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011102:	f023 0301 	bic.w	r3, r3, #1
 8011106:	b2da      	uxtb	r2, r3
 8011108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801110a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801110e:	e03a      	b.n	8011186 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011112:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011116:	f043 0301 	orr.w	r3, r3, #1
 801111a:	b2da      	uxtb	r2, r3
 801111c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801111e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011122:	68ba      	ldr	r2, [r7, #8]
 8011124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011126:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801112a:	699b      	ldr	r3, [r3, #24]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d10a      	bne.n	8011146 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8011130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011134:	f383 8811 	msr	BASEPRI, r3
 8011138:	f3bf 8f6f 	isb	sy
 801113c:	f3bf 8f4f 	dsb	sy
 8011140:	617b      	str	r3, [r7, #20]
}
 8011142:	bf00      	nop
 8011144:	e7fe      	b.n	8011144 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011148:	699a      	ldr	r2, [r3, #24]
 801114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801114c:	18d1      	adds	r1, r2, r3
 801114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011152:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011154:	f7ff ff06 	bl	8010f64 <prvInsertTimerInActiveList>
					break;
 8011158:	e015      	b.n	8011186 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801115a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801115c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011160:	f003 0302 	and.w	r3, r3, #2
 8011164:	2b00      	cmp	r3, #0
 8011166:	d103      	bne.n	8011170 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8011168:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801116a:	f000 fbe5 	bl	8011938 <vPortFree>
 801116e:	e00a      	b.n	8011186 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011172:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011176:	f023 0301 	bic.w	r3, r3, #1
 801117a:	b2da      	uxtb	r2, r3
 801117c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801117e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011182:	e000      	b.n	8011186 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8011184:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011186:	4b08      	ldr	r3, [pc, #32]	; (80111a8 <prvProcessReceivedCommands+0x1c0>)
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	1d39      	adds	r1, r7, #4
 801118c:	2200      	movs	r2, #0
 801118e:	4618      	mov	r0, r3
 8011190:	f7fe f8be 	bl	800f310 <xQueueReceive>
 8011194:	4603      	mov	r3, r0
 8011196:	2b00      	cmp	r3, #0
 8011198:	f47f af2a 	bne.w	8010ff0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 801119c:	bf00      	nop
 801119e:	bf00      	nop
 80111a0:	3730      	adds	r7, #48	; 0x30
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd80      	pop	{r7, pc}
 80111a6:	bf00      	nop
 80111a8:	200012d8 	.word	0x200012d8

080111ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b088      	sub	sp, #32
 80111b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80111b2:	e048      	b.n	8011246 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80111b4:	4b2d      	ldr	r3, [pc, #180]	; (801126c <prvSwitchTimerLists+0xc0>)
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	68db      	ldr	r3, [r3, #12]
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80111be:	4b2b      	ldr	r3, [pc, #172]	; (801126c <prvSwitchTimerLists+0xc0>)
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	68db      	ldr	r3, [r3, #12]
 80111c4:	68db      	ldr	r3, [r3, #12]
 80111c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	3304      	adds	r3, #4
 80111cc:	4618      	mov	r0, r3
 80111ce:	f7fd fca7 	bl	800eb20 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	6a1b      	ldr	r3, [r3, #32]
 80111d6:	68f8      	ldr	r0, [r7, #12]
 80111d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80111e0:	f003 0304 	and.w	r3, r3, #4
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d02e      	beq.n	8011246 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	699b      	ldr	r3, [r3, #24]
 80111ec:	693a      	ldr	r2, [r7, #16]
 80111ee:	4413      	add	r3, r2
 80111f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80111f2:	68ba      	ldr	r2, [r7, #8]
 80111f4:	693b      	ldr	r3, [r7, #16]
 80111f6:	429a      	cmp	r2, r3
 80111f8:	d90e      	bls.n	8011218 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	68ba      	ldr	r2, [r7, #8]
 80111fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	68fa      	ldr	r2, [r7, #12]
 8011204:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011206:	4b19      	ldr	r3, [pc, #100]	; (801126c <prvSwitchTimerLists+0xc0>)
 8011208:	681a      	ldr	r2, [r3, #0]
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	3304      	adds	r3, #4
 801120e:	4619      	mov	r1, r3
 8011210:	4610      	mov	r0, r2
 8011212:	f7fd fc4c 	bl	800eaae <vListInsert>
 8011216:	e016      	b.n	8011246 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011218:	2300      	movs	r3, #0
 801121a:	9300      	str	r3, [sp, #0]
 801121c:	2300      	movs	r3, #0
 801121e:	693a      	ldr	r2, [r7, #16]
 8011220:	2100      	movs	r1, #0
 8011222:	68f8      	ldr	r0, [r7, #12]
 8011224:	f7ff fd60 	bl	8010ce8 <xTimerGenericCommand>
 8011228:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d10a      	bne.n	8011246 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8011230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011234:	f383 8811 	msr	BASEPRI, r3
 8011238:	f3bf 8f6f 	isb	sy
 801123c:	f3bf 8f4f 	dsb	sy
 8011240:	603b      	str	r3, [r7, #0]
}
 8011242:	bf00      	nop
 8011244:	e7fe      	b.n	8011244 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011246:	4b09      	ldr	r3, [pc, #36]	; (801126c <prvSwitchTimerLists+0xc0>)
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d1b1      	bne.n	80111b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011250:	4b06      	ldr	r3, [pc, #24]	; (801126c <prvSwitchTimerLists+0xc0>)
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011256:	4b06      	ldr	r3, [pc, #24]	; (8011270 <prvSwitchTimerLists+0xc4>)
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	4a04      	ldr	r2, [pc, #16]	; (801126c <prvSwitchTimerLists+0xc0>)
 801125c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801125e:	4a04      	ldr	r2, [pc, #16]	; (8011270 <prvSwitchTimerLists+0xc4>)
 8011260:	697b      	ldr	r3, [r7, #20]
 8011262:	6013      	str	r3, [r2, #0]
}
 8011264:	bf00      	nop
 8011266:	3718      	adds	r7, #24
 8011268:	46bd      	mov	sp, r7
 801126a:	bd80      	pop	{r7, pc}
 801126c:	200012d0 	.word	0x200012d0
 8011270:	200012d4 	.word	0x200012d4

08011274 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011274:	b580      	push	{r7, lr}
 8011276:	b082      	sub	sp, #8
 8011278:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801127a:	f000 f96b 	bl	8011554 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801127e:	4b15      	ldr	r3, [pc, #84]	; (80112d4 <prvCheckForValidListAndQueue+0x60>)
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d120      	bne.n	80112c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011286:	4814      	ldr	r0, [pc, #80]	; (80112d8 <prvCheckForValidListAndQueue+0x64>)
 8011288:	f7fd fbc0 	bl	800ea0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801128c:	4813      	ldr	r0, [pc, #76]	; (80112dc <prvCheckForValidListAndQueue+0x68>)
 801128e:	f7fd fbbd 	bl	800ea0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011292:	4b13      	ldr	r3, [pc, #76]	; (80112e0 <prvCheckForValidListAndQueue+0x6c>)
 8011294:	4a10      	ldr	r2, [pc, #64]	; (80112d8 <prvCheckForValidListAndQueue+0x64>)
 8011296:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011298:	4b12      	ldr	r3, [pc, #72]	; (80112e4 <prvCheckForValidListAndQueue+0x70>)
 801129a:	4a10      	ldr	r2, [pc, #64]	; (80112dc <prvCheckForValidListAndQueue+0x68>)
 801129c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801129e:	2300      	movs	r3, #0
 80112a0:	9300      	str	r3, [sp, #0]
 80112a2:	4b11      	ldr	r3, [pc, #68]	; (80112e8 <prvCheckForValidListAndQueue+0x74>)
 80112a4:	4a11      	ldr	r2, [pc, #68]	; (80112ec <prvCheckForValidListAndQueue+0x78>)
 80112a6:	2110      	movs	r1, #16
 80112a8:	200a      	movs	r0, #10
 80112aa:	f7fd fccb 	bl	800ec44 <xQueueGenericCreateStatic>
 80112ae:	4603      	mov	r3, r0
 80112b0:	4a08      	ldr	r2, [pc, #32]	; (80112d4 <prvCheckForValidListAndQueue+0x60>)
 80112b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80112b4:	4b07      	ldr	r3, [pc, #28]	; (80112d4 <prvCheckForValidListAndQueue+0x60>)
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d005      	beq.n	80112c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80112bc:	4b05      	ldr	r3, [pc, #20]	; (80112d4 <prvCheckForValidListAndQueue+0x60>)
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	490b      	ldr	r1, [pc, #44]	; (80112f0 <prvCheckForValidListAndQueue+0x7c>)
 80112c2:	4618      	mov	r0, r3
 80112c4:	f7fe fbdc 	bl	800fa80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80112c8:	f000 f974 	bl	80115b4 <vPortExitCritical>
}
 80112cc:	bf00      	nop
 80112ce:	46bd      	mov	sp, r7
 80112d0:	bd80      	pop	{r7, pc}
 80112d2:	bf00      	nop
 80112d4:	200012d8 	.word	0x200012d8
 80112d8:	200012a8 	.word	0x200012a8
 80112dc:	200012bc 	.word	0x200012bc
 80112e0:	200012d0 	.word	0x200012d0
 80112e4:	200012d4 	.word	0x200012d4
 80112e8:	20001384 	.word	0x20001384
 80112ec:	200012e4 	.word	0x200012e4
 80112f0:	0802dc6c 	.word	0x0802dc6c

080112f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80112f4:	b480      	push	{r7}
 80112f6:	b085      	sub	sp, #20
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	60f8      	str	r0, [r7, #12]
 80112fc:	60b9      	str	r1, [r7, #8]
 80112fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	3b04      	subs	r3, #4
 8011304:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801130c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	3b04      	subs	r3, #4
 8011312:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011314:	68bb      	ldr	r3, [r7, #8]
 8011316:	f023 0201 	bic.w	r2, r3, #1
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	3b04      	subs	r3, #4
 8011322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011324:	4a0c      	ldr	r2, [pc, #48]	; (8011358 <pxPortInitialiseStack+0x64>)
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	3b14      	subs	r3, #20
 801132e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011330:	687a      	ldr	r2, [r7, #4]
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	3b04      	subs	r3, #4
 801133a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	f06f 0202 	mvn.w	r2, #2
 8011342:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	3b20      	subs	r3, #32
 8011348:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801134a:	68fb      	ldr	r3, [r7, #12]
}
 801134c:	4618      	mov	r0, r3
 801134e:	3714      	adds	r7, #20
 8011350:	46bd      	mov	sp, r7
 8011352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011356:	4770      	bx	lr
 8011358:	0801135d 	.word	0x0801135d

0801135c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801135c:	b480      	push	{r7}
 801135e:	b085      	sub	sp, #20
 8011360:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011362:	2300      	movs	r3, #0
 8011364:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011366:	4b12      	ldr	r3, [pc, #72]	; (80113b0 <prvTaskExitError+0x54>)
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801136e:	d00a      	beq.n	8011386 <prvTaskExitError+0x2a>
	__asm volatile
 8011370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011374:	f383 8811 	msr	BASEPRI, r3
 8011378:	f3bf 8f6f 	isb	sy
 801137c:	f3bf 8f4f 	dsb	sy
 8011380:	60fb      	str	r3, [r7, #12]
}
 8011382:	bf00      	nop
 8011384:	e7fe      	b.n	8011384 <prvTaskExitError+0x28>
	__asm volatile
 8011386:	f04f 0350 	mov.w	r3, #80	; 0x50
 801138a:	f383 8811 	msr	BASEPRI, r3
 801138e:	f3bf 8f6f 	isb	sy
 8011392:	f3bf 8f4f 	dsb	sy
 8011396:	60bb      	str	r3, [r7, #8]
}
 8011398:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801139a:	bf00      	nop
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d0fc      	beq.n	801139c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80113a2:	bf00      	nop
 80113a4:	bf00      	nop
 80113a6:	3714      	adds	r7, #20
 80113a8:	46bd      	mov	sp, r7
 80113aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ae:	4770      	bx	lr
 80113b0:	20000030 	.word	0x20000030
	...

080113c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80113c0:	4b07      	ldr	r3, [pc, #28]	; (80113e0 <pxCurrentTCBConst2>)
 80113c2:	6819      	ldr	r1, [r3, #0]
 80113c4:	6808      	ldr	r0, [r1, #0]
 80113c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113ca:	f380 8809 	msr	PSP, r0
 80113ce:	f3bf 8f6f 	isb	sy
 80113d2:	f04f 0000 	mov.w	r0, #0
 80113d6:	f380 8811 	msr	BASEPRI, r0
 80113da:	4770      	bx	lr
 80113dc:	f3af 8000 	nop.w

080113e0 <pxCurrentTCBConst2>:
 80113e0:	20000da8 	.word	0x20000da8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80113e4:	bf00      	nop
 80113e6:	bf00      	nop

080113e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80113e8:	4808      	ldr	r0, [pc, #32]	; (801140c <prvPortStartFirstTask+0x24>)
 80113ea:	6800      	ldr	r0, [r0, #0]
 80113ec:	6800      	ldr	r0, [r0, #0]
 80113ee:	f380 8808 	msr	MSP, r0
 80113f2:	f04f 0000 	mov.w	r0, #0
 80113f6:	f380 8814 	msr	CONTROL, r0
 80113fa:	b662      	cpsie	i
 80113fc:	b661      	cpsie	f
 80113fe:	f3bf 8f4f 	dsb	sy
 8011402:	f3bf 8f6f 	isb	sy
 8011406:	df00      	svc	0
 8011408:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801140a:	bf00      	nop
 801140c:	e000ed08 	.word	0xe000ed08

08011410 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011410:	b580      	push	{r7, lr}
 8011412:	b086      	sub	sp, #24
 8011414:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011416:	4b46      	ldr	r3, [pc, #280]	; (8011530 <xPortStartScheduler+0x120>)
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	4a46      	ldr	r2, [pc, #280]	; (8011534 <xPortStartScheduler+0x124>)
 801141c:	4293      	cmp	r3, r2
 801141e:	d10a      	bne.n	8011436 <xPortStartScheduler+0x26>
	__asm volatile
 8011420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011424:	f383 8811 	msr	BASEPRI, r3
 8011428:	f3bf 8f6f 	isb	sy
 801142c:	f3bf 8f4f 	dsb	sy
 8011430:	613b      	str	r3, [r7, #16]
}
 8011432:	bf00      	nop
 8011434:	e7fe      	b.n	8011434 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011436:	4b3e      	ldr	r3, [pc, #248]	; (8011530 <xPortStartScheduler+0x120>)
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	4a3f      	ldr	r2, [pc, #252]	; (8011538 <xPortStartScheduler+0x128>)
 801143c:	4293      	cmp	r3, r2
 801143e:	d10a      	bne.n	8011456 <xPortStartScheduler+0x46>
	__asm volatile
 8011440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011444:	f383 8811 	msr	BASEPRI, r3
 8011448:	f3bf 8f6f 	isb	sy
 801144c:	f3bf 8f4f 	dsb	sy
 8011450:	60fb      	str	r3, [r7, #12]
}
 8011452:	bf00      	nop
 8011454:	e7fe      	b.n	8011454 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011456:	4b39      	ldr	r3, [pc, #228]	; (801153c <xPortStartScheduler+0x12c>)
 8011458:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801145a:	697b      	ldr	r3, [r7, #20]
 801145c:	781b      	ldrb	r3, [r3, #0]
 801145e:	b2db      	uxtb	r3, r3
 8011460:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011462:	697b      	ldr	r3, [r7, #20]
 8011464:	22ff      	movs	r2, #255	; 0xff
 8011466:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011468:	697b      	ldr	r3, [r7, #20]
 801146a:	781b      	ldrb	r3, [r3, #0]
 801146c:	b2db      	uxtb	r3, r3
 801146e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011470:	78fb      	ldrb	r3, [r7, #3]
 8011472:	b2db      	uxtb	r3, r3
 8011474:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011478:	b2da      	uxtb	r2, r3
 801147a:	4b31      	ldr	r3, [pc, #196]	; (8011540 <xPortStartScheduler+0x130>)
 801147c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801147e:	4b31      	ldr	r3, [pc, #196]	; (8011544 <xPortStartScheduler+0x134>)
 8011480:	2207      	movs	r2, #7
 8011482:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011484:	e009      	b.n	801149a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8011486:	4b2f      	ldr	r3, [pc, #188]	; (8011544 <xPortStartScheduler+0x134>)
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	3b01      	subs	r3, #1
 801148c:	4a2d      	ldr	r2, [pc, #180]	; (8011544 <xPortStartScheduler+0x134>)
 801148e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011490:	78fb      	ldrb	r3, [r7, #3]
 8011492:	b2db      	uxtb	r3, r3
 8011494:	005b      	lsls	r3, r3, #1
 8011496:	b2db      	uxtb	r3, r3
 8011498:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801149a:	78fb      	ldrb	r3, [r7, #3]
 801149c:	b2db      	uxtb	r3, r3
 801149e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80114a2:	2b80      	cmp	r3, #128	; 0x80
 80114a4:	d0ef      	beq.n	8011486 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80114a6:	4b27      	ldr	r3, [pc, #156]	; (8011544 <xPortStartScheduler+0x134>)
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	f1c3 0307 	rsb	r3, r3, #7
 80114ae:	2b04      	cmp	r3, #4
 80114b0:	d00a      	beq.n	80114c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80114b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114b6:	f383 8811 	msr	BASEPRI, r3
 80114ba:	f3bf 8f6f 	isb	sy
 80114be:	f3bf 8f4f 	dsb	sy
 80114c2:	60bb      	str	r3, [r7, #8]
}
 80114c4:	bf00      	nop
 80114c6:	e7fe      	b.n	80114c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80114c8:	4b1e      	ldr	r3, [pc, #120]	; (8011544 <xPortStartScheduler+0x134>)
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	021b      	lsls	r3, r3, #8
 80114ce:	4a1d      	ldr	r2, [pc, #116]	; (8011544 <xPortStartScheduler+0x134>)
 80114d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80114d2:	4b1c      	ldr	r3, [pc, #112]	; (8011544 <xPortStartScheduler+0x134>)
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80114da:	4a1a      	ldr	r2, [pc, #104]	; (8011544 <xPortStartScheduler+0x134>)
 80114dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	b2da      	uxtb	r2, r3
 80114e2:	697b      	ldr	r3, [r7, #20]
 80114e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80114e6:	4b18      	ldr	r3, [pc, #96]	; (8011548 <xPortStartScheduler+0x138>)
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	4a17      	ldr	r2, [pc, #92]	; (8011548 <xPortStartScheduler+0x138>)
 80114ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80114f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80114f2:	4b15      	ldr	r3, [pc, #84]	; (8011548 <xPortStartScheduler+0x138>)
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	4a14      	ldr	r2, [pc, #80]	; (8011548 <xPortStartScheduler+0x138>)
 80114f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80114fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80114fe:	f000 f8dd 	bl	80116bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011502:	4b12      	ldr	r3, [pc, #72]	; (801154c <xPortStartScheduler+0x13c>)
 8011504:	2200      	movs	r2, #0
 8011506:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011508:	f000 f8fc 	bl	8011704 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801150c:	4b10      	ldr	r3, [pc, #64]	; (8011550 <xPortStartScheduler+0x140>)
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	4a0f      	ldr	r2, [pc, #60]	; (8011550 <xPortStartScheduler+0x140>)
 8011512:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011516:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011518:	f7ff ff66 	bl	80113e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801151c:	f7fe ff20 	bl	8010360 <vTaskSwitchContext>
	prvTaskExitError();
 8011520:	f7ff ff1c 	bl	801135c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011524:	2300      	movs	r3, #0
}
 8011526:	4618      	mov	r0, r3
 8011528:	3718      	adds	r7, #24
 801152a:	46bd      	mov	sp, r7
 801152c:	bd80      	pop	{r7, pc}
 801152e:	bf00      	nop
 8011530:	e000ed00 	.word	0xe000ed00
 8011534:	410fc271 	.word	0x410fc271
 8011538:	410fc270 	.word	0x410fc270
 801153c:	e000e400 	.word	0xe000e400
 8011540:	200013d4 	.word	0x200013d4
 8011544:	200013d8 	.word	0x200013d8
 8011548:	e000ed20 	.word	0xe000ed20
 801154c:	20000030 	.word	0x20000030
 8011550:	e000ef34 	.word	0xe000ef34

08011554 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011554:	b480      	push	{r7}
 8011556:	b083      	sub	sp, #12
 8011558:	af00      	add	r7, sp, #0
	__asm volatile
 801155a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801155e:	f383 8811 	msr	BASEPRI, r3
 8011562:	f3bf 8f6f 	isb	sy
 8011566:	f3bf 8f4f 	dsb	sy
 801156a:	607b      	str	r3, [r7, #4]
}
 801156c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801156e:	4b0f      	ldr	r3, [pc, #60]	; (80115ac <vPortEnterCritical+0x58>)
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	3301      	adds	r3, #1
 8011574:	4a0d      	ldr	r2, [pc, #52]	; (80115ac <vPortEnterCritical+0x58>)
 8011576:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011578:	4b0c      	ldr	r3, [pc, #48]	; (80115ac <vPortEnterCritical+0x58>)
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	2b01      	cmp	r3, #1
 801157e:	d10f      	bne.n	80115a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011580:	4b0b      	ldr	r3, [pc, #44]	; (80115b0 <vPortEnterCritical+0x5c>)
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	b2db      	uxtb	r3, r3
 8011586:	2b00      	cmp	r3, #0
 8011588:	d00a      	beq.n	80115a0 <vPortEnterCritical+0x4c>
	__asm volatile
 801158a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801158e:	f383 8811 	msr	BASEPRI, r3
 8011592:	f3bf 8f6f 	isb	sy
 8011596:	f3bf 8f4f 	dsb	sy
 801159a:	603b      	str	r3, [r7, #0]
}
 801159c:	bf00      	nop
 801159e:	e7fe      	b.n	801159e <vPortEnterCritical+0x4a>
	}
}
 80115a0:	bf00      	nop
 80115a2:	370c      	adds	r7, #12
 80115a4:	46bd      	mov	sp, r7
 80115a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115aa:	4770      	bx	lr
 80115ac:	20000030 	.word	0x20000030
 80115b0:	e000ed04 	.word	0xe000ed04

080115b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80115b4:	b480      	push	{r7}
 80115b6:	b083      	sub	sp, #12
 80115b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80115ba:	4b12      	ldr	r3, [pc, #72]	; (8011604 <vPortExitCritical+0x50>)
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d10a      	bne.n	80115d8 <vPortExitCritical+0x24>
	__asm volatile
 80115c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115c6:	f383 8811 	msr	BASEPRI, r3
 80115ca:	f3bf 8f6f 	isb	sy
 80115ce:	f3bf 8f4f 	dsb	sy
 80115d2:	607b      	str	r3, [r7, #4]
}
 80115d4:	bf00      	nop
 80115d6:	e7fe      	b.n	80115d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80115d8:	4b0a      	ldr	r3, [pc, #40]	; (8011604 <vPortExitCritical+0x50>)
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	3b01      	subs	r3, #1
 80115de:	4a09      	ldr	r2, [pc, #36]	; (8011604 <vPortExitCritical+0x50>)
 80115e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80115e2:	4b08      	ldr	r3, [pc, #32]	; (8011604 <vPortExitCritical+0x50>)
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d105      	bne.n	80115f6 <vPortExitCritical+0x42>
 80115ea:	2300      	movs	r3, #0
 80115ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80115ee:	683b      	ldr	r3, [r7, #0]
 80115f0:	f383 8811 	msr	BASEPRI, r3
}
 80115f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80115f6:	bf00      	nop
 80115f8:	370c      	adds	r7, #12
 80115fa:	46bd      	mov	sp, r7
 80115fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011600:	4770      	bx	lr
 8011602:	bf00      	nop
 8011604:	20000030 	.word	0x20000030
	...

08011610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011610:	f3ef 8009 	mrs	r0, PSP
 8011614:	f3bf 8f6f 	isb	sy
 8011618:	4b15      	ldr	r3, [pc, #84]	; (8011670 <pxCurrentTCBConst>)
 801161a:	681a      	ldr	r2, [r3, #0]
 801161c:	f01e 0f10 	tst.w	lr, #16
 8011620:	bf08      	it	eq
 8011622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801162a:	6010      	str	r0, [r2, #0]
 801162c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011630:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011634:	f380 8811 	msr	BASEPRI, r0
 8011638:	f3bf 8f4f 	dsb	sy
 801163c:	f3bf 8f6f 	isb	sy
 8011640:	f7fe fe8e 	bl	8010360 <vTaskSwitchContext>
 8011644:	f04f 0000 	mov.w	r0, #0
 8011648:	f380 8811 	msr	BASEPRI, r0
 801164c:	bc09      	pop	{r0, r3}
 801164e:	6819      	ldr	r1, [r3, #0]
 8011650:	6808      	ldr	r0, [r1, #0]
 8011652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011656:	f01e 0f10 	tst.w	lr, #16
 801165a:	bf08      	it	eq
 801165c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011660:	f380 8809 	msr	PSP, r0
 8011664:	f3bf 8f6f 	isb	sy
 8011668:	4770      	bx	lr
 801166a:	bf00      	nop
 801166c:	f3af 8000 	nop.w

08011670 <pxCurrentTCBConst>:
 8011670:	20000da8 	.word	0x20000da8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011674:	bf00      	nop
 8011676:	bf00      	nop

08011678 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011678:	b580      	push	{r7, lr}
 801167a:	b082      	sub	sp, #8
 801167c:	af00      	add	r7, sp, #0
	__asm volatile
 801167e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011682:	f383 8811 	msr	BASEPRI, r3
 8011686:	f3bf 8f6f 	isb	sy
 801168a:	f3bf 8f4f 	dsb	sy
 801168e:	607b      	str	r3, [r7, #4]
}
 8011690:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011692:	f7fe fdab 	bl	80101ec <xTaskIncrementTick>
 8011696:	4603      	mov	r3, r0
 8011698:	2b00      	cmp	r3, #0
 801169a:	d003      	beq.n	80116a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801169c:	4b06      	ldr	r3, [pc, #24]	; (80116b8 <xPortSysTickHandler+0x40>)
 801169e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116a2:	601a      	str	r2, [r3, #0]
 80116a4:	2300      	movs	r3, #0
 80116a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80116a8:	683b      	ldr	r3, [r7, #0]
 80116aa:	f383 8811 	msr	BASEPRI, r3
}
 80116ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80116b0:	bf00      	nop
 80116b2:	3708      	adds	r7, #8
 80116b4:	46bd      	mov	sp, r7
 80116b6:	bd80      	pop	{r7, pc}
 80116b8:	e000ed04 	.word	0xe000ed04

080116bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80116bc:	b480      	push	{r7}
 80116be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80116c0:	4b0b      	ldr	r3, [pc, #44]	; (80116f0 <vPortSetupTimerInterrupt+0x34>)
 80116c2:	2200      	movs	r2, #0
 80116c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80116c6:	4b0b      	ldr	r3, [pc, #44]	; (80116f4 <vPortSetupTimerInterrupt+0x38>)
 80116c8:	2200      	movs	r2, #0
 80116ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80116cc:	4b0a      	ldr	r3, [pc, #40]	; (80116f8 <vPortSetupTimerInterrupt+0x3c>)
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	4a0a      	ldr	r2, [pc, #40]	; (80116fc <vPortSetupTimerInterrupt+0x40>)
 80116d2:	fba2 2303 	umull	r2, r3, r2, r3
 80116d6:	099b      	lsrs	r3, r3, #6
 80116d8:	4a09      	ldr	r2, [pc, #36]	; (8011700 <vPortSetupTimerInterrupt+0x44>)
 80116da:	3b01      	subs	r3, #1
 80116dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80116de:	4b04      	ldr	r3, [pc, #16]	; (80116f0 <vPortSetupTimerInterrupt+0x34>)
 80116e0:	2207      	movs	r2, #7
 80116e2:	601a      	str	r2, [r3, #0]
}
 80116e4:	bf00      	nop
 80116e6:	46bd      	mov	sp, r7
 80116e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ec:	4770      	bx	lr
 80116ee:	bf00      	nop
 80116f0:	e000e010 	.word	0xe000e010
 80116f4:	e000e018 	.word	0xe000e018
 80116f8:	20000004 	.word	0x20000004
 80116fc:	10624dd3 	.word	0x10624dd3
 8011700:	e000e014 	.word	0xe000e014

08011704 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011704:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011714 <vPortEnableVFP+0x10>
 8011708:	6801      	ldr	r1, [r0, #0]
 801170a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801170e:	6001      	str	r1, [r0, #0]
 8011710:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011712:	bf00      	nop
 8011714:	e000ed88 	.word	0xe000ed88

08011718 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011718:	b480      	push	{r7}
 801171a:	b085      	sub	sp, #20
 801171c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801171e:	f3ef 8305 	mrs	r3, IPSR
 8011722:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	2b0f      	cmp	r3, #15
 8011728:	d914      	bls.n	8011754 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801172a:	4a17      	ldr	r2, [pc, #92]	; (8011788 <vPortValidateInterruptPriority+0x70>)
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	4413      	add	r3, r2
 8011730:	781b      	ldrb	r3, [r3, #0]
 8011732:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011734:	4b15      	ldr	r3, [pc, #84]	; (801178c <vPortValidateInterruptPriority+0x74>)
 8011736:	781b      	ldrb	r3, [r3, #0]
 8011738:	7afa      	ldrb	r2, [r7, #11]
 801173a:	429a      	cmp	r2, r3
 801173c:	d20a      	bcs.n	8011754 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801173e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011742:	f383 8811 	msr	BASEPRI, r3
 8011746:	f3bf 8f6f 	isb	sy
 801174a:	f3bf 8f4f 	dsb	sy
 801174e:	607b      	str	r3, [r7, #4]
}
 8011750:	bf00      	nop
 8011752:	e7fe      	b.n	8011752 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011754:	4b0e      	ldr	r3, [pc, #56]	; (8011790 <vPortValidateInterruptPriority+0x78>)
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801175c:	4b0d      	ldr	r3, [pc, #52]	; (8011794 <vPortValidateInterruptPriority+0x7c>)
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	429a      	cmp	r2, r3
 8011762:	d90a      	bls.n	801177a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011768:	f383 8811 	msr	BASEPRI, r3
 801176c:	f3bf 8f6f 	isb	sy
 8011770:	f3bf 8f4f 	dsb	sy
 8011774:	603b      	str	r3, [r7, #0]
}
 8011776:	bf00      	nop
 8011778:	e7fe      	b.n	8011778 <vPortValidateInterruptPriority+0x60>
	}
 801177a:	bf00      	nop
 801177c:	3714      	adds	r7, #20
 801177e:	46bd      	mov	sp, r7
 8011780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011784:	4770      	bx	lr
 8011786:	bf00      	nop
 8011788:	e000e3f0 	.word	0xe000e3f0
 801178c:	200013d4 	.word	0x200013d4
 8011790:	e000ed0c 	.word	0xe000ed0c
 8011794:	200013d8 	.word	0x200013d8

08011798 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011798:	b580      	push	{r7, lr}
 801179a:	b08a      	sub	sp, #40	; 0x28
 801179c:	af00      	add	r7, sp, #0
 801179e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80117a0:	2300      	movs	r3, #0
 80117a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80117a4:	f7fe fc54 	bl	8010050 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80117a8:	4b5d      	ldr	r3, [pc, #372]	; (8011920 <pvPortMalloc+0x188>)
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d101      	bne.n	80117b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80117b0:	f000 f924 	bl	80119fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80117b4:	4b5b      	ldr	r3, [pc, #364]	; (8011924 <pvPortMalloc+0x18c>)
 80117b6:	681a      	ldr	r2, [r3, #0]
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	4013      	ands	r3, r2
 80117bc:	2b00      	cmp	r3, #0
 80117be:	f040 8093 	bne.w	80118e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d01d      	beq.n	8011804 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80117c8:	2208      	movs	r2, #8
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	4413      	add	r3, r2
 80117ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	f003 0307 	and.w	r3, r3, #7
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d014      	beq.n	8011804 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	f023 0307 	bic.w	r3, r3, #7
 80117e0:	3308      	adds	r3, #8
 80117e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	f003 0307 	and.w	r3, r3, #7
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d00a      	beq.n	8011804 <pvPortMalloc+0x6c>
	__asm volatile
 80117ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117f2:	f383 8811 	msr	BASEPRI, r3
 80117f6:	f3bf 8f6f 	isb	sy
 80117fa:	f3bf 8f4f 	dsb	sy
 80117fe:	617b      	str	r3, [r7, #20]
}
 8011800:	bf00      	nop
 8011802:	e7fe      	b.n	8011802 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d06e      	beq.n	80118e8 <pvPortMalloc+0x150>
 801180a:	4b47      	ldr	r3, [pc, #284]	; (8011928 <pvPortMalloc+0x190>)
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	687a      	ldr	r2, [r7, #4]
 8011810:	429a      	cmp	r2, r3
 8011812:	d869      	bhi.n	80118e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011814:	4b45      	ldr	r3, [pc, #276]	; (801192c <pvPortMalloc+0x194>)
 8011816:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011818:	4b44      	ldr	r3, [pc, #272]	; (801192c <pvPortMalloc+0x194>)
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801181e:	e004      	b.n	801182a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011822:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801182c:	685b      	ldr	r3, [r3, #4]
 801182e:	687a      	ldr	r2, [r7, #4]
 8011830:	429a      	cmp	r2, r3
 8011832:	d903      	bls.n	801183c <pvPortMalloc+0xa4>
 8011834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d1f1      	bne.n	8011820 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801183c:	4b38      	ldr	r3, [pc, #224]	; (8011920 <pvPortMalloc+0x188>)
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011842:	429a      	cmp	r2, r3
 8011844:	d050      	beq.n	80118e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011846:	6a3b      	ldr	r3, [r7, #32]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	2208      	movs	r2, #8
 801184c:	4413      	add	r3, r2
 801184e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011852:	681a      	ldr	r2, [r3, #0]
 8011854:	6a3b      	ldr	r3, [r7, #32]
 8011856:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801185a:	685a      	ldr	r2, [r3, #4]
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	1ad2      	subs	r2, r2, r3
 8011860:	2308      	movs	r3, #8
 8011862:	005b      	lsls	r3, r3, #1
 8011864:	429a      	cmp	r2, r3
 8011866:	d91f      	bls.n	80118a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	4413      	add	r3, r2
 801186e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011870:	69bb      	ldr	r3, [r7, #24]
 8011872:	f003 0307 	and.w	r3, r3, #7
 8011876:	2b00      	cmp	r3, #0
 8011878:	d00a      	beq.n	8011890 <pvPortMalloc+0xf8>
	__asm volatile
 801187a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801187e:	f383 8811 	msr	BASEPRI, r3
 8011882:	f3bf 8f6f 	isb	sy
 8011886:	f3bf 8f4f 	dsb	sy
 801188a:	613b      	str	r3, [r7, #16]
}
 801188c:	bf00      	nop
 801188e:	e7fe      	b.n	801188e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011892:	685a      	ldr	r2, [r3, #4]
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	1ad2      	subs	r2, r2, r3
 8011898:	69bb      	ldr	r3, [r7, #24]
 801189a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801189e:	687a      	ldr	r2, [r7, #4]
 80118a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80118a2:	69b8      	ldr	r0, [r7, #24]
 80118a4:	f000 f90c 	bl	8011ac0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80118a8:	4b1f      	ldr	r3, [pc, #124]	; (8011928 <pvPortMalloc+0x190>)
 80118aa:	681a      	ldr	r2, [r3, #0]
 80118ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118ae:	685b      	ldr	r3, [r3, #4]
 80118b0:	1ad3      	subs	r3, r2, r3
 80118b2:	4a1d      	ldr	r2, [pc, #116]	; (8011928 <pvPortMalloc+0x190>)
 80118b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80118b6:	4b1c      	ldr	r3, [pc, #112]	; (8011928 <pvPortMalloc+0x190>)
 80118b8:	681a      	ldr	r2, [r3, #0]
 80118ba:	4b1d      	ldr	r3, [pc, #116]	; (8011930 <pvPortMalloc+0x198>)
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	429a      	cmp	r2, r3
 80118c0:	d203      	bcs.n	80118ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80118c2:	4b19      	ldr	r3, [pc, #100]	; (8011928 <pvPortMalloc+0x190>)
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	4a1a      	ldr	r2, [pc, #104]	; (8011930 <pvPortMalloc+0x198>)
 80118c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80118ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118cc:	685a      	ldr	r2, [r3, #4]
 80118ce:	4b15      	ldr	r3, [pc, #84]	; (8011924 <pvPortMalloc+0x18c>)
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	431a      	orrs	r2, r3
 80118d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80118d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118da:	2200      	movs	r2, #0
 80118dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80118de:	4b15      	ldr	r3, [pc, #84]	; (8011934 <pvPortMalloc+0x19c>)
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	3301      	adds	r3, #1
 80118e4:	4a13      	ldr	r2, [pc, #76]	; (8011934 <pvPortMalloc+0x19c>)
 80118e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80118e8:	f7fe fbc0 	bl	801006c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80118ec:	69fb      	ldr	r3, [r7, #28]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d101      	bne.n	80118f6 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80118f2:	f7ee fe65 	bl	80005c0 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80118f6:	69fb      	ldr	r3, [r7, #28]
 80118f8:	f003 0307 	and.w	r3, r3, #7
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d00a      	beq.n	8011916 <pvPortMalloc+0x17e>
	__asm volatile
 8011900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011904:	f383 8811 	msr	BASEPRI, r3
 8011908:	f3bf 8f6f 	isb	sy
 801190c:	f3bf 8f4f 	dsb	sy
 8011910:	60fb      	str	r3, [r7, #12]
}
 8011912:	bf00      	nop
 8011914:	e7fe      	b.n	8011914 <pvPortMalloc+0x17c>
	return pvReturn;
 8011916:	69fb      	ldr	r3, [r7, #28]
}
 8011918:	4618      	mov	r0, r3
 801191a:	3728      	adds	r7, #40	; 0x28
 801191c:	46bd      	mov	sp, r7
 801191e:	bd80      	pop	{r7, pc}
 8011920:	200093e4 	.word	0x200093e4
 8011924:	200093f8 	.word	0x200093f8
 8011928:	200093e8 	.word	0x200093e8
 801192c:	200093dc 	.word	0x200093dc
 8011930:	200093ec 	.word	0x200093ec
 8011934:	200093f0 	.word	0x200093f0

08011938 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b086      	sub	sp, #24
 801193c:	af00      	add	r7, sp, #0
 801193e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d04d      	beq.n	80119e6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801194a:	2308      	movs	r3, #8
 801194c:	425b      	negs	r3, r3
 801194e:	697a      	ldr	r2, [r7, #20]
 8011950:	4413      	add	r3, r2
 8011952:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011954:	697b      	ldr	r3, [r7, #20]
 8011956:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011958:	693b      	ldr	r3, [r7, #16]
 801195a:	685a      	ldr	r2, [r3, #4]
 801195c:	4b24      	ldr	r3, [pc, #144]	; (80119f0 <vPortFree+0xb8>)
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	4013      	ands	r3, r2
 8011962:	2b00      	cmp	r3, #0
 8011964:	d10a      	bne.n	801197c <vPortFree+0x44>
	__asm volatile
 8011966:	f04f 0350 	mov.w	r3, #80	; 0x50
 801196a:	f383 8811 	msr	BASEPRI, r3
 801196e:	f3bf 8f6f 	isb	sy
 8011972:	f3bf 8f4f 	dsb	sy
 8011976:	60fb      	str	r3, [r7, #12]
}
 8011978:	bf00      	nop
 801197a:	e7fe      	b.n	801197a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801197c:	693b      	ldr	r3, [r7, #16]
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	2b00      	cmp	r3, #0
 8011982:	d00a      	beq.n	801199a <vPortFree+0x62>
	__asm volatile
 8011984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011988:	f383 8811 	msr	BASEPRI, r3
 801198c:	f3bf 8f6f 	isb	sy
 8011990:	f3bf 8f4f 	dsb	sy
 8011994:	60bb      	str	r3, [r7, #8]
}
 8011996:	bf00      	nop
 8011998:	e7fe      	b.n	8011998 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801199a:	693b      	ldr	r3, [r7, #16]
 801199c:	685a      	ldr	r2, [r3, #4]
 801199e:	4b14      	ldr	r3, [pc, #80]	; (80119f0 <vPortFree+0xb8>)
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	4013      	ands	r3, r2
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d01e      	beq.n	80119e6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80119a8:	693b      	ldr	r3, [r7, #16]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d11a      	bne.n	80119e6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80119b0:	693b      	ldr	r3, [r7, #16]
 80119b2:	685a      	ldr	r2, [r3, #4]
 80119b4:	4b0e      	ldr	r3, [pc, #56]	; (80119f0 <vPortFree+0xb8>)
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	43db      	mvns	r3, r3
 80119ba:	401a      	ands	r2, r3
 80119bc:	693b      	ldr	r3, [r7, #16]
 80119be:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80119c0:	f7fe fb46 	bl	8010050 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80119c4:	693b      	ldr	r3, [r7, #16]
 80119c6:	685a      	ldr	r2, [r3, #4]
 80119c8:	4b0a      	ldr	r3, [pc, #40]	; (80119f4 <vPortFree+0xbc>)
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	4413      	add	r3, r2
 80119ce:	4a09      	ldr	r2, [pc, #36]	; (80119f4 <vPortFree+0xbc>)
 80119d0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80119d2:	6938      	ldr	r0, [r7, #16]
 80119d4:	f000 f874 	bl	8011ac0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80119d8:	4b07      	ldr	r3, [pc, #28]	; (80119f8 <vPortFree+0xc0>)
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	3301      	adds	r3, #1
 80119de:	4a06      	ldr	r2, [pc, #24]	; (80119f8 <vPortFree+0xc0>)
 80119e0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80119e2:	f7fe fb43 	bl	801006c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80119e6:	bf00      	nop
 80119e8:	3718      	adds	r7, #24
 80119ea:	46bd      	mov	sp, r7
 80119ec:	bd80      	pop	{r7, pc}
 80119ee:	bf00      	nop
 80119f0:	200093f8 	.word	0x200093f8
 80119f4:	200093e8 	.word	0x200093e8
 80119f8:	200093f4 	.word	0x200093f4

080119fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80119fc:	b480      	push	{r7}
 80119fe:	b085      	sub	sp, #20
 8011a00:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011a06:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011a08:	4b27      	ldr	r3, [pc, #156]	; (8011aa8 <prvHeapInit+0xac>)
 8011a0a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	f003 0307 	and.w	r3, r3, #7
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d00c      	beq.n	8011a30 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	3307      	adds	r3, #7
 8011a1a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	f023 0307 	bic.w	r3, r3, #7
 8011a22:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011a24:	68ba      	ldr	r2, [r7, #8]
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	1ad3      	subs	r3, r2, r3
 8011a2a:	4a1f      	ldr	r2, [pc, #124]	; (8011aa8 <prvHeapInit+0xac>)
 8011a2c:	4413      	add	r3, r2
 8011a2e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011a34:	4a1d      	ldr	r2, [pc, #116]	; (8011aac <prvHeapInit+0xb0>)
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011a3a:	4b1c      	ldr	r3, [pc, #112]	; (8011aac <prvHeapInit+0xb0>)
 8011a3c:	2200      	movs	r2, #0
 8011a3e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	68ba      	ldr	r2, [r7, #8]
 8011a44:	4413      	add	r3, r2
 8011a46:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011a48:	2208      	movs	r2, #8
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	1a9b      	subs	r3, r3, r2
 8011a4e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	f023 0307 	bic.w	r3, r3, #7
 8011a56:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	4a15      	ldr	r2, [pc, #84]	; (8011ab0 <prvHeapInit+0xb4>)
 8011a5c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011a5e:	4b14      	ldr	r3, [pc, #80]	; (8011ab0 <prvHeapInit+0xb4>)
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	2200      	movs	r2, #0
 8011a64:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011a66:	4b12      	ldr	r3, [pc, #72]	; (8011ab0 <prvHeapInit+0xb4>)
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011a72:	683b      	ldr	r3, [r7, #0]
 8011a74:	68fa      	ldr	r2, [r7, #12]
 8011a76:	1ad2      	subs	r2, r2, r3
 8011a78:	683b      	ldr	r3, [r7, #0]
 8011a7a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011a7c:	4b0c      	ldr	r3, [pc, #48]	; (8011ab0 <prvHeapInit+0xb4>)
 8011a7e:	681a      	ldr	r2, [r3, #0]
 8011a80:	683b      	ldr	r3, [r7, #0]
 8011a82:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011a84:	683b      	ldr	r3, [r7, #0]
 8011a86:	685b      	ldr	r3, [r3, #4]
 8011a88:	4a0a      	ldr	r2, [pc, #40]	; (8011ab4 <prvHeapInit+0xb8>)
 8011a8a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011a8c:	683b      	ldr	r3, [r7, #0]
 8011a8e:	685b      	ldr	r3, [r3, #4]
 8011a90:	4a09      	ldr	r2, [pc, #36]	; (8011ab8 <prvHeapInit+0xbc>)
 8011a92:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011a94:	4b09      	ldr	r3, [pc, #36]	; (8011abc <prvHeapInit+0xc0>)
 8011a96:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011a9a:	601a      	str	r2, [r3, #0]
}
 8011a9c:	bf00      	nop
 8011a9e:	3714      	adds	r7, #20
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa6:	4770      	bx	lr
 8011aa8:	200013dc 	.word	0x200013dc
 8011aac:	200093dc 	.word	0x200093dc
 8011ab0:	200093e4 	.word	0x200093e4
 8011ab4:	200093ec 	.word	0x200093ec
 8011ab8:	200093e8 	.word	0x200093e8
 8011abc:	200093f8 	.word	0x200093f8

08011ac0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011ac0:	b480      	push	{r7}
 8011ac2:	b085      	sub	sp, #20
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011ac8:	4b28      	ldr	r3, [pc, #160]	; (8011b6c <prvInsertBlockIntoFreeList+0xac>)
 8011aca:	60fb      	str	r3, [r7, #12]
 8011acc:	e002      	b.n	8011ad4 <prvInsertBlockIntoFreeList+0x14>
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	60fb      	str	r3, [r7, #12]
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	687a      	ldr	r2, [r7, #4]
 8011ada:	429a      	cmp	r2, r3
 8011adc:	d8f7      	bhi.n	8011ace <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	685b      	ldr	r3, [r3, #4]
 8011ae6:	68ba      	ldr	r2, [r7, #8]
 8011ae8:	4413      	add	r3, r2
 8011aea:	687a      	ldr	r2, [r7, #4]
 8011aec:	429a      	cmp	r2, r3
 8011aee:	d108      	bne.n	8011b02 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	685a      	ldr	r2, [r3, #4]
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	685b      	ldr	r3, [r3, #4]
 8011af8:	441a      	add	r2, r3
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	685b      	ldr	r3, [r3, #4]
 8011b0a:	68ba      	ldr	r2, [r7, #8]
 8011b0c:	441a      	add	r2, r3
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	429a      	cmp	r2, r3
 8011b14:	d118      	bne.n	8011b48 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	681a      	ldr	r2, [r3, #0]
 8011b1a:	4b15      	ldr	r3, [pc, #84]	; (8011b70 <prvInsertBlockIntoFreeList+0xb0>)
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	429a      	cmp	r2, r3
 8011b20:	d00d      	beq.n	8011b3e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	685a      	ldr	r2, [r3, #4]
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	685b      	ldr	r3, [r3, #4]
 8011b2c:	441a      	add	r2, r3
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	681a      	ldr	r2, [r3, #0]
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	601a      	str	r2, [r3, #0]
 8011b3c:	e008      	b.n	8011b50 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011b3e:	4b0c      	ldr	r3, [pc, #48]	; (8011b70 <prvInsertBlockIntoFreeList+0xb0>)
 8011b40:	681a      	ldr	r2, [r3, #0]
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	601a      	str	r2, [r3, #0]
 8011b46:	e003      	b.n	8011b50 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	681a      	ldr	r2, [r3, #0]
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011b50:	68fa      	ldr	r2, [r7, #12]
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	429a      	cmp	r2, r3
 8011b56:	d002      	beq.n	8011b5e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	687a      	ldr	r2, [r7, #4]
 8011b5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011b5e:	bf00      	nop
 8011b60:	3714      	adds	r7, #20
 8011b62:	46bd      	mov	sp, r7
 8011b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b68:	4770      	bx	lr
 8011b6a:	bf00      	nop
 8011b6c:	200093dc 	.word	0x200093dc
 8011b70:	200093e4 	.word	0x200093e4

08011b74 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 8011b74:	b480      	push	{r7}
 8011b76:	af00      	add	r7, sp, #0
}
 8011b78:	bf00      	nop
 8011b7a:	46bd      	mov	sp, r7
 8011b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b80:	4770      	bx	lr

08011b82 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8011b82:	b580      	push	{r7, lr}
 8011b84:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 8011b86:	f003 fccf 	bl	8015528 <touchgfx_components_init>
  touchgfx_init();
 8011b8a:	f003 fca3 	bl	80154d4 <touchgfx_init>
}
 8011b8e:	bf00      	nop
 8011b90:	bd80      	pop	{r7, pc}
	...

08011b94 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8011b94:	b480      	push	{r7}
 8011b96:	b083      	sub	sp, #12
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
    {
 8011b9c:	4a04      	ldr	r2, [pc, #16]	; (8011bb0 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	601a      	str	r2, [r3, #0]
    }
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	370c      	adds	r7, #12
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bae:	4770      	bx	lr
 8011bb0:	0802e67c 	.word	0x0802e67c

08011bb4 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b082      	sub	sp, #8
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
    }
 8011bbc:	6878      	ldr	r0, [r7, #4]
 8011bbe:	f7ff ffe9 	bl	8011b94 <_ZN8touchgfx12FontProviderD1Ev>
 8011bc2:	2104      	movs	r1, #4
 8011bc4:	6878      	ldr	r0, [r7, #4]
 8011bc6:	f01a f9be 	bl	802bf46 <_ZdlPvj>
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	4618      	mov	r0, r3
 8011bce:	3708      	adds	r7, #8
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	bd80      	pop	{r7, pc}

08011bd4 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b082      	sub	sp, #8
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	6078      	str	r0, [r7, #4]
 8011bdc:	460b      	mov	r3, r1
 8011bde:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8011be0:	887b      	ldrh	r3, [r7, #2]
 8011be2:	2b02      	cmp	r3, #2
 8011be4:	d010      	beq.n	8011c08 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 8011be6:	2b02      	cmp	r3, #2
 8011be8:	dc13      	bgt.n	8011c12 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d002      	beq.n	8011bf4 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 8011bee:	2b01      	cmp	r3, #1
 8011bf0:	d005      	beq.n	8011bfe <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 8011bf2:	e00e      	b.n	8011c12 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8011bf4:	f002 f82e 	bl	8013c54 <_ZN17TypedTextDatabase8getFontsEv>
 8011bf8:	4603      	mov	r3, r0
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	e00a      	b.n	8011c14 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8011bfe:	f002 f829 	bl	8013c54 <_ZN17TypedTextDatabase8getFontsEv>
 8011c02:	4603      	mov	r3, r0
 8011c04:	685b      	ldr	r3, [r3, #4]
 8011c06:	e005      	b.n	8011c14 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8011c08:	f002 f824 	bl	8013c54 <_ZN17TypedTextDatabase8getFontsEv>
 8011c0c:	4603      	mov	r3, r0
 8011c0e:	689b      	ldr	r3, [r3, #8]
 8011c10:	e000      	b.n	8011c14 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 8011c12:	2300      	movs	r3, #0
    }
}
 8011c14:	4618      	mov	r0, r3
 8011c16:	3708      	adds	r7, #8
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	bd80      	pop	{r7, pc}

08011c1c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8011c1c:	b580      	push	{r7, lr}
 8011c1e:	b082      	sub	sp, #8
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	6078      	str	r0, [r7, #4]
 8011c24:	4a05      	ldr	r2, [pc, #20]	; (8011c3c <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	601a      	str	r2, [r3, #0]
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	f7ff ffb1 	bl	8011b94 <_ZN8touchgfx12FontProviderD1Ev>
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	4618      	mov	r0, r3
 8011c36:	3708      	adds	r7, #8
 8011c38:	46bd      	mov	sp, r7
 8011c3a:	bd80      	pop	{r7, pc}
 8011c3c:	0802e668 	.word	0x0802e668

08011c40 <_ZN23ApplicationFontProviderD0Ev>:
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b082      	sub	sp, #8
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	6078      	str	r0, [r7, #4]
 8011c48:	6878      	ldr	r0, [r7, #4]
 8011c4a:	f7ff ffe7 	bl	8011c1c <_ZN23ApplicationFontProviderD1Ev>
 8011c4e:	2104      	movs	r1, #4
 8011c50:	6878      	ldr	r0, [r7, #4]
 8011c52:	f01a f978 	bl	802bf46 <_ZdlPvj>
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	4618      	mov	r0, r3
 8011c5a:	3708      	adds	r7, #8
 8011c5c:	46bd      	mov	sp, r7
 8011c5e:	bd80      	pop	{r7, pc}

08011c60 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8011c60:	b480      	push	{r7}
 8011c62:	b083      	sub	sp, #12
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	6078      	str	r0, [r7, #4]
    {
 8011c68:	4a04      	ldr	r2, [pc, #16]	; (8011c7c <_ZN8touchgfx4FontD1Ev+0x1c>)
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	601a      	str	r2, [r3, #0]
    }
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	4618      	mov	r0, r3
 8011c72:	370c      	adds	r7, #12
 8011c74:	46bd      	mov	sp, r7
 8011c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c7a:	4770      	bx	lr
 8011c7c:	0802e96c 	.word	0x0802e96c

08011c80 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8011c80:	b580      	push	{r7, lr}
 8011c82:	b082      	sub	sp, #8
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	6078      	str	r0, [r7, #4]
    }
 8011c88:	6878      	ldr	r0, [r7, #4]
 8011c8a:	f7ff ffe9 	bl	8011c60 <_ZN8touchgfx4FontD1Ev>
 8011c8e:	2114      	movs	r1, #20
 8011c90:	6878      	ldr	r0, [r7, #4]
 8011c92:	f01a f958 	bl	802bf46 <_ZdlPvj>
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	4618      	mov	r0, r3
 8011c9a:	3708      	adds	r7, #8
 8011c9c:	46bd      	mov	sp, r7
 8011c9e:	bd80      	pop	{r7, pc}

08011ca0 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8011ca0:	b590      	push	{r4, r7, lr}
 8011ca2:	b087      	sub	sp, #28
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
 8011ca8:	460b      	mov	r3, r1
 8011caa:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8011cac:	887b      	ldrh	r3, [r7, #2]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d101      	bne.n	8011cb6 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	e010      	b.n	8011cd8 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8011cba:	2300      	movs	r3, #0
 8011cbc:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	3308      	adds	r3, #8
 8011cc4:	681c      	ldr	r4, [r3, #0]
 8011cc6:	f107 030f 	add.w	r3, r7, #15
 8011cca:	f107 0210 	add.w	r2, r7, #16
 8011cce:	8879      	ldrh	r1, [r7, #2]
 8011cd0:	6878      	ldr	r0, [r7, #4]
 8011cd2:	47a0      	blx	r4
 8011cd4:	6178      	str	r0, [r7, #20]
        return glyph;
 8011cd6:	697b      	ldr	r3, [r7, #20]
    }
 8011cd8:	4618      	mov	r0, r3
 8011cda:	371c      	adds	r7, #28
 8011cdc:	46bd      	mov	sp, r7
 8011cde:	bd90      	pop	{r4, r7, pc}

08011ce0 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8011ce0:	b480      	push	{r7}
 8011ce2:	b083      	sub	sp, #12
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	89db      	ldrh	r3, [r3, #14]
    }
 8011cec:	4618      	mov	r0, r3
 8011cee:	370c      	adds	r7, #12
 8011cf0:	46bd      	mov	sp, r7
 8011cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf6:	4770      	bx	lr

08011cf8 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8011cf8:	b480      	push	{r7}
 8011cfa:	b083      	sub	sp, #12
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	8a1b      	ldrh	r3, [r3, #16]
    }
 8011d04:	4618      	mov	r0, r3
 8011d06:	370c      	adds	r7, #12
 8011d08:	46bd      	mov	sp, r7
 8011d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d0e:	4770      	bx	lr

08011d10 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 8011d10:	b480      	push	{r7}
 8011d12:	b083      	sub	sp, #12
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	88db      	ldrh	r3, [r3, #6]
    }
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	370c      	adds	r7, #12
 8011d20:	46bd      	mov	sp, r7
 8011d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d26:	4770      	bx	lr

08011d28 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 8011d28:	b480      	push	{r7}
 8011d2a:	b083      	sub	sp, #12
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	889b      	ldrh	r3, [r3, #4]
    }
 8011d34:	4618      	mov	r0, r3
 8011d36:	370c      	adds	r7, #12
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3e:	4770      	bx	lr

08011d40 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8011d40:	b480      	push	{r7}
 8011d42:	b083      	sub	sp, #12
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	7a9b      	ldrb	r3, [r3, #10]
 8011d4c:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8011d50:	b2db      	uxtb	r3, r3
    }
 8011d52:	4618      	mov	r0, r3
 8011d54:	370c      	adds	r7, #12
 8011d56:	46bd      	mov	sp, r7
 8011d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5c:	4770      	bx	lr

08011d5e <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8011d5e:	b480      	push	{r7}
 8011d60:	b083      	sub	sp, #12
 8011d62:	af00      	add	r7, sp, #0
 8011d64:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	7a9b      	ldrb	r3, [r3, #10]
 8011d6a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8011d6e:	b2db      	uxtb	r3, r3
    }
 8011d70:	4618      	mov	r0, r3
 8011d72:	370c      	adds	r7, #12
 8011d74:	46bd      	mov	sp, r7
 8011d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d7a:	4770      	bx	lr

08011d7c <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b082      	sub	sp, #8
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	6078      	str	r0, [r7, #4]
 8011d84:	4a05      	ldr	r2, [pc, #20]	; (8011d9c <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	601a      	str	r2, [r3, #0]
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	f7ff ff67 	bl	8011c60 <_ZN8touchgfx4FontD1Ev>
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	4618      	mov	r0, r3
 8011d96:	3708      	adds	r7, #8
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	bd80      	pop	{r7, pc}
 8011d9c:	0802f7ac 	.word	0x0802f7ac

08011da0 <_ZN8touchgfx9ConstFontD0Ev>:
 8011da0:	b580      	push	{r7, lr}
 8011da2:	b082      	sub	sp, #8
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
 8011da8:	6878      	ldr	r0, [r7, #4]
 8011daa:	f7ff ffe7 	bl	8011d7c <_ZN8touchgfx9ConstFontD1Ev>
 8011dae:	211c      	movs	r1, #28
 8011db0:	6878      	ldr	r0, [r7, #4]
 8011db2:	f01a f8c8 	bl	802bf46 <_ZdlPvj>
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	4618      	mov	r0, r3
 8011dba:	3708      	adds	r7, #8
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	bd80      	pop	{r7, pc}

08011dc0 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b082      	sub	sp, #8
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
 8011dc8:	4a05      	ldr	r2, [pc, #20]	; (8011de0 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	601a      	str	r2, [r3, #0]
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	f7ff ffd3 	bl	8011d7c <_ZN8touchgfx9ConstFontD1Ev>
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	4618      	mov	r0, r3
 8011dda:	3708      	adds	r7, #8
 8011ddc:	46bd      	mov	sp, r7
 8011dde:	bd80      	pop	{r7, pc}
 8011de0:	0802e690 	.word	0x0802e690

08011de4 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b082      	sub	sp, #8
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
 8011dec:	6878      	ldr	r0, [r7, #4]
 8011dee:	f7ff ffe7 	bl	8011dc0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8011df2:	212c      	movs	r1, #44	; 0x2c
 8011df4:	6878      	ldr	r0, [r7, #4]
 8011df6:	f01a f8a6 	bl	802bf46 <_ZdlPvj>
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	3708      	adds	r7, #8
 8011e00:	46bd      	mov	sp, r7
 8011e02:	bd80      	pop	{r7, pc}

08011e04 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 8011e04:	b480      	push	{r7}
 8011e06:	b083      	sub	sp, #12
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8011e10:	4618      	mov	r0, r3
 8011e12:	370c      	adds	r7, #12
 8011e14:	46bd      	mov	sp, r7
 8011e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e1a:	4770      	bx	lr

08011e1c <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8011e1c:	b480      	push	{r7}
 8011e1e:	b083      	sub	sp, #12
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 8011e28:	4618      	mov	r0, r3
 8011e2a:	370c      	adds	r7, #12
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e32:	4770      	bx	lr

08011e34 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8011e34:	b580      	push	{r7, lr}
 8011e36:	b08e      	sub	sp, #56	; 0x38
 8011e38:	af0a      	add	r7, sp, #40	; 0x28
 8011e3a:	60f8      	str	r0, [r7, #12]
 8011e3c:	60b9      	str	r1, [r7, #8]
 8011e3e:	4611      	mov	r1, r2
 8011e40:	461a      	mov	r2, r3
 8011e42:	460b      	mov	r3, r1
 8011e44:	80fb      	strh	r3, [r7, #6]
 8011e46:	4613      	mov	r3, r2
 8011e48:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 8011e4a:	68f8      	ldr	r0, [r7, #12]
 8011e4c:	88b9      	ldrh	r1, [r7, #4]
 8011e4e:	88fa      	ldrh	r2, [r7, #6]
 8011e50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011e54:	9308      	str	r3, [sp, #32]
 8011e56:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011e58:	9307      	str	r3, [sp, #28]
 8011e5a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8011e5e:	9306      	str	r3, [sp, #24]
 8011e60:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011e64:	9305      	str	r3, [sp, #20]
 8011e66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011e6a:	9304      	str	r3, [sp, #16]
 8011e6c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011e70:	9303      	str	r3, [sp, #12]
 8011e72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011e76:	9302      	str	r3, [sp, #8]
 8011e78:	7f3b      	ldrb	r3, [r7, #28]
 8011e7a:	9301      	str	r3, [sp, #4]
 8011e7c:	8b3b      	ldrh	r3, [r7, #24]
 8011e7e:	9300      	str	r3, [sp, #0]
 8011e80:	460b      	mov	r3, r1
 8011e82:	68b9      	ldr	r1, [r7, #8]
 8011e84:	f00a fb84 	bl	801c590 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8011e88:	4a09      	ldr	r2, [pc, #36]	; (8011eb0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011e92:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011e98:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011e9e:	625a      	str	r2, [r3, #36]	; 0x24
      arabicTable(formsTable)
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011ea4:	629a      	str	r2, [r3, #40]	; 0x28
{
}
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	3710      	adds	r7, #16
 8011eac:	46bd      	mov	sp, r7
 8011eae:	bd80      	pop	{r7, pc}
 8011eb0:	0802e690 	.word	0x0802e690

08011eb4 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8011eb4:	b480      	push	{r7}
 8011eb6:	b085      	sub	sp, #20
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
 8011ebc:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	69db      	ldr	r3, [r3, #28]
 8011ec2:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8011ec4:	683b      	ldr	r3, [r7, #0]
 8011ec6:	889b      	ldrh	r3, [r3, #4]
 8011ec8:	0adb      	lsrs	r3, r3, #11
 8011eca:	b29b      	uxth	r3, r3
 8011ecc:	009b      	lsls	r3, r3, #2
 8011ece:	68fa      	ldr	r2, [r7, #12]
 8011ed0:	4413      	add	r3, r2
 8011ed2:	681a      	ldr	r2, [r3, #0]
 8011ed4:	683b      	ldr	r3, [r7, #0]
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	4413      	add	r3, r2
}
 8011eda:	4618      	mov	r0, r3
 8011edc:	3714      	adds	r7, #20
 8011ede:	46bd      	mov	sp, r7
 8011ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee4:	4770      	bx	lr

08011ee6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8011ee6:	b480      	push	{r7}
 8011ee8:	b089      	sub	sp, #36	; 0x24
 8011eea:	af00      	add	r7, sp, #0
 8011eec:	60f8      	str	r0, [r7, #12]
 8011eee:	460b      	mov	r3, r1
 8011ef0:	607a      	str	r2, [r7, #4]
 8011ef2:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d003      	beq.n	8011f02 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	7b1b      	ldrb	r3, [r3, #12]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d101      	bne.n	8011f06 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8011f02:	2300      	movs	r3, #0
 8011f04:	e031      	b.n	8011f6a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	6a1a      	ldr	r2, [r3, #32]
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8011f0e:	697b      	ldr	r3, [r7, #20]
 8011f10:	7b5b      	ldrb	r3, [r3, #13]
 8011f12:	021b      	lsls	r3, r3, #8
 8011f14:	b21b      	sxth	r3, r3
 8011f16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011f1a:	b219      	sxth	r1, r3
 8011f1c:	697b      	ldr	r3, [r7, #20]
 8011f1e:	7adb      	ldrb	r3, [r3, #11]
 8011f20:	b21b      	sxth	r3, r3
 8011f22:	430b      	orrs	r3, r1
 8011f24:	b21b      	sxth	r3, r3
 8011f26:	b29b      	uxth	r3, r3
 8011f28:	009b      	lsls	r3, r3, #2
 8011f2a:	4413      	add	r3, r2
 8011f2c:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	7b1b      	ldrb	r3, [r3, #12]
 8011f32:	837b      	strh	r3, [r7, #26]
 8011f34:	e013      	b.n	8011f5e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x78>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8011f36:	69fb      	ldr	r3, [r7, #28]
 8011f38:	881b      	ldrh	r3, [r3, #0]
 8011f3a:	897a      	ldrh	r2, [r7, #10]
 8011f3c:	429a      	cmp	r2, r3
 8011f3e:	d103      	bne.n	8011f48 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x62>
        {
            return kerndata->distance;
 8011f40:	69fb      	ldr	r3, [r7, #28]
 8011f42:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8011f46:	e010      	b.n	8011f6a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8011f48:	69fb      	ldr	r3, [r7, #28]
 8011f4a:	881b      	ldrh	r3, [r3, #0]
 8011f4c:	897a      	ldrh	r2, [r7, #10]
 8011f4e:	429a      	cmp	r2, r3
 8011f50:	d309      	bcc.n	8011f66 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8011f52:	8b7b      	ldrh	r3, [r7, #26]
 8011f54:	3b01      	subs	r3, #1
 8011f56:	837b      	strh	r3, [r7, #26]
 8011f58:	69fb      	ldr	r3, [r7, #28]
 8011f5a:	3304      	adds	r3, #4
 8011f5c:	61fb      	str	r3, [r7, #28]
 8011f5e:	8b7b      	ldrh	r3, [r7, #26]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d1e8      	bne.n	8011f36 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x50>
 8011f64:	e000      	b.n	8011f68 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        {
            break;
 8011f66:	bf00      	nop
        }
    }
    return 0;
 8011f68:	2300      	movs	r3, #0
}
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	3724      	adds	r7, #36	; 0x24
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f74:	4770      	bx	lr
	...

08011f78 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	af00      	add	r7, sp, #0
 8011f7c:	4801      	ldr	r0, [pc, #4]	; (8011f84 <__tcf_0+0xc>)
 8011f7e:	f7ff ff1f 	bl	8011dc0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8011f82:	bd80      	pop	{r7, pc}
 8011f84:	200093fc 	.word	0x200093fc

08011f88 <_Z23getFont_verdana_10_4bppv>:
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b08e      	sub	sp, #56	; 0x38
 8011f8c:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8011f8e:	4b21      	ldr	r3, [pc, #132]	; (8012014 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	f3bf 8f5b 	dmb	ish
 8011f96:	f003 0301 	and.w	r3, r3, #1
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	bf0c      	ite	eq
 8011f9e:	2301      	moveq	r3, #1
 8011fa0:	2300      	movne	r3, #0
 8011fa2:	b2db      	uxtb	r3, r3
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d030      	beq.n	801200a <_Z23getFont_verdana_10_4bppv+0x82>
 8011fa8:	481a      	ldr	r0, [pc, #104]	; (8012014 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8011faa:	f019 ffce 	bl	802bf4a <__cxa_guard_acquire>
 8011fae:	4603      	mov	r3, r0
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	bf14      	ite	ne
 8011fb4:	2301      	movne	r3, #1
 8011fb6:	2300      	moveq	r3, #0
 8011fb8:	b2db      	uxtb	r3, r3
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d025      	beq.n	801200a <_Z23getFont_verdana_10_4bppv+0x82>
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	930c      	str	r3, [sp, #48]	; 0x30
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	930a      	str	r3, [sp, #40]	; 0x28
 8011fca:	233f      	movs	r3, #63	; 0x3f
 8011fcc:	9309      	str	r3, [sp, #36]	; 0x24
 8011fce:	4b12      	ldr	r3, [pc, #72]	; (8012018 <_Z23getFont_verdana_10_4bppv+0x90>)
 8011fd0:	9308      	str	r3, [sp, #32]
 8011fd2:	4b12      	ldr	r3, [pc, #72]	; (801201c <_Z23getFont_verdana_10_4bppv+0x94>)
 8011fd4:	9307      	str	r3, [sp, #28]
 8011fd6:	2300      	movs	r3, #0
 8011fd8:	9306      	str	r3, [sp, #24]
 8011fda:	2300      	movs	r3, #0
 8011fdc:	9305      	str	r3, [sp, #20]
 8011fde:	2301      	movs	r3, #1
 8011fe0:	9304      	str	r3, [sp, #16]
 8011fe2:	2304      	movs	r3, #4
 8011fe4:	9303      	str	r3, [sp, #12]
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	9302      	str	r3, [sp, #8]
 8011fea:	2300      	movs	r3, #0
 8011fec:	9301      	str	r3, [sp, #4]
 8011fee:	230a      	movs	r3, #10
 8011ff0:	9300      	str	r3, [sp, #0]
 8011ff2:	230a      	movs	r3, #10
 8011ff4:	2201      	movs	r2, #1
 8011ff6:	490a      	ldr	r1, [pc, #40]	; (8012020 <_Z23getFont_verdana_10_4bppv+0x98>)
 8011ff8:	480a      	ldr	r0, [pc, #40]	; (8012024 <_Z23getFont_verdana_10_4bppv+0x9c>)
 8011ffa:	f7ff ff1b 	bl	8011e34 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8011ffe:	480a      	ldr	r0, [pc, #40]	; (8012028 <_Z23getFont_verdana_10_4bppv+0xa0>)
 8012000:	f01a fdb0 	bl	802cb64 <atexit>
 8012004:	4803      	ldr	r0, [pc, #12]	; (8012014 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8012006:	f019 ffac 	bl	802bf62 <__cxa_guard_release>
    return verdana_10_4bpp;
 801200a:	4b06      	ldr	r3, [pc, #24]	; (8012024 <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 801200c:	4618      	mov	r0, r3
 801200e:	46bd      	mov	sp, r7
 8012010:	bd80      	pop	{r7, pc}
 8012012:	bf00      	nop
 8012014:	20009428 	.word	0x20009428
 8012018:	08030150 	.word	0x08030150
 801201c:	0803015c 	.word	0x0803015c
 8012020:	08030120 	.word	0x08030120
 8012024:	200093fc 	.word	0x200093fc
 8012028:	08011f79 	.word	0x08011f79

0801202c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 801202c:	b580      	push	{r7, lr}
 801202e:	af00      	add	r7, sp, #0
 8012030:	4801      	ldr	r0, [pc, #4]	; (8012038 <__tcf_0+0xc>)
 8012032:	f7ff fec5 	bl	8011dc0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8012036:	bd80      	pop	{r7, pc}
 8012038:	2000942c 	.word	0x2000942c

0801203c <_Z23getFont_verdana_20_4bppv>:
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b08e      	sub	sp, #56	; 0x38
 8012040:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8012042:	4b21      	ldr	r3, [pc, #132]	; (80120c8 <_Z23getFont_verdana_20_4bppv+0x8c>)
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	f3bf 8f5b 	dmb	ish
 801204a:	f003 0301 	and.w	r3, r3, #1
 801204e:	2b00      	cmp	r3, #0
 8012050:	bf0c      	ite	eq
 8012052:	2301      	moveq	r3, #1
 8012054:	2300      	movne	r3, #0
 8012056:	b2db      	uxtb	r3, r3
 8012058:	2b00      	cmp	r3, #0
 801205a:	d030      	beq.n	80120be <_Z23getFont_verdana_20_4bppv+0x82>
 801205c:	481a      	ldr	r0, [pc, #104]	; (80120c8 <_Z23getFont_verdana_20_4bppv+0x8c>)
 801205e:	f019 ff74 	bl	802bf4a <__cxa_guard_acquire>
 8012062:	4603      	mov	r3, r0
 8012064:	2b00      	cmp	r3, #0
 8012066:	bf14      	ite	ne
 8012068:	2301      	movne	r3, #1
 801206a:	2300      	moveq	r3, #0
 801206c:	b2db      	uxtb	r3, r3
 801206e:	2b00      	cmp	r3, #0
 8012070:	d025      	beq.n	80120be <_Z23getFont_verdana_20_4bppv+0x82>
 8012072:	2300      	movs	r3, #0
 8012074:	930c      	str	r3, [sp, #48]	; 0x30
 8012076:	2300      	movs	r3, #0
 8012078:	930b      	str	r3, [sp, #44]	; 0x2c
 801207a:	2300      	movs	r3, #0
 801207c:	930a      	str	r3, [sp, #40]	; 0x28
 801207e:	233f      	movs	r3, #63	; 0x3f
 8012080:	9309      	str	r3, [sp, #36]	; 0x24
 8012082:	4b12      	ldr	r3, [pc, #72]	; (80120cc <_Z23getFont_verdana_20_4bppv+0x90>)
 8012084:	9308      	str	r3, [sp, #32]
 8012086:	4b12      	ldr	r3, [pc, #72]	; (80120d0 <_Z23getFont_verdana_20_4bppv+0x94>)
 8012088:	9307      	str	r3, [sp, #28]
 801208a:	2300      	movs	r3, #0
 801208c:	9306      	str	r3, [sp, #24]
 801208e:	2300      	movs	r3, #0
 8012090:	9305      	str	r3, [sp, #20]
 8012092:	2301      	movs	r3, #1
 8012094:	9304      	str	r3, [sp, #16]
 8012096:	2304      	movs	r3, #4
 8012098:	9303      	str	r3, [sp, #12]
 801209a:	2300      	movs	r3, #0
 801209c:	9302      	str	r3, [sp, #8]
 801209e:	2300      	movs	r3, #0
 80120a0:	9301      	str	r3, [sp, #4]
 80120a2:	2314      	movs	r3, #20
 80120a4:	9300      	str	r3, [sp, #0]
 80120a6:	2314      	movs	r3, #20
 80120a8:	2201      	movs	r2, #1
 80120aa:	490a      	ldr	r1, [pc, #40]	; (80120d4 <_Z23getFont_verdana_20_4bppv+0x98>)
 80120ac:	480a      	ldr	r0, [pc, #40]	; (80120d8 <_Z23getFont_verdana_20_4bppv+0x9c>)
 80120ae:	f7ff fec1 	bl	8011e34 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80120b2:	480a      	ldr	r0, [pc, #40]	; (80120dc <_Z23getFont_verdana_20_4bppv+0xa0>)
 80120b4:	f01a fd56 	bl	802cb64 <atexit>
 80120b8:	4803      	ldr	r0, [pc, #12]	; (80120c8 <_Z23getFont_verdana_20_4bppv+0x8c>)
 80120ba:	f019 ff52 	bl	802bf62 <__cxa_guard_release>
    return verdana_20_4bpp;
 80120be:	4b06      	ldr	r3, [pc, #24]	; (80120d8 <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 80120c0:	4618      	mov	r0, r3
 80120c2:	46bd      	mov	sp, r7
 80120c4:	bd80      	pop	{r7, pc}
 80120c6:	bf00      	nop
 80120c8:	20009458 	.word	0x20009458
 80120cc:	08030154 	.word	0x08030154
 80120d0:	08030160 	.word	0x08030160
 80120d4:	08030130 	.word	0x08030130
 80120d8:	2000942c 	.word	0x2000942c
 80120dc:	0801202d 	.word	0x0801202d

080120e0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80120e0:	b580      	push	{r7, lr}
 80120e2:	af00      	add	r7, sp, #0
 80120e4:	4801      	ldr	r0, [pc, #4]	; (80120ec <__tcf_0+0xc>)
 80120e6:	f7ff fe6b 	bl	8011dc0 <_ZN8touchgfx13GeneratedFontD1Ev>
 80120ea:	bd80      	pop	{r7, pc}
 80120ec:	2000945c 	.word	0x2000945c

080120f0 <_Z23getFont_verdana_40_4bppv>:
{
 80120f0:	b580      	push	{r7, lr}
 80120f2:	b08e      	sub	sp, #56	; 0x38
 80120f4:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80120f6:	4b21      	ldr	r3, [pc, #132]	; (801217c <_Z23getFont_verdana_40_4bppv+0x8c>)
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	f3bf 8f5b 	dmb	ish
 80120fe:	f003 0301 	and.w	r3, r3, #1
 8012102:	2b00      	cmp	r3, #0
 8012104:	bf0c      	ite	eq
 8012106:	2301      	moveq	r3, #1
 8012108:	2300      	movne	r3, #0
 801210a:	b2db      	uxtb	r3, r3
 801210c:	2b00      	cmp	r3, #0
 801210e:	d030      	beq.n	8012172 <_Z23getFont_verdana_40_4bppv+0x82>
 8012110:	481a      	ldr	r0, [pc, #104]	; (801217c <_Z23getFont_verdana_40_4bppv+0x8c>)
 8012112:	f019 ff1a 	bl	802bf4a <__cxa_guard_acquire>
 8012116:	4603      	mov	r3, r0
 8012118:	2b00      	cmp	r3, #0
 801211a:	bf14      	ite	ne
 801211c:	2301      	movne	r3, #1
 801211e:	2300      	moveq	r3, #0
 8012120:	b2db      	uxtb	r3, r3
 8012122:	2b00      	cmp	r3, #0
 8012124:	d025      	beq.n	8012172 <_Z23getFont_verdana_40_4bppv+0x82>
 8012126:	2300      	movs	r3, #0
 8012128:	930c      	str	r3, [sp, #48]	; 0x30
 801212a:	2300      	movs	r3, #0
 801212c:	930b      	str	r3, [sp, #44]	; 0x2c
 801212e:	2300      	movs	r3, #0
 8012130:	930a      	str	r3, [sp, #40]	; 0x28
 8012132:	233f      	movs	r3, #63	; 0x3f
 8012134:	9309      	str	r3, [sp, #36]	; 0x24
 8012136:	4b12      	ldr	r3, [pc, #72]	; (8012180 <_Z23getFont_verdana_40_4bppv+0x90>)
 8012138:	9308      	str	r3, [sp, #32]
 801213a:	4b12      	ldr	r3, [pc, #72]	; (8012184 <_Z23getFont_verdana_40_4bppv+0x94>)
 801213c:	9307      	str	r3, [sp, #28]
 801213e:	2300      	movs	r3, #0
 8012140:	9306      	str	r3, [sp, #24]
 8012142:	2300      	movs	r3, #0
 8012144:	9305      	str	r3, [sp, #20]
 8012146:	2301      	movs	r3, #1
 8012148:	9304      	str	r3, [sp, #16]
 801214a:	2304      	movs	r3, #4
 801214c:	9303      	str	r3, [sp, #12]
 801214e:	2300      	movs	r3, #0
 8012150:	9302      	str	r3, [sp, #8]
 8012152:	2300      	movs	r3, #0
 8012154:	9301      	str	r3, [sp, #4]
 8012156:	2328      	movs	r3, #40	; 0x28
 8012158:	9300      	str	r3, [sp, #0]
 801215a:	2328      	movs	r3, #40	; 0x28
 801215c:	2201      	movs	r2, #1
 801215e:	490a      	ldr	r1, [pc, #40]	; (8012188 <_Z23getFont_verdana_40_4bppv+0x98>)
 8012160:	480a      	ldr	r0, [pc, #40]	; (801218c <_Z23getFont_verdana_40_4bppv+0x9c>)
 8012162:	f7ff fe67 	bl	8011e34 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8012166:	480a      	ldr	r0, [pc, #40]	; (8012190 <_Z23getFont_verdana_40_4bppv+0xa0>)
 8012168:	f01a fcfc 	bl	802cb64 <atexit>
 801216c:	4803      	ldr	r0, [pc, #12]	; (801217c <_Z23getFont_verdana_40_4bppv+0x8c>)
 801216e:	f019 fef8 	bl	802bf62 <__cxa_guard_release>
    return verdana_40_4bpp;
 8012172:	4b06      	ldr	r3, [pc, #24]	; (801218c <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 8012174:	4618      	mov	r0, r3
 8012176:	46bd      	mov	sp, r7
 8012178:	bd80      	pop	{r7, pc}
 801217a:	bf00      	nop
 801217c:	20009488 	.word	0x20009488
 8012180:	08030158 	.word	0x08030158
 8012184:	08030164 	.word	0x08030164
 8012188:	08030140 	.word	0x08030140
 801218c:	2000945c 	.word	0x2000945c
 8012190:	080120e1 	.word	0x080120e1

08012194 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8012194:	b480      	push	{r7}
 8012196:	b083      	sub	sp, #12
 8012198:	af00      	add	r7, sp, #0
 801219a:	6078      	str	r0, [r7, #4]
 801219c:	6039      	str	r1, [r7, #0]
 801219e:	683b      	ldr	r3, [r7, #0]
 80121a0:	4618      	mov	r0, r3
 80121a2:	370c      	adds	r7, #12
 80121a4:	46bd      	mov	sp, r7
 80121a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121aa:	4770      	bx	lr

080121ac <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80121ac:	b480      	push	{r7}
 80121ae:	b083      	sub	sp, #12
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	6078      	str	r0, [r7, #4]
 80121b4:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80121b6:	bf00      	nop
 80121b8:	370c      	adds	r7, #12
 80121ba:	46bd      	mov	sp, r7
 80121bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c0:	4770      	bx	lr

080121c2 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80121c2:	b480      	push	{r7}
 80121c4:	b083      	sub	sp, #12
 80121c6:	af00      	add	r7, sp, #0
 80121c8:	6078      	str	r0, [r7, #4]
 80121ca:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80121cc:	bf00      	nop
 80121ce:	370c      	adds	r7, #12
 80121d0:	46bd      	mov	sp, r7
 80121d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d6:	4770      	bx	lr

080121d8 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 80121d8:	b480      	push	{r7}
 80121da:	b083      	sub	sp, #12
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
 80121e0:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80121e2:	bf00      	nop
 80121e4:	370c      	adds	r7, #12
 80121e6:	46bd      	mov	sp, r7
 80121e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ec:	4770      	bx	lr

080121ee <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 80121ee:	b480      	push	{r7}
 80121f0:	b083      	sub	sp, #12
 80121f2:	af00      	add	r7, sp, #0
 80121f4:	6078      	str	r0, [r7, #4]
 80121f6:	460b      	mov	r3, r1
 80121f8:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 80121fa:	bf00      	nop
 80121fc:	370c      	adds	r7, #12
 80121fe:	46bd      	mov	sp, r7
 8012200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012204:	4770      	bx	lr

08012206 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8012206:	b480      	push	{r7}
 8012208:	b083      	sub	sp, #12
 801220a:	af00      	add	r7, sp, #0
 801220c:	6078      	str	r0, [r7, #4]
    {
    }
 801220e:	bf00      	nop
 8012210:	370c      	adds	r7, #12
 8012212:	46bd      	mov	sp, r7
 8012214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012218:	4770      	bx	lr

0801221a <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 801221a:	b480      	push	{r7}
 801221c:	b083      	sub	sp, #12
 801221e:	af00      	add	r7, sp, #0
 8012220:	6078      	str	r0, [r7, #4]
    {
    }
 8012222:	bf00      	nop
 8012224:	370c      	adds	r7, #12
 8012226:	46bd      	mov	sp, r7
 8012228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222c:	4770      	bx	lr
	...

08012230 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8012230:	b480      	push	{r7}
 8012232:	b083      	sub	sp, #12
 8012234:	af00      	add	r7, sp, #0
 8012236:	6078      	str	r0, [r7, #4]
    {
 8012238:	4a04      	ldr	r2, [pc, #16]	; (801224c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	601a      	str	r2, [r3, #0]
    }
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	4618      	mov	r0, r3
 8012242:	370c      	adds	r7, #12
 8012244:	46bd      	mov	sp, r7
 8012246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801224a:	4770      	bx	lr
 801224c:	0802e810 	.word	0x0802e810

08012250 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8012250:	b580      	push	{r7, lr}
 8012252:	b082      	sub	sp, #8
 8012254:	af00      	add	r7, sp, #0
 8012256:	6078      	str	r0, [r7, #4]
    }
 8012258:	6878      	ldr	r0, [r7, #4]
 801225a:	f7ff ffe9 	bl	8012230 <_ZN8touchgfx15UIEventListenerD1Ev>
 801225e:	2104      	movs	r1, #4
 8012260:	6878      	ldr	r0, [r7, #4]
 8012262:	f019 fe70 	bl	802bf46 <_ZdlPvj>
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	4618      	mov	r0, r3
 801226a:	3708      	adds	r7, #8
 801226c:	46bd      	mov	sp, r7
 801226e:	bd80      	pop	{r7, pc}

08012270 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 8012270:	b480      	push	{r7}
 8012272:	b083      	sub	sp, #12
 8012274:	af00      	add	r7, sp, #0
 8012276:	6078      	str	r0, [r7, #4]
    {
    }
 8012278:	bf00      	nop
 801227a:	370c      	adds	r7, #12
 801227c:	46bd      	mov	sp, r7
 801227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012282:	4770      	bx	lr

08012284 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8012284:	b480      	push	{r7}
 8012286:	b083      	sub	sp, #12
 8012288:	af00      	add	r7, sp, #0
 801228a:	6078      	str	r0, [r7, #4]
 801228c:	460b      	mov	r3, r1
 801228e:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 8012290:	bf00      	nop
 8012292:	370c      	adds	r7, #12
 8012294:	46bd      	mov	sp, r7
 8012296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229a:	4770      	bx	lr

0801229c <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 801229c:	b480      	push	{r7}
 801229e:	b083      	sub	sp, #12
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	6078      	str	r0, [r7, #4]
 80122a4:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	683a      	ldr	r2, [r7, #0]
 80122aa:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80122ae:	6810      	ldr	r0, [r2, #0]
 80122b0:	6851      	ldr	r1, [r2, #4]
 80122b2:	c303      	stmia	r3!, {r0, r1}
    }
 80122b4:	bf00      	nop
 80122b6:	370c      	adds	r7, #12
 80122b8:	46bd      	mov	sp, r7
 80122ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122be:	4770      	bx	lr

080122c0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 80122c0:	b580      	push	{r7, lr}
 80122c2:	b082      	sub	sp, #8
 80122c4:	af00      	add	r7, sp, #0
 80122c6:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	3304      	adds	r3, #4
 80122cc:	4618      	mov	r0, r3
 80122ce:	f009 f82f 	bl	801b330 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 80122d2:	bf00      	nop
 80122d4:	3708      	adds	r7, #8
 80122d6:	46bd      	mov	sp, r7
 80122d8:	bd80      	pop	{r7, pc}
	...

080122dc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 80122dc:	b480      	push	{r7}
 80122de:	b083      	sub	sp, #12
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	6078      	str	r0, [r7, #4]
    {
 80122e4:	4a04      	ldr	r2, [pc, #16]	; (80122f8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	601a      	str	r2, [r3, #0]
    }
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	4618      	mov	r0, r3
 80122ee:	370c      	adds	r7, #12
 80122f0:	46bd      	mov	sp, r7
 80122f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f6:	4770      	bx	lr
 80122f8:	0802e7f8 	.word	0x0802e7f8

080122fc <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 80122fc:	b580      	push	{r7, lr}
 80122fe:	b082      	sub	sp, #8
 8012300:	af00      	add	r7, sp, #0
 8012302:	6078      	str	r0, [r7, #4]
    }
 8012304:	6878      	ldr	r0, [r7, #4]
 8012306:	f7ff ffe9 	bl	80122dc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 801230a:	2104      	movs	r1, #4
 801230c:	6878      	ldr	r0, [r7, #4]
 801230e:	f019 fe1a 	bl	802bf46 <_ZdlPvj>
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	4618      	mov	r0, r3
 8012316:	3708      	adds	r7, #8
 8012318:	46bd      	mov	sp, r7
 801231a:	bd80      	pop	{r7, pc}

0801231c <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 801231c:	b480      	push	{r7}
 801231e:	af00      	add	r7, sp, #0
    {
        return instance;
 8012320:	4b03      	ldr	r3, [pc, #12]	; (8012330 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8012322:	681b      	ldr	r3, [r3, #0]
    }
 8012324:	4618      	mov	r0, r3
 8012326:	46bd      	mov	sp, r7
 8012328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801232c:	4770      	bx	lr
 801232e:	bf00      	nop
 8012330:	2000af48 	.word	0x2000af48

08012334 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 8012334:	b480      	push	{r7}
 8012336:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8012338:	4b0b      	ldr	r3, [pc, #44]	; (8012368 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012340:	2b00      	cmp	r3, #0
 8012342:	d008      	beq.n	8012356 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8012344:	4b08      	ldr	r3, [pc, #32]	; (8012368 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801234a:	2b00      	cmp	r3, #0
 801234c:	d003      	beq.n	8012356 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 801234e:	4b06      	ldr	r3, [pc, #24]	; (8012368 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012354:	e002      	b.n	801235c <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 8012356:	4b04      	ldr	r3, [pc, #16]	; (8012368 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	689b      	ldr	r3, [r3, #8]
    }
 801235c:	4618      	mov	r0, r3
 801235e:	46bd      	mov	sp, r7
 8012360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012364:	4770      	bx	lr
 8012366:	bf00      	nop
 8012368:	2000af48 	.word	0x2000af48

0801236c <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 801236c:	b480      	push	{r7}
 801236e:	b083      	sub	sp, #12
 8012370:	af00      	add	r7, sp, #0
 8012372:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8012374:	4a07      	ldr	r2, [pc, #28]	; (8012394 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	601a      	str	r2, [r3, #0]
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	2200      	movs	r2, #0
 801237e:	605a      	str	r2, [r3, #4]
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	2200      	movs	r2, #0
 8012384:	721a      	strb	r2, [r3, #8]
    {
    }
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	4618      	mov	r0, r3
 801238a:	370c      	adds	r7, #12
 801238c:	46bd      	mov	sp, r7
 801238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012392:	4770      	bx	lr
 8012394:	0802e7d4 	.word	0x0802e7d4

08012398 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8012398:	b480      	push	{r7}
 801239a:	b083      	sub	sp, #12
 801239c:	af00      	add	r7, sp, #0
 801239e:	6078      	str	r0, [r7, #4]
    {
 80123a0:	4a04      	ldr	r2, [pc, #16]	; (80123b4 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	601a      	str	r2, [r3, #0]
    }
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	4618      	mov	r0, r3
 80123aa:	370c      	adds	r7, #12
 80123ac:	46bd      	mov	sp, r7
 80123ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b2:	4770      	bx	lr
 80123b4:	0802e7d4 	.word	0x0802e7d4

080123b8 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b082      	sub	sp, #8
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
    }
 80123c0:	6878      	ldr	r0, [r7, #4]
 80123c2:	f7ff ffe9 	bl	8012398 <_ZN8touchgfx10TransitionD1Ev>
 80123c6:	210c      	movs	r1, #12
 80123c8:	6878      	ldr	r0, [r7, #4]
 80123ca:	f019 fdbc 	bl	802bf46 <_ZdlPvj>
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	4618      	mov	r0, r3
 80123d2:	3708      	adds	r7, #8
 80123d4:	46bd      	mov	sp, r7
 80123d6:	bd80      	pop	{r7, pc}

080123d8 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 80123d8:	b480      	push	{r7}
 80123da:	b083      	sub	sp, #12
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
    {
    }
 80123e0:	bf00      	nop
 80123e2:	370c      	adds	r7, #12
 80123e4:	46bd      	mov	sp, r7
 80123e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ea:	4770      	bx	lr

080123ec <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 80123ec:	b480      	push	{r7}
 80123ee:	b083      	sub	sp, #12
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	6078      	str	r0, [r7, #4]
    {
    }
 80123f4:	bf00      	nop
 80123f6:	370c      	adds	r7, #12
 80123f8:	46bd      	mov	sp, r7
 80123fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123fe:	4770      	bx	lr

08012400 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8012400:	b480      	push	{r7}
 8012402:	b083      	sub	sp, #12
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]
    {
    }
 8012408:	bf00      	nop
 801240a:	370c      	adds	r7, #12
 801240c:	46bd      	mov	sp, r7
 801240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012412:	4770      	bx	lr

08012414 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8012414:	b580      	push	{r7, lr}
 8012416:	b082      	sub	sp, #8
 8012418:	af00      	add	r7, sp, #0
 801241a:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 801241c:	f008 ff4a 	bl	801b2b4 <_ZN8touchgfx11Application11getInstanceEv>
 8012420:	4603      	mov	r3, r0
 8012422:	681a      	ldr	r2, [r3, #0]
 8012424:	323c      	adds	r2, #60	; 0x3c
 8012426:	6812      	ldr	r2, [r2, #0]
 8012428:	4618      	mov	r0, r3
 801242a:	4790      	blx	r2
    }
 801242c:	bf00      	nop
 801242e:	3708      	adds	r7, #8
 8012430:	46bd      	mov	sp, r7
 8012432:	bd80      	pop	{r7, pc}

08012434 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8012434:	b480      	push	{r7}
 8012436:	b083      	sub	sp, #12
 8012438:	af00      	add	r7, sp, #0
 801243a:	6078      	str	r0, [r7, #4]
 801243c:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	683a      	ldr	r2, [r7, #0]
 8012442:	605a      	str	r2, [r3, #4]
    }
 8012444:	bf00      	nop
 8012446:	370c      	adds	r7, #12
 8012448:	46bd      	mov	sp, r7
 801244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801244e:	4770      	bx	lr

08012450 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8012450:	b580      	push	{r7, lr}
 8012452:	b082      	sub	sp, #8
 8012454:	af00      	add	r7, sp, #0
 8012456:	6078      	str	r0, [r7, #4]
 8012458:	4a05      	ldr	r2, [pc, #20]	; (8012470 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	601a      	str	r2, [r3, #0]
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	4618      	mov	r0, r3
 8012462:	f7ff fee5 	bl	8012230 <_ZN8touchgfx15UIEventListenerD1Ev>
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	4618      	mov	r0, r3
 801246a:	3708      	adds	r7, #8
 801246c:	46bd      	mov	sp, r7
 801246e:	bd80      	pop	{r7, pc}
 8012470:	0802f6f0 	.word	0x0802f6f0

08012474 <_ZN8touchgfx11ApplicationD0Ev>:
 8012474:	b580      	push	{r7, lr}
 8012476:	b082      	sub	sp, #8
 8012478:	af00      	add	r7, sp, #0
 801247a:	6078      	str	r0, [r7, #4]
 801247c:	6878      	ldr	r0, [r7, #4]
 801247e:	f7ff ffe7 	bl	8012450 <_ZN8touchgfx11ApplicationD1Ev>
 8012482:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8012486:	6878      	ldr	r0, [r7, #4]
 8012488:	f019 fd5d 	bl	802bf46 <_ZdlPvj>
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	4618      	mov	r0, r3
 8012490:	3708      	adds	r7, #8
 8012492:	46bd      	mov	sp, r7
 8012494:	bd80      	pop	{r7, pc}
	...

08012498 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 8012498:	b580      	push	{r7, lr}
 801249a:	b082      	sub	sp, #8
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	4618      	mov	r0, r3
 80124a4:	f009 f812 	bl	801b4cc <_ZN8touchgfx11ApplicationC1Ev>
 80124a8:	4a09      	ldr	r2, [pc, #36]	; (80124d0 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	2200      	movs	r2, #0
 80124b2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
          pendingScreenTransitionCallback(0)
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	2200      	movs	r2, #0
 80124ba:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    {
        instance = this;
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	4a04      	ldr	r2, [pc, #16]	; (80124d4 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 80124c2:	6013      	str	r3, [r2, #0]
    }
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	4618      	mov	r0, r3
 80124c8:	3708      	adds	r7, #8
 80124ca:	46bd      	mov	sp, r7
 80124cc:	bd80      	pop	{r7, pc}
 80124ce:	bf00      	nop
 80124d0:	0802e780 	.word	0x0802e780
 80124d4:	2000af9c 	.word	0x2000af9c

080124d8 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80124d8:	b580      	push	{r7, lr}
 80124da:	b082      	sub	sp, #8
 80124dc:	af00      	add	r7, sp, #0
 80124de:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 80124e0:	6878      	ldr	r0, [r7, #4]
 80124e2:	f000 f804 	bl	80124ee <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 80124e6:	bf00      	nop
 80124e8:	3708      	adds	r7, #8
 80124ea:	46bd      	mov	sp, r7
 80124ec:	bd80      	pop	{r7, pc}

080124ee <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 80124ee:	b580      	push	{r7, lr}
 80124f0:	b082      	sub	sp, #8
 80124f2:	af00      	add	r7, sp, #0
 80124f4:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d00f      	beq.n	8012520 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	330c      	adds	r3, #12
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	4610      	mov	r0, r2
 8012514:	4798      	blx	r3
 8012516:	4603      	mov	r3, r0
 8012518:	2b00      	cmp	r3, #0
 801251a:	d001      	beq.n	8012520 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 801251c:	2301      	movs	r3, #1
 801251e:	e000      	b.n	8012522 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8012520:	2300      	movs	r3, #0
 8012522:	2b00      	cmp	r3, #0
 8012524:	d00e      	beq.n	8012544 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	3308      	adds	r3, #8
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	4610      	mov	r0, r2
 801253a:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	2200      	movs	r2, #0
 8012540:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        }
    }
 8012544:	bf00      	nop
 8012546:	3708      	adds	r7, #8
 8012548:	46bd      	mov	sp, r7
 801254a:	bd80      	pop	{r7, pc}

0801254c <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 801254c:	b480      	push	{r7}
 801254e:	b083      	sub	sp, #12
 8012550:	af00      	add	r7, sp, #0
 8012552:	6078      	str	r0, [r7, #4]
 8012554:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	683a      	ldr	r2, [r7, #0]
 801255a:	601a      	str	r2, [r3, #0]
    }
 801255c:	bf00      	nop
 801255e:	370c      	adds	r7, #12
 8012560:	46bd      	mov	sp, r7
 8012562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012566:	4770      	bx	lr

08012568 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8012568:	b580      	push	{r7, lr}
 801256a:	b082      	sub	sp, #8
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
 8012570:	4a05      	ldr	r2, [pc, #20]	; (8012588 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	601a      	str	r2, [r3, #0]
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	4618      	mov	r0, r3
 801257a:	f7ff ff69 	bl	8012450 <_ZN8touchgfx11ApplicationD1Ev>
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	4618      	mov	r0, r3
 8012582:	3708      	adds	r7, #8
 8012584:	46bd      	mov	sp, r7
 8012586:	bd80      	pop	{r7, pc}
 8012588:	0802e780 	.word	0x0802e780

0801258c <_ZN8touchgfx14MVPApplicationD0Ev>:
 801258c:	b580      	push	{r7, lr}
 801258e:	b082      	sub	sp, #8
 8012590:	af00      	add	r7, sp, #0
 8012592:	6078      	str	r0, [r7, #4]
 8012594:	6878      	ldr	r0, [r7, #4]
 8012596:	f7ff ffe7 	bl	8012568 <_ZN8touchgfx14MVPApplicationD1Ev>
 801259a:	f44f 71a2 	mov.w	r1, #324	; 0x144
 801259e:	6878      	ldr	r0, [r7, #4]
 80125a0:	f019 fcd1 	bl	802bf46 <_ZdlPvj>
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	4618      	mov	r0, r3
 80125a8:	3708      	adds	r7, #8
 80125aa:	46bd      	mov	sp, r7
 80125ac:	bd80      	pop	{r7, pc}
	...

080125b0 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b082      	sub	sp, #8
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	6078      	str	r0, [r7, #4]
 80125b8:	4a08      	ldr	r2, [pc, #32]	; (80125dc <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	601a      	str	r2, [r3, #0]
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80125c4:	4618      	mov	r0, r3
 80125c6:	f000 facb 	bl	8012b60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	4618      	mov	r0, r3
 80125ce:	f7ff ffcb 	bl	8012568 <_ZN8touchgfx14MVPApplicationD1Ev>
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	4618      	mov	r0, r3
 80125d6:	3708      	adds	r7, #8
 80125d8:	46bd      	mov	sp, r7
 80125da:	bd80      	pop	{r7, pc}
 80125dc:	0802e714 	.word	0x0802e714

080125e0 <_ZN23FrontendApplicationBaseD0Ev>:
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b082      	sub	sp, #8
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	6078      	str	r0, [r7, #4]
 80125e8:	6878      	ldr	r0, [r7, #4]
 80125ea:	f7ff ffe1 	bl	80125b0 <_ZN23FrontendApplicationBaseD1Ev>
 80125ee:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 80125f2:	6878      	ldr	r0, [r7, #4]
 80125f4:	f019 fca7 	bl	802bf46 <_ZdlPvj>
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	4618      	mov	r0, r3
 80125fc:	3708      	adds	r7, #8
 80125fe:	46bd      	mov	sp, r7
 8012600:	bd80      	pop	{r7, pc}

08012602 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 8012602:	b580      	push	{r7, lr}
 8012604:	b082      	sub	sp, #8
 8012606:	af00      	add	r7, sp, #0
 8012608:	6078      	str	r0, [r7, #4]
    {
        gotomainScreenNoTransition();
 801260a:	6878      	ldr	r0, [r7, #4]
 801260c:	f000 f880 	bl	8012710 <_ZN23FrontendApplicationBase26gotomainScreenNoTransitionEv>
    }
 8012610:	bf00      	nop
 8012612:	3708      	adds	r7, #8
 8012614:	46bd      	mov	sp, r7
 8012616:	bd80      	pop	{r7, pc}

08012618 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8012618:	b480      	push	{r7}
 801261a:	b083      	sub	sp, #12
 801261c:	af00      	add	r7, sp, #0
 801261e:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	2201      	movs	r2, #1
 8012624:	721a      	strb	r2, [r3, #8]
    }
 8012626:	bf00      	nop
 8012628:	370c      	adds	r7, #12
 801262a:	46bd      	mov	sp, r7
 801262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012630:	4770      	bx	lr

08012632 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8012632:	b480      	push	{r7}
 8012634:	b083      	sub	sp, #12
 8012636:	af00      	add	r7, sp, #0
 8012638:	6078      	str	r0, [r7, #4]
 801263a:	6039      	str	r1, [r7, #0]
    {
        model = m;
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	683a      	ldr	r2, [r7, #0]
 8012640:	605a      	str	r2, [r3, #4]
    }
 8012642:	bf00      	nop
 8012644:	370c      	adds	r7, #12
 8012646:	46bd      	mov	sp, r7
 8012648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264c:	4770      	bx	lr
	...

08012650 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/main_screen/mainView.hpp>
#include <gui/main_screen/mainPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8012650:	b580      	push	{r7, lr}
 8012652:	b084      	sub	sp, #16
 8012654:	af00      	add	r7, sp, #0
 8012656:	60f8      	str	r0, [r7, #12]
 8012658:	60b9      	str	r1, [r7, #8]
 801265a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	4618      	mov	r0, r3
 8012660:	f7ff ff1a 	bl	8012498 <_ZN8touchgfx14MVPApplicationC1Ev>
 8012664:	4a15      	ldr	r2, [pc, #84]	; (80126bc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x6c>)
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012670:	4618      	mov	r0, r3
 8012672:	f000 f8a3 	bl	80127bc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	687a      	ldr	r2, [r7, #4]
 801267a:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
      model(m)
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	68ba      	ldr	r2, [r7, #8]
 8012682:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8012686:	f7ff fe49 	bl	801231c <_ZN8touchgfx3HAL11getInstanceEv>
 801268a:	4603      	mov	r3, r0
 801268c:	681a      	ldr	r2, [r3, #0]
 801268e:	3208      	adds	r2, #8
 8012690:	6812      	ldr	r2, [r2, #0]
 8012692:	2100      	movs	r1, #0
 8012694:	4618      	mov	r0, r3
 8012696:	4790      	blx	r2
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8012698:	f7ff fe4c 	bl	8012334 <_ZN8touchgfx3HAL3lcdEv>
 801269c:	4603      	mov	r3, r0
 801269e:	4618      	mov	r0, r3
 80126a0:	f011 fdd5 	bl	802424e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 80126a4:	f7ff fe46 	bl	8012334 <_ZN8touchgfx3HAL3lcdEv>
 80126a8:	4603      	mov	r3, r0
 80126aa:	4618      	mov	r0, r3
 80126ac:	f011 fe4a 	bl	8024344 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>
}
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	4618      	mov	r0, r3
 80126b4:	3710      	adds	r7, #16
 80126b6:	46bd      	mov	sp, r7
 80126b8:	bd80      	pop	{r7, pc}
 80126ba:	bf00      	nop
 80126bc:	0802e714 	.word	0x0802e714

080126c0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 80126c0:	b480      	push	{r7}
 80126c2:	b083      	sub	sp, #12
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	6078      	str	r0, [r7, #4]
 80126c8:	6039      	str	r1, [r7, #0]
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	4618      	mov	r0, r3
 80126ce:	370c      	adds	r7, #12
 80126d0:	46bd      	mov	sp, r7
 80126d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d6:	4770      	bx	lr

080126d8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80126d8:	b580      	push	{r7, lr}
 80126da:	b082      	sub	sp, #8
 80126dc:	af00      	add	r7, sp, #0
 80126de:	6078      	str	r0, [r7, #4]
 80126e0:	6039      	str	r1, [r7, #0]
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	683a      	ldr	r2, [r7, #0]
 80126e6:	4611      	mov	r1, r2
 80126e8:	4618      	mov	r0, r3
 80126ea:	f7ff ffe9 	bl	80126c0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 80126ee:	683b      	ldr	r3, [r7, #0]
 80126f0:	685a      	ldr	r2, [r3, #4]
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	605a      	str	r2, [r3, #4]
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	683a      	ldr	r2, [r7, #0]
 80126fa:	3308      	adds	r3, #8
 80126fc:	3208      	adds	r2, #8
 80126fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012702:	e883 0003 	stmia.w	r3, {r0, r1}
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	4618      	mov	r0, r3
 801270a:	3708      	adds	r7, #8
 801270c:	46bd      	mov	sp, r7
 801270e:	bd80      	pop	{r7, pc}

08012710 <_ZN23FrontendApplicationBase26gotomainScreenNoTransitionEv>:
 */

// main

void FrontendApplicationBase::gotomainScreenNoTransition()
{
 8012710:	b590      	push	{r4, r7, lr}
 8012712:	b089      	sub	sp, #36	; 0x24
 8012714:	af00      	add	r7, sp, #0
 8012716:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotomainScreenNoTransitionImpl);
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 801271e:	4b10      	ldr	r3, [pc, #64]	; (8012760 <_ZN23FrontendApplicationBase26gotomainScreenNoTransitionEv+0x50>)
 8012720:	61bb      	str	r3, [r7, #24]
 8012722:	2300      	movs	r3, #0
 8012724:	61fb      	str	r3, [r7, #28]
 8012726:	f107 0008 	add.w	r0, r7, #8
 801272a:	f107 0318 	add.w	r3, r7, #24
 801272e:	cb0c      	ldmia	r3, {r2, r3}
 8012730:	6879      	ldr	r1, [r7, #4]
 8012732:	f000 f85f 	bl	80127f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8012736:	f107 0308 	add.w	r3, r7, #8
 801273a:	4619      	mov	r1, r3
 801273c:	4620      	mov	r0, r4
 801273e:	f7ff ffcb 	bl	80126d8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8012742:	f107 0308 	add.w	r3, r7, #8
 8012746:	4618      	mov	r0, r3
 8012748:	f000 fa0a 	bl	8012b60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8012758:	bf00      	nop
 801275a:	3724      	adds	r7, #36	; 0x24
 801275c:	46bd      	mov	sp, r7
 801275e:	bd90      	pop	{r4, r7, pc}
 8012760:	08012765 	.word	0x08012765

08012764 <_ZN23FrontendApplicationBase30gotomainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotomainScreenNoTransitionImpl()
{
 8012764:	b580      	push	{r7, lr}
 8012766:	b084      	sub	sp, #16
 8012768:	af02      	add	r7, sp, #8
 801276a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<mainView, mainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8012778:	461a      	mov	r2, r3
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8012780:	9300      	str	r3, [sp, #0]
 8012782:	4b04      	ldr	r3, [pc, #16]	; (8012794 <_ZN23FrontendApplicationBase30gotomainScreenNoTransitionImplEv+0x30>)
 8012784:	4804      	ldr	r0, [pc, #16]	; (8012798 <_ZN23FrontendApplicationBase30gotomainScreenNoTransitionImplEv+0x34>)
 8012786:	f000 f867 	bl	8012858 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801278a:	bf00      	nop
 801278c:	3708      	adds	r7, #8
 801278e:	46bd      	mov	sp, r7
 8012790:	bd80      	pop	{r7, pc}
 8012792:	bf00      	nop
 8012794:	2000af90 	.word	0x2000af90
 8012798:	2000af8c 	.word	0x2000af8c

0801279c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 801279c:	b480      	push	{r7}
 801279e:	b083      	sub	sp, #12
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	6078      	str	r0, [r7, #4]
 80127a4:	4a04      	ldr	r2, [pc, #16]	; (80127b8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	601a      	str	r2, [r3, #0]
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	4618      	mov	r0, r3
 80127ae:	370c      	adds	r7, #12
 80127b0:	46bd      	mov	sp, r7
 80127b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b6:	4770      	bx	lr
 80127b8:	0802e7f8 	.word	0x0802e7f8

080127bc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 80127bc:	b580      	push	{r7, lr}
 80127be:	b082      	sub	sp, #8
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	4618      	mov	r0, r3
 80127c8:	f7ff ffe8 	bl	801279c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80127cc:	4a08      	ldr	r2, [pc, #32]	; (80127f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	601a      	str	r2, [r3, #0]
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	2200      	movs	r2, #0
 80127d6:	605a      	str	r2, [r3, #4]
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	2200      	movs	r2, #0
 80127dc:	609a      	str	r2, [r3, #8]
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	2200      	movs	r2, #0
 80127e2:	60da      	str	r2, [r3, #12]
    {
    }
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	4618      	mov	r0, r3
 80127e8:	3708      	adds	r7, #8
 80127ea:	46bd      	mov	sp, r7
 80127ec:	bd80      	pop	{r7, pc}
 80127ee:	bf00      	nop
 80127f0:	0802e768 	.word	0x0802e768

080127f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b084      	sub	sp, #16
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	60f8      	str	r0, [r7, #12]
 80127fc:	60b9      	str	r1, [r7, #8]
 80127fe:	4639      	mov	r1, r7
 8012800:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	4618      	mov	r0, r3
 8012808:	f7ff ffc8 	bl	801279c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 801280c:	4a08      	ldr	r2, [pc, #32]	; (8012830 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	601a      	str	r2, [r3, #0]
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	68ba      	ldr	r2, [r7, #8]
 8012816:	605a      	str	r2, [r3, #4]
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	3308      	adds	r3, #8
 801281c:	463a      	mov	r2, r7
 801281e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012822:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	4618      	mov	r0, r3
 801282a:	3710      	adds	r7, #16
 801282c:	46bd      	mov	sp, r7
 801282e:	bd80      	pop	{r7, pc}
 8012830:	0802e768 	.word	0x0802e768

08012834 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8012834:	b580      	push	{r7, lr}
 8012836:	b082      	sub	sp, #8
 8012838:	af00      	add	r7, sp, #0
 801283a:	6078      	str	r0, [r7, #4]
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	4618      	mov	r0, r3
 8012840:	f7ff fd94 	bl	801236c <_ZN8touchgfx10TransitionC1Ev>
 8012844:	4a03      	ldr	r2, [pc, #12]	; (8012854 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	601a      	str	r2, [r3, #0]
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	4618      	mov	r0, r3
 801284e:	3708      	adds	r7, #8
 8012850:	46bd      	mov	sp, r7
 8012852:	bd80      	pop	{r7, pc}
 8012854:	0802e6f0 	.word	0x0802e6f0

08012858 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8012858:	b590      	push	{r4, r7, lr}
 801285a:	b08f      	sub	sp, #60	; 0x3c
 801285c:	af00      	add	r7, sp, #0
 801285e:	60f8      	str	r0, [r7, #12]
 8012860:	60b9      	str	r1, [r7, #8]
 8012862:	607a      	str	r2, [r7, #4]
 8012864:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	689a      	ldr	r2, [r3, #8]
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	689b      	ldr	r3, [r3, #8]
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	3320      	adds	r3, #32
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	4610      	mov	r0, r2
 8012876:	4798      	blx	r3
 8012878:	4603      	mov	r3, r0
 801287a:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 801287e:	d205      	bcs.n	801288c <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8012880:	4b7d      	ldr	r3, [pc, #500]	; (8012a78 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8012882:	4a7e      	ldr	r2, [pc, #504]	; (8012a7c <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8012884:	21a3      	movs	r1, #163	; 0xa3
 8012886:	487e      	ldr	r0, [pc, #504]	; (8012a80 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8012888:	f01a f94e 	bl	802cb28 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	685a      	ldr	r2, [r3, #4]
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	685b      	ldr	r3, [r3, #4]
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	3320      	adds	r3, #32
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	4610      	mov	r0, r2
 801289c:	4798      	blx	r3
 801289e:	4603      	mov	r3, r0
 80128a0:	2b0f      	cmp	r3, #15
 80128a2:	d805      	bhi.n	80128b0 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 80128a4:	4b77      	ldr	r3, [pc, #476]	; (8012a84 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80128a6:	4a75      	ldr	r2, [pc, #468]	; (8012a7c <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 80128a8:	21a4      	movs	r1, #164	; 0xa4
 80128aa:	4875      	ldr	r0, [pc, #468]	; (8012a80 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80128ac:	f01a f93c 	bl	802cb28 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	68da      	ldr	r2, [r3, #12]
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	68db      	ldr	r3, [r3, #12]
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	3320      	adds	r3, #32
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	4610      	mov	r0, r2
 80128c0:	4798      	blx	r3
 80128c2:	4603      	mov	r3, r0
 80128c4:	2b0b      	cmp	r3, #11
 80128c6:	d805      	bhi.n	80128d4 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
 80128c8:	4b6f      	ldr	r3, [pc, #444]	; (8012a88 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80128ca:	4a6c      	ldr	r2, [pc, #432]	; (8012a7c <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 80128cc:	21a5      	movs	r1, #165	; 0xa5
 80128ce:	486c      	ldr	r0, [pc, #432]	; (8012a80 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80128d0:	f01a f92a 	bl	802cb28 <__assert_func>
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80128d8:	68bb      	ldr	r3, [r7, #8]
 80128da:	627b      	str	r3, [r7, #36]	; 0x24
 80128dc:	683b      	ldr	r3, [r7, #0]
 80128de:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 80128e0:	f008 fce8 	bl	801b2b4 <_ZN8touchgfx11Application11getInstanceEv>
 80128e4:	4603      	mov	r3, r0
 80128e6:	4618      	mov	r0, r3
 80128e8:	f7ff fcea 	bl	80122c0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80128ec:	6a3b      	ldr	r3, [r7, #32]
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d008      	beq.n	8012906 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
        (*currentTrans)->tearDown();
 80128f4:	6a3b      	ldr	r3, [r7, #32]
 80128f6:	681a      	ldr	r2, [r3, #0]
 80128f8:	6a3b      	ldr	r3, [r7, #32]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	330c      	adds	r3, #12
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	4610      	mov	r0, r2
 8012904:	4798      	blx	r3
    if (*currentTrans)
 8012906:	6a3b      	ldr	r3, [r7, #32]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	2b00      	cmp	r3, #0
 801290c:	d007      	beq.n	801291e <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
        (*currentTrans)->~Transition();
 801290e:	6a3b      	ldr	r3, [r7, #32]
 8012910:	681a      	ldr	r2, [r3, #0]
 8012912:	6a3b      	ldr	r3, [r7, #32]
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	4610      	mov	r0, r2
 801291c:	4798      	blx	r3
    if (*currentScreen)
 801291e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d008      	beq.n	8012938 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
        (*currentScreen)->tearDownScreen();
 8012926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012928:	681a      	ldr	r2, [r3, #0]
 801292a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	3314      	adds	r3, #20
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	4610      	mov	r0, r2
 8012936:	4798      	blx	r3
    if (*currentPresenter)
 8012938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d008      	beq.n	8012952 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfa>
        (*currentPresenter)->deactivate();
 8012940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012942:	681a      	ldr	r2, [r3, #0]
 8012944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	3304      	adds	r3, #4
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	4610      	mov	r0, r2
 8012950:	4798      	blx	r3
    if (*currentScreen)
 8012952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d007      	beq.n	801296a <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
        (*currentScreen)->~Screen();
 801295a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801295c:	681a      	ldr	r2, [r3, #0]
 801295e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	4610      	mov	r0, r2
 8012968:	4798      	blx	r3
    if (*currentPresenter)
 801296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d008      	beq.n	8012984 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
        (*currentPresenter)->~Presenter();
 8012972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012974:	681a      	ldr	r2, [r3, #0]
 8012976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	3308      	adds	r3, #8
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	4610      	mov	r0, r2
 8012982:	4798      	blx	r3
}
 8012984:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	68db      	ldr	r3, [r3, #12]
 801298a:	2100      	movs	r1, #0
 801298c:	4618      	mov	r0, r3
 801298e:	f000 f87d 	bl	8012a8c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8012992:	4603      	mov	r3, r0
 8012994:	4619      	mov	r1, r3
 8012996:	200c      	movs	r0, #12
 8012998:	f7ff fbfc 	bl	8012194 <_ZnwjPv>
 801299c:	4604      	mov	r4, r0
 801299e:	4620      	mov	r0, r4
 80129a0:	f7ff ff48 	bl	8012834 <_ZN8touchgfx12NoTransitionC1Ev>
 80129a4:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	689b      	ldr	r3, [r3, #8]
 80129aa:	2100      	movs	r1, #0
 80129ac:	4618      	mov	r0, r3
 80129ae:	f000 f880 	bl	8012ab2 <_ZN8touchgfx17AbstractPartition2atI8mainViewEERT_t>
 80129b2:	4603      	mov	r3, r0
 80129b4:	4619      	mov	r1, r3
 80129b6:	f44f 701c 	mov.w	r0, #624	; 0x270
 80129ba:	f7ff fbeb 	bl	8012194 <_ZnwjPv>
 80129be:	4604      	mov	r4, r0
 80129c0:	4620      	mov	r0, r4
 80129c2:	f001 facb 	bl	8013f5c <_ZN8mainViewC1Ev>
 80129c6:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	685b      	ldr	r3, [r3, #4]
 80129cc:	2100      	movs	r1, #0
 80129ce:	4618      	mov	r0, r3
 80129d0:	f000 f882 	bl	8012ad8 <_ZN8touchgfx17AbstractPartition2atI13mainPresenterEERT_t>
 80129d4:	4603      	mov	r3, r0
 80129d6:	4619      	mov	r1, r3
 80129d8:	2010      	movs	r0, #16
 80129da:	f7ff fbdb 	bl	8012194 <_ZnwjPv>
 80129de:	4604      	mov	r4, r0
 80129e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80129e2:	4620      	mov	r0, r4
 80129e4:	f001 fa62 	bl	8013eac <_ZN13mainPresenterC1ER8mainView>
 80129e8:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 80129ea:	683b      	ldr	r3, [r7, #0]
 80129ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80129ee:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80129f0:	68bb      	ldr	r3, [r7, #8]
 80129f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80129f4:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80129fa:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80129fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d002      	beq.n	8012a08 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 8012a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a04:	3304      	adds	r3, #4
 8012a06:	e000      	b.n	8012a0a <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 8012a08:	2300      	movs	r3, #0
 8012a0a:	4619      	mov	r1, r3
 8012a0c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8012a0e:	f7ff fd9d 	bl	801254c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8012a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a14:	3304      	adds	r3, #4
 8012a16:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8012a18:	4618      	mov	r0, r3
 8012a1a:	f7ff fe0a 	bl	8012632 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8012a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012a22:	4618      	mov	r0, r3
 8012a24:	f000 f86b 	bl	8012afe <_ZN8touchgfx4ViewI13mainPresenterE4bindERS1_>
 8012a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a2a:	61fb      	str	r3, [r7, #28]
 8012a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a2e:	61bb      	str	r3, [r7, #24]
 8012a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a32:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8012a34:	69fb      	ldr	r3, [r7, #28]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	330c      	adds	r3, #12
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	69f8      	ldr	r0, [r7, #28]
 8012a3e:	4798      	blx	r3
    newPresenter->activate();
 8012a40:	69bb      	ldr	r3, [r7, #24]
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	69b8      	ldr	r0, [r7, #24]
 8012a48:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8012a4a:	6979      	ldr	r1, [r7, #20]
 8012a4c:	69f8      	ldr	r0, [r7, #28]
 8012a4e:	f00a f9eb 	bl	801ce28 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8012a52:	697b      	ldr	r3, [r7, #20]
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	3310      	adds	r3, #16
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	6978      	ldr	r0, [r7, #20]
 8012a5c:	4798      	blx	r3
    newTransition->invalidate();
 8012a5e:	697b      	ldr	r3, [r7, #20]
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	3314      	adds	r3, #20
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	6978      	ldr	r0, [r7, #20]
 8012a68:	4798      	blx	r3
}
 8012a6a:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8012a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8012a6e:	4618      	mov	r0, r3
 8012a70:	373c      	adds	r7, #60	; 0x3c
 8012a72:	46bd      	mov	sp, r7
 8012a74:	bd90      	pop	{r4, r7, pc}
 8012a76:	bf00      	nop
 8012a78:	0802dc74 	.word	0x0802dc74
 8012a7c:	0802dd04 	.word	0x0802dd04
 8012a80:	0802de04 	.word	0x0802de04
 8012a84:	0802de48 	.word	0x0802de48
 8012a88:	0802deec 	.word	0x0802deec

08012a8c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8012a8c:	b580      	push	{r7, lr}
 8012a8e:	b082      	sub	sp, #8
 8012a90:	af00      	add	r7, sp, #0
 8012a92:	6078      	str	r0, [r7, #4]
 8012a94:	460b      	mov	r3, r1
 8012a96:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	3324      	adds	r3, #36	; 0x24
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	887a      	ldrh	r2, [r7, #2]
 8012aa2:	4611      	mov	r1, r2
 8012aa4:	6878      	ldr	r0, [r7, #4]
 8012aa6:	4798      	blx	r3
 8012aa8:	4603      	mov	r3, r0
    }
 8012aaa:	4618      	mov	r0, r3
 8012aac:	3708      	adds	r7, #8
 8012aae:	46bd      	mov	sp, r7
 8012ab0:	bd80      	pop	{r7, pc}

08012ab2 <_ZN8touchgfx17AbstractPartition2atI8mainViewEERT_t>:
    T& at(const uint16_t index)
 8012ab2:	b580      	push	{r7, lr}
 8012ab4:	b082      	sub	sp, #8
 8012ab6:	af00      	add	r7, sp, #0
 8012ab8:	6078      	str	r0, [r7, #4]
 8012aba:	460b      	mov	r3, r1
 8012abc:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	3324      	adds	r3, #36	; 0x24
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	887a      	ldrh	r2, [r7, #2]
 8012ac8:	4611      	mov	r1, r2
 8012aca:	6878      	ldr	r0, [r7, #4]
 8012acc:	4798      	blx	r3
 8012ace:	4603      	mov	r3, r0
    }
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	3708      	adds	r7, #8
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	bd80      	pop	{r7, pc}

08012ad8 <_ZN8touchgfx17AbstractPartition2atI13mainPresenterEERT_t>:
    T& at(const uint16_t index)
 8012ad8:	b580      	push	{r7, lr}
 8012ada:	b082      	sub	sp, #8
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	6078      	str	r0, [r7, #4]
 8012ae0:	460b      	mov	r3, r1
 8012ae2:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	3324      	adds	r3, #36	; 0x24
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	887a      	ldrh	r2, [r7, #2]
 8012aee:	4611      	mov	r1, r2
 8012af0:	6878      	ldr	r0, [r7, #4]
 8012af2:	4798      	blx	r3
 8012af4:	4603      	mov	r3, r0
    }
 8012af6:	4618      	mov	r0, r3
 8012af8:	3708      	adds	r7, #8
 8012afa:	46bd      	mov	sp, r7
 8012afc:	bd80      	pop	{r7, pc}

08012afe <_ZN8touchgfx4ViewI13mainPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 8012afe:	b480      	push	{r7}
 8012b00:	b083      	sub	sp, #12
 8012b02:	af00      	add	r7, sp, #0
 8012b04:	6078      	str	r0, [r7, #4]
 8012b06:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	683a      	ldr	r2, [r7, #0]
 8012b0c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8012b0e:	bf00      	nop
 8012b10:	370c      	adds	r7, #12
 8012b12:	46bd      	mov	sp, r7
 8012b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b18:	4770      	bx	lr
	...

08012b1c <_ZN8touchgfx12NoTransitionD1Ev>:
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b082      	sub	sp, #8
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	6078      	str	r0, [r7, #4]
 8012b24:	4a05      	ldr	r2, [pc, #20]	; (8012b3c <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	601a      	str	r2, [r3, #0]
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	f7ff fc33 	bl	8012398 <_ZN8touchgfx10TransitionD1Ev>
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	4618      	mov	r0, r3
 8012b36:	3708      	adds	r7, #8
 8012b38:	46bd      	mov	sp, r7
 8012b3a:	bd80      	pop	{r7, pc}
 8012b3c:	0802e6f0 	.word	0x0802e6f0

08012b40 <_ZN8touchgfx12NoTransitionD0Ev>:
 8012b40:	b580      	push	{r7, lr}
 8012b42:	b082      	sub	sp, #8
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	6078      	str	r0, [r7, #4]
 8012b48:	6878      	ldr	r0, [r7, #4]
 8012b4a:	f7ff ffe7 	bl	8012b1c <_ZN8touchgfx12NoTransitionD1Ev>
 8012b4e:	210c      	movs	r1, #12
 8012b50:	6878      	ldr	r0, [r7, #4]
 8012b52:	f019 f9f8 	bl	802bf46 <_ZdlPvj>
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	4618      	mov	r0, r3
 8012b5a:	3708      	adds	r7, #8
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	bd80      	pop	{r7, pc}

08012b60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b082      	sub	sp, #8
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]
 8012b68:	4a05      	ldr	r2, [pc, #20]	; (8012b80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	601a      	str	r2, [r3, #0]
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	4618      	mov	r0, r3
 8012b72:	f7ff fbb3 	bl	80122dc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	4618      	mov	r0, r3
 8012b7a:	3708      	adds	r7, #8
 8012b7c:	46bd      	mov	sp, r7
 8012b7e:	bd80      	pop	{r7, pc}
 8012b80:	0802e768 	.word	0x0802e768

08012b84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b082      	sub	sp, #8
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	6078      	str	r0, [r7, #4]
 8012b8c:	6878      	ldr	r0, [r7, #4]
 8012b8e:	f7ff ffe7 	bl	8012b60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8012b92:	2110      	movs	r1, #16
 8012b94:	6878      	ldr	r0, [r7, #4]
 8012b96:	f019 f9d6 	bl	802bf46 <_ZdlPvj>
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	3708      	adds	r7, #8
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	bd80      	pop	{r7, pc}

08012ba4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b082      	sub	sp, #8
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	685b      	ldr	r3, [r3, #4]
 8012bb0:	687a      	ldr	r2, [r7, #4]
 8012bb2:	68d2      	ldr	r2, [r2, #12]
 8012bb4:	1052      	asrs	r2, r2, #1
 8012bb6:	1899      	adds	r1, r3, r2
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	68db      	ldr	r3, [r3, #12]
 8012bbc:	f003 0301 	and.w	r3, r3, #1
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d102      	bne.n	8012bca <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	689b      	ldr	r3, [r3, #8]
 8012bc8:	e00a      	b.n	8012be0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	685b      	ldr	r3, [r3, #4]
 8012bce:	687a      	ldr	r2, [r7, #4]
 8012bd0:	68d2      	ldr	r2, [r2, #12]
 8012bd2:	1052      	asrs	r2, r2, #1
 8012bd4:	4413      	add	r3, r2
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	687a      	ldr	r2, [r7, #4]
 8012bda:	6892      	ldr	r2, [r2, #8]
 8012bdc:	4413      	add	r3, r2
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	4608      	mov	r0, r1
 8012be2:	4798      	blx	r3
    }
 8012be4:	bf00      	nop
 8012be6:	3708      	adds	r7, #8
 8012be8:	46bd      	mov	sp, r7
 8012bea:	bd80      	pop	{r7, pc}

08012bec <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8012bec:	b480      	push	{r7}
 8012bee:	b083      	sub	sp, #12
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	685b      	ldr	r3, [r3, #4]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d010      	beq.n	8012c1e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	689b      	ldr	r3, [r3, #8]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d107      	bne.n	8012c14 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	68db      	ldr	r3, [r3, #12]
 8012c08:	f003 0301 	and.w	r3, r3, #1
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d101      	bne.n	8012c14 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8012c10:	2301      	movs	r3, #1
 8012c12:	e000      	b.n	8012c16 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8012c14:	2300      	movs	r3, #0
 8012c16:	2b01      	cmp	r3, #1
 8012c18:	d001      	beq.n	8012c1e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8012c1a:	2301      	movs	r3, #1
 8012c1c:	e000      	b.n	8012c20 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8012c1e:	2300      	movs	r3, #0
    }
 8012c20:	4618      	mov	r0, r3
 8012c22:	370c      	adds	r7, #12
 8012c24:	46bd      	mov	sp, r7
 8012c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c2a:	4770      	bx	lr

08012c2c <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 8012c2c:	b480      	push	{r7}
 8012c2e:	b083      	sub	sp, #12
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	6078      	str	r0, [r7, #4]
 8012c34:	6039      	str	r1, [r7, #0]
        : color(col)
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	683a      	ldr	r2, [r7, #0]
 8012c3a:	601a      	str	r2, [r3, #0]
    {
    }
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	4618      	mov	r0, r3
 8012c40:	370c      	adds	r7, #12
 8012c42:	46bd      	mov	sp, r7
 8012c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c48:	4770      	bx	lr

08012c4a <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8012c4a:	b480      	push	{r7}
 8012c4c:	b083      	sub	sp, #12
 8012c4e:	af00      	add	r7, sp, #0
 8012c50:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	2200      	movs	r2, #0
 8012c56:	801a      	strh	r2, [r3, #0]
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	2200      	movs	r2, #0
 8012c5c:	805a      	strh	r2, [r3, #2]
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	2200      	movs	r2, #0
 8012c62:	809a      	strh	r2, [r3, #4]
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	2200      	movs	r2, #0
 8012c68:	80da      	strh	r2, [r3, #6]
    {
    }
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	370c      	adds	r7, #12
 8012c70:	46bd      	mov	sp, r7
 8012c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c76:	4770      	bx	lr

08012c78 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 8012c78:	b480      	push	{r7}
 8012c7a:	b083      	sub	sp, #12
 8012c7c:	af00      	add	r7, sp, #0
 8012c7e:	6078      	str	r0, [r7, #4]
 8012c80:	460b      	mov	r3, r1
 8012c82:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	887a      	ldrh	r2, [r7, #2]
 8012c88:	801a      	strh	r2, [r3, #0]
    {
    }
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	4618      	mov	r0, r3
 8012c8e:	370c      	adds	r7, #12
 8012c90:	46bd      	mov	sp, r7
 8012c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c96:	4770      	bx	lr

08012c98 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b082      	sub	sp, #8
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 8012ca0:	4a14      	ldr	r2, [pc, #80]	; (8012cf4 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	601a      	str	r2, [r3, #0]
        : rect(),
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	3304      	adds	r3, #4
 8012caa:	4618      	mov	r0, r3
 8012cac:	f7ff ffcd 	bl	8012c4a <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	330c      	adds	r3, #12
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	f7ff ffc8 	bl	8012c4a <_ZN8touchgfx4RectC1Ev>
          parent(0),
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	2200      	movs	r2, #0
 8012cbe:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	2200      	movs	r2, #0
 8012cc4:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	2200      	movs	r2, #0
 8012cca:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	2200      	movs	r2, #0
 8012cd0:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	2200      	movs	r2, #0
 8012cd6:	845a      	strh	r2, [r3, #34]	; 0x22
          touchable(false),
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	2200      	movs	r2, #0
 8012cdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          visible(true)
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	2201      	movs	r2, #1
 8012ce4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	4618      	mov	r0, r3
 8012cec:	3708      	adds	r7, #8
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	bd80      	pop	{r7, pc}
 8012cf2:	bf00      	nop
 8012cf4:	0802f744 	.word	0x0802f744

08012cf8 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8012cf8:	b480      	push	{r7}
 8012cfa:	b083      	sub	sp, #12
 8012cfc:	af00      	add	r7, sp, #0
 8012cfe:	6078      	str	r0, [r7, #4]
    {
 8012d00:	4a04      	ldr	r2, [pc, #16]	; (8012d14 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	601a      	str	r2, [r3, #0]
    }
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	4618      	mov	r0, r3
 8012d0a:	370c      	adds	r7, #12
 8012d0c:	46bd      	mov	sp, r7
 8012d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d12:	4770      	bx	lr
 8012d14:	0802f744 	.word	0x0802f744

08012d18 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8012d18:	b580      	push	{r7, lr}
 8012d1a:	b082      	sub	sp, #8
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	6078      	str	r0, [r7, #4]
    }
 8012d20:	6878      	ldr	r0, [r7, #4]
 8012d22:	f7ff ffe9 	bl	8012cf8 <_ZN8touchgfx8DrawableD1Ev>
 8012d26:	2128      	movs	r1, #40	; 0x28
 8012d28:	6878      	ldr	r0, [r7, #4]
 8012d2a:	f019 f90c 	bl	802bf46 <_ZdlPvj>
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	4618      	mov	r0, r3
 8012d32:	3708      	adds	r7, #8
 8012d34:	46bd      	mov	sp, r7
 8012d36:	bd80      	pop	{r7, pc}

08012d38 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 8012d38:	b580      	push	{r7, lr}
 8012d3a:	b082      	sub	sp, #8
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d005      	beq.n	8012d56 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	3314      	adds	r3, #20
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	6878      	ldr	r0, [r7, #4]
 8012d54:	4798      	blx	r3
        }
    }
 8012d56:	bf00      	nop
 8012d58:	3708      	adds	r7, #8
 8012d5a:	46bd      	mov	sp, r7
 8012d5c:	bd80      	pop	{r7, pc}

08012d5e <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8012d5e:	b480      	push	{r7}
 8012d60:	b083      	sub	sp, #12
 8012d62:	af00      	add	r7, sp, #0
 8012d64:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8012d66:	2300      	movs	r3, #0
    }
 8012d68:	4618      	mov	r0, r3
 8012d6a:	370c      	adds	r7, #12
 8012d6c:	46bd      	mov	sp, r7
 8012d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d72:	4770      	bx	lr

08012d74 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8012d74:	b580      	push	{r7, lr}
 8012d76:	b084      	sub	sp, #16
 8012d78:	af00      	add	r7, sp, #0
 8012d7a:	60f8      	str	r0, [r7, #12]
 8012d7c:	4608      	mov	r0, r1
 8012d7e:	4611      	mov	r1, r2
 8012d80:	461a      	mov	r2, r3
 8012d82:	4603      	mov	r3, r0
 8012d84:	817b      	strh	r3, [r7, #10]
 8012d86:	460b      	mov	r3, r1
 8012d88:	813b      	strh	r3, [r7, #8]
 8012d8a:	4613      	mov	r3, r2
 8012d8c:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8012d8e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012d92:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012d96:	4619      	mov	r1, r3
 8012d98:	68f8      	ldr	r0, [r7, #12]
 8012d9a:	f000 f82a 	bl	8012df2 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8012d9e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8012da2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012da6:	4619      	mov	r1, r3
 8012da8:	68f8      	ldr	r0, [r7, #12]
 8012daa:	f000 f87e 	bl	8012eaa <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8012dae:	bf00      	nop
 8012db0:	3710      	adds	r7, #16
 8012db2:	46bd      	mov	sp, r7
 8012db4:	bd80      	pop	{r7, pc}

08012db6 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8012db6:	b480      	push	{r7}
 8012db8:	b083      	sub	sp, #12
 8012dba:	af00      	add	r7, sp, #0
 8012dbc:	6078      	str	r0, [r7, #4]
 8012dbe:	460b      	mov	r3, r1
 8012dc0:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	887a      	ldrh	r2, [r7, #2]
 8012dc6:	809a      	strh	r2, [r3, #4]
    }
 8012dc8:	bf00      	nop
 8012dca:	370c      	adds	r7, #12
 8012dcc:	46bd      	mov	sp, r7
 8012dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd2:	4770      	bx	lr

08012dd4 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8012dd4:	b480      	push	{r7}
 8012dd6:	b083      	sub	sp, #12
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	6078      	str	r0, [r7, #4]
 8012ddc:	460b      	mov	r3, r1
 8012dde:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	887a      	ldrh	r2, [r7, #2]
 8012de4:	80da      	strh	r2, [r3, #6]
    }
 8012de6:	bf00      	nop
 8012de8:	370c      	adds	r7, #12
 8012dea:	46bd      	mov	sp, r7
 8012dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df0:	4770      	bx	lr

08012df2 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8012df2:	b580      	push	{r7, lr}
 8012df4:	b082      	sub	sp, #8
 8012df6:	af00      	add	r7, sp, #0
 8012df8:	6078      	str	r0, [r7, #4]
 8012dfa:	460b      	mov	r3, r1
 8012dfc:	807b      	strh	r3, [r7, #2]
 8012dfe:	4613      	mov	r3, r2
 8012e00:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	3330      	adds	r3, #48	; 0x30
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012e0e:	4611      	mov	r1, r2
 8012e10:	6878      	ldr	r0, [r7, #4]
 8012e12:	4798      	blx	r3
        setY(y);
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	3334      	adds	r3, #52	; 0x34
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8012e20:	4611      	mov	r1, r2
 8012e22:	6878      	ldr	r0, [r7, #4]
 8012e24:	4798      	blx	r3
    }
 8012e26:	bf00      	nop
 8012e28:	3708      	adds	r7, #8
 8012e2a:	46bd      	mov	sp, r7
 8012e2c:	bd80      	pop	{r7, pc}

08012e2e <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8012e2e:	b480      	push	{r7}
 8012e30:	b083      	sub	sp, #12
 8012e32:	af00      	add	r7, sp, #0
 8012e34:	6078      	str	r0, [r7, #4]
 8012e36:	460b      	mov	r3, r1
 8012e38:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	887a      	ldrh	r2, [r7, #2]
 8012e3e:	811a      	strh	r2, [r3, #8]
    }
 8012e40:	bf00      	nop
 8012e42:	370c      	adds	r7, #12
 8012e44:	46bd      	mov	sp, r7
 8012e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4a:	4770      	bx	lr

08012e4c <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8012e4c:	b480      	push	{r7}
 8012e4e:	b083      	sub	sp, #12
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	6078      	str	r0, [r7, #4]
 8012e54:	460b      	mov	r3, r1
 8012e56:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	887a      	ldrh	r2, [r7, #2]
 8012e5c:	815a      	strh	r2, [r3, #10]
    }
 8012e5e:	bf00      	nop
 8012e60:	370c      	adds	r7, #12
 8012e62:	46bd      	mov	sp, r7
 8012e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e68:	4770      	bx	lr

08012e6a <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8012e6a:	b480      	push	{r7}
 8012e6c:	b083      	sub	sp, #12
 8012e6e:	af00      	add	r7, sp, #0
 8012e70:	6078      	str	r0, [r7, #4]
    {
    }
 8012e72:	bf00      	nop
 8012e74:	370c      	adds	r7, #12
 8012e76:	46bd      	mov	sp, r7
 8012e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e7c:	4770      	bx	lr

08012e7e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8012e7e:	b480      	push	{r7}
 8012e80:	b083      	sub	sp, #12
 8012e82:	af00      	add	r7, sp, #0
 8012e84:	6078      	str	r0, [r7, #4]
 8012e86:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8012e88:	bf00      	nop
 8012e8a:	370c      	adds	r7, #12
 8012e8c:	46bd      	mov	sp, r7
 8012e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e92:	4770      	bx	lr

08012e94 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8012e94:	b480      	push	{r7}
 8012e96:	b083      	sub	sp, #12
 8012e98:	af00      	add	r7, sp, #0
 8012e9a:	6078      	str	r0, [r7, #4]
 8012e9c:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8012e9e:	bf00      	nop
 8012ea0:	370c      	adds	r7, #12
 8012ea2:	46bd      	mov	sp, r7
 8012ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea8:	4770      	bx	lr

08012eaa <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 8012eaa:	b580      	push	{r7, lr}
 8012eac:	b082      	sub	sp, #8
 8012eae:	af00      	add	r7, sp, #0
 8012eb0:	6078      	str	r0, [r7, #4]
 8012eb2:	460b      	mov	r3, r1
 8012eb4:	807b      	strh	r3, [r7, #2]
 8012eb6:	4613      	mov	r3, r2
 8012eb8:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	3338      	adds	r3, #56	; 0x38
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012ec6:	4611      	mov	r1, r2
 8012ec8:	6878      	ldr	r0, [r7, #4]
 8012eca:	4798      	blx	r3
        setHeight(height);
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	333c      	adds	r3, #60	; 0x3c
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	f9b7 2000 	ldrsh.w	r2, [r7]
 8012ed8:	4611      	mov	r1, r2
 8012eda:	6878      	ldr	r0, [r7, #4]
 8012edc:	4798      	blx	r3
    }
 8012ede:	bf00      	nop
 8012ee0:	3708      	adds	r7, #8
 8012ee2:	46bd      	mov	sp, r7
 8012ee4:	bd80      	pop	{r7, pc}

08012ee6 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8012ee6:	b480      	push	{r7}
 8012ee8:	b083      	sub	sp, #12
 8012eea:	af00      	add	r7, sp, #0
 8012eec:	6078      	str	r0, [r7, #4]
 8012eee:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8012ef0:	bf00      	nop
 8012ef2:	370c      	adds	r7, #12
 8012ef4:	46bd      	mov	sp, r7
 8012ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012efa:	4770      	bx	lr

08012efc <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8012efc:	b480      	push	{r7}
 8012efe:	b083      	sub	sp, #12
 8012f00:	af00      	add	r7, sp, #0
 8012f02:	6078      	str	r0, [r7, #4]
    {
    }
 8012f04:	bf00      	nop
 8012f06:	370c      	adds	r7, #12
 8012f08:	46bd      	mov	sp, r7
 8012f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f0e:	4770      	bx	lr

08012f10 <_ZN8touchgfx8Drawable12setTouchableEb>:
    /**
     * Controls whether this Drawable receives touch events or not.
     *
     * @param  touch If true it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 8012f10:	b480      	push	{r7}
 8012f12:	b083      	sub	sp, #12
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	6078      	str	r0, [r7, #4]
 8012f18:	460b      	mov	r3, r1
 8012f1a:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	78fa      	ldrb	r2, [r7, #3]
 8012f20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 8012f24:	bf00      	nop
 8012f26:	370c      	adds	r7, #12
 8012f28:	46bd      	mov	sp, r7
 8012f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f2e:	4770      	bx	lr

08012f30 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8012f30:	b480      	push	{r7}
 8012f32:	b083      	sub	sp, #12
 8012f34:	af00      	add	r7, sp, #0
 8012f36:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8012f3e:	4618      	mov	r0, r3
 8012f40:	370c      	adds	r7, #12
 8012f42:	46bd      	mov	sp, r7
 8012f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f48:	4770      	bx	lr

08012f4a <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8012f4a:	b480      	push	{r7}
 8012f4c:	b083      	sub	sp, #12
 8012f4e:	af00      	add	r7, sp, #0
 8012f50:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8012f58:	4618      	mov	r0, r3
 8012f5a:	370c      	adds	r7, #12
 8012f5c:	46bd      	mov	sp, r7
 8012f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f62:	4770      	bx	lr

08012f64 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8012f64:	b580      	push	{r7, lr}
 8012f66:	b082      	sub	sp, #8
 8012f68:	af00      	add	r7, sp, #0
 8012f6a:	6078      	str	r0, [r7, #4]
 8012f6c:	460b      	mov	r3, r1
 8012f6e:	807b      	strh	r3, [r7, #2]
 8012f70:	4613      	mov	r3, r2
 8012f72:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	3354      	adds	r3, #84	; 0x54
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	8879      	ldrh	r1, [r7, #2]
 8012f7e:	687a      	ldr	r2, [r7, #4]
 8012f80:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8012f84:	b292      	uxth	r2, r2
 8012f86:	1a8a      	subs	r2, r1, r2
 8012f88:	b292      	uxth	r2, r2
 8012f8a:	b210      	sxth	r0, r2
 8012f8c:	8839      	ldrh	r1, [r7, #0]
 8012f8e:	687a      	ldr	r2, [r7, #4]
 8012f90:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8012f94:	b292      	uxth	r2, r2
 8012f96:	1a8a      	subs	r2, r1, r2
 8012f98:	b292      	uxth	r2, r2
 8012f9a:	b212      	sxth	r2, r2
 8012f9c:	4601      	mov	r1, r0
 8012f9e:	6878      	ldr	r0, [r7, #4]
 8012fa0:	4798      	blx	r3
    }
 8012fa2:	bf00      	nop
 8012fa4:	3708      	adds	r7, #8
 8012fa6:	46bd      	mov	sp, r7
 8012fa8:	bd80      	pop	{r7, pc}

08012faa <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8012faa:	b480      	push	{r7}
 8012fac:	b083      	sub	sp, #12
 8012fae:	af00      	add	r7, sp, #0
 8012fb0:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012fb8:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012fc0:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012fc8:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8012fca:	bf00      	nop
 8012fcc:	370c      	adds	r7, #12
 8012fce:	46bd      	mov	sp, r7
 8012fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fd4:	4770      	bx	lr

08012fd6 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8012fd6:	b580      	push	{r7, lr}
 8012fd8:	b084      	sub	sp, #16
 8012fda:	af00      	add	r7, sp, #0
 8012fdc:	60f8      	str	r0, [r7, #12]
 8012fde:	60b9      	str	r1, [r7, #8]
 8012fe0:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 8012fe2:	68f8      	ldr	r0, [r7, #12]
 8012fe4:	f7ff ffe1 	bl	8012faa <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	681a      	ldr	r2, [r3, #0]
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	68fa      	ldr	r2, [r7, #12]
 8012ff4:	601a      	str	r2, [r3, #0]
    }
 8012ff6:	bf00      	nop
 8012ff8:	3710      	adds	r7, #16
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	bd80      	pop	{r7, pc}
	...

08013000 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8013000:	b580      	push	{r7, lr}
 8013002:	b082      	sub	sp, #8
 8013004:	af00      	add	r7, sp, #0
 8013006:	6078      	str	r0, [r7, #4]
    {
 8013008:	4a06      	ldr	r2, [pc, #24]	; (8013024 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	601a      	str	r2, [r3, #0]
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	3304      	adds	r3, #4
 8013012:	4618      	mov	r0, r3
 8013014:	f000 fb40 	bl	8013698 <_ZN8touchgfx9ContainerD1Ev>
    }
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	4618      	mov	r0, r3
 801301c:	3708      	adds	r7, #8
 801301e:	46bd      	mov	sp, r7
 8013020:	bd80      	pop	{r7, pc}
 8013022:	bf00      	nop
 8013024:	0802f848 	.word	0x0802f848

08013028 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8013028:	b580      	push	{r7, lr}
 801302a:	b082      	sub	sp, #8
 801302c:	af00      	add	r7, sp, #0
 801302e:	6078      	str	r0, [r7, #4]
    }
 8013030:	6878      	ldr	r0, [r7, #4]
 8013032:	f7ff ffe5 	bl	8013000 <_ZN8touchgfx6ScreenD1Ev>
 8013036:	213c      	movs	r1, #60	; 0x3c
 8013038:	6878      	ldr	r0, [r7, #4]
 801303a:	f018 ff84 	bl	802bf46 <_ZdlPvj>
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	4618      	mov	r0, r3
 8013042:	3708      	adds	r7, #8
 8013044:	46bd      	mov	sp, r7
 8013046:	bd80      	pop	{r7, pc}

08013048 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8013048:	b480      	push	{r7}
 801304a:	b083      	sub	sp, #12
 801304c:	af00      	add	r7, sp, #0
 801304e:	6078      	str	r0, [r7, #4]
    {
    }
 8013050:	bf00      	nop
 8013052:	370c      	adds	r7, #12
 8013054:	46bd      	mov	sp, r7
 8013056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801305a:	4770      	bx	lr

0801305c <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 801305c:	b480      	push	{r7}
 801305e:	b083      	sub	sp, #12
 8013060:	af00      	add	r7, sp, #0
 8013062:	6078      	str	r0, [r7, #4]
    {
    }
 8013064:	bf00      	nop
 8013066:	370c      	adds	r7, #12
 8013068:	46bd      	mov	sp, r7
 801306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801306e:	4770      	bx	lr

08013070 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8013070:	b480      	push	{r7}
 8013072:	b083      	sub	sp, #12
 8013074:	af00      	add	r7, sp, #0
 8013076:	6078      	str	r0, [r7, #4]
    {
    }
 8013078:	bf00      	nop
 801307a:	370c      	adds	r7, #12
 801307c:	46bd      	mov	sp, r7
 801307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013082:	4770      	bx	lr

08013084 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8013084:	b480      	push	{r7}
 8013086:	b083      	sub	sp, #12
 8013088:	af00      	add	r7, sp, #0
 801308a:	6078      	str	r0, [r7, #4]
    {
    }
 801308c:	bf00      	nop
 801308e:	370c      	adds	r7, #12
 8013090:	46bd      	mov	sp, r7
 8013092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013096:	4770      	bx	lr

08013098 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8013098:	b480      	push	{r7}
 801309a:	b083      	sub	sp, #12
 801309c:	af00      	add	r7, sp, #0
 801309e:	6078      	str	r0, [r7, #4]
 80130a0:	460b      	mov	r3, r1
 80130a2:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 80130a4:	bf00      	nop
 80130a6:	370c      	adds	r7, #12
 80130a8:	46bd      	mov	sp, r7
 80130aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ae:	4770      	bx	lr

080130b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b082      	sub	sp, #8
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
 80130b8:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	3304      	adds	r3, #4
 80130be:	6839      	ldr	r1, [r7, #0]
 80130c0:	4618      	mov	r0, r3
 80130c2:	f003 f9ef 	bl	80164a4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80130c6:	bf00      	nop
 80130c8:	3708      	adds	r7, #8
 80130ca:	46bd      	mov	sp, r7
 80130cc:	bd80      	pop	{r7, pc}

080130ce <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 80130ce:	b580      	push	{r7, lr}
 80130d0:	b084      	sub	sp, #16
 80130d2:	af00      	add	r7, sp, #0
 80130d4:	60f8      	str	r0, [r7, #12]
 80130d6:	607b      	str	r3, [r7, #4]
 80130d8:	460b      	mov	r3, r1
 80130da:	817b      	strh	r3, [r7, #10]
 80130dc:	4613      	mov	r3, r2
 80130de:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	4618      	mov	r0, r3
 80130e4:	f7ff ff24 	bl	8012f30 <_ZNK8touchgfx8Drawable9isVisibleEv>
 80130e8:	4603      	mov	r3, r0
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d008      	beq.n	8013100 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	4618      	mov	r0, r3
 80130f2:	f7ff ff2a 	bl	8012f4a <_ZNK8touchgfx8Drawable11isTouchableEv>
 80130f6:	4603      	mov	r3, r0
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d001      	beq.n	8013100 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80130fc:	2301      	movs	r3, #1
 80130fe:	e000      	b.n	8013102 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8013100:	2300      	movs	r3, #0
 8013102:	2b00      	cmp	r3, #0
 8013104:	d002      	beq.n	801310c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8013106:	68fa      	ldr	r2, [r7, #12]
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	601a      	str	r2, [r3, #0]
        }
    }
 801310c:	bf00      	nop
 801310e:	3710      	adds	r7, #16
 8013110:	46bd      	mov	sp, r7
 8013112:	bd80      	pop	{r7, pc}

08013114 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8013114:	b580      	push	{r7, lr}
 8013116:	b082      	sub	sp, #8
 8013118:	af00      	add	r7, sp, #0
 801311a:	6078      	str	r0, [r7, #4]
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	4618      	mov	r0, r3
 8013120:	f7ff fdba 	bl	8012c98 <_ZN8touchgfx8DrawableC1Ev>
 8013124:	4a03      	ldr	r2, [pc, #12]	; (8013134 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	601a      	str	r2, [r3, #0]
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	4618      	mov	r0, r3
 801312e:	3708      	adds	r7, #8
 8013130:	46bd      	mov	sp, r7
 8013132:	bd80      	pop	{r7, pc}
 8013134:	0802e8a0 	.word	0x0802e8a0

08013138 <_ZN8touchgfx6WidgetD1Ev>:
 8013138:	b580      	push	{r7, lr}
 801313a:	b082      	sub	sp, #8
 801313c:	af00      	add	r7, sp, #0
 801313e:	6078      	str	r0, [r7, #4]
 8013140:	4a05      	ldr	r2, [pc, #20]	; (8013158 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	601a      	str	r2, [r3, #0]
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	4618      	mov	r0, r3
 801314a:	f7ff fdd5 	bl	8012cf8 <_ZN8touchgfx8DrawableD1Ev>
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	4618      	mov	r0, r3
 8013152:	3708      	adds	r7, #8
 8013154:	46bd      	mov	sp, r7
 8013156:	bd80      	pop	{r7, pc}
 8013158:	0802e8a0 	.word	0x0802e8a0

0801315c <_ZN8touchgfx6WidgetD0Ev>:
 801315c:	b580      	push	{r7, lr}
 801315e:	b082      	sub	sp, #8
 8013160:	af00      	add	r7, sp, #0
 8013162:	6078      	str	r0, [r7, #4]
 8013164:	6878      	ldr	r0, [r7, #4]
 8013166:	f7ff ffe7 	bl	8013138 <_ZN8touchgfx6WidgetD1Ev>
 801316a:	2128      	movs	r1, #40	; 0x28
 801316c:	6878      	ldr	r0, [r7, #4]
 801316e:	f018 feea 	bl	802bf46 <_ZdlPvj>
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	4618      	mov	r0, r3
 8013176:	3708      	adds	r7, #8
 8013178:	46bd      	mov	sp, r7
 801317a:	bd80      	pop	{r7, pc}

0801317c <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 801317c:	b580      	push	{r7, lr}
 801317e:	b082      	sub	sp, #8
 8013180:	af00      	add	r7, sp, #0
 8013182:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	4618      	mov	r0, r3
 8013188:	2326      	movs	r3, #38	; 0x26
 801318a:	461a      	mov	r2, r3
 801318c:	2100      	movs	r1, #0
 801318e:	f019 fed0 	bl	802cf32 <memset>
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	4618      	mov	r0, r3
 8013196:	f7ff ffbd 	bl	8013114 <_ZN8touchgfx6WidgetC1Ev>
 801319a:	4a09      	ldr	r2, [pc, #36]	; (80131c0 <_ZN8touchgfx3BoxC1Ev+0x44>)
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	601a      	str	r2, [r3, #0]
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	22ff      	movs	r2, #255	; 0xff
 80131a4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	3328      	adds	r3, #40	; 0x28
 80131ac:	2100      	movs	r1, #0
 80131ae:	4618      	mov	r0, r3
 80131b0:	f7ff fd3c 	bl	8012c2c <_ZN8touchgfx9colortypeC1Em>
    {
    }
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	4618      	mov	r0, r3
 80131b8:	3708      	adds	r7, #8
 80131ba:	46bd      	mov	sp, r7
 80131bc:	bd80      	pop	{r7, pc}
 80131be:	bf00      	nop
 80131c0:	0802f458 	.word	0x0802f458

080131c4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 80131c4:	b480      	push	{r7}
 80131c6:	b083      	sub	sp, #12
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	6078      	str	r0, [r7, #4]
 80131cc:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	683a      	ldr	r2, [r7, #0]
 80131d2:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80131d4:	bf00      	nop
 80131d6:	370c      	adds	r7, #12
 80131d8:	46bd      	mov	sp, r7
 80131da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131de:	4770      	bx	lr

080131e0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 80131e0:	b580      	push	{r7, lr}
 80131e2:	b082      	sub	sp, #8
 80131e4:	af00      	add	r7, sp, #0
 80131e6:	6078      	str	r0, [r7, #4]
 80131e8:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bmp), alpha(255)
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	4618      	mov	r0, r3
 80131ee:	2326      	movs	r3, #38	; 0x26
 80131f0:	461a      	mov	r2, r3
 80131f2:	2100      	movs	r1, #0
 80131f4:	f019 fe9d 	bl	802cf32 <memset>
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	4618      	mov	r0, r3
 80131fc:	f7ff ff8a 	bl	8013114 <_ZN8touchgfx6WidgetC1Ev>
 8013200:	4a09      	ldr	r2, [pc, #36]	; (8013228 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	601a      	str	r2, [r3, #0]
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	683a      	ldr	r2, [r7, #0]
 801320a:	8812      	ldrh	r2, [r2, #0]
 801320c:	84da      	strh	r2, [r3, #38]	; 0x26
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	22ff      	movs	r2, #255	; 0xff
 8013212:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bmp);
 8013216:	6839      	ldr	r1, [r7, #0]
 8013218:	6878      	ldr	r0, [r7, #4]
 801321a:	f006 f8ed 	bl	80193f8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	4618      	mov	r0, r3
 8013222:	3708      	adds	r7, #8
 8013224:	46bd      	mov	sp, r7
 8013226:	bd80      	pop	{r7, pc}
 8013228:	0802f61c 	.word	0x0802f61c

0801322c <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 801322c:	b580      	push	{r7, lr}
 801322e:	b082      	sub	sp, #8
 8013230:	af00      	add	r7, sp, #0
 8013232:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	4618      	mov	r0, r3
 8013238:	2326      	movs	r3, #38	; 0x26
 801323a:	461a      	mov	r2, r3
 801323c:	2100      	movs	r1, #0
 801323e:	f019 fe78 	bl	802cf32 <memset>
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	4618      	mov	r0, r3
 8013246:	f7ff ff65 	bl	8013114 <_ZN8touchgfx6WidgetC1Ev>
 801324a:	4a0a      	ldr	r2, [pc, #40]	; (8013274 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	601a      	str	r2, [r3, #0]
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	2200      	movs	r2, #0
 8013254:	629a      	str	r2, [r3, #40]	; 0x28
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	2200      	movs	r2, #0
 801325a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	2101      	movs	r1, #1
 8013262:	4618      	mov	r0, r3
 8013264:	f7ff fe54 	bl	8012f10 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	4618      	mov	r0, r3
 801326c:	3708      	adds	r7, #8
 801326e:	46bd      	mov	sp, r7
 8013270:	bd80      	pop	{r7, pc}
 8013272:	bf00      	nop
 8013274:	0802f260 	.word	0x0802f260

08013278 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8013278:	b580      	push	{r7, lr}
 801327a:	b082      	sub	sp, #8
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
 8013280:	4a05      	ldr	r2, [pc, #20]	; (8013298 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	601a      	str	r2, [r3, #0]
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	4618      	mov	r0, r3
 801328a:	f7ff ff55 	bl	8013138 <_ZN8touchgfx6WidgetD1Ev>
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	4618      	mov	r0, r3
 8013292:	3708      	adds	r7, #8
 8013294:	46bd      	mov	sp, r7
 8013296:	bd80      	pop	{r7, pc}
 8013298:	0802f260 	.word	0x0802f260

0801329c <_ZN8touchgfx14AbstractButtonD0Ev>:
 801329c:	b580      	push	{r7, lr}
 801329e:	b082      	sub	sp, #8
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	6078      	str	r0, [r7, #4]
 80132a4:	6878      	ldr	r0, [r7, #4]
 80132a6:	f7ff ffe7 	bl	8013278 <_ZN8touchgfx14AbstractButtonD1Ev>
 80132aa:	2130      	movs	r1, #48	; 0x30
 80132ac:	6878      	ldr	r0, [r7, #4]
 80132ae:	f018 fe4a 	bl	802bf46 <_ZdlPvj>
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	4618      	mov	r0, r3
 80132b6:	3708      	adds	r7, #8
 80132b8:	46bd      	mov	sp, r7
 80132ba:	bd80      	pop	{r7, pc}

080132bc <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 80132bc:	b580      	push	{r7, lr}
 80132be:	b082      	sub	sp, #8
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	4618      	mov	r0, r3
 80132c8:	f7ff ffb0 	bl	801322c <_ZN8touchgfx14AbstractButtonC1Ev>
 80132cc:	4a0c      	ldr	r2, [pc, #48]	; (8013300 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	601a      	str	r2, [r3, #0]
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	332e      	adds	r3, #46	; 0x2e
 80132d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80132da:	4618      	mov	r0, r3
 80132dc:	f7ff fccc 	bl	8012c78 <_ZN8touchgfx6BitmapC1Et>
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	3330      	adds	r3, #48	; 0x30
 80132e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80132e8:	4618      	mov	r0, r3
 80132ea:	f7ff fcc5 	bl	8012c78 <_ZN8touchgfx6BitmapC1Et>
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	22ff      	movs	r2, #255	; 0xff
 80132f2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	4618      	mov	r0, r3
 80132fa:	3708      	adds	r7, #8
 80132fc:	46bd      	mov	sp, r7
 80132fe:	bd80      	pop	{r7, pc}
 8013300:	0802f5a8 	.word	0x0802f5a8

08013304 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 * when it is subsequently pressed, it will pop back out.
 */
class ToggleButton : public Button
{
public:
    virtual void setBitmaps(const Bitmap& bitmapReleased, const Bitmap& bitmapPressed)
 8013304:	b580      	push	{r7, lr}
 8013306:	b084      	sub	sp, #16
 8013308:	af00      	add	r7, sp, #0
 801330a:	60f8      	str	r0, [r7, #12]
 801330c:	60b9      	str	r1, [r7, #8]
 801330e:	607a      	str	r2, [r7, #4]
    {
        originalPressed = bitmapPressed;
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	687a      	ldr	r2, [r7, #4]
 8013314:	8812      	ldrh	r2, [r2, #0]
 8013316:	869a      	strh	r2, [r3, #52]	; 0x34
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	687a      	ldr	r2, [r7, #4]
 801331c:	68b9      	ldr	r1, [r7, #8]
 801331e:	4618      	mov	r0, r3
 8013320:	f005 ffc0 	bl	80192a4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    }
 8013324:	bf00      	nop
 8013326:	3710      	adds	r7, #16
 8013328:	46bd      	mov	sp, r7
 801332a:	bd80      	pop	{r7, pc}

0801332c <_ZN8touchgfx4ViewI13mainPresenterED1Ev>:
class View : public Screen
 801332c:	b580      	push	{r7, lr}
 801332e:	b082      	sub	sp, #8
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
 8013334:	4a05      	ldr	r2, [pc, #20]	; (801334c <_ZN8touchgfx4ViewI13mainPresenterED1Ev+0x20>)
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	601a      	str	r2, [r3, #0]
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	4618      	mov	r0, r3
 801333e:	f7ff fe5f 	bl	8013000 <_ZN8touchgfx6ScreenD1Ev>
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	4618      	mov	r0, r3
 8013346:	3708      	adds	r7, #8
 8013348:	46bd      	mov	sp, r7
 801334a:	bd80      	pop	{r7, pc}
 801334c:	0802e86c 	.word	0x0802e86c

08013350 <_ZN8touchgfx4ViewI13mainPresenterED0Ev>:
 8013350:	b580      	push	{r7, lr}
 8013352:	b082      	sub	sp, #8
 8013354:	af00      	add	r7, sp, #0
 8013356:	6078      	str	r0, [r7, #4]
 8013358:	6878      	ldr	r0, [r7, #4]
 801335a:	f7ff ffe7 	bl	801332c <_ZN8touchgfx4ViewI13mainPresenterED1Ev>
 801335e:	2140      	movs	r1, #64	; 0x40
 8013360:	6878      	ldr	r0, [r7, #4]
 8013362:	f018 fdf0 	bl	802bf46 <_ZdlPvj>
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	4618      	mov	r0, r3
 801336a:	3708      	adds	r7, #8
 801336c:	46bd      	mov	sp, r7
 801336e:	bd80      	pop	{r7, pc}

08013370 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 8013370:	b580      	push	{r7, lr}
 8013372:	b082      	sub	sp, #8
 8013374:	af00      	add	r7, sp, #0
 8013376:	6078      	str	r0, [r7, #4]
 8013378:	4a05      	ldr	r2, [pc, #20]	; (8013390 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	601a      	str	r2, [r3, #0]
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	4618      	mov	r0, r3
 8013382:	f7ff ff79 	bl	8013278 <_ZN8touchgfx14AbstractButtonD1Ev>
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	4618      	mov	r0, r3
 801338a:	3708      	adds	r7, #8
 801338c:	46bd      	mov	sp, r7
 801338e:	bd80      	pop	{r7, pc}
 8013390:	0802f5a8 	.word	0x0802f5a8

08013394 <_ZN8touchgfx6ButtonD0Ev>:
 8013394:	b580      	push	{r7, lr}
 8013396:	b082      	sub	sp, #8
 8013398:	af00      	add	r7, sp, #0
 801339a:	6078      	str	r0, [r7, #4]
 801339c:	6878      	ldr	r0, [r7, #4]
 801339e:	f7ff ffe7 	bl	8013370 <_ZN8touchgfx6ButtonD1Ev>
 80133a2:	2134      	movs	r1, #52	; 0x34
 80133a4:	6878      	ldr	r0, [r7, #4]
 80133a6:	f018 fdce 	bl	802bf46 <_ZdlPvj>
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	4618      	mov	r0, r3
 80133ae:	3708      	adds	r7, #8
 80133b0:	46bd      	mov	sp, r7
 80133b2:	bd80      	pop	{r7, pc}

080133b4 <_ZN8touchgfx12ToggleButtonC1Ev>:
class ToggleButton : public Button
 80133b4:	b580      	push	{r7, lr}
 80133b6:	b082      	sub	sp, #8
 80133b8:	af00      	add	r7, sp, #0
 80133ba:	6078      	str	r0, [r7, #4]
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	4618      	mov	r0, r3
 80133c0:	f7ff ff7c 	bl	80132bc <_ZN8touchgfx6ButtonC1Ev>
 80133c4:	4a07      	ldr	r2, [pc, #28]	; (80133e4 <_ZN8touchgfx12ToggleButtonC1Ev+0x30>)
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	601a      	str	r2, [r3, #0]
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	3334      	adds	r3, #52	; 0x34
 80133ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80133d2:	4618      	mov	r0, r3
 80133d4:	f7ff fc50 	bl	8012c78 <_ZN8touchgfx6BitmapC1Et>
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	4618      	mov	r0, r3
 80133dc:	3708      	adds	r7, #8
 80133de:	46bd      	mov	sp, r7
 80133e0:	bd80      	pop	{r7, pc}
 80133e2:	bf00      	nop
 80133e4:	0802f3e4 	.word	0x0802f3e4

080133e8 <_ZN12mainViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/main_screen/mainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

mainViewBase::mainViewBase()
 80133e8:	b590      	push	{r4, r7, lr}
 80133ea:	b08d      	sub	sp, #52	; 0x34
 80133ec:	af02      	add	r7, sp, #8
 80133ee:	6078      	str	r0, [r7, #4]
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	4618      	mov	r0, r3
 80133f4:	f000 f93a 	bl	801366c <_ZN8touchgfx4ViewI13mainPresenterEC1Ev>
 80133f8:	4a7a      	ldr	r2, [pc, #488]	; (80135e4 <_ZN12mainViewBaseC1Ev+0x1fc>)
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	601a      	str	r2, [r3, #0]
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	3340      	adds	r3, #64	; 0x40
 8013402:	4618      	mov	r0, r3
 8013404:	f7ff feba 	bl	801317c <_ZN8touchgfx3BoxC1Ev>
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 801340e:	f107 030c 	add.w	r3, r7, #12
 8013412:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013416:	4618      	mov	r0, r3
 8013418:	f7ff fc2e 	bl	8012c78 <_ZN8touchgfx6BitmapC1Et>
 801341c:	f107 030c 	add.w	r3, r7, #12
 8013420:	4619      	mov	r1, r3
 8013422:	4620      	mov	r0, r4
 8013424:	f7ff fedc 	bl	80131e0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	3398      	adds	r3, #152	; 0x98
 801342c:	4618      	mov	r0, r3
 801342e:	f7ff ffc1 	bl	80133b4 <_ZN8touchgfx12ToggleButtonC1Ev>
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	33d0      	adds	r3, #208	; 0xd0
 8013436:	4618      	mov	r0, r3
 8013438:	f005 fdf0 	bl	801901c <_ZN8touchgfx5GaugeC1Ev>
{
    __background.setPosition(0, 0, 800, 480);
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8013442:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8013446:	9300      	str	r3, [sp, #0]
 8013448:	f44f 7348 	mov.w	r3, #800	; 0x320
 801344c:	2200      	movs	r2, #0
 801344e:	2100      	movs	r1, #0
 8013450:	f7ff fc90 	bl	8012d74 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801345a:	2300      	movs	r3, #0
 801345c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013460:	2300      	movs	r3, #0
 8013462:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013466:	2300      	movs	r3, #0
 8013468:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 801346c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013470:	041b      	lsls	r3, r3, #16
 8013472:	461a      	mov	r2, r3
 8013474:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013478:	021b      	lsls	r3, r3, #8
 801347a:	431a      	orrs	r2, r3
 801347c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8013480:	4313      	orrs	r3, r2
 8013482:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8013486:	f107 0320 	add.w	r3, r7, #32
 801348a:	4611      	mov	r1, r2
 801348c:	4618      	mov	r0, r3
 801348e:	f7ff fbcd 	bl	8012c2c <_ZN8touchgfx9colortypeC1Em>
 8013492:	6a3b      	ldr	r3, [r7, #32]
 8013494:	4619      	mov	r1, r3
 8013496:	4620      	mov	r0, r4
 8013498:	f7ff fe94 	bl	80131c4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 801349c:	687a      	ldr	r2, [r7, #4]
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	3340      	adds	r3, #64	; 0x40
 80134a2:	4619      	mov	r1, r3
 80134a4:	4610      	mov	r0, r2
 80134a6:	f7ff fe03 	bl	80130b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    background.setXY(0, 0);
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	336c      	adds	r3, #108	; 0x6c
 80134ae:	2200      	movs	r2, #0
 80134b0:	2100      	movs	r1, #0
 80134b2:	4618      	mov	r0, r3
 80134b4:	f7ff fc9d 	bl	8012df2 <_ZN8touchgfx8Drawable5setXYEss>
    background.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_800X480_GRADIENT_DARK_ID));
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80134be:	f107 0310 	add.w	r3, r7, #16
 80134c2:	2100      	movs	r1, #0
 80134c4:	4618      	mov	r0, r3
 80134c6:	f7ff fbd7 	bl	8012c78 <_ZN8touchgfx6BitmapC1Et>
 80134ca:	f107 0310 	add.w	r3, r7, #16
 80134ce:	4619      	mov	r1, r3
 80134d0:	4620      	mov	r0, r4
 80134d2:	f005 ff91 	bl	80193f8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    add(background);
 80134d6:	687a      	ldr	r2, [r7, #4]
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	336c      	adds	r3, #108	; 0x6c
 80134dc:	4619      	mov	r1, r3
 80134de:	4610      	mov	r0, r2
 80134e0:	f7ff fde6 	bl	80130b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    toggleButton1.setXY(345, 351);
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	3398      	adds	r3, #152	; 0x98
 80134e8:	f240 125f 	movw	r2, #351	; 0x15f
 80134ec:	f240 1159 	movw	r1, #345	; 0x159
 80134f0:	4618      	mov	r0, r3
 80134f2:	f7ff fc7e 	bl	8012df2 <_ZN8touchgfx8Drawable5setXYEss>
    toggleButton1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_TOGGLEBUTTON_MEDIUM_ROUNDED_ON_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_TOGGLEBUTTON_MEDIUM_ROUNDED_OFF_LIGHT_ID));
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	f103 0498 	add.w	r4, r3, #152	; 0x98
 80134fc:	f107 0314 	add.w	r3, r7, #20
 8013500:	2104      	movs	r1, #4
 8013502:	4618      	mov	r0, r3
 8013504:	f7ff fbb8 	bl	8012c78 <_ZN8touchgfx6BitmapC1Et>
 8013508:	f107 0318 	add.w	r3, r7, #24
 801350c:	2103      	movs	r1, #3
 801350e:	4618      	mov	r0, r3
 8013510:	f7ff fbb2 	bl	8012c78 <_ZN8touchgfx6BitmapC1Et>
 8013514:	f107 0218 	add.w	r2, r7, #24
 8013518:	f107 0314 	add.w	r3, r7, #20
 801351c:	4619      	mov	r1, r3
 801351e:	4620      	mov	r0, r4
 8013520:	f7ff fef0 	bl	8013304 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    add(toggleButton1);
 8013524:	687a      	ldr	r2, [r7, #4]
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	3398      	adds	r3, #152	; 0x98
 801352a:	4619      	mov	r1, r3
 801352c:	4610      	mov	r0, r2
 801352e:	f7ff fdbf 	bl	80130b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    speedometer.setBackground(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_GAUGE_MEDIUM_BACKGROUNDS_ACTIVE_ID));
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	f103 04d0 	add.w	r4, r3, #208	; 0xd0
 8013538:	f107 031c 	add.w	r3, r7, #28
 801353c:	2101      	movs	r1, #1
 801353e:	4618      	mov	r0, r3
 8013540:	f7ff fb9a 	bl	8012c78 <_ZN8touchgfx6BitmapC1Et>
 8013544:	f107 031c 	add.w	r3, r7, #28
 8013548:	4619      	mov	r1, r3
 801354a:	4620      	mov	r0, r4
 801354c:	f002 ff3d 	bl	80163ca <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    speedometer.setPosition(280, 81, 240, 240);
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	f103 00d0 	add.w	r0, r3, #208	; 0xd0
 8013556:	23f0      	movs	r3, #240	; 0xf0
 8013558:	9300      	str	r3, [sp, #0]
 801355a:	23f0      	movs	r3, #240	; 0xf0
 801355c:	2251      	movs	r2, #81	; 0x51
 801355e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8013562:	f7ff fc07 	bl	8012d74 <_ZN8touchgfx8Drawable11setPositionEssss>
    speedometer.setCenter(120, 120);
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	33d0      	adds	r3, #208	; 0xd0
 801356a:	2278      	movs	r2, #120	; 0x78
 801356c:	2178      	movs	r1, #120	; 0x78
 801356e:	4618      	mov	r0, r3
 8013570:	f005 fdff 	bl	8019172 <_ZN8touchgfx5Gauge9setCenterEii>
    speedometer.setStartEndAngle(-113, 112);
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	33d0      	adds	r3, #208	; 0xd0
 8013578:	2270      	movs	r2, #112	; 0x70
 801357a:	f06f 0170 	mvn.w	r1, #112	; 0x70
 801357e:	4618      	mov	r0, r3
 8013580:	f005 fe7c 	bl	801927c <_ZN8touchgfx5Gauge16setStartEndAngleEii>
    speedometer.setRange(0, 100);
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	f103 00d0 	add.w	r0, r3, #208	; 0xd0
 801358a:	2300      	movs	r3, #0
 801358c:	9300      	str	r3, [sp, #0]
 801358e:	2300      	movs	r3, #0
 8013590:	2264      	movs	r2, #100	; 0x64
 8013592:	2100      	movs	r1, #0
 8013594:	f002 fdf3 	bl	801617e <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    speedometer.setValue(0);
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	33d0      	adds	r3, #208	; 0xd0
 801359c:	2100      	movs	r1, #0
 801359e:	4618      	mov	r0, r3
 80135a0:	f005 fe16 	bl	80191d0 <_ZN8touchgfx5Gauge8setValueEi>
    speedometer.setNeedle(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_GAUGE_MEDIUM_NEEDLES_SMOOTH_ID, 7, 67);
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	f103 00d0 	add.w	r0, r3, #208	; 0xd0
 80135aa:	2343      	movs	r3, #67	; 0x43
 80135ac:	2207      	movs	r2, #7
 80135ae:	2102      	movs	r1, #2
 80135b0:	f005 fdca 	bl	8019148 <_ZN8touchgfx5Gauge9setNeedleEtss>
    speedometer.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	33d0      	adds	r3, #208	; 0xd0
 80135b8:	2101      	movs	r1, #1
 80135ba:	4618      	mov	r0, r3
 80135bc:	f005 fd66 	bl	801908c <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>
    speedometer.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	33d0      	adds	r3, #208	; 0xd0
 80135c4:	2101      	movs	r1, #1
 80135c6:	4618      	mov	r0, r3
 80135c8:	f005 fd63 	bl	8019092 <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>
    add(speedometer);
 80135cc:	687a      	ldr	r2, [r7, #4]
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	33d0      	adds	r3, #208	; 0xd0
 80135d2:	4619      	mov	r1, r3
 80135d4:	4610      	mov	r0, r2
 80135d6:	f7ff fd6b 	bl	80130b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	4618      	mov	r0, r3
 80135de:	372c      	adds	r7, #44	; 0x2c
 80135e0:	46bd      	mov	sp, r7
 80135e2:	bd90      	pop	{r4, r7, pc}
 80135e4:	0802e838 	.word	0x0802e838

080135e8 <_ZN12mainViewBaseD1Ev>:

mainViewBase::~mainViewBase()
 80135e8:	b580      	push	{r7, lr}
 80135ea:	b082      	sub	sp, #8
 80135ec:	af00      	add	r7, sp, #0
 80135ee:	6078      	str	r0, [r7, #4]
 80135f0:	4a0f      	ldr	r2, [pc, #60]	; (8013630 <_ZN12mainViewBaseD1Ev+0x48>)
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	601a      	str	r2, [r3, #0]
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	33d0      	adds	r3, #208	; 0xd0
 80135fa:	4618      	mov	r0, r3
 80135fc:	f000 f966 	bl	80138cc <_ZN8touchgfx5GaugeD1Ev>
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	3398      	adds	r3, #152	; 0x98
 8013604:	4618      	mov	r0, r3
 8013606:	f000 f8ad 	bl	8013764 <_ZN8touchgfx12ToggleButtonD1Ev>
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	336c      	adds	r3, #108	; 0x6c
 801360e:	4618      	mov	r0, r3
 8013610:	f000 f886 	bl	8013720 <_ZN8touchgfx5ImageD1Ev>
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	3340      	adds	r3, #64	; 0x40
 8013618:	4618      	mov	r0, r3
 801361a:	f000 f85f 	bl	80136dc <_ZN8touchgfx3BoxD1Ev>
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	4618      	mov	r0, r3
 8013622:	f7ff fe83 	bl	801332c <_ZN8touchgfx4ViewI13mainPresenterED1Ev>
{

}
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	4618      	mov	r0, r3
 801362a:	3708      	adds	r7, #8
 801362c:	46bd      	mov	sp, r7
 801362e:	bd80      	pop	{r7, pc}
 8013630:	0802e838 	.word	0x0802e838

08013634 <_ZN12mainViewBaseD0Ev>:
mainViewBase::~mainViewBase()
 8013634:	b580      	push	{r7, lr}
 8013636:	b082      	sub	sp, #8
 8013638:	af00      	add	r7, sp, #0
 801363a:	6078      	str	r0, [r7, #4]
}
 801363c:	6878      	ldr	r0, [r7, #4]
 801363e:	f7ff ffd3 	bl	80135e8 <_ZN12mainViewBaseD1Ev>
 8013642:	f44f 711c 	mov.w	r1, #624	; 0x270
 8013646:	6878      	ldr	r0, [r7, #4]
 8013648:	f018 fc7d 	bl	802bf46 <_ZdlPvj>
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	4618      	mov	r0, r3
 8013650:	3708      	adds	r7, #8
 8013652:	46bd      	mov	sp, r7
 8013654:	bd80      	pop	{r7, pc}

08013656 <_ZN12mainViewBase11setupScreenEv>:

void mainViewBase::setupScreen()
{
 8013656:	b480      	push	{r7}
 8013658:	b083      	sub	sp, #12
 801365a:	af00      	add	r7, sp, #0
 801365c:	6078      	str	r0, [r7, #4]

}
 801365e:	bf00      	nop
 8013660:	370c      	adds	r7, #12
 8013662:	46bd      	mov	sp, r7
 8013664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013668:	4770      	bx	lr
	...

0801366c <_ZN8touchgfx4ViewI13mainPresenterEC1Ev>:
    View()
 801366c:	b580      	push	{r7, lr}
 801366e:	b082      	sub	sp, #8
 8013670:	af00      	add	r7, sp, #0
 8013672:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	4618      	mov	r0, r3
 8013678:	f009 fa2a 	bl	801cad0 <_ZN8touchgfx6ScreenC1Ev>
 801367c:	4a05      	ldr	r2, [pc, #20]	; (8013694 <_ZN8touchgfx4ViewI13mainPresenterEC1Ev+0x28>)
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	601a      	str	r2, [r3, #0]
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	2200      	movs	r2, #0
 8013686:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	4618      	mov	r0, r3
 801368c:	3708      	adds	r7, #8
 801368e:	46bd      	mov	sp, r7
 8013690:	bd80      	pop	{r7, pc}
 8013692:	bf00      	nop
 8013694:	0802e86c 	.word	0x0802e86c

08013698 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8013698:	b580      	push	{r7, lr}
 801369a:	b082      	sub	sp, #8
 801369c:	af00      	add	r7, sp, #0
 801369e:	6078      	str	r0, [r7, #4]
 80136a0:	4a05      	ldr	r2, [pc, #20]	; (80136b8 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	601a      	str	r2, [r3, #0]
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	4618      	mov	r0, r3
 80136aa:	f7ff fb25 	bl	8012cf8 <_ZN8touchgfx8DrawableD1Ev>
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	4618      	mov	r0, r3
 80136b2:	3708      	adds	r7, #8
 80136b4:	46bd      	mov	sp, r7
 80136b6:	bd80      	pop	{r7, pc}
 80136b8:	0802eed0 	.word	0x0802eed0

080136bc <_ZN8touchgfx9ContainerD0Ev>:
 80136bc:	b580      	push	{r7, lr}
 80136be:	b082      	sub	sp, #8
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	6078      	str	r0, [r7, #4]
 80136c4:	6878      	ldr	r0, [r7, #4]
 80136c6:	f7ff ffe7 	bl	8013698 <_ZN8touchgfx9ContainerD1Ev>
 80136ca:	212c      	movs	r1, #44	; 0x2c
 80136cc:	6878      	ldr	r0, [r7, #4]
 80136ce:	f018 fc3a 	bl	802bf46 <_ZdlPvj>
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	4618      	mov	r0, r3
 80136d6:	3708      	adds	r7, #8
 80136d8:	46bd      	mov	sp, r7
 80136da:	bd80      	pop	{r7, pc}

080136dc <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 80136dc:	b580      	push	{r7, lr}
 80136de:	b082      	sub	sp, #8
 80136e0:	af00      	add	r7, sp, #0
 80136e2:	6078      	str	r0, [r7, #4]
 80136e4:	4a05      	ldr	r2, [pc, #20]	; (80136fc <_ZN8touchgfx3BoxD1Ev+0x20>)
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	601a      	str	r2, [r3, #0]
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	4618      	mov	r0, r3
 80136ee:	f7ff fd23 	bl	8013138 <_ZN8touchgfx6WidgetD1Ev>
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	4618      	mov	r0, r3
 80136f6:	3708      	adds	r7, #8
 80136f8:	46bd      	mov	sp, r7
 80136fa:	bd80      	pop	{r7, pc}
 80136fc:	0802f458 	.word	0x0802f458

08013700 <_ZN8touchgfx3BoxD0Ev>:
 8013700:	b580      	push	{r7, lr}
 8013702:	b082      	sub	sp, #8
 8013704:	af00      	add	r7, sp, #0
 8013706:	6078      	str	r0, [r7, #4]
 8013708:	6878      	ldr	r0, [r7, #4]
 801370a:	f7ff ffe7 	bl	80136dc <_ZN8touchgfx3BoxD1Ev>
 801370e:	212c      	movs	r1, #44	; 0x2c
 8013710:	6878      	ldr	r0, [r7, #4]
 8013712:	f018 fc18 	bl	802bf46 <_ZdlPvj>
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	4618      	mov	r0, r3
 801371a:	3708      	adds	r7, #8
 801371c:	46bd      	mov	sp, r7
 801371e:	bd80      	pop	{r7, pc}

08013720 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8013720:	b580      	push	{r7, lr}
 8013722:	b082      	sub	sp, #8
 8013724:	af00      	add	r7, sp, #0
 8013726:	6078      	str	r0, [r7, #4]
 8013728:	4a05      	ldr	r2, [pc, #20]	; (8013740 <_ZN8touchgfx5ImageD1Ev+0x20>)
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	601a      	str	r2, [r3, #0]
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	4618      	mov	r0, r3
 8013732:	f7ff fd01 	bl	8013138 <_ZN8touchgfx6WidgetD1Ev>
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	4618      	mov	r0, r3
 801373a:	3708      	adds	r7, #8
 801373c:	46bd      	mov	sp, r7
 801373e:	bd80      	pop	{r7, pc}
 8013740:	0802f61c 	.word	0x0802f61c

08013744 <_ZN8touchgfx5ImageD0Ev>:
 8013744:	b580      	push	{r7, lr}
 8013746:	b082      	sub	sp, #8
 8013748:	af00      	add	r7, sp, #0
 801374a:	6078      	str	r0, [r7, #4]
 801374c:	6878      	ldr	r0, [r7, #4]
 801374e:	f7ff ffe7 	bl	8013720 <_ZN8touchgfx5ImageD1Ev>
 8013752:	212c      	movs	r1, #44	; 0x2c
 8013754:	6878      	ldr	r0, [r7, #4]
 8013756:	f018 fbf6 	bl	802bf46 <_ZdlPvj>
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	4618      	mov	r0, r3
 801375e:	3708      	adds	r7, #8
 8013760:	46bd      	mov	sp, r7
 8013762:	bd80      	pop	{r7, pc}

08013764 <_ZN8touchgfx12ToggleButtonD1Ev>:
 8013764:	b580      	push	{r7, lr}
 8013766:	b082      	sub	sp, #8
 8013768:	af00      	add	r7, sp, #0
 801376a:	6078      	str	r0, [r7, #4]
 801376c:	4a05      	ldr	r2, [pc, #20]	; (8013784 <_ZN8touchgfx12ToggleButtonD1Ev+0x20>)
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	601a      	str	r2, [r3, #0]
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	4618      	mov	r0, r3
 8013776:	f7ff fdfb 	bl	8013370 <_ZN8touchgfx6ButtonD1Ev>
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	4618      	mov	r0, r3
 801377e:	3708      	adds	r7, #8
 8013780:	46bd      	mov	sp, r7
 8013782:	bd80      	pop	{r7, pc}
 8013784:	0802f3e4 	.word	0x0802f3e4

08013788 <_ZN8touchgfx12ToggleButtonD0Ev>:
 8013788:	b580      	push	{r7, lr}
 801378a:	b082      	sub	sp, #8
 801378c:	af00      	add	r7, sp, #0
 801378e:	6078      	str	r0, [r7, #4]
 8013790:	6878      	ldr	r0, [r7, #4]
 8013792:	f7ff ffe7 	bl	8013764 <_ZN8touchgfx12ToggleButtonD1Ev>
 8013796:	2138      	movs	r1, #56	; 0x38
 8013798:	6878      	ldr	r0, [r7, #4]
 801379a:	f018 fbd4 	bl	802bf46 <_ZdlPvj>
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	4618      	mov	r0, r3
 80137a2:	3708      	adds	r7, #8
 80137a4:	46bd      	mov	sp, r7
 80137a6:	bd80      	pop	{r7, pc}

080137a8 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 * to implement a progress indicator. For more specific implementations see classes that
 * inherit from AbstractProgressIndicator.
 *
 * @see BoxProgress, CircleProgress, ImageProgress, LineProgress, TextProgress
 */
class AbstractProgressIndicator : public Container
 80137a8:	b580      	push	{r7, lr}
 80137aa:	b082      	sub	sp, #8
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	6078      	str	r0, [r7, #4]
 80137b0:	4a0a      	ldr	r2, [pc, #40]	; (80137dc <_ZN8touchgfx25AbstractProgressIndicatorD1Ev+0x34>)
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	601a      	str	r2, [r3, #0]
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	3358      	adds	r3, #88	; 0x58
 80137ba:	4618      	mov	r0, r3
 80137bc:	f7ff ff6c 	bl	8013698 <_ZN8touchgfx9ContainerD1Ev>
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	332c      	adds	r3, #44	; 0x2c
 80137c4:	4618      	mov	r0, r3
 80137c6:	f7ff ffab 	bl	8013720 <_ZN8touchgfx5ImageD1Ev>
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	4618      	mov	r0, r3
 80137ce:	f7ff ff63 	bl	8013698 <_ZN8touchgfx9ContainerD1Ev>
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	4618      	mov	r0, r3
 80137d6:	3708      	adds	r7, #8
 80137d8:	46bd      	mov	sp, r7
 80137da:	bd80      	pop	{r7, pc}
 80137dc:	0802edfc 	.word	0x0802edfc

080137e0 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 80137e0:	b580      	push	{r7, lr}
 80137e2:	b082      	sub	sp, #8
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	6078      	str	r0, [r7, #4]
 80137e8:	6878      	ldr	r0, [r7, #4]
 80137ea:	f7ff ffdd 	bl	80137a8 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 80137ee:	21b4      	movs	r1, #180	; 0xb4
 80137f0:	6878      	ldr	r0, [r7, #4]
 80137f2:	f018 fba8 	bl	802bf46 <_ZdlPvj>
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	4618      	mov	r0, r3
 80137fa:	3708      	adds	r7, #8
 80137fc:	46bd      	mov	sp, r7
 80137fe:	bd80      	pop	{r7, pc}

08013800 <_ZN8touchgfx13TextureMapperD1Ev>:
 * @note The drawing of this widget is not trivial and typically has a significant performance
 *       penalty. The number of pixels drawn, the presence of global alpha or per pixel alpha
 *       inflicts the computation and should be considered.
 * @note This widget does not support 1 bit per pixel color depth.
 */
class TextureMapper : public Image
 8013800:	b580      	push	{r7, lr}
 8013802:	b082      	sub	sp, #8
 8013804:	af00      	add	r7, sp, #0
 8013806:	6078      	str	r0, [r7, #4]
 8013808:	4a05      	ldr	r2, [pc, #20]	; (8013820 <_ZN8touchgfx13TextureMapperD1Ev+0x20>)
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	601a      	str	r2, [r3, #0]
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	4618      	mov	r0, r3
 8013812:	f7ff ff85 	bl	8013720 <_ZN8touchgfx5ImageD1Ev>
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	4618      	mov	r0, r3
 801381a:	3708      	adds	r7, #8
 801381c:	46bd      	mov	sp, r7
 801381e:	bd80      	pop	{r7, pc}
 8013820:	0802f2d0 	.word	0x0802f2d0

08013824 <_ZN8touchgfx13TextureMapperD0Ev>:
 8013824:	b580      	push	{r7, lr}
 8013826:	b082      	sub	sp, #8
 8013828:	af00      	add	r7, sp, #0
 801382a:	6078      	str	r0, [r7, #4]
 801382c:	6878      	ldr	r0, [r7, #4]
 801382e:	f7ff ffe7 	bl	8013800 <_ZN8touchgfx13TextureMapperD1Ev>
 8013832:	2190      	movs	r1, #144	; 0x90
 8013834:	6878      	ldr	r0, [r7, #4]
 8013836:	f018 fb86 	bl	802bf46 <_ZdlPvj>
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	4618      	mov	r0, r3
 801383e:	3708      	adds	r7, #8
 8013840:	46bd      	mov	sp, r7
 8013842:	bd80      	pop	{r7, pc}

08013844 <_ZN8touchgfx12CanvasWidgetD1Ev>:
 * Class for drawing complex polygons on the display using CanvasWidgetRenderer. The
 * CanvasWidget is used by passing it to a Canvas object, drawing the outline of the
 * object and then having CanvasWidget render the outline on the display using the
 * assigned painter.
 */
class CanvasWidget : public Widget
 8013844:	b580      	push	{r7, lr}
 8013846:	b082      	sub	sp, #8
 8013848:	af00      	add	r7, sp, #0
 801384a:	6078      	str	r0, [r7, #4]
 801384c:	4a05      	ldr	r2, [pc, #20]	; (8013864 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	601a      	str	r2, [r3, #0]
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	4618      	mov	r0, r3
 8013856:	f7ff fc6f 	bl	8013138 <_ZN8touchgfx6WidgetD1Ev>
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	4618      	mov	r0, r3
 801385e:	3708      	adds	r7, #8
 8013860:	46bd      	mov	sp, r7
 8013862:	bd80      	pop	{r7, pc}
 8013864:	0802f1e8 	.word	0x0802f1e8

08013868 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 8013868:	b580      	push	{r7, lr}
 801386a:	b082      	sub	sp, #8
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
 8013870:	6878      	ldr	r0, [r7, #4]
 8013872:	f7ff ffe7 	bl	8013844 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8013876:	212c      	movs	r1, #44	; 0x2c
 8013878:	6878      	ldr	r0, [r7, #4]
 801387a:	f018 fb64 	bl	802bf46 <_ZdlPvj>
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	4618      	mov	r0, r3
 8013882:	3708      	adds	r7, #8
 8013884:	46bd      	mov	sp, r7
 8013886:	bd80      	pop	{r7, pc}

08013888 <_ZN8touchgfx6CircleD1Ev>:
 *            int x, y, r;
 *            circle.getCenter(&x, &y); // Will return (1, 1)
 *            circle.getRadius(&r); // Will return 0
 *       @endcode.
 */
class Circle : public CanvasWidget
 8013888:	b580      	push	{r7, lr}
 801388a:	b082      	sub	sp, #8
 801388c:	af00      	add	r7, sp, #0
 801388e:	6078      	str	r0, [r7, #4]
 8013890:	4a05      	ldr	r2, [pc, #20]	; (80138a8 <_ZN8touchgfx6CircleD1Ev+0x20>)
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	601a      	str	r2, [r3, #0]
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	4618      	mov	r0, r3
 801389a:	f7ff ffd3 	bl	8013844 <_ZN8touchgfx12CanvasWidgetD1Ev>
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	4618      	mov	r0, r3
 80138a2:	3708      	adds	r7, #8
 80138a4:	46bd      	mov	sp, r7
 80138a6:	bd80      	pop	{r7, pc}
 80138a8:	0802f170 	.word	0x0802f170

080138ac <_ZN8touchgfx6CircleD0Ev>:
 80138ac:	b580      	push	{r7, lr}
 80138ae:	b082      	sub	sp, #8
 80138b0:	af00      	add	r7, sp, #0
 80138b2:	6078      	str	r0, [r7, #4]
 80138b4:	6878      	ldr	r0, [r7, #4]
 80138b6:	f7ff ffe7 	bl	8013888 <_ZN8touchgfx6CircleD1Ev>
 80138ba:	2148      	movs	r1, #72	; 0x48
 80138bc:	6878      	ldr	r0, [r7, #4]
 80138be:	f018 fb42 	bl	802bf46 <_ZdlPvj>
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	4618      	mov	r0, r3
 80138c6:	3708      	adds	r7, #8
 80138c8:	46bd      	mov	sp, r7
 80138ca:	bd80      	pop	{r7, pc}

080138cc <_ZN8touchgfx5GaugeD1Ev>:
 * Much like a progress indicator, the minimum and maximum value of the Gauge, as well as steps
 * can be set. For more information on this, consult the documentation on ProgressIndicators.
 *
 * A Gauge has a needle and optionally an arc that follows the needle.
 */
class Gauge : public AbstractProgressIndicator
 80138cc:	b580      	push	{r7, lr}
 80138ce:	b082      	sub	sp, #8
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	6078      	str	r0, [r7, #4]
 80138d4:	4a0b      	ldr	r2, [pc, #44]	; (8013904 <_ZN8touchgfx5GaugeD1Ev+0x38>)
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	601a      	str	r2, [r3, #0]
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80138e0:	4618      	mov	r0, r3
 80138e2:	f7ff ffd1 	bl	8013888 <_ZN8touchgfx6CircleD1Ev>
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	33b4      	adds	r3, #180	; 0xb4
 80138ea:	4618      	mov	r0, r3
 80138ec:	f7ff ff88 	bl	8013800 <_ZN8touchgfx13TextureMapperD1Ev>
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	4618      	mov	r0, r3
 80138f4:	f7ff ff58 	bl	80137a8 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	4618      	mov	r0, r3
 80138fc:	3708      	adds	r7, #8
 80138fe:	46bd      	mov	sp, r7
 8013900:	bd80      	pop	{r7, pc}
 8013902:	bf00      	nop
 8013904:	0802f4c0 	.word	0x0802f4c0

08013908 <_ZN8touchgfx5GaugeD0Ev>:
 8013908:	b580      	push	{r7, lr}
 801390a:	b082      	sub	sp, #8
 801390c:	af00      	add	r7, sp, #0
 801390e:	6078      	str	r0, [r7, #4]
 8013910:	6878      	ldr	r0, [r7, #4]
 8013912:	f7ff ffdb 	bl	80138cc <_ZN8touchgfx5GaugeD1Ev>
 8013916:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801391a:	6878      	ldr	r0, [r7, #4]
 801391c:	f018 fb13 	bl	802bf46 <_ZdlPvj>
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	4618      	mov	r0, r3
 8013924:	3708      	adds	r7, #8
 8013926:	46bd      	mov	sp, r7
 8013928:	bd80      	pop	{r7, pc}
	...

0801392c <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 801392c:	b480      	push	{r7}
 801392e:	af00      	add	r7, sp, #0
    return bitmap_database;
 8013930:	4b02      	ldr	r3, [pc, #8]	; (801393c <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8013932:	4618      	mov	r0, r3
 8013934:	46bd      	mov	sp, r7
 8013936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801393a:	4770      	bx	lr
 801393c:	0802e900 	.word	0x0802e900

08013940 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8013940:	b480      	push	{r7}
 8013942:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8013944:	2305      	movs	r3, #5
}
 8013946:	4618      	mov	r0, r3
 8013948:	46bd      	mov	sp, r7
 801394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801394e:	4770      	bx	lr

08013950 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8013950:	b480      	push	{r7}
 8013952:	b085      	sub	sp, #20
 8013954:	af00      	add	r7, sp, #0
 8013956:	60f8      	str	r0, [r7, #12]
 8013958:	460b      	mov	r3, r1
 801395a:	607a      	str	r2, [r7, #4]
 801395c:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 801395e:	2300      	movs	r3, #0
    }
 8013960:	4618      	mov	r0, r3
 8013962:	3714      	adds	r7, #20
 8013964:	46bd      	mov	sp, r7
 8013966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801396a:	4770      	bx	lr

0801396c <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 801396c:	b480      	push	{r7}
 801396e:	b083      	sub	sp, #12
 8013970:	af00      	add	r7, sp, #0
 8013972:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8013974:	2300      	movs	r3, #0
    }
 8013976:	4618      	mov	r0, r3
 8013978:	370c      	adds	r7, #12
 801397a:	46bd      	mov	sp, r7
 801397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013980:	4770      	bx	lr

08013982 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8013982:	b480      	push	{r7}
 8013984:	b083      	sub	sp, #12
 8013986:	af00      	add	r7, sp, #0
 8013988:	6078      	str	r0, [r7, #4]
    {
        return 0;
 801398a:	2300      	movs	r3, #0
    }
 801398c:	4618      	mov	r0, r3
 801398e:	370c      	adds	r7, #12
 8013990:	46bd      	mov	sp, r7
 8013992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013996:	4770      	bx	lr

08013998 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8013998:	b480      	push	{r7}
 801399a:	b085      	sub	sp, #20
 801399c:	af00      	add	r7, sp, #0
 801399e:	60f8      	str	r0, [r7, #12]
 80139a0:	60b9      	str	r1, [r7, #8]
 80139a2:	4613      	mov	r3, r2
 80139a4:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 80139a6:	4a07      	ldr	r2, [pc, #28]	; (80139c4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	6013      	str	r3, [r2, #0]
        fonts = f;
 80139ac:	4a06      	ldr	r2, [pc, #24]	; (80139c8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 80139ae:	68bb      	ldr	r3, [r7, #8]
 80139b0:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 80139b2:	4a06      	ldr	r2, [pc, #24]	; (80139cc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 80139b4:	88fb      	ldrh	r3, [r7, #6]
 80139b6:	8013      	strh	r3, [r2, #0]
    }
 80139b8:	bf00      	nop
 80139ba:	3714      	adds	r7, #20
 80139bc:	46bd      	mov	sp, r7
 80139be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c2:	4770      	bx	lr
 80139c4:	2000afa0 	.word	0x2000afa0
 80139c8:	2000afa8 	.word	0x2000afa8
 80139cc:	2000afa4 	.word	0x2000afa4

080139d0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80139d0:	b40e      	push	{r1, r2, r3}
 80139d2:	b580      	push	{r7, lr}
 80139d4:	b085      	sub	sp, #20
 80139d6:	af00      	add	r7, sp, #0
 80139d8:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 80139da:	f107 0320 	add.w	r3, r7, #32
 80139de:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80139e0:	68bb      	ldr	r3, [r7, #8]
 80139e2:	69fa      	ldr	r2, [r7, #28]
 80139e4:	2100      	movs	r1, #0
 80139e6:	6878      	ldr	r0, [r7, #4]
 80139e8:	f008 fbfa 	bl	801c1e0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80139ec:	4603      	mov	r3, r0
 80139ee:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80139f0:	89fb      	ldrh	r3, [r7, #14]
}
 80139f2:	4618      	mov	r0, r3
 80139f4:	3714      	adds	r7, #20
 80139f6:	46bd      	mov	sp, r7
 80139f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80139fc:	b003      	add	sp, #12
 80139fe:	4770      	bx	lr

08013a00 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8013a00:	b40c      	push	{r2, r3}
 8013a02:	b580      	push	{r7, lr}
 8013a04:	b084      	sub	sp, #16
 8013a06:	af00      	add	r7, sp, #0
 8013a08:	6078      	str	r0, [r7, #4]
 8013a0a:	460b      	mov	r3, r1
 8013a0c:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8013a0e:	f107 031c 	add.w	r3, r7, #28
 8013a12:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8013a14:	78f9      	ldrb	r1, [r7, #3]
 8013a16:	68bb      	ldr	r3, [r7, #8]
 8013a18:	69ba      	ldr	r2, [r7, #24]
 8013a1a:	6878      	ldr	r0, [r7, #4]
 8013a1c:	f008 fbe0 	bl	801c1e0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8013a20:	4603      	mov	r3, r0
 8013a22:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8013a24:	89fb      	ldrh	r3, [r7, #14]
}
 8013a26:	4618      	mov	r0, r3
 8013a28:	3710      	adds	r7, #16
 8013a2a:	46bd      	mov	sp, r7
 8013a2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013a30:	b002      	add	sp, #8
 8013a32:	4770      	bx	lr

08013a34 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8013a34:	b580      	push	{r7, lr}
 8013a36:	b08a      	sub	sp, #40	; 0x28
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	6078      	str	r0, [r7, #4]
 8013a3c:	460b      	mov	r3, r1
 8013a3e:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d016      	beq.n	8013a76 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	3322      	adds	r3, #34	; 0x22
 8013a4c:	627b      	str	r3, [r7, #36]	; 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8013a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a50:	8adb      	ldrh	r3, [r3, #22]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d105      	bne.n	8013a62 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8013a56:	4b43      	ldr	r3, [pc, #268]	; (8013b64 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8013a58:	4a43      	ldr	r2, [pc, #268]	; (8013b68 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8013a5a:	21c5      	movs	r1, #197	; 0xc5
 8013a5c:	4843      	ldr	r0, [pc, #268]	; (8013b6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8013a5e:	f019 f863 	bl	802cb28 <__assert_func>
            return buffer[pos];
 8013a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a64:	8a9b      	ldrh	r3, [r3, #20]
 8013a66:	461a      	mov	r2, r3
 8013a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a6a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d001      	beq.n	8013a76 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8013a72:	2301      	movs	r3, #1
 8013a74:	e000      	b.n	8013a78 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8013a76:	2300      	movs	r3, #0
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d06a      	beq.n	8013b52 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8013a7c:	6878      	ldr	r0, [r7, #4]
 8013a7e:	f009 feca 	bl	801d816 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	3322      	adds	r3, #34	; 0x22
 8013a86:	623b      	str	r3, [r7, #32]
 8013a88:	2301      	movs	r3, #1
 8013a8a:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8013a8c:	6a3b      	ldr	r3, [r7, #32]
 8013a8e:	8adb      	ldrh	r3, [r3, #22]
 8013a90:	8bfa      	ldrh	r2, [r7, #30]
 8013a92:	429a      	cmp	r2, r3
 8013a94:	d305      	bcc.n	8013aa2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8013a96:	4b36      	ldr	r3, [pc, #216]	; (8013b70 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8013a98:	4a36      	ldr	r2, [pc, #216]	; (8013b74 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8013a9a:	21cb      	movs	r1, #203	; 0xcb
 8013a9c:	4833      	ldr	r0, [pc, #204]	; (8013b6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8013a9e:	f019 f843 	bl	802cb28 <__assert_func>
            const uint16_t index = pos + offset;
 8013aa2:	6a3b      	ldr	r3, [r7, #32]
 8013aa4:	8a9a      	ldrh	r2, [r3, #20]
 8013aa6:	8bfb      	ldrh	r3, [r7, #30]
 8013aa8:	4413      	add	r3, r2
 8013aaa:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8013aac:	8bbb      	ldrh	r3, [r7, #28]
 8013aae:	2b09      	cmp	r3, #9
 8013ab0:	d801      	bhi.n	8013ab6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8013ab2:	8bbb      	ldrh	r3, [r7, #28]
 8013ab4:	e001      	b.n	8013aba <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8013ab6:	8bbb      	ldrh	r3, [r7, #28]
 8013ab8:	3b0a      	subs	r3, #10
 8013aba:	6a3a      	ldr	r2, [r7, #32]
 8013abc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013ac0:	f640 123f 	movw	r2, #2367	; 0x93f
 8013ac4:	4293      	cmp	r3, r2
 8013ac6:	bf0c      	ite	eq
 8013ac8:	2301      	moveq	r3, #1
 8013aca:	2300      	movne	r3, #0
 8013acc:	b2db      	uxtb	r3, r3
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d03f      	beq.n	8013b52 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	3322      	adds	r3, #34	; 0x22
 8013ad6:	687a      	ldr	r2, [r7, #4]
 8013ad8:	3222      	adds	r2, #34	; 0x22
 8013ada:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8013adc:	68ba      	ldr	r2, [r7, #8]
 8013ade:	8ad2      	ldrh	r2, [r2, #22]
 8013ae0:	2a00      	cmp	r2, #0
 8013ae2:	d105      	bne.n	8013af0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8013ae4:	4b1f      	ldr	r3, [pc, #124]	; (8013b64 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8013ae6:	4a20      	ldr	r2, [pc, #128]	; (8013b68 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8013ae8:	21c5      	movs	r1, #197	; 0xc5
 8013aea:	4820      	ldr	r0, [pc, #128]	; (8013b6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8013aec:	f019 f81c 	bl	802cb28 <__assert_func>
            return buffer[pos];
 8013af0:	68ba      	ldr	r2, [r7, #8]
 8013af2:	8a92      	ldrh	r2, [r2, #20]
 8013af4:	4611      	mov	r1, r2
 8013af6:	68ba      	ldr	r2, [r7, #8]
 8013af8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8013afc:	613b      	str	r3, [r7, #16]
 8013afe:	4613      	mov	r3, r2
 8013b00:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8013b02:	693b      	ldr	r3, [r7, #16]
 8013b04:	8adb      	ldrh	r3, [r3, #22]
 8013b06:	2b01      	cmp	r3, #1
 8013b08:	d806      	bhi.n	8013b18 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8013b0a:	4b1b      	ldr	r3, [pc, #108]	; (8013b78 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8013b0c:	4a1b      	ldr	r2, [pc, #108]	; (8013b7c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8013b0e:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8013b12:	4816      	ldr	r0, [pc, #88]	; (8013b6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8013b14:	f019 f808 	bl	802cb28 <__assert_func>
            const uint16_t index = pos + 1;
 8013b18:	693b      	ldr	r3, [r7, #16]
 8013b1a:	8a9b      	ldrh	r3, [r3, #20]
 8013b1c:	3301      	adds	r3, #1
 8013b1e:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8013b20:	89bb      	ldrh	r3, [r7, #12]
 8013b22:	2b09      	cmp	r3, #9
 8013b24:	d801      	bhi.n	8013b2a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8013b26:	89bb      	ldrh	r3, [r7, #12]
 8013b28:	e000      	b.n	8013b2c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8013b2a:	2300      	movs	r3, #0
 8013b2c:	693a      	ldr	r2, [r7, #16]
 8013b2e:	89f9      	ldrh	r1, [r7, #14]
 8013b30:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8013b34:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	3322      	adds	r3, #34	; 0x22
 8013b3a:	61bb      	str	r3, [r7, #24]
 8013b3c:	f640 133f 	movw	r3, #2367	; 0x93f
 8013b40:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8013b42:	69bb      	ldr	r3, [r7, #24]
 8013b44:	8a9b      	ldrh	r3, [r3, #20]
 8013b46:	4619      	mov	r1, r3
 8013b48:	69bb      	ldr	r3, [r7, #24]
 8013b4a:	8afa      	ldrh	r2, [r7, #22]
 8013b4c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8013b50:	bf00      	nop
        }
    }
    return getNextChar();
 8013b52:	6878      	ldr	r0, [r7, #4]
 8013b54:	f009 fd62 	bl	801d61c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8013b58:	4603      	mov	r3, r0
}
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	3728      	adds	r7, #40	; 0x28
 8013b5e:	46bd      	mov	sp, r7
 8013b60:	bd80      	pop	{r7, pc}
 8013b62:	bf00      	nop
 8013b64:	0802df90 	.word	0x0802df90
 8013b68:	0802df9c 	.word	0x0802df9c
 8013b6c:	0802e048 	.word	0x0802e048
 8013b70:	0802e090 	.word	0x0802e090
 8013b74:	0802e0a0 	.word	0x0802e0a0
 8013b78:	0802e174 	.word	0x0802e174
 8013b7c:	0802e180 	.word	0x0802e180

08013b80 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8013b80:	b580      	push	{r7, lr}
 8013b82:	b082      	sub	sp, #8
 8013b84:	af00      	add	r7, sp, #0
 8013b86:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8013b88:	6878      	ldr	r0, [r7, #4]
 8013b8a:	f009 fd0e 	bl	801d5aa <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8013b8e:	bf00      	nop
 8013b90:	3708      	adds	r7, #8
 8013b92:	46bd      	mov	sp, r7
 8013b94:	bd80      	pop	{r7, pc}
	...

08013b98 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8013b98:	b590      	push	{r4, r7, lr}
 8013b9a:	b085      	sub	sp, #20
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	4603      	mov	r3, r0
 8013ba0:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8013ba2:	2300      	movs	r3, #0
 8013ba4:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8013ba6:	88fb      	ldrh	r3, [r7, #6]
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d127      	bne.n	8013bfc <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8013bac:	88fb      	ldrh	r3, [r7, #6]
 8013bae:	4a1e      	ldr	r2, [pc, #120]	; (8013c28 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8013bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d016      	beq.n	8013be6 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8013bb8:	88fb      	ldrh	r3, [r7, #6]
 8013bba:	4a1b      	ldr	r2, [pc, #108]	; (8013c28 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8013bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013bc0:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8013bc2:	68bb      	ldr	r3, [r7, #8]
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	68ba      	ldr	r2, [r7, #8]
 8013bc8:	4413      	add	r3, r2
 8013bca:	4a18      	ldr	r2, [pc, #96]	; (8013c2c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8013bcc:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8013bce:	68bb      	ldr	r3, [r7, #8]
 8013bd0:	685b      	ldr	r3, [r3, #4]
 8013bd2:	68ba      	ldr	r2, [r7, #8]
 8013bd4:	4413      	add	r3, r2
 8013bd6:	4a16      	ldr	r2, [pc, #88]	; (8013c30 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8013bd8:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8013bda:	68bb      	ldr	r3, [r7, #8]
 8013bdc:	689b      	ldr	r3, [r3, #8]
 8013bde:	68ba      	ldr	r2, [r7, #8]
 8013be0:	4413      	add	r3, r2
 8013be2:	60fb      	str	r3, [r7, #12]
 8013be4:	e00a      	b.n	8013bfc <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8013be6:	4b11      	ldr	r3, [pc, #68]	; (8013c2c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8013be8:	4a12      	ldr	r2, [pc, #72]	; (8013c34 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8013bea:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8013bec:	4a12      	ldr	r2, [pc, #72]	; (8013c38 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8013bee:	4b10      	ldr	r3, [pc, #64]	; (8013c30 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8013bf0:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8013bf2:	88fb      	ldrh	r3, [r7, #6]
 8013bf4:	4a11      	ldr	r2, [pc, #68]	; (8013c3c <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8013bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013bfa:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d00d      	beq.n	8013c1e <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8013c02:	4a0f      	ldr	r2, [pc, #60]	; (8013c40 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8013c04:	88fb      	ldrh	r3, [r7, #6]
 8013c06:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8013c08:	f000 f824 	bl	8013c54 <_ZN17TypedTextDatabase8getFontsEv>
 8013c0c:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8013c0e:	f000 f819 	bl	8013c44 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8013c12:	4603      	mov	r3, r0
 8013c14:	461a      	mov	r2, r3
 8013c16:	4621      	mov	r1, r4
 8013c18:	68f8      	ldr	r0, [r7, #12]
 8013c1a:	f7ff febd 	bl	8013998 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8013c1e:	bf00      	nop
 8013c20:	3714      	adds	r7, #20
 8013c22:	46bd      	mov	sp, r7
 8013c24:	bd90      	pop	{r4, r7, pc}
 8013c26:	bf00      	nop
 8013c28:	2000948c 	.word	0x2000948c
 8013c2c:	20009494 	.word	0x20009494
 8013c30:	20009498 	.word	0x20009498
 8013c34:	0812f9b4 	.word	0x0812f9b4
 8013c38:	0812f9b0 	.word	0x0812f9b0
 8013c3c:	0812f9bc 	.word	0x0812f9bc
 8013c40:	20009490 	.word	0x20009490

08013c44 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8013c44:	b480      	push	{r7}
 8013c46:	af00      	add	r7, sp, #0
    return 0;
 8013c48:	2300      	movs	r3, #0
}
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	46bd      	mov	sp, r7
 8013c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c52:	4770      	bx	lr

08013c54 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8013c54:	b480      	push	{r7}
 8013c56:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8013c58:	4b02      	ldr	r3, [pc, #8]	; (8013c64 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	46bd      	mov	sp, r7
 8013c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c62:	4770      	bx	lr
 8013c64:	2000949c 	.word	0x2000949c

08013c68 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8013c68:	b580      	push	{r7, lr}
 8013c6a:	b082      	sub	sp, #8
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	6078      	str	r0, [r7, #4]
 8013c70:	6039      	str	r1, [r7, #0]
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	2b01      	cmp	r3, #1
 8013c76:	d113      	bne.n	8013ca0 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8013c78:	683b      	ldr	r3, [r7, #0]
 8013c7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013c7e:	4293      	cmp	r3, r2
 8013c80:	d10e      	bne.n	8013ca0 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 8013c82:	f7fe f9db 	bl	801203c <_Z23getFont_verdana_20_4bppv>
 8013c86:	4603      	mov	r3, r0
};
 8013c88:	4a07      	ldr	r2, [pc, #28]	; (8013ca8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8013c8a:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8013c8c:	f7fe fa30 	bl	80120f0 <_Z23getFont_verdana_40_4bppv>
 8013c90:	4603      	mov	r3, r0
};
 8013c92:	4a05      	ldr	r2, [pc, #20]	; (8013ca8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8013c94:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 8013c96:	f7fe f977 	bl	8011f88 <_Z23getFont_verdana_10_4bppv>
 8013c9a:	4603      	mov	r3, r0
};
 8013c9c:	4a02      	ldr	r2, [pc, #8]	; (8013ca8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8013c9e:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 8013ca0:	bf00      	nop
 8013ca2:	3708      	adds	r7, #8
 8013ca4:	46bd      	mov	sp, r7
 8013ca6:	bd80      	pop	{r7, pc}
 8013ca8:	2000949c 	.word	0x2000949c

08013cac <_GLOBAL__sub_I_touchgfx_fonts>:
 8013cac:	b580      	push	{r7, lr}
 8013cae:	af00      	add	r7, sp, #0
 8013cb0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013cb4:	2001      	movs	r0, #1
 8013cb6:	f7ff ffd7 	bl	8013c68 <_Z41__static_initialization_and_destruction_0ii>
 8013cba:	bd80      	pop	{r7, pc}

08013cbc <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8013cbc:	b580      	push	{r7, lr}
 8013cbe:	b082      	sub	sp, #8
 8013cc0:	af00      	add	r7, sp, #0
 8013cc2:	6078      	str	r0, [r7, #4]
 8013cc4:	4a05      	ldr	r2, [pc, #20]	; (8013cdc <_ZN19FrontendApplicationD1Ev+0x20>)
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	601a      	str	r2, [r3, #0]
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	4618      	mov	r0, r3
 8013cce:	f7fe fc6f 	bl	80125b0 <_ZN23FrontendApplicationBaseD1Ev>
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	3708      	adds	r7, #8
 8013cd8:	46bd      	mov	sp, r7
 8013cda:	bd80      	pop	{r7, pc}
 8013cdc:	0802e9c8 	.word	0x0802e9c8

08013ce0 <_ZN19FrontendApplicationD0Ev>:
 8013ce0:	b580      	push	{r7, lr}
 8013ce2:	b082      	sub	sp, #8
 8013ce4:	af00      	add	r7, sp, #0
 8013ce6:	6078      	str	r0, [r7, #4]
 8013ce8:	6878      	ldr	r0, [r7, #4]
 8013cea:	f7ff ffe7 	bl	8013cbc <_ZN19FrontendApplicationD1Ev>
 8013cee:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8013cf2:	6878      	ldr	r0, [r7, #4]
 8013cf4:	f018 f927 	bl	802bf46 <_ZdlPvj>
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	4618      	mov	r0, r3
 8013cfc:	3708      	adds	r7, #8
 8013cfe:	46bd      	mov	sp, r7
 8013d00:	bd80      	pop	{r7, pc}

08013d02 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8013d02:	b580      	push	{r7, lr}
 8013d04:	b082      	sub	sp, #8
 8013d06:	af00      	add	r7, sp, #0
 8013d08:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8013d10:	4618      	mov	r0, r3
 8013d12:	f000 f95b 	bl	8013fcc <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	4618      	mov	r0, r3
 8013d1a:	f007 fb67 	bl	801b3ec <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8013d1e:	bf00      	nop
 8013d20:	3708      	adds	r7, #8
 8013d22:	46bd      	mov	sp, r7
 8013d24:	bd80      	pop	{r7, pc}
	...

08013d28 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	b084      	sub	sp, #16
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	60f8      	str	r0, [r7, #12]
 8013d30:	60b9      	str	r1, [r7, #8]
 8013d32:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	687a      	ldr	r2, [r7, #4]
 8013d38:	68b9      	ldr	r1, [r7, #8]
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	f7fe fc88 	bl	8012650 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8013d40:	4a03      	ldr	r2, [pc, #12]	; (8013d50 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	601a      	str	r2, [r3, #0]
{

}
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	4618      	mov	r0, r3
 8013d4a:	3710      	adds	r7, #16
 8013d4c:	46bd      	mov	sp, r7
 8013d4e:	bd80      	pop	{r7, pc}
 8013d50:	0802e9c8 	.word	0x0802e9c8

08013d54 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8013d54:	b480      	push	{r7}
 8013d56:	b083      	sub	sp, #12
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	6078      	str	r0, [r7, #4]
    {
    }
 8013d5c:	bf00      	nop
 8013d5e:	370c      	adds	r7, #12
 8013d60:	46bd      	mov	sp, r7
 8013d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d66:	4770      	bx	lr

08013d68 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8013d68:	b480      	push	{r7}
 8013d6a:	b083      	sub	sp, #12
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	6078      	str	r0, [r7, #4]
    {
    }
 8013d70:	bf00      	nop
 8013d72:	370c      	adds	r7, #12
 8013d74:	46bd      	mov	sp, r7
 8013d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d7a:	4770      	bx	lr

08013d7c <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8013d7c:	b480      	push	{r7}
 8013d7e:	b083      	sub	sp, #12
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	6078      	str	r0, [r7, #4]
    {
 8013d84:	4a04      	ldr	r2, [pc, #16]	; (8013d98 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	601a      	str	r2, [r3, #0]
    }
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	370c      	adds	r7, #12
 8013d90:	46bd      	mov	sp, r7
 8013d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d96:	4770      	bx	lr
 8013d98:	0802ea54 	.word	0x0802ea54

08013d9c <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8013d9c:	b580      	push	{r7, lr}
 8013d9e:	b082      	sub	sp, #8
 8013da0:	af00      	add	r7, sp, #0
 8013da2:	6078      	str	r0, [r7, #4]
    }
 8013da4:	6878      	ldr	r0, [r7, #4]
 8013da6:	f7ff ffe9 	bl	8013d7c <_ZN8touchgfx9PresenterD1Ev>
 8013daa:	2104      	movs	r1, #4
 8013dac:	6878      	ldr	r0, [r7, #4]
 8013dae:	f018 f8ca 	bl	802bf46 <_ZdlPvj>
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	4618      	mov	r0, r3
 8013db6:	3708      	adds	r7, #8
 8013db8:	46bd      	mov	sp, r7
 8013dba:	bd80      	pop	{r7, pc}

08013dbc <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8013dbc:	b480      	push	{r7}
 8013dbe:	b083      	sub	sp, #12
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	6078      	str	r0, [r7, #4]
    {
 8013dc4:	4a04      	ldr	r2, [pc, #16]	; (8013dd8 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	601a      	str	r2, [r3, #0]
    }
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	4618      	mov	r0, r3
 8013dce:	370c      	adds	r7, #12
 8013dd0:	46bd      	mov	sp, r7
 8013dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dd6:	4770      	bx	lr
 8013dd8:	0802ea54 	.word	0x0802ea54

08013ddc <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8013ddc:	b480      	push	{r7}
 8013dde:	b083      	sub	sp, #12
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	6078      	str	r0, [r7, #4]
 8013de4:	4a06      	ldr	r2, [pc, #24]	; (8013e00 <_ZN13ModelListenerC1Ev+0x24>)
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	601a      	str	r2, [r3, #0]
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	2200      	movs	r2, #0
 8013dee:	605a      	str	r2, [r3, #4]
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	4618      	mov	r0, r3
 8013df4:	370c      	adds	r7, #12
 8013df6:	46bd      	mov	sp, r7
 8013df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dfc:	4770      	bx	lr
 8013dfe:	bf00      	nop
 8013e00:	0802ea44 	.word	0x0802ea44

08013e04 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8013e04:	b480      	push	{r7}
 8013e06:	b083      	sub	sp, #12
 8013e08:	af00      	add	r7, sp, #0
 8013e0a:	6078      	str	r0, [r7, #4]
 8013e0c:	4a04      	ldr	r2, [pc, #16]	; (8013e20 <_ZN13ModelListenerD1Ev+0x1c>)
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	601a      	str	r2, [r3, #0]
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	4618      	mov	r0, r3
 8013e16:	370c      	adds	r7, #12
 8013e18:	46bd      	mov	sp, r7
 8013e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e1e:	4770      	bx	lr
 8013e20:	0802ea44 	.word	0x0802ea44

08013e24 <_ZN13ModelListenerD0Ev>:
 8013e24:	b580      	push	{r7, lr}
 8013e26:	b082      	sub	sp, #8
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	6078      	str	r0, [r7, #4]
 8013e2c:	6878      	ldr	r0, [r7, #4]
 8013e2e:	f7ff ffe9 	bl	8013e04 <_ZN13ModelListenerD1Ev>
 8013e32:	2108      	movs	r1, #8
 8013e34:	6878      	ldr	r0, [r7, #4]
 8013e36:	f018 f886 	bl	802bf46 <_ZdlPvj>
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	3708      	adds	r7, #8
 8013e40:	46bd      	mov	sp, r7
 8013e42:	bd80      	pop	{r7, pc}

08013e44 <_ZN13mainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~mainPresenter() {}
 8013e44:	b580      	push	{r7, lr}
 8013e46:	b082      	sub	sp, #8
 8013e48:	af00      	add	r7, sp, #0
 8013e4a:	6078      	str	r0, [r7, #4]
 8013e4c:	4a09      	ldr	r2, [pc, #36]	; (8013e74 <_ZN13mainPresenterD1Ev+0x30>)
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	601a      	str	r2, [r3, #0]
 8013e52:	4a09      	ldr	r2, [pc, #36]	; (8013e78 <_ZN13mainPresenterD1Ev+0x34>)
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	605a      	str	r2, [r3, #4]
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	3304      	adds	r3, #4
 8013e5c:	4618      	mov	r0, r3
 8013e5e:	f7ff ffd1 	bl	8013e04 <_ZN13ModelListenerD1Ev>
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	4618      	mov	r0, r3
 8013e66:	f7ff ff89 	bl	8013d7c <_ZN8touchgfx9PresenterD1Ev>
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	3708      	adds	r7, #8
 8013e70:	46bd      	mov	sp, r7
 8013e72:	bd80      	pop	{r7, pc}
 8013e74:	0802ea1c 	.word	0x0802ea1c
 8013e78:	0802ea34 	.word	0x0802ea34

08013e7c <_ZThn4_N13mainPresenterD1Ev>:
 8013e7c:	f1a0 0004 	sub.w	r0, r0, #4
 8013e80:	e7e0      	b.n	8013e44 <_ZN13mainPresenterD1Ev>
 8013e82:	bf00      	nop

08013e84 <_ZN13mainPresenterD0Ev>:
 8013e84:	b580      	push	{r7, lr}
 8013e86:	b082      	sub	sp, #8
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	6078      	str	r0, [r7, #4]
 8013e8c:	6878      	ldr	r0, [r7, #4]
 8013e8e:	f7ff ffd9 	bl	8013e44 <_ZN13mainPresenterD1Ev>
 8013e92:	2110      	movs	r1, #16
 8013e94:	6878      	ldr	r0, [r7, #4]
 8013e96:	f018 f856 	bl	802bf46 <_ZdlPvj>
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	3708      	adds	r7, #8
 8013ea0:	46bd      	mov	sp, r7
 8013ea2:	bd80      	pop	{r7, pc}

08013ea4 <_ZThn4_N13mainPresenterD0Ev>:
 8013ea4:	f1a0 0004 	sub.w	r0, r0, #4
 8013ea8:	e7ec      	b.n	8013e84 <_ZN13mainPresenterD0Ev>
	...

08013eac <_ZN13mainPresenterC1ER8mainView>:
#include <gui/main_screen/mainView.hpp>
#include <gui/main_screen/mainPresenter.hpp>

mainPresenter::mainPresenter(mainView& v)
 8013eac:	b580      	push	{r7, lr}
 8013eae:	b082      	sub	sp, #8
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	6078      	str	r0, [r7, #4]
 8013eb4:	6039      	str	r1, [r7, #0]
    : view(v)
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	4618      	mov	r0, r3
 8013eba:	f7ff ff7f 	bl	8013dbc <_ZN8touchgfx9PresenterC1Ev>
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	3304      	adds	r3, #4
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	f7ff ff8a 	bl	8013ddc <_ZN13ModelListenerC1Ev>
 8013ec8:	4a06      	ldr	r2, [pc, #24]	; (8013ee4 <_ZN13mainPresenterC1ER8mainView+0x38>)
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	601a      	str	r2, [r3, #0]
 8013ece:	4a06      	ldr	r2, [pc, #24]	; (8013ee8 <_ZN13mainPresenterC1ER8mainView+0x3c>)
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	605a      	str	r2, [r3, #4]
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	683a      	ldr	r2, [r7, #0]
 8013ed8:	60da      	str	r2, [r3, #12]
{

}
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	4618      	mov	r0, r3
 8013ede:	3708      	adds	r7, #8
 8013ee0:	46bd      	mov	sp, r7
 8013ee2:	bd80      	pop	{r7, pc}
 8013ee4:	0802ea1c 	.word	0x0802ea1c
 8013ee8:	0802ea34 	.word	0x0802ea34

08013eec <_ZN13mainPresenter8activateEv>:

void mainPresenter::activate()
{
 8013eec:	b480      	push	{r7}
 8013eee:	b083      	sub	sp, #12
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	6078      	str	r0, [r7, #4]

}
 8013ef4:	bf00      	nop
 8013ef6:	370c      	adds	r7, #12
 8013ef8:	46bd      	mov	sp, r7
 8013efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013efe:	4770      	bx	lr

08013f00 <_ZN13mainPresenter10deactivateEv>:

void mainPresenter::deactivate()
{
 8013f00:	b480      	push	{r7}
 8013f02:	b083      	sub	sp, #12
 8013f04:	af00      	add	r7, sp, #0
 8013f06:	6078      	str	r0, [r7, #4]

}
 8013f08:	bf00      	nop
 8013f0a:	370c      	adds	r7, #12
 8013f0c:	46bd      	mov	sp, r7
 8013f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f12:	4770      	bx	lr

08013f14 <_ZN8mainViewD1Ev>:

class mainView : public mainViewBase
{
public:
    mainView();
    virtual ~mainView() {}
 8013f14:	b580      	push	{r7, lr}
 8013f16:	b082      	sub	sp, #8
 8013f18:	af00      	add	r7, sp, #0
 8013f1a:	6078      	str	r0, [r7, #4]
 8013f1c:	4a05      	ldr	r2, [pc, #20]	; (8013f34 <_ZN8mainViewD1Ev+0x20>)
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	601a      	str	r2, [r3, #0]
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	4618      	mov	r0, r3
 8013f26:	f7ff fb5f 	bl	80135e8 <_ZN12mainViewBaseD1Ev>
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	3708      	adds	r7, #8
 8013f30:	46bd      	mov	sp, r7
 8013f32:	bd80      	pop	{r7, pc}
 8013f34:	0802ea6c 	.word	0x0802ea6c

08013f38 <_ZN8mainViewD0Ev>:
 8013f38:	b580      	push	{r7, lr}
 8013f3a:	b082      	sub	sp, #8
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	6078      	str	r0, [r7, #4]
 8013f40:	6878      	ldr	r0, [r7, #4]
 8013f42:	f7ff ffe7 	bl	8013f14 <_ZN8mainViewD1Ev>
 8013f46:	f44f 711c 	mov.w	r1, #624	; 0x270
 8013f4a:	6878      	ldr	r0, [r7, #4]
 8013f4c:	f017 fffb 	bl	802bf46 <_ZdlPvj>
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	4618      	mov	r0, r3
 8013f54:	3708      	adds	r7, #8
 8013f56:	46bd      	mov	sp, r7
 8013f58:	bd80      	pop	{r7, pc}
	...

08013f5c <_ZN8mainViewC1Ev>:
#include <gui/main_screen/mainView.hpp>

mainView::mainView()
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b082      	sub	sp, #8
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	6078      	str	r0, [r7, #4]
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	4618      	mov	r0, r3
 8013f68:	f7ff fa3e 	bl	80133e8 <_ZN12mainViewBaseC1Ev>
 8013f6c:	4a03      	ldr	r2, [pc, #12]	; (8013f7c <_ZN8mainViewC1Ev+0x20>)
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	601a      	str	r2, [r3, #0]
{

}
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	4618      	mov	r0, r3
 8013f76:	3708      	adds	r7, #8
 8013f78:	46bd      	mov	sp, r7
 8013f7a:	bd80      	pop	{r7, pc}
 8013f7c:	0802ea6c 	.word	0x0802ea6c

08013f80 <_ZN8mainView11setupScreenEv>:

void mainView::setupScreen()
{
 8013f80:	b580      	push	{r7, lr}
 8013f82:	b082      	sub	sp, #8
 8013f84:	af00      	add	r7, sp, #0
 8013f86:	6078      	str	r0, [r7, #4]
    mainViewBase::setupScreen();
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	4618      	mov	r0, r3
 8013f8c:	f7ff fb63 	bl	8013656 <_ZN12mainViewBase11setupScreenEv>
}
 8013f90:	bf00      	nop
 8013f92:	3708      	adds	r7, #8
 8013f94:	46bd      	mov	sp, r7
 8013f96:	bd80      	pop	{r7, pc}

08013f98 <_ZN8mainView14tearDownScreenEv>:

void mainView::tearDownScreen()
{
 8013f98:	b580      	push	{r7, lr}
 8013f9a:	b082      	sub	sp, #8
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	6078      	str	r0, [r7, #4]
    mainViewBase::tearDownScreen();
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	4618      	mov	r0, r3
 8013fa4:	f7ff f864 	bl	8013070 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8013fa8:	bf00      	nop
 8013faa:	3708      	adds	r7, #8
 8013fac:	46bd      	mov	sp, r7
 8013fae:	bd80      	pop	{r7, pc}

08013fb0 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8013fb0:	b480      	push	{r7}
 8013fb2:	b083      	sub	sp, #12
 8013fb4:	af00      	add	r7, sp, #0
 8013fb6:	6078      	str	r0, [r7, #4]
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	2200      	movs	r2, #0
 8013fbc:	601a      	str	r2, [r3, #0]
{

}
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	370c      	adds	r7, #12
 8013fc4:	46bd      	mov	sp, r7
 8013fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fca:	4770      	bx	lr

08013fcc <_ZN5Model4tickEv>:

void Model::tick()
{
 8013fcc:	b480      	push	{r7}
 8013fce:	b083      	sub	sp, #12
 8013fd0:	af00      	add	r7, sp, #0
 8013fd2:	6078      	str	r0, [r7, #4]

}
 8013fd4:	bf00      	nop
 8013fd6:	370c      	adds	r7, #12
 8013fd8:	46bd      	mov	sp, r7
 8013fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fde:	4770      	bx	lr

08013fe0 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8013fe0:	b480      	push	{r7}
 8013fe2:	b083      	sub	sp, #12
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	6078      	str	r0, [r7, #4]
    {
 8013fe8:	4a04      	ldr	r2, [pc, #16]	; (8013ffc <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	601a      	str	r2, [r3, #0]
    }
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	4618      	mov	r0, r3
 8013ff2:	370c      	adds	r7, #12
 8013ff4:	46bd      	mov	sp, r7
 8013ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ffa:	4770      	bx	lr
 8013ffc:	0802eab8 	.word	0x0802eab8

08014000 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8014000:	b580      	push	{r7, lr}
 8014002:	b082      	sub	sp, #8
 8014004:	af00      	add	r7, sp, #0
 8014006:	6078      	str	r0, [r7, #4]
    }
 8014008:	6878      	ldr	r0, [r7, #4]
 801400a:	f7ff ffe9 	bl	8013fe0 <_ZN8touchgfx15TouchControllerD1Ev>
 801400e:	2104      	movs	r1, #4
 8014010:	6878      	ldr	r0, [r7, #4]
 8014012:	f017 ff98 	bl	802bf46 <_ZdlPvj>
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	4618      	mov	r0, r3
 801401a:	3708      	adds	r7, #8
 801401c:	46bd      	mov	sp, r7
 801401e:	bd80      	pop	{r7, pc}

08014020 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8014020:	b480      	push	{r7}
 8014022:	b083      	sub	sp, #12
 8014024:	af00      	add	r7, sp, #0
 8014026:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8014028:	bf00      	nop
 801402a:	370c      	adds	r7, #12
 801402c:	46bd      	mov	sp, r7
 801402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014032:	4770      	bx	lr

08014034 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8014034:	b480      	push	{r7}
 8014036:	b085      	sub	sp, #20
 8014038:	af00      	add	r7, sp, #0
 801403a:	60f8      	str	r0, [r7, #12]
 801403c:	60b9      	str	r1, [r7, #8]
 801403e:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8014040:	2300      	movs	r3, #0
}
 8014042:	4618      	mov	r0, r3
 8014044:	3714      	adds	r7, #20
 8014046:	46bd      	mov	sp, r7
 8014048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801404c:	4770      	bx	lr
	...

08014050 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8014050:	b580      	push	{r7, lr}
 8014052:	b082      	sub	sp, #8
 8014054:	af00      	add	r7, sp, #0
 8014056:	6078      	str	r0, [r7, #4]
 8014058:	4a05      	ldr	r2, [pc, #20]	; (8014070 <_ZN20STM32TouchControllerD1Ev+0x20>)
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	601a      	str	r2, [r3, #0]
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	4618      	mov	r0, r3
 8014062:	f7ff ffbd 	bl	8013fe0 <_ZN8touchgfx15TouchControllerD1Ev>
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	4618      	mov	r0, r3
 801406a:	3708      	adds	r7, #8
 801406c:	46bd      	mov	sp, r7
 801406e:	bd80      	pop	{r7, pc}
 8014070:	0802eaa0 	.word	0x0802eaa0

08014074 <_ZN20STM32TouchControllerD0Ev>:
 8014074:	b580      	push	{r7, lr}
 8014076:	b082      	sub	sp, #8
 8014078:	af00      	add	r7, sp, #0
 801407a:	6078      	str	r0, [r7, #4]
 801407c:	6878      	ldr	r0, [r7, #4]
 801407e:	f7ff ffe7 	bl	8014050 <_ZN20STM32TouchControllerD1Ev>
 8014082:	2104      	movs	r1, #4
 8014084:	6878      	ldr	r0, [r7, #4]
 8014086:	f017 ff5e 	bl	802bf46 <_ZdlPvj>
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	4618      	mov	r0, r3
 801408e:	3708      	adds	r7, #8
 8014090:	46bd      	mov	sp, r7
 8014092:	bd80      	pop	{r7, pc}

08014094 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 8014094:	b480      	push	{r7}
 8014096:	af00      	add	r7, sp, #0

}
 8014098:	bf00      	nop
 801409a:	46bd      	mov	sp, r7
 801409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140a0:	4770      	bx	lr
	...

080140a4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80140a4:	b480      	push	{r7}
 80140a6:	b083      	sub	sp, #12
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	4603      	mov	r3, r0
 80140ac:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80140ae:	79fb      	ldrb	r3, [r7, #7]
 80140b0:	2b03      	cmp	r3, #3
 80140b2:	d80c      	bhi.n	80140ce <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 80140b4:	a201      	add	r2, pc, #4	; (adr r2, 80140bc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 80140b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140ba:	bf00      	nop
 80140bc:	080140cd 	.word	0x080140cd
 80140c0:	080140cd 	.word	0x080140cd
 80140c4:	080140cd 	.word	0x080140cd
 80140c8:	080140cd 	.word	0x080140cd
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 80140cc:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 80140ce:	bf00      	nop
 80140d0:	370c      	adds	r7, #12
 80140d2:	46bd      	mov	sp, r7
 80140d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140d8:	4770      	bx	lr
 80140da:	bf00      	nop

080140dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 80140dc:	b480      	push	{r7}
 80140de:	b083      	sub	sp, #12
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	4603      	mov	r3, r0
 80140e4:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80140e6:	79fb      	ldrb	r3, [r7, #7]
 80140e8:	2b03      	cmp	r3, #3
 80140ea:	d80c      	bhi.n	8014106 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 80140ec:	a201      	add	r2, pc, #4	; (adr r2, 80140f4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 80140ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140f2:	bf00      	nop
 80140f4:	08014105 	.word	0x08014105
 80140f8:	08014105 	.word	0x08014105
 80140fc:	08014105 	.word	0x08014105
 8014100:	08014105 	.word	0x08014105
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 8014104:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 8014106:	bf00      	nop
 8014108:	370c      	adds	r7, #12
 801410a:	46bd      	mov	sp, r7
 801410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014110:	4770      	bx	lr
 8014112:	bf00      	nop

08014114 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8014114:	b480      	push	{r7}
 8014116:	b083      	sub	sp, #12
 8014118:	af00      	add	r7, sp, #0
 801411a:	4603      	mov	r3, r0
 801411c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 801411e:	79fb      	ldrb	r3, [r7, #7]
 8014120:	2b03      	cmp	r3, #3
 8014122:	d80c      	bhi.n	801413e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 8014124:	a201      	add	r2, pc, #4	; (adr r2, 801412c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 8014126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801412a:	bf00      	nop
 801412c:	0801413d 	.word	0x0801413d
 8014130:	0801413d 	.word	0x0801413d
 8014134:	0801413d 	.word	0x0801413d
 8014138:	0801413d 	.word	0x0801413d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 801413c:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 801413e:	bf00      	nop
 8014140:	370c      	adds	r7, #12
 8014142:	46bd      	mov	sp, r7
 8014144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014148:	4770      	bx	lr
 801414a:	bf00      	nop

0801414c <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 801414c:	b480      	push	{r7}
 801414e:	b083      	sub	sp, #12
 8014150:	af00      	add	r7, sp, #0
 8014152:	6078      	str	r0, [r7, #4]
    {
 8014154:	4a04      	ldr	r2, [pc, #16]	; (8014168 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	601a      	str	r2, [r3, #0]
    }
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	4618      	mov	r0, r3
 801415e:	370c      	adds	r7, #12
 8014160:	46bd      	mov	sp, r7
 8014162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014166:	4770      	bx	lr
 8014168:	0802ef6c 	.word	0x0802ef6c

0801416c <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 801416c:	b580      	push	{r7, lr}
 801416e:	b082      	sub	sp, #8
 8014170:	af00      	add	r7, sp, #0
 8014172:	6078      	str	r0, [r7, #4]
    }
 8014174:	6878      	ldr	r0, [r7, #4]
 8014176:	f7ff ffe9 	bl	801414c <_ZN8touchgfx3HALD1Ev>
 801417a:	217c      	movs	r1, #124	; 0x7c
 801417c:	6878      	ldr	r0, [r7, #4]
 801417e:	f017 fee2 	bl	802bf46 <_ZdlPvj>
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	4618      	mov	r0, r3
 8014186:	3708      	adds	r7, #8
 8014188:	46bd      	mov	sp, r7
 801418a:	bd80      	pop	{r7, pc}

0801418c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 801418c:	b480      	push	{r7}
 801418e:	b083      	sub	sp, #12
 8014190:	af00      	add	r7, sp, #0
 8014192:	6078      	str	r0, [r7, #4]
 8014194:	460b      	mov	r3, r1
 8014196:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	78fa      	ldrb	r2, [r7, #3]
 801419c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        displayOrientationChangeRequested = true;
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	2201      	movs	r2, #1
 80141a4:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
    }
 80141a8:	bf00      	nop
 80141aa:	370c      	adds	r7, #12
 80141ac:	46bd      	mov	sp, r7
 80141ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b2:	4770      	bx	lr

080141b4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80141b4:	b580      	push	{r7, lr}
 80141b6:	b082      	sub	sp, #8
 80141b8:	af00      	add	r7, sp, #0
 80141ba:	6078      	str	r0, [r7, #4]
 80141bc:	460b      	mov	r3, r1
 80141be:	807b      	strh	r3, [r7, #2]
 80141c0:	4613      	mov	r3, r2
 80141c2:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80141c4:	4b0c      	ldr	r3, [pc, #48]	; (80141f8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 80141c6:	881b      	ldrh	r3, [r3, #0]
 80141c8:	887a      	ldrh	r2, [r7, #2]
 80141ca:	429a      	cmp	r2, r3
 80141cc:	d304      	bcc.n	80141d8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 80141ce:	4b0b      	ldr	r3, [pc, #44]	; (80141fc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 80141d0:	881b      	ldrh	r3, [r3, #0]
 80141d2:	883a      	ldrh	r2, [r7, #0]
 80141d4:	429a      	cmp	r2, r3
 80141d6:	d205      	bcs.n	80141e4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 80141d8:	4b09      	ldr	r3, [pc, #36]	; (8014200 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 80141da:	4a0a      	ldr	r2, [pc, #40]	; (8014204 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 80141dc:	219e      	movs	r1, #158	; 0x9e
 80141de:	480a      	ldr	r0, [pc, #40]	; (8014208 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 80141e0:	f018 fca2 	bl	802cb28 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 80141e4:	4a09      	ldr	r2, [pc, #36]	; (801420c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 80141e6:	887b      	ldrh	r3, [r7, #2]
 80141e8:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 80141ea:	4a09      	ldr	r2, [pc, #36]	; (8014210 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 80141ec:	883b      	ldrh	r3, [r7, #0]
 80141ee:	8013      	strh	r3, [r2, #0]
    }
 80141f0:	bf00      	nop
 80141f2:	3708      	adds	r7, #8
 80141f4:	46bd      	mov	sp, r7
 80141f6:	bd80      	pop	{r7, pc}
 80141f8:	2000af3c 	.word	0x2000af3c
 80141fc:	2000af3e 	.word	0x2000af3e
 8014200:	0802e234 	.word	0x0802e234
 8014204:	0802e298 	.word	0x0802e298
 8014208:	0802e2dc 	.word	0x0802e2dc
 801420c:	2000af42 	.word	0x2000af42
 8014210:	2000af44 	.word	0x2000af44

08014214 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8014214:	b580      	push	{r7, lr}
 8014216:	b082      	sub	sp, #8
 8014218:	af00      	add	r7, sp, #0
 801421a:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8014222:	2b00      	cmp	r3, #0
 8014224:	d009      	beq.n	801423a <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	685a      	ldr	r2, [r3, #4]
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	685b      	ldr	r3, [r3, #4]
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	4610      	mov	r0, r2
 8014234:	4798      	blx	r3
 8014236:	4603      	mov	r3, r0
 8014238:	e000      	b.n	801423c <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 801423a:	2300      	movs	r3, #0
    }
 801423c:	4618      	mov	r0, r3
 801423e:	3708      	adds	r7, #8
 8014240:	46bd      	mov	sp, r7
 8014242:	bd80      	pop	{r7, pc}

08014244 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8014244:	b580      	push	{r7, lr}
 8014246:	b082      	sub	sp, #8
 8014248:	af00      	add	r7, sp, #0
 801424a:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 801424c:	6878      	ldr	r0, [r7, #4]
 801424e:	f003 f959 	bl	8017504 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	33ac      	adds	r3, #172	; 0xac
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	6878      	ldr	r0, [r7, #4]
 801425c:	4798      	blx	r3
    }
 801425e:	bf00      	nop
 8014260:	3708      	adds	r7, #8
 8014262:	46bd      	mov	sp, r7
 8014264:	bd80      	pop	{r7, pc}

08014266 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8014266:	b480      	push	{r7}
 8014268:	b083      	sub	sp, #12
 801426a:	af00      	add	r7, sp, #0
 801426c:	6078      	str	r0, [r7, #4]
 801426e:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 8014270:	2300      	movs	r3, #0
    }
 8014272:	4618      	mov	r0, r3
 8014274:	370c      	adds	r7, #12
 8014276:	46bd      	mov	sp, r7
 8014278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801427c:	4770      	bx	lr
	...

08014280 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8014280:	b580      	push	{r7, lr}
 8014282:	b084      	sub	sp, #16
 8014284:	af00      	add	r7, sp, #0
 8014286:	60f8      	str	r0, [r7, #12]
 8014288:	60b9      	str	r1, [r7, #8]
 801428a:	607a      	str	r2, [r7, #4]
 801428c:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801428e:	68bb      	ldr	r3, [r7, #8]
 8014290:	2b00      	cmp	r3, #0
 8014292:	d106      	bne.n	80142a2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8014294:	4b0f      	ldr	r3, [pc, #60]	; (80142d4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8014296:	4a10      	ldr	r2, [pc, #64]	; (80142d8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8014298:	f240 21d2 	movw	r1, #722	; 0x2d2
 801429c:	480f      	ldr	r0, [pc, #60]	; (80142dc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 801429e:	f018 fc43 	bl	802cb28 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	68ba      	ldr	r2, [r7, #8]
 80142a6:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	687a      	ldr	r2, [r7, #4]
 80142ac:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	bf14      	ite	ne
 80142b4:	2301      	movne	r3, #1
 80142b6:	2300      	moveq	r3, #0
 80142b8:	b2da      	uxtb	r2, r3
 80142ba:	4b09      	ldr	r3, [pc, #36]	; (80142e0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 80142bc:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	338c      	adds	r3, #140	; 0x8c
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	6839      	ldr	r1, [r7, #0]
 80142c8:	68f8      	ldr	r0, [r7, #12]
 80142ca:	4798      	blx	r3
    }
 80142cc:	bf00      	nop
 80142ce:	3710      	adds	r7, #16
 80142d0:	46bd      	mov	sp, r7
 80142d2:	bd80      	pop	{r7, pc}
 80142d4:	0802e320 	.word	0x0802e320
 80142d8:	0802e358 	.word	0x0802e358
 80142dc:	0802e2dc 	.word	0x0802e2dc
 80142e0:	2000af46 	.word	0x2000af46

080142e4 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 80142e4:	b480      	push	{r7}
 80142e6:	b083      	sub	sp, #12
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	6078      	str	r0, [r7, #4]
 80142ec:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	683a      	ldr	r2, [r7, #0]
 80142f2:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80142f4:	683b      	ldr	r3, [r7, #0]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	bf14      	ite	ne
 80142fa:	2301      	movne	r3, #1
 80142fc:	2300      	moveq	r3, #0
 80142fe:	b2da      	uxtb	r2, r3
 8014300:	4b03      	ldr	r3, [pc, #12]	; (8014310 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 8014302:	701a      	strb	r2, [r3, #0]
    }
 8014304:	bf00      	nop
 8014306:	370c      	adds	r7, #12
 8014308:	46bd      	mov	sp, r7
 801430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801430e:	4770      	bx	lr
 8014310:	2000af47 	.word	0x2000af47

08014314 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8014314:	b480      	push	{r7}
 8014316:	b083      	sub	sp, #12
 8014318:	af00      	add	r7, sp, #0
 801431a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 801431c:	2300      	movs	r3, #0
    }
 801431e:	4618      	mov	r0, r3
 8014320:	370c      	adds	r7, #12
 8014322:	46bd      	mov	sp, r7
 8014324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014328:	4770      	bx	lr

0801432a <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 801432a:	b580      	push	{r7, lr}
 801432c:	b082      	sub	sp, #8
 801432e:	af00      	add	r7, sp, #0
 8014330:	6078      	str	r0, [r7, #4]
 8014332:	460b      	mov	r3, r1
 8014334:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801433a:	2b00      	cmp	r3, #0
 801433c:	d004      	beq.n	8014348 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014342:	887a      	ldrh	r2, [r7, #2]
 8014344:	4610      	mov	r0, r2
 8014346:	4798      	blx	r3
        }
    }
 8014348:	bf00      	nop
 801434a:	3708      	adds	r7, #8
 801434c:	46bd      	mov	sp, r7
 801434e:	bd80      	pop	{r7, pc}

08014350 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8014350:	b480      	push	{r7}
 8014352:	b083      	sub	sp, #12
 8014354:	af00      	add	r7, sp, #0
 8014356:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8014358:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 801435c:	4618      	mov	r0, r3
 801435e:	370c      	adds	r7, #12
 8014360:	46bd      	mov	sp, r7
 8014362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014366:	4770      	bx	lr

08014368 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8014368:	b580      	push	{r7, lr}
 801436a:	b082      	sub	sp, #8
 801436c:	af00      	add	r7, sp, #0
 801436e:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	685a      	ldr	r2, [r3, #4]
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	685b      	ldr	r3, [r3, #4]
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	3318      	adds	r3, #24
 801437c:	681b      	ldr	r3, [r3, #0]
 801437e:	4610      	mov	r0, r2
 8014380:	4798      	blx	r3
 8014382:	4603      	mov	r3, r0
    }
 8014384:	4618      	mov	r0, r3
 8014386:	3708      	adds	r7, #8
 8014388:	46bd      	mov	sp, r7
 801438a:	bd80      	pop	{r7, pc}

0801438c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 801438c:	b480      	push	{r7}
 801438e:	b085      	sub	sp, #20
 8014390:	af00      	add	r7, sp, #0
 8014392:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80143a0:	429a      	cmp	r2, r3
 80143a2:	d011      	beq.n	80143c8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 80143a4:	4b14      	ldr	r3, [pc, #80]	; (80143f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80143a6:	781b      	ldrb	r3, [r3, #0]
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d11e      	bne.n	80143ea <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 80143ac:	4b13      	ldr	r3, [pc, #76]	; (80143fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80143ae:	881b      	ldrh	r3, [r3, #0]
 80143b0:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80143b2:	4b13      	ldr	r3, [pc, #76]	; (8014400 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80143b4:	881a      	ldrh	r2, [r3, #0]
 80143b6:	4b11      	ldr	r3, [pc, #68]	; (80143fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80143b8:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 80143ba:	4a11      	ldr	r2, [pc, #68]	; (8014400 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80143bc:	89bb      	ldrh	r3, [r7, #12]
 80143be:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 80143c0:	4b0d      	ldr	r3, [pc, #52]	; (80143f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80143c2:	2201      	movs	r2, #1
 80143c4:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 80143c6:	e010      	b.n	80143ea <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 80143c8:	4b0b      	ldr	r3, [pc, #44]	; (80143f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80143ca:	781b      	ldrb	r3, [r3, #0]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d00c      	beq.n	80143ea <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 80143d0:	4b0a      	ldr	r3, [pc, #40]	; (80143fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80143d2:	881b      	ldrh	r3, [r3, #0]
 80143d4:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80143d6:	4b0a      	ldr	r3, [pc, #40]	; (8014400 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80143d8:	881a      	ldrh	r2, [r3, #0]
 80143da:	4b08      	ldr	r3, [pc, #32]	; (80143fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80143dc:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 80143de:	4a08      	ldr	r2, [pc, #32]	; (8014400 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80143e0:	89fb      	ldrh	r3, [r7, #14]
 80143e2:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 80143e4:	4b04      	ldr	r3, [pc, #16]	; (80143f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80143e6:	2200      	movs	r2, #0
 80143e8:	701a      	strb	r2, [r3, #0]
    }
 80143ea:	bf00      	nop
 80143ec:	3714      	adds	r7, #20
 80143ee:	46bd      	mov	sp, r7
 80143f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143f4:	4770      	bx	lr
 80143f6:	bf00      	nop
 80143f8:	2000af40 	.word	0x2000af40
 80143fc:	2000af3e 	.word	0x2000af3e
 8014400:	2000af3c 	.word	0x2000af3c

08014404 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 8014404:	b480      	push	{r7}
 8014406:	b083      	sub	sp, #12
 8014408:	af00      	add	r7, sp, #0
 801440a:	6078      	str	r0, [r7, #4]
    {
    }
 801440c:	bf00      	nop
 801440e:	370c      	adds	r7, #12
 8014410:	46bd      	mov	sp, r7
 8014412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014416:	4770      	bx	lr

08014418 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 8014418:	b480      	push	{r7}
 801441a:	b083      	sub	sp, #12
 801441c:	af00      	add	r7, sp, #0
 801441e:	6078      	str	r0, [r7, #4]
    {
    }
 8014420:	bf00      	nop
 8014422:	370c      	adds	r7, #12
 8014424:	46bd      	mov	sp, r7
 8014426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801442a:	4770      	bx	lr

0801442c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 801442c:	b580      	push	{r7, lr}
 801442e:	b082      	sub	sp, #8
 8014430:	af00      	add	r7, sp, #0
 8014432:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	4618      	mov	r0, r3
 8014438:	f002 fac2 	bl	80169c0 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 801443c:	bf00      	nop
 801443e:	3708      	adds	r7, #8
 8014440:	46bd      	mov	sp, r7
 8014442:	bd80      	pop	{r7, pc}

08014444 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8014444:	b580      	push	{r7, lr}
 8014446:	b082      	sub	sp, #8
 8014448:	af00      	add	r7, sp, #0
 801444a:	6078      	str	r0, [r7, #4]
 801444c:	4a05      	ldr	r2, [pc, #20]	; (8014464 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	601a      	str	r2, [r3, #0]
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	4618      	mov	r0, r3
 8014456:	f7ff fe79 	bl	801414c <_ZN8touchgfx3HALD1Ev>
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	4618      	mov	r0, r3
 801445e:	3708      	adds	r7, #8
 8014460:	46bd      	mov	sp, r7
 8014462:	bd80      	pop	{r7, pc}
 8014464:	0802ecf0 	.word	0x0802ecf0

08014468 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8014468:	b580      	push	{r7, lr}
 801446a:	b082      	sub	sp, #8
 801446c:	af00      	add	r7, sp, #0
 801446e:	6078      	str	r0, [r7, #4]
 8014470:	6878      	ldr	r0, [r7, #4]
 8014472:	f7ff ffe7 	bl	8014444 <_ZN20TouchGFXGeneratedHALD1Ev>
 8014476:	217c      	movs	r1, #124	; 0x7c
 8014478:	6878      	ldr	r0, [r7, #4]
 801447a:	f017 fd64 	bl	802bf46 <_ZdlPvj>
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	4618      	mov	r0, r3
 8014482:	3708      	adds	r7, #8
 8014484:	46bd      	mov	sp, r7
 8014486:	bd80      	pop	{r7, pc}

08014488 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8014488:	b580      	push	{r7, lr}
 801448a:	b082      	sub	sp, #8
 801448c:	af00      	add	r7, sp, #0
 801448e:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	4618      	mov	r0, r3
 8014494:	f7ff ffca 	bl	801442c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8014498:	bf00      	nop
 801449a:	3708      	adds	r7, #8
 801449c:	46bd      	mov	sp, r7
 801449e:	bd80      	pop	{r7, pc}

080144a0 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b082      	sub	sp, #8
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	4618      	mov	r0, r3
 80144ac:	f001 fa82 	bl	80159b4 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80144b0:	bf00      	nop
 80144b2:	3708      	adds	r7, #8
 80144b4:	46bd      	mov	sp, r7
 80144b6:	bd80      	pop	{r7, pc}

080144b8 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 80144b8:	b580      	push	{r7, lr}
 80144ba:	b082      	sub	sp, #8
 80144bc:	af00      	add	r7, sp, #0
 80144be:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	4618      	mov	r0, r3
 80144c4:	f001 fadc 	bl	8015a80 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 80144c8:	4603      	mov	r3, r0
}
 80144ca:	4618      	mov	r0, r3
 80144cc:	3708      	adds	r7, #8
 80144ce:	46bd      	mov	sp, r7
 80144d0:	bd80      	pop	{r7, pc}

080144d2 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 80144d2:	b580      	push	{r7, lr}
 80144d4:	b082      	sub	sp, #8
 80144d6:	af00      	add	r7, sp, #0
 80144d8:	6078      	str	r0, [r7, #4]
 80144da:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	6839      	ldr	r1, [r7, #0]
 80144e0:	4618      	mov	r0, r3
 80144e2:	f001 fad8 	bl	8015a96 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 80144e6:	bf00      	nop
 80144e8:	3708      	adds	r7, #8
 80144ea:	46bd      	mov	sp, r7
 80144ec:	bd80      	pop	{r7, pc}

080144ee <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80144ee:	b580      	push	{r7, lr}
 80144f0:	b082      	sub	sp, #8
 80144f2:	af00      	add	r7, sp, #0
 80144f4:	6078      	str	r0, [r7, #4]
 80144f6:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	6839      	ldr	r1, [r7, #0]
 80144fc:	4618      	mov	r0, r3
 80144fe:	f001 fad5 	bl	8015aac <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8014502:	bf00      	nop
 8014504:	3708      	adds	r7, #8
 8014506:	46bd      	mov	sp, r7
 8014508:	bd80      	pop	{r7, pc}

0801450a <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 801450a:	b580      	push	{r7, lr}
 801450c:	b084      	sub	sp, #16
 801450e:	af00      	add	r7, sp, #0
 8014510:	60f8      	str	r0, [r7, #12]
 8014512:	60b9      	str	r1, [r7, #8]
 8014514:	607a      	str	r2, [r7, #4]
 8014516:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8014518:	68f8      	ldr	r0, [r7, #12]
 801451a:	683b      	ldr	r3, [r7, #0]
 801451c:	687a      	ldr	r2, [r7, #4]
 801451e:	68b9      	ldr	r1, [r7, #8]
 8014520:	f001 fad2 	bl	8015ac8 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8014524:	4603      	mov	r3, r0
}
 8014526:	4618      	mov	r0, r3
 8014528:	3710      	adds	r7, #16
 801452a:	46bd      	mov	sp, r7
 801452c:	bd80      	pop	{r7, pc}

0801452e <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 801452e:	b580      	push	{r7, lr}
 8014530:	b082      	sub	sp, #8
 8014532:	af00      	add	r7, sp, #0
 8014534:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	4618      	mov	r0, r3
 801453a:	f001 fa5c 	bl	80159f6 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 801453e:	bf00      	nop
 8014540:	3708      	adds	r7, #8
 8014542:	46bd      	mov	sp, r7
 8014544:	bd80      	pop	{r7, pc}

08014546 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8014546:	b580      	push	{r7, lr}
 8014548:	b082      	sub	sp, #8
 801454a:	af00      	add	r7, sp, #0
 801454c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	4618      	mov	r0, r3
 8014552:	f001 fa5c 	bl	8015a0e <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8014556:	bf00      	nop
 8014558:	3708      	adds	r7, #8
 801455a:	46bd      	mov	sp, r7
 801455c:	bd80      	pop	{r7, pc}

0801455e <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 801455e:	b580      	push	{r7, lr}
 8014560:	b082      	sub	sp, #8
 8014562:	af00      	add	r7, sp, #0
 8014564:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	4618      	mov	r0, r3
 801456a:	f001 fa5b 	bl	8015a24 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 801456e:	bf00      	nop
 8014570:	3708      	adds	r7, #8
 8014572:	46bd      	mov	sp, r7
 8014574:	bd80      	pop	{r7, pc}

08014576 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8014576:	b580      	push	{r7, lr}
 8014578:	b082      	sub	sp, #8
 801457a:	af00      	add	r7, sp, #0
 801457c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	4618      	mov	r0, r3
 8014582:	f001 fa5a 	bl	8015a3a <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8014586:	bf00      	nop
 8014588:	3708      	adds	r7, #8
 801458a:	46bd      	mov	sp, r7
 801458c:	bd80      	pop	{r7, pc}

0801458e <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 801458e:	b580      	push	{r7, lr}
 8014590:	b082      	sub	sp, #8
 8014592:	af00      	add	r7, sp, #0
 8014594:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	4618      	mov	r0, r3
 801459a:	f001 fa58 	bl	8015a4e <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 801459e:	4603      	mov	r3, r0
}
 80145a0:	4618      	mov	r0, r3
 80145a2:	3708      	adds	r7, #8
 80145a4:	46bd      	mov	sp, r7
 80145a6:	bd80      	pop	{r7, pc}

080145a8 <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b082      	sub	sp, #8
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	4618      	mov	r0, r3
 80145b4:	f001 fa58 	bl	8015a68 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 80145b8:	bf00      	nop
 80145ba:	3708      	adds	r7, #8
 80145bc:	46bd      	mov	sp, r7
 80145be:	bd80      	pop	{r7, pc}

080145c0 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80145c0:	b580      	push	{r7, lr}
 80145c2:	b082      	sub	sp, #8
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	6078      	str	r0, [r7, #4]
 80145c8:	4a05      	ldr	r2, [pc, #20]	; (80145e0 <_ZN11TouchGFXHALD1Ev+0x20>)
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	601a      	str	r2, [r3, #0]
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	4618      	mov	r0, r3
 80145d2:	f7ff ff37 	bl	8014444 <_ZN20TouchGFXGeneratedHALD1Ev>
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	4618      	mov	r0, r3
 80145da:	3708      	adds	r7, #8
 80145dc:	46bd      	mov	sp, r7
 80145de:	bd80      	pop	{r7, pc}
 80145e0:	0802ead0 	.word	0x0802ead0

080145e4 <_ZN11TouchGFXHALD0Ev>:
 80145e4:	b580      	push	{r7, lr}
 80145e6:	b082      	sub	sp, #8
 80145e8:	af00      	add	r7, sp, #0
 80145ea:	6078      	str	r0, [r7, #4]
 80145ec:	6878      	ldr	r0, [r7, #4]
 80145ee:	f7ff ffe7 	bl	80145c0 <_ZN11TouchGFXHALD1Ev>
 80145f2:	217c      	movs	r1, #124	; 0x7c
 80145f4:	6878      	ldr	r0, [r7, #4]
 80145f6:	f017 fca6 	bl	802bf46 <_ZdlPvj>
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	4618      	mov	r0, r3
 80145fe:	3708      	adds	r7, #8
 8014600:	46bd      	mov	sp, r7
 8014602:	bd80      	pop	{r7, pc}

08014604 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8014604:	b580      	push	{r7, lr}
 8014606:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8014608:	2200      	movs	r2, #0
 801460a:	2101      	movs	r1, #1
 801460c:	2001      	movs	r0, #1
 801460e:	f7f9 ff77 	bl	800e500 <osSemaphoreNew>
 8014612:	4603      	mov	r3, r0
 8014614:	4a0f      	ldr	r2, [pc, #60]	; (8014654 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8014616:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8014618:	4b0e      	ldr	r3, [pc, #56]	; (8014654 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	2b00      	cmp	r3, #0
 801461e:	d105      	bne.n	801462c <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8014620:	4b0d      	ldr	r3, [pc, #52]	; (8014658 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8014622:	4a0e      	ldr	r2, [pc, #56]	; (801465c <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8014624:	2128      	movs	r1, #40	; 0x28
 8014626:	480e      	ldr	r0, [pc, #56]	; (8014660 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8014628:	f018 fa7e 	bl	802cb28 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 801462c:	2200      	movs	r2, #0
 801462e:	2104      	movs	r1, #4
 8014630:	2001      	movs	r0, #1
 8014632:	f7fa f885 	bl	800e740 <osMessageQueueNew>
 8014636:	4603      	mov	r3, r0
 8014638:	4a0a      	ldr	r2, [pc, #40]	; (8014664 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 801463a:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 801463c:	4b09      	ldr	r3, [pc, #36]	; (8014664 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	2b00      	cmp	r3, #0
 8014642:	d105      	bne.n	8014650 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8014644:	4b08      	ldr	r3, [pc, #32]	; (8014668 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8014646:	4a05      	ldr	r2, [pc, #20]	; (801465c <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8014648:	212c      	movs	r1, #44	; 0x2c
 801464a:	4805      	ldr	r0, [pc, #20]	; (8014660 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 801464c:	f018 fa6c 	bl	802cb28 <__assert_func>
}
 8014650:	bf00      	nop
 8014652:	bd80      	pop	{r7, pc}
 8014654:	200094a8 	.word	0x200094a8
 8014658:	0802e3a8 	.word	0x0802e3a8
 801465c:	0802e3f4 	.word	0x0802e3f4
 8014660:	0802e424 	.word	0x0802e424
 8014664:	200094ac 	.word	0x200094ac
 8014668:	0802e450 	.word	0x0802e450

0801466c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 801466c:	b580      	push	{r7, lr}
 801466e:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8014670:	4b04      	ldr	r3, [pc, #16]	; (8014684 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	f04f 31ff 	mov.w	r1, #4294967295
 8014678:	4618      	mov	r0, r3
 801467a:	f7f9 ffcb 	bl	800e614 <osSemaphoreAcquire>
}
 801467e:	bf00      	nop
 8014680:	bd80      	pop	{r7, pc}
 8014682:	bf00      	nop
 8014684:	200094a8 	.word	0x200094a8

08014688 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8014688:	b580      	push	{r7, lr}
 801468a:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 801468c:	4b03      	ldr	r3, [pc, #12]	; (801469c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	4618      	mov	r0, r3
 8014692:	f7fa f811 	bl	800e6b8 <osSemaphoreRelease>
}
 8014696:	bf00      	nop
 8014698:	bd80      	pop	{r7, pc}
 801469a:	bf00      	nop
 801469c:	200094a8 	.word	0x200094a8

080146a0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80146a0:	b580      	push	{r7, lr}
 80146a2:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80146a4:	4b03      	ldr	r3, [pc, #12]	; (80146b4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	2100      	movs	r1, #0
 80146aa:	4618      	mov	r0, r3
 80146ac:	f7f9 ffb2 	bl	800e614 <osSemaphoreAcquire>
}
 80146b0:	bf00      	nop
 80146b2:	bd80      	pop	{r7, pc}
 80146b4:	200094a8 	.word	0x200094a8

080146b8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80146b8:	b580      	push	{r7, lr}
 80146ba:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 80146bc:	4b03      	ldr	r3, [pc, #12]	; (80146cc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	4618      	mov	r0, r3
 80146c2:	f7f9 fff9 	bl	800e6b8 <osSemaphoreRelease>
}
 80146c6:	bf00      	nop
 80146c8:	bd80      	pop	{r7, pc}
 80146ca:	bf00      	nop
 80146cc:	200094a8 	.word	0x200094a8

080146d0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80146d0:	b580      	push	{r7, lr}
 80146d2:	b082      	sub	sp, #8
 80146d4:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 80146d6:	4b09      	ldr	r3, [pc, #36]	; (80146fc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80146d8:	6818      	ldr	r0, [r3, #0]
 80146da:	1d39      	adds	r1, r7, #4
 80146dc:	2300      	movs	r3, #0
 80146de:	2200      	movs	r2, #0
 80146e0:	f7fa f902 	bl	800e8e8 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 80146e4:	4b05      	ldr	r3, [pc, #20]	; (80146fc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80146e6:	6818      	ldr	r0, [r3, #0]
 80146e8:	1d39      	adds	r1, r7, #4
 80146ea:	f04f 33ff 	mov.w	r3, #4294967295
 80146ee:	2200      	movs	r2, #0
 80146f0:	f7fa f8fa 	bl	800e8e8 <osMessageQueueGet>
}
 80146f4:	bf00      	nop
 80146f6:	3708      	adds	r7, #8
 80146f8:	46bd      	mov	sp, r7
 80146fa:	bd80      	pop	{r7, pc}
 80146fc:	200094ac 	.word	0x200094ac

08014700 <__NVIC_EnableIRQ>:
{
 8014700:	b480      	push	{r7}
 8014702:	b083      	sub	sp, #12
 8014704:	af00      	add	r7, sp, #0
 8014706:	4603      	mov	r3, r0
 8014708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801470a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801470e:	2b00      	cmp	r3, #0
 8014710:	db0b      	blt.n	801472a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014712:	79fb      	ldrb	r3, [r7, #7]
 8014714:	f003 021f 	and.w	r2, r3, #31
 8014718:	4907      	ldr	r1, [pc, #28]	; (8014738 <__NVIC_EnableIRQ+0x38>)
 801471a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801471e:	095b      	lsrs	r3, r3, #5
 8014720:	2001      	movs	r0, #1
 8014722:	fa00 f202 	lsl.w	r2, r0, r2
 8014726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801472a:	bf00      	nop
 801472c:	370c      	adds	r7, #12
 801472e:	46bd      	mov	sp, r7
 8014730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014734:	4770      	bx	lr
 8014736:	bf00      	nop
 8014738:	e000e100 	.word	0xe000e100

0801473c <__NVIC_DisableIRQ>:
{
 801473c:	b480      	push	{r7}
 801473e:	b083      	sub	sp, #12
 8014740:	af00      	add	r7, sp, #0
 8014742:	4603      	mov	r3, r0
 8014744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801474a:	2b00      	cmp	r3, #0
 801474c:	db12      	blt.n	8014774 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801474e:	79fb      	ldrb	r3, [r7, #7]
 8014750:	f003 021f 	and.w	r2, r3, #31
 8014754:	490a      	ldr	r1, [pc, #40]	; (8014780 <__NVIC_DisableIRQ+0x44>)
 8014756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801475a:	095b      	lsrs	r3, r3, #5
 801475c:	2001      	movs	r0, #1
 801475e:	fa00 f202 	lsl.w	r2, r0, r2
 8014762:	3320      	adds	r3, #32
 8014764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8014768:	f3bf 8f4f 	dsb	sy
}
 801476c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801476e:	f3bf 8f6f 	isb	sy
}
 8014772:	bf00      	nop
}
 8014774:	bf00      	nop
 8014776:	370c      	adds	r7, #12
 8014778:	46bd      	mov	sp, r7
 801477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801477e:	4770      	bx	lr
 8014780:	e000e100 	.word	0xe000e100

08014784 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 8014784:	b480      	push	{r7}
 8014786:	b083      	sub	sp, #12
 8014788:	af00      	add	r7, sp, #0
 801478a:	6078      	str	r0, [r7, #4]
        : color(0)
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	2200      	movs	r2, #0
 8014790:	601a      	str	r2, [r3, #0]
    }
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	4618      	mov	r0, r3
 8014796:	370c      	adds	r7, #12
 8014798:	46bd      	mov	sp, r7
 801479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801479e:	4770      	bx	lr

080147a0 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 80147a0:	b480      	push	{r7}
 80147a2:	b083      	sub	sp, #12
 80147a4:	af00      	add	r7, sp, #0
 80147a6:	6078      	str	r0, [r7, #4]
        return color;
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	681b      	ldr	r3, [r3, #0]
    }
 80147ac:	4618      	mov	r0, r3
 80147ae:	370c      	adds	r7, #12
 80147b0:	46bd      	mov	sp, r7
 80147b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b6:	4770      	bx	lr

080147b8 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 80147b8:	b480      	push	{r7}
 80147ba:	b083      	sub	sp, #12
 80147bc:	af00      	add	r7, sp, #0
 80147be:	6078      	str	r0, [r7, #4]
    {
 80147c0:	4a04      	ldr	r2, [pc, #16]	; (80147d4 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	601a      	str	r2, [r3, #0]
    }
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	4618      	mov	r0, r3
 80147ca:	370c      	adds	r7, #12
 80147cc:	46bd      	mov	sp, r7
 80147ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147d2:	4770      	bx	lr
 80147d4:	0802ebf8 	.word	0x0802ebf8

080147d8 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80147d8:	b580      	push	{r7, lr}
 80147da:	b082      	sub	sp, #8
 80147dc:	af00      	add	r7, sp, #0
 80147de:	6078      	str	r0, [r7, #4]
    }
 80147e0:	6878      	ldr	r0, [r7, #4]
 80147e2:	f7ff ffe9 	bl	80147b8 <_ZN8touchgfx9DMA_QueueD1Ev>
 80147e6:	2104      	movs	r1, #4
 80147e8:	6878      	ldr	r0, [r7, #4]
 80147ea:	f017 fbac 	bl	802bf46 <_ZdlPvj>
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	4618      	mov	r0, r3
 80147f2:	3708      	adds	r7, #8
 80147f4:	46bd      	mov	sp, r7
 80147f6:	bd80      	pop	{r7, pc}

080147f8 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 80147f8:	b580      	push	{r7, lr}
 80147fa:	b082      	sub	sp, #8
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	3344      	adds	r3, #68	; 0x44
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	6878      	ldr	r0, [r7, #4]
 801480a:	4798      	blx	r3
    }
 801480c:	bf00      	nop
 801480e:	3708      	adds	r7, #8
 8014810:	46bd      	mov	sp, r7
 8014812:	bd80      	pop	{r7, pc}

08014814 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8014814:	b480      	push	{r7}
 8014816:	b083      	sub	sp, #12
 8014818:	af00      	add	r7, sp, #0
 801481a:	6078      	str	r0, [r7, #4]
    {
 801481c:	4a04      	ldr	r2, [pc, #16]	; (8014830 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	601a      	str	r2, [r3, #0]
    }
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	4618      	mov	r0, r3
 8014826:	370c      	adds	r7, #12
 8014828:	46bd      	mov	sp, r7
 801482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801482e:	4770      	bx	lr
 8014830:	0802f044 	.word	0x0802f044

08014834 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8014834:	b580      	push	{r7, lr}
 8014836:	b082      	sub	sp, #8
 8014838:	af00      	add	r7, sp, #0
 801483a:	6078      	str	r0, [r7, #4]
    }
 801483c:	6878      	ldr	r0, [r7, #4]
 801483e:	f7ff ffe9 	bl	8014814 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8014842:	210c      	movs	r1, #12
 8014844:	6878      	ldr	r0, [r7, #4]
 8014846:	f017 fb7e 	bl	802bf46 <_ZdlPvj>
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	4618      	mov	r0, r3
 801484e:	3708      	adds	r7, #8
 8014850:	46bd      	mov	sp, r7
 8014852:	bd80      	pop	{r7, pc}

08014854 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8014854:	b480      	push	{r7}
 8014856:	b083      	sub	sp, #12
 8014858:	af00      	add	r7, sp, #0
 801485a:	6078      	str	r0, [r7, #4]
 801485c:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 801485e:	4a09      	ldr	r2, [pc, #36]	; (8014884 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	601a      	str	r2, [r3, #0]
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	683a      	ldr	r2, [r7, #0]
 8014868:	605a      	str	r2, [r3, #4]
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	2200      	movs	r2, #0
 801486e:	721a      	strb	r2, [r3, #8]
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	2200      	movs	r2, #0
 8014874:	725a      	strb	r2, [r3, #9]
    {
    }
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	4618      	mov	r0, r3
 801487a:	370c      	adds	r7, #12
 801487c:	46bd      	mov	sp, r7
 801487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014882:	4770      	bx	lr
 8014884:	0802f044 	.word	0x0802f044

08014888 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8014888:	b480      	push	{r7}
 801488a:	b083      	sub	sp, #12
 801488c:	af00      	add	r7, sp, #0
 801488e:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8014890:	2301      	movs	r3, #1
    }
 8014892:	4618      	mov	r0, r3
 8014894:	370c      	adds	r7, #12
 8014896:	46bd      	mov	sp, r7
 8014898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801489c:	4770      	bx	lr

0801489e <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 801489e:	b580      	push	{r7, lr}
 80148a0:	b082      	sub	sp, #8
 80148a2:	af00      	add	r7, sp, #0
 80148a4:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80148a6:	687a      	ldr	r2, [r7, #4]
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	3328      	adds	r3, #40	; 0x28
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	4610      	mov	r0, r2
 80148b2:	4798      	blx	r3
    }
 80148b4:	bf00      	nop
 80148b6:	3708      	adds	r7, #8
 80148b8:	46bd      	mov	sp, r7
 80148ba:	bd80      	pop	{r7, pc}

080148bc <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80148bc:	b580      	push	{r7, lr}
 80148be:	b082      	sub	sp, #8
 80148c0:	af00      	add	r7, sp, #0
 80148c2:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	685a      	ldr	r2, [r3, #4]
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	685b      	ldr	r3, [r3, #4]
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	3314      	adds	r3, #20
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	4610      	mov	r0, r2
 80148d4:	4798      	blx	r3
    }
 80148d6:	bf00      	nop
 80148d8:	3708      	adds	r7, #8
 80148da:	46bd      	mov	sp, r7
 80148dc:	bd80      	pop	{r7, pc}

080148de <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 80148de:	b580      	push	{r7, lr}
 80148e0:	b082      	sub	sp, #8
 80148e2:	af00      	add	r7, sp, #0
 80148e4:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 80148e6:	f7fd fd19 	bl	801231c <_ZN8touchgfx3HAL11getInstanceEv>
 80148ea:	4603      	mov	r3, r0
 80148ec:	4618      	mov	r0, r3
 80148ee:	f7ff ffe5 	bl	80148bc <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 80148f2:	bf00      	nop
 80148f4:	3708      	adds	r7, #8
 80148f6:	46bd      	mov	sp, r7
 80148f8:	bd80      	pop	{r7, pc}

080148fa <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 80148fa:	b580      	push	{r7, lr}
 80148fc:	b082      	sub	sp, #8
 80148fe:	af00      	add	r7, sp, #0
 8014900:	6078      	str	r0, [r7, #4]
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	330c      	adds	r3, #12
 8014906:	4618      	mov	r0, r3
 8014908:	f7ff ff3c 	bl	8014784 <_ZN8touchgfx9colortypeC1Ev>
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	4618      	mov	r0, r3
 8014910:	3708      	adds	r7, #8
 8014912:	46bd      	mov	sp, r7
 8014914:	bd80      	pop	{r7, pc}
	...

08014918 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 8014918:	b5b0      	push	{r4, r5, r7, lr}
 801491a:	b082      	sub	sp, #8
 801491c:	af00      	add	r7, sp, #0
 801491e:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8014920:	687a      	ldr	r2, [r7, #4]
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	330c      	adds	r3, #12
 8014926:	4619      	mov	r1, r3
 8014928:	4610      	mov	r0, r2
 801492a:	f7ff ff93 	bl	8014854 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 801492e:	4a0e      	ldr	r2, [pc, #56]	; (8014968 <_ZN8STM32DMAC1Ev+0x50>)
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	601a      	str	r2, [r3, #0]
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	f103 000c 	add.w	r0, r3, #12
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	3320      	adds	r3, #32
 801493e:	2260      	movs	r2, #96	; 0x60
 8014940:	4619      	mov	r1, r3
 8014942:	f002 ff33 	bl	80177ac <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	3320      	adds	r3, #32
 801494a:	245f      	movs	r4, #95	; 0x5f
 801494c:	461d      	mov	r5, r3
 801494e:	e004      	b.n	801495a <_ZN8STM32DMAC1Ev+0x42>
 8014950:	4628      	mov	r0, r5
 8014952:	f7ff ffd2 	bl	80148fa <_ZN8touchgfx6BlitOpC1Ev>
 8014956:	3524      	adds	r5, #36	; 0x24
 8014958:	3c01      	subs	r4, #1
 801495a:	2c00      	cmp	r4, #0
 801495c:	daf8      	bge.n	8014950 <_ZN8STM32DMAC1Ev+0x38>
{
}
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	4618      	mov	r0, r3
 8014962:	3708      	adds	r7, #8
 8014964:	46bd      	mov	sp, r7
 8014966:	bdb0      	pop	{r4, r5, r7, pc}
 8014968:	0802eba8 	.word	0x0802eba8

0801496c <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 801496c:	b580      	push	{r7, lr}
 801496e:	b082      	sub	sp, #8
 8014970:	af00      	add	r7, sp, #0
 8014972:	6078      	str	r0, [r7, #4]
 8014974:	4a09      	ldr	r2, [pc, #36]	; (801499c <_ZN8STM32DMAD1Ev+0x30>)
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 801497a:	205a      	movs	r0, #90	; 0x5a
 801497c:	f7ff fede 	bl	801473c <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	330c      	adds	r3, #12
 8014984:	4618      	mov	r0, r3
 8014986:	f000 fac7 	bl	8014f18 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	4618      	mov	r0, r3
 801498e:	f7ff ff41 	bl	8014814 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	4618      	mov	r0, r3
 8014996:	3708      	adds	r7, #8
 8014998:	46bd      	mov	sp, r7
 801499a:	bd80      	pop	{r7, pc}
 801499c:	0802eba8 	.word	0x0802eba8

080149a0 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 80149a0:	b580      	push	{r7, lr}
 80149a2:	b082      	sub	sp, #8
 80149a4:	af00      	add	r7, sp, #0
 80149a6:	6078      	str	r0, [r7, #4]
}
 80149a8:	6878      	ldr	r0, [r7, #4]
 80149aa:	f7ff ffdf 	bl	801496c <_ZN8STM32DMAD1Ev>
 80149ae:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 80149b2:	6878      	ldr	r0, [r7, #4]
 80149b4:	f017 fac7 	bl	802bf46 <_ZdlPvj>
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	4618      	mov	r0, r3
 80149bc:	3708      	adds	r7, #8
 80149be:	46bd      	mov	sp, r7
 80149c0:	bd80      	pop	{r7, pc}
	...

080149c4 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 80149c4:	b580      	push	{r7, lr}
 80149c6:	b084      	sub	sp, #16
 80149c8:	af00      	add	r7, sp, #0
 80149ca:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80149cc:	2300      	movs	r3, #0
 80149ce:	60fb      	str	r3, [r7, #12]
 80149d0:	4b10      	ldr	r3, [pc, #64]	; (8014a14 <_ZN8STM32DMA10initializeEv+0x50>)
 80149d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149d4:	4a0f      	ldr	r2, [pc, #60]	; (8014a14 <_ZN8STM32DMA10initializeEv+0x50>)
 80149d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80149da:	6313      	str	r3, [r2, #48]	; 0x30
 80149dc:	4b0d      	ldr	r3, [pc, #52]	; (8014a14 <_ZN8STM32DMA10initializeEv+0x50>)
 80149de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80149e4:	60fb      	str	r3, [r7, #12]
 80149e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80149e8:	4b0a      	ldr	r3, [pc, #40]	; (8014a14 <_ZN8STM32DMA10initializeEv+0x50>)
 80149ea:	691b      	ldr	r3, [r3, #16]
 80149ec:	4a09      	ldr	r2, [pc, #36]	; (8014a14 <_ZN8STM32DMA10initializeEv+0x50>)
 80149ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80149f2:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80149f4:	4b07      	ldr	r3, [pc, #28]	; (8014a14 <_ZN8STM32DMA10initializeEv+0x50>)
 80149f6:	691b      	ldr	r3, [r3, #16]
 80149f8:	4a06      	ldr	r2, [pc, #24]	; (8014a14 <_ZN8STM32DMA10initializeEv+0x50>)
 80149fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80149fe:	6113      	str	r3, [r2, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8014a00:	4b05      	ldr	r3, [pc, #20]	; (8014a18 <_ZN8STM32DMA10initializeEv+0x54>)
 8014a02:	4a06      	ldr	r2, [pc, #24]	; (8014a1c <_ZN8STM32DMA10initializeEv+0x58>)
 8014a04:	611a      	str	r2, [r3, #16]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8014a06:	205a      	movs	r0, #90	; 0x5a
 8014a08:	f7ff fe7a 	bl	8014700 <__NVIC_EnableIRQ>
}
 8014a0c:	bf00      	nop
 8014a0e:	3710      	adds	r7, #16
 8014a10:	46bd      	mov	sp, r7
 8014a12:	bd80      	pop	{r7, pc}
 8014a14:	40023800 	.word	0x40023800
 8014a18:	20000164 	.word	0x20000164
 8014a1c:	080148df 	.word	0x080148df

08014a20 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8014a20:	b580      	push	{r7, lr}
 8014a22:	b084      	sub	sp, #16
 8014a24:	af00      	add	r7, sp, #0
 8014a26:	6078      	str	r0, [r7, #4]
 8014a28:	460b      	mov	r3, r1
 8014a2a:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8014a2c:	2300      	movs	r3, #0
 8014a2e:	60fb      	str	r3, [r7, #12]

    switch (format)
 8014a30:	78fb      	ldrb	r3, [r7, #3]
 8014a32:	2b0b      	cmp	r3, #11
 8014a34:	d826      	bhi.n	8014a84 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8014a36:	a201      	add	r2, pc, #4	; (adr r2, 8014a3c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8014a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a3c:	08014a79 	.word	0x08014a79
 8014a40:	08014a73 	.word	0x08014a73
 8014a44:	08014a6d 	.word	0x08014a6d
 8014a48:	08014a85 	.word	0x08014a85
 8014a4c:	08014a85 	.word	0x08014a85
 8014a50:	08014a85 	.word	0x08014a85
 8014a54:	08014a85 	.word	0x08014a85
 8014a58:	08014a7f 	.word	0x08014a7f
 8014a5c:	08014a7f 	.word	0x08014a7f
 8014a60:	08014a7f 	.word	0x08014a7f
 8014a64:	08014a7f 	.word	0x08014a7f
 8014a68:	08014a7f 	.word	0x08014a7f
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8014a6c:	2300      	movs	r3, #0
 8014a6e:	60fb      	str	r3, [r7, #12]
        break;
 8014a70:	e00e      	b.n	8014a90 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8014a72:	2301      	movs	r3, #1
 8014a74:	60fb      	str	r3, [r7, #12]
        break;
 8014a76:	e00b      	b.n	8014a90 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8014a78:	2302      	movs	r3, #2
 8014a7a:	60fb      	str	r3, [r7, #12]
        break;
 8014a7c:	e008      	b.n	8014a90 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8014a7e:	2305      	movs	r3, #5
 8014a80:	60fb      	str	r3, [r7, #12]
        break;
 8014a82:	e005      	b.n	8014a90 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8014a84:	4b05      	ldr	r3, [pc, #20]	; (8014a9c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8014a86:	4a06      	ldr	r2, [pc, #24]	; (8014aa0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8014a88:	2165      	movs	r1, #101	; 0x65
 8014a8a:	4806      	ldr	r0, [pc, #24]	; (8014aa4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8014a8c:	f018 f84c 	bl	802cb28 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8014a90:	68fb      	ldr	r3, [r7, #12]
}
 8014a92:	4618      	mov	r0, r3
 8014a94:	3710      	adds	r7, #16
 8014a96:	46bd      	mov	sp, r7
 8014a98:	bd80      	pop	{r7, pc}
 8014a9a:	bf00      	nop
 8014a9c:	0802e494 	.word	0x0802e494
 8014aa0:	0802e4b0 	.word	0x0802e4b0
 8014aa4:	0802e4fc 	.word	0x0802e4fc

08014aa8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8014aa8:	b580      	push	{r7, lr}
 8014aaa:	b084      	sub	sp, #16
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	6078      	str	r0, [r7, #4]
 8014ab0:	460b      	mov	r3, r1
 8014ab2:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8014ab4:	2300      	movs	r3, #0
 8014ab6:	60fb      	str	r3, [r7, #12]

    switch (format)
 8014ab8:	78fb      	ldrb	r3, [r7, #3]
 8014aba:	2b0a      	cmp	r3, #10
 8014abc:	d821      	bhi.n	8014b02 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8014abe:	a201      	add	r2, pc, #4	; (adr r2, 8014ac4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8014ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ac4:	08014afd 	.word	0x08014afd
 8014ac8:	08014af7 	.word	0x08014af7
 8014acc:	08014af1 	.word	0x08014af1
 8014ad0:	08014b03 	.word	0x08014b03
 8014ad4:	08014b03 	.word	0x08014b03
 8014ad8:	08014b03 	.word	0x08014b03
 8014adc:	08014b03 	.word	0x08014b03
 8014ae0:	08014af7 	.word	0x08014af7
 8014ae4:	08014af7 	.word	0x08014af7
 8014ae8:	08014af7 	.word	0x08014af7
 8014aec:	08014af7 	.word	0x08014af7
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8014af0:	2300      	movs	r3, #0
 8014af2:	60fb      	str	r3, [r7, #12]
        break;
 8014af4:	e00b      	b.n	8014b0e <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8014af6:	2301      	movs	r3, #1
 8014af8:	60fb      	str	r3, [r7, #12]
        break;
 8014afa:	e008      	b.n	8014b0e <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8014afc:	2302      	movs	r3, #2
 8014afe:	60fb      	str	r3, [r7, #12]
        break;
 8014b00:	e005      	b.n	8014b0e <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8014b02:	4b05      	ldr	r3, [pc, #20]	; (8014b18 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8014b04:	4a05      	ldr	r2, [pc, #20]	; (8014b1c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8014b06:	2186      	movs	r1, #134	; 0x86
 8014b08:	4805      	ldr	r0, [pc, #20]	; (8014b20 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8014b0a:	f018 f80d 	bl	802cb28 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8014b0e:	68fb      	ldr	r3, [r7, #12]
}
 8014b10:	4618      	mov	r0, r3
 8014b12:	3710      	adds	r7, #16
 8014b14:	46bd      	mov	sp, r7
 8014b16:	bd80      	pop	{r7, pc}
 8014b18:	0802e494 	.word	0x0802e494
 8014b1c:	0802e528 	.word	0x0802e528
 8014b20:	0802e4fc 	.word	0x0802e4fc

08014b24 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8014b24:	b480      	push	{r7}
 8014b26:	b083      	sub	sp, #12
 8014b28:	af00      	add	r7, sp, #0
 8014b2a:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8014b2c:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8014b30:	4618      	mov	r0, r3
 8014b32:	370c      	adds	r7, #12
 8014b34:	46bd      	mov	sp, r7
 8014b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b3a:	4770      	bx	lr

08014b3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8014b3c:	b590      	push	{r4, r7, lr}
 8014b3e:	b089      	sub	sp, #36	; 0x24
 8014b40:	af00      	add	r7, sp, #0
 8014b42:	6078      	str	r0, [r7, #4]
 8014b44:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8014b46:	683b      	ldr	r3, [r7, #0]
 8014b48:	7f5b      	ldrb	r3, [r3, #29]
 8014b4a:	4619      	mov	r1, r3
 8014b4c:	6878      	ldr	r0, [r7, #4]
 8014b4e:	f7ff ff67 	bl	8014a20 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8014b52:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8014b54:	683b      	ldr	r3, [r7, #0]
 8014b56:	7f9b      	ldrb	r3, [r3, #30]
 8014b58:	4619      	mov	r1, r3
 8014b5a:	6878      	ldr	r0, [r7, #4]
 8014b5c:	f7ff ff60 	bl	8014a20 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8014b60:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8014b62:	683b      	ldr	r3, [r7, #0]
 8014b64:	7f9b      	ldrb	r3, [r3, #30]
 8014b66:	4619      	mov	r1, r3
 8014b68:	6878      	ldr	r0, [r7, #4]
 8014b6a:	f7ff ff9d 	bl	8014aa8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8014b6e:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8014b70:	683b      	ldr	r3, [r7, #0]
 8014b72:	8b5b      	ldrh	r3, [r3, #26]
 8014b74:	461a      	mov	r2, r3
 8014b76:	683b      	ldr	r3, [r7, #0]
 8014b78:	8a9b      	ldrh	r3, [r3, #20]
 8014b7a:	1ad2      	subs	r2, r2, r3
 8014b7c:	4b95      	ldr	r3, [pc, #596]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014b7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8014b80:	683b      	ldr	r3, [r7, #0]
 8014b82:	8b5b      	ldrh	r3, [r3, #26]
 8014b84:	461a      	mov	r2, r3
 8014b86:	683b      	ldr	r3, [r7, #0]
 8014b88:	8a9b      	ldrh	r3, [r3, #20]
 8014b8a:	1ad2      	subs	r2, r2, r3
 8014b8c:	4b91      	ldr	r3, [pc, #580]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014b8e:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8014b90:	683b      	ldr	r3, [r7, #0]
 8014b92:	8b1b      	ldrh	r3, [r3, #24]
 8014b94:	461a      	mov	r2, r3
 8014b96:	683b      	ldr	r3, [r7, #0]
 8014b98:	8a9b      	ldrh	r3, [r3, #20]
 8014b9a:	1ad2      	subs	r2, r2, r3
 8014b9c:	4b8d      	ldr	r3, [pc, #564]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014b9e:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8014ba0:	4a8c      	ldr	r2, [pc, #560]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014ba2:	693b      	ldr	r3, [r7, #16]
 8014ba4:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8014ba6:	683b      	ldr	r3, [r7, #0]
 8014ba8:	8adb      	ldrh	r3, [r3, #22]
 8014baa:	461a      	mov	r2, r3
 8014bac:	683b      	ldr	r3, [r7, #0]
 8014bae:	8a9b      	ldrh	r3, [r3, #20]
 8014bb0:	041b      	lsls	r3, r3, #16
 8014bb2:	431a      	orrs	r2, r3
 8014bb4:	4b87      	ldr	r3, [pc, #540]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014bb6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014bb8:	683b      	ldr	r3, [r7, #0]
 8014bba:	691a      	ldr	r2, [r3, #16]
 8014bbc:	4b85      	ldr	r3, [pc, #532]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014bbe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8014bc0:	683b      	ldr	r3, [r7, #0]
 8014bc2:	685a      	ldr	r2, [r3, #4]
 8014bc4:	4b83      	ldr	r3, [pc, #524]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014bc6:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8014bc8:	683b      	ldr	r3, [r7, #0]
 8014bca:	681b      	ldr	r3, [r3, #0]
 8014bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014bd0:	d037      	beq.n	8014c42 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 8014bd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014bd6:	f200 80e8 	bhi.w	8014daa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8014bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014bde:	d014      	beq.n	8014c0a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 8014be0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014be4:	f200 80e1 	bhi.w	8014daa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8014be8:	2b80      	cmp	r3, #128	; 0x80
 8014bea:	d05b      	beq.n	8014ca4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
 8014bec:	2b80      	cmp	r3, #128	; 0x80
 8014bee:	f200 80dc 	bhi.w	8014daa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8014bf2:	2b40      	cmp	r3, #64	; 0x40
 8014bf4:	f000 80c4 	beq.w	8014d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 8014bf8:	2b40      	cmp	r3, #64	; 0x40
 8014bfa:	f200 80d6 	bhi.w	8014daa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8014bfe:	2b04      	cmp	r3, #4
 8014c00:	d03b      	beq.n	8014c7a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
 8014c02:	2b20      	cmp	r3, #32
 8014c04:	f000 80bc 	beq.w	8014d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 8014c08:	e0cf      	b.n	8014daa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8014c0a:	683b      	ldr	r3, [r7, #0]
 8014c0c:	7f1b      	ldrb	r3, [r3, #28]
 8014c0e:	061b      	lsls	r3, r3, #24
 8014c10:	4a70      	ldr	r2, [pc, #448]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014c16:	f043 030a 	orr.w	r3, r3, #10
 8014c1a:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8014c1c:	683b      	ldr	r3, [r7, #0]
 8014c1e:	330c      	adds	r3, #12
 8014c20:	4c6c      	ldr	r4, [pc, #432]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014c22:	4618      	mov	r0, r3
 8014c24:	f7ff fdbc 	bl	80147a0 <_ZNK8touchgfx9colortypecvmEv>
 8014c28:	4603      	mov	r3, r0
 8014c2a:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8014c2c:	4a69      	ldr	r2, [pc, #420]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014c2e:	697b      	ldr	r3, [r7, #20]
 8014c30:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014c32:	683b      	ldr	r3, [r7, #0]
 8014c34:	691a      	ldr	r2, [r3, #16]
 8014c36:	4b67      	ldr	r3, [pc, #412]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014c38:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8014c3a:	4b66      	ldr	r3, [pc, #408]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014c3c:	4a66      	ldr	r2, [pc, #408]	; (8014dd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014c3e:	601a      	str	r2, [r3, #0]
        break;
 8014c40:	e0d9      	b.n	8014df6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8014c42:	683b      	ldr	r3, [r7, #0]
 8014c44:	7f1b      	ldrb	r3, [r3, #28]
 8014c46:	061b      	lsls	r3, r3, #24
 8014c48:	4a62      	ldr	r2, [pc, #392]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014c4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014c4e:	f043 0309 	orr.w	r3, r3, #9
 8014c52:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8014c54:	683b      	ldr	r3, [r7, #0]
 8014c56:	330c      	adds	r3, #12
 8014c58:	4c5e      	ldr	r4, [pc, #376]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	f7ff fda0 	bl	80147a0 <_ZNK8touchgfx9colortypecvmEv>
 8014c60:	4603      	mov	r3, r0
 8014c62:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8014c64:	4a5b      	ldr	r2, [pc, #364]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014c66:	697b      	ldr	r3, [r7, #20]
 8014c68:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014c6a:	683b      	ldr	r3, [r7, #0]
 8014c6c:	691a      	ldr	r2, [r3, #16]
 8014c6e:	4b59      	ldr	r3, [pc, #356]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014c70:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8014c72:	4b58      	ldr	r3, [pc, #352]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014c74:	4a58      	ldr	r2, [pc, #352]	; (8014dd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014c76:	601a      	str	r2, [r3, #0]
        break;
 8014c78:	e0bd      	b.n	8014df6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8014c7a:	683b      	ldr	r3, [r7, #0]
 8014c7c:	7f1b      	ldrb	r3, [r3, #28]
 8014c7e:	061b      	lsls	r3, r3, #24
 8014c80:	461a      	mov	r2, r3
 8014c82:	69bb      	ldr	r3, [r7, #24]
 8014c84:	4313      	orrs	r3, r2
 8014c86:	4a53      	ldr	r2, [pc, #332]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014c8c:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8014c8e:	4a51      	ldr	r2, [pc, #324]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014c90:	697b      	ldr	r3, [r7, #20]
 8014c92:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014c94:	683b      	ldr	r3, [r7, #0]
 8014c96:	691a      	ldr	r2, [r3, #16]
 8014c98:	4b4e      	ldr	r3, [pc, #312]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014c9a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8014c9c:	4b4d      	ldr	r3, [pc, #308]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014c9e:	4a4e      	ldr	r2, [pc, #312]	; (8014dd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014ca0:	601a      	str	r2, [r3, #0]
        break;
 8014ca2:	e0a8      	b.n	8014df6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 8014ca4:	2301      	movs	r3, #1
 8014ca6:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8014ca8:	683b      	ldr	r3, [r7, #0]
 8014caa:	689b      	ldr	r3, [r3, #8]
 8014cac:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	1d1a      	adds	r2, r3, #4
 8014cb2:	4b48      	ldr	r3, [pc, #288]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014cb4:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8014cb6:	683b      	ldr	r3, [r7, #0]
 8014cb8:	7f1b      	ldrb	r3, [r3, #28]
 8014cba:	061b      	lsls	r3, r3, #24
 8014cbc:	461a      	mov	r2, r3
 8014cbe:	69bb      	ldr	r3, [r7, #24]
 8014cc0:	4313      	orrs	r3, r2
 8014cc2:	4a44      	ldr	r2, [pc, #272]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014cc8:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8014cca:	4a42      	ldr	r2, [pc, #264]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014ccc:	697b      	ldr	r3, [r7, #20]
 8014cce:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014cd0:	683b      	ldr	r3, [r7, #0]
 8014cd2:	691a      	ldr	r2, [r3, #16]
 8014cd4:	4b3f      	ldr	r3, [pc, #252]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014cd6:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	881b      	ldrh	r3, [r3, #0]
 8014cdc:	b2db      	uxtb	r3, r3
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d002      	beq.n	8014ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ac>
 8014ce2:	2b01      	cmp	r3, #1
 8014ce4:	d00f      	beq.n	8014d06 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
 8014ce6:	e024      	b.n	8014d32 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f6>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8014ce8:	4b3a      	ldr	r3, [pc, #232]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014cea:	69db      	ldr	r3, [r3, #28]
 8014cec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8014cf0:	f023 0310 	bic.w	r3, r3, #16
 8014cf4:	68fa      	ldr	r2, [r7, #12]
 8014cf6:	8852      	ldrh	r2, [r2, #2]
 8014cf8:	3a01      	subs	r2, #1
 8014cfa:	0212      	lsls	r2, r2, #8
 8014cfc:	4611      	mov	r1, r2
 8014cfe:	4a35      	ldr	r2, [pc, #212]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014d00:	430b      	orrs	r3, r1
 8014d02:	61d3      	str	r3, [r2, #28]
                break;
 8014d04:	e01c      	b.n	8014d40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if (blitOp.alpha == 255)
 8014d06:	683b      	ldr	r3, [r7, #0]
 8014d08:	7f1b      	ldrb	r3, [r3, #28]
 8014d0a:	2bff      	cmp	r3, #255	; 0xff
 8014d0c:	d101      	bne.n	8014d12 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d6>
                {
                    blend = false;
 8014d0e:	2300      	movs	r3, #0
 8014d10:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8014d12:	4b30      	ldr	r3, [pc, #192]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014d14:	69db      	ldr	r3, [r3, #28]
 8014d16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8014d1a:	f023 0310 	bic.w	r3, r3, #16
 8014d1e:	68fa      	ldr	r2, [r7, #12]
 8014d20:	8852      	ldrh	r2, [r2, #2]
 8014d22:	3a01      	subs	r2, #1
 8014d24:	0212      	lsls	r2, r2, #8
 8014d26:	4313      	orrs	r3, r2
 8014d28:	4a2a      	ldr	r2, [pc, #168]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014d2a:	f043 0310 	orr.w	r3, r3, #16
 8014d2e:	61d3      	str	r3, [r2, #28]
                break;
 8014d30:	e006      	b.n	8014d40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8014d32:	4b2a      	ldr	r3, [pc, #168]	; (8014ddc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8014d34:	4a2a      	ldr	r2, [pc, #168]	; (8014de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8014d36:	f44f 7188 	mov.w	r1, #272	; 0x110
 8014d3a:	482a      	ldr	r0, [pc, #168]	; (8014de4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8014d3c:	f017 fef4 	bl	802cb28 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8014d40:	4b24      	ldr	r3, [pc, #144]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014d42:	69db      	ldr	r3, [r3, #28]
 8014d44:	4a23      	ldr	r2, [pc, #140]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014d46:	f043 0320 	orr.w	r3, r3, #32
 8014d4a:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8014d4c:	bf00      	nop
 8014d4e:	4b21      	ldr	r3, [pc, #132]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014d50:	69db      	ldr	r3, [r3, #28]
 8014d52:	f003 0320 	and.w	r3, r3, #32
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	bf14      	ite	ne
 8014d5a:	2301      	movne	r3, #1
 8014d5c:	2300      	moveq	r3, #0
 8014d5e:	b2db      	uxtb	r3, r3
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d1f4      	bne.n	8014d4e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x212>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8014d64:	4b1b      	ldr	r3, [pc, #108]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014d66:	2210      	movs	r2, #16
 8014d68:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if (blend)
 8014d6a:	7ffb      	ldrb	r3, [r7, #31]
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d003      	beq.n	8014d78 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8014d70:	4b18      	ldr	r3, [pc, #96]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014d72:	4a19      	ldr	r2, [pc, #100]	; (8014dd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014d74:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 8014d76:	e03e      	b.n	8014df6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8014d78:	4b16      	ldr	r3, [pc, #88]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014d7a:	4a1b      	ldr	r2, [pc, #108]	; (8014de8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8014d7c:	601a      	str	r2, [r3, #0]
        break;
 8014d7e:	e03a      	b.n	8014df6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8014d80:	683b      	ldr	r3, [r7, #0]
 8014d82:	7f1b      	ldrb	r3, [r3, #28]
 8014d84:	061b      	lsls	r3, r3, #24
 8014d86:	461a      	mov	r2, r3
 8014d88:	69bb      	ldr	r3, [r7, #24]
 8014d8a:	4313      	orrs	r3, r2
 8014d8c:	4a11      	ldr	r2, [pc, #68]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014d8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014d92:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8014d94:	4a0f      	ldr	r2, [pc, #60]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014d96:	697b      	ldr	r3, [r7, #20]
 8014d98:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014d9a:	683b      	ldr	r3, [r7, #0]
 8014d9c:	691a      	ldr	r2, [r3, #16]
 8014d9e:	4b0d      	ldr	r3, [pc, #52]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014da0:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8014da2:	4b0c      	ldr	r3, [pc, #48]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014da4:	4a0c      	ldr	r2, [pc, #48]	; (8014dd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014da6:	601a      	str	r2, [r3, #0]
        break;
 8014da8:	e025      	b.n	8014df6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8014daa:	683b      	ldr	r3, [r7, #0]
 8014dac:	7f1b      	ldrb	r3, [r3, #28]
 8014dae:	061b      	lsls	r3, r3, #24
 8014db0:	461a      	mov	r2, r3
 8014db2:	69bb      	ldr	r3, [r7, #24]
 8014db4:	4313      	orrs	r3, r2
 8014db6:	4a07      	ldr	r2, [pc, #28]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014dbc:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8014dbe:	683b      	ldr	r3, [r7, #0]
 8014dc0:	7f5a      	ldrb	r2, [r3, #29]
 8014dc2:	683b      	ldr	r3, [r7, #0]
 8014dc4:	7f9b      	ldrb	r3, [r3, #30]
 8014dc6:	429a      	cmp	r2, r3
 8014dc8:	d010      	beq.n	8014dec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8014dca:	4b02      	ldr	r3, [pc, #8]	; (8014dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014dcc:	4a06      	ldr	r2, [pc, #24]	; (8014de8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8014dce:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 8014dd0:	e010      	b.n	8014df4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 8014dd2:	bf00      	nop
 8014dd4:	4002b000 	.word	0x4002b000
 8014dd8:	00020201 	.word	0x00020201
 8014ddc:	0802e574 	.word	0x0802e574
 8014de0:	0802e590 	.word	0x0802e590
 8014de4:	0802e4fc 	.word	0x0802e4fc
 8014de8:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8014dec:	4b04      	ldr	r3, [pc, #16]	; (8014e00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 8014dee:	f240 2201 	movw	r2, #513	; 0x201
 8014df2:	601a      	str	r2, [r3, #0]
        break;
 8014df4:	bf00      	nop
    }
}
 8014df6:	bf00      	nop
 8014df8:	3724      	adds	r7, #36	; 0x24
 8014dfa:	46bd      	mov	sp, r7
 8014dfc:	bd90      	pop	{r4, r7, pc}
 8014dfe:	bf00      	nop
 8014e00:	4002b000 	.word	0x4002b000

08014e04 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8014e04:	b590      	push	{r4, r7, lr}
 8014e06:	b085      	sub	sp, #20
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	6078      	str	r0, [r7, #4]
 8014e0c:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8014e0e:	683b      	ldr	r3, [r7, #0]
 8014e10:	7f9b      	ldrb	r3, [r3, #30]
 8014e12:	4619      	mov	r1, r3
 8014e14:	6878      	ldr	r0, [r7, #4]
 8014e16:	f7ff fe47 	bl	8014aa8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8014e1a:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8014e1c:	4a3b      	ldr	r2, [pc, #236]	; (8014f0c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8014e1e:	68fb      	ldr	r3, [r7, #12]
 8014e20:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8014e22:	683b      	ldr	r3, [r7, #0]
 8014e24:	8adb      	ldrh	r3, [r3, #22]
 8014e26:	461a      	mov	r2, r3
 8014e28:	683b      	ldr	r3, [r7, #0]
 8014e2a:	8a9b      	ldrh	r3, [r3, #20]
 8014e2c:	041b      	lsls	r3, r3, #16
 8014e2e:	431a      	orrs	r2, r3
 8014e30:	4b36      	ldr	r3, [pc, #216]	; (8014f0c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8014e32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014e34:	683b      	ldr	r3, [r7, #0]
 8014e36:	691a      	ldr	r2, [r3, #16]
 8014e38:	4b34      	ldr	r3, [pc, #208]	; (8014f0c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8014e3a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8014e3c:	683b      	ldr	r3, [r7, #0]
 8014e3e:	8b5b      	ldrh	r3, [r3, #26]
 8014e40:	461a      	mov	r2, r3
 8014e42:	683b      	ldr	r3, [r7, #0]
 8014e44:	8a9b      	ldrh	r3, [r3, #20]
 8014e46:	1ad2      	subs	r2, r2, r3
 8014e48:	4b30      	ldr	r3, [pc, #192]	; (8014f0c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8014e4a:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8014e4c:	683b      	ldr	r3, [r7, #0]
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	2b08      	cmp	r3, #8
 8014e52:	d12f      	bne.n	8014eb4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb0>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8014e54:	683b      	ldr	r3, [r7, #0]
 8014e56:	8b5b      	ldrh	r3, [r3, #26]
 8014e58:	461a      	mov	r2, r3
 8014e5a:	683b      	ldr	r3, [r7, #0]
 8014e5c:	8a9b      	ldrh	r3, [r3, #20]
 8014e5e:	1ad2      	subs	r2, r2, r3
 8014e60:	4b2a      	ldr	r3, [pc, #168]	; (8014f0c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8014e62:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8014e64:	683b      	ldr	r3, [r7, #0]
 8014e66:	8b5b      	ldrh	r3, [r3, #26]
 8014e68:	461a      	mov	r2, r3
 8014e6a:	683b      	ldr	r3, [r7, #0]
 8014e6c:	8a9b      	ldrh	r3, [r3, #20]
 8014e6e:	1ad2      	subs	r2, r2, r3
 8014e70:	4b26      	ldr	r3, [pc, #152]	; (8014f0c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8014e72:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8014e74:	4a25      	ldr	r2, [pc, #148]	; (8014f0c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8014e76:	68fb      	ldr	r3, [r7, #12]
 8014e78:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8014e7a:	683b      	ldr	r3, [r7, #0]
 8014e7c:	7f1b      	ldrb	r3, [r3, #28]
 8014e7e:	061b      	lsls	r3, r3, #24
 8014e80:	4a22      	ldr	r2, [pc, #136]	; (8014f0c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8014e82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014e86:	f043 0309 	orr.w	r3, r3, #9
 8014e8a:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8014e8c:	683b      	ldr	r3, [r7, #0]
 8014e8e:	330c      	adds	r3, #12
 8014e90:	4c1e      	ldr	r4, [pc, #120]	; (8014f0c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8014e92:	4618      	mov	r0, r3
 8014e94:	f7ff fc84 	bl	80147a0 <_ZNK8touchgfx9colortypecvmEv>
 8014e98:	4603      	mov	r3, r0
 8014e9a:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014e9c:	683b      	ldr	r3, [r7, #0]
 8014e9e:	691a      	ldr	r2, [r3, #16]
 8014ea0:	4b1a      	ldr	r3, [pc, #104]	; (8014f0c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8014ea2:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014ea4:	683b      	ldr	r3, [r7, #0]
 8014ea6:	691a      	ldr	r2, [r3, #16]
 8014ea8:	4b18      	ldr	r3, [pc, #96]	; (8014f0c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8014eaa:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8014eac:	4b17      	ldr	r3, [pc, #92]	; (8014f0c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8014eae:	4a18      	ldr	r2, [pc, #96]	; (8014f10 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 8014eb0:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8014eb2:	e027      	b.n	8014f04 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x100>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8014eb4:	4a15      	ldr	r2, [pc, #84]	; (8014f0c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8014eba:	4b14      	ldr	r3, [pc, #80]	; (8014f0c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8014ebc:	2200      	movs	r2, #0
 8014ebe:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8014ec0:	683b      	ldr	r3, [r7, #0]
 8014ec2:	330c      	adds	r3, #12
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	f7ff fc6b 	bl	80147a0 <_ZNK8touchgfx9colortypecvmEv>
 8014eca:	4603      	mov	r3, r0
 8014ecc:	0a1b      	lsrs	r3, r3, #8
 8014ece:	f403 4478 	and.w	r4, r3, #63488	; 0xf800
 8014ed2:	683b      	ldr	r3, [r7, #0]
 8014ed4:	330c      	adds	r3, #12
 8014ed6:	4618      	mov	r0, r3
 8014ed8:	f7ff fc62 	bl	80147a0 <_ZNK8touchgfx9colortypecvmEv>
 8014edc:	4603      	mov	r3, r0
 8014ede:	095b      	lsrs	r3, r3, #5
 8014ee0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8014ee4:	431c      	orrs	r4, r3
 8014ee6:	683b      	ldr	r3, [r7, #0]
 8014ee8:	330c      	adds	r3, #12
 8014eea:	4618      	mov	r0, r3
 8014eec:	f7ff fc58 	bl	80147a0 <_ZNK8touchgfx9colortypecvmEv>
 8014ef0:	4603      	mov	r3, r0
 8014ef2:	08db      	lsrs	r3, r3, #3
 8014ef4:	f003 031f 	and.w	r3, r3, #31
 8014ef8:	4a04      	ldr	r2, [pc, #16]	; (8014f0c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8014efa:	4323      	orrs	r3, r4
 8014efc:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8014efe:	4b03      	ldr	r3, [pc, #12]	; (8014f0c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8014f00:	4a04      	ldr	r2, [pc, #16]	; (8014f14 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 8014f02:	601a      	str	r2, [r3, #0]
}
 8014f04:	bf00      	nop
 8014f06:	3714      	adds	r7, #20
 8014f08:	46bd      	mov	sp, r7
 8014f0a:	bd90      	pop	{r4, r7, pc}
 8014f0c:	4002b000 	.word	0x4002b000
 8014f10:	00020201 	.word	0x00020201
 8014f14:	00030201 	.word	0x00030201

08014f18 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8014f18:	b580      	push	{r7, lr}
 8014f1a:	b082      	sub	sp, #8
 8014f1c:	af00      	add	r7, sp, #0
 8014f1e:	6078      	str	r0, [r7, #4]
 8014f20:	4a05      	ldr	r2, [pc, #20]	; (8014f38 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	601a      	str	r2, [r3, #0]
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	4618      	mov	r0, r3
 8014f2a:	f7ff fc45 	bl	80147b8 <_ZN8touchgfx9DMA_QueueD1Ev>
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	4618      	mov	r0, r3
 8014f32:	3708      	adds	r7, #8
 8014f34:	46bd      	mov	sp, r7
 8014f36:	bd80      	pop	{r7, pc}
 8014f38:	0802f094 	.word	0x0802f094

08014f3c <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8014f3c:	b580      	push	{r7, lr}
 8014f3e:	b082      	sub	sp, #8
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	6078      	str	r0, [r7, #4]
 8014f44:	6878      	ldr	r0, [r7, #4]
 8014f46:	f7ff ffe7 	bl	8014f18 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8014f4a:	2114      	movs	r1, #20
 8014f4c:	6878      	ldr	r0, [r7, #4]
 8014f4e:	f016 fffa 	bl	802bf46 <_ZdlPvj>
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	4618      	mov	r0, r3
 8014f56:	3708      	adds	r7, #8
 8014f58:	46bd      	mov	sp, r7
 8014f5a:	bd80      	pop	{r7, pc}

08014f5c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8014f5c:	b480      	push	{r7}
 8014f5e:	b083      	sub	sp, #12
 8014f60:	af00      	add	r7, sp, #0
 8014f62:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8014f64:	4a04      	ldr	r2, [pc, #16]	; (8014f78 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	6013      	str	r3, [r2, #0]
    }
 8014f6a:	bf00      	nop
 8014f6c:	370c      	adds	r7, #12
 8014f6e:	46bd      	mov	sp, r7
 8014f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f74:	4770      	bx	lr
 8014f76:	bf00      	nop
 8014f78:	2000afac 	.word	0x2000afac

08014f7c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8014f7c:	b480      	push	{r7}
 8014f7e:	b085      	sub	sp, #20
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	60f8      	str	r0, [r7, #12]
 8014f84:	60b9      	str	r1, [r7, #8]
 8014f86:	607a      	str	r2, [r7, #4]
 8014f88:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8014f8a:	4a0b      	ldr	r2, [pc, #44]	; (8014fb8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	68ba      	ldr	r2, [r7, #8]
 8014f94:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	687a      	ldr	r2, [r7, #4]
 8014f9a:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	683a      	ldr	r2, [r7, #0]
 8014fa0:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	69ba      	ldr	r2, [r7, #24]
 8014fa6:	611a      	str	r2, [r3, #16]
    {
    }
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	4618      	mov	r0, r3
 8014fac:	3714      	adds	r7, #20
 8014fae:	46bd      	mov	sp, r7
 8014fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb4:	4770      	bx	lr
 8014fb6:	bf00      	nop
 8014fb8:	0802ece0 	.word	0x0802ece0

08014fbc <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8014fbc:	b480      	push	{r7}
 8014fbe:	b083      	sub	sp, #12
 8014fc0:	af00      	add	r7, sp, #0
 8014fc2:	6078      	str	r0, [r7, #4]
    {
 8014fc4:	4a04      	ldr	r2, [pc, #16]	; (8014fd8 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	601a      	str	r2, [r3, #0]
    }
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	4618      	mov	r0, r3
 8014fce:	370c      	adds	r7, #12
 8014fd0:	46bd      	mov	sp, r7
 8014fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fd6:	4770      	bx	lr
 8014fd8:	0802ece0 	.word	0x0802ece0

08014fdc <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8014fdc:	b580      	push	{r7, lr}
 8014fde:	b082      	sub	sp, #8
 8014fe0:	af00      	add	r7, sp, #0
 8014fe2:	6078      	str	r0, [r7, #4]
    }
 8014fe4:	6878      	ldr	r0, [r7, #4]
 8014fe6:	f7ff ffe9 	bl	8014fbc <_ZN8touchgfx7MVPHeapD1Ev>
 8014fea:	2114      	movs	r1, #20
 8014fec:	6878      	ldr	r0, [r7, #4]
 8014fee:	f016 ffaa 	bl	802bf46 <_ZdlPvj>
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	3708      	adds	r7, #8
 8014ff8:	46bd      	mov	sp, r7
 8014ffa:	bd80      	pop	{r7, pc}

08014ffc <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8014ffc:	b480      	push	{r7}
 8014ffe:	b083      	sub	sp, #12
 8015000:	af00      	add	r7, sp, #0
 8015002:	6078      	str	r0, [r7, #4]
    {
 8015004:	4a04      	ldr	r2, [pc, #16]	; (8015018 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	601a      	str	r2, [r3, #0]
    }
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	4618      	mov	r0, r3
 801500e:	370c      	adds	r7, #12
 8015010:	46bd      	mov	sp, r7
 8015012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015016:	4770      	bx	lr
 8015018:	0802f698 	.word	0x0802f698

0801501c <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 801501c:	b580      	push	{r7, lr}
 801501e:	b082      	sub	sp, #8
 8015020:	af00      	add	r7, sp, #0
 8015022:	6078      	str	r0, [r7, #4]
    }
 8015024:	6878      	ldr	r0, [r7, #4]
 8015026:	f7ff ffe9 	bl	8014ffc <_ZN8touchgfx3LCDD1Ev>
 801502a:	2108      	movs	r1, #8
 801502c:	6878      	ldr	r0, [r7, #4]
 801502e:	f016 ff8a 	bl	802bf46 <_ZdlPvj>
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	4618      	mov	r0, r3
 8015036:	3708      	adds	r7, #8
 8015038:	46bd      	mov	sp, r7
 801503a:	bd80      	pop	{r7, pc}

0801503c <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 801503c:	b480      	push	{r7}
 801503e:	b083      	sub	sp, #12
 8015040:	af00      	add	r7, sp, #0
 8015042:	6078      	str	r0, [r7, #4]
            : startX(0),
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	2200      	movs	r2, #0
 8015048:	801a      	strh	r2, [r3, #0]
              startY(0),
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	2200      	movs	r2, #0
 801504e:	805a      	strh	r2, [r3, #2]
              downX(0),
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	2200      	movs	r2, #0
 8015054:	809a      	strh	r2, [r3, #4]
              downY(0),
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	2200      	movs	r2, #0
 801505a:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	2200      	movs	r2, #0
 8015060:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	2200      	movs	r2, #0
 8015066:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	2200      	movs	r2, #0
 801506c:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	2200      	movs	r2, #0
 8015072:	739a      	strb	r2, [r3, #14]
        {
        }
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	4618      	mov	r0, r3
 8015078:	370c      	adds	r7, #12
 801507a:	46bd      	mov	sp, r7
 801507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015080:	4770      	bx	lr

08015082 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8015082:	b580      	push	{r7, lr}
 8015084:	b082      	sub	sp, #8
 8015086:	af00      	add	r7, sp, #0
 8015088:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	4618      	mov	r0, r3
 801508e:	f7ff ffd5 	bl	801503c <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	2200      	movs	r2, #0
 8015096:	611a      	str	r2, [r3, #16]
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	2200      	movs	r2, #0
 801509c:	829a      	strh	r2, [r3, #20]
    {
    }
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	4618      	mov	r0, r3
 80150a2:	3708      	adds	r7, #8
 80150a4:	46bd      	mov	sp, r7
 80150a6:	bd80      	pop	{r7, pc}

080150a8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 80150a8:	b580      	push	{r7, lr}
 80150aa:	b084      	sub	sp, #16
 80150ac:	af00      	add	r7, sp, #0
 80150ae:	60f8      	str	r0, [r7, #12]
 80150b0:	60b9      	str	r1, [r7, #8]
 80150b2:	607a      	str	r2, [r7, #4]
 80150b4:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 80150b6:	4a55      	ldr	r2, [pc, #340]	; (801520c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	68ba      	ldr	r2, [r7, #8]
 80150c0:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	687a      	ldr	r2, [r7, #4]
 80150c6:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	683a      	ldr	r2, [r7, #0]
 80150cc:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	2200      	movs	r2, #0
 80150d2:	611a      	str	r2, [r3, #16]
          buttonController(0),
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	2200      	movs	r2, #0
 80150d8:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	2200      	movs	r2, #0
 80150de:	619a      	str	r2, [r3, #24]
          gestures(),
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	331c      	adds	r3, #28
 80150e4:	4618      	mov	r0, r3
 80150e6:	f7ff ffcc 	bl	8015082 <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	2200      	movs	r2, #0
 80150ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          taskDelayFunc(0),
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	2200      	movs	r2, #0
 80150f6:	639a      	str	r2, [r3, #56]	; 0x38
          frameBuffer0(0),
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	2200      	movs	r2, #0
 80150fc:	63da      	str	r2, [r3, #60]	; 0x3c
          frameBuffer1(0),
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	2200      	movs	r2, #0
 8015102:	641a      	str	r2, [r3, #64]	; 0x40
          frameBuffer2(0),
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	2200      	movs	r2, #0
 8015108:	645a      	str	r2, [r3, #68]	; 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	2200      	movs	r2, #0
 801510e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
          fingerSize(1),
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	2201      	movs	r2, #1
 8015116:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
          lockDMAToPorch(false),
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	2200      	movs	r2, #0
 801511e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
          frameBufferUpdatedThisFrame(false),
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	2200      	movs	r2, #0
 8015126:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
          auxiliaryLCD(0),
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	2200      	movs	r2, #0
 801512e:	64da      	str	r2, [r3, #76]	; 0x4c
          partialFrameBufferRect(),
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	3350      	adds	r3, #80	; 0x50
 8015134:	4618      	mov	r0, r3
 8015136:	f7fd fd88 	bl	8012c4a <_ZN8touchgfx4RectC1Ev>
          useAuxiliaryLCD(false),
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	2200      	movs	r2, #0
 801513e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
          listener(0),
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	2200      	movs	r2, #0
 8015146:	65da      	str	r2, [r3, #92]	; 0x5c
          lastX(0),
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	2200      	movs	r2, #0
 801514c:	661a      	str	r2, [r3, #96]	; 0x60
          lastY(0),
 801514e:	68fb      	ldr	r3, [r7, #12]
 8015150:	2200      	movs	r2, #0
 8015152:	665a      	str	r2, [r3, #100]	; 0x64
          touchSampleRate(1),
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	2201      	movs	r2, #1
 8015158:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
          mcuLoadPct(0),
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	2200      	movs	r2, #0
 8015160:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
          vSyncCnt(0),
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	2200      	movs	r2, #0
 8015168:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
          vSyncForFrame(1),
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	2201      	movs	r2, #1
 8015170:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
          vSyncCompensationEnabled(false),
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	2200      	movs	r2, #0
 8015178:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
          clientDirty(false),
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	2200      	movs	r2, #0
 8015180:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
          swapRequested(false),
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	2200      	movs	r2, #0
 8015188:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
          lastTouched(false),
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	2200      	movs	r2, #0
 8015190:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
          updateMCULoad(0),
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	2200      	movs	r2, #0
 8015198:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          cc_begin(0),
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	2200      	movs	r2, #0
 80151a0:	675a      	str	r2, [r3, #116]	; 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	2200      	movs	r2, #0
 80151a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
          displayOrientationChangeRequested(false),
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	2200      	movs	r2, #0
 80151ae:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
          useDMAAcceleration(true),
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	2201      	movs	r2, #1
 80151b6:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
          lastRenderMethod(HARDWARE)
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	2201      	movs	r2, #1
 80151be:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
        instance = this;
 80151c2:	4a13      	ldr	r2, [pc, #76]	; (8015210 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80151c8:	4a12      	ldr	r2, [pc, #72]	; (8015214 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 80151ca:	8b3b      	ldrh	r3, [r7, #24]
 80151cc:	8013      	strh	r3, [r2, #0]
 80151ce:	4b11      	ldr	r3, [pc, #68]	; (8015214 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 80151d0:	881a      	ldrh	r2, [r3, #0]
 80151d2:	4b11      	ldr	r3, [pc, #68]	; (8015218 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 80151d4:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80151d6:	4a11      	ldr	r2, [pc, #68]	; (801521c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 80151d8:	8bbb      	ldrh	r3, [r7, #28]
 80151da:	8013      	strh	r3, [r2, #0]
 80151dc:	4b0f      	ldr	r3, [pc, #60]	; (801521c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 80151de:	881a      	ldrh	r2, [r3, #0]
 80151e0:	4b0f      	ldr	r3, [pc, #60]	; (8015220 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 80151e2:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 80151e4:	4b0f      	ldr	r3, [pc, #60]	; (8015224 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 80151e6:	2200      	movs	r2, #0
 80151e8:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80151ea:	8b3a      	ldrh	r2, [r7, #24]
 80151ec:	8bbb      	ldrh	r3, [r7, #28]
 80151ee:	429a      	cmp	r2, r3
 80151f0:	bf34      	ite	cc
 80151f2:	2301      	movcc	r3, #1
 80151f4:	2300      	movcs	r3, #0
 80151f6:	b2db      	uxtb	r3, r3
 80151f8:	461a      	mov	r2, r3
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	4618      	mov	r0, r3
 8015204:	3710      	adds	r7, #16
 8015206:	46bd      	mov	sp, r7
 8015208:	bd80      	pop	{r7, pc}
 801520a:	bf00      	nop
 801520c:	0802ef6c 	.word	0x0802ef6c
 8015210:	2000af48 	.word	0x2000af48
 8015214:	2000af3c 	.word	0x2000af3c
 8015218:	2000af42 	.word	0x2000af42
 801521c:	2000af3e 	.word	0x2000af3e
 8015220:	2000af44 	.word	0x2000af44
 8015224:	2000af40 	.word	0x2000af40

08015228 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8015228:	b580      	push	{r7, lr}
 801522a:	b082      	sub	sp, #8
 801522c:	af00      	add	r7, sp, #0
 801522e:	6078      	str	r0, [r7, #4]
 8015230:	6039      	str	r1, [r7, #0]
    {
        app.gotomainScreenNoTransition();
 8015232:	683b      	ldr	r3, [r7, #0]
 8015234:	4618      	mov	r0, r3
 8015236:	f7fd fa6b 	bl	8012710 <_ZN23FrontendApplicationBase26gotomainScreenNoTransitionEv>
    }
 801523a:	bf00      	nop
 801523c:	3708      	adds	r7, #8
 801523e:	46bd      	mov	sp, r7
 8015240:	bd80      	pop	{r7, pc}
	...

08015244 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8015244:	b580      	push	{r7, lr}
 8015246:	b086      	sub	sp, #24
 8015248:	af02      	add	r7, sp, #8
 801524a:	60f8      	str	r0, [r7, #12]
 801524c:	60b9      	str	r1, [r7, #8]
 801524e:	607a      	str	r2, [r7, #4]
 8015250:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8015252:	68f8      	ldr	r0, [r7, #12]
 8015254:	69bb      	ldr	r3, [r7, #24]
 8015256:	9300      	str	r3, [sp, #0]
 8015258:	683b      	ldr	r3, [r7, #0]
 801525a:	687a      	ldr	r2, [r7, #4]
 801525c:	68b9      	ldr	r1, [r7, #8]
 801525e:	f7ff fe8d 	bl	8014f7c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8015262:	4a04      	ldr	r2, [pc, #16]	; (8015274 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8015264:	68fb      	ldr	r3, [r7, #12]
 8015266:	601a      	str	r2, [r3, #0]
    {

    }
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	4618      	mov	r0, r3
 801526c:	3710      	adds	r7, #16
 801526e:	46bd      	mov	sp, r7
 8015270:	bd80      	pop	{r7, pc}
 8015272:	bf00      	nop
 8015274:	0802eccc 	.word	0x0802eccc

08015278 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8015278:	b580      	push	{r7, lr}
 801527a:	af00      	add	r7, sp, #0
 801527c:	4801      	ldr	r0, [pc, #4]	; (8015284 <__tcf_0+0xc>)
 801527e:	f000 f95b 	bl	8015538 <_ZN12FrontendHeapD1Ev>
 8015282:	bd80      	pop	{r7, pc}
 8015284:	200094b0 	.word	0x200094b0

08015288 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8015288:	b580      	push	{r7, lr}
 801528a:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 801528c:	4b11      	ldr	r3, [pc, #68]	; (80152d4 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	f3bf 8f5b 	dmb	ish
 8015294:	f003 0301 	and.w	r3, r3, #1
 8015298:	2b00      	cmp	r3, #0
 801529a:	bf0c      	ite	eq
 801529c:	2301      	moveq	r3, #1
 801529e:	2300      	movne	r3, #0
 80152a0:	b2db      	uxtb	r3, r3
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d013      	beq.n	80152ce <_ZN12FrontendHeap11getInstanceEv+0x46>
 80152a6:	480b      	ldr	r0, [pc, #44]	; (80152d4 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 80152a8:	f016 fe4f 	bl	802bf4a <__cxa_guard_acquire>
 80152ac:	4603      	mov	r3, r0
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	bf14      	ite	ne
 80152b2:	2301      	movne	r3, #1
 80152b4:	2300      	moveq	r3, #0
 80152b6:	b2db      	uxtb	r3, r3
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d008      	beq.n	80152ce <_ZN12FrontendHeap11getInstanceEv+0x46>
 80152bc:	4806      	ldr	r0, [pc, #24]	; (80152d8 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80152be:	f000 f867 	bl	8015390 <_ZN12FrontendHeapC1Ev>
 80152c2:	4806      	ldr	r0, [pc, #24]	; (80152dc <_ZN12FrontendHeap11getInstanceEv+0x54>)
 80152c4:	f017 fc4e 	bl	802cb64 <atexit>
 80152c8:	4802      	ldr	r0, [pc, #8]	; (80152d4 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 80152ca:	f016 fe4a 	bl	802bf62 <__cxa_guard_release>
        return instance;
 80152ce:	4b02      	ldr	r3, [pc, #8]	; (80152d8 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 80152d0:	4618      	mov	r0, r3
 80152d2:	bd80      	pop	{r7, pc}
 80152d4:	200098c8 	.word	0x200098c8
 80152d8:	200094b0 	.word	0x200094b0
 80152dc:	08015279 	.word	0x08015279

080152e0 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 80152e0:	b580      	push	{r7, lr}
 80152e2:	b082      	sub	sp, #8
 80152e4:	af00      	add	r7, sp, #0
 80152e6:	6078      	str	r0, [r7, #4]
 80152e8:	4a05      	ldr	r2, [pc, #20]	; (8015300 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	601a      	str	r2, [r3, #0]
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	4618      	mov	r0, r3
 80152f2:	f7ff fe63 	bl	8014fbc <_ZN8touchgfx7MVPHeapD1Ev>
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	4618      	mov	r0, r3
 80152fa:	3708      	adds	r7, #8
 80152fc:	46bd      	mov	sp, r7
 80152fe:	bd80      	pop	{r7, pc}
 8015300:	0802eccc 	.word	0x0802eccc

08015304 <_ZN16FrontendHeapBaseD0Ev>:
 8015304:	b580      	push	{r7, lr}
 8015306:	b082      	sub	sp, #8
 8015308:	af00      	add	r7, sp, #0
 801530a:	6078      	str	r0, [r7, #4]
 801530c:	6878      	ldr	r0, [r7, #4]
 801530e:	f7ff ffe7 	bl	80152e0 <_ZN16FrontendHeapBaseD1Ev>
 8015312:	2114      	movs	r1, #20
 8015314:	6878      	ldr	r0, [r7, #4]
 8015316:	f016 fe16 	bl	802bf46 <_ZdlPvj>
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	4618      	mov	r0, r3
 801531e:	3708      	adds	r7, #8
 8015320:	46bd      	mov	sp, r7
 8015322:	bd80      	pop	{r7, pc}

08015324 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8015324:	b580      	push	{r7, lr}
 8015326:	b082      	sub	sp, #8
 8015328:	af00      	add	r7, sp, #0
 801532a:	6078      	str	r0, [r7, #4]
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	4618      	mov	r0, r3
 8015330:	f000 ff04 	bl	801613c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8015334:	4a03      	ldr	r2, [pc, #12]	; (8015344 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	601a      	str	r2, [r3, #0]
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	4618      	mov	r0, r3
 801533e:	3708      	adds	r7, #8
 8015340:	46bd      	mov	sp, r7
 8015342:	bd80      	pop	{r7, pc}
 8015344:	0802ec98 	.word	0x0802ec98

08015348 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8015348:	b580      	push	{r7, lr}
 801534a:	b082      	sub	sp, #8
 801534c:	af00      	add	r7, sp, #0
 801534e:	6078      	str	r0, [r7, #4]
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	4618      	mov	r0, r3
 8015354:	f000 fef2 	bl	801613c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8015358:	4a03      	ldr	r2, [pc, #12]	; (8015368 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	601a      	str	r2, [r3, #0]
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	4618      	mov	r0, r3
 8015362:	3708      	adds	r7, #8
 8015364:	46bd      	mov	sp, r7
 8015366:	bd80      	pop	{r7, pc}
 8015368:	0802ec64 	.word	0x0802ec64

0801536c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 801536c:	b580      	push	{r7, lr}
 801536e:	b082      	sub	sp, #8
 8015370:	af00      	add	r7, sp, #0
 8015372:	6078      	str	r0, [r7, #4]
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	4618      	mov	r0, r3
 8015378:	f000 fee0 	bl	801613c <_ZN8touchgfx17AbstractPartitionC1Ev>
 801537c:	4a03      	ldr	r2, [pc, #12]	; (801538c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	601a      	str	r2, [r3, #0]
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	4618      	mov	r0, r3
 8015386:	3708      	adds	r7, #8
 8015388:	46bd      	mov	sp, r7
 801538a:	bd80      	pop	{r7, pc}
 801538c:	0802ec30 	.word	0x0802ec30

08015390 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8015390:	b590      	push	{r4, r7, lr}
 8015392:	b085      	sub	sp, #20
 8015394:	af02      	add	r7, sp, #8
 8015396:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8015398:	6878      	ldr	r0, [r7, #4]
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	f103 0114 	add.w	r1, r3, #20
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	f503 7429 	add.w	r4, r3, #676	; 0x2a4
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
                     app(model, *this)
 80153b2:	9300      	str	r3, [sp, #0]
 80153b4:	4623      	mov	r3, r4
 80153b6:	f7ff ff45 	bl	8015244 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 80153ba:	4a18      	ldr	r2, [pc, #96]	; (801541c <_ZN12FrontendHeapC1Ev+0x8c>)
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	601a      	str	r2, [r3, #0]
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	3314      	adds	r3, #20
 80153c4:	4618      	mov	r0, r3
 80153c6:	f7ff ffad 	bl	8015324 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	332c      	adds	r3, #44	; 0x2c
 80153ce:	4618      	mov	r0, r3
 80153d0:	f7ff ffba 	bl	8015348 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 80153da:	4618      	mov	r0, r3
 80153dc:	f7ff ffc6 	bl	801536c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 80153e6:	4618      	mov	r0, r3
 80153e8:	f7fe fde2 	bl	8013fb0 <_ZN5ModelC1Ev>
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	f503 702f 	add.w	r0, r3, #700	; 0x2bc
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 80153f8:	687a      	ldr	r2, [r7, #4]
 80153fa:	4619      	mov	r1, r3
 80153fc:	f7fe fc94 	bl	8013d28 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8015400:	687a      	ldr	r2, [r7, #4]
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8015408:	4619      	mov	r1, r3
 801540a:	4610      	mov	r0, r2
 801540c:	f7ff ff0c 	bl	8015228 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	4618      	mov	r0, r3
 8015414:	370c      	adds	r7, #12
 8015416:	46bd      	mov	sp, r7
 8015418:	bd90      	pop	{r4, r7, pc}
 801541a:	bf00      	nop
 801541c:	0802ec1c 	.word	0x0802ec1c

08015420 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8015420:	b580      	push	{r7, lr}
 8015422:	b086      	sub	sp, #24
 8015424:	af02      	add	r7, sp, #8
 8015426:	60f8      	str	r0, [r7, #12]
 8015428:	60b9      	str	r1, [r7, #8]
 801542a:	607a      	str	r2, [r7, #4]
 801542c:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 801542e:	68f8      	ldr	r0, [r7, #12]
 8015430:	8bbb      	ldrh	r3, [r7, #28]
 8015432:	9301      	str	r3, [sp, #4]
 8015434:	8b3b      	ldrh	r3, [r7, #24]
 8015436:	9300      	str	r3, [sp, #0]
 8015438:	683b      	ldr	r3, [r7, #0]
 801543a:	687a      	ldr	r2, [r7, #4]
 801543c:	68b9      	ldr	r1, [r7, #8]
 801543e:	f7ff fe33 	bl	80150a8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8015442:	4a04      	ldr	r2, [pc, #16]	; (8015454 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	601a      	str	r2, [r3, #0]
    }
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	4618      	mov	r0, r3
 801544c:	3710      	adds	r7, #16
 801544e:	46bd      	mov	sp, r7
 8015450:	bd80      	pop	{r7, pc}
 8015452:	bf00      	nop
 8015454:	0802ecf0 	.word	0x0802ecf0

08015458 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8015458:	b580      	push	{r7, lr}
 801545a:	b086      	sub	sp, #24
 801545c:	af02      	add	r7, sp, #8
 801545e:	60f8      	str	r0, [r7, #12]
 8015460:	60b9      	str	r1, [r7, #8]
 8015462:	607a      	str	r2, [r7, #4]
 8015464:	603b      	str	r3, [r7, #0]
 8015466:	68f8      	ldr	r0, [r7, #12]
 8015468:	8bbb      	ldrh	r3, [r7, #28]
 801546a:	9301      	str	r3, [sp, #4]
 801546c:	8b3b      	ldrh	r3, [r7, #24]
 801546e:	9300      	str	r3, [sp, #0]
 8015470:	683b      	ldr	r3, [r7, #0]
 8015472:	687a      	ldr	r2, [r7, #4]
 8015474:	68b9      	ldr	r1, [r7, #8]
 8015476:	f7ff ffd3 	bl	8015420 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801547a:	4a04      	ldr	r2, [pc, #16]	; (801548c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 801547c:	68fb      	ldr	r3, [r7, #12]
 801547e:	601a      	str	r2, [r3, #0]
    }
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	4618      	mov	r0, r3
 8015484:	3710      	adds	r7, #16
 8015486:	46bd      	mov	sp, r7
 8015488:	bd80      	pop	{r7, pc}
 801548a:	bf00      	nop
 801548c:	0802ead0 	.word	0x0802ead0

08015490 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8015490:	b480      	push	{r7}
 8015492:	b083      	sub	sp, #12
 8015494:	af00      	add	r7, sp, #0
 8015496:	6078      	str	r0, [r7, #4]
 8015498:	4a04      	ldr	r2, [pc, #16]	; (80154ac <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	601a      	str	r2, [r3, #0]
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	4618      	mov	r0, r3
 80154a2:	370c      	adds	r7, #12
 80154a4:	46bd      	mov	sp, r7
 80154a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154aa:	4770      	bx	lr
 80154ac:	0802eab8 	.word	0x0802eab8

080154b0 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 80154b0:	b580      	push	{r7, lr}
 80154b2:	b082      	sub	sp, #8
 80154b4:	af00      	add	r7, sp, #0
 80154b6:	6078      	str	r0, [r7, #4]
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	4618      	mov	r0, r3
 80154bc:	f7ff ffe8 	bl	8015490 <_ZN8touchgfx15TouchControllerC1Ev>
 80154c0:	4a03      	ldr	r2, [pc, #12]	; (80154d0 <_ZN20STM32TouchControllerC1Ev+0x20>)
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	601a      	str	r2, [r3, #0]
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	4618      	mov	r0, r3
 80154ca:	3708      	adds	r7, #8
 80154cc:	46bd      	mov	sp, r7
 80154ce:	bd80      	pop	{r7, pc}
 80154d0:	0802eaa0 	.word	0x0802eaa0

080154d4 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 80154d4:	b590      	push	{r4, r7, lr}
 80154d6:	b085      	sub	sp, #20
 80154d8:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80154da:	f7fe fa27 	bl	801392c <_ZN14BitmapDatabase11getInstanceEv>
 80154de:	4604      	mov	r4, r0
 80154e0:	f7fe fa2e 	bl	8013940 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80154e4:	4603      	mov	r3, r0
 80154e6:	4619      	mov	r1, r3
 80154e8:	2300      	movs	r3, #0
 80154ea:	9300      	str	r3, [sp, #0]
 80154ec:	2300      	movs	r3, #0
 80154ee:	2200      	movs	r2, #0
 80154f0:	4620      	mov	r0, r4
 80154f2:	f008 fdb9 	bl	801e068 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 80154f6:	4809      	ldr	r0, [pc, #36]	; (801551c <touchgfx_init+0x48>)
 80154f8:	f7ff fd30 	bl	8014f5c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 80154fc:	2000      	movs	r0, #0
 80154fe:	f7fe fb4b 	bl	8013b98 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8015502:	4807      	ldr	r0, [pc, #28]	; (8015520 <touchgfx_init+0x4c>)
 8015504:	f008 fd18 	bl	801df38 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8015508:	f7ff febe 	bl	8015288 <_ZN12FrontendHeap11getInstanceEv>
 801550c:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 801550e:	4805      	ldr	r0, [pc, #20]	; (8015524 <touchgfx_init+0x50>)
 8015510:	f7fe ffc6 	bl	80144a0 <_ZN11TouchGFXHAL10initializeEv>
}
 8015514:	bf00      	nop
 8015516:	370c      	adds	r7, #12
 8015518:	46bd      	mov	sp, r7
 801551a:	bd90      	pop	{r4, r7, pc}
 801551c:	2000a6f4 	.word	0x2000a6f4
 8015520:	20000034 	.word	0x20000034
 8015524:	2000a6f8 	.word	0x2000a6f8

08015528 <touchgfx_components_init>:

void touchgfx_components_init()
{
 8015528:	b480      	push	{r7}
 801552a:	af00      	add	r7, sp, #0
}
 801552c:	bf00      	nop
 801552e:	46bd      	mov	sp, r7
 8015530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015534:	4770      	bx	lr
	...

08015538 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8015538:	b580      	push	{r7, lr}
 801553a:	b082      	sub	sp, #8
 801553c:	af00      	add	r7, sp, #0
 801553e:	6078      	str	r0, [r7, #4]
 8015540:	4a10      	ldr	r2, [pc, #64]	; (8015584 <_ZN12FrontendHeapD1Ev+0x4c>)
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	601a      	str	r2, [r3, #0]
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 801554c:	4618      	mov	r0, r3
 801554e:	f7fe fbb5 	bl	8013cbc <_ZN19FrontendApplicationD1Ev>
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8015558:	4618      	mov	r0, r3
 801555a:	f000 f827 	bl	80155ac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	332c      	adds	r3, #44	; 0x2c
 8015562:	4618      	mov	r0, r3
 8015564:	f000 f844 	bl	80155f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	3314      	adds	r3, #20
 801556c:	4618      	mov	r0, r3
 801556e:	f000 f863 	bl	8015638 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	4618      	mov	r0, r3
 8015576:	f7ff feb3 	bl	80152e0 <_ZN16FrontendHeapBaseD1Ev>
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	4618      	mov	r0, r3
 801557e:	3708      	adds	r7, #8
 8015580:	46bd      	mov	sp, r7
 8015582:	bd80      	pop	{r7, pc}
 8015584:	0802ec1c 	.word	0x0802ec1c

08015588 <_ZN12FrontendHeapD0Ev>:
 8015588:	b580      	push	{r7, lr}
 801558a:	b082      	sub	sp, #8
 801558c:	af00      	add	r7, sp, #0
 801558e:	6078      	str	r0, [r7, #4]
 8015590:	6878      	ldr	r0, [r7, #4]
 8015592:	f7ff ffd1 	bl	8015538 <_ZN12FrontendHeapD1Ev>
 8015596:	f44f 6183 	mov.w	r1, #1048	; 0x418
 801559a:	6878      	ldr	r0, [r7, #4]
 801559c:	f016 fcd3 	bl	802bf46 <_ZdlPvj>
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	4618      	mov	r0, r3
 80155a4:	3708      	adds	r7, #8
 80155a6:	46bd      	mov	sp, r7
 80155a8:	bd80      	pop	{r7, pc}
	...

080155ac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80155ac:	b580      	push	{r7, lr}
 80155ae:	b082      	sub	sp, #8
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	6078      	str	r0, [r7, #4]
 80155b4:	4a05      	ldr	r2, [pc, #20]	; (80155cc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	601a      	str	r2, [r3, #0]
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	4618      	mov	r0, r3
 80155be:	f000 fdbc 	bl	801613a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	4618      	mov	r0, r3
 80155c6:	3708      	adds	r7, #8
 80155c8:	46bd      	mov	sp, r7
 80155ca:	bd80      	pop	{r7, pc}
 80155cc:	0802ec30 	.word	0x0802ec30

080155d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80155d0:	b580      	push	{r7, lr}
 80155d2:	b082      	sub	sp, #8
 80155d4:	af00      	add	r7, sp, #0
 80155d6:	6078      	str	r0, [r7, #4]
 80155d8:	6878      	ldr	r0, [r7, #4]
 80155da:	f7ff ffe7 	bl	80155ac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80155de:	2114      	movs	r1, #20
 80155e0:	6878      	ldr	r0, [r7, #4]
 80155e2:	f016 fcb0 	bl	802bf46 <_ZdlPvj>
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	4618      	mov	r0, r3
 80155ea:	3708      	adds	r7, #8
 80155ec:	46bd      	mov	sp, r7
 80155ee:	bd80      	pop	{r7, pc}

080155f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80155f0:	b580      	push	{r7, lr}
 80155f2:	b082      	sub	sp, #8
 80155f4:	af00      	add	r7, sp, #0
 80155f6:	6078      	str	r0, [r7, #4]
 80155f8:	4a05      	ldr	r2, [pc, #20]	; (8015610 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	601a      	str	r2, [r3, #0]
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	4618      	mov	r0, r3
 8015602:	f000 fd9a 	bl	801613a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	4618      	mov	r0, r3
 801560a:	3708      	adds	r7, #8
 801560c:	46bd      	mov	sp, r7
 801560e:	bd80      	pop	{r7, pc}
 8015610:	0802ec64 	.word	0x0802ec64

08015614 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8015614:	b580      	push	{r7, lr}
 8015616:	b082      	sub	sp, #8
 8015618:	af00      	add	r7, sp, #0
 801561a:	6078      	str	r0, [r7, #4]
 801561c:	6878      	ldr	r0, [r7, #4]
 801561e:	f7ff ffe7 	bl	80155f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015622:	f44f 711e 	mov.w	r1, #632	; 0x278
 8015626:	6878      	ldr	r0, [r7, #4]
 8015628:	f016 fc8d 	bl	802bf46 <_ZdlPvj>
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	4618      	mov	r0, r3
 8015630:	3708      	adds	r7, #8
 8015632:	46bd      	mov	sp, r7
 8015634:	bd80      	pop	{r7, pc}
	...

08015638 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8015638:	b580      	push	{r7, lr}
 801563a:	b082      	sub	sp, #8
 801563c:	af00      	add	r7, sp, #0
 801563e:	6078      	str	r0, [r7, #4]
 8015640:	4a05      	ldr	r2, [pc, #20]	; (8015658 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	601a      	str	r2, [r3, #0]
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	4618      	mov	r0, r3
 801564a:	f000 fd76 	bl	801613a <_ZN8touchgfx17AbstractPartitionD1Ev>
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	4618      	mov	r0, r3
 8015652:	3708      	adds	r7, #8
 8015654:	46bd      	mov	sp, r7
 8015656:	bd80      	pop	{r7, pc}
 8015658:	0802ec98 	.word	0x0802ec98

0801565c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 801565c:	b580      	push	{r7, lr}
 801565e:	b082      	sub	sp, #8
 8015660:	af00      	add	r7, sp, #0
 8015662:	6078      	str	r0, [r7, #4]
 8015664:	6878      	ldr	r0, [r7, #4]
 8015666:	f7ff ffe7 	bl	8015638 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801566a:	2118      	movs	r1, #24
 801566c:	6878      	ldr	r0, [r7, #4]
 801566e:	f016 fc6a 	bl	802bf46 <_ZdlPvj>
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	4618      	mov	r0, r3
 8015676:	3708      	adds	r7, #8
 8015678:	46bd      	mov	sp, r7
 801567a:	bd80      	pop	{r7, pc}

0801567c <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 801567c:	b580      	push	{r7, lr}
 801567e:	b082      	sub	sp, #8
 8015680:	af00      	add	r7, sp, #0
 8015682:	6078      	str	r0, [r7, #4]
 8015684:	4a05      	ldr	r2, [pc, #20]	; (801569c <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	601a      	str	r2, [r3, #0]
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	4618      	mov	r0, r3
 801568e:	f7ff fcb5 	bl	8014ffc <_ZN8touchgfx3LCDD1Ev>
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	4618      	mov	r0, r3
 8015696:	3708      	adds	r7, #8
 8015698:	46bd      	mov	sp, r7
 801569a:	bd80      	pop	{r7, pc}
 801569c:	0802fb00 	.word	0x0802fb00

080156a0 <_ZN8touchgfx8LCD16bppD0Ev>:
 80156a0:	b580      	push	{r7, lr}
 80156a2:	b082      	sub	sp, #8
 80156a4:	af00      	add	r7, sp, #0
 80156a6:	6078      	str	r0, [r7, #4]
 80156a8:	6878      	ldr	r0, [r7, #4]
 80156aa:	f7ff ffe7 	bl	801567c <_ZN8touchgfx8LCD16bppD1Ev>
 80156ae:	2184      	movs	r1, #132	; 0x84
 80156b0:	6878      	ldr	r0, [r7, #4]
 80156b2:	f016 fc48 	bl	802bf46 <_ZdlPvj>
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	4618      	mov	r0, r3
 80156ba:	3708      	adds	r7, #8
 80156bc:	46bd      	mov	sp, r7
 80156be:	bd80      	pop	{r7, pc}

080156c0 <_Z41__static_initialization_and_destruction_0ii>:
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
}
 80156c0:	b580      	push	{r7, lr}
 80156c2:	b084      	sub	sp, #16
 80156c4:	af02      	add	r7, sp, #8
 80156c6:	6078      	str	r0, [r7, #4]
 80156c8:	6039      	str	r1, [r7, #0]
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	2b01      	cmp	r3, #1
 80156ce:	d119      	bne.n	8015704 <_Z41__static_initialization_and_destruction_0ii+0x44>
 80156d0:	683b      	ldr	r3, [r7, #0]
 80156d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80156d6:	4293      	cmp	r3, r2
 80156d8:	d114      	bne.n	8015704 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 80156da:	4818      	ldr	r0, [pc, #96]	; (801573c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80156dc:	f7ff fee8 	bl	80154b0 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 80156e0:	4817      	ldr	r0, [pc, #92]	; (8015740 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80156e2:	f7ff f919 	bl	8014918 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 80156e6:	4817      	ldr	r0, [pc, #92]	; (8015744 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80156e8:	f00c ff82 	bl	80225f0 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 80156ec:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80156f0:	9301      	str	r3, [sp, #4]
 80156f2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80156f6:	9300      	str	r3, [sp, #0]
 80156f8:	4b10      	ldr	r3, [pc, #64]	; (801573c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80156fa:	4a12      	ldr	r2, [pc, #72]	; (8015744 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80156fc:	4910      	ldr	r1, [pc, #64]	; (8015740 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80156fe:	4812      	ldr	r0, [pc, #72]	; (8015748 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8015700:	f7ff feaa 	bl	8015458 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	2b00      	cmp	r3, #0
 8015708:	d113      	bne.n	8015732 <_Z41__static_initialization_and_destruction_0ii+0x72>
 801570a:	683b      	ldr	r3, [r7, #0]
 801570c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015710:	4293      	cmp	r3, r2
 8015712:	d10e      	bne.n	8015732 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8015714:	480c      	ldr	r0, [pc, #48]	; (8015748 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8015716:	f7fe ff53 	bl	80145c0 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 801571a:	480c      	ldr	r0, [pc, #48]	; (801574c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 801571c:	f7fc fa7e 	bl	8011c1c <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8015720:	4808      	ldr	r0, [pc, #32]	; (8015744 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8015722:	f7ff ffab 	bl	801567c <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 8015726:	4806      	ldr	r0, [pc, #24]	; (8015740 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8015728:	f7ff f920 	bl	801496c <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 801572c:	4803      	ldr	r0, [pc, #12]	; (801573c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801572e:	f7fe fc8f 	bl	8014050 <_ZN20STM32TouchControllerD1Ev>
}
 8015732:	bf00      	nop
 8015734:	3708      	adds	r7, #8
 8015736:	46bd      	mov	sp, r7
 8015738:	bd80      	pop	{r7, pc}
 801573a:	bf00      	nop
 801573c:	200098cc 	.word	0x200098cc
 8015740:	200098d0 	.word	0x200098d0
 8015744:	2000a670 	.word	0x2000a670
 8015748:	2000a6f8 	.word	0x2000a6f8
 801574c:	20000034 	.word	0x20000034

08015750 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8015750:	b480      	push	{r7}
 8015752:	b083      	sub	sp, #12
 8015754:	af00      	add	r7, sp, #0
 8015756:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8015758:	2301      	movs	r3, #1
    }
 801575a:	4618      	mov	r0, r3
 801575c:	370c      	adds	r7, #12
 801575e:	46bd      	mov	sp, r7
 8015760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015764:	4770      	bx	lr

08015766 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8015766:	b480      	push	{r7}
 8015768:	b083      	sub	sp, #12
 801576a:	af00      	add	r7, sp, #0
 801576c:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 801576e:	230c      	movs	r3, #12
    }
 8015770:	4618      	mov	r0, r3
 8015772:	370c      	adds	r7, #12
 8015774:	46bd      	mov	sp, r7
 8015776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801577a:	4770      	bx	lr

0801577c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 801577c:	b480      	push	{r7}
 801577e:	b083      	sub	sp, #12
 8015780:	af00      	add	r7, sp, #0
 8015782:	6078      	str	r0, [r7, #4]
 8015784:	460b      	mov	r3, r1
 8015786:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8015788:	887a      	ldrh	r2, [r7, #2]
 801578a:	4613      	mov	r3, r2
 801578c:	005b      	lsls	r3, r3, #1
 801578e:	4413      	add	r3, r2
 8015790:	009b      	lsls	r3, r3, #2
 8015792:	3308      	adds	r3, #8
 8015794:	687a      	ldr	r2, [r7, #4]
 8015796:	4413      	add	r3, r2
    }
 8015798:	4618      	mov	r0, r3
 801579a:	370c      	adds	r7, #12
 801579c:	46bd      	mov	sp, r7
 801579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a2:	4770      	bx	lr

080157a4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 80157a4:	b480      	push	{r7}
 80157a6:	b083      	sub	sp, #12
 80157a8:	af00      	add	r7, sp, #0
 80157aa:	6078      	str	r0, [r7, #4]
 80157ac:	460b      	mov	r3, r1
 80157ae:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80157b0:	887a      	ldrh	r2, [r7, #2]
 80157b2:	4613      	mov	r3, r2
 80157b4:	005b      	lsls	r3, r3, #1
 80157b6:	4413      	add	r3, r2
 80157b8:	009b      	lsls	r3, r3, #2
 80157ba:	3308      	adds	r3, #8
 80157bc:	687a      	ldr	r2, [r7, #4]
 80157be:	4413      	add	r3, r2
    }
 80157c0:	4618      	mov	r0, r3
 80157c2:	370c      	adds	r7, #12
 80157c4:	46bd      	mov	sp, r7
 80157c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ca:	4770      	bx	lr

080157cc <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80157cc:	b480      	push	{r7}
 80157ce:	b083      	sub	sp, #12
 80157d0:	af00      	add	r7, sp, #0
 80157d2:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80157d4:	2301      	movs	r3, #1
    }
 80157d6:	4618      	mov	r0, r3
 80157d8:	370c      	adds	r7, #12
 80157da:	46bd      	mov	sp, r7
 80157dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157e0:	4770      	bx	lr

080157e2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80157e2:	b480      	push	{r7}
 80157e4:	b083      	sub	sp, #12
 80157e6:	af00      	add	r7, sp, #0
 80157e8:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80157ea:	f44f 731c 	mov.w	r3, #624	; 0x270
    }
 80157ee:	4618      	mov	r0, r3
 80157f0:	370c      	adds	r7, #12
 80157f2:	46bd      	mov	sp, r7
 80157f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f8:	4770      	bx	lr

080157fa <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80157fa:	b480      	push	{r7}
 80157fc:	b083      	sub	sp, #12
 80157fe:	af00      	add	r7, sp, #0
 8015800:	6078      	str	r0, [r7, #4]
 8015802:	460b      	mov	r3, r1
 8015804:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8015806:	887b      	ldrh	r3, [r7, #2]
 8015808:	f44f 721c 	mov.w	r2, #624	; 0x270
 801580c:	fb02 f303 	mul.w	r3, r2, r3
 8015810:	3308      	adds	r3, #8
 8015812:	687a      	ldr	r2, [r7, #4]
 8015814:	4413      	add	r3, r2
    }
 8015816:	4618      	mov	r0, r3
 8015818:	370c      	adds	r7, #12
 801581a:	46bd      	mov	sp, r7
 801581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015820:	4770      	bx	lr

08015822 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8015822:	b480      	push	{r7}
 8015824:	b083      	sub	sp, #12
 8015826:	af00      	add	r7, sp, #0
 8015828:	6078      	str	r0, [r7, #4]
 801582a:	460b      	mov	r3, r1
 801582c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801582e:	887b      	ldrh	r3, [r7, #2]
 8015830:	f44f 721c 	mov.w	r2, #624	; 0x270
 8015834:	fb02 f303 	mul.w	r3, r2, r3
 8015838:	3308      	adds	r3, #8
 801583a:	687a      	ldr	r2, [r7, #4]
 801583c:	4413      	add	r3, r2
    }
 801583e:	4618      	mov	r0, r3
 8015840:	370c      	adds	r7, #12
 8015842:	46bd      	mov	sp, r7
 8015844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015848:	4770      	bx	lr

0801584a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801584a:	b480      	push	{r7}
 801584c:	b083      	sub	sp, #12
 801584e:	af00      	add	r7, sp, #0
 8015850:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8015852:	2301      	movs	r3, #1
    }
 8015854:	4618      	mov	r0, r3
 8015856:	370c      	adds	r7, #12
 8015858:	46bd      	mov	sp, r7
 801585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801585e:	4770      	bx	lr

08015860 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8015860:	b480      	push	{r7}
 8015862:	b083      	sub	sp, #12
 8015864:	af00      	add	r7, sp, #0
 8015866:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8015868:	2310      	movs	r3, #16
    }
 801586a:	4618      	mov	r0, r3
 801586c:	370c      	adds	r7, #12
 801586e:	46bd      	mov	sp, r7
 8015870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015874:	4770      	bx	lr

08015876 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8015876:	b480      	push	{r7}
 8015878:	b083      	sub	sp, #12
 801587a:	af00      	add	r7, sp, #0
 801587c:	6078      	str	r0, [r7, #4]
 801587e:	460b      	mov	r3, r1
 8015880:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8015882:	887b      	ldrh	r3, [r7, #2]
 8015884:	011b      	lsls	r3, r3, #4
 8015886:	3308      	adds	r3, #8
 8015888:	687a      	ldr	r2, [r7, #4]
 801588a:	4413      	add	r3, r2
    }
 801588c:	4618      	mov	r0, r3
 801588e:	370c      	adds	r7, #12
 8015890:	46bd      	mov	sp, r7
 8015892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015896:	4770      	bx	lr

08015898 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8015898:	b480      	push	{r7}
 801589a:	b083      	sub	sp, #12
 801589c:	af00      	add	r7, sp, #0
 801589e:	6078      	str	r0, [r7, #4]
 80158a0:	460b      	mov	r3, r1
 80158a2:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80158a4:	887b      	ldrh	r3, [r7, #2]
 80158a6:	011b      	lsls	r3, r3, #4
 80158a8:	3308      	adds	r3, #8
 80158aa:	687a      	ldr	r2, [r7, #4]
 80158ac:	4413      	add	r3, r2
    }
 80158ae:	4618      	mov	r0, r3
 80158b0:	370c      	adds	r7, #12
 80158b2:	46bd      	mov	sp, r7
 80158b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158b8:	4770      	bx	lr

080158ba <_GLOBAL__sub_I_touchgfx_init>:
 80158ba:	b580      	push	{r7, lr}
 80158bc:	af00      	add	r7, sp, #0
 80158be:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80158c2:	2001      	movs	r0, #1
 80158c4:	f7ff fefc 	bl	80156c0 <_Z41__static_initialization_and_destruction_0ii>
 80158c8:	bd80      	pop	{r7, pc}

080158ca <_GLOBAL__sub_D_touchgfx_init>:
 80158ca:	b580      	push	{r7, lr}
 80158cc:	af00      	add	r7, sp, #0
 80158ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80158d2:	2000      	movs	r0, #0
 80158d4:	f7ff fef4 	bl	80156c0 <_Z41__static_initialization_and_destruction_0ii>
 80158d8:	bd80      	pop	{r7, pc}
	...

080158dc <__NVIC_EnableIRQ>:
{
 80158dc:	b480      	push	{r7}
 80158de:	b083      	sub	sp, #12
 80158e0:	af00      	add	r7, sp, #0
 80158e2:	4603      	mov	r3, r0
 80158e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80158e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	db0b      	blt.n	8015906 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80158ee:	79fb      	ldrb	r3, [r7, #7]
 80158f0:	f003 021f 	and.w	r2, r3, #31
 80158f4:	4907      	ldr	r1, [pc, #28]	; (8015914 <__NVIC_EnableIRQ+0x38>)
 80158f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80158fa:	095b      	lsrs	r3, r3, #5
 80158fc:	2001      	movs	r0, #1
 80158fe:	fa00 f202 	lsl.w	r2, r0, r2
 8015902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8015906:	bf00      	nop
 8015908:	370c      	adds	r7, #12
 801590a:	46bd      	mov	sp, r7
 801590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015910:	4770      	bx	lr
 8015912:	bf00      	nop
 8015914:	e000e100 	.word	0xe000e100

08015918 <__NVIC_DisableIRQ>:
{
 8015918:	b480      	push	{r7}
 801591a:	b083      	sub	sp, #12
 801591c:	af00      	add	r7, sp, #0
 801591e:	4603      	mov	r3, r0
 8015920:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015926:	2b00      	cmp	r3, #0
 8015928:	db12      	blt.n	8015950 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801592a:	79fb      	ldrb	r3, [r7, #7]
 801592c:	f003 021f 	and.w	r2, r3, #31
 8015930:	490a      	ldr	r1, [pc, #40]	; (801595c <__NVIC_DisableIRQ+0x44>)
 8015932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015936:	095b      	lsrs	r3, r3, #5
 8015938:	2001      	movs	r0, #1
 801593a:	fa00 f202 	lsl.w	r2, r0, r2
 801593e:	3320      	adds	r3, #32
 8015940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8015944:	f3bf 8f4f 	dsb	sy
}
 8015948:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801594a:	f3bf 8f6f 	isb	sy
}
 801594e:	bf00      	nop
}
 8015950:	bf00      	nop
 8015952:	370c      	adds	r7, #12
 8015954:	46bd      	mov	sp, r7
 8015956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801595a:	4770      	bx	lr
 801595c:	e000e100 	.word	0xe000e100

08015960 <__NVIC_SetPriority>:
{
 8015960:	b480      	push	{r7}
 8015962:	b083      	sub	sp, #12
 8015964:	af00      	add	r7, sp, #0
 8015966:	4603      	mov	r3, r0
 8015968:	6039      	str	r1, [r7, #0]
 801596a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801596c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015970:	2b00      	cmp	r3, #0
 8015972:	db0a      	blt.n	801598a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015974:	683b      	ldr	r3, [r7, #0]
 8015976:	b2da      	uxtb	r2, r3
 8015978:	490c      	ldr	r1, [pc, #48]	; (80159ac <__NVIC_SetPriority+0x4c>)
 801597a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801597e:	0112      	lsls	r2, r2, #4
 8015980:	b2d2      	uxtb	r2, r2
 8015982:	440b      	add	r3, r1
 8015984:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015988:	e00a      	b.n	80159a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801598a:	683b      	ldr	r3, [r7, #0]
 801598c:	b2da      	uxtb	r2, r3
 801598e:	4908      	ldr	r1, [pc, #32]	; (80159b0 <__NVIC_SetPriority+0x50>)
 8015990:	79fb      	ldrb	r3, [r7, #7]
 8015992:	f003 030f 	and.w	r3, r3, #15
 8015996:	3b04      	subs	r3, #4
 8015998:	0112      	lsls	r2, r2, #4
 801599a:	b2d2      	uxtb	r2, r2
 801599c:	440b      	add	r3, r1
 801599e:	761a      	strb	r2, [r3, #24]
}
 80159a0:	bf00      	nop
 80159a2:	370c      	adds	r7, #12
 80159a4:	46bd      	mov	sp, r7
 80159a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159aa:	4770      	bx	lr
 80159ac:	e000e100 	.word	0xe000e100
 80159b0:	e000ed00 	.word	0xe000ed00

080159b4 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
#include "stm32f4xx.h"

using namespace touchgfx;

void TouchGFXGeneratedHAL::initialize()
{
 80159b4:	b5b0      	push	{r4, r5, r7, lr}
 80159b6:	b082      	sub	sp, #8
 80159b8:	af00      	add	r7, sp, #0
 80159ba:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	4618      	mov	r0, r3
 80159c0:	f001 f853 	bl	8016a6a <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80159c4:	687d      	ldr	r5, [r7, #4]
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	3364      	adds	r3, #100	; 0x64
 80159cc:	681c      	ldr	r4, [r3, #0]
 80159ce:	f005 fc71 	bl	801b2b4 <_ZN8touchgfx11Application11getInstanceEv>
 80159d2:	4603      	mov	r3, r0
 80159d4:	4619      	mov	r1, r3
 80159d6:	4628      	mov	r0, r5
 80159d8:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 80159da:	6878      	ldr	r0, [r7, #4]
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	3388      	adds	r3, #136	; 0x88
 80159e2:	681c      	ldr	r4, [r3, #0]
 80159e4:	2300      	movs	r3, #0
 80159e6:	2200      	movs	r2, #0
 80159e8:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80159ec:	47a0      	blx	r4
}
 80159ee:	bf00      	nop
 80159f0:	3708      	adds	r7, #8
 80159f2:	46bd      	mov	sp, r7
 80159f4:	bdb0      	pop	{r4, r5, r7, pc}

080159f6 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 80159f6:	b580      	push	{r7, lr}
 80159f8:	b082      	sub	sp, #8
 80159fa:	af00      	add	r7, sp, #0
 80159fc:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 80159fe:	2109      	movs	r1, #9
 8015a00:	205a      	movs	r0, #90	; 0x5a
 8015a02:	f7ff ffad 	bl	8015960 <__NVIC_SetPriority>
}
 8015a06:	bf00      	nop
 8015a08:	3708      	adds	r7, #8
 8015a0a:	46bd      	mov	sp, r7
 8015a0c:	bd80      	pop	{r7, pc}

08015a0e <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8015a0e:	b580      	push	{r7, lr}
 8015a10:	b082      	sub	sp, #8
 8015a12:	af00      	add	r7, sp, #0
 8015a14:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8015a16:	205a      	movs	r0, #90	; 0x5a
 8015a18:	f7ff ff60 	bl	80158dc <__NVIC_EnableIRQ>
}
 8015a1c:	bf00      	nop
 8015a1e:	3708      	adds	r7, #8
 8015a20:	46bd      	mov	sp, r7
 8015a22:	bd80      	pop	{r7, pc}

08015a24 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8015a24:	b580      	push	{r7, lr}
 8015a26:	b082      	sub	sp, #8
 8015a28:	af00      	add	r7, sp, #0
 8015a2a:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8015a2c:	205a      	movs	r0, #90	; 0x5a
 8015a2e:	f7ff ff73 	bl	8015918 <__NVIC_DisableIRQ>
}
 8015a32:	bf00      	nop
 8015a34:	3708      	adds	r7, #8
 8015a36:	46bd      	mov	sp, r7
 8015a38:	bd80      	pop	{r7, pc}

08015a3a <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8015a3a:	b480      	push	{r7}
 8015a3c:	b083      	sub	sp, #12
 8015a3e:	af00      	add	r7, sp, #0
 8015a40:	6078      	str	r0, [r7, #4]
}
 8015a42:	bf00      	nop
 8015a44:	370c      	adds	r7, #12
 8015a46:	46bd      	mov	sp, r7
 8015a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a4c:	4770      	bx	lr

08015a4e <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8015a4e:	b580      	push	{r7, lr}
 8015a50:	b082      	sub	sp, #8
 8015a52:	af00      	add	r7, sp, #0
 8015a54:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	4618      	mov	r0, r3
 8015a5a:	f000 ffed 	bl	8016a38 <_ZN8touchgfx3HAL10beginFrameEv>
 8015a5e:	4603      	mov	r3, r0
}
 8015a60:	4618      	mov	r0, r3
 8015a62:	3708      	adds	r7, #8
 8015a64:	46bd      	mov	sp, r7
 8015a66:	bd80      	pop	{r7, pc}

08015a68 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8015a68:	b580      	push	{r7, lr}
 8015a6a:	b082      	sub	sp, #8
 8015a6c:	af00      	add	r7, sp, #0
 8015a6e:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	4618      	mov	r0, r3
 8015a74:	f000 ffec 	bl	8016a50 <_ZN8touchgfx3HAL8endFrameEv>
}
 8015a78:	bf00      	nop
 8015a7a:	3708      	adds	r7, #8
 8015a7c:	46bd      	mov	sp, r7
 8015a7e:	bd80      	pop	{r7, pc}

08015a80 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    fbPtr += rect.y * lcd().framebufferStride() + rect.x * 2;
    return fbPtr;
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8015a80:	b480      	push	{r7}
 8015a82:	b083      	sub	sp, #12
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	6078      	str	r0, [r7, #4]
    //getTFTFrameBuffer() not used for selected Frame Buffer Strategy
    return 0;
 8015a88:	2300      	movs	r3, #0
}
 8015a8a:	4618      	mov	r0, r3
 8015a8c:	370c      	adds	r7, #12
 8015a8e:	46bd      	mov	sp, r7
 8015a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a94:	4770      	bx	lr

08015a96 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8015a96:	b480      	push	{r7}
 8015a98:	b083      	sub	sp, #12
 8015a9a:	af00      	add	r7, sp, #0
 8015a9c:	6078      	str	r0, [r7, #4]
 8015a9e:	6039      	str	r1, [r7, #0]
    //setTFTFrameBuffer() not used for selected display interface
}
 8015aa0:	bf00      	nop
 8015aa2:	370c      	adds	r7, #12
 8015aa4:	46bd      	mov	sp, r7
 8015aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aaa:	4770      	bx	lr

08015aac <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8015aac:	b580      	push	{r7, lr}
 8015aae:	b082      	sub	sp, #8
 8015ab0:	af00      	add	r7, sp, #0
 8015ab2:	6078      	str	r0, [r7, #4]
 8015ab4:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	6839      	ldr	r1, [r7, #0]
 8015aba:	4618      	mov	r0, r3
 8015abc:	f000 ff86 	bl	80169cc <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8015ac0:	bf00      	nop
 8015ac2:	3708      	adds	r7, #8
 8015ac4:	46bd      	mov	sp, r7
 8015ac6:	bd80      	pop	{r7, pc}

08015ac8 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8015ac8:	b580      	push	{r7, lr}
 8015aca:	b084      	sub	sp, #16
 8015acc:	af00      	add	r7, sp, #0
 8015ace:	60f8      	str	r0, [r7, #12]
 8015ad0:	60b9      	str	r1, [r7, #8]
 8015ad2:	607a      	str	r2, [r7, #4]
 8015ad4:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8015ad6:	68f8      	ldr	r0, [r7, #12]
 8015ad8:	683b      	ldr	r3, [r7, #0]
 8015ada:	687a      	ldr	r2, [r7, #4]
 8015adc:	68b9      	ldr	r1, [r7, #8]
 8015ade:	f001 f8e6 	bl	8016cae <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8015ae2:	4603      	mov	r3, r0
}
 8015ae4:	4618      	mov	r0, r3
 8015ae6:	3710      	adds	r7, #16
 8015ae8:	46bd      	mov	sp, r7
 8015aea:	bd80      	pop	{r7, pc}

08015aec <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8015aec:	b580      	push	{r7, lr}
 8015aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8015af0:	2201      	movs	r2, #1
 8015af2:	490e      	ldr	r1, [pc, #56]	; (8015b2c <MX_USB_HOST_Init+0x40>)
 8015af4:	480e      	ldr	r0, [pc, #56]	; (8015b30 <MX_USB_HOST_Init+0x44>)
 8015af6:	f7f6 fc13 	bl	800c320 <USBH_Init>
 8015afa:	4603      	mov	r3, r0
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d001      	beq.n	8015b04 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8015b00:	f7eb fbe2 	bl	80012c8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8015b04:	490b      	ldr	r1, [pc, #44]	; (8015b34 <MX_USB_HOST_Init+0x48>)
 8015b06:	480a      	ldr	r0, [pc, #40]	; (8015b30 <MX_USB_HOST_Init+0x44>)
 8015b08:	f7f6 fcd9 	bl	800c4be <USBH_RegisterClass>
 8015b0c:	4603      	mov	r3, r0
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d001      	beq.n	8015b16 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8015b12:	f7eb fbd9 	bl	80012c8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8015b16:	4806      	ldr	r0, [pc, #24]	; (8015b30 <MX_USB_HOST_Init+0x44>)
 8015b18:	f7f6 fd5d 	bl	800c5d6 <USBH_Start>
 8015b1c:	4603      	mov	r3, r0
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d001      	beq.n	8015b26 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8015b22:	f7eb fbd1 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8015b26:	bf00      	nop
 8015b28:	bd80      	pop	{r7, pc}
 8015b2a:	bf00      	nop
 8015b2c:	08015b39 	.word	0x08015b39
 8015b30:	2000a774 	.word	0x2000a774
 8015b34:	20000010 	.word	0x20000010

08015b38 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8015b38:	b480      	push	{r7}
 8015b3a:	b083      	sub	sp, #12
 8015b3c:	af00      	add	r7, sp, #0
 8015b3e:	6078      	str	r0, [r7, #4]
 8015b40:	460b      	mov	r3, r1
 8015b42:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8015b44:	78fb      	ldrb	r3, [r7, #3]
 8015b46:	3b01      	subs	r3, #1
 8015b48:	2b04      	cmp	r3, #4
 8015b4a:	d819      	bhi.n	8015b80 <USBH_UserProcess+0x48>
 8015b4c:	a201      	add	r2, pc, #4	; (adr r2, 8015b54 <USBH_UserProcess+0x1c>)
 8015b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b52:	bf00      	nop
 8015b54:	08015b81 	.word	0x08015b81
 8015b58:	08015b71 	.word	0x08015b71
 8015b5c:	08015b81 	.word	0x08015b81
 8015b60:	08015b79 	.word	0x08015b79
 8015b64:	08015b69 	.word	0x08015b69
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8015b68:	4b09      	ldr	r3, [pc, #36]	; (8015b90 <USBH_UserProcess+0x58>)
 8015b6a:	2203      	movs	r2, #3
 8015b6c:	701a      	strb	r2, [r3, #0]
  break;
 8015b6e:	e008      	b.n	8015b82 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8015b70:	4b07      	ldr	r3, [pc, #28]	; (8015b90 <USBH_UserProcess+0x58>)
 8015b72:	2202      	movs	r2, #2
 8015b74:	701a      	strb	r2, [r3, #0]
  break;
 8015b76:	e004      	b.n	8015b82 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8015b78:	4b05      	ldr	r3, [pc, #20]	; (8015b90 <USBH_UserProcess+0x58>)
 8015b7a:	2201      	movs	r2, #1
 8015b7c:	701a      	strb	r2, [r3, #0]
  break;
 8015b7e:	e000      	b.n	8015b82 <USBH_UserProcess+0x4a>

  default:
  break;
 8015b80:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8015b82:	bf00      	nop
 8015b84:	370c      	adds	r7, #12
 8015b86:	46bd      	mov	sp, r7
 8015b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b8c:	4770      	bx	lr
 8015b8e:	bf00      	nop
 8015b90:	2000ab58 	.word	0x2000ab58

08015b94 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8015b94:	b580      	push	{r7, lr}
 8015b96:	b08a      	sub	sp, #40	; 0x28
 8015b98:	af00      	add	r7, sp, #0
 8015b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015b9c:	f107 0314 	add.w	r3, r7, #20
 8015ba0:	2200      	movs	r2, #0
 8015ba2:	601a      	str	r2, [r3, #0]
 8015ba4:	605a      	str	r2, [r3, #4]
 8015ba6:	609a      	str	r2, [r3, #8]
 8015ba8:	60da      	str	r2, [r3, #12]
 8015baa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	681b      	ldr	r3, [r3, #0]
 8015bb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015bb4:	d147      	bne.n	8015c46 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015bb6:	2300      	movs	r3, #0
 8015bb8:	613b      	str	r3, [r7, #16]
 8015bba:	4b25      	ldr	r3, [pc, #148]	; (8015c50 <HAL_HCD_MspInit+0xbc>)
 8015bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015bbe:	4a24      	ldr	r2, [pc, #144]	; (8015c50 <HAL_HCD_MspInit+0xbc>)
 8015bc0:	f043 0301 	orr.w	r3, r3, #1
 8015bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8015bc6:	4b22      	ldr	r3, [pc, #136]	; (8015c50 <HAL_HCD_MspInit+0xbc>)
 8015bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015bca:	f003 0301 	and.w	r3, r3, #1
 8015bce:	613b      	str	r3, [r7, #16]
 8015bd0:	693b      	ldr	r3, [r7, #16]
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 8015bd2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8015bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015bd8:	2302      	movs	r3, #2
 8015bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015bdc:	2300      	movs	r3, #0
 8015bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015be0:	2303      	movs	r3, #3
 8015be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8015be4:	230a      	movs	r3, #10
 8015be6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015be8:	f107 0314 	add.w	r3, r7, #20
 8015bec:	4619      	mov	r1, r3
 8015bee:	4819      	ldr	r0, [pc, #100]	; (8015c54 <HAL_HCD_MspInit+0xc0>)
 8015bf0:	f7ed fc0e 	bl	8003410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 8015bf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015bfa:	2302      	movs	r3, #2
 8015bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015bfe:	2300      	movs	r3, #0
 8015c00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 8015c02:	f107 0314 	add.w	r3, r7, #20
 8015c06:	4619      	mov	r1, r3
 8015c08:	4812      	ldr	r0, [pc, #72]	; (8015c54 <HAL_HCD_MspInit+0xc0>)
 8015c0a:	f7ed fc01 	bl	8003410 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015c0e:	4b10      	ldr	r3, [pc, #64]	; (8015c50 <HAL_HCD_MspInit+0xbc>)
 8015c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c12:	4a0f      	ldr	r2, [pc, #60]	; (8015c50 <HAL_HCD_MspInit+0xbc>)
 8015c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015c18:	6353      	str	r3, [r2, #52]	; 0x34
 8015c1a:	2300      	movs	r3, #0
 8015c1c:	60fb      	str	r3, [r7, #12]
 8015c1e:	4b0c      	ldr	r3, [pc, #48]	; (8015c50 <HAL_HCD_MspInit+0xbc>)
 8015c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015c22:	4a0b      	ldr	r2, [pc, #44]	; (8015c50 <HAL_HCD_MspInit+0xbc>)
 8015c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015c28:	6453      	str	r3, [r2, #68]	; 0x44
 8015c2a:	4b09      	ldr	r3, [pc, #36]	; (8015c50 <HAL_HCD_MspInit+0xbc>)
 8015c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015c32:	60fb      	str	r3, [r7, #12]
 8015c34:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8015c36:	2200      	movs	r2, #0
 8015c38:	2105      	movs	r1, #5
 8015c3a:	2043      	movs	r0, #67	; 0x43
 8015c3c:	f7ec fb80 	bl	8002340 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015c40:	2043      	movs	r0, #67	; 0x43
 8015c42:	f7ec fb99 	bl	8002378 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015c46:	bf00      	nop
 8015c48:	3728      	adds	r7, #40	; 0x28
 8015c4a:	46bd      	mov	sp, r7
 8015c4c:	bd80      	pop	{r7, pc}
 8015c4e:	bf00      	nop
 8015c50:	40023800 	.word	0x40023800
 8015c54:	40020000 	.word	0x40020000

08015c58 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8015c58:	b580      	push	{r7, lr}
 8015c5a:	b082      	sub	sp, #8
 8015c5c:	af00      	add	r7, sp, #0
 8015c5e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8015c66:	4618      	mov	r0, r3
 8015c68:	f7f7 f96d 	bl	800cf46 <USBH_LL_IncTimer>
}
 8015c6c:	bf00      	nop
 8015c6e:	3708      	adds	r7, #8
 8015c70:	46bd      	mov	sp, r7
 8015c72:	bd80      	pop	{r7, pc}

08015c74 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8015c74:	b580      	push	{r7, lr}
 8015c76:	b082      	sub	sp, #8
 8015c78:	af00      	add	r7, sp, #0
 8015c7a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8015c82:	4618      	mov	r0, r3
 8015c84:	f7f7 f9b1 	bl	800cfea <USBH_LL_Connect>
}
 8015c88:	bf00      	nop
 8015c8a:	3708      	adds	r7, #8
 8015c8c:	46bd      	mov	sp, r7
 8015c8e:	bd80      	pop	{r7, pc}

08015c90 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8015c90:	b580      	push	{r7, lr}
 8015c92:	b082      	sub	sp, #8
 8015c94:	af00      	add	r7, sp, #0
 8015c96:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8015c9e:	4618      	mov	r0, r3
 8015ca0:	f7f7 f9c6 	bl	800d030 <USBH_LL_Disconnect>
}
 8015ca4:	bf00      	nop
 8015ca6:	3708      	adds	r7, #8
 8015ca8:	46bd      	mov	sp, r7
 8015caa:	bd80      	pop	{r7, pc}

08015cac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8015cac:	b580      	push	{r7, lr}
 8015cae:	b082      	sub	sp, #8
 8015cb0:	af00      	add	r7, sp, #0
 8015cb2:	6078      	str	r0, [r7, #4]
 8015cb4:	460b      	mov	r3, r1
 8015cb6:	70fb      	strb	r3, [r7, #3]
 8015cb8:	4613      	mov	r3, r2
 8015cba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	f7f7 f9fd 	bl	800d0c2 <USBH_LL_NotifyURBChange>
#endif
}
 8015cc8:	bf00      	nop
 8015cca:	3708      	adds	r7, #8
 8015ccc:	46bd      	mov	sp, r7
 8015cce:	bd80      	pop	{r7, pc}

08015cd0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8015cd0:	b580      	push	{r7, lr}
 8015cd2:	b082      	sub	sp, #8
 8015cd4:	af00      	add	r7, sp, #0
 8015cd6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8015cde:	4618      	mov	r0, r3
 8015ce0:	f7f7 f95b 	bl	800cf9a <USBH_LL_PortEnabled>
}
 8015ce4:	bf00      	nop
 8015ce6:	3708      	adds	r7, #8
 8015ce8:	46bd      	mov	sp, r7
 8015cea:	bd80      	pop	{r7, pc}

08015cec <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8015cec:	b580      	push	{r7, lr}
 8015cee:	b082      	sub	sp, #8
 8015cf0:	af00      	add	r7, sp, #0
 8015cf2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8015cfa:	4618      	mov	r0, r3
 8015cfc:	f7f7 f967 	bl	800cfce <USBH_LL_PortDisabled>
}
 8015d00:	bf00      	nop
 8015d02:	3708      	adds	r7, #8
 8015d04:	46bd      	mov	sp, r7
 8015d06:	bd80      	pop	{r7, pc}

08015d08 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8015d08:	b580      	push	{r7, lr}
 8015d0a:	b082      	sub	sp, #8
 8015d0c:	af00      	add	r7, sp, #0
 8015d0e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8015d16:	2b01      	cmp	r3, #1
 8015d18:	d12a      	bne.n	8015d70 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8015d1a:	4a18      	ldr	r2, [pc, #96]	; (8015d7c <USBH_LL_Init+0x74>)
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	4a15      	ldr	r2, [pc, #84]	; (8015d7c <USBH_LL_Init+0x74>)
 8015d26:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015d2a:	4b14      	ldr	r3, [pc, #80]	; (8015d7c <USBH_LL_Init+0x74>)
 8015d2c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015d30:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8015d32:	4b12      	ldr	r3, [pc, #72]	; (8015d7c <USBH_LL_Init+0x74>)
 8015d34:	2208      	movs	r2, #8
 8015d36:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8015d38:	4b10      	ldr	r3, [pc, #64]	; (8015d7c <USBH_LL_Init+0x74>)
 8015d3a:	2201      	movs	r2, #1
 8015d3c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015d3e:	4b0f      	ldr	r3, [pc, #60]	; (8015d7c <USBH_LL_Init+0x74>)
 8015d40:	2200      	movs	r2, #0
 8015d42:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8015d44:	4b0d      	ldr	r3, [pc, #52]	; (8015d7c <USBH_LL_Init+0x74>)
 8015d46:	2202      	movs	r2, #2
 8015d48:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015d4a:	4b0c      	ldr	r3, [pc, #48]	; (8015d7c <USBH_LL_Init+0x74>)
 8015d4c:	2200      	movs	r2, #0
 8015d4e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8015d50:	480a      	ldr	r0, [pc, #40]	; (8015d7c <USBH_LL_Init+0x74>)
 8015d52:	f7ed fd3a 	bl	80037ca <HAL_HCD_Init>
 8015d56:	4603      	mov	r3, r0
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d001      	beq.n	8015d60 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8015d5c:	f7eb fab4 	bl	80012c8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8015d60:	4806      	ldr	r0, [pc, #24]	; (8015d7c <USBH_LL_Init+0x74>)
 8015d62:	f7ee f99b 	bl	800409c <HAL_HCD_GetCurrentFrame>
 8015d66:	4603      	mov	r3, r0
 8015d68:	4619      	mov	r1, r3
 8015d6a:	6878      	ldr	r0, [r7, #4]
 8015d6c:	f7f7 f8dc 	bl	800cf28 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8015d70:	2300      	movs	r3, #0
}
 8015d72:	4618      	mov	r0, r3
 8015d74:	3708      	adds	r7, #8
 8015d76:	46bd      	mov	sp, r7
 8015d78:	bd80      	pop	{r7, pc}
 8015d7a:	bf00      	nop
 8015d7c:	2000ab5c 	.word	0x2000ab5c

08015d80 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8015d80:	b580      	push	{r7, lr}
 8015d82:	b084      	sub	sp, #16
 8015d84:	af00      	add	r7, sp, #0
 8015d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d88:	2300      	movs	r3, #0
 8015d8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015d8c:	2300      	movs	r3, #0
 8015d8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015d96:	4618      	mov	r0, r3
 8015d98:	f7ee f908 	bl	8003fac <HAL_HCD_Start>
 8015d9c:	4603      	mov	r3, r0
 8015d9e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015da0:	7bfb      	ldrb	r3, [r7, #15]
 8015da2:	4618      	mov	r0, r3
 8015da4:	f000 f95e 	bl	8016064 <USBH_Get_USB_Status>
 8015da8:	4603      	mov	r3, r0
 8015daa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015dac:	7bbb      	ldrb	r3, [r7, #14]
}
 8015dae:	4618      	mov	r0, r3
 8015db0:	3710      	adds	r7, #16
 8015db2:	46bd      	mov	sp, r7
 8015db4:	bd80      	pop	{r7, pc}

08015db6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8015db6:	b580      	push	{r7, lr}
 8015db8:	b084      	sub	sp, #16
 8015dba:	af00      	add	r7, sp, #0
 8015dbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015dbe:	2300      	movs	r3, #0
 8015dc0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015dc2:	2300      	movs	r3, #0
 8015dc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015dcc:	4618      	mov	r0, r3
 8015dce:	f7ee f910 	bl	8003ff2 <HAL_HCD_Stop>
 8015dd2:	4603      	mov	r3, r0
 8015dd4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015dd6:	7bfb      	ldrb	r3, [r7, #15]
 8015dd8:	4618      	mov	r0, r3
 8015dda:	f000 f943 	bl	8016064 <USBH_Get_USB_Status>
 8015dde:	4603      	mov	r3, r0
 8015de0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015de2:	7bbb      	ldrb	r3, [r7, #14]
}
 8015de4:	4618      	mov	r0, r3
 8015de6:	3710      	adds	r7, #16
 8015de8:	46bd      	mov	sp, r7
 8015dea:	bd80      	pop	{r7, pc}

08015dec <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8015dec:	b580      	push	{r7, lr}
 8015dee:	b084      	sub	sp, #16
 8015df0:	af00      	add	r7, sp, #0
 8015df2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8015df4:	2301      	movs	r3, #1
 8015df6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015dfe:	4618      	mov	r0, r3
 8015e00:	f7ee f95a 	bl	80040b8 <HAL_HCD_GetCurrentSpeed>
 8015e04:	4603      	mov	r3, r0
 8015e06:	2b02      	cmp	r3, #2
 8015e08:	d00c      	beq.n	8015e24 <USBH_LL_GetSpeed+0x38>
 8015e0a:	2b02      	cmp	r3, #2
 8015e0c:	d80d      	bhi.n	8015e2a <USBH_LL_GetSpeed+0x3e>
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d002      	beq.n	8015e18 <USBH_LL_GetSpeed+0x2c>
 8015e12:	2b01      	cmp	r3, #1
 8015e14:	d003      	beq.n	8015e1e <USBH_LL_GetSpeed+0x32>
 8015e16:	e008      	b.n	8015e2a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8015e18:	2300      	movs	r3, #0
 8015e1a:	73fb      	strb	r3, [r7, #15]
    break;
 8015e1c:	e008      	b.n	8015e30 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8015e1e:	2301      	movs	r3, #1
 8015e20:	73fb      	strb	r3, [r7, #15]
    break;
 8015e22:	e005      	b.n	8015e30 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8015e24:	2302      	movs	r3, #2
 8015e26:	73fb      	strb	r3, [r7, #15]
    break;
 8015e28:	e002      	b.n	8015e30 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8015e2a:	2301      	movs	r3, #1
 8015e2c:	73fb      	strb	r3, [r7, #15]
    break;
 8015e2e:	bf00      	nop
  }
  return  speed;
 8015e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e32:	4618      	mov	r0, r3
 8015e34:	3710      	adds	r7, #16
 8015e36:	46bd      	mov	sp, r7
 8015e38:	bd80      	pop	{r7, pc}

08015e3a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8015e3a:	b580      	push	{r7, lr}
 8015e3c:	b084      	sub	sp, #16
 8015e3e:	af00      	add	r7, sp, #0
 8015e40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e42:	2300      	movs	r3, #0
 8015e44:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015e46:	2300      	movs	r3, #0
 8015e48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015e50:	4618      	mov	r0, r3
 8015e52:	f7ee f8eb 	bl	800402c <HAL_HCD_ResetPort>
 8015e56:	4603      	mov	r3, r0
 8015e58:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015e5a:	7bfb      	ldrb	r3, [r7, #15]
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	f000 f901 	bl	8016064 <USBH_Get_USB_Status>
 8015e62:	4603      	mov	r3, r0
 8015e64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015e66:	7bbb      	ldrb	r3, [r7, #14]
}
 8015e68:	4618      	mov	r0, r3
 8015e6a:	3710      	adds	r7, #16
 8015e6c:	46bd      	mov	sp, r7
 8015e6e:	bd80      	pop	{r7, pc}

08015e70 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8015e70:	b580      	push	{r7, lr}
 8015e72:	b082      	sub	sp, #8
 8015e74:	af00      	add	r7, sp, #0
 8015e76:	6078      	str	r0, [r7, #4]
 8015e78:	460b      	mov	r3, r1
 8015e7a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015e82:	78fa      	ldrb	r2, [r7, #3]
 8015e84:	4611      	mov	r1, r2
 8015e86:	4618      	mov	r0, r3
 8015e88:	f7ee f8f3 	bl	8004072 <HAL_HCD_HC_GetXferCount>
 8015e8c:	4603      	mov	r3, r0
}
 8015e8e:	4618      	mov	r0, r3
 8015e90:	3708      	adds	r7, #8
 8015e92:	46bd      	mov	sp, r7
 8015e94:	bd80      	pop	{r7, pc}

08015e96 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8015e96:	b590      	push	{r4, r7, lr}
 8015e98:	b089      	sub	sp, #36	; 0x24
 8015e9a:	af04      	add	r7, sp, #16
 8015e9c:	6078      	str	r0, [r7, #4]
 8015e9e:	4608      	mov	r0, r1
 8015ea0:	4611      	mov	r1, r2
 8015ea2:	461a      	mov	r2, r3
 8015ea4:	4603      	mov	r3, r0
 8015ea6:	70fb      	strb	r3, [r7, #3]
 8015ea8:	460b      	mov	r3, r1
 8015eaa:	70bb      	strb	r3, [r7, #2]
 8015eac:	4613      	mov	r3, r2
 8015eae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015eb0:	2300      	movs	r3, #0
 8015eb2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015eb4:	2300      	movs	r3, #0
 8015eb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8015ebe:	787c      	ldrb	r4, [r7, #1]
 8015ec0:	78ba      	ldrb	r2, [r7, #2]
 8015ec2:	78f9      	ldrb	r1, [r7, #3]
 8015ec4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8015ec6:	9302      	str	r3, [sp, #8]
 8015ec8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015ecc:	9301      	str	r3, [sp, #4]
 8015ece:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015ed2:	9300      	str	r3, [sp, #0]
 8015ed4:	4623      	mov	r3, r4
 8015ed6:	f7ed fcdf 	bl	8003898 <HAL_HCD_HC_Init>
 8015eda:	4603      	mov	r3, r0
 8015edc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8015ede:	7bfb      	ldrb	r3, [r7, #15]
 8015ee0:	4618      	mov	r0, r3
 8015ee2:	f000 f8bf 	bl	8016064 <USBH_Get_USB_Status>
 8015ee6:	4603      	mov	r3, r0
 8015ee8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015eea:	7bbb      	ldrb	r3, [r7, #14]
}
 8015eec:	4618      	mov	r0, r3
 8015eee:	3714      	adds	r7, #20
 8015ef0:	46bd      	mov	sp, r7
 8015ef2:	bd90      	pop	{r4, r7, pc}

08015ef4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8015ef4:	b580      	push	{r7, lr}
 8015ef6:	b084      	sub	sp, #16
 8015ef8:	af00      	add	r7, sp, #0
 8015efa:	6078      	str	r0, [r7, #4]
 8015efc:	460b      	mov	r3, r1
 8015efe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015f00:	2300      	movs	r3, #0
 8015f02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015f04:	2300      	movs	r3, #0
 8015f06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015f0e:	78fa      	ldrb	r2, [r7, #3]
 8015f10:	4611      	mov	r1, r2
 8015f12:	4618      	mov	r0, r3
 8015f14:	f7ed fd78 	bl	8003a08 <HAL_HCD_HC_Halt>
 8015f18:	4603      	mov	r3, r0
 8015f1a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015f1c:	7bfb      	ldrb	r3, [r7, #15]
 8015f1e:	4618      	mov	r0, r3
 8015f20:	f000 f8a0 	bl	8016064 <USBH_Get_USB_Status>
 8015f24:	4603      	mov	r3, r0
 8015f26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015f28:	7bbb      	ldrb	r3, [r7, #14]
}
 8015f2a:	4618      	mov	r0, r3
 8015f2c:	3710      	adds	r7, #16
 8015f2e:	46bd      	mov	sp, r7
 8015f30:	bd80      	pop	{r7, pc}

08015f32 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8015f32:	b590      	push	{r4, r7, lr}
 8015f34:	b089      	sub	sp, #36	; 0x24
 8015f36:	af04      	add	r7, sp, #16
 8015f38:	6078      	str	r0, [r7, #4]
 8015f3a:	4608      	mov	r0, r1
 8015f3c:	4611      	mov	r1, r2
 8015f3e:	461a      	mov	r2, r3
 8015f40:	4603      	mov	r3, r0
 8015f42:	70fb      	strb	r3, [r7, #3]
 8015f44:	460b      	mov	r3, r1
 8015f46:	70bb      	strb	r3, [r7, #2]
 8015f48:	4613      	mov	r3, r2
 8015f4a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015f4c:	2300      	movs	r3, #0
 8015f4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015f50:	2300      	movs	r3, #0
 8015f52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8015f5a:	787c      	ldrb	r4, [r7, #1]
 8015f5c:	78ba      	ldrb	r2, [r7, #2]
 8015f5e:	78f9      	ldrb	r1, [r7, #3]
 8015f60:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8015f64:	9303      	str	r3, [sp, #12]
 8015f66:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8015f68:	9302      	str	r3, [sp, #8]
 8015f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f6c:	9301      	str	r3, [sp, #4]
 8015f6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015f72:	9300      	str	r3, [sp, #0]
 8015f74:	4623      	mov	r3, r4
 8015f76:	f7ed fd6b 	bl	8003a50 <HAL_HCD_HC_SubmitRequest>
 8015f7a:	4603      	mov	r3, r0
 8015f7c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8015f7e:	7bfb      	ldrb	r3, [r7, #15]
 8015f80:	4618      	mov	r0, r3
 8015f82:	f000 f86f 	bl	8016064 <USBH_Get_USB_Status>
 8015f86:	4603      	mov	r3, r0
 8015f88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015f8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8015f8c:	4618      	mov	r0, r3
 8015f8e:	3714      	adds	r7, #20
 8015f90:	46bd      	mov	sp, r7
 8015f92:	bd90      	pop	{r4, r7, pc}

08015f94 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8015f94:	b580      	push	{r7, lr}
 8015f96:	b082      	sub	sp, #8
 8015f98:	af00      	add	r7, sp, #0
 8015f9a:	6078      	str	r0, [r7, #4]
 8015f9c:	460b      	mov	r3, r1
 8015f9e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015fa6:	78fa      	ldrb	r2, [r7, #3]
 8015fa8:	4611      	mov	r1, r2
 8015faa:	4618      	mov	r0, r3
 8015fac:	f7ee f84c 	bl	8004048 <HAL_HCD_HC_GetURBState>
 8015fb0:	4603      	mov	r3, r0
}
 8015fb2:	4618      	mov	r0, r3
 8015fb4:	3708      	adds	r7, #8
 8015fb6:	46bd      	mov	sp, r7
 8015fb8:	bd80      	pop	{r7, pc}

08015fba <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8015fba:	b580      	push	{r7, lr}
 8015fbc:	b082      	sub	sp, #8
 8015fbe:	af00      	add	r7, sp, #0
 8015fc0:	6078      	str	r0, [r7, #4]
 8015fc2:	460b      	mov	r3, r1
 8015fc4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8015fcc:	2b01      	cmp	r3, #1
 8015fce:	d103      	bne.n	8015fd8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8015fd0:	78fb      	ldrb	r3, [r7, #3]
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	f000 f872 	bl	80160bc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8015fd8:	20c8      	movs	r0, #200	; 0xc8
 8015fda:	f7eb ffd9 	bl	8001f90 <HAL_Delay>
  return USBH_OK;
 8015fde:	2300      	movs	r3, #0
}
 8015fe0:	4618      	mov	r0, r3
 8015fe2:	3708      	adds	r7, #8
 8015fe4:	46bd      	mov	sp, r7
 8015fe6:	bd80      	pop	{r7, pc}

08015fe8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8015fe8:	b480      	push	{r7}
 8015fea:	b085      	sub	sp, #20
 8015fec:	af00      	add	r7, sp, #0
 8015fee:	6078      	str	r0, [r7, #4]
 8015ff0:	460b      	mov	r3, r1
 8015ff2:	70fb      	strb	r3, [r7, #3]
 8015ff4:	4613      	mov	r3, r2
 8015ff6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015ffe:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8016000:	78fa      	ldrb	r2, [r7, #3]
 8016002:	68f9      	ldr	r1, [r7, #12]
 8016004:	4613      	mov	r3, r2
 8016006:	011b      	lsls	r3, r3, #4
 8016008:	1a9b      	subs	r3, r3, r2
 801600a:	009b      	lsls	r3, r3, #2
 801600c:	440b      	add	r3, r1
 801600e:	3317      	adds	r3, #23
 8016010:	781b      	ldrb	r3, [r3, #0]
 8016012:	2b00      	cmp	r3, #0
 8016014:	d00a      	beq.n	801602c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8016016:	78fa      	ldrb	r2, [r7, #3]
 8016018:	68f9      	ldr	r1, [r7, #12]
 801601a:	4613      	mov	r3, r2
 801601c:	011b      	lsls	r3, r3, #4
 801601e:	1a9b      	subs	r3, r3, r2
 8016020:	009b      	lsls	r3, r3, #2
 8016022:	440b      	add	r3, r1
 8016024:	333c      	adds	r3, #60	; 0x3c
 8016026:	78ba      	ldrb	r2, [r7, #2]
 8016028:	701a      	strb	r2, [r3, #0]
 801602a:	e009      	b.n	8016040 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801602c:	78fa      	ldrb	r2, [r7, #3]
 801602e:	68f9      	ldr	r1, [r7, #12]
 8016030:	4613      	mov	r3, r2
 8016032:	011b      	lsls	r3, r3, #4
 8016034:	1a9b      	subs	r3, r3, r2
 8016036:	009b      	lsls	r3, r3, #2
 8016038:	440b      	add	r3, r1
 801603a:	333d      	adds	r3, #61	; 0x3d
 801603c:	78ba      	ldrb	r2, [r7, #2]
 801603e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8016040:	2300      	movs	r3, #0
}
 8016042:	4618      	mov	r0, r3
 8016044:	3714      	adds	r7, #20
 8016046:	46bd      	mov	sp, r7
 8016048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801604c:	4770      	bx	lr

0801604e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801604e:	b580      	push	{r7, lr}
 8016050:	b082      	sub	sp, #8
 8016052:	af00      	add	r7, sp, #0
 8016054:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8016056:	6878      	ldr	r0, [r7, #4]
 8016058:	f7eb ff9a 	bl	8001f90 <HAL_Delay>
}
 801605c:	bf00      	nop
 801605e:	3708      	adds	r7, #8
 8016060:	46bd      	mov	sp, r7
 8016062:	bd80      	pop	{r7, pc}

08016064 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016064:	b480      	push	{r7}
 8016066:	b085      	sub	sp, #20
 8016068:	af00      	add	r7, sp, #0
 801606a:	4603      	mov	r3, r0
 801606c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801606e:	2300      	movs	r3, #0
 8016070:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016072:	79fb      	ldrb	r3, [r7, #7]
 8016074:	2b03      	cmp	r3, #3
 8016076:	d817      	bhi.n	80160a8 <USBH_Get_USB_Status+0x44>
 8016078:	a201      	add	r2, pc, #4	; (adr r2, 8016080 <USBH_Get_USB_Status+0x1c>)
 801607a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801607e:	bf00      	nop
 8016080:	08016091 	.word	0x08016091
 8016084:	08016097 	.word	0x08016097
 8016088:	0801609d 	.word	0x0801609d
 801608c:	080160a3 	.word	0x080160a3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8016090:	2300      	movs	r3, #0
 8016092:	73fb      	strb	r3, [r7, #15]
    break;
 8016094:	e00b      	b.n	80160ae <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8016096:	2302      	movs	r3, #2
 8016098:	73fb      	strb	r3, [r7, #15]
    break;
 801609a:	e008      	b.n	80160ae <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801609c:	2301      	movs	r3, #1
 801609e:	73fb      	strb	r3, [r7, #15]
    break;
 80160a0:	e005      	b.n	80160ae <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80160a2:	2302      	movs	r3, #2
 80160a4:	73fb      	strb	r3, [r7, #15]
    break;
 80160a6:	e002      	b.n	80160ae <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80160a8:	2302      	movs	r3, #2
 80160aa:	73fb      	strb	r3, [r7, #15]
    break;
 80160ac:	bf00      	nop
  }
  return usb_status;
 80160ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80160b0:	4618      	mov	r0, r3
 80160b2:	3714      	adds	r7, #20
 80160b4:	46bd      	mov	sp, r7
 80160b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160ba:	4770      	bx	lr

080160bc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80160bc:	b580      	push	{r7, lr}
 80160be:	b084      	sub	sp, #16
 80160c0:	af00      	add	r7, sp, #0
 80160c2:	4603      	mov	r3, r0
 80160c4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80160c6:	79fb      	ldrb	r3, [r7, #7]
 80160c8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80160ca:	79fb      	ldrb	r3, [r7, #7]
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d102      	bne.n	80160d6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80160d0:	2300      	movs	r3, #0
 80160d2:	73fb      	strb	r3, [r7, #15]
 80160d4:	e001      	b.n	80160da <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80160d6:	2301      	movs	r3, #1
 80160d8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,(GPIO_PinState)data);
 80160da:	7bfb      	ldrb	r3, [r7, #15]
 80160dc:	461a      	mov	r2, r3
 80160de:	2104      	movs	r1, #4
 80160e0:	4803      	ldr	r0, [pc, #12]	; (80160f0 <MX_DriverVbusFS+0x34>)
 80160e2:	f7ed fb59 	bl	8003798 <HAL_GPIO_WritePin>
}
 80160e6:	bf00      	nop
 80160e8:	3710      	adds	r7, #16
 80160ea:	46bd      	mov	sp, r7
 80160ec:	bd80      	pop	{r7, pc}
 80160ee:	bf00      	nop
 80160f0:	40020400 	.word	0x40020400

080160f4 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80160f4:	8880      	ldrh	r0, [r0, #4]
 80160f6:	4770      	bx	lr

080160f8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80160f8:	b570      	push	{r4, r5, r6, lr}
 80160fa:	6803      	ldr	r3, [r0, #0]
 80160fc:	4605      	mov	r5, r0
 80160fe:	460c      	mov	r4, r1
 8016100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016102:	2100      	movs	r1, #0
 8016104:	4798      	blx	r3
 8016106:	682b      	ldr	r3, [r5, #0]
 8016108:	4606      	mov	r6, r0
 801610a:	6a1b      	ldr	r3, [r3, #32]
 801610c:	4628      	mov	r0, r5
 801610e:	4798      	blx	r3
 8016110:	1ba4      	subs	r4, r4, r6
 8016112:	b2a4      	uxth	r4, r4
 8016114:	fbb4 f0f0 	udiv	r0, r4, r0
 8016118:	bd70      	pop	{r4, r5, r6, pc}

0801611a <_ZN8touchgfx17AbstractPartition5clearEv>:
 801611a:	2300      	movs	r3, #0
 801611c:	8083      	strh	r3, [r0, #4]
 801611e:	4770      	bx	lr

08016120 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8016120:	b510      	push	{r4, lr}
 8016122:	6803      	ldr	r3, [r0, #0]
 8016124:	8881      	ldrh	r1, [r0, #4]
 8016126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016128:	4604      	mov	r4, r0
 801612a:	4798      	blx	r3
 801612c:	88a3      	ldrh	r3, [r4, #4]
 801612e:	3301      	adds	r3, #1
 8016130:	80a3      	strh	r3, [r4, #4]
 8016132:	bd10      	pop	{r4, pc}

08016134 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8016134:	6803      	ldr	r3, [r0, #0]
 8016136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016138:	4718      	bx	r3

0801613a <_ZN8touchgfx17AbstractPartitionD1Ev>:
 801613a:	4770      	bx	lr

0801613c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 801613c:	4a02      	ldr	r2, [pc, #8]	; (8016148 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801613e:	6002      	str	r2, [r0, #0]
 8016140:	2200      	movs	r2, #0
 8016142:	8082      	strh	r2, [r0, #4]
 8016144:	4770      	bx	lr
 8016146:	bf00      	nop
 8016148:	0802edc8 	.word	0x0802edc8

0801614c <_ZN8touchgfx9Container13getFirstChildEv>:
 801614c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801614e:	4770      	bx	lr

08016150 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv>:
 8016150:	b510      	push	{r4, lr}
 8016152:	6803      	ldr	r3, [r0, #0]
 8016154:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8016158:	4604      	mov	r4, r0
 801615a:	4798      	blx	r3
 801615c:	b110      	cbz	r0, 8016164 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv+0x14>
 801615e:	4620      	mov	r0, r4
 8016160:	f7fc fdea 	bl	8012d38 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8016164:	bd10      	pop	{r4, pc}

08016166 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8016166:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 801616a:	4770      	bx	lr

0801616c <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 801616c:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 8016170:	4770      	bx	lr

08016172 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 8016172:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 8016176:	4770      	bx	lr

08016178 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 8016178:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 801617c:	4770      	bx	lr

0801617e <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 801617e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016180:	e9c0 1221 	strd	r1, r2, [r0, #132]	; 0x84
 8016184:	461e      	mov	r6, r3
 8016186:	6803      	ldr	r3, [r0, #0]
 8016188:	460f      	mov	r7, r1
 801618a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801618e:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 8016192:	4604      	mov	r4, r0
 8016194:	4615      	mov	r5, r2
 8016196:	4798      	blx	r3
 8016198:	b93e      	cbnz	r6, 80161aa <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x2c>
 801619a:	1bed      	subs	r5, r5, r7
 801619c:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
 80161a0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80161a4:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
 80161a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80161aa:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
 80161ae:	e7f7      	b.n	80161a0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x22>

080161b0 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 80161b0:	b510      	push	{r4, lr}
 80161b2:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 80161b6:	600c      	str	r4, [r1, #0]
 80161b8:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 80161bc:	6011      	str	r1, [r2, #0]
 80161be:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 80161c2:	801a      	strh	r2, [r3, #0]
 80161c4:	9b02      	ldr	r3, [sp, #8]
 80161c6:	f8b0 2092 	ldrh.w	r2, [r0, #146]	; 0x92
 80161ca:	801a      	strh	r2, [r3, #0]
 80161cc:	bd10      	pop	{r4, pc}

080161ce <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 80161ce:	b510      	push	{r4, lr}
 80161d0:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 80161d4:	600c      	str	r4, [r1, #0]
 80161d6:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 80161da:	6011      	str	r1, [r2, #0]
 80161dc:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 80161e0:	801a      	strh	r2, [r3, #0]
 80161e2:	bd10      	pop	{r4, pc}

080161e4 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 80161e4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80161e8:	600b      	str	r3, [r1, #0]
 80161ea:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80161ee:	6013      	str	r3, [r2, #0]
 80161f0:	4770      	bx	lr

080161f2 <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 80161f2:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
 80161f6:	4770      	bx	lr

080161f8 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 80161f8:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 80161fc:	4770      	bx	lr

080161fe <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
 80161fe:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 8016202:	4770      	bx	lr

08016204 <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:
 8016204:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
 8016208:	4770      	bx	lr

0801620a <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 801620a:	b570      	push	{r4, r5, r6, lr}
 801620c:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 8016210:	428d      	cmp	r5, r1
 8016212:	bfb8      	it	lt
 8016214:	460d      	movlt	r5, r1
 8016216:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 801621a:	428d      	cmp	r5, r1
 801621c:	4604      	mov	r4, r0
 801621e:	bfa8      	it	ge
 8016220:	460d      	movge	r5, r1
 8016222:	4616      	mov	r6, r2
 8016224:	b99a      	cbnz	r2, 801624e <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 8016226:	6803      	ldr	r3, [r0, #0]
 8016228:	4629      	mov	r1, r5
 801622a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801622e:	4798      	blx	r3
 8016230:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8016234:	b368      	cbz	r0, 8016292 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 8016236:	6803      	ldr	r3, [r0, #0]
 8016238:	68db      	ldr	r3, [r3, #12]
 801623a:	4798      	blx	r3
 801623c:	b348      	cbz	r0, 8016292 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 801623e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8016242:	6803      	ldr	r3, [r0, #0]
 8016244:	4621      	mov	r1, r4
 8016246:	689b      	ldr	r3, [r3, #8]
 8016248:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801624c:	4718      	bx	r3
 801624e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8016252:	2b00      	cmp	r3, #0
 8016254:	dd08      	ble.n	8016268 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x5e>
 8016256:	f005 f82d 	bl	801b2b4 <_ZN8touchgfx11Application11getInstanceEv>
 801625a:	4621      	mov	r1, r4
 801625c:	3004      	adds	r0, #4
 801625e:	f005 f84e 	bl	801b2fe <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8016262:	2300      	movs	r3, #0
 8016264:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 8016268:	6823      	ldr	r3, [r4, #0]
 801626a:	4620      	mov	r0, r4
 801626c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8016270:	4798      	blx	r3
 8016272:	2300      	movs	r3, #0
 8016274:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8016278:	e9c4 0527 	strd	r0, r5, [r4, #156]	; 0x9c
 801627c:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
 8016280:	f005 f818 	bl	801b2b4 <_ZN8touchgfx11Application11getInstanceEv>
 8016284:	4621      	mov	r1, r4
 8016286:	3004      	adds	r0, #4
 8016288:	f005 f8e2 	bl	801b450 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 801628c:	2301      	movs	r3, #1
 801628e:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 8016292:	bd70      	pop	{r4, r5, r6, pc}

08016294 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8016294:	b510      	push	{r4, lr}
 8016296:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 801629a:	4299      	cmp	r1, r3
 801629c:	bfb8      	it	lt
 801629e:	4619      	movlt	r1, r3
 80162a0:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80162a4:	4299      	cmp	r1, r3
 80162a6:	bfa8      	it	ge
 80162a8:	4619      	movge	r1, r3
 80162aa:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80162ae:	428b      	cmp	r3, r1
 80162b0:	4604      	mov	r4, r0
 80162b2:	d010      	beq.n	80162d6 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 80162b4:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 80162b8:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 80162bc:	b158      	cbz	r0, 80162d6 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 80162be:	6803      	ldr	r3, [r0, #0]
 80162c0:	68db      	ldr	r3, [r3, #12]
 80162c2:	4798      	blx	r3
 80162c4:	b138      	cbz	r0, 80162d6 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 80162c6:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 80162ca:	6803      	ldr	r3, [r0, #0]
 80162cc:	4621      	mov	r1, r4
 80162ce:	689b      	ldr	r3, [r3, #8]
 80162d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80162d4:	4718      	bx	r3
 80162d6:	bd10      	pop	{r4, pc}

080162d8 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 80162d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80162da:	4604      	mov	r4, r0
 80162dc:	460d      	mov	r5, r1
 80162de:	b1a9      	cbz	r1, 801630c <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 80162e0:	f8b0 6092 	ldrh.w	r6, [r0, #146]	; 0x92
 80162e4:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
 80162e8:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
 80162ec:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	; 0x84
 80162f0:	ab01      	add	r3, sp, #4
 80162f2:	1a12      	subs	r2, r2, r0
 80162f4:	1b89      	subs	r1, r1, r6
 80162f6:	1a38      	subs	r0, r7, r0
 80162f8:	f006 fa6a 	bl	801c7d0 <_ZN8touchgfx6muldivElllRl>
 80162fc:	4629      	mov	r1, r5
 80162fe:	ab01      	add	r3, sp, #4
 8016300:	f8b4 2090 	ldrh.w	r2, [r4, #144]	; 0x90
 8016304:	4430      	add	r0, r6
 8016306:	f006 fa63 	bl	801c7d0 <_ZN8touchgfx6muldivElllRl>
 801630a:	b285      	uxth	r5, r0
 801630c:	4628      	mov	r0, r5
 801630e:	b003      	add	sp, #12
 8016310:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016312 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 8016312:	b570      	push	{r4, r5, r6, lr}
 8016314:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 8016318:	4604      	mov	r4, r0
 801631a:	2b00      	cmp	r3, #0
 801631c:	d035      	beq.n	801638a <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 801631e:	e9d4 3227 	ldrd	r3, r2, [r4, #156]	; 0x9c
 8016322:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 8016326:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
 801632a:	3001      	adds	r0, #1
 801632c:	1ad2      	subs	r2, r2, r3
 801632e:	b212      	sxth	r2, r2
 8016330:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
 8016334:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8016338:	2100      	movs	r1, #0
 801633a:	b280      	uxth	r0, r0
 801633c:	47a8      	blx	r5
 801633e:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8016342:	6823      	ldr	r3, [r4, #0]
 8016344:	4401      	add	r1, r0
 8016346:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801634a:	4620      	mov	r0, r4
 801634c:	4798      	blx	r3
 801634e:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	; 0xa4
 8016352:	429a      	cmp	r2, r3
 8016354:	db19      	blt.n	801638a <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 8016356:	2500      	movs	r5, #0
 8016358:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 801635c:	f004 ffaa 	bl	801b2b4 <_ZN8touchgfx11Application11getInstanceEv>
 8016360:	4621      	mov	r1, r4
 8016362:	3004      	adds	r0, #4
 8016364:	f004 ffcb 	bl	801b2fe <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8016368:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 801636c:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 8016370:	b158      	cbz	r0, 801638a <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 8016372:	6803      	ldr	r3, [r0, #0]
 8016374:	68db      	ldr	r3, [r3, #12]
 8016376:	4798      	blx	r3
 8016378:	b138      	cbz	r0, 801638a <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 801637a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 801637e:	6803      	ldr	r3, [r0, #0]
 8016380:	4621      	mov	r1, r4
 8016382:	689b      	ldr	r3, [r3, #8]
 8016384:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016388:	4718      	bx	r3
 801638a:	bd70      	pop	{r4, r5, r6, pc}

0801638c <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 801638c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016390:	4604      	mov	r4, r0
 8016392:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 8016396:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
 801639a:	460e      	mov	r6, r1
 801639c:	4615      	mov	r5, r2
 801639e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 80163a2:	4619      	mov	r1, r3
 80163a4:	463a      	mov	r2, r7
 80163a6:	3058      	adds	r0, #88	; 0x58
 80163a8:	4698      	mov	r8, r3
 80163aa:	f7fc fd7e 	bl	8012eaa <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80163ae:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80163b2:	4446      	add	r6, r8
 80163b4:	42b3      	cmp	r3, r6
 80163b6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80163ba:	bfb8      	it	lt
 80163bc:	8126      	strhlt	r6, [r4, #8]
 80163be:	443d      	add	r5, r7
 80163c0:	42ab      	cmp	r3, r5
 80163c2:	bfb8      	it	lt
 80163c4:	8165      	strhlt	r5, [r4, #10]
 80163c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080163ca <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 80163ca:	b510      	push	{r4, lr}
 80163cc:	4604      	mov	r4, r0
 80163ce:	302c      	adds	r0, #44	; 0x2c
 80163d0:	f003 f812 	bl	80193f8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80163d4:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
 80163d8:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 80163dc:	4620      	mov	r0, r4
 80163de:	f7fc fd64 	bl	8012eaa <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80163e2:	bd10      	pop	{r4, pc}

080163e4 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 80163e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80163e6:	4604      	mov	r4, r0
 80163e8:	4626      	mov	r6, r4
 80163ea:	2500      	movs	r5, #0
 80163ec:	f7fc fc54 	bl	8012c98 <_ZN8touchgfx8DrawableC1Ev>
 80163f0:	4b23      	ldr	r3, [pc, #140]	; (8016480 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 80163f2:	62a5      	str	r5, [r4, #40]	; 0x28
 80163f4:	f846 3b2c 	str.w	r3, [r6], #44
 80163f8:	2226      	movs	r2, #38	; 0x26
 80163fa:	4629      	mov	r1, r5
 80163fc:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8016400:	4630      	mov	r0, r6
 8016402:	f8ad 7004 	strh.w	r7, [sp, #4]
 8016406:	f016 fd94 	bl	802cf32 <memset>
 801640a:	4630      	mov	r0, r6
 801640c:	f7fc fc44 	bl	8012c98 <_ZN8touchgfx8DrawableC1Ev>
 8016410:	a902      	add	r1, sp, #8
 8016412:	4b1c      	ldr	r3, [pc, #112]	; (8016484 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 8016414:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016416:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 801641a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801641e:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
 8016422:	4630      	mov	r0, r6
 8016424:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8016428:	f002 ffe6 	bl	80193f8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801642c:	4638      	mov	r0, r7
 801642e:	f7fc fc33 	bl	8012c98 <_ZN8touchgfx8DrawableC1Ev>
 8016432:	4b15      	ldr	r3, [pc, #84]	; (8016488 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 8016434:	65a3      	str	r3, [r4, #88]	; 0x58
 8016436:	2364      	movs	r3, #100	; 0x64
 8016438:	e9c4 3522 	strd	r3, r5, [r4, #136]	; 0x88
 801643c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8016440:	4b12      	ldr	r3, [pc, #72]	; (801648c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 8016442:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8016446:	4629      	mov	r1, r5
 8016448:	4630      	mov	r0, r6
 801644a:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
 801644e:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 8016452:	e9c4 5527 	strd	r5, r5, [r4, #156]	; 0x9c
 8016456:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 801645a:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
 801645e:	f7fc fcaa 	bl	8012db6 <_ZN8touchgfx8Drawable4setXEs>
 8016462:	4629      	mov	r1, r5
 8016464:	4630      	mov	r0, r6
 8016466:	f7fc fcb5 	bl	8012dd4 <_ZN8touchgfx8Drawable4setYEs>
 801646a:	4631      	mov	r1, r6
 801646c:	4620      	mov	r0, r4
 801646e:	f000 f819 	bl	80164a4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016472:	4620      	mov	r0, r4
 8016474:	4639      	mov	r1, r7
 8016476:	f000 f815 	bl	80164a4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801647a:	4620      	mov	r0, r4
 801647c:	b003      	add	sp, #12
 801647e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016480:	0802edfc 	.word	0x0802edfc
 8016484:	0802f61c 	.word	0x0802f61c
 8016488:	0802eed0 	.word	0x0802eed0
 801648c:	0801ce35 	.word	0x0801ce35

08016490 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8016490:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016492:	2000      	movs	r0, #0
 8016494:	b12b      	cbz	r3, 80164a2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8016496:	b920      	cbnz	r0, 80164a2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8016498:	1a5a      	subs	r2, r3, r1
 801649a:	4250      	negs	r0, r2
 801649c:	4150      	adcs	r0, r2
 801649e:	699b      	ldr	r3, [r3, #24]
 80164a0:	e7f8      	b.n	8016494 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80164a2:	4770      	bx	lr

080164a4 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80164a4:	2300      	movs	r3, #0
 80164a6:	6148      	str	r0, [r1, #20]
 80164a8:	618b      	str	r3, [r1, #24]
 80164aa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80164ac:	b913      	cbnz	r3, 80164b4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 80164ae:	6281      	str	r1, [r0, #40]	; 0x28
 80164b0:	4770      	bx	lr
 80164b2:	4613      	mov	r3, r2
 80164b4:	699a      	ldr	r2, [r3, #24]
 80164b6:	2a00      	cmp	r2, #0
 80164b8:	d1fb      	bne.n	80164b2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 80164ba:	6199      	str	r1, [r3, #24]
 80164bc:	4770      	bx	lr

080164be <_ZN8touchgfx9Container9removeAllEv>:
 80164be:	2200      	movs	r2, #0
 80164c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80164c2:	b123      	cbz	r3, 80164ce <_ZN8touchgfx9Container9removeAllEv+0x10>
 80164c4:	6999      	ldr	r1, [r3, #24]
 80164c6:	6281      	str	r1, [r0, #40]	; 0x28
 80164c8:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80164cc:	e7f8      	b.n	80164c0 <_ZN8touchgfx9Container9removeAllEv+0x2>
 80164ce:	4770      	bx	lr

080164d0 <_ZN8touchgfx9Container6unlinkEv>:
 80164d0:	2300      	movs	r3, #0
 80164d2:	6283      	str	r3, [r0, #40]	; 0x28
 80164d4:	4770      	bx	lr

080164d6 <_ZNK8touchgfx9Container12getSolidRectEv>:
 80164d6:	2200      	movs	r2, #0
 80164d8:	8002      	strh	r2, [r0, #0]
 80164da:	8042      	strh	r2, [r0, #2]
 80164dc:	8082      	strh	r2, [r0, #4]
 80164de:	80c2      	strh	r2, [r0, #6]
 80164e0:	4770      	bx	lr

080164e2 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80164e2:	b570      	push	{r4, r5, r6, lr}
 80164e4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80164e6:	460d      	mov	r5, r1
 80164e8:	4616      	mov	r6, r2
 80164ea:	b13c      	cbz	r4, 80164fc <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 80164ec:	6823      	ldr	r3, [r4, #0]
 80164ee:	4620      	mov	r0, r4
 80164f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80164f2:	4632      	mov	r2, r6
 80164f4:	4629      	mov	r1, r5
 80164f6:	4798      	blx	r3
 80164f8:	69a4      	ldr	r4, [r4, #24]
 80164fa:	e7f6      	b.n	80164ea <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 80164fc:	bd70      	pop	{r4, r5, r6, pc}

080164fe <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 80164fe:	b538      	push	{r3, r4, r5, lr}
 8016500:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016502:	460d      	mov	r5, r1
 8016504:	b134      	cbz	r4, 8016514 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8016506:	682b      	ldr	r3, [r5, #0]
 8016508:	4621      	mov	r1, r4
 801650a:	689b      	ldr	r3, [r3, #8]
 801650c:	4628      	mov	r0, r5
 801650e:	4798      	blx	r3
 8016510:	69a4      	ldr	r4, [r4, #24]
 8016512:	e7f7      	b.n	8016504 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8016514:	bd38      	pop	{r3, r4, r5, pc}

08016516 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8016516:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016518:	b19b      	cbz	r3, 8016542 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801651a:	428b      	cmp	r3, r1
 801651c:	d109      	bne.n	8016532 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 801651e:	699a      	ldr	r2, [r3, #24]
 8016520:	2100      	movs	r1, #0
 8016522:	6159      	str	r1, [r3, #20]
 8016524:	6282      	str	r2, [r0, #40]	; 0x28
 8016526:	b902      	cbnz	r2, 801652a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8016528:	4770      	bx	lr
 801652a:	6199      	str	r1, [r3, #24]
 801652c:	4770      	bx	lr
 801652e:	4613      	mov	r3, r2
 8016530:	b13a      	cbz	r2, 8016542 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8016532:	699a      	ldr	r2, [r3, #24]
 8016534:	428a      	cmp	r2, r1
 8016536:	d1fa      	bne.n	801652e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8016538:	698a      	ldr	r2, [r1, #24]
 801653a:	619a      	str	r2, [r3, #24]
 801653c:	2300      	movs	r3, #0
 801653e:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8016542:	4770      	bx	lr

08016544 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8016544:	b410      	push	{r4}
 8016546:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016548:	4604      	mov	r4, r0
 801654a:	b92b      	cbnz	r3, 8016558 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 801654c:	6803      	ldr	r3, [r0, #0]
 801654e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016554:	4611      	mov	r1, r2
 8016556:	4718      	bx	r3
 8016558:	b941      	cbnz	r1, 801656c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 801655a:	6193      	str	r3, [r2, #24]
 801655c:	6282      	str	r2, [r0, #40]	; 0x28
 801655e:	6154      	str	r4, [r2, #20]
 8016560:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016564:	4770      	bx	lr
 8016566:	4603      	mov	r3, r0
 8016568:	2800      	cmp	r0, #0
 801656a:	d0f9      	beq.n	8016560 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 801656c:	4299      	cmp	r1, r3
 801656e:	6998      	ldr	r0, [r3, #24]
 8016570:	d1f9      	bne.n	8016566 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8016572:	6190      	str	r0, [r2, #24]
 8016574:	618a      	str	r2, [r1, #24]
 8016576:	e7f2      	b.n	801655e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08016578 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8016578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801657c:	461f      	mov	r7, r3
 801657e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8016582:	460d      	mov	r5, r1
 8016584:	4616      	mov	r6, r2
 8016586:	b103      	cbz	r3, 801658a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8016588:	6038      	str	r0, [r7, #0]
 801658a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801658c:	b314      	cbz	r4, 80165d4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 801658e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8016592:	b1eb      	cbz	r3, 80165d0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016594:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8016598:	428d      	cmp	r5, r1
 801659a:	db19      	blt.n	80165d0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801659c:	8923      	ldrh	r3, [r4, #8]
 801659e:	b289      	uxth	r1, r1
 80165a0:	440b      	add	r3, r1
 80165a2:	b21b      	sxth	r3, r3
 80165a4:	429d      	cmp	r5, r3
 80165a6:	da13      	bge.n	80165d0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80165a8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80165ac:	4296      	cmp	r6, r2
 80165ae:	db0f      	blt.n	80165d0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80165b0:	8963      	ldrh	r3, [r4, #10]
 80165b2:	b292      	uxth	r2, r2
 80165b4:	4413      	add	r3, r2
 80165b6:	b21b      	sxth	r3, r3
 80165b8:	429e      	cmp	r6, r3
 80165ba:	da09      	bge.n	80165d0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80165bc:	6823      	ldr	r3, [r4, #0]
 80165be:	1ab2      	subs	r2, r6, r2
 80165c0:	1a69      	subs	r1, r5, r1
 80165c2:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 80165c6:	b212      	sxth	r2, r2
 80165c8:	463b      	mov	r3, r7
 80165ca:	b209      	sxth	r1, r1
 80165cc:	4620      	mov	r0, r4
 80165ce:	47c0      	blx	r8
 80165d0:	69a4      	ldr	r4, [r4, #24]
 80165d2:	e7db      	b.n	801658c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80165d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080165d8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 80165d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165dc:	4c6e      	ldr	r4, [pc, #440]	; (8016798 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 80165de:	b0a1      	sub	sp, #132	; 0x84
 80165e0:	6824      	ldr	r4, [r4, #0]
 80165e2:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80165e4:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 80165e8:	9303      	str	r3, [sp, #12]
 80165ea:	2400      	movs	r4, #0
 80165ec:	802c      	strh	r4, [r5, #0]
 80165ee:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 80165f0:	802c      	strh	r4, [r5, #0]
 80165f2:	601c      	str	r4, [r3, #0]
 80165f4:	4606      	mov	r6, r0
 80165f6:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80165fa:	f7ff ffbd 	bl	8016578 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80165fe:	f1b9 0f03 	cmp.w	r9, #3
 8016602:	f340 80c2 	ble.w	801678a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 8016606:	4631      	mov	r1, r6
 8016608:	a80c      	add	r0, sp, #48	; 0x30
 801660a:	f005 ffaf 	bl	801c56c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801660e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8016612:	9306      	str	r3, [sp, #24]
 8016614:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8016618:	9307      	str	r3, [sp, #28]
 801661a:	9b03      	ldr	r3, [sp, #12]
 801661c:	f8d3 a000 	ldr.w	sl, [r3]
 8016620:	f1ba 0f00 	cmp.w	sl, #0
 8016624:	f000 80b4 	beq.w	8016790 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>
 8016628:	4651      	mov	r1, sl
 801662a:	a810      	add	r0, sp, #64	; 0x40
 801662c:	f005 ff9e 	bl	801c56c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016630:	9b01      	ldr	r3, [sp, #4]
 8016632:	9a06      	ldr	r2, [sp, #24]
 8016634:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8016638:	189d      	adds	r5, r3, r2
 801663a:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 801663e:	9a07      	ldr	r2, [sp, #28]
 8016640:	2002      	movs	r0, #2
 8016642:	fb91 f1f0 	sdiv	r1, r1, r0
 8016646:	4419      	add	r1, r3
 8016648:	1a6d      	subs	r5, r5, r1
 801664a:	9b02      	ldr	r3, [sp, #8]
 801664c:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8016650:	4413      	add	r3, r2
 8016652:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8016656:	fb92 f2f0 	sdiv	r2, r2, r0
 801665a:	440a      	add	r2, r1
 801665c:	1a9b      	subs	r3, r3, r2
 801665e:	435b      	muls	r3, r3
 8016660:	fb05 3505 	mla	r5, r5, r5, r3
 8016664:	4f4d      	ldr	r7, [pc, #308]	; (801679c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c4>)
 8016666:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8016668:	ac10      	add	r4, sp, #64	; 0x40
 801666a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801666c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801666e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016670:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8016672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016674:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8016678:	f1b9 0f0c 	cmp.w	r9, #12
 801667c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016680:	f04f 0303 	mov.w	r3, #3
 8016684:	bfc8      	it	gt
 8016686:	4698      	movgt	r8, r3
 8016688:	f8cd 9000 	str.w	r9, [sp]
 801668c:	f04f 0400 	mov.w	r4, #0
 8016690:	bfdc      	itt	le
 8016692:	f109 32ff 	addle.w	r2, r9, #4294967295
 8016696:	fb92 f8f3 	sdivle	r8, r2, r3
 801669a:	1c63      	adds	r3, r4, #1
 801669c:	aa10      	add	r2, sp, #64	; 0x40
 801669e:	f004 0401 	and.w	r4, r4, #1
 80166a2:	9308      	str	r3, [sp, #32]
 80166a4:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 80166a8:	9b00      	ldr	r3, [sp, #0]
 80166aa:	fb93 f3f8 	sdiv	r3, r3, r8
 80166ae:	b29b      	uxth	r3, r3
 80166b0:	3404      	adds	r4, #4
 80166b2:	f04f 0b00 	mov.w	fp, #0
 80166b6:	9304      	str	r3, [sp, #16]
 80166b8:	9a04      	ldr	r2, [sp, #16]
 80166ba:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80166be:	fb13 f302 	smulbb	r3, r3, r2
 80166c2:	9a01      	ldr	r2, [sp, #4]
 80166c4:	b29b      	uxth	r3, r3
 80166c6:	1899      	adds	r1, r3, r2
 80166c8:	9305      	str	r3, [sp, #20]
 80166ca:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80166ce:	b209      	sxth	r1, r1
 80166d0:	4299      	cmp	r1, r3
 80166d2:	db4d      	blt.n	8016770 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80166d4:	8932      	ldrh	r2, [r6, #8]
 80166d6:	4413      	add	r3, r2
 80166d8:	b21b      	sxth	r3, r3
 80166da:	4299      	cmp	r1, r3
 80166dc:	da48      	bge.n	8016770 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80166de:	9b04      	ldr	r3, [sp, #16]
 80166e0:	6827      	ldr	r7, [r4, #0]
 80166e2:	fb17 f703 	smulbb	r7, r7, r3
 80166e6:	9b02      	ldr	r3, [sp, #8]
 80166e8:	b2bf      	uxth	r7, r7
 80166ea:	18fa      	adds	r2, r7, r3
 80166ec:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80166f0:	b212      	sxth	r2, r2
 80166f2:	429a      	cmp	r2, r3
 80166f4:	db3c      	blt.n	8016770 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80166f6:	8970      	ldrh	r0, [r6, #10]
 80166f8:	4403      	add	r3, r0
 80166fa:	b21b      	sxth	r3, r3
 80166fc:	429a      	cmp	r2, r3
 80166fe:	da37      	bge.n	8016770 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8016700:	2300      	movs	r3, #0
 8016702:	930b      	str	r3, [sp, #44]	; 0x2c
 8016704:	4630      	mov	r0, r6
 8016706:	ab0b      	add	r3, sp, #44	; 0x2c
 8016708:	f7ff ff36 	bl	8016578 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801670c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801670e:	b37a      	cbz	r2, 8016770 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8016710:	4552      	cmp	r2, sl
 8016712:	d02d      	beq.n	8016770 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8016714:	4611      	mov	r1, r2
 8016716:	a80e      	add	r0, sp, #56	; 0x38
 8016718:	9209      	str	r2, [sp, #36]	; 0x24
 801671a:	f005 ff27 	bl	801c56c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801671e:	9a06      	ldr	r2, [sp, #24]
 8016720:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8016724:	9b01      	ldr	r3, [sp, #4]
 8016726:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 801672a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 801672e:	4413      	add	r3, r2
 8016730:	f04f 0e02 	mov.w	lr, #2
 8016734:	fb91 f1fe 	sdiv	r1, r1, lr
 8016738:	4401      	add	r1, r0
 801673a:	1a58      	subs	r0, r3, r1
 801673c:	9a07      	ldr	r2, [sp, #28]
 801673e:	9b02      	ldr	r3, [sp, #8]
 8016740:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8016744:	fb9c fcfe 	sdiv	ip, ip, lr
 8016748:	4413      	add	r3, r2
 801674a:	448c      	add	ip, r1
 801674c:	eba3 030c 	sub.w	r3, r3, ip
 8016750:	435b      	muls	r3, r3
 8016752:	fb00 3300 	mla	r3, r0, r0, r3
 8016756:	42ab      	cmp	r3, r5
 8016758:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801675a:	d208      	bcs.n	801676e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 801675c:	9803      	ldr	r0, [sp, #12]
 801675e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016760:	6001      	str	r1, [r0, #0]
 8016762:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8016764:	9805      	ldr	r0, [sp, #20]
 8016766:	8008      	strh	r0, [r1, #0]
 8016768:	992b      	ldr	r1, [sp, #172]	; 0xac
 801676a:	461d      	mov	r5, r3
 801676c:	800f      	strh	r7, [r1, #0]
 801676e:	4692      	mov	sl, r2
 8016770:	f10b 0b01 	add.w	fp, fp, #1
 8016774:	f1bb 0f04 	cmp.w	fp, #4
 8016778:	f104 0408 	add.w	r4, r4, #8
 801677c:	d19c      	bne.n	80166b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 801677e:	9b00      	ldr	r3, [sp, #0]
 8016780:	9c08      	ldr	r4, [sp, #32]
 8016782:	444b      	add	r3, r9
 8016784:	4544      	cmp	r4, r8
 8016786:	9300      	str	r3, [sp, #0]
 8016788:	d187      	bne.n	801669a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 801678a:	b021      	add	sp, #132	; 0x84
 801678c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016790:	f04f 35ff 	mov.w	r5, #4294967295
 8016794:	e766      	b.n	8016664 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8016796:	bf00      	nop
 8016798:	2000af48 	.word	0x2000af48
 801679c:	0802e5d0 	.word	0x0802e5d0

080167a0 <_ZN8touchgfx4RectaNERKS0_>:
 80167a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80167a4:	f9b1 7000 	ldrsh.w	r7, [r1]
 80167a8:	888c      	ldrh	r4, [r1, #4]
 80167aa:	f9b0 9000 	ldrsh.w	r9, [r0]
 80167ae:	443c      	add	r4, r7
 80167b0:	b2a4      	uxth	r4, r4
 80167b2:	fa0f f884 	sxth.w	r8, r4
 80167b6:	45c1      	cmp	r9, r8
 80167b8:	da2f      	bge.n	801681a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80167ba:	8882      	ldrh	r2, [r0, #4]
 80167bc:	444a      	add	r2, r9
 80167be:	b292      	uxth	r2, r2
 80167c0:	fa0f fe82 	sxth.w	lr, r2
 80167c4:	4577      	cmp	r7, lr
 80167c6:	da28      	bge.n	801681a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80167c8:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80167cc:	88cb      	ldrh	r3, [r1, #6]
 80167ce:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80167d2:	442b      	add	r3, r5
 80167d4:	b21b      	sxth	r3, r3
 80167d6:	429e      	cmp	r6, r3
 80167d8:	da1f      	bge.n	801681a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80167da:	88c3      	ldrh	r3, [r0, #6]
 80167dc:	4433      	add	r3, r6
 80167de:	b29b      	uxth	r3, r3
 80167e0:	fa0f fc83 	sxth.w	ip, r3
 80167e4:	4565      	cmp	r5, ip
 80167e6:	da18      	bge.n	801681a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80167e8:	454f      	cmp	r7, r9
 80167ea:	bfb8      	it	lt
 80167ec:	464f      	movlt	r7, r9
 80167ee:	42b5      	cmp	r5, r6
 80167f0:	bfb8      	it	lt
 80167f2:	4635      	movlt	r5, r6
 80167f4:	45f0      	cmp	r8, lr
 80167f6:	bfd8      	it	le
 80167f8:	4622      	movle	r2, r4
 80167fa:	1bd2      	subs	r2, r2, r7
 80167fc:	8082      	strh	r2, [r0, #4]
 80167fe:	884a      	ldrh	r2, [r1, #2]
 8016800:	88c9      	ldrh	r1, [r1, #6]
 8016802:	8007      	strh	r7, [r0, #0]
 8016804:	440a      	add	r2, r1
 8016806:	b292      	uxth	r2, r2
 8016808:	b211      	sxth	r1, r2
 801680a:	458c      	cmp	ip, r1
 801680c:	bfa8      	it	ge
 801680e:	4613      	movge	r3, r2
 8016810:	1b5b      	subs	r3, r3, r5
 8016812:	80c3      	strh	r3, [r0, #6]
 8016814:	8045      	strh	r5, [r0, #2]
 8016816:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801681a:	2300      	movs	r3, #0
 801681c:	8003      	strh	r3, [r0, #0]
 801681e:	8043      	strh	r3, [r0, #2]
 8016820:	8083      	strh	r3, [r0, #4]
 8016822:	80c3      	strh	r3, [r0, #6]
 8016824:	e7f7      	b.n	8016816 <_ZN8touchgfx4RectaNERKS0_+0x76>

08016826 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8016826:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801682a:	2b00      	cmp	r3, #0
 801682c:	dd06      	ble.n	801683c <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 801682e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8016832:	2800      	cmp	r0, #0
 8016834:	bfcc      	ite	gt
 8016836:	2000      	movgt	r0, #0
 8016838:	2001      	movle	r0, #1
 801683a:	4770      	bx	lr
 801683c:	2001      	movs	r0, #1
 801683e:	4770      	bx	lr

08016840 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8016840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016844:	2300      	movs	r3, #0
 8016846:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8016848:	8003      	strh	r3, [r0, #0]
 801684a:	4604      	mov	r4, r0
 801684c:	8043      	strh	r3, [r0, #2]
 801684e:	8083      	strh	r3, [r0, #4]
 8016850:	80c3      	strh	r3, [r0, #6]
 8016852:	2d00      	cmp	r5, #0
 8016854:	d040      	beq.n	80168d8 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8016856:	1d28      	adds	r0, r5, #4
 8016858:	f7ff ffe5 	bl	8016826 <_ZNK8touchgfx4Rect7isEmptyEv>
 801685c:	b988      	cbnz	r0, 8016882 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801685e:	4620      	mov	r0, r4
 8016860:	f7ff ffe1 	bl	8016826 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016864:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8016868:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801686c:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8016870:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8016874:	b138      	cbz	r0, 8016886 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8016876:	8022      	strh	r2, [r4, #0]
 8016878:	8063      	strh	r3, [r4, #2]
 801687a:	f8a4 e004 	strh.w	lr, [r4, #4]
 801687e:	f8a4 c006 	strh.w	ip, [r4, #6]
 8016882:	69ad      	ldr	r5, [r5, #24]
 8016884:	e7e5      	b.n	8016852 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8016886:	f9b4 0000 	ldrsh.w	r0, [r4]
 801688a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801688e:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8016892:	4290      	cmp	r0, r2
 8016894:	4607      	mov	r7, r0
 8016896:	bfa8      	it	ge
 8016898:	4617      	movge	r7, r2
 801689a:	4472      	add	r2, lr
 801689c:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80168a0:	8027      	strh	r7, [r4, #0]
 80168a2:	4299      	cmp	r1, r3
 80168a4:	460e      	mov	r6, r1
 80168a6:	4440      	add	r0, r8
 80168a8:	bfa8      	it	ge
 80168aa:	461e      	movge	r6, r3
 80168ac:	4471      	add	r1, lr
 80168ae:	4463      	add	r3, ip
 80168b0:	b200      	sxth	r0, r0
 80168b2:	b212      	sxth	r2, r2
 80168b4:	b209      	sxth	r1, r1
 80168b6:	b21b      	sxth	r3, r3
 80168b8:	4290      	cmp	r0, r2
 80168ba:	bfac      	ite	ge
 80168bc:	ebc7 0200 	rsbge	r2, r7, r0
 80168c0:	ebc7 0202 	rsblt	r2, r7, r2
 80168c4:	4299      	cmp	r1, r3
 80168c6:	bfac      	ite	ge
 80168c8:	ebc6 0301 	rsbge	r3, r6, r1
 80168cc:	ebc6 0303 	rsblt	r3, r6, r3
 80168d0:	8066      	strh	r6, [r4, #2]
 80168d2:	80a2      	strh	r2, [r4, #4]
 80168d4:	80e3      	strh	r3, [r4, #6]
 80168d6:	e7d4      	b.n	8016882 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80168d8:	4620      	mov	r0, r4
 80168da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080168de <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80168de:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80168e2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80168e6:	b383      	cbz	r3, 801694a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80168e8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80168ea:	b374      	cbz	r4, 801694a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80168ec:	f9b1 5000 	ldrsh.w	r5, [r1]
 80168f0:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80168f4:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80168f8:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80168fc:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8016900:	b303      	cbz	r3, 8016944 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8016902:	4668      	mov	r0, sp
 8016904:	1d21      	adds	r1, r4, #4
 8016906:	f8ad 5000 	strh.w	r5, [sp]
 801690a:	f8ad 6002 	strh.w	r6, [sp, #2]
 801690e:	f8ad 7004 	strh.w	r7, [sp, #4]
 8016912:	f8ad 8006 	strh.w	r8, [sp, #6]
 8016916:	f7ff ff43 	bl	80167a0 <_ZN8touchgfx4RectaNERKS0_>
 801691a:	4668      	mov	r0, sp
 801691c:	f7ff ff83 	bl	8016826 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016920:	b980      	cbnz	r0, 8016944 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8016922:	f8bd 3000 	ldrh.w	r3, [sp]
 8016926:	88a2      	ldrh	r2, [r4, #4]
 8016928:	1a9b      	subs	r3, r3, r2
 801692a:	f8ad 3000 	strh.w	r3, [sp]
 801692e:	88e2      	ldrh	r2, [r4, #6]
 8016930:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016934:	1a9b      	subs	r3, r3, r2
 8016936:	f8ad 3002 	strh.w	r3, [sp, #2]
 801693a:	6823      	ldr	r3, [r4, #0]
 801693c:	4669      	mov	r1, sp
 801693e:	689b      	ldr	r3, [r3, #8]
 8016940:	4620      	mov	r0, r4
 8016942:	4798      	blx	r3
 8016944:	69a4      	ldr	r4, [r4, #24]
 8016946:	2c00      	cmp	r4, #0
 8016948:	d1d8      	bne.n	80168fc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801694a:	b002      	add	sp, #8
 801694c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016950 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8016950:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016952:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8016956:	460d      	mov	r5, r1
 8016958:	4616      	mov	r6, r2
 801695a:	b323      	cbz	r3, 80169a6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801695c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801695e:	b314      	cbz	r4, 80169a6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8016960:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8016964:	b1eb      	cbz	r3, 80169a2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8016966:	6828      	ldr	r0, [r5, #0]
 8016968:	6869      	ldr	r1, [r5, #4]
 801696a:	466b      	mov	r3, sp
 801696c:	c303      	stmia	r3!, {r0, r1}
 801696e:	4668      	mov	r0, sp
 8016970:	1d21      	adds	r1, r4, #4
 8016972:	f7ff ff15 	bl	80167a0 <_ZN8touchgfx4RectaNERKS0_>
 8016976:	4668      	mov	r0, sp
 8016978:	f7ff ff55 	bl	8016826 <_ZNK8touchgfx4Rect7isEmptyEv>
 801697c:	b988      	cbnz	r0, 80169a2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801697e:	f8bd 3000 	ldrh.w	r3, [sp]
 8016982:	88a2      	ldrh	r2, [r4, #4]
 8016984:	1a9b      	subs	r3, r3, r2
 8016986:	f8ad 3000 	strh.w	r3, [sp]
 801698a:	88e2      	ldrh	r2, [r4, #6]
 801698c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016990:	1a9b      	subs	r3, r3, r2
 8016992:	f8ad 3002 	strh.w	r3, [sp, #2]
 8016996:	6823      	ldr	r3, [r4, #0]
 8016998:	4632      	mov	r2, r6
 801699a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801699c:	4669      	mov	r1, sp
 801699e:	4620      	mov	r0, r4
 80169a0:	4798      	blx	r3
 80169a2:	69a4      	ldr	r4, [r4, #24]
 80169a4:	e7db      	b.n	801695e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80169a6:	b002      	add	sp, #8
 80169a8:	bd70      	pop	{r4, r5, r6, pc}

080169aa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80169aa:	b513      	push	{r0, r1, r4, lr}
 80169ac:	6803      	ldr	r3, [r0, #0]
 80169ae:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 80169b2:	2300      	movs	r3, #0
 80169b4:	e9cd 3300 	strd	r3, r3, [sp]
 80169b8:	466b      	mov	r3, sp
 80169ba:	47a0      	blx	r4
 80169bc:	b002      	add	sp, #8
 80169be:	bd10      	pop	{r4, pc}

080169c0 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80169c0:	2301      	movs	r3, #1
 80169c2:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80169c6:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 80169ca:	4770      	bx	lr

080169cc <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80169cc:	2301      	movs	r3, #1
 80169ce:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80169d2:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 80169d6:	4770      	bx	lr

080169d8 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80169d8:	6843      	ldr	r3, [r0, #4]
 80169da:	2201      	movs	r2, #1
 80169dc:	725a      	strb	r2, [r3, #9]
 80169de:	6840      	ldr	r0, [r0, #4]
 80169e0:	6803      	ldr	r3, [r0, #0]
 80169e2:	691b      	ldr	r3, [r3, #16]
 80169e4:	4718      	bx	r3

080169e6 <_ZN8touchgfx3HAL8flushDMAEv>:
 80169e6:	6840      	ldr	r0, [r0, #4]
 80169e8:	6803      	ldr	r3, [r0, #0]
 80169ea:	689b      	ldr	r3, [r3, #8]
 80169ec:	4718      	bx	r3

080169ee <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80169ee:	b530      	push	{r4, r5, lr}
 80169f0:	b08b      	sub	sp, #44	; 0x2c
 80169f2:	6804      	ldr	r4, [r0, #0]
 80169f4:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 80169f8:	9509      	str	r5, [sp, #36]	; 0x24
 80169fa:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80169fe:	9508      	str	r5, [sp, #32]
 8016a00:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8016a04:	9507      	str	r5, [sp, #28]
 8016a06:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8016a0a:	9506      	str	r5, [sp, #24]
 8016a0c:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8016a10:	9505      	str	r5, [sp, #20]
 8016a12:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8016a16:	9504      	str	r5, [sp, #16]
 8016a18:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8016a1c:	9503      	str	r5, [sp, #12]
 8016a1e:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8016a22:	9502      	str	r5, [sp, #8]
 8016a24:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8016a28:	e9cd 3500 	strd	r3, r5, [sp]
 8016a2c:	4613      	mov	r3, r2
 8016a2e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8016a30:	2200      	movs	r2, #0
 8016a32:	47a0      	blx	r4
 8016a34:	b00b      	add	sp, #44	; 0x2c
 8016a36:	bd30      	pop	{r4, r5, pc}

08016a38 <_ZN8touchgfx3HAL10beginFrameEv>:
 8016a38:	4b04      	ldr	r3, [pc, #16]	; (8016a4c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8016a3a:	781b      	ldrb	r3, [r3, #0]
 8016a3c:	b123      	cbz	r3, 8016a48 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8016a3e:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
 8016a42:	f080 0001 	eor.w	r0, r0, #1
 8016a46:	4770      	bx	lr
 8016a48:	2001      	movs	r0, #1
 8016a4a:	4770      	bx	lr
 8016a4c:	2000af46 	.word	0x2000af46

08016a50 <_ZN8touchgfx3HAL8endFrameEv>:
 8016a50:	b510      	push	{r4, lr}
 8016a52:	4604      	mov	r4, r0
 8016a54:	6840      	ldr	r0, [r0, #4]
 8016a56:	6803      	ldr	r3, [r0, #0]
 8016a58:	689b      	ldr	r3, [r3, #8]
 8016a5a:	4798      	blx	r3
 8016a5c:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
 8016a60:	b113      	cbz	r3, 8016a68 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8016a62:	2301      	movs	r3, #1
 8016a64:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 8016a68:	bd10      	pop	{r4, pc}

08016a6a <_ZN8touchgfx3HAL10initializeEv>:
 8016a6a:	b510      	push	{r4, lr}
 8016a6c:	4604      	mov	r4, r0
 8016a6e:	f7fd fdc9 	bl	8014604 <_ZN8touchgfx10OSWrappers10initializeEv>
 8016a72:	f7fd fb0f 	bl	8014094 <_ZN8touchgfx4GPIO4initEv>
 8016a76:	6860      	ldr	r0, [r4, #4]
 8016a78:	6803      	ldr	r3, [r0, #0]
 8016a7a:	68db      	ldr	r3, [r3, #12]
 8016a7c:	4798      	blx	r3
 8016a7e:	68e0      	ldr	r0, [r4, #12]
 8016a80:	6803      	ldr	r3, [r0, #0]
 8016a82:	689b      	ldr	r3, [r3, #8]
 8016a84:	4798      	blx	r3
 8016a86:	6823      	ldr	r3, [r4, #0]
 8016a88:	4620      	mov	r0, r4
 8016a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a90:	4718      	bx	r3

08016a92 <_ZN8touchgfx3HAL9taskEntryEv>:
 8016a92:	b508      	push	{r3, lr}
 8016a94:	6803      	ldr	r3, [r0, #0]
 8016a96:	4604      	mov	r4, r0
 8016a98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016a9c:	4798      	blx	r3
 8016a9e:	6823      	ldr	r3, [r4, #0]
 8016aa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016aa2:	4620      	mov	r0, r4
 8016aa4:	4798      	blx	r3
 8016aa6:	f7fd fe13 	bl	80146d0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8016aaa:	6823      	ldr	r3, [r4, #0]
 8016aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016aae:	e7f8      	b.n	8016aa2 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08016ab0 <_ZN8touchgfx3HAL4tickEv>:
 8016ab0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8016ab2:	6803      	ldr	r3, [r0, #0]
 8016ab4:	4d5b      	ldr	r5, [pc, #364]	; (8016c24 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8016ab6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8016aba:	4604      	mov	r4, r0
 8016abc:	4798      	blx	r3
 8016abe:	2800      	cmp	r0, #0
 8016ac0:	f000 8095 	beq.w	8016bee <_ZN8touchgfx3HAL4tickEv+0x13e>
 8016ac4:	2001      	movs	r0, #1
 8016ac6:	f7fd faed 	bl	80140a4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8016aca:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 8016ace:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8016ad2:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
 8016ad6:	2600      	movs	r6, #0
 8016ad8:	f884 606a 	strb.w	r6, [r4, #106]	; 0x6a
 8016adc:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8016ae0:	b133      	cbz	r3, 8016af0 <_ZN8touchgfx3HAL4tickEv+0x40>
 8016ae2:	6823      	ldr	r3, [r4, #0]
 8016ae4:	4620      	mov	r0, r4
 8016ae6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8016aea:	4798      	blx	r3
 8016aec:	f884 6079 	strb.w	r6, [r4, #121]	; 0x79
 8016af0:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8016af4:	6862      	ldr	r2, [r4, #4]
 8016af6:	f083 0301 	eor.w	r3, r3, #1
 8016afa:	7253      	strb	r3, [r2, #9]
 8016afc:	2601      	movs	r6, #1
 8016afe:	702e      	strb	r6, [r5, #0]
 8016b00:	f004 fbd8 	bl	801b2b4 <_ZN8touchgfx11Application11getInstanceEv>
 8016b04:	6803      	ldr	r3, [r0, #0]
 8016b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016b08:	4798      	blx	r3
 8016b0a:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 8016b0e:	b90b      	cbnz	r3, 8016b14 <_ZN8touchgfx3HAL4tickEv+0x64>
 8016b10:	f884 606b 	strb.w	r6, [r4, #107]	; 0x6b
 8016b14:	f004 fbce 	bl	801b2b4 <_ZN8touchgfx11Application11getInstanceEv>
 8016b18:	6803      	ldr	r3, [r0, #0]
 8016b1a:	695b      	ldr	r3, [r3, #20]
 8016b1c:	4798      	blx	r3
 8016b1e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8016b20:	6803      	ldr	r3, [r0, #0]
 8016b22:	691b      	ldr	r3, [r3, #16]
 8016b24:	4798      	blx	r3
 8016b26:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 8016b2a:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
 8016b2e:	3b01      	subs	r3, #1
 8016b30:	b2db      	uxtb	r3, r3
 8016b32:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8016b36:	b10a      	cbz	r2, 8016b3c <_ZN8touchgfx3HAL4tickEv+0x8c>
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d1eb      	bne.n	8016b14 <_ZN8touchgfx3HAL4tickEv+0x64>
 8016b3c:	4a3a      	ldr	r2, [pc, #232]	; (8016c28 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8016b3e:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 8016b42:	7813      	ldrb	r3, [r2, #0]
 8016b44:	3301      	adds	r3, #1
 8016b46:	b25b      	sxtb	r3, r3
 8016b48:	4299      	cmp	r1, r3
 8016b4a:	7013      	strb	r3, [r2, #0]
 8016b4c:	dc10      	bgt.n	8016b70 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8016b4e:	68e0      	ldr	r0, [r4, #12]
 8016b50:	2300      	movs	r3, #0
 8016b52:	7013      	strb	r3, [r2, #0]
 8016b54:	6803      	ldr	r3, [r0, #0]
 8016b56:	aa03      	add	r2, sp, #12
 8016b58:	68db      	ldr	r3, [r3, #12]
 8016b5a:	a902      	add	r1, sp, #8
 8016b5c:	4798      	blx	r3
 8016b5e:	6823      	ldr	r3, [r4, #0]
 8016b60:	2800      	cmp	r0, #0
 8016b62:	d050      	beq.n	8016c06 <_ZN8touchgfx3HAL4tickEv+0x156>
 8016b64:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8016b68:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8016b6c:	4620      	mov	r0, r4
 8016b6e:	4798      	blx	r3
 8016b70:	6960      	ldr	r0, [r4, #20]
 8016b72:	2300      	movs	r3, #0
 8016b74:	f88d 3007 	strb.w	r3, [sp, #7]
 8016b78:	b158      	cbz	r0, 8016b92 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8016b7a:	6803      	ldr	r3, [r0, #0]
 8016b7c:	f10d 0107 	add.w	r1, sp, #7
 8016b80:	68db      	ldr	r3, [r3, #12]
 8016b82:	4798      	blx	r3
 8016b84:	b128      	cbz	r0, 8016b92 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8016b86:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8016b88:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8016b8c:	6803      	ldr	r3, [r0, #0]
 8016b8e:	68db      	ldr	r3, [r3, #12]
 8016b90:	4798      	blx	r3
 8016b92:	f104 001c 	add.w	r0, r4, #28
 8016b96:	f014 fdf7 	bl	802b788 <_ZN8touchgfx8Gestures4tickEv>
 8016b9a:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8016b9e:	b30b      	cbz	r3, 8016be4 <_ZN8touchgfx3HAL4tickEv+0x134>
 8016ba0:	6920      	ldr	r0, [r4, #16]
 8016ba2:	6803      	ldr	r3, [r0, #0]
 8016ba4:	691b      	ldr	r3, [r3, #16]
 8016ba6:	4798      	blx	r3
 8016ba8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8016baa:	4606      	mov	r6, r0
 8016bac:	b903      	cbnz	r3, 8016bb0 <_ZN8touchgfx3HAL4tickEv+0x100>
 8016bae:	6760      	str	r0, [r4, #116]	; 0x74
 8016bb0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8016bb2:	4a1e      	ldr	r2, [pc, #120]	; (8016c2c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8016bb4:	1af3      	subs	r3, r6, r3
 8016bb6:	4293      	cmp	r3, r2
 8016bb8:	d914      	bls.n	8016be4 <_ZN8touchgfx3HAL4tickEv+0x134>
 8016bba:	6920      	ldr	r0, [r4, #16]
 8016bbc:	6803      	ldr	r3, [r0, #0]
 8016bbe:	699b      	ldr	r3, [r3, #24]
 8016bc0:	4798      	blx	r3
 8016bc2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8016bc4:	2264      	movs	r2, #100	; 0x64
 8016bc6:	1af3      	subs	r3, r6, r3
 8016bc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8016bcc:	fbb0 f0f3 	udiv	r0, r0, r3
 8016bd0:	2800      	cmp	r0, #0
 8016bd2:	dc1d      	bgt.n	8016c10 <_ZN8touchgfx3HAL4tickEv+0x160>
 8016bd4:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
 8016bd8:	6920      	ldr	r0, [r4, #16]
 8016bda:	6803      	ldr	r3, [r0, #0]
 8016bdc:	2100      	movs	r1, #0
 8016bde:	69db      	ldr	r3, [r3, #28]
 8016be0:	4798      	blx	r3
 8016be2:	6766      	str	r6, [r4, #116]	; 0x74
 8016be4:	f004 fb66 	bl	801b2b4 <_ZN8touchgfx11Application11getInstanceEv>
 8016be8:	6803      	ldr	r3, [r0, #0]
 8016bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016bec:	4798      	blx	r3
 8016bee:	6823      	ldr	r3, [r4, #0]
 8016bf0:	4620      	mov	r0, r4
 8016bf2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016bf6:	4798      	blx	r3
 8016bf8:	2001      	movs	r0, #1
 8016bfa:	f7fd fa6f 	bl	80140dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8016bfe:	2300      	movs	r3, #0
 8016c00:	702b      	strb	r3, [r5, #0]
 8016c02:	b004      	add	sp, #16
 8016c04:	bd70      	pop	{r4, r5, r6, pc}
 8016c06:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8016c0a:	4620      	mov	r0, r4
 8016c0c:	4798      	blx	r3
 8016c0e:	e7af      	b.n	8016b70 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8016c10:	2863      	cmp	r0, #99	; 0x63
 8016c12:	bfcb      	itete	gt
 8016c14:	2300      	movgt	r3, #0
 8016c16:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8016c1a:	f884 3069 	strbgt.w	r3, [r4, #105]	; 0x69
 8016c1e:	f884 0069 	strble.w	r0, [r4, #105]	; 0x69
 8016c22:	e7d9      	b.n	8016bd8 <_ZN8touchgfx3HAL4tickEv+0x128>
 8016c24:	2000af4c 	.word	0x2000af4c
 8016c28:	2000af4d 	.word	0x2000af4d
 8016c2c:	05f5e100 	.word	0x05f5e100

08016c30 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8016c30:	b510      	push	{r4, lr}
 8016c32:	4604      	mov	r4, r0
 8016c34:	f7fd fd28 	bl	8014688 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8016c38:	6863      	ldr	r3, [r4, #4]
 8016c3a:	2200      	movs	r2, #0
 8016c3c:	729a      	strb	r2, [r3, #10]
 8016c3e:	bd10      	pop	{r4, pc}

08016c40 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8016c40:	65c1      	str	r1, [r0, #92]	; 0x5c
 8016c42:	301c      	adds	r0, #28
 8016c44:	f014 bd9e 	b.w	802b784 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08016c48 <_ZN8touchgfx3HAL5touchEll>:
 8016c48:	b530      	push	{r4, r5, lr}
 8016c4a:	b087      	sub	sp, #28
 8016c4c:	4604      	mov	r4, r0
 8016c4e:	a804      	add	r0, sp, #16
 8016c50:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8016c54:	f004 f904 	bl	801ae60 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8016c58:	9b04      	ldr	r3, [sp, #16]
 8016c5a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016c5e:	a906      	add	r1, sp, #24
 8016c60:	9b05      	ldr	r3, [sp, #20]
 8016c62:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8016c66:	a803      	add	r0, sp, #12
 8016c68:	f004 f94c 	bl	801af04 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8016c6c:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
 8016c70:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8016c74:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8016c78:	f104 001c 	add.w	r0, r4, #28
 8016c7c:	b189      	cbz	r1, 8016ca2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8016c7e:	f8b4 5064 	ldrh.w	r5, [r4, #100]	; 0x64
 8016c82:	9300      	str	r3, [sp, #0]
 8016c84:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8016c88:	4613      	mov	r3, r2
 8016c8a:	462a      	mov	r2, r5
 8016c8c:	f014 fd8a 	bl	802b7a4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8016c90:	b128      	cbz	r0, 8016c9e <_ZN8touchgfx3HAL5touchEll+0x56>
 8016c92:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8016c96:	6623      	str	r3, [r4, #96]	; 0x60
 8016c98:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8016c9c:	6663      	str	r3, [r4, #100]	; 0x64
 8016c9e:	b007      	add	sp, #28
 8016ca0:	bd30      	pop	{r4, r5, pc}
 8016ca2:	f014 fdbf 	bl	802b824 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8016ca6:	2301      	movs	r3, #1
 8016ca8:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 8016cac:	e7f1      	b.n	8016c92 <_ZN8touchgfx3HAL5touchEll+0x4a>

08016cae <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8016cae:	b510      	push	{r4, lr}
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d046      	beq.n	8016d42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8016cb4:	ea81 0002 	eor.w	r0, r1, r2
 8016cb8:	07c4      	lsls	r4, r0, #31
 8016cba:	d508      	bpl.n	8016cce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8016cbc:	440b      	add	r3, r1
 8016cbe:	3a01      	subs	r2, #1
 8016cc0:	428b      	cmp	r3, r1
 8016cc2:	d93e      	bls.n	8016d42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8016cc4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8016cc8:	f801 0b01 	strb.w	r0, [r1], #1
 8016ccc:	e7f8      	b.n	8016cc0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8016cce:	07d0      	lsls	r0, r2, #31
 8016cd0:	bf42      	ittt	mi
 8016cd2:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8016cd6:	f801 0b01 	strbmi.w	r0, [r1], #1
 8016cda:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8016cde:	2b01      	cmp	r3, #1
 8016ce0:	d911      	bls.n	8016d06 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8016ce2:	ea81 0402 	eor.w	r4, r1, r2
 8016ce6:	07a4      	lsls	r4, r4, #30
 8016ce8:	4610      	mov	r0, r2
 8016cea:	d022      	beq.n	8016d32 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8016cec:	f023 0401 	bic.w	r4, r3, #1
 8016cf0:	440c      	add	r4, r1
 8016cf2:	428c      	cmp	r4, r1
 8016cf4:	4602      	mov	r2, r0
 8016cf6:	d904      	bls.n	8016d02 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8016cf8:	8812      	ldrh	r2, [r2, #0]
 8016cfa:	f821 2b02 	strh.w	r2, [r1], #2
 8016cfe:	3002      	adds	r0, #2
 8016d00:	e7f7      	b.n	8016cf2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8016d02:	f003 0301 	and.w	r3, r3, #1
 8016d06:	f023 0003 	bic.w	r0, r3, #3
 8016d0a:	4408      	add	r0, r1
 8016d0c:	4288      	cmp	r0, r1
 8016d0e:	4614      	mov	r4, r2
 8016d10:	d904      	bls.n	8016d1c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8016d12:	6824      	ldr	r4, [r4, #0]
 8016d14:	f841 4b04 	str.w	r4, [r1], #4
 8016d18:	3204      	adds	r2, #4
 8016d1a:	e7f7      	b.n	8016d0c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8016d1c:	f003 0303 	and.w	r3, r3, #3
 8016d20:	440b      	add	r3, r1
 8016d22:	3a01      	subs	r2, #1
 8016d24:	428b      	cmp	r3, r1
 8016d26:	d90c      	bls.n	8016d42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8016d28:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8016d2c:	f801 0b01 	strb.w	r0, [r1], #1
 8016d30:	e7f8      	b.n	8016d24 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8016d32:	0790      	lsls	r0, r2, #30
 8016d34:	d0e7      	beq.n	8016d06 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8016d36:	f832 0b02 	ldrh.w	r0, [r2], #2
 8016d3a:	f821 0b02 	strh.w	r0, [r1], #2
 8016d3e:	3b02      	subs	r3, #2
 8016d40:	e7e1      	b.n	8016d06 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8016d42:	2001      	movs	r0, #1
 8016d44:	bd10      	pop	{r4, pc}

08016d46 <_ZN8touchgfx3HAL7noTouchEv>:
 8016d46:	b510      	push	{r4, lr}
 8016d48:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 8016d4c:	4604      	mov	r4, r0
 8016d4e:	b153      	cbz	r3, 8016d66 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8016d50:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
 8016d54:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
 8016d58:	2101      	movs	r1, #1
 8016d5a:	301c      	adds	r0, #28
 8016d5c:	f014 fd62 	bl	802b824 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8016d60:	2300      	movs	r3, #0
 8016d62:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 8016d66:	bd10      	pop	{r4, pc}

08016d68 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8016d68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016d6c:	b085      	sub	sp, #20
 8016d6e:	ad04      	add	r5, sp, #16
 8016d70:	4604      	mov	r4, r0
 8016d72:	2000      	movs	r0, #0
 8016d74:	f845 0d04 	str.w	r0, [r5, #-4]!
 8016d78:	69a0      	ldr	r0, [r4, #24]
 8016d7a:	6806      	ldr	r6, [r0, #0]
 8016d7c:	9501      	str	r5, [sp, #4]
 8016d7e:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8016d82:	9500      	str	r5, [sp, #0]
 8016d84:	6835      	ldr	r5, [r6, #0]
 8016d86:	4699      	mov	r9, r3
 8016d88:	460f      	mov	r7, r1
 8016d8a:	4690      	mov	r8, r2
 8016d8c:	47a8      	blx	r5
 8016d8e:	4d10      	ldr	r5, [pc, #64]	; (8016dd0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8016d90:	4606      	mov	r6, r0
 8016d92:	f8a5 9000 	strh.w	r9, [r5]
 8016d96:	f7fb facd 	bl	8012334 <_ZN8touchgfx3HAL3lcdEv>
 8016d9a:	6803      	ldr	r3, [r0, #0]
 8016d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d9e:	4798      	blx	r3
 8016da0:	b128      	cbz	r0, 8016dae <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8016da2:	2801      	cmp	r0, #1
 8016da4:	d00b      	beq.n	8016dbe <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8016da6:	4630      	mov	r0, r6
 8016da8:	b005      	add	sp, #20
 8016daa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016dae:	882b      	ldrh	r3, [r5, #0]
 8016db0:	fb08 7203 	mla	r2, r8, r3, r7
 8016db4:	9b03      	ldr	r3, [sp, #12]
 8016db6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8016dba:	63e3      	str	r3, [r4, #60]	; 0x3c
 8016dbc:	e7f3      	b.n	8016da6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8016dbe:	882a      	ldrh	r2, [r5, #0]
 8016dc0:	9b03      	ldr	r3, [sp, #12]
 8016dc2:	fb08 7202 	mla	r2, r8, r2, r7
 8016dc6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016dca:	1a9a      	subs	r2, r3, r2
 8016dcc:	63e2      	str	r2, [r4, #60]	; 0x3c
 8016dce:	e7ea      	b.n	8016da6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8016dd0:	2000af42 	.word	0x2000af42

08016dd4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8016dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016dd6:	b08b      	sub	sp, #44	; 0x2c
 8016dd8:	4617      	mov	r7, r2
 8016dda:	4604      	mov	r4, r0
 8016ddc:	460e      	mov	r6, r1
 8016dde:	461d      	mov	r5, r3
 8016de0:	f7fb faa8 	bl	8012334 <_ZN8touchgfx3HAL3lcdEv>
 8016de4:	6803      	ldr	r3, [r0, #0]
 8016de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016de8:	4798      	blx	r3
 8016dea:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8016dee:	9007      	str	r0, [sp, #28]
 8016df0:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8016df4:	4b0d      	ldr	r3, [pc, #52]	; (8016e2c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8016df6:	6822      	ldr	r2, [r4, #0]
 8016df8:	881b      	ldrh	r3, [r3, #0]
 8016dfa:	9306      	str	r3, [sp, #24]
 8016dfc:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8016e00:	9305      	str	r3, [sp, #20]
 8016e02:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8016e06:	9304      	str	r3, [sp, #16]
 8016e08:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016e0c:	9303      	str	r3, [sp, #12]
 8016e0e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016e12:	9302      	str	r3, [sp, #8]
 8016e14:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016e18:	e9cd 5300 	strd	r5, r3, [sp]
 8016e1c:	4631      	mov	r1, r6
 8016e1e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8016e20:	463b      	mov	r3, r7
 8016e22:	2200      	movs	r2, #0
 8016e24:	4620      	mov	r0, r4
 8016e26:	47a8      	blx	r5
 8016e28:	b00b      	add	sp, #44	; 0x2c
 8016e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e2c:	2000af42 	.word	0x2000af42

08016e30 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8016e30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016e34:	4698      	mov	r8, r3
 8016e36:	6803      	ldr	r3, [r0, #0]
 8016e38:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8016e3a:	4b15      	ldr	r3, [pc, #84]	; (8016e90 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8016e3c:	b08b      	sub	sp, #44	; 0x2c
 8016e3e:	4617      	mov	r7, r2
 8016e40:	f8b3 9000 	ldrh.w	r9, [r3]
 8016e44:	460e      	mov	r6, r1
 8016e46:	4604      	mov	r4, r0
 8016e48:	f7fb fa74 	bl	8012334 <_ZN8touchgfx3HAL3lcdEv>
 8016e4c:	6803      	ldr	r3, [r0, #0]
 8016e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e50:	4798      	blx	r3
 8016e52:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8016e56:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8016e5a:	2302      	movs	r3, #2
 8016e5c:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8016e60:	2301      	movs	r3, #1
 8016e62:	9305      	str	r3, [sp, #20]
 8016e64:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8016e68:	9304      	str	r3, [sp, #16]
 8016e6a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8016e6e:	9303      	str	r3, [sp, #12]
 8016e70:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8016e74:	9302      	str	r3, [sp, #8]
 8016e76:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016e7a:	2200      	movs	r2, #0
 8016e7c:	e9cd 8300 	strd	r8, r3, [sp]
 8016e80:	4631      	mov	r1, r6
 8016e82:	463b      	mov	r3, r7
 8016e84:	4620      	mov	r0, r4
 8016e86:	47a8      	blx	r5
 8016e88:	b00b      	add	sp, #44	; 0x2c
 8016e8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e8e:	bf00      	nop
 8016e90:	2000af42 	.word	0x2000af42

08016e94 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8016e94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016e98:	4698      	mov	r8, r3
 8016e9a:	6803      	ldr	r3, [r0, #0]
 8016e9c:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8016e9e:	4b11      	ldr	r3, [pc, #68]	; (8016ee4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8016ea0:	b087      	sub	sp, #28
 8016ea2:	f8b3 9000 	ldrh.w	r9, [r3]
 8016ea6:	460e      	mov	r6, r1
 8016ea8:	4617      	mov	r7, r2
 8016eaa:	4604      	mov	r4, r0
 8016eac:	f7fb fa42 	bl	8012334 <_ZN8touchgfx3HAL3lcdEv>
 8016eb0:	6803      	ldr	r3, [r0, #0]
 8016eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016eb4:	4798      	blx	r3
 8016eb6:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8016eba:	f8cd 900c 	str.w	r9, [sp, #12]
 8016ebe:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8016ec2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8016ec6:	9302      	str	r3, [sp, #8]
 8016ec8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8016ecc:	9301      	str	r3, [sp, #4]
 8016ece:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8016ed2:	9300      	str	r3, [sp, #0]
 8016ed4:	463a      	mov	r2, r7
 8016ed6:	4643      	mov	r3, r8
 8016ed8:	4631      	mov	r1, r6
 8016eda:	4620      	mov	r0, r4
 8016edc:	47a8      	blx	r5
 8016ede:	b007      	add	sp, #28
 8016ee0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ee4:	2000af42 	.word	0x2000af42

08016ee8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8016ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016eec:	4604      	mov	r4, r0
 8016eee:	b08f      	sub	sp, #60	; 0x3c
 8016ef0:	4610      	mov	r0, r2
 8016ef2:	460d      	mov	r5, r1
 8016ef4:	4691      	mov	r9, r2
 8016ef6:	461e      	mov	r6, r3
 8016ef8:	f007 f836 	bl	801df68 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8016efc:	2800      	cmp	r0, #0
 8016efe:	f000 809d 	beq.w	801703c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8016f02:	6823      	ldr	r3, [r4, #0]
 8016f04:	f8df b198 	ldr.w	fp, [pc, #408]	; 80170a0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8016f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016f0a:	f8df a198 	ldr.w	sl, [pc, #408]	; 80170a4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8016f0e:	4f61      	ldr	r7, [pc, #388]	; (8017094 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8016f10:	4620      	mov	r0, r4
 8016f12:	4798      	blx	r3
 8016f14:	6823      	ldr	r3, [r4, #0]
 8016f16:	4620      	mov	r0, r4
 8016f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f1a:	4798      	blx	r3
 8016f1c:	f8bb 3000 	ldrh.w	r3, [fp]
 8016f20:	9301      	str	r3, [sp, #4]
 8016f22:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8016f26:	f8ba 3000 	ldrh.w	r3, [sl]
 8016f2a:	9302      	str	r3, [sp, #8]
 8016f2c:	883b      	ldrh	r3, [r7, #0]
 8016f2e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8016f32:	9303      	str	r3, [sp, #12]
 8016f34:	4b58      	ldr	r3, [pc, #352]	; (8017098 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8016f36:	9305      	str	r3, [sp, #20]
 8016f38:	881a      	ldrh	r2, [r3, #0]
 8016f3a:	9204      	str	r2, [sp, #16]
 8016f3c:	4640      	mov	r0, r8
 8016f3e:	f007 f8a7 	bl	801e090 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016f42:	8038      	strh	r0, [r7, #0]
 8016f44:	4640      	mov	r0, r8
 8016f46:	f007 f8d7 	bl	801e0f8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016f4a:	9b05      	ldr	r3, [sp, #20]
 8016f4c:	b280      	uxth	r0, r0
 8016f4e:	8018      	strh	r0, [r3, #0]
 8016f50:	4b52      	ldr	r3, [pc, #328]	; (801709c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8016f52:	781b      	ldrb	r3, [r3, #0]
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d174      	bne.n	8017042 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8016f58:	883b      	ldrh	r3, [r7, #0]
 8016f5a:	f8ab 3000 	strh.w	r3, [fp]
 8016f5e:	f8aa 0000 	strh.w	r0, [sl]
 8016f62:	4648      	mov	r0, r9
 8016f64:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8016f68:	f006 fffe 	bl	801df68 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8016f6c:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8016f70:	2200      	movs	r2, #0
 8016f72:	4611      	mov	r1, r2
 8016f74:	4628      	mov	r0, r5
 8016f76:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8016f7a:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8016f7e:	f7fb ff38 	bl	8012df2 <_ZN8touchgfx8Drawable5setXYEss>
 8016f82:	2301      	movs	r3, #1
 8016f84:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8016f88:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8016f8c:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	dd5c      	ble.n	801704e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8016f94:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	dd58      	ble.n	801704e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8016f9c:	462a      	mov	r2, r5
 8016f9e:	ab0a      	add	r3, sp, #40	; 0x28
 8016fa0:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8016fa4:	6851      	ldr	r1, [r2, #4]
 8016fa6:	c303      	stmia	r3!, {r0, r1}
 8016fa8:	4631      	mov	r1, r6
 8016faa:	a80a      	add	r0, sp, #40	; 0x28
 8016fac:	f7ff fbf8 	bl	80167a0 <_ZN8touchgfx4RectaNERKS0_>
 8016fb0:	4b38      	ldr	r3, [pc, #224]	; (8017094 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8016fb2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016fb6:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8016fba:	2100      	movs	r1, #0
 8016fbc:	aa0a      	add	r2, sp, #40	; 0x28
 8016fbe:	4b36      	ldr	r3, [pc, #216]	; (8017098 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8016fc0:	910c      	str	r1, [sp, #48]	; 0x30
 8016fc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016fc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016fca:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8016fce:	ab08      	add	r3, sp, #32
 8016fd0:	e883 0003 	stmia.w	r3, {r0, r1}
 8016fd4:	4618      	mov	r0, r3
 8016fd6:	a90c      	add	r1, sp, #48	; 0x30
 8016fd8:	f7ff fbe2 	bl	80167a0 <_ZN8touchgfx4RectaNERKS0_>
 8016fdc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d13c      	bne.n	801705c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8016fe2:	2000      	movs	r0, #0
 8016fe4:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
 8016fe8:	2600      	movs	r6, #0
 8016fea:	682a      	ldr	r2, [r5, #0]
 8016fec:	696b      	ldr	r3, [r5, #20]
 8016fee:	616e      	str	r6, [r5, #20]
 8016ff0:	9305      	str	r3, [sp, #20]
 8016ff2:	6892      	ldr	r2, [r2, #8]
 8016ff4:	a908      	add	r1, sp, #32
 8016ff6:	4628      	mov	r0, r5
 8016ff8:	4790      	blx	r2
 8016ffa:	9b05      	ldr	r3, [sp, #20]
 8016ffc:	616b      	str	r3, [r5, #20]
 8016ffe:	4652      	mov	r2, sl
 8017000:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
 8017004:	4649      	mov	r1, r9
 8017006:	4628      	mov	r0, r5
 8017008:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 801700c:	f7fb fef1 	bl	8012df2 <_ZN8touchgfx8Drawable5setXYEss>
 8017010:	4b23      	ldr	r3, [pc, #140]	; (80170a0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8017012:	9a01      	ldr	r2, [sp, #4]
 8017014:	801a      	strh	r2, [r3, #0]
 8017016:	4b23      	ldr	r3, [pc, #140]	; (80170a4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8017018:	9a02      	ldr	r2, [sp, #8]
 801701a:	801a      	strh	r2, [r3, #0]
 801701c:	4b1d      	ldr	r3, [pc, #116]	; (8017094 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801701e:	9a03      	ldr	r2, [sp, #12]
 8017020:	801a      	strh	r2, [r3, #0]
 8017022:	4b1d      	ldr	r3, [pc, #116]	; (8017098 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8017024:	9a04      	ldr	r2, [sp, #16]
 8017026:	801a      	strh	r2, [r3, #0]
 8017028:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 801702c:	6823      	ldr	r3, [r4, #0]
 801702e:	4620      	mov	r0, r4
 8017030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017032:	4798      	blx	r3
 8017034:	6823      	ldr	r3, [r4, #0]
 8017036:	4620      	mov	r0, r4
 8017038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801703a:	4798      	blx	r3
 801703c:	b00f      	add	sp, #60	; 0x3c
 801703e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017042:	883b      	ldrh	r3, [r7, #0]
 8017044:	f8ab 0000 	strh.w	r0, [fp]
 8017048:	f8aa 3000 	strh.w	r3, [sl]
 801704c:	e789      	b.n	8016f62 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 801704e:	462a      	mov	r2, r5
 8017050:	ab0a      	add	r3, sp, #40	; 0x28
 8017052:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8017056:	6851      	ldr	r1, [r2, #4]
 8017058:	c303      	stmia	r3!, {r0, r1}
 801705a:	e7a9      	b.n	8016fb0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 801705c:	a807      	add	r0, sp, #28
 801705e:	f007 f987 	bl	801e370 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017062:	4606      	mov	r6, r0
 8017064:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8017066:	6803      	ldr	r3, [r0, #0]
 8017068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801706a:	4798      	blx	r3
 801706c:	4286      	cmp	r6, r0
 801706e:	d1b8      	bne.n	8016fe2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8017070:	f7fb f960 	bl	8012334 <_ZN8touchgfx3HAL3lcdEv>
 8017074:	6803      	ldr	r3, [r0, #0]
 8017076:	4606      	mov	r6, r0
 8017078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801707a:	9305      	str	r3, [sp, #20]
 801707c:	a807      	add	r0, sp, #28
 801707e:	f007 f977 	bl	801e370 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017082:	9b05      	ldr	r3, [sp, #20]
 8017084:	4601      	mov	r1, r0
 8017086:	4630      	mov	r0, r6
 8017088:	4798      	blx	r3
 801708a:	f080 0001 	eor.w	r0, r0, #1
 801708e:	b2c0      	uxtb	r0, r0
 8017090:	e7a8      	b.n	8016fe4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8017092:	bf00      	nop
 8017094:	2000af3c 	.word	0x2000af3c
 8017098:	2000af3e 	.word	0x2000af3e
 801709c:	2000af40 	.word	0x2000af40
 80170a0:	2000af42 	.word	0x2000af42
 80170a4:	2000af44 	.word	0x2000af44

080170a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80170a8:	b510      	push	{r4, lr}
 80170aa:	4b07      	ldr	r3, [pc, #28]	; (80170c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80170ac:	781b      	ldrb	r3, [r3, #0]
 80170ae:	4604      	mov	r4, r0
 80170b0:	b13b      	cbz	r3, 80170c2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80170b2:	6803      	ldr	r3, [r0, #0]
 80170b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80170b6:	4798      	blx	r3
 80170b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80170ba:	4283      	cmp	r3, r0
 80170bc:	d101      	bne.n	80170c2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80170be:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80170c0:	bd10      	pop	{r4, pc}
 80170c2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80170c4:	e7fc      	b.n	80170c0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80170c6:	bf00      	nop
 80170c8:	2000af46 	.word	0x2000af46

080170cc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 80170cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170d0:	b08a      	sub	sp, #40	; 0x28
 80170d2:	461d      	mov	r5, r3
 80170d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80170d8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80170dc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80170e0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80170e4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80170e8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80170ec:	2400      	movs	r4, #0
 80170ee:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80170f2:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80170f6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80170fa:	4690      	mov	r8, r2
 80170fc:	4607      	mov	r7, r0
 80170fe:	9404      	str	r4, [sp, #16]
 8017100:	f88d 4020 	strb.w	r4, [sp, #32]
 8017104:	f7ff ffd0 	bl	80170a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017108:	fb06 8505 	mla	r5, r6, r5, r8
 801710c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8017110:	6878      	ldr	r0, [r7, #4]
 8017112:	9505      	str	r5, [sp, #20]
 8017114:	f8ad 601e 	strh.w	r6, [sp, #30]
 8017118:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801711c:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8017120:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8017124:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8017128:	6803      	ldr	r3, [r0, #0]
 801712a:	a901      	add	r1, sp, #4
 801712c:	685b      	ldr	r3, [r3, #4]
 801712e:	4798      	blx	r3
 8017130:	b00a      	add	sp, #40	; 0x28
 8017132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017136 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8017136:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801713a:	b08b      	sub	sp, #44	; 0x2c
 801713c:	2400      	movs	r4, #0
 801713e:	461d      	mov	r5, r3
 8017140:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017144:	4688      	mov	r8, r1
 8017146:	4691      	mov	r9, r2
 8017148:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 801714c:	9404      	str	r4, [sp, #16]
 801714e:	4607      	mov	r7, r0
 8017150:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017154:	f7ff ffa8 	bl	80170a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017158:	fb06 9505 	mla	r5, r6, r5, r9
 801715c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017160:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017164:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8017168:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801716c:	6878      	ldr	r0, [r7, #4]
 801716e:	9505      	str	r5, [sp, #20]
 8017170:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017174:	f8ad 401c 	strh.w	r4, [sp, #28]
 8017178:	f8ad 601e 	strh.w	r6, [sp, #30]
 801717c:	f8cd 8010 	str.w	r8, [sp, #16]
 8017180:	f8ad 4020 	strh.w	r4, [sp, #32]
 8017184:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8017188:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 801718c:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8017190:	6803      	ldr	r3, [r0, #0]
 8017192:	a901      	add	r1, sp, #4
 8017194:	685b      	ldr	r3, [r3, #4]
 8017196:	4798      	blx	r3
 8017198:	b00b      	add	sp, #44	; 0x2c
 801719a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080171a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80171a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171a4:	b08a      	sub	sp, #40	; 0x28
 80171a6:	4698      	mov	r8, r3
 80171a8:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 80171ac:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 80171b0:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 80171b4:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 80171b8:	2300      	movs	r3, #0
 80171ba:	2d0b      	cmp	r5, #11
 80171bc:	4606      	mov	r6, r0
 80171be:	9304      	str	r3, [sp, #16]
 80171c0:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 80171c4:	d138      	bne.n	8017238 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x98>
 80171c6:	2380      	movs	r3, #128	; 0x80
 80171c8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80171cc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80171d0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80171d4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80171d8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80171dc:	f88d 0020 	strb.w	r0, [sp, #32]
 80171e0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80171e4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80171e8:	4630      	mov	r0, r6
 80171ea:	9203      	str	r2, [sp, #12]
 80171ec:	f7ff ff5c 	bl	80170a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80171f0:	2c0b      	cmp	r4, #11
 80171f2:	bf98      	it	ls
 80171f4:	4b1b      	ldrls	r3, [pc, #108]	; (8017264 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 80171f6:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80171fa:	bf98      	it	ls
 80171fc:	5d19      	ldrbls	r1, [r3, r4]
 80171fe:	f8ad 701e 	strh.w	r7, [sp, #30]
 8017202:	bf88      	it	hi
 8017204:	2100      	movhi	r1, #0
 8017206:	fb02 8307 	mla	r3, r2, r7, r8
 801720a:	10c9      	asrs	r1, r1, #3
 801720c:	fb01 0003 	mla	r0, r1, r3, r0
 8017210:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8017214:	9005      	str	r0, [sp, #20]
 8017216:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801721a:	6870      	ldr	r0, [r6, #4]
 801721c:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8017220:	2300      	movs	r3, #0
 8017222:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8017226:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801722a:	6803      	ldr	r3, [r0, #0]
 801722c:	a901      	add	r1, sp, #4
 801722e:	685b      	ldr	r3, [r3, #4]
 8017230:	4798      	blx	r3
 8017232:	b00a      	add	sp, #40	; 0x28
 8017234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017238:	2d02      	cmp	r5, #2
 801723a:	d109      	bne.n	8017250 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb0>
 801723c:	28ff      	cmp	r0, #255	; 0xff
 801723e:	d105      	bne.n	801724c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xac>
 8017240:	f1bc 0f00 	cmp.w	ip, #0
 8017244:	bf14      	ite	ne
 8017246:	2340      	movne	r3, #64	; 0x40
 8017248:	2320      	moveq	r3, #32
 801724a:	e7bd      	b.n	80171c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801724c:	2340      	movs	r3, #64	; 0x40
 801724e:	e7bb      	b.n	80171c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8017250:	28ff      	cmp	r0, #255	; 0xff
 8017252:	d105      	bne.n	8017260 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc0>
 8017254:	f1bc 0f00 	cmp.w	ip, #0
 8017258:	bf14      	ite	ne
 801725a:	2304      	movne	r3, #4
 801725c:	2301      	moveq	r3, #1
 801725e:	e7b3      	b.n	80171c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8017260:	2304      	movs	r3, #4
 8017262:	e7b1      	b.n	80171c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8017264:	0802ef58 	.word	0x0802ef58

08017268 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8017268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801726c:	b08b      	sub	sp, #44	; 0x2c
 801726e:	461d      	mov	r5, r3
 8017270:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8017274:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8017278:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 801727c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8017280:	bf14      	ite	ne
 8017282:	2308      	movne	r3, #8
 8017284:	2302      	moveq	r3, #2
 8017286:	2400      	movs	r4, #0
 8017288:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801728c:	4688      	mov	r8, r1
 801728e:	4693      	mov	fp, r2
 8017290:	9404      	str	r4, [sp, #16]
 8017292:	4607      	mov	r7, r0
 8017294:	f7ff ff08 	bl	80170a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017298:	2e0b      	cmp	r6, #11
 801729a:	bf98      	it	ls
 801729c:	4b15      	ldrls	r3, [pc, #84]	; (80172f4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 801729e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80172a2:	bf98      	it	ls
 80172a4:	5d9c      	ldrbls	r4, [r3, r6]
 80172a6:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80172aa:	f8ad 3018 	strh.w	r3, [sp, #24]
 80172ae:	fb05 b50a 	mla	r5, r5, sl, fp
 80172b2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80172b6:	f8ad 301a 	strh.w	r3, [sp, #26]
 80172ba:	10e4      	asrs	r4, r4, #3
 80172bc:	fb04 0405 	mla	r4, r4, r5, r0
 80172c0:	2300      	movs	r3, #0
 80172c2:	6878      	ldr	r0, [r7, #4]
 80172c4:	9405      	str	r4, [sp, #20]
 80172c6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80172ca:	f8ad a01e 	strh.w	sl, [sp, #30]
 80172ce:	f8cd 8010 	str.w	r8, [sp, #16]
 80172d2:	f88d 9020 	strb.w	r9, [sp, #32]
 80172d6:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 80172da:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80172de:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 80172e2:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 80172e6:	6803      	ldr	r3, [r0, #0]
 80172e8:	a901      	add	r1, sp, #4
 80172ea:	685b      	ldr	r3, [r3, #4]
 80172ec:	4798      	blx	r3
 80172ee:	b00b      	add	sp, #44	; 0x2c
 80172f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172f4:	0802ef58 	.word	0x0802ef58

080172f8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80172f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172fc:	461e      	mov	r6, r3
 80172fe:	4b0a      	ldr	r3, [pc, #40]	; (8017328 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8017300:	460f      	mov	r7, r1
 8017302:	881d      	ldrh	r5, [r3, #0]
 8017304:	4690      	mov	r8, r2
 8017306:	f7fb f815 	bl	8012334 <_ZN8touchgfx3HAL3lcdEv>
 801730a:	6803      	ldr	r3, [r0, #0]
 801730c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801730e:	4798      	blx	r3
 8017310:	280b      	cmp	r0, #11
 8017312:	bf9a      	itte	ls
 8017314:	4b05      	ldrls	r3, [pc, #20]	; (801732c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8017316:	5c1c      	ldrbls	r4, [r3, r0]
 8017318:	2400      	movhi	r4, #0
 801731a:	fb08 7005 	mla	r0, r8, r5, r7
 801731e:	10e4      	asrs	r4, r4, #3
 8017320:	fb04 6000 	mla	r0, r4, r0, r6
 8017324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017328:	2000af42 	.word	0x2000af42
 801732c:	0802ef58 	.word	0x0802ef58

08017330 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8017330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017332:	b08b      	sub	sp, #44	; 0x2c
 8017334:	461f      	mov	r7, r3
 8017336:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801733a:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801733e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017342:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017346:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801734a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801734e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017352:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017356:	2500      	movs	r5, #0
 8017358:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801735c:	f88d 3020 	strb.w	r3, [sp, #32]
 8017360:	4604      	mov	r4, r0
 8017362:	4616      	mov	r6, r2
 8017364:	9504      	str	r5, [sp, #16]
 8017366:	f7ff fe9f 	bl	80170a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801736a:	463a      	mov	r2, r7
 801736c:	4631      	mov	r1, r6
 801736e:	4603      	mov	r3, r0
 8017370:	4620      	mov	r0, r4
 8017372:	f7ff ffc1 	bl	80172f8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8017376:	4b0e      	ldr	r3, [pc, #56]	; (80173b0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8017378:	9005      	str	r0, [sp, #20]
 801737a:	881b      	ldrh	r3, [r3, #0]
 801737c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8017380:	f7fa ffd8 	bl	8012334 <_ZN8touchgfx3HAL3lcdEv>
 8017384:	6803      	ldr	r3, [r0, #0]
 8017386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017388:	4798      	blx	r3
 801738a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801738c:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8017390:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8017394:	9304      	str	r3, [sp, #16]
 8017396:	6860      	ldr	r0, [r4, #4]
 8017398:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801739c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80173a0:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 80173a4:	6803      	ldr	r3, [r0, #0]
 80173a6:	a901      	add	r1, sp, #4
 80173a8:	685b      	ldr	r3, [r3, #4]
 80173aa:	4798      	blx	r3
 80173ac:	b00b      	add	sp, #44	; 0x2c
 80173ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80173b0:	2000af42 	.word	0x2000af42

080173b4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80173b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80173b6:	b08d      	sub	sp, #52	; 0x34
 80173b8:	466b      	mov	r3, sp
 80173ba:	e883 0006 	stmia.w	r3, {r1, r2}
 80173be:	2300      	movs	r3, #0
 80173c0:	9306      	str	r3, [sp, #24]
 80173c2:	6803      	ldr	r3, [r0, #0]
 80173c4:	f8bd 6000 	ldrh.w	r6, [sp]
 80173c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173ca:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80173ce:	2501      	movs	r5, #1
 80173d0:	9503      	str	r5, [sp, #12]
 80173d2:	4604      	mov	r4, r0
 80173d4:	4798      	blx	r3
 80173d6:	463a      	mov	r2, r7
 80173d8:	4631      	mov	r1, r6
 80173da:	4603      	mov	r3, r0
 80173dc:	4620      	mov	r0, r4
 80173de:	f7ff ff8b 	bl	80172f8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80173e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80173e4:	9307      	str	r3, [sp, #28]
 80173e6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80173ea:	f8ad 3020 	strh.w	r3, [sp, #32]
 80173ee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80173f2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80173f6:	4b0f      	ldr	r3, [pc, #60]	; (8017434 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 80173f8:	9004      	str	r0, [sp, #16]
 80173fa:	881b      	ldrh	r3, [r3, #0]
 80173fc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8017400:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8017404:	f7fa ff96 	bl	8012334 <_ZN8touchgfx3HAL3lcdEv>
 8017408:	6803      	ldr	r3, [r0, #0]
 801740a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801740c:	4798      	blx	r3
 801740e:	23ff      	movs	r3, #255	; 0xff
 8017410:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8017414:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8017418:	6860      	ldr	r0, [r4, #4]
 801741a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801741e:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8017422:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8017426:	6803      	ldr	r3, [r0, #0]
 8017428:	a903      	add	r1, sp, #12
 801742a:	685b      	ldr	r3, [r3, #4]
 801742c:	4798      	blx	r3
 801742e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8017430:	b00d      	add	sp, #52	; 0x34
 8017432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017434:	2000af42 	.word	0x2000af42

08017438 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8017438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801743c:	b08c      	sub	sp, #48	; 0x30
 801743e:	461e      	mov	r6, r3
 8017440:	466d      	mov	r5, sp
 8017442:	2300      	movs	r3, #0
 8017444:	e885 0006 	stmia.w	r5, {r1, r2}
 8017448:	9306      	str	r3, [sp, #24]
 801744a:	6803      	ldr	r3, [r0, #0]
 801744c:	f8bd 7000 	ldrh.w	r7, [sp]
 8017450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017452:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8017456:	2501      	movs	r5, #1
 8017458:	9503      	str	r5, [sp, #12]
 801745a:	4604      	mov	r4, r0
 801745c:	4798      	blx	r3
 801745e:	4642      	mov	r2, r8
 8017460:	4639      	mov	r1, r7
 8017462:	4603      	mov	r3, r0
 8017464:	4620      	mov	r0, r4
 8017466:	f7ff ff47 	bl	80172f8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801746a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801746e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017472:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017476:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801747a:	4b11      	ldr	r3, [pc, #68]	; (80174c0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 801747c:	9004      	str	r0, [sp, #16]
 801747e:	881b      	ldrh	r3, [r3, #0]
 8017480:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8017484:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017486:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801748a:	9607      	str	r6, [sp, #28]
 801748c:	f7fa ff52 	bl	8012334 <_ZN8touchgfx3HAL3lcdEv>
 8017490:	6803      	ldr	r3, [r0, #0]
 8017492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017494:	4798      	blx	r3
 8017496:	23ff      	movs	r3, #255	; 0xff
 8017498:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801749c:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 80174a0:	6860      	ldr	r0, [r4, #4]
 80174a2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80174a6:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80174aa:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 80174ae:	6803      	ldr	r3, [r0, #0]
 80174b0:	a903      	add	r1, sp, #12
 80174b2:	685b      	ldr	r3, [r3, #4]
 80174b4:	4798      	blx	r3
 80174b6:	4630      	mov	r0, r6
 80174b8:	b00c      	add	sp, #48	; 0x30
 80174ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174be:	bf00      	nop
 80174c0:	2000af42 	.word	0x2000af42

080174c4 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 80174c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80174c6:	b085      	sub	sp, #20
 80174c8:	ac02      	add	r4, sp, #8
 80174ca:	e884 0006 	stmia.w	r4, {r1, r2}
 80174ce:	4605      	mov	r5, r0
 80174d0:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 80174d4:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 80174d8:	f7ff fde6 	bl	80170a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80174dc:	463a      	mov	r2, r7
 80174de:	4603      	mov	r3, r0
 80174e0:	4631      	mov	r1, r6
 80174e2:	4628      	mov	r0, r5
 80174e4:	f7ff ff08 	bl	80172f8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80174e8:	4a05      	ldr	r2, [pc, #20]	; (8017500 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 80174ea:	682b      	ldr	r3, [r5, #0]
 80174ec:	8812      	ldrh	r2, [r2, #0]
 80174ee:	9200      	str	r2, [sp, #0]
 80174f0:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 80174f2:	e894 0006 	ldmia.w	r4, {r1, r2}
 80174f6:	4603      	mov	r3, r0
 80174f8:	4628      	mov	r0, r5
 80174fa:	47b0      	blx	r6
 80174fc:	b005      	add	sp, #20
 80174fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017500:	2000af42 	.word	0x2000af42

08017504 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8017504:	b570      	push	{r4, r5, r6, lr}
 8017506:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
 801750a:	4604      	mov	r4, r0
 801750c:	b19b      	cbz	r3, 8017536 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801750e:	2002      	movs	r0, #2
 8017510:	f7fc fe00 	bl	8014114 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8017514:	2300      	movs	r3, #0
 8017516:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 801751a:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
 801751e:	6823      	ldr	r3, [r4, #0]
 8017520:	4620      	mov	r0, r4
 8017522:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8017526:	f7ff fdbf 	bl	80170a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801752a:	462b      	mov	r3, r5
 801752c:	4601      	mov	r1, r0
 801752e:	4620      	mov	r0, r4
 8017530:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017534:	4718      	bx	r3
 8017536:	bd70      	pop	{r4, r5, r6, pc}

08017538 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8017538:	b538      	push	{r3, r4, r5, lr}
 801753a:	f890 307b 	ldrb.w	r3, [r0, #123]	; 0x7b
 801753e:	428b      	cmp	r3, r1
 8017540:	4604      	mov	r4, r0
 8017542:	460d      	mov	r5, r1
 8017544:	d006      	beq.n	8017554 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8017546:	6803      	ldr	r3, [r0, #0]
 8017548:	b929      	cbnz	r1, 8017556 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 801754a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801754e:	4798      	blx	r3
 8017550:	f884 507b 	strb.w	r5, [r4, #123]	; 0x7b
 8017554:	bd38      	pop	{r3, r4, r5, pc}
 8017556:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801755a:	e7f8      	b.n	801754e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0801755c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801755c:	b510      	push	{r4, lr}
 801755e:	4b0d      	ldr	r3, [pc, #52]	; (8017594 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8017560:	781b      	ldrb	r3, [r3, #0]
 8017562:	4604      	mov	r4, r0
 8017564:	b95b      	cbnz	r3, 801757e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017566:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801756a:	2b02      	cmp	r3, #2
 801756c:	d007      	beq.n	801757e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801756e:	6840      	ldr	r0, [r0, #4]
 8017570:	f000 f928 	bl	80177c4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8017574:	b118      	cbz	r0, 801757e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017576:	6862      	ldr	r2, [r4, #4]
 8017578:	7a53      	ldrb	r3, [r2, #9]
 801757a:	2b00      	cmp	r3, #0
 801757c:	d0fc      	beq.n	8017578 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801757e:	f7fd f875 	bl	801466c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8017582:	4620      	mov	r0, r4
 8017584:	2100      	movs	r1, #0
 8017586:	f7ff ffd7 	bl	8017538 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801758a:	4620      	mov	r0, r4
 801758c:	f7ff fd8c 	bl	80170a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017590:	bd10      	pop	{r4, pc}
 8017592:	bf00      	nop
 8017594:	2000af46 	.word	0x2000af46

08017598 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 8017598:	b570      	push	{r4, r5, r6, lr}
 801759a:	4604      	mov	r4, r0
 801759c:	6803      	ldr	r3, [r0, #0]
 801759e:	b919      	cbnz	r1, 80175a8 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 80175a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80175a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80175a6:	4718      	bx	r3
 80175a8:	2200      	movs	r2, #0
 80175aa:	f890 607b 	ldrb.w	r6, [r0, #123]	; 0x7b
 80175ae:	f880 207b 	strb.w	r2, [r0, #123]	; 0x7b
 80175b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80175b4:	4798      	blx	r3
 80175b6:	6863      	ldr	r3, [r4, #4]
 80175b8:	2101      	movs	r1, #1
 80175ba:	4605      	mov	r5, r0
 80175bc:	7299      	strb	r1, [r3, #10]
 80175be:	4620      	mov	r0, r4
 80175c0:	f884 607b 	strb.w	r6, [r4, #123]	; 0x7b
 80175c4:	f7ff ffb8 	bl	8017538 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80175c8:	4628      	mov	r0, r5
 80175ca:	bd70      	pop	{r4, r5, r6, pc}

080175cc <_ZN8touchgfx13DMA_Interface10initializeEv>:
 80175cc:	4770      	bx	lr

080175ce <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 80175ce:	2000      	movs	r0, #0
 80175d0:	4770      	bx	lr

080175d2 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80175d2:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80175d6:	1a13      	subs	r3, r2, r0
 80175d8:	4258      	negs	r0, r3
 80175da:	4158      	adcs	r0, r3
 80175dc:	4770      	bx	lr

080175de <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80175de:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80175e2:	1a9b      	subs	r3, r3, r2
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	bfdc      	itt	le
 80175e8:	6882      	ldrle	r2, [r0, #8]
 80175ea:	189b      	addle	r3, r3, r2
 80175ec:	2b01      	cmp	r3, #1
 80175ee:	bfcc      	ite	gt
 80175f0:	2000      	movgt	r0, #0
 80175f2:	2001      	movle	r0, #1
 80175f4:	4770      	bx	lr

080175f6 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80175f6:	6902      	ldr	r2, [r0, #16]
 80175f8:	6843      	ldr	r3, [r0, #4]
 80175fa:	2024      	movs	r0, #36	; 0x24
 80175fc:	fb00 3002 	mla	r0, r0, r2, r3
 8017600:	4770      	bx	lr

08017602 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8017602:	6803      	ldr	r3, [r0, #0]
 8017604:	691b      	ldr	r3, [r3, #16]
 8017606:	4718      	bx	r3

08017608 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8017608:	b570      	push	{r4, r5, r6, lr}
 801760a:	2301      	movs	r3, #1
 801760c:	7203      	strb	r3, [r0, #8]
 801760e:	4604      	mov	r4, r0
 8017610:	6840      	ldr	r0, [r0, #4]
 8017612:	6803      	ldr	r3, [r0, #0]
 8017614:	699b      	ldr	r3, [r3, #24]
 8017616:	4798      	blx	r3
 8017618:	6803      	ldr	r3, [r0, #0]
 801761a:	2b40      	cmp	r3, #64	; 0x40
 801761c:	4605      	mov	r5, r0
 801761e:	d00c      	beq.n	801763a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8017620:	d810      	bhi.n	8017644 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8017622:	2b04      	cmp	r3, #4
 8017624:	d01d      	beq.n	8017662 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8017626:	d804      	bhi.n	8017632 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8017628:	2b01      	cmp	r3, #1
 801762a:	d006      	beq.n	801763a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801762c:	2b02      	cmp	r3, #2
 801762e:	d02c      	beq.n	801768a <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8017630:	bd70      	pop	{r4, r5, r6, pc}
 8017632:	2b08      	cmp	r3, #8
 8017634:	d01d      	beq.n	8017672 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8017636:	2b20      	cmp	r3, #32
 8017638:	d1fa      	bne.n	8017630 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 801763a:	6823      	ldr	r3, [r4, #0]
 801763c:	4620      	mov	r0, r4
 801763e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017640:	4798      	blx	r3
 8017642:	e013      	b.n	801766c <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8017644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017648:	d0f7      	beq.n	801763a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801764a:	d804      	bhi.n	8017656 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 801764c:	2b80      	cmp	r3, #128	; 0x80
 801764e:	d0f4      	beq.n	801763a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8017650:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017654:	e7f0      	b.n	8017638 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8017656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801765a:	d0ee      	beq.n	801763a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801765c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017660:	e7e5      	b.n	801762e <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8017662:	6823      	ldr	r3, [r4, #0]
 8017664:	7f01      	ldrb	r1, [r0, #28]
 8017666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017668:	4620      	mov	r0, r4
 801766a:	4798      	blx	r3
 801766c:	6823      	ldr	r3, [r4, #0]
 801766e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017670:	e006      	b.n	8017680 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8017672:	6823      	ldr	r3, [r4, #0]
 8017674:	7f01      	ldrb	r1, [r0, #28]
 8017676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017678:	4620      	mov	r0, r4
 801767a:	4798      	blx	r3
 801767c:	6823      	ldr	r3, [r4, #0]
 801767e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017680:	4629      	mov	r1, r5
 8017682:	4620      	mov	r0, r4
 8017684:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017688:	4718      	bx	r3
 801768a:	6823      	ldr	r3, [r4, #0]
 801768c:	4620      	mov	r0, r4
 801768e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017690:	4798      	blx	r3
 8017692:	e7f3      	b.n	801767c <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08017694 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8017694:	4770      	bx	lr

08017696 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8017696:	4770      	bx	lr

08017698 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8017698:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 801769c:	1ad2      	subs	r2, r2, r3
 801769e:	2a00      	cmp	r2, #0
 80176a0:	b510      	push	{r4, lr}
 80176a2:	bfdc      	itt	le
 80176a4:	6884      	ldrle	r4, [r0, #8]
 80176a6:	1912      	addle	r2, r2, r4
 80176a8:	2a01      	cmp	r2, #1
 80176aa:	dd16      	ble.n	80176da <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 80176ac:	6842      	ldr	r2, [r0, #4]
 80176ae:	2424      	movs	r4, #36	; 0x24
 80176b0:	fb04 2303 	mla	r3, r4, r3, r2
 80176b4:	f101 0220 	add.w	r2, r1, #32
 80176b8:	f851 4b04 	ldr.w	r4, [r1], #4
 80176bc:	f843 4b04 	str.w	r4, [r3], #4
 80176c0:	4291      	cmp	r1, r2
 80176c2:	d1f9      	bne.n	80176b8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 80176c4:	780a      	ldrb	r2, [r1, #0]
 80176c6:	701a      	strb	r2, [r3, #0]
 80176c8:	68c3      	ldr	r3, [r0, #12]
 80176ca:	6882      	ldr	r2, [r0, #8]
 80176cc:	f3bf 8f5b 	dmb	ish
 80176d0:	3301      	adds	r3, #1
 80176d2:	429a      	cmp	r2, r3
 80176d4:	bfd8      	it	le
 80176d6:	1a9b      	suble	r3, r3, r2
 80176d8:	60c3      	str	r3, [r0, #12]
 80176da:	bd10      	pop	{r4, pc}

080176dc <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80176dc:	6903      	ldr	r3, [r0, #16]
 80176de:	6882      	ldr	r2, [r0, #8]
 80176e0:	f3bf 8f5b 	dmb	ish
 80176e4:	3301      	adds	r3, #1
 80176e6:	429a      	cmp	r2, r3
 80176e8:	bfd8      	it	le
 80176ea:	1a9b      	suble	r3, r3, r2
 80176ec:	6103      	str	r3, [r0, #16]
 80176ee:	4770      	bx	lr

080176f0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80176f0:	b570      	push	{r4, r5, r6, lr}
 80176f2:	4604      	mov	r4, r0
 80176f4:	460e      	mov	r6, r1
 80176f6:	6860      	ldr	r0, [r4, #4]
 80176f8:	6803      	ldr	r3, [r0, #0]
 80176fa:	685b      	ldr	r3, [r3, #4]
 80176fc:	4798      	blx	r3
 80176fe:	2800      	cmp	r0, #0
 8017700:	d1f9      	bne.n	80176f6 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8017702:	4d0d      	ldr	r5, [pc, #52]	; (8017738 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8017704:	6828      	ldr	r0, [r5, #0]
 8017706:	6803      	ldr	r3, [r0, #0]
 8017708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801770a:	4798      	blx	r3
 801770c:	f7fc ffc8 	bl	80146a0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8017710:	6828      	ldr	r0, [r5, #0]
 8017712:	2101      	movs	r1, #1
 8017714:	f7ff ff10 	bl	8017538 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8017718:	6860      	ldr	r0, [r4, #4]
 801771a:	6803      	ldr	r3, [r0, #0]
 801771c:	4631      	mov	r1, r6
 801771e:	689b      	ldr	r3, [r3, #8]
 8017720:	4798      	blx	r3
 8017722:	6823      	ldr	r3, [r4, #0]
 8017724:	4620      	mov	r0, r4
 8017726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017728:	4798      	blx	r3
 801772a:	6828      	ldr	r0, [r5, #0]
 801772c:	6803      	ldr	r3, [r0, #0]
 801772e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017732:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017734:	4718      	bx	r3
 8017736:	bf00      	nop
 8017738:	2000af48 	.word	0x2000af48

0801773c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801773c:	b508      	push	{r3, lr}
 801773e:	f7fc ff95 	bl	801466c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8017742:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017746:	f7fc bf9f 	b.w	8014688 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801774a <_ZN8touchgfx13DMA_Interface5startEv>:
 801774a:	b510      	push	{r4, lr}
 801774c:	4604      	mov	r4, r0
 801774e:	6840      	ldr	r0, [r0, #4]
 8017750:	6803      	ldr	r3, [r0, #0]
 8017752:	681b      	ldr	r3, [r3, #0]
 8017754:	4798      	blx	r3
 8017756:	b948      	cbnz	r0, 801776c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8017758:	7a63      	ldrb	r3, [r4, #9]
 801775a:	b13b      	cbz	r3, 801776c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801775c:	7a23      	ldrb	r3, [r4, #8]
 801775e:	b92b      	cbnz	r3, 801776c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8017760:	6823      	ldr	r3, [r4, #0]
 8017762:	4620      	mov	r0, r4
 8017764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801776a:	4718      	bx	r3
 801776c:	bd10      	pop	{r4, pc}

0801776e <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801776e:	b570      	push	{r4, r5, r6, lr}
 8017770:	4604      	mov	r4, r0
 8017772:	6840      	ldr	r0, [r0, #4]
 8017774:	6803      	ldr	r3, [r0, #0]
 8017776:	681b      	ldr	r3, [r3, #0]
 8017778:	4798      	blx	r3
 801777a:	4605      	mov	r5, r0
 801777c:	b930      	cbnz	r0, 801778c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801777e:	7a23      	ldrb	r3, [r4, #8]
 8017780:	b123      	cbz	r3, 801778c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8017782:	6860      	ldr	r0, [r4, #4]
 8017784:	6803      	ldr	r3, [r0, #0]
 8017786:	695b      	ldr	r3, [r3, #20]
 8017788:	4798      	blx	r3
 801778a:	7225      	strb	r5, [r4, #8]
 801778c:	6860      	ldr	r0, [r4, #4]
 801778e:	6803      	ldr	r3, [r0, #0]
 8017790:	681b      	ldr	r3, [r3, #0]
 8017792:	4798      	blx	r3
 8017794:	b928      	cbnz	r0, 80177a2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8017796:	6823      	ldr	r3, [r4, #0]
 8017798:	4620      	mov	r0, r4
 801779a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801779c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80177a0:	4718      	bx	r3
 80177a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80177a6:	f7fc bf87 	b.w	80146b8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

080177ac <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80177ac:	b510      	push	{r4, lr}
 80177ae:	4c04      	ldr	r4, [pc, #16]	; (80177c0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80177b0:	6082      	str	r2, [r0, #8]
 80177b2:	2200      	movs	r2, #0
 80177b4:	e9c0 4100 	strd	r4, r1, [r0]
 80177b8:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80177bc:	bd10      	pop	{r4, pc}
 80177be:	bf00      	nop
 80177c0:	0802f094 	.word	0x0802f094

080177c4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80177c4:	6840      	ldr	r0, [r0, #4]
 80177c6:	6803      	ldr	r3, [r0, #0]
 80177c8:	681b      	ldr	r3, [r3, #0]
 80177ca:	4718      	bx	r3

080177cc <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 80177cc:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 80177d0:	4770      	bx	lr

080177d2 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 80177d2:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 80177d6:	4770      	bx	lr

080177d8 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 80177d8:	2200      	movs	r2, #0
 80177da:	8002      	strh	r2, [r0, #0]
 80177dc:	8042      	strh	r2, [r0, #2]
 80177de:	8082      	strh	r2, [r0, #4]
 80177e0:	80c2      	strh	r2, [r0, #6]
 80177e2:	4770      	bx	lr

080177e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 80177e4:	b507      	push	{r0, r1, r2, lr}
 80177e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80177ea:	ab01      	add	r3, sp, #4
 80177ec:	6809      	ldr	r1, [r1, #0]
 80177ee:	6800      	ldr	r0, [r0, #0]
 80177f0:	f004 ffee 	bl	801c7d0 <_ZN8touchgfx6muldivElllRl>
 80177f4:	b003      	add	sp, #12
 80177f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080177fc <_ZN8touchgfx7CWRUtil4sineEi>:
 80177fc:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8017800:	fb90 f2f3 	sdiv	r2, r0, r3
 8017804:	fb02 0013 	mls	r0, r2, r3, r0
 8017808:	2800      	cmp	r0, #0
 801780a:	bfb8      	it	lt
 801780c:	18c0      	addlt	r0, r0, r3
 801780e:	285a      	cmp	r0, #90	; 0x5a
 8017810:	4b09      	ldr	r3, [pc, #36]	; (8017838 <_ZN8touchgfx7CWRUtil4sineEi+0x3c>)
 8017812:	dc02      	bgt.n	801781a <_ZN8touchgfx7CWRUtil4sineEi+0x1e>
 8017814:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8017818:	4770      	bx	lr
 801781a:	28b4      	cmp	r0, #180	; 0xb4
 801781c:	dc02      	bgt.n	8017824 <_ZN8touchgfx7CWRUtil4sineEi+0x28>
 801781e:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8017822:	e7f7      	b.n	8017814 <_ZN8touchgfx7CWRUtil4sineEi+0x18>
 8017824:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8017828:	bfd4      	ite	le
 801782a:	38b4      	suble	r0, #180	; 0xb4
 801782c:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8017830:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8017834:	4240      	negs	r0, r0
 8017836:	4770      	bx	lr
 8017838:	0802f0b0 	.word	0x0802f0b0

0801783c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 801783c:	f44f 5334 	mov.w	r3, #11520	; 0x2d00
 8017840:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017842:	fb90 f2f3 	sdiv	r2, r0, r3
 8017846:	fb02 0013 	mls	r0, r2, r3, r0
 801784a:	2800      	cmp	r0, #0
 801784c:	bfb8      	it	lt
 801784e:	18c0      	addlt	r0, r0, r3
 8017850:	1144      	asrs	r4, r0, #5
 8017852:	f000 061f 	and.w	r6, r0, #31
 8017856:	4620      	mov	r0, r4
 8017858:	f7ff ffd0 	bl	80177fc <_ZN8touchgfx7CWRUtil4sineEi>
 801785c:	4605      	mov	r5, r0
 801785e:	b90e      	cbnz	r6, 8017864 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>
 8017860:	b002      	add	sp, #8
 8017862:	bd70      	pop	{r4, r5, r6, pc}
 8017864:	1c60      	adds	r0, r4, #1
 8017866:	f7ff ffc9 	bl	80177fc <_ZN8touchgfx7CWRUtil4sineEi>
 801786a:	ab01      	add	r3, sp, #4
 801786c:	2220      	movs	r2, #32
 801786e:	4631      	mov	r1, r6
 8017870:	1b40      	subs	r0, r0, r5
 8017872:	f004 ffad 	bl	801c7d0 <_ZN8touchgfx6muldivElllRl>
 8017876:	4428      	add	r0, r5
 8017878:	e7f2      	b.n	8017860 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x24>

0801787a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 801787a:	b508      	push	{r3, lr}
 801787c:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 8017880:	f7ff ffdc 	bl	801783c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8017884:	bd08      	pop	{r3, pc}
	...

08017888 <_ZN8touchgfx6CircleC1Ev>:
 8017888:	b510      	push	{r4, lr}
 801788a:	4604      	mov	r4, r0
 801788c:	f000 fd68 	bl	8018360 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8017890:	4b08      	ldr	r3, [pc, #32]	; (80178b4 <_ZN8touchgfx6CircleC1Ev+0x2c>)
 8017892:	6023      	str	r3, [r4, #0]
 8017894:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8017898:	2300      	movs	r3, #0
 801789a:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
 801789e:	f24b 4205 	movw	r2, #46085	; 0xb405
 80178a2:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 80178a6:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 80178aa:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
 80178ae:	60a3      	str	r3, [r4, #8]
 80178b0:	4620      	mov	r0, r4
 80178b2:	bd10      	pop	{r4, pc}
 80178b4:	0802f170 	.word	0x0802f170

080178b8 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 80178b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178bc:	428a      	cmp	r2, r1
 80178be:	4680      	mov	r8, r0
 80178c0:	4610      	mov	r0, r2
 80178c2:	4699      	mov	r9, r3
 80178c4:	bfa6      	itte	ge
 80178c6:	460a      	movge	r2, r1
 80178c8:	4603      	movge	r3, r0
 80178ca:	460b      	movlt	r3, r1
 80178cc:	1a99      	subs	r1, r3, r2
 80178ce:	b085      	sub	sp, #20
 80178d0:	f5b1 5f34 	cmp.w	r1, #11520	; 0x2d00
 80178d4:	f8d8 4040 	ldr.w	r4, [r8, #64]	; 0x40
 80178d8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80178da:	bfa4      	itt	ge
 80178dc:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 80178e0:	2200      	movge	r2, #0
 80178e2:	e9dd 760e 	ldrd	r7, r6, [sp, #56]	; 0x38
 80178e6:	9300      	str	r3, [sp, #0]
 80178e8:	f108 0a34 	add.w	sl, r8, #52	; 0x34
 80178ec:	f102 0b01 	add.w	fp, r2, #1
 80178f0:	2c00      	cmp	r4, #0
 80178f2:	f040 80af 	bne.w	8017a54 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x19c>
 80178f6:	4610      	mov	r0, r2
 80178f8:	9201      	str	r2, [sp, #4]
 80178fa:	f7ff ff9f 	bl	801783c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80178fe:	a903      	add	r1, sp, #12
 8017900:	9003      	str	r0, [sp, #12]
 8017902:	4650      	mov	r0, sl
 8017904:	f7ff ff6e 	bl	80177e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017908:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 801790c:	9a01      	ldr	r2, [sp, #4]
 801790e:	4408      	add	r0, r1
 8017910:	f8d9 1000 	ldr.w	r1, [r9]
 8017914:	4281      	cmp	r1, r0
 8017916:	bfc8      	it	gt
 8017918:	f8c9 0000 	strgt.w	r0, [r9]
 801791c:	6839      	ldr	r1, [r7, #0]
 801791e:	4288      	cmp	r0, r1
 8017920:	bfc8      	it	gt
 8017922:	6038      	strgt	r0, [r7, #0]
 8017924:	4610      	mov	r0, r2
 8017926:	f7ff ffa8 	bl	801787a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801792a:	a903      	add	r1, sp, #12
 801792c:	9003      	str	r0, [sp, #12]
 801792e:	4650      	mov	r0, sl
 8017930:	f7ff ff58 	bl	80177e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017934:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 8017938:	1a10      	subs	r0, r2, r0
 801793a:	6832      	ldr	r2, [r6, #0]
 801793c:	4282      	cmp	r2, r0
 801793e:	bfc8      	it	gt
 8017940:	6030      	strgt	r0, [r6, #0]
 8017942:	682a      	ldr	r2, [r5, #0]
 8017944:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8017948:	4290      	cmp	r0, r2
 801794a:	fb9b f2f1 	sdiv	r2, fp, r1
 801794e:	fb01 b212 	mls	r2, r1, r2, fp
 8017952:	eba1 0202 	sub.w	r2, r1, r2
 8017956:	bfc8      	it	gt
 8017958:	6028      	strgt	r0, [r5, #0]
 801795a:	fb92 f0f1 	sdiv	r0, r2, r1
 801795e:	fb01 2210 	mls	r2, r1, r0, r2
 8017962:	4493      	add	fp, r2
 8017964:	9b00      	ldr	r3, [sp, #0]
 8017966:	455b      	cmp	r3, fp
 8017968:	db2a      	blt.n	80179c0 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x108>
 801796a:	4658      	mov	r0, fp
 801796c:	f7ff ff66 	bl	801783c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8017970:	a903      	add	r1, sp, #12
 8017972:	9003      	str	r0, [sp, #12]
 8017974:	4650      	mov	r0, sl
 8017976:	f7ff ff35 	bl	80177e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801797a:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 801797e:	4410      	add	r0, r2
 8017980:	f8d9 2000 	ldr.w	r2, [r9]
 8017984:	4282      	cmp	r2, r0
 8017986:	bfc8      	it	gt
 8017988:	f8c9 0000 	strgt.w	r0, [r9]
 801798c:	683a      	ldr	r2, [r7, #0]
 801798e:	4290      	cmp	r0, r2
 8017990:	bfc8      	it	gt
 8017992:	6038      	strgt	r0, [r7, #0]
 8017994:	4658      	mov	r0, fp
 8017996:	f7ff ff70 	bl	801787a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801799a:	a903      	add	r1, sp, #12
 801799c:	9003      	str	r0, [sp, #12]
 801799e:	4650      	mov	r0, sl
 80179a0:	f7ff ff20 	bl	80177e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80179a4:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 80179a8:	1a10      	subs	r0, r2, r0
 80179aa:	6832      	ldr	r2, [r6, #0]
 80179ac:	4282      	cmp	r2, r0
 80179ae:	bfc8      	it	gt
 80179b0:	6030      	strgt	r0, [r6, #0]
 80179b2:	682a      	ldr	r2, [r5, #0]
 80179b4:	4290      	cmp	r0, r2
 80179b6:	bfc8      	it	gt
 80179b8:	6028      	strgt	r0, [r5, #0]
 80179ba:	f50b 6b34 	add.w	fp, fp, #2880	; 0xb40
 80179be:	e7d1      	b.n	8017964 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xac>
 80179c0:	9b00      	ldr	r3, [sp, #0]
 80179c2:	f5ab 6b34 	sub.w	fp, fp, #2880	; 0xb40
 80179c6:	455b      	cmp	r3, fp
 80179c8:	dd27      	ble.n	8017a1a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x162>
 80179ca:	4618      	mov	r0, r3
 80179cc:	f7ff ff36 	bl	801783c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80179d0:	a903      	add	r1, sp, #12
 80179d2:	9003      	str	r0, [sp, #12]
 80179d4:	4650      	mov	r0, sl
 80179d6:	f7ff ff05 	bl	80177e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80179da:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 80179de:	4410      	add	r0, r2
 80179e0:	f8d9 2000 	ldr.w	r2, [r9]
 80179e4:	4282      	cmp	r2, r0
 80179e6:	bfc8      	it	gt
 80179e8:	f8c9 0000 	strgt.w	r0, [r9]
 80179ec:	683a      	ldr	r2, [r7, #0]
 80179ee:	4290      	cmp	r0, r2
 80179f0:	bfc8      	it	gt
 80179f2:	6038      	strgt	r0, [r7, #0]
 80179f4:	9800      	ldr	r0, [sp, #0]
 80179f6:	f7ff ff40 	bl	801787a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80179fa:	a903      	add	r1, sp, #12
 80179fc:	9003      	str	r0, [sp, #12]
 80179fe:	4650      	mov	r0, sl
 8017a00:	f7ff fef0 	bl	80177e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017a04:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 8017a08:	1a10      	subs	r0, r2, r0
 8017a0a:	6832      	ldr	r2, [r6, #0]
 8017a0c:	4282      	cmp	r2, r0
 8017a0e:	bfc8      	it	gt
 8017a10:	6030      	strgt	r0, [r6, #0]
 8017a12:	682a      	ldr	r2, [r5, #0]
 8017a14:	4290      	cmp	r0, r2
 8017a16:	bfc8      	it	gt
 8017a18:	6028      	strgt	r0, [r5, #0]
 8017a1a:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8017a1e:	f8d9 1000 	ldr.w	r1, [r9]
 8017a22:	4291      	cmp	r1, r2
 8017a24:	bfc8      	it	gt
 8017a26:	f8c9 2000 	strgt.w	r2, [r9]
 8017a2a:	683a      	ldr	r2, [r7, #0]
 8017a2c:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 8017a30:	429a      	cmp	r2, r3
 8017a32:	bfb8      	it	lt
 8017a34:	603b      	strlt	r3, [r7, #0]
 8017a36:	6832      	ldr	r2, [r6, #0]
 8017a38:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 8017a3c:	429a      	cmp	r2, r3
 8017a3e:	bfc8      	it	gt
 8017a40:	6033      	strgt	r3, [r6, #0]
 8017a42:	682a      	ldr	r2, [r5, #0]
 8017a44:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 8017a48:	429a      	cmp	r2, r3
 8017a4a:	da00      	bge.n	8017a4e <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x196>
 8017a4c:	602b      	str	r3, [r5, #0]
 8017a4e:	b005      	add	sp, #20
 8017a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a54:	2002      	movs	r0, #2
 8017a56:	3401      	adds	r4, #1
 8017a58:	fb94 f4f0 	sdiv	r4, r4, r0
 8017a5c:	4610      	mov	r0, r2
 8017a5e:	9201      	str	r2, [sp, #4]
 8017a60:	f7ff feec 	bl	801783c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8017a64:	a903      	add	r1, sp, #12
 8017a66:	9003      	str	r0, [sp, #12]
 8017a68:	4650      	mov	r0, sl
 8017a6a:	f7ff febb 	bl	80177e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017a6e:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 8017a72:	9a01      	ldr	r2, [sp, #4]
 8017a74:	4408      	add	r0, r1
 8017a76:	f8d9 1000 	ldr.w	r1, [r9]
 8017a7a:	1b03      	subs	r3, r0, r4
 8017a7c:	4299      	cmp	r1, r3
 8017a7e:	bfc8      	it	gt
 8017a80:	f8c9 3000 	strgt.w	r3, [r9]
 8017a84:	6839      	ldr	r1, [r7, #0]
 8017a86:	428b      	cmp	r3, r1
 8017a88:	bfc8      	it	gt
 8017a8a:	603b      	strgt	r3, [r7, #0]
 8017a8c:	f8d9 1000 	ldr.w	r1, [r9]
 8017a90:	4420      	add	r0, r4
 8017a92:	4281      	cmp	r1, r0
 8017a94:	bfc8      	it	gt
 8017a96:	f8c9 0000 	strgt.w	r0, [r9]
 8017a9a:	6839      	ldr	r1, [r7, #0]
 8017a9c:	4288      	cmp	r0, r1
 8017a9e:	bfc8      	it	gt
 8017aa0:	6038      	strgt	r0, [r7, #0]
 8017aa2:	4610      	mov	r0, r2
 8017aa4:	f7ff fee9 	bl	801787a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8017aa8:	a903      	add	r1, sp, #12
 8017aaa:	9003      	str	r0, [sp, #12]
 8017aac:	4650      	mov	r0, sl
 8017aae:	f7ff fe99 	bl	80177e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017ab2:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 8017ab6:	1a10      	subs	r0, r2, r0
 8017ab8:	6832      	ldr	r2, [r6, #0]
 8017aba:	1b01      	subs	r1, r0, r4
 8017abc:	428a      	cmp	r2, r1
 8017abe:	bfc8      	it	gt
 8017ac0:	6031      	strgt	r1, [r6, #0]
 8017ac2:	682a      	ldr	r2, [r5, #0]
 8017ac4:	4291      	cmp	r1, r2
 8017ac6:	bfc8      	it	gt
 8017ac8:	6029      	strgt	r1, [r5, #0]
 8017aca:	6832      	ldr	r2, [r6, #0]
 8017acc:	4420      	add	r0, r4
 8017ace:	4282      	cmp	r2, r0
 8017ad0:	bfc8      	it	gt
 8017ad2:	6030      	strgt	r0, [r6, #0]
 8017ad4:	682a      	ldr	r2, [r5, #0]
 8017ad6:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8017ada:	4290      	cmp	r0, r2
 8017adc:	fb9b f2f1 	sdiv	r2, fp, r1
 8017ae0:	fb01 b212 	mls	r2, r1, r2, fp
 8017ae4:	eba1 0202 	sub.w	r2, r1, r2
 8017ae8:	bfc8      	it	gt
 8017aea:	6028      	strgt	r0, [r5, #0]
 8017aec:	fb92 f0f1 	sdiv	r0, r2, r1
 8017af0:	fb01 2210 	mls	r2, r1, r0, r2
 8017af4:	4493      	add	fp, r2
 8017af6:	9b00      	ldr	r3, [sp, #0]
 8017af8:	455b      	cmp	r3, fp
 8017afa:	db40      	blt.n	8017b7e <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x2c6>
 8017afc:	4658      	mov	r0, fp
 8017afe:	f7ff fe9d 	bl	801783c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8017b02:	a903      	add	r1, sp, #12
 8017b04:	9003      	str	r0, [sp, #12]
 8017b06:	4650      	mov	r0, sl
 8017b08:	f7ff fe6c 	bl	80177e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017b0c:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8017b10:	4410      	add	r0, r2
 8017b12:	f8d9 2000 	ldr.w	r2, [r9]
 8017b16:	1b01      	subs	r1, r0, r4
 8017b18:	428a      	cmp	r2, r1
 8017b1a:	bfc8      	it	gt
 8017b1c:	f8c9 1000 	strgt.w	r1, [r9]
 8017b20:	683a      	ldr	r2, [r7, #0]
 8017b22:	4291      	cmp	r1, r2
 8017b24:	bfc8      	it	gt
 8017b26:	6039      	strgt	r1, [r7, #0]
 8017b28:	f8d9 2000 	ldr.w	r2, [r9]
 8017b2c:	4420      	add	r0, r4
 8017b2e:	4282      	cmp	r2, r0
 8017b30:	bfc8      	it	gt
 8017b32:	f8c9 0000 	strgt.w	r0, [r9]
 8017b36:	683a      	ldr	r2, [r7, #0]
 8017b38:	4290      	cmp	r0, r2
 8017b3a:	bfc8      	it	gt
 8017b3c:	6038      	strgt	r0, [r7, #0]
 8017b3e:	4658      	mov	r0, fp
 8017b40:	f7ff fe9b 	bl	801787a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8017b44:	a903      	add	r1, sp, #12
 8017b46:	9003      	str	r0, [sp, #12]
 8017b48:	4650      	mov	r0, sl
 8017b4a:	f7ff fe4b 	bl	80177e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017b4e:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 8017b52:	1a10      	subs	r0, r2, r0
 8017b54:	6832      	ldr	r2, [r6, #0]
 8017b56:	1b01      	subs	r1, r0, r4
 8017b58:	428a      	cmp	r2, r1
 8017b5a:	bfc8      	it	gt
 8017b5c:	6031      	strgt	r1, [r6, #0]
 8017b5e:	682a      	ldr	r2, [r5, #0]
 8017b60:	4291      	cmp	r1, r2
 8017b62:	bfc8      	it	gt
 8017b64:	6029      	strgt	r1, [r5, #0]
 8017b66:	6832      	ldr	r2, [r6, #0]
 8017b68:	4420      	add	r0, r4
 8017b6a:	4282      	cmp	r2, r0
 8017b6c:	bfc8      	it	gt
 8017b6e:	6030      	strgt	r0, [r6, #0]
 8017b70:	682a      	ldr	r2, [r5, #0]
 8017b72:	4290      	cmp	r0, r2
 8017b74:	bfc8      	it	gt
 8017b76:	6028      	strgt	r0, [r5, #0]
 8017b78:	f50b 6b34 	add.w	fp, fp, #2880	; 0xb40
 8017b7c:	e7bb      	b.n	8017af6 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x23e>
 8017b7e:	9b00      	ldr	r3, [sp, #0]
 8017b80:	f5ab 6b34 	sub.w	fp, fp, #2880	; 0xb40
 8017b84:	455b      	cmp	r3, fp
 8017b86:	f77f af62 	ble.w	8017a4e <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x196>
 8017b8a:	4618      	mov	r0, r3
 8017b8c:	f7ff fe56 	bl	801783c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8017b90:	a903      	add	r1, sp, #12
 8017b92:	9003      	str	r0, [sp, #12]
 8017b94:	4650      	mov	r0, sl
 8017b96:	f7ff fe25 	bl	80177e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017b9a:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8017b9e:	4410      	add	r0, r2
 8017ba0:	f8d9 2000 	ldr.w	r2, [r9]
 8017ba4:	1b01      	subs	r1, r0, r4
 8017ba6:	428a      	cmp	r2, r1
 8017ba8:	bfc8      	it	gt
 8017baa:	f8c9 1000 	strgt.w	r1, [r9]
 8017bae:	683a      	ldr	r2, [r7, #0]
 8017bb0:	4291      	cmp	r1, r2
 8017bb2:	bfc8      	it	gt
 8017bb4:	6039      	strgt	r1, [r7, #0]
 8017bb6:	f8d9 2000 	ldr.w	r2, [r9]
 8017bba:	4420      	add	r0, r4
 8017bbc:	4282      	cmp	r2, r0
 8017bbe:	bfc8      	it	gt
 8017bc0:	f8c9 0000 	strgt.w	r0, [r9]
 8017bc4:	683b      	ldr	r3, [r7, #0]
 8017bc6:	4298      	cmp	r0, r3
 8017bc8:	bfc8      	it	gt
 8017bca:	6038      	strgt	r0, [r7, #0]
 8017bcc:	9800      	ldr	r0, [sp, #0]
 8017bce:	f7ff fe54 	bl	801787a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8017bd2:	a903      	add	r1, sp, #12
 8017bd4:	9003      	str	r0, [sp, #12]
 8017bd6:	4650      	mov	r0, sl
 8017bd8:	f7ff fe04 	bl	80177e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017bdc:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 8017be0:	6832      	ldr	r2, [r6, #0]
 8017be2:	1a18      	subs	r0, r3, r0
 8017be4:	1b03      	subs	r3, r0, r4
 8017be6:	429a      	cmp	r2, r3
 8017be8:	bfc8      	it	gt
 8017bea:	6033      	strgt	r3, [r6, #0]
 8017bec:	682a      	ldr	r2, [r5, #0]
 8017bee:	4293      	cmp	r3, r2
 8017bf0:	bfc8      	it	gt
 8017bf2:	602b      	strgt	r3, [r5, #0]
 8017bf4:	6833      	ldr	r3, [r6, #0]
 8017bf6:	4404      	add	r4, r0
 8017bf8:	42a3      	cmp	r3, r4
 8017bfa:	bfc8      	it	gt
 8017bfc:	6034      	strgt	r4, [r6, #0]
 8017bfe:	682b      	ldr	r3, [r5, #0]
 8017c00:	429c      	cmp	r4, r3
 8017c02:	bfc8      	it	gt
 8017c04:	602c      	strgt	r4, [r5, #0]
 8017c06:	e722      	b.n	8017a4e <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x196>

08017c08 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 8017c08:	b530      	push	{r4, r5, lr}
 8017c0a:	4604      	mov	r4, r0
 8017c0c:	4608      	mov	r0, r1
 8017c0e:	4611      	mov	r1, r2
 8017c10:	461a      	mov	r2, r3
 8017c12:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8017c16:	b089      	sub	sp, #36	; 0x24
 8017c18:	015b      	lsls	r3, r3, #5
 8017c1a:	9304      	str	r3, [sp, #16]
 8017c1c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017c20:	2500      	movs	r5, #0
 8017c22:	015b      	lsls	r3, r3, #5
 8017c24:	e9cd 3506 	strd	r3, r5, [sp, #24]
 8017c28:	ab07      	add	r3, sp, #28
 8017c2a:	9302      	str	r3, [sp, #8]
 8017c2c:	ab06      	add	r3, sp, #24
 8017c2e:	9301      	str	r3, [sp, #4]
 8017c30:	ab05      	add	r3, sp, #20
 8017c32:	9300      	str	r3, [sp, #0]
 8017c34:	ab04      	add	r3, sp, #16
 8017c36:	9505      	str	r5, [sp, #20]
 8017c38:	f7ff fe3e 	bl	80178b8 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 8017c3c:	2520      	movs	r5, #32
 8017c3e:	9a04      	ldr	r2, [sp, #16]
 8017c40:	9805      	ldr	r0, [sp, #20]
 8017c42:	fb92 f2f5 	sdiv	r2, r2, r5
 8017c46:	fb90 f0f5 	sdiv	r0, r0, r5
 8017c4a:	b292      	uxth	r2, r2
 8017c4c:	3002      	adds	r0, #2
 8017c4e:	1a80      	subs	r0, r0, r2
 8017c50:	9b06      	ldr	r3, [sp, #24]
 8017c52:	9907      	ldr	r1, [sp, #28]
 8017c54:	fb93 f3f5 	sdiv	r3, r3, r5
 8017c58:	fb91 f1f5 	sdiv	r1, r1, r5
 8017c5c:	b29b      	uxth	r3, r3
 8017c5e:	3102      	adds	r1, #2
 8017c60:	1ac9      	subs	r1, r1, r3
 8017c62:	3a01      	subs	r2, #1
 8017c64:	3b01      	subs	r3, #1
 8017c66:	80a0      	strh	r0, [r4, #4]
 8017c68:	4620      	mov	r0, r4
 8017c6a:	8022      	strh	r2, [r4, #0]
 8017c6c:	8063      	strh	r3, [r4, #2]
 8017c6e:	80e1      	strh	r1, [r4, #6]
 8017c70:	b009      	add	sp, #36	; 0x24
 8017c72:	bd30      	pop	{r4, r5, pc}

08017c74 <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 8017c74:	b510      	push	{r4, lr}
 8017c76:	e9d1 230e 	ldrd	r2, r3, [r1, #56]	; 0x38
 8017c7a:	4604      	mov	r4, r0
 8017c7c:	f7ff ffc4 	bl	8017c08 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8017c80:	4620      	mov	r0, r4
 8017c82:	bd10      	pop	{r4, pc}

08017c84 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>:
 8017c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c86:	e9d1 540e 	ldrd	r5, r4, [r1, #56]	; 0x38
 8017c8a:	4606      	mov	r6, r0
 8017c8c:	f891 0044 	ldrb.w	r0, [r1, #68]	; 0x44
 8017c90:	6813      	ldr	r3, [r2, #0]
 8017c92:	42a5      	cmp	r5, r4
 8017c94:	ea4f 1040 	mov.w	r0, r0, lsl #5
 8017c98:	da2b      	bge.n	8017cf2 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x6e>
 8017c9a:	42a3      	cmp	r3, r4
 8017c9c:	dd14      	ble.n	8017cc8 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x44>
 8017c9e:	b168      	cbz	r0, 8017cbc <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8017ca0:	4267      	negs	r7, r4
 8017ca2:	fb97 f2f0 	sdiv	r2, r7, r0
 8017ca6:	fb00 7212 	mls	r2, r0, r2, r7
 8017caa:	1a82      	subs	r2, r0, r2
 8017cac:	fb92 f7f0 	sdiv	r7, r2, r0
 8017cb0:	fb00 2017 	mls	r0, r0, r7, r2
 8017cb4:	1a24      	subs	r4, r4, r0
 8017cb6:	42ac      	cmp	r4, r5
 8017cb8:	bfb8      	it	lt
 8017cba:	462c      	movlt	r4, r5
 8017cbc:	4630      	mov	r0, r6
 8017cbe:	4622      	mov	r2, r4
 8017cc0:	f7ff ffa2 	bl	8017c08 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8017cc4:	4630      	mov	r0, r6
 8017cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017cc8:	42ab      	cmp	r3, r5
 8017cca:	dd0e      	ble.n	8017cea <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 8017ccc:	b168      	cbz	r0, 8017cea <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 8017cce:	425f      	negs	r7, r3
 8017cd0:	fb97 f2f0 	sdiv	r2, r7, r0
 8017cd4:	fb00 7212 	mls	r2, r0, r2, r7
 8017cd8:	1a82      	subs	r2, r0, r2
 8017cda:	fb92 f7f0 	sdiv	r7, r2, r0
 8017cde:	fb00 2017 	mls	r0, r0, r7, r2
 8017ce2:	1a1b      	subs	r3, r3, r0
 8017ce4:	42ab      	cmp	r3, r5
 8017ce6:	bfb8      	it	lt
 8017ce8:	462b      	movlt	r3, r5
 8017cea:	4622      	mov	r2, r4
 8017cec:	461c      	mov	r4, r3
 8017cee:	4613      	mov	r3, r2
 8017cf0:	e7e4      	b.n	8017cbc <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8017cf2:	42a3      	cmp	r3, r4
 8017cf4:	da10      	bge.n	8017d18 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x94>
 8017cf6:	b148      	cbz	r0, 8017d0c <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x88>
 8017cf8:	fb94 f2f0 	sdiv	r2, r4, r0
 8017cfc:	fb00 4212 	mls	r2, r0, r2, r4
 8017d00:	1a82      	subs	r2, r0, r2
 8017d02:	fb92 f7f0 	sdiv	r7, r2, r0
 8017d06:	fb00 2017 	mls	r0, r0, r7, r2
 8017d0a:	4404      	add	r4, r0
 8017d0c:	42a5      	cmp	r5, r4
 8017d0e:	bfa8      	it	ge
 8017d10:	4625      	movge	r5, r4
 8017d12:	461c      	mov	r4, r3
 8017d14:	462b      	mov	r3, r5
 8017d16:	e7d1      	b.n	8017cbc <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8017d18:	42ab      	cmp	r3, r5
 8017d1a:	dacf      	bge.n	8017cbc <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8017d1c:	2800      	cmp	r0, #0
 8017d1e:	d0cd      	beq.n	8017cbc <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8017d20:	fb93 f2f0 	sdiv	r2, r3, r0
 8017d24:	fb00 3212 	mls	r2, r0, r2, r3
 8017d28:	1a82      	subs	r2, r0, r2
 8017d2a:	fb92 f7f0 	sdiv	r7, r2, r0
 8017d2e:	fb00 2017 	mls	r0, r0, r7, r2
 8017d32:	4403      	add	r3, r0
 8017d34:	42ab      	cmp	r3, r5
 8017d36:	bfa8      	it	ge
 8017d38:	462b      	movge	r3, r5
 8017d3a:	e7bf      	b.n	8017cbc <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>

08017d3c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 8017d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d40:	e9d0 560e 	ldrd	r5, r6, [r0, #56]	; 0x38
 8017d44:	42ae      	cmp	r6, r5
 8017d46:	bfa2      	ittt	ge
 8017d48:	4633      	movge	r3, r6
 8017d4a:	462e      	movge	r6, r5
 8017d4c:	461d      	movge	r5, r3
 8017d4e:	1bab      	subs	r3, r5, r6
 8017d50:	468b      	mov	fp, r1
 8017d52:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8017d54:	f9b0 902c 	ldrsh.w	r9, [r0, #44]	; 0x2c
 8017d58:	f9b0 a030 	ldrsh.w	sl, [r0, #48]	; 0x30
 8017d5c:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8017d60:	f04f 0220 	mov.w	r2, #32
 8017d64:	b0ab      	sub	sp, #172	; 0xac
 8017d66:	4604      	mov	r4, r0
 8017d68:	bfa4      	itt	ge
 8017d6a:	f44f 5534 	movge.w	r5, #11520	; 0x2d00
 8017d6e:	2600      	movge	r6, #0
 8017d70:	fb99 f9f2 	sdiv	r9, r9, r2
 8017d74:	fb9a faf2 	sdiv	sl, sl, r2
 8017d78:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8017d7a:	2900      	cmp	r1, #0
 8017d7c:	f000 80f5 	beq.w	8017f6a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22e>
 8017d80:	f9bb 0000 	ldrsh.w	r0, [fp]
 8017d84:	f9bb 2002 	ldrsh.w	r2, [fp, #2]
 8017d88:	eba9 0700 	sub.w	r7, r9, r0
 8017d8c:	ea87 7ce7 	eor.w	ip, r7, r7, asr #31
 8017d90:	ebac 7ce7 	sub.w	ip, ip, r7, asr #31
 8017d94:	f8bb 7004 	ldrh.w	r7, [fp, #4]
 8017d98:	ebaa 0802 	sub.w	r8, sl, r2
 8017d9c:	4407      	add	r7, r0
 8017d9e:	ea88 70e8 	eor.w	r0, r8, r8, asr #31
 8017da2:	eba0 70e8 	sub.w	r0, r0, r8, asr #31
 8017da6:	f8bb 8006 	ldrh.w	r8, [fp, #6]
 8017daa:	b23f      	sxth	r7, r7
 8017dac:	4490      	add	r8, r2
 8017dae:	eba9 0707 	sub.w	r7, r9, r7
 8017db2:	fa0f f888 	sxth.w	r8, r8
 8017db6:	ebaa 0808 	sub.w	r8, sl, r8
 8017dba:	2f00      	cmp	r7, #0
 8017dbc:	bfb8      	it	lt
 8017dbe:	427f      	neglt	r7, r7
 8017dc0:	f1b8 0f00 	cmp.w	r8, #0
 8017dc4:	bfb8      	it	lt
 8017dc6:	f1c8 0800 	rsblt	r8, r8, #0
 8017dca:	45bc      	cmp	ip, r7
 8017dcc:	bfcc      	ite	gt
 8017dce:	f10c 0701 	addgt.w	r7, ip, #1
 8017dd2:	3701      	addle	r7, #1
 8017dd4:	4540      	cmp	r0, r8
 8017dd6:	bfc8      	it	gt
 8017dd8:	f100 0801 	addgt.w	r8, r0, #1
 8017ddc:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8017de0:	f100 0001 	add.w	r0, r0, #1
 8017de4:	ea4f 0060 	mov.w	r0, r0, asr #1
 8017de8:	f04f 0202 	mov.w	r2, #2
 8017dec:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8017df0:	fb91 f1f2 	sdiv	r1, r1, r2
 8017df4:	eba3 0301 	sub.w	r3, r3, r1
 8017df8:	bfd8      	it	le
 8017dfa:	f108 0801 	addle.w	r8, r8, #1
 8017dfe:	9201      	str	r2, [sp, #4]
 8017e00:	930d      	str	r3, [sp, #52]	; 0x34
 8017e02:	f7ff fcfb 	bl	80177fc <_ZN8touchgfx7CWRUtil4sineEi>
 8017e06:	a92a      	add	r1, sp, #168	; 0xa8
 8017e08:	fb08 f808 	mul.w	r8, r8, r8
 8017e0c:	f841 0d70 	str.w	r0, [r1, #-112]!
 8017e10:	a80d      	add	r0, sp, #52	; 0x34
 8017e12:	f7ff fce7 	bl	80177e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017e16:	fb07 8707 	mla	r7, r7, r7, r8
 8017e1a:	f04f 0c20 	mov.w	ip, #32
 8017e1e:	fb90 f0fc 	sdiv	r0, r0, ip
 8017e22:	4340      	muls	r0, r0
 8017e24:	4287      	cmp	r7, r0
 8017e26:	9a01      	ldr	r2, [sp, #4]
 8017e28:	da04      	bge.n	8017e34 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xf8>
 8017e2a:	2401      	movs	r4, #1
 8017e2c:	4620      	mov	r0, r4
 8017e2e:	b02b      	add	sp, #172	; 0xac
 8017e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e34:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8017e36:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8017e38:	fb91 f3f2 	sdiv	r3, r1, r2
 8017e3c:	4403      	add	r3, r0
 8017e3e:	fb93 f3fc 	sdiv	r3, r3, ip
 8017e42:	f9bb 1000 	ldrsh.w	r1, [fp]
 8017e46:	f8bb 2004 	ldrh.w	r2, [fp, #4]
 8017e4a:	440a      	add	r2, r1
 8017e4c:	b212      	sxth	r2, r2
 8017e4e:	454a      	cmp	r2, r9
 8017e50:	bfa8      	it	ge
 8017e52:	464a      	movge	r2, r9
 8017e54:	428a      	cmp	r2, r1
 8017e56:	bfac      	ite	ge
 8017e58:	eba9 0902 	subge.w	r9, r9, r2
 8017e5c:	eba9 0901 	sublt.w	r9, r9, r1
 8017e60:	f8bb 2006 	ldrh.w	r2, [fp, #6]
 8017e64:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8017e68:	440a      	add	r2, r1
 8017e6a:	b212      	sxth	r2, r2
 8017e6c:	4552      	cmp	r2, sl
 8017e6e:	bfa8      	it	ge
 8017e70:	4652      	movge	r2, sl
 8017e72:	428a      	cmp	r2, r1
 8017e74:	bfac      	ite	ge
 8017e76:	ebaa 0a02 	subge.w	sl, sl, r2
 8017e7a:	ebaa 0a01 	sublt.w	sl, sl, r1
 8017e7e:	3301      	adds	r3, #1
 8017e80:	fb0a fa0a 	mul.w	sl, sl, sl
 8017e84:	fb09 a909 	mla	r9, r9, r9, sl
 8017e88:	435b      	muls	r3, r3
 8017e8a:	4599      	cmp	r9, r3
 8017e8c:	dccd      	bgt.n	8017e2a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xee>
 8017e8e:	465a      	mov	r2, fp
 8017e90:	4621      	mov	r1, r4
 8017e92:	a80e      	add	r0, sp, #56	; 0x38
 8017e94:	f013 fe16 	bl	802bac4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8017e98:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8017e9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017e9c:	9209      	str	r2, [sp, #36]	; 0x24
 8017e9e:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8017ea2:	930a      	str	r3, [sp, #40]	; 0x28
 8017ea4:	dd07      	ble.n	8017eb6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x17a>
 8017ea6:	2102      	movs	r1, #2
 8017ea8:	fb93 f3f1 	sdiv	r3, r3, r1
 8017eac:	4413      	add	r3, r2
 8017eae:	930a      	str	r3, [sp, #40]	; 0x28
 8017eb0:	fb93 f3f1 	sdiv	r3, r3, r1
 8017eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8017eb6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017eba:	4630      	mov	r0, r6
 8017ebc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8017ec0:	930b      	str	r3, [sp, #44]	; 0x2c
 8017ec2:	f894 7044 	ldrb.w	r7, [r4, #68]	; 0x44
 8017ec6:	f7ff fcb9 	bl	801783c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8017eca:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
 8017ece:	f04f 0a02 	mov.w	sl, #2
 8017ed2:	f849 0d74 	str.w	r0, [r9, #-116]!
 8017ed6:	a80b      	add	r0, sp, #44	; 0x2c
 8017ed8:	4649      	mov	r1, r9
 8017eda:	f7ff fc83 	bl	80177e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017ede:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8017ee0:	fb90 f0fa 	sdiv	r0, r0, sl
 8017ee4:	eb00 0b03 	add.w	fp, r0, r3
 8017ee8:	4630      	mov	r0, r6
 8017eea:	f7ff fcc6 	bl	801787a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8017eee:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 8017ef2:	017f      	lsls	r7, r7, #5
 8017ef4:	f848 0d78 	str.w	r0, [r8, #-120]!
 8017ef8:	a80b      	add	r0, sp, #44	; 0x2c
 8017efa:	4641      	mov	r1, r8
 8017efc:	f7ff fc72 	bl	80177e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017f00:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017f02:	fb90 f0fa 	sdiv	r0, r0, sl
 8017f06:	4659      	mov	r1, fp
 8017f08:	1a12      	subs	r2, r2, r0
 8017f0a:	a80e      	add	r0, sp, #56	; 0x38
 8017f0c:	f013 ff5a 	bl	802bdc4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8017f10:	f106 0a20 	add.w	sl, r6, #32
 8017f14:	bb67      	cbnz	r7, 8017f70 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x234>
 8017f16:	46b3      	mov	fp, r6
 8017f18:	45aa      	cmp	sl, r5
 8017f1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017f1c:	dc33      	bgt.n	8017f86 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x24a>
 8017f1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017f20:	4650      	mov	r0, sl
 8017f22:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8017f26:	920b      	str	r2, [sp, #44]	; 0x2c
 8017f28:	f7ff fc88 	bl	801783c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8017f2c:	4641      	mov	r1, r8
 8017f2e:	900c      	str	r0, [sp, #48]	; 0x30
 8017f30:	a80b      	add	r0, sp, #44	; 0x2c
 8017f32:	f7ff fc57 	bl	80177e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017f36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8017f38:	2302      	movs	r3, #2
 8017f3a:	fb90 f0f3 	sdiv	r0, r0, r3
 8017f3e:	eb00 0b02 	add.w	fp, r0, r2
 8017f42:	4650      	mov	r0, sl
 8017f44:	f7ff fc99 	bl	801787a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8017f48:	4649      	mov	r1, r9
 8017f4a:	900d      	str	r0, [sp, #52]	; 0x34
 8017f4c:	a80b      	add	r0, sp, #44	; 0x2c
 8017f4e:	f7ff fc49 	bl	80177e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017f52:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017f54:	2302      	movs	r3, #2
 8017f56:	4659      	mov	r1, fp
 8017f58:	fb90 f0f3 	sdiv	r0, r0, r3
 8017f5c:	1a12      	subs	r2, r2, r0
 8017f5e:	a80e      	add	r0, sp, #56	; 0x38
 8017f60:	46d3      	mov	fp, sl
 8017f62:	f013 ff7c 	bl	802be5e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017f66:	44ba      	add	sl, r7
 8017f68:	e7d6      	b.n	8017f18 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1dc>
 8017f6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8017f6e:	e768      	b.n	8017e42 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x106>
 8017f70:	fb9a f2f7 	sdiv	r2, sl, r7
 8017f74:	fb07 a212 	mls	r2, r7, r2, sl
 8017f78:	1aba      	subs	r2, r7, r2
 8017f7a:	fb92 f1f7 	sdiv	r1, r2, r7
 8017f7e:	fb07 2211 	mls	r2, r7, r1, r2
 8017f82:	4492      	add	sl, r2
 8017f84:	e7c7      	b.n	8017f16 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1da>
 8017f86:	45ab      	cmp	fp, r5
 8017f88:	da23      	bge.n	8017fd2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x296>
 8017f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f8c:	4628      	mov	r0, r5
 8017f8e:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8017f92:	920b      	str	r2, [sp, #44]	; 0x2c
 8017f94:	f7ff fc52 	bl	801783c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8017f98:	4641      	mov	r1, r8
 8017f9a:	900c      	str	r0, [sp, #48]	; 0x30
 8017f9c:	a80b      	add	r0, sp, #44	; 0x2c
 8017f9e:	f7ff fc21 	bl	80177e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017fa2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8017fa4:	f04f 0a02 	mov.w	sl, #2
 8017fa8:	fb90 f0fa 	sdiv	r0, r0, sl
 8017fac:	4403      	add	r3, r0
 8017fae:	4628      	mov	r0, r5
 8017fb0:	9301      	str	r3, [sp, #4]
 8017fb2:	f7ff fc62 	bl	801787a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8017fb6:	4649      	mov	r1, r9
 8017fb8:	900d      	str	r0, [sp, #52]	; 0x34
 8017fba:	a80b      	add	r0, sp, #44	; 0x2c
 8017fbc:	f7ff fc12 	bl	80177e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017fc0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017fc2:	9b01      	ldr	r3, [sp, #4]
 8017fc4:	fb90 f0fa 	sdiv	r0, r0, sl
 8017fc8:	4619      	mov	r1, r3
 8017fca:	1a12      	subs	r2, r2, r0
 8017fcc:	a80e      	add	r0, sp, #56	; 0x38
 8017fce:	f013 ff46 	bl	802be5e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017fd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017fd4:	b99b      	cbnz	r3, 8017ffe <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2c2>
 8017fd6:	1bad      	subs	r5, r5, r6
 8017fd8:	f5b5 5f34 	cmp.w	r5, #11520	; 0x2d00
 8017fdc:	da04      	bge.n	8017fe8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2ac>
 8017fde:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	; 0x2c
 8017fe2:	a80e      	add	r0, sp, #56	; 0x38
 8017fe4:	f013 ff3b 	bl	802be5e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017fe8:	21ff      	movs	r1, #255	; 0xff
 8017fea:	a80e      	add	r0, sp, #56	; 0x38
 8017fec:	f013 fe26 	bl	802bc3c <_ZN8touchgfx6Canvas6renderEh>
 8017ff0:	4604      	mov	r4, r0
 8017ff2:	4b8a      	ldr	r3, [pc, #552]	; (801821c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4e0>)
 8017ff4:	930e      	str	r3, [sp, #56]	; 0x38
 8017ff6:	a816      	add	r0, sp, #88	; 0x58
 8017ff8:	f001 fa74 	bl	80194e4 <_ZN8touchgfx7OutlineD1Ev>
 8017ffc:	e716      	b.n	8017e2c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xf0>
 8017ffe:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8018002:	429a      	cmp	r2, r3
 8018004:	f0c0 8107 	bcc.w	8018216 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4da>
 8018008:	1bab      	subs	r3, r5, r6
 801800a:	f894 a045 	ldrb.w	sl, [r4, #69]	; 0x45
 801800e:	9301      	str	r3, [sp, #4]
 8018010:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8018014:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
 8018018:	da43      	bge.n	80180a2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x366>
 801801a:	4628      	mov	r0, r5
 801801c:	f7ff fc0e 	bl	801783c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018020:	4649      	mov	r1, r9
 8018022:	900d      	str	r0, [sp, #52]	; 0x34
 8018024:	a809      	add	r0, sp, #36	; 0x24
 8018026:	f7ff fbdd 	bl	80177e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801802a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801802c:	18c3      	adds	r3, r0, r3
 801802e:	4628      	mov	r0, r5
 8018030:	9303      	str	r3, [sp, #12]
 8018032:	f7ff fc22 	bl	801787a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8018036:	4649      	mov	r1, r9
 8018038:	900d      	str	r0, [sp, #52]	; 0x34
 801803a:	a809      	add	r0, sp, #36	; 0x24
 801803c:	f7ff fbd2 	bl	80177e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018040:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018042:	f505 52b4 	add.w	r2, r5, #5760	; 0x1680
 8018046:	1a1b      	subs	r3, r3, r0
 8018048:	9302      	str	r3, [sp, #8]
 801804a:	9204      	str	r2, [sp, #16]
 801804c:	eb0a 0305 	add.w	r3, sl, r5
 8018050:	9a04      	ldr	r2, [sp, #16]
 8018052:	4293      	cmp	r3, r2
 8018054:	da25      	bge.n	80180a2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x366>
 8018056:	4618      	mov	r0, r3
 8018058:	9306      	str	r3, [sp, #24]
 801805a:	f7ff fbef 	bl	801783c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801805e:	4649      	mov	r1, r9
 8018060:	900d      	str	r0, [sp, #52]	; 0x34
 8018062:	a80a      	add	r0, sp, #40	; 0x28
 8018064:	f7ff fbbe 	bl	80177e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018068:	9b03      	ldr	r3, [sp, #12]
 801806a:	2202      	movs	r2, #2
 801806c:	fb90 f0f2 	sdiv	r0, r0, r2
 8018070:	18c3      	adds	r3, r0, r3
 8018072:	9305      	str	r3, [sp, #20]
 8018074:	9b06      	ldr	r3, [sp, #24]
 8018076:	9207      	str	r2, [sp, #28]
 8018078:	4618      	mov	r0, r3
 801807a:	f7ff fbfe 	bl	801787a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801807e:	a92a      	add	r1, sp, #168	; 0xa8
 8018080:	f841 0d78 	str.w	r0, [r1, #-120]!
 8018084:	a80a      	add	r0, sp, #40	; 0x28
 8018086:	f7ff fbad 	bl	80177e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801808a:	9b02      	ldr	r3, [sp, #8]
 801808c:	9a07      	ldr	r2, [sp, #28]
 801808e:	9905      	ldr	r1, [sp, #20]
 8018090:	fb90 f2f2 	sdiv	r2, r0, r2
 8018094:	a80e      	add	r0, sp, #56	; 0x38
 8018096:	1a9a      	subs	r2, r3, r2
 8018098:	f013 fee1 	bl	802be5e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801809c:	9b06      	ldr	r3, [sp, #24]
 801809e:	4453      	add	r3, sl
 80180a0:	e7d6      	b.n	8018050 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x314>
 80180a2:	45ab      	cmp	fp, r5
 80180a4:	da25      	bge.n	80180f2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3b6>
 80180a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80180aa:	4628      	mov	r0, r5
 80180ac:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 80180b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80180b2:	f7ff fbc3 	bl	801783c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80180b6:	4641      	mov	r1, r8
 80180b8:	900c      	str	r0, [sp, #48]	; 0x30
 80180ba:	a80b      	add	r0, sp, #44	; 0x2c
 80180bc:	f7ff fb92 	bl	80177e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80180c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80180c2:	2202      	movs	r2, #2
 80180c4:	fb90 f0f2 	sdiv	r0, r0, r2
 80180c8:	eb00 0903 	add.w	r9, r0, r3
 80180cc:	4628      	mov	r0, r5
 80180ce:	9202      	str	r2, [sp, #8]
 80180d0:	f7ff fbd3 	bl	801787a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80180d4:	a92a      	add	r1, sp, #168	; 0xa8
 80180d6:	f841 0d74 	str.w	r0, [r1, #-116]!
 80180da:	a80b      	add	r0, sp, #44	; 0x2c
 80180dc:	f7ff fb82 	bl	80177e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80180e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80180e2:	9a02      	ldr	r2, [sp, #8]
 80180e4:	fb90 f2f2 	sdiv	r2, r0, r2
 80180e8:	4649      	mov	r1, r9
 80180ea:	1a9a      	subs	r2, r3, r2
 80180ec:	a80e      	add	r0, sp, #56	; 0x38
 80180ee:	f013 feb6 	bl	802be5e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80180f2:	46d9      	mov	r9, fp
 80180f4:	2502      	movs	r5, #2
 80180f6:	45b1      	cmp	r9, r6
 80180f8:	db25      	blt.n	8018146 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x40a>
 80180fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80180fe:	4648      	mov	r0, r9
 8018100:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8018104:	930b      	str	r3, [sp, #44]	; 0x2c
 8018106:	f7ff fb99 	bl	801783c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801810a:	4641      	mov	r1, r8
 801810c:	900c      	str	r0, [sp, #48]	; 0x30
 801810e:	a80b      	add	r0, sp, #44	; 0x2c
 8018110:	f7ff fb68 	bl	80177e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018114:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8018116:	fb90 f0f5 	sdiv	r0, r0, r5
 801811a:	eb00 0b03 	add.w	fp, r0, r3
 801811e:	4648      	mov	r0, r9
 8018120:	f7ff fbab 	bl	801787a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8018124:	a90d      	add	r1, sp, #52	; 0x34
 8018126:	900d      	str	r0, [sp, #52]	; 0x34
 8018128:	a80b      	add	r0, sp, #44	; 0x2c
 801812a:	f7ff fb5b 	bl	80177e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801812e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8018130:	fb90 f0f5 	sdiv	r0, r0, r5
 8018134:	4659      	mov	r1, fp
 8018136:	1a12      	subs	r2, r2, r0
 8018138:	a80e      	add	r0, sp, #56	; 0x38
 801813a:	46cb      	mov	fp, r9
 801813c:	f013 fe8f 	bl	802be5e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018140:	eba9 0907 	sub.w	r9, r9, r7
 8018144:	e7d7      	b.n	80180f6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3ba>
 8018146:	455e      	cmp	r6, fp
 8018148:	da22      	bge.n	8018190 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x454>
 801814a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801814e:	4630      	mov	r0, r6
 8018150:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8018154:	930b      	str	r3, [sp, #44]	; 0x2c
 8018156:	f7ff fb71 	bl	801783c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801815a:	4641      	mov	r1, r8
 801815c:	900c      	str	r0, [sp, #48]	; 0x30
 801815e:	a80b      	add	r0, sp, #44	; 0x2c
 8018160:	f7ff fb40 	bl	80177e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018164:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8018166:	2502      	movs	r5, #2
 8018168:	fb90 f0f5 	sdiv	r0, r0, r5
 801816c:	4407      	add	r7, r0
 801816e:	4630      	mov	r0, r6
 8018170:	f7ff fb83 	bl	801787a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8018174:	a92a      	add	r1, sp, #168	; 0xa8
 8018176:	f841 0d74 	str.w	r0, [r1, #-116]!
 801817a:	a80b      	add	r0, sp, #44	; 0x2c
 801817c:	f7ff fb32 	bl	80177e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018180:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8018182:	fb90 f0f5 	sdiv	r0, r0, r5
 8018186:	4639      	mov	r1, r7
 8018188:	1a12      	subs	r2, r2, r0
 801818a:	a80e      	add	r0, sp, #56	; 0x38
 801818c:	f013 fe67 	bl	802be5e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018190:	9b01      	ldr	r3, [sp, #4]
 8018192:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8018196:	f6bf af27 	bge.w	8017fe8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2ac>
 801819a:	4630      	mov	r0, r6
 801819c:	f7ff fb4e 	bl	801783c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80181a0:	ad2a      	add	r5, sp, #168	; 0xa8
 80181a2:	f04f 0b02 	mov.w	fp, #2
 80181a6:	f845 0d74 	str.w	r0, [r5, #-116]!
 80181aa:	a809      	add	r0, sp, #36	; 0x24
 80181ac:	4629      	mov	r1, r5
 80181ae:	f7ff fb19 	bl	80177e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80181b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80181b4:	eb00 0903 	add.w	r9, r0, r3
 80181b8:	4630      	mov	r0, r6
 80181ba:	f7ff fb5e 	bl	801787a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80181be:	4629      	mov	r1, r5
 80181c0:	900d      	str	r0, [sp, #52]	; 0x34
 80181c2:	a809      	add	r0, sp, #36	; 0x24
 80181c4:	f7ff fb0e 	bl	80177e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80181c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80181ca:	f5a6 54b4 	sub.w	r4, r6, #5760	; 0x1680
 80181ce:	eba3 0800 	sub.w	r8, r3, r0
 80181d2:	4454      	add	r4, sl
 80181d4:	42a6      	cmp	r6, r4
 80181d6:	f77f af07 	ble.w	8017fe8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2ac>
 80181da:	4620      	mov	r0, r4
 80181dc:	f7ff fb2e 	bl	801783c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80181e0:	4629      	mov	r1, r5
 80181e2:	900d      	str	r0, [sp, #52]	; 0x34
 80181e4:	a80a      	add	r0, sp, #40	; 0x28
 80181e6:	f7ff fafd 	bl	80177e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80181ea:	fb90 f0fb 	sdiv	r0, r0, fp
 80181ee:	eb00 0709 	add.w	r7, r0, r9
 80181f2:	4620      	mov	r0, r4
 80181f4:	f7ff fb41 	bl	801787a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80181f8:	a90c      	add	r1, sp, #48	; 0x30
 80181fa:	900c      	str	r0, [sp, #48]	; 0x30
 80181fc:	a80a      	add	r0, sp, #40	; 0x28
 80181fe:	f7ff faf1 	bl	80177e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018202:	4639      	mov	r1, r7
 8018204:	fb90 f2fb 	sdiv	r2, r0, fp
 8018208:	a80e      	add	r0, sp, #56	; 0x38
 801820a:	eba8 0202 	sub.w	r2, r8, r2
 801820e:	f013 fe26 	bl	802be5e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018212:	4454      	add	r4, sl
 8018214:	e7de      	b.n	80181d4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x498>
 8018216:	2400      	movs	r4, #0
 8018218:	e6eb      	b.n	8017ff2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2b6>
 801821a:	bf00      	nop
 801821c:	0802fb58 	.word	0x0802fb58

08018220 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8018220:	b510      	push	{r4, lr}
 8018222:	2200      	movs	r2, #0
 8018224:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8018228:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 801822c:	8002      	strh	r2, [r0, #0]
 801822e:	8042      	strh	r2, [r0, #2]
 8018230:	8084      	strh	r4, [r0, #4]
 8018232:	80c1      	strh	r1, [r0, #6]
 8018234:	bd10      	pop	{r4, pc}
	...

08018238 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8018238:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801823a:	6803      	ldr	r3, [r0, #0]
 801823c:	460d      	mov	r5, r1
 801823e:	4604      	mov	r4, r0
 8018240:	4601      	mov	r1, r0
 8018242:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018244:	a802      	add	r0, sp, #8
 8018246:	4798      	blx	r3
 8018248:	6828      	ldr	r0, [r5, #0]
 801824a:	6869      	ldr	r1, [r5, #4]
 801824c:	466b      	mov	r3, sp
 801824e:	c303      	stmia	r3!, {r0, r1}
 8018250:	4668      	mov	r0, sp
 8018252:	4619      	mov	r1, r3
 8018254:	f7fe faa4 	bl	80167a0 <_ZN8touchgfx4RectaNERKS0_>
 8018258:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801825a:	b188      	cbz	r0, 8018280 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801825c:	6803      	ldr	r3, [r0, #0]
 801825e:	1d21      	adds	r1, r4, #4
 8018260:	68db      	ldr	r3, [r3, #12]
 8018262:	4798      	blx	r3
 8018264:	b160      	cbz	r0, 8018280 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8018266:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801826a:	2b00      	cmp	r3, #0
 801826c:	dd08      	ble.n	8018280 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801826e:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8018272:	2d00      	cmp	r5, #0
 8018274:	dd04      	ble.n	8018280 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8018276:	4a2b      	ldr	r2, [pc, #172]	; (8018324 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 8018278:	7812      	ldrb	r2, [r2, #0]
 801827a:	b11a      	cbz	r2, 8018284 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 801827c:	2a01      	cmp	r2, #1
 801827e:	d029      	beq.n	80182d4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 8018280:	b004      	add	sp, #16
 8018282:	bd70      	pop	{r4, r5, r6, pc}
 8018284:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018288:	441d      	add	r5, r3
 801828a:	b2ad      	uxth	r5, r5
 801828c:	b22e      	sxth	r6, r5
 801828e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8018292:	42b3      	cmp	r3, r6
 8018294:	daf4      	bge.n	8018280 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8018296:	6823      	ldr	r3, [r4, #0]
 8018298:	4669      	mov	r1, sp
 801829a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801829c:	4620      	mov	r0, r4
 801829e:	4798      	blx	r3
 80182a0:	b940      	cbnz	r0, 80182b4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 80182a2:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80182a6:	2b01      	cmp	r3, #1
 80182a8:	d004      	beq.n	80182b4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 80182aa:	3301      	adds	r3, #1
 80182ac:	105b      	asrs	r3, r3, #1
 80182ae:	f8ad 3006 	strh.w	r3, [sp, #6]
 80182b2:	e7f0      	b.n	8018296 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 80182b4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80182b8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80182bc:	4413      	add	r3, r2
 80182be:	b29b      	uxth	r3, r3
 80182c0:	441a      	add	r2, r3
 80182c2:	b212      	sxth	r2, r2
 80182c4:	4296      	cmp	r6, r2
 80182c6:	f8ad 3002 	strh.w	r3, [sp, #2]
 80182ca:	dae0      	bge.n	801828e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 80182cc:	1aeb      	subs	r3, r5, r3
 80182ce:	f8ad 3006 	strh.w	r3, [sp, #6]
 80182d2:	e7dc      	b.n	801828e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 80182d4:	f8bd 5000 	ldrh.w	r5, [sp]
 80182d8:	441d      	add	r5, r3
 80182da:	b2ad      	uxth	r5, r5
 80182dc:	b22e      	sxth	r6, r5
 80182de:	f9bd 3000 	ldrsh.w	r3, [sp]
 80182e2:	42b3      	cmp	r3, r6
 80182e4:	dacc      	bge.n	8018280 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80182e6:	6823      	ldr	r3, [r4, #0]
 80182e8:	4669      	mov	r1, sp
 80182ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80182ec:	4620      	mov	r0, r4
 80182ee:	4798      	blx	r3
 80182f0:	b940      	cbnz	r0, 8018304 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 80182f2:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80182f6:	2b01      	cmp	r3, #1
 80182f8:	d004      	beq.n	8018304 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 80182fa:	3301      	adds	r3, #1
 80182fc:	105b      	asrs	r3, r3, #1
 80182fe:	f8ad 3004 	strh.w	r3, [sp, #4]
 8018302:	e7f0      	b.n	80182e6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8018304:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8018308:	f8bd 3000 	ldrh.w	r3, [sp]
 801830c:	4413      	add	r3, r2
 801830e:	b29b      	uxth	r3, r3
 8018310:	441a      	add	r2, r3
 8018312:	b212      	sxth	r2, r2
 8018314:	4296      	cmp	r6, r2
 8018316:	f8ad 3000 	strh.w	r3, [sp]
 801831a:	dae0      	bge.n	80182de <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 801831c:	1aeb      	subs	r3, r5, r3
 801831e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8018322:	e7dc      	b.n	80182de <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8018324:	2000af40 	.word	0x2000af40

08018328 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8018328:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801832a:	6803      	ldr	r3, [r0, #0]
 801832c:	4604      	mov	r4, r0
 801832e:	4601      	mov	r1, r0
 8018330:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018332:	4668      	mov	r0, sp
 8018334:	4798      	blx	r3
 8018336:	2100      	movs	r1, #0
 8018338:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 801833c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8018340:	9102      	str	r1, [sp, #8]
 8018342:	4668      	mov	r0, sp
 8018344:	a902      	add	r1, sp, #8
 8018346:	f8ad 200c 	strh.w	r2, [sp, #12]
 801834a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801834e:	f7fe fa27 	bl	80167a0 <_ZN8touchgfx4RectaNERKS0_>
 8018352:	6823      	ldr	r3, [r4, #0]
 8018354:	4669      	mov	r1, sp
 8018356:	691b      	ldr	r3, [r3, #16]
 8018358:	4620      	mov	r0, r4
 801835a:	4798      	blx	r3
 801835c:	b004      	add	sp, #16
 801835e:	bd10      	pop	{r4, pc}

08018360 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8018360:	2101      	movs	r1, #1
 8018362:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8018366:	490b      	ldr	r1, [pc, #44]	; (8018394 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 8018368:	6001      	str	r1, [r0, #0]
 801836a:	2200      	movs	r2, #0
 801836c:	21ff      	movs	r1, #255	; 0xff
 801836e:	8082      	strh	r2, [r0, #4]
 8018370:	80c2      	strh	r2, [r0, #6]
 8018372:	8102      	strh	r2, [r0, #8]
 8018374:	8142      	strh	r2, [r0, #10]
 8018376:	8182      	strh	r2, [r0, #12]
 8018378:	81c2      	strh	r2, [r0, #14]
 801837a:	8202      	strh	r2, [r0, #16]
 801837c:	8242      	strh	r2, [r0, #18]
 801837e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8018382:	61c2      	str	r2, [r0, #28]
 8018384:	8402      	strh	r2, [r0, #32]
 8018386:	8442      	strh	r2, [r0, #34]	; 0x22
 8018388:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801838c:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 8018390:	6282      	str	r2, [r0, #40]	; 0x28
 8018392:	4770      	bx	lr
 8018394:	0802f1e8 	.word	0x0802f1e8

08018398 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8018398:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 801839c:	4770      	bx	lr

0801839e <_ZN8touchgfx14AbstractButton13executeActionEv>:
 801839e:	b510      	push	{r4, lr}
 80183a0:	4604      	mov	r4, r0
 80183a2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80183a4:	b150      	cbz	r0, 80183bc <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80183a6:	6803      	ldr	r3, [r0, #0]
 80183a8:	68db      	ldr	r3, [r3, #12]
 80183aa:	4798      	blx	r3
 80183ac:	b130      	cbz	r0, 80183bc <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80183ae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80183b0:	6803      	ldr	r3, [r0, #0]
 80183b2:	4621      	mov	r1, r4
 80183b4:	689b      	ldr	r3, [r3, #8]
 80183b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80183ba:	4718      	bx	r3
 80183bc:	bd10      	pop	{r4, pc}

080183be <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 80183be:	b570      	push	{r4, r5, r6, lr}
 80183c0:	790b      	ldrb	r3, [r1, #4]
 80183c2:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	bf0c      	ite	eq
 80183ca:	2301      	moveq	r3, #1
 80183cc:	2300      	movne	r3, #0
 80183ce:	4604      	mov	r4, r0
 80183d0:	460e      	mov	r6, r1
 80183d2:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 80183d6:	d109      	bne.n	80183ec <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 80183d8:	b14d      	cbz	r5, 80183ee <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 80183da:	7933      	ldrb	r3, [r6, #4]
 80183dc:	2b01      	cmp	r3, #1
 80183de:	d10c      	bne.n	80183fa <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80183e0:	6823      	ldr	r3, [r4, #0]
 80183e2:	4620      	mov	r0, r4
 80183e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80183e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80183ea:	4718      	bx	r3
 80183ec:	b12d      	cbz	r5, 80183fa <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80183ee:	6823      	ldr	r3, [r4, #0]
 80183f0:	4620      	mov	r0, r4
 80183f2:	695b      	ldr	r3, [r3, #20]
 80183f4:	4798      	blx	r3
 80183f6:	2d00      	cmp	r5, #0
 80183f8:	d1ef      	bne.n	80183da <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 80183fa:	bd70      	pop	{r4, r5, r6, pc}

080183fc <_ZN8touchgfx13TextureMapper21setRenderingAlgorithmENS0_18RenderingAlgorithmE>:
 80183fc:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8018400:	4770      	bx	lr

08018402 <_ZNK8touchgfx13TextureMapper21getRenderingAlgorithmEv>:
 8018402:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 8018406:	4770      	bx	lr

08018408 <_ZN8touchgfx13TextureMapper9setXAngleEf>:
 8018408:	6802      	ldr	r2, [r0, #0]
 801840a:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 801840e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8018410:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 8018414:	4710      	bx	r2

08018416 <_ZN8touchgfx13TextureMapper9setYAngleEf>:
 8018416:	6802      	ldr	r2, [r0, #0]
 8018418:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 801841c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 801841e:	eef0 0a40 	vmov.f32	s1, s0
 8018422:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8018426:	4710      	bx	r2

08018428 <_ZN8touchgfx13TextureMapper9setZAngleEf>:
 8018428:	6802      	ldr	r2, [r0, #0]
 801842a:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 801842e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8018430:	eeb0 1a40 	vmov.f32	s2, s0
 8018434:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8018438:	4710      	bx	r2

0801843a <_ZN8touchgfx13TextureMapper12updateXAngleEf>:
 801843a:	6802      	ldr	r2, [r0, #0]
 801843c:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 8018440:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8018442:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 8018446:	4710      	bx	r2

08018448 <_ZN8touchgfx13TextureMapper12updateYAngleEf>:
 8018448:	6802      	ldr	r2, [r0, #0]
 801844a:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 801844e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8018450:	eef0 0a40 	vmov.f32	s1, s0
 8018454:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8018458:	4710      	bx	r2

0801845a <_ZN8touchgfx13TextureMapper12updateZAngleEf>:
 801845a:	6802      	ldr	r2, [r0, #0]
 801845c:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 8018460:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8018462:	eeb0 1a40 	vmov.f32	s2, s0
 8018466:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 801846a:	4710      	bx	r2

0801846c <_ZNK8touchgfx13TextureMapper9getXAngleEv>:
 801846c:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8018470:	4770      	bx	lr

08018472 <_ZNK8touchgfx13TextureMapper9getYAngleEv>:
 8018472:	ed90 0a0e 	vldr	s0, [r0, #56]	; 0x38
 8018476:	4770      	bx	lr

08018478 <_ZNK8touchgfx13TextureMapper9getZAngleEv>:
 8018478:	ed90 0a0f 	vldr	s0, [r0, #60]	; 0x3c
 801847c:	4770      	bx	lr

0801847e <_ZNK8touchgfx13TextureMapper8getScaleEv>:
 801847e:	ed90 0a10 	vldr	s0, [r0, #64]	; 0x40
 8018482:	4770      	bx	lr

08018484 <_ZNK8touchgfx13TextureMapper9getOrigoXEv>:
 8018484:	ed90 0a11 	vldr	s0, [r0, #68]	; 0x44
 8018488:	4770      	bx	lr

0801848a <_ZNK8touchgfx13TextureMapper9getOrigoYEv>:
 801848a:	ed90 0a12 	vldr	s0, [r0, #72]	; 0x48
 801848e:	4770      	bx	lr

08018490 <_ZNK8touchgfx13TextureMapper9getOrigoZEv>:
 8018490:	ed90 0a13 	vldr	s0, [r0, #76]	; 0x4c
 8018494:	4770      	bx	lr

08018496 <_ZNK8touchgfx13TextureMapper10getCameraXEv>:
 8018496:	ed90 0a14 	vldr	s0, [r0, #80]	; 0x50
 801849a:	4770      	bx	lr

0801849c <_ZNK8touchgfx13TextureMapper10getCameraYEv>:
 801849c:	ed90 0a15 	vldr	s0, [r0, #84]	; 0x54
 80184a0:	4770      	bx	lr

080184a2 <_ZNK8touchgfx13TextureMapper17getCameraDistanceEv>:
 80184a2:	ed90 0a16 	vldr	s0, [r0, #88]	; 0x58
 80184a6:	4770      	bx	lr

080184a8 <_ZN8touchgfx13TextureMapper17setBitmapPositionEii>:
 80184a8:	ee07 2a90 	vmov	s15, r2
 80184ac:	6803      	ldr	r3, [r0, #0]
 80184ae:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 80184b2:	ee07 1a90 	vmov	s15, r1
 80184b6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80184ba:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80184be:	4718      	bx	r3

080184c0 <_ZNK8touchgfx13TextureMapper18getBitmapPositionXEv>:
 80184c0:	ed90 0a0b 	vldr	s0, [r0, #44]	; 0x2c
 80184c4:	4770      	bx	lr

080184c6 <_ZNK8touchgfx13TextureMapper18getBitmapPositionYEv>:
 80184c6:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 80184ca:	4770      	bx	lr

080184cc <_ZNK8touchgfx13TextureMapper5getX0Ev>:
 80184cc:	ed90 0a17 	vldr	s0, [r0, #92]	; 0x5c
 80184d0:	4770      	bx	lr

080184d2 <_ZNK8touchgfx13TextureMapper5getX1Ev>:
 80184d2:	ed90 0a1a 	vldr	s0, [r0, #104]	; 0x68
 80184d6:	4770      	bx	lr

080184d8 <_ZNK8touchgfx13TextureMapper5getX2Ev>:
 80184d8:	ed90 0a1d 	vldr	s0, [r0, #116]	; 0x74
 80184dc:	4770      	bx	lr

080184de <_ZNK8touchgfx13TextureMapper5getX3Ev>:
 80184de:	ed90 0a20 	vldr	s0, [r0, #128]	; 0x80
 80184e2:	4770      	bx	lr

080184e4 <_ZNK8touchgfx13TextureMapper5getY0Ev>:
 80184e4:	ed90 0a18 	vldr	s0, [r0, #96]	; 0x60
 80184e8:	4770      	bx	lr

080184ea <_ZNK8touchgfx13TextureMapper5getY1Ev>:
 80184ea:	ed90 0a1b 	vldr	s0, [r0, #108]	; 0x6c
 80184ee:	4770      	bx	lr

080184f0 <_ZNK8touchgfx13TextureMapper5getY2Ev>:
 80184f0:	ed90 0a1e 	vldr	s0, [r0, #120]	; 0x78
 80184f4:	4770      	bx	lr

080184f6 <_ZNK8touchgfx13TextureMapper5getY3Ev>:
 80184f6:	ed90 0a21 	vldr	s0, [r0, #132]	; 0x84
 80184fa:	4770      	bx	lr

080184fc <_ZNK8touchgfx13TextureMapper5getZ0Ev>:
 80184fc:	ed90 0a19 	vldr	s0, [r0, #100]	; 0x64
 8018500:	4770      	bx	lr

08018502 <_ZNK8touchgfx13TextureMapper5getZ1Ev>:
 8018502:	ed90 0a1c 	vldr	s0, [r0, #112]	; 0x70
 8018506:	4770      	bx	lr

08018508 <_ZNK8touchgfx13TextureMapper5getZ2Ev>:
 8018508:	ed90 0a1f 	vldr	s0, [r0, #124]	; 0x7c
 801850c:	4770      	bx	lr

0801850e <_ZNK8touchgfx13TextureMapper5getZ3Ev>:
 801850e:	ed90 0a22 	vldr	s0, [r0, #136]	; 0x88
 8018512:	4770      	bx	lr

08018514 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>:
 8018514:	b510      	push	{r4, lr}
 8018516:	ed2d 8b04 	vpush	{d8-d9}
 801851a:	6803      	ldr	r3, [r0, #0]
 801851c:	4604      	mov	r4, r0
 801851e:	699b      	ldr	r3, [r3, #24]
 8018520:	eeb0 8a40 	vmov.f32	s16, s0
 8018524:	eef0 8a60 	vmov.f32	s17, s1
 8018528:	eeb0 9a41 	vmov.f32	s18, s2
 801852c:	4798      	blx	r3
 801852e:	6823      	ldr	r3, [r4, #0]
 8018530:	4620      	mov	r0, r4
 8018532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018534:	eeb0 1a49 	vmov.f32	s2, s18
 8018538:	eef0 0a68 	vmov.f32	s1, s17
 801853c:	eeb0 0a48 	vmov.f32	s0, s16
 8018540:	4798      	blx	r3
 8018542:	ecbd 8b04 	vpop	{d8-d9}
 8018546:	6823      	ldr	r3, [r4, #0]
 8018548:	4620      	mov	r0, r4
 801854a:	699b      	ldr	r3, [r3, #24]
 801854c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018550:	4718      	bx	r3

08018552 <_ZN8touchgfx13TextureMapper11updateScaleEf>:
 8018552:	b510      	push	{r4, lr}
 8018554:	ed2d 8b02 	vpush	{d8}
 8018558:	6803      	ldr	r3, [r0, #0]
 801855a:	4604      	mov	r4, r0
 801855c:	699b      	ldr	r3, [r3, #24]
 801855e:	eeb0 8a40 	vmov.f32	s16, s0
 8018562:	4798      	blx	r3
 8018564:	6823      	ldr	r3, [r4, #0]
 8018566:	4620      	mov	r0, r4
 8018568:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801856c:	eeb0 0a48 	vmov.f32	s0, s16
 8018570:	4798      	blx	r3
 8018572:	ecbd 8b02 	vpop	{d8}
 8018576:	6823      	ldr	r3, [r4, #0]
 8018578:	4620      	mov	r0, r4
 801857a:	699b      	ldr	r3, [r3, #24]
 801857c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018580:	4718      	bx	r3

08018582 <_ZNK8touchgfx13TextureMapper12getSolidRectEv>:
 8018582:	2200      	movs	r2, #0
 8018584:	8002      	strh	r2, [r0, #0]
 8018586:	8042      	strh	r2, [r0, #2]
 8018588:	8082      	strh	r2, [r0, #4]
 801858a:	80c2      	strh	r2, [r0, #6]
 801858c:	4770      	bx	lr
	...

08018590 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>:
 8018590:	b538      	push	{r3, r4, r5, lr}
 8018592:	2500      	movs	r5, #0
 8018594:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8018598:	2301      	movs	r3, #1
 801859a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
 801859e:	4b1f      	ldr	r3, [pc, #124]	; (801861c <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x8c>)
 80185a0:	8085      	strh	r5, [r0, #4]
 80185a2:	80c5      	strh	r5, [r0, #6]
 80185a4:	8105      	strh	r5, [r0, #8]
 80185a6:	8145      	strh	r5, [r0, #10]
 80185a8:	8185      	strh	r5, [r0, #12]
 80185aa:	81c5      	strh	r5, [r0, #14]
 80185ac:	8205      	strh	r5, [r0, #16]
 80185ae:	8245      	strh	r5, [r0, #18]
 80185b0:	61c5      	str	r5, [r0, #28]
 80185b2:	8405      	strh	r5, [r0, #32]
 80185b4:	8445      	strh	r5, [r0, #34]	; 0x22
 80185b6:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 80185ba:	6003      	str	r3, [r0, #0]
 80185bc:	880b      	ldrh	r3, [r1, #0]
 80185be:	84c3      	strh	r3, [r0, #38]	; 0x26
 80185c0:	23ff      	movs	r3, #255	; 0xff
 80185c2:	4604      	mov	r4, r0
 80185c4:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 80185c8:	f000 ff16 	bl	80193f8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80185cc:	4b14      	ldr	r3, [pc, #80]	; (8018620 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x90>)
 80185ce:	6023      	str	r3, [r4, #0]
 80185d0:	2300      	movs	r3, #0
 80185d2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80185d6:	4913      	ldr	r1, [pc, #76]	; (8018624 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x94>)
 80185d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80185da:	6323      	str	r3, [r4, #48]	; 0x30
 80185dc:	6363      	str	r3, [r4, #52]	; 0x34
 80185de:	63a3      	str	r3, [r4, #56]	; 0x38
 80185e0:	63e3      	str	r3, [r4, #60]	; 0x3c
 80185e2:	6463      	str	r3, [r4, #68]	; 0x44
 80185e4:	64a3      	str	r3, [r4, #72]	; 0x48
 80185e6:	6523      	str	r3, [r4, #80]	; 0x50
 80185e8:	6563      	str	r3, [r4, #84]	; 0x54
 80185ea:	65e3      	str	r3, [r4, #92]	; 0x5c
 80185ec:	6623      	str	r3, [r4, #96]	; 0x60
 80185ee:	66a3      	str	r3, [r4, #104]	; 0x68
 80185f0:	66e3      	str	r3, [r4, #108]	; 0x6c
 80185f2:	6763      	str	r3, [r4, #116]	; 0x74
 80185f4:	67a3      	str	r3, [r4, #120]	; 0x78
 80185f6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 80185fa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 80185fe:	230c      	movs	r3, #12
 8018600:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 8018604:	6422      	str	r2, [r4, #64]	; 0x40
 8018606:	64e1      	str	r1, [r4, #76]	; 0x4c
 8018608:	65a1      	str	r1, [r4, #88]	; 0x58
 801860a:	6662      	str	r2, [r4, #100]	; 0x64
 801860c:	6722      	str	r2, [r4, #112]	; 0x70
 801860e:	67e2      	str	r2, [r4, #124]	; 0x7c
 8018610:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
 8018614:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
 8018618:	4620      	mov	r0, r4
 801861a:	bd38      	pop	{r3, r4, r5, pc}
 801861c:	0802f61c 	.word	0x0802f61c
 8018620:	0802f2d0 	.word	0x0802f2d0
 8018624:	447a0000 	.word	0x447a0000

08018628 <_ZN8touchgfx13TextureMapper19applyTransformationEv>:
 8018628:	b570      	push	{r4, r5, r6, lr}
 801862a:	ed2d 8b04 	vpush	{d8-d9}
 801862e:	f5ad 7d50 	sub.w	sp, sp, #832	; 0x340
 8018632:	add0      	add	r5, sp, #832	; 0x340
 8018634:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8018636:	f825 3d40 	strh.w	r3, [r5, #-64]!
 801863a:	4604      	mov	r4, r0
 801863c:	4628      	mov	r0, r5
 801863e:	f005 fd27 	bl	801e090 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018642:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8018644:	f8ad 3300 	strh.w	r3, [sp, #768]	; 0x300
 8018648:	4606      	mov	r6, r0
 801864a:	4628      	mov	r0, r5
 801864c:	f005 fd54 	bl	801e0f8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018650:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8018654:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 8018658:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801865a:	ed94 9a11 	vldr	s18, [r4, #68]	; 0x44
 801865e:	9312      	str	r3, [sp, #72]	; 0x48
 8018660:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018664:	1c72      	adds	r2, r6, #1
 8018666:	3001      	adds	r0, #1
 8018668:	ee76 5ac7 	vsub.f32	s11, s13, s14
 801866c:	ee07 2a90 	vmov	s15, r2
 8018670:	ee06 0a90 	vmov	s13, r0
 8018674:	ee36 6a47 	vsub.f32	s12, s12, s14
 8018678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801867c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8018680:	ee77 7a86 	vadd.f32	s15, s15, s12
 8018684:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8018688:	9316      	str	r3, [sp, #88]	; 0x58
 801868a:	931a      	str	r3, [sp, #104]	; 0x68
 801868c:	931e      	str	r3, [sp, #120]	; 0x78
 801868e:	2300      	movs	r3, #0
 8018690:	9320      	str	r3, [sp, #128]	; 0x80
 8018692:	9321      	str	r3, [sp, #132]	; 0x84
 8018694:	9322      	str	r3, [sp, #136]	; 0x88
 8018696:	9324      	str	r3, [sp, #144]	; 0x90
 8018698:	9325      	str	r3, [sp, #148]	; 0x94
 801869a:	9326      	str	r3, [sp, #152]	; 0x98
 801869c:	9328      	str	r3, [sp, #160]	; 0xa0
 801869e:	9329      	str	r3, [sp, #164]	; 0xa4
 80186a0:	932a      	str	r3, [sp, #168]	; 0xa8
 80186a2:	932c      	str	r3, [sp, #176]	; 0xb0
 80186a4:	932d      	str	r3, [sp, #180]	; 0xb4
 80186a6:	932e      	str	r3, [sp, #184]	; 0xb8
 80186a8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80186ac:	edcd 5a11 	vstr	s11, [sp, #68]	; 0x44
 80186b0:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
 80186b4:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 80186b8:	edcd 5a15 	vstr	s11, [sp, #84]	; 0x54
 80186bc:	ed8d 7a17 	vstr	s14, [sp, #92]	; 0x5c
 80186c0:	edcd 7a18 	vstr	s15, [sp, #96]	; 0x60
 80186c4:	edcd 6a19 	vstr	s13, [sp, #100]	; 0x64
 80186c8:	ed8d 7a1b 	vstr	s14, [sp, #108]	; 0x6c
 80186cc:	ed8d 6a1c 	vstr	s12, [sp, #112]	; 0x70
 80186d0:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 80186d4:	ed8d 7a1f 	vstr	s14, [sp, #124]	; 0x7c
 80186d8:	a830      	add	r0, sp, #192	; 0xc0
 80186da:	edd4 8a12 	vldr	s17, [r4, #72]	; 0x48
 80186de:	ed94 8a13 	vldr	s16, [r4, #76]	; 0x4c
 80186e2:	f005 f8e7 	bl	801d8b4 <_ZN8touchgfx9Matrix4x4C1Ev>
 80186e6:	eeb1 0a49 	vneg.f32	s0, s18
 80186ea:	a830      	add	r0, sp, #192	; 0xc0
 80186ec:	f005 f9b6 	bl	801da5c <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 80186f0:	eeb1 0a68 	vneg.f32	s0, s17
 80186f4:	f005 f9c0 	bl	801da78 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 80186f8:	eeb1 0a48 	vneg.f32	s0, s16
 80186fc:	f005 f9cb 	bl	801da96 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 8018700:	a840      	add	r0, sp, #256	; 0x100
 8018702:	f005 f8d7 	bl	801d8b4 <_ZN8touchgfx9Matrix4x4C1Ev>
 8018706:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 801870a:	a840      	add	r0, sp, #256	; 0x100
 801870c:	f005 f92a 	bl	801d964 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>
 8018710:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
 8018714:	f005 f950 	bl	801d9b8 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>
 8018718:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
 801871c:	f005 f975 	bl	801da0a <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>
 8018720:	a850      	add	r0, sp, #320	; 0x140
 8018722:	f005 f8c7 	bl	801d8b4 <_ZN8touchgfx9Matrix4x4C1Ev>
 8018726:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 801872a:	a850      	add	r0, sp, #320	; 0x140
 801872c:	f005 f9c2 	bl	801dab4 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>
 8018730:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 8018734:	f005 f9ca 	bl	801dacc <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>
 8018738:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 801873c:	f005 f9d3 	bl	801dae6 <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>
 8018740:	a860      	add	r0, sp, #384	; 0x180
 8018742:	f005 f8b7 	bl	801d8b4 <_ZN8touchgfx9Matrix4x4C1Ev>
 8018746:	eeb0 0a49 	vmov.f32	s0, s18
 801874a:	a860      	add	r0, sp, #384	; 0x180
 801874c:	f005 f986 	bl	801da5c <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8018750:	eeb0 0a68 	vmov.f32	s0, s17
 8018754:	f005 f990 	bl	801da78 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8018758:	eeb0 0a48 	vmov.f32	s0, s16
 801875c:	f005 f99b 	bl	801da96 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 8018760:	aa50      	add	r2, sp, #320	; 0x140
 8018762:	a960      	add	r1, sp, #384	; 0x180
 8018764:	a8b0      	add	r0, sp, #704	; 0x2c0
 8018766:	f005 f8bf 	bl	801d8e8 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 801876a:	4628      	mov	r0, r5
 801876c:	aa40      	add	r2, sp, #256	; 0x100
 801876e:	a9b0      	add	r1, sp, #704	; 0x2c0
 8018770:	f005 f8ba 	bl	801d8e8 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8018774:	4629      	mov	r1, r5
 8018776:	aa30      	add	r2, sp, #192	; 0xc0
 8018778:	a870      	add	r0, sp, #448	; 0x1c0
 801877a:	f005 f8b5 	bl	801d8e8 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 801877e:	a880      	add	r0, sp, #512	; 0x200
 8018780:	f005 f898 	bl	801d8b4 <_ZN8touchgfx9Matrix4x4C1Ev>
 8018784:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
 8018788:	a880      	add	r0, sp, #512	; 0x200
 801878a:	eeb1 0a40 	vneg.f32	s0, s0
 801878e:	f005 f965 	bl	801da5c <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8018792:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
 8018796:	a880      	add	r0, sp, #512	; 0x200
 8018798:	eeb1 0a40 	vneg.f32	s0, s0
 801879c:	f005 f96c 	bl	801da78 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 80187a0:	a890      	add	r0, sp, #576	; 0x240
 80187a2:	f005 f887 	bl	801d8b4 <_ZN8touchgfx9Matrix4x4C1Ev>
 80187a6:	ed94 0a16 	vldr	s0, [r4, #88]	; 0x58
 80187aa:	a890      	add	r0, sp, #576	; 0x240
 80187ac:	f005 f8ca 	bl	801d944 <_ZN8touchgfx9Matrix4x415setViewDistanceEf>
 80187b0:	a8a0      	add	r0, sp, #640	; 0x280
 80187b2:	f005 f87f 	bl	801d8b4 <_ZN8touchgfx9Matrix4x4C1Ev>
 80187b6:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
 80187ba:	a8a0      	add	r0, sp, #640	; 0x280
 80187bc:	f005 f94e 	bl	801da5c <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 80187c0:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
 80187c4:	f005 f958 	bl	801da78 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 80187c8:	aa90      	add	r2, sp, #576	; 0x240
 80187ca:	a9a0      	add	r1, sp, #640	; 0x280
 80187cc:	a8b0      	add	r0, sp, #704	; 0x2c0
 80187ce:	f005 f88b 	bl	801d8e8 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 80187d2:	4628      	mov	r0, r5
 80187d4:	aa80      	add	r2, sp, #512	; 0x200
 80187d6:	a9b0      	add	r1, sp, #704	; 0x2c0
 80187d8:	f005 f886 	bl	801d8e8 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 80187dc:	4629      	mov	r1, r5
 80187de:	aa70      	add	r2, sp, #448	; 0x1c0
 80187e0:	4668      	mov	r0, sp
 80187e2:	466d      	mov	r5, sp
 80187e4:	f005 f880 	bl	801d8e8 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 80187e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80187ea:	ae70      	add	r6, sp, #448	; 0x1c0
 80187ec:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80187ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80187f0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80187f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80187f4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80187f6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80187fa:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80187fe:	2500      	movs	r5, #0
 8018800:	0129      	lsls	r1, r5, #4
 8018802:	ab20      	add	r3, sp, #128	; 0x80
 8018804:	185e      	adds	r6, r3, r1
 8018806:	ab10      	add	r3, sp, #64	; 0x40
 8018808:	4419      	add	r1, r3
 801880a:	a870      	add	r0, sp, #448	; 0x1c0
 801880c:	f005 f822 	bl	801d854 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>
 8018810:	3501      	adds	r5, #1
 8018812:	2d04      	cmp	r5, #4
 8018814:	ed86 0a00 	vstr	s0, [r6]
 8018818:	edc6 0a01 	vstr	s1, [r6, #4]
 801881c:	ed86 1a02 	vstr	s2, [r6, #8]
 8018820:	edc6 1a03 	vstr	s3, [r6, #12]
 8018824:	d1ec      	bne.n	8018800 <_ZN8touchgfx13TextureMapper19applyTransformationEv+0x1d8>
 8018826:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 801882a:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 801882e:	ed9d 7a22 	vldr	s14, [sp, #136]	; 0x88
 8018832:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8018836:	ed84 7a19 	vstr	s14, [r4, #100]	; 0x64
 801883a:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801883e:	eddd 6a21 	vldr	s13, [sp, #132]	; 0x84
 8018842:	ed84 6a17 	vstr	s12, [r4, #92]	; 0x5c
 8018846:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801884a:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801884e:	eddd 6a24 	vldr	s13, [sp, #144]	; 0x90
 8018852:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8018856:	ed84 6a18 	vstr	s12, [r4, #96]	; 0x60
 801885a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801885e:	ed84 7a1c 	vstr	s14, [r4, #112]	; 0x70
 8018862:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8018866:	eddd 6a25 	vldr	s13, [sp, #148]	; 0x94
 801886a:	ed84 6a1a 	vstr	s12, [r4, #104]	; 0x68
 801886e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8018872:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8018876:	eddd 6a28 	vldr	s13, [sp, #160]	; 0xa0
 801887a:	ed9d 7a2a 	vldr	s14, [sp, #168]	; 0xa8
 801887e:	ed84 6a1b 	vstr	s12, [r4, #108]	; 0x6c
 8018882:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8018886:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
 801888a:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801888e:	eddd 6a29 	vldr	s13, [sp, #164]	; 0xa4
 8018892:	ed84 6a1d 	vstr	s12, [r4, #116]	; 0x74
 8018896:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801889a:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801889e:	eddd 6a2c 	vldr	s13, [sp, #176]	; 0xb0
 80188a2:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
 80188a6:	ed84 6a1e 	vstr	s12, [r4, #120]	; 0x78
 80188aa:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80188ae:	ed84 7a22 	vstr	s14, [r4, #136]	; 0x88
 80188b2:	ee86 6a87 	vdiv.f32	s12, s13, s14
 80188b6:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 80188ba:	ed84 6a20 	vstr	s12, [r4, #128]	; 0x80
 80188be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80188c2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80188c6:	edc4 6a21 	vstr	s13, [r4, #132]	; 0x84
 80188ca:	f50d 7d50 	add.w	sp, sp, #832	; 0x340
 80188ce:	ecbd 8b04 	vpop	{d8-d9}
 80188d2:	bd70      	pop	{r4, r5, r6, pc}

080188d4 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>:
 80188d4:	b510      	push	{r4, lr}
 80188d6:	4604      	mov	r4, r0
 80188d8:	f000 fd8e 	bl	80193f8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80188dc:	4620      	mov	r0, r4
 80188de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80188e2:	f7ff bea1 	b.w	8018628 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

080188e6 <_ZN8touchgfx13TextureMapper9setAnglesEfff>:
 80188e6:	ed80 0a0d 	vstr	s0, [r0, #52]	; 0x34
 80188ea:	edc0 0a0e 	vstr	s1, [r0, #56]	; 0x38
 80188ee:	ed80 1a0f 	vstr	s2, [r0, #60]	; 0x3c
 80188f2:	f7ff be99 	b.w	8018628 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

080188f6 <_ZN8touchgfx13TextureMapper8setScaleEf>:
 80188f6:	ed80 0a10 	vstr	s0, [r0, #64]	; 0x40
 80188fa:	f7ff be95 	b.w	8018628 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

080188fe <_ZN8touchgfx13TextureMapper17setBitmapPositionEff>:
 80188fe:	ed80 0a0b 	vstr	s0, [r0, #44]	; 0x2c
 8018902:	edc0 0a0c 	vstr	s1, [r0, #48]	; 0x30
 8018906:	f7ff be8f 	b.w	8018628 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801890a <_ZN8touchgfx13TextureMapper17setCameraDistanceEf>:
 801890a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801890e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8018912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018916:	bfd8      	it	le
 8018918:	eeb0 0a67 	vmovle.f32	s0, s15
 801891c:	ed80 0a16 	vstr	s0, [r0, #88]	; 0x58
 8018920:	f7ff be82 	b.w	8018628 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08018924 <_ZN8touchgfx13TextureMapper9setCameraEff>:
 8018924:	ed80 0a14 	vstr	s0, [r0, #80]	; 0x50
 8018928:	edc0 0a15 	vstr	s1, [r0, #84]	; 0x54
 801892c:	f7ff be7c 	b.w	8018628 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08018930 <_ZN8touchgfx13TextureMapper8setOrigoEff>:
 8018930:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
 8018934:	edc0 0a12 	vstr	s1, [r0, #72]	; 0x48
 8018938:	f7ff be76 	b.w	8018628 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801893c <_ZN8touchgfx13TextureMapper8setOrigoEfff>:
 801893c:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
 8018940:	edc0 0a12 	vstr	s1, [r0, #72]	; 0x48
 8018944:	ed80 1a13 	vstr	s2, [r0, #76]	; 0x4c
 8018948:	f7ff be6e 	b.w	8018628 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801894c <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>:
 801894c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018950:	ed2d 8b04 	vpush	{d8-d9}
 8018954:	edd1 9a1a 	vldr	s19, [r1, #104]	; 0x68
 8018958:	ed91 8a17 	vldr	s16, [r1, #92]	; 0x5c
 801895c:	ed91 9a1d 	vldr	s18, [r1, #116]	; 0x74
 8018960:	edd1 8a20 	vldr	s17, [r1, #128]	; 0x80
 8018964:	eeb4 8ae9 	vcmpe.f32	s16, s19
 8018968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801896c:	bf54      	ite	pl
 801896e:	eeb0 0a69 	vmovpl.f32	s0, s19
 8018972:	eeb0 0a48 	vmovmi.f32	s0, s16
 8018976:	eeb4 9ac0 	vcmpe.f32	s18, s0
 801897a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801897e:	bfd8      	it	le
 8018980:	eeb0 0a49 	vmovle.f32	s0, s18
 8018984:	eef4 8ac0 	vcmpe.f32	s17, s0
 8018988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801898c:	bfd8      	it	le
 801898e:	eeb0 0a68 	vmovle.f32	s0, s17
 8018992:	460c      	mov	r4, r1
 8018994:	4607      	mov	r7, r0
 8018996:	f013 fbcb 	bl	802c130 <floorf>
 801899a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801899e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189a2:	bf58      	it	pl
 80189a4:	eebd 0ac0 	vcvtpl.s32.f32	s0, s0
 80189a8:	eeb4 8ae9 	vcmpe.f32	s16, s19
 80189ac:	bf56      	itet	pl
 80189ae:	ee10 3a10 	vmovpl	r3, s0
 80189b2:	2600      	movmi	r6, #0
 80189b4:	b21e      	sxthpl	r6, r3
 80189b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189ba:	bfd8      	it	le
 80189bc:	eeb0 8a69 	vmovle.f32	s16, s19
 80189c0:	eeb4 9ac8 	vcmpe.f32	s18, s16
 80189c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189c8:	bf58      	it	pl
 80189ca:	eeb0 8a49 	vmovpl.f32	s16, s18
 80189ce:	eef4 8ac8 	vcmpe.f32	s17, s16
 80189d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189d6:	bf54      	ite	pl
 80189d8:	eeb0 0a68 	vmovpl.f32	s0, s17
 80189dc:	eeb0 0a48 	vmovmi.f32	s0, s16
 80189e0:	f013 fb64 	bl	802c0ac <ceilf>
 80189e4:	f9b4 8008 	ldrsh.w	r8, [r4, #8]
 80189e8:	edd4 9a1b 	vldr	s19, [r4, #108]	; 0x6c
 80189ec:	ed94 8a18 	vldr	s16, [r4, #96]	; 0x60
 80189f0:	ed94 9a1e 	vldr	s18, [r4, #120]	; 0x78
 80189f4:	edd4 8a21 	vldr	s17, [r4, #132]	; 0x84
 80189f8:	ee07 8a90 	vmov	s15, r8
 80189fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018a00:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8018a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a08:	bfd8      	it	le
 8018a0a:	eebd 0ac0 	vcvtle.s32.f32	s0, s0
 8018a0e:	eeb4 8ae9 	vcmpe.f32	s16, s19
 8018a12:	bfdc      	itt	le
 8018a14:	ee10 3a10 	vmovle	r3, s0
 8018a18:	fa0f f883 	sxthle.w	r8, r3
 8018a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a20:	bf54      	ite	pl
 8018a22:	eeb0 0a69 	vmovpl.f32	s0, s19
 8018a26:	eeb0 0a48 	vmovmi.f32	s0, s16
 8018a2a:	eeb4 9ac0 	vcmpe.f32	s18, s0
 8018a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a32:	bfd8      	it	le
 8018a34:	eeb0 0a49 	vmovle.f32	s0, s18
 8018a38:	eef4 8ac0 	vcmpe.f32	s17, s0
 8018a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a40:	bfd8      	it	le
 8018a42:	eeb0 0a68 	vmovle.f32	s0, s17
 8018a46:	f013 fb73 	bl	802c130 <floorf>
 8018a4a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a52:	bf58      	it	pl
 8018a54:	eebd 0ac0 	vcvtpl.s32.f32	s0, s0
 8018a58:	eeb4 8ae9 	vcmpe.f32	s16, s19
 8018a5c:	bf56      	itet	pl
 8018a5e:	ee10 3a10 	vmovpl	r3, s0
 8018a62:	2500      	movmi	r5, #0
 8018a64:	b21d      	sxthpl	r5, r3
 8018a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a6a:	bfd8      	it	le
 8018a6c:	eeb0 8a69 	vmovle.f32	s16, s19
 8018a70:	eeb4 9ac8 	vcmpe.f32	s18, s16
 8018a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a78:	bf58      	it	pl
 8018a7a:	eeb0 8a49 	vmovpl.f32	s16, s18
 8018a7e:	eef4 8ac8 	vcmpe.f32	s17, s16
 8018a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a86:	bf54      	ite	pl
 8018a88:	eeb0 0a68 	vmovpl.f32	s0, s17
 8018a8c:	eeb0 0a48 	vmovmi.f32	s0, s16
 8018a90:	f013 fb0c 	bl	802c0ac <ceilf>
 8018a94:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8018a98:	803e      	strh	r6, [r7, #0]
 8018a9a:	ee07 3a90 	vmov	s15, r3
 8018a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018aa2:	807d      	strh	r5, [r7, #2]
 8018aa4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8018aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018aac:	bfd8      	it	le
 8018aae:	eebd 0ac0 	vcvtle.s32.f32	s0, s0
 8018ab2:	eba8 0606 	sub.w	r6, r8, r6
 8018ab6:	bfdc      	itt	le
 8018ab8:	ee10 3a10 	vmovle	r3, s0
 8018abc:	b21b      	sxthle	r3, r3
 8018abe:	1b5d      	subs	r5, r3, r5
 8018ac0:	80be      	strh	r6, [r7, #4]
 8018ac2:	80fd      	strh	r5, [r7, #6]
 8018ac4:	ecbd 8b04 	vpop	{d8-d9}
 8018ac8:	4638      	mov	r0, r7
 8018aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018ace <_ZNK8touchgfx13TextureMapper17invalidateContentEv>:
 8018ace:	b513      	push	{r0, r1, r4, lr}
 8018ad0:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8018ad4:	4604      	mov	r4, r0
 8018ad6:	b143      	cbz	r3, 8018aea <_ZNK8touchgfx13TextureMapper17invalidateContentEv+0x1c>
 8018ad8:	4601      	mov	r1, r0
 8018ada:	4668      	mov	r0, sp
 8018adc:	f7ff ff36 	bl	801894c <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 8018ae0:	6823      	ldr	r3, [r4, #0]
 8018ae2:	4669      	mov	r1, sp
 8018ae4:	691b      	ldr	r3, [r3, #16]
 8018ae6:	4620      	mov	r0, r4
 8018ae8:	4798      	blx	r3
 8018aea:	b002      	add	sp, #8
 8018aec:	bd10      	pop	{r4, pc}

08018aee <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>:
 8018aee:	4603      	mov	r3, r0
 8018af0:	3026      	adds	r0, #38	; 0x26
 8018af2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8018af6:	b90b      	cbnz	r3, 8018afc <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv+0xe>
 8018af8:	f003 bddc 	b.w	801c6b4 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 8018afc:	f003 bdea 	b.w	801c6d4 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>

08018b00 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 8018b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b04:	ed2d 8b04 	vpush	{d8-d9}
 8018b08:	4604      	mov	r4, r0
 8018b0a:	469b      	mov	fp, r3
 8018b0c:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 8018b10:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8018b14:	f9b1 6000 	ldrsh.w	r6, [r1]
 8018b18:	8888      	ldrh	r0, [r1, #4]
 8018b1a:	b0b3      	sub	sp, #204	; 0xcc
 8018b1c:	4430      	add	r0, r6
 8018b1e:	b280      	uxth	r0, r0
 8018b20:	9206      	str	r2, [sp, #24]
 8018b22:	fa0f fe80 	sxth.w	lr, r0
 8018b26:	2200      	movs	r2, #0
 8018b28:	4596      	cmp	lr, r2
 8018b2a:	f8dd a100 	ldr.w	sl, [sp, #256]	; 0x100
 8018b2e:	f8dd 9104 	ldr.w	r9, [sp, #260]	; 0x104
 8018b32:	f8dd 8108 	ldr.w	r8, [sp, #264]	; 0x108
 8018b36:	9f43      	ldr	r7, [sp, #268]	; 0x10c
 8018b38:	9211      	str	r2, [sp, #68]	; 0x44
 8018b3a:	f340 8129 	ble.w	8018d90 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 8018b3e:	45b4      	cmp	ip, r6
 8018b40:	f340 8126 	ble.w	8018d90 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 8018b44:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8018b48:	88ca      	ldrh	r2, [r1, #6]
 8018b4a:	442a      	add	r2, r5
 8018b4c:	b292      	uxth	r2, r2
 8018b4e:	b211      	sxth	r1, r2
 8018b50:	2900      	cmp	r1, #0
 8018b52:	f340 811d 	ble.w	8018d90 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 8018b56:	42ab      	cmp	r3, r5
 8018b58:	f340 811a 	ble.w	8018d90 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 8018b5c:	45f4      	cmp	ip, lr
 8018b5e:	bfb8      	it	lt
 8018b60:	fa1f f08c 	uxthlt.w	r0, ip
 8018b64:	428b      	cmp	r3, r1
 8018b66:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8018b6a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8018b6e:	bfb8      	it	lt
 8018b70:	b29a      	uxthlt	r2, r3
 8018b72:	1b80      	subs	r0, r0, r6
 8018b74:	1b52      	subs	r2, r2, r5
 8018b76:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 8018b7a:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 8018b7e:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 8018b82:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 8018b86:	ab11      	add	r3, sp, #68	; 0x44
 8018b88:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018b8c:	6822      	ldr	r2, [r4, #0]
 8018b8e:	9307      	str	r3, [sp, #28]
 8018b90:	ad13      	add	r5, sp, #76	; 0x4c
 8018b92:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8018b94:	e885 0003 	stmia.w	r5, {r0, r1}
 8018b98:	4629      	mov	r1, r5
 8018b9a:	4620      	mov	r0, r4
 8018b9c:	4790      	blx	r2
 8018b9e:	4621      	mov	r1, r4
 8018ba0:	a815      	add	r0, sp, #84	; 0x54
 8018ba2:	f003 fce3 	bl	801c56c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018ba6:	a815      	add	r0, sp, #84	; 0x54
 8018ba8:	f002 f9da 	bl	801af60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018bac:	9b07      	ldr	r3, [sp, #28]
 8018bae:	1d26      	adds	r6, r4, #4
 8018bb0:	4618      	mov	r0, r3
 8018bb2:	4631      	mov	r1, r6
 8018bb4:	f002 fa18 	bl	801afe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018bb8:	4628      	mov	r0, r5
 8018bba:	f104 0526 	add.w	r5, r4, #38	; 0x26
 8018bbe:	f002 f9cf 	bl	801af60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018bc2:	4628      	mov	r0, r5
 8018bc4:	f005 fb50 	bl	801e268 <_ZNK8touchgfx6Bitmap7getDataEv>
 8018bc8:	9007      	str	r0, [sp, #28]
 8018bca:	2800      	cmp	r0, #0
 8018bcc:	f000 80db 	beq.w	8018d86 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x286>
 8018bd0:	f8db 2000 	ldr.w	r2, [fp]
 8018bd4:	9209      	str	r2, [sp, #36]	; 0x24
 8018bd6:	f8db 2004 	ldr.w	r2, [fp, #4]
 8018bda:	920a      	str	r2, [sp, #40]	; 0x28
 8018bdc:	f8db 2008 	ldr.w	r2, [fp, #8]
 8018be0:	920b      	str	r2, [sp, #44]	; 0x2c
 8018be2:	f8db 200c 	ldr.w	r2, [fp, #12]
 8018be6:	920c      	str	r2, [sp, #48]	; 0x30
 8018be8:	f8da 2000 	ldr.w	r2, [sl]
 8018bec:	920d      	str	r2, [sp, #52]	; 0x34
 8018bee:	f8da 2004 	ldr.w	r2, [sl, #4]
 8018bf2:	920e      	str	r2, [sp, #56]	; 0x38
 8018bf4:	f8da 2008 	ldr.w	r2, [sl, #8]
 8018bf8:	920f      	str	r2, [sp, #60]	; 0x3c
 8018bfa:	f8da 200c 	ldr.w	r2, [sl, #12]
 8018bfe:	9210      	str	r2, [sp, #64]	; 0x40
 8018c00:	a90d      	add	r1, sp, #52	; 0x34
 8018c02:	4632      	mov	r2, r6
 8018c04:	a809      	add	r0, sp, #36	; 0x24
 8018c06:	f002 f9d3 	bl	801afb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8018c0a:	4632      	mov	r2, r6
 8018c0c:	a90e      	add	r1, sp, #56	; 0x38
 8018c0e:	a80a      	add	r0, sp, #40	; 0x28
 8018c10:	f002 f9ce 	bl	801afb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8018c14:	4632      	mov	r2, r6
 8018c16:	a90f      	add	r1, sp, #60	; 0x3c
 8018c18:	a80b      	add	r0, sp, #44	; 0x2c
 8018c1a:	f002 f9c9 	bl	801afb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8018c1e:	4632      	mov	r2, r6
 8018c20:	a910      	add	r1, sp, #64	; 0x40
 8018c22:	a80c      	add	r0, sp, #48	; 0x30
 8018c24:	f002 f9c4 	bl	801afb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8018c28:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8018c2c:	edd7 4a00 	vldr	s9, [r7]
 8018c30:	edd7 5a01 	vldr	s11, [r7, #4]
 8018c34:	ed98 4a00 	vldr	s8, [r8]
 8018c38:	ed98 5a01 	vldr	s10, [r8, #4]
 8018c3c:	ed99 9a00 	vldr	s18, [r9]
 8018c40:	ed99 8a01 	vldr	s16, [r9, #4]
 8018c44:	edd9 8a02 	vldr	s17, [r9, #8]
 8018c48:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8018c4c:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 8018c50:	ed8d 4a21 	vstr	s8, [sp, #132]	; 0x84
 8018c54:	eef0 6a67 	vmov.f32	s13, s15
 8018c58:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8018c5c:	edcd 4a22 	vstr	s9, [sp, #136]	; 0x88
 8018c60:	eeb0 7a67 	vmov.f32	s14, s15
 8018c64:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8018c68:	ed8d 5a26 	vstr	s10, [sp, #152]	; 0x98
 8018c6c:	eeb0 6a67 	vmov.f32	s12, s15
 8018c70:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8018c74:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 8018c78:	edcd 5a27 	vstr	s11, [sp, #156]	; 0x9c
 8018c7c:	ee16 6a10 	vmov	r6, s12
 8018c80:	eeb0 6a67 	vmov.f32	s12, s15
 8018c84:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8018c88:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8018c8c:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8018c90:	f8d8 b008 	ldr.w	fp, [r8, #8]
 8018c94:	68ff      	ldr	r7, [r7, #12]
 8018c96:	9624      	str	r6, [sp, #144]	; 0x90
 8018c98:	ee16 0a10 	vmov	r0, s12
 8018c9c:	eeb0 6a67 	vmov.f32	s12, s15
 8018ca0:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8018ca4:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8018ca8:	ed8d 9a20 	vstr	s18, [sp, #128]	; 0x80
 8018cac:	ee16 1a10 	vmov	r1, s12
 8018cb0:	eeb0 6a67 	vmov.f32	s12, s15
 8018cb4:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8018cb8:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 8018cbc:	ee16 2a10 	vmov	r2, s12
 8018cc0:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 8018cc4:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 8018cc8:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 8018ccc:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 8018cd0:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8018cd4:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 8018cd8:	ed8d 6a1e 	vstr	s12, [sp, #120]	; 0x78
 8018cdc:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 8018ce0:	ed8d 8a25 	vstr	s16, [sp, #148]	; 0x94
 8018ce4:	edcd 8a2a 	vstr	s17, [sp, #168]	; 0xa8
 8018ce8:	922d      	str	r2, [sp, #180]	; 0xb4
 8018cea:	4a2b      	ldr	r2, [pc, #172]	; (8018d98 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x298>)
 8018cec:	9b06      	ldr	r3, [sp, #24]
 8018cee:	8812      	ldrh	r2, [r2, #0]
 8018cf0:	9317      	str	r3, [sp, #92]	; 0x5c
 8018cf2:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 8018cf6:	9b07      	ldr	r3, [sp, #28]
 8018cf8:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
 8018cfc:	4628      	mov	r0, r5
 8018cfe:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
 8018d02:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 8018d06:	9218      	str	r2, [sp, #96]	; 0x60
 8018d08:	9319      	str	r3, [sp, #100]	; 0x64
 8018d0a:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
 8018d0e:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 8018d12:	9731      	str	r7, [sp, #196]	; 0xc4
 8018d14:	f005 fad8 	bl	801e2c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8018d18:	901a      	str	r0, [sp, #104]	; 0x68
 8018d1a:	4628      	mov	r0, r5
 8018d1c:	f005 f9b8 	bl	801e090 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018d20:	901b      	str	r0, [sp, #108]	; 0x6c
 8018d22:	4628      	mov	r0, r5
 8018d24:	f005 f9e8 	bl	801e0f8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018d28:	901c      	str	r0, [sp, #112]	; 0x70
 8018d2a:	4628      	mov	r0, r5
 8018d2c:	f005 f9b0 	bl	801e090 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018d30:	eeb4 9a48 	vcmp.f32	s18, s16
 8018d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d38:	901d      	str	r0, [sp, #116]	; 0x74
 8018d3a:	f8b4 608c 	ldrh.w	r6, [r4, #140]	; 0x8c
 8018d3e:	d107      	bne.n	8018d50 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x250>
 8018d40:	eeb4 8a68 	vcmp.f32	s16, s17
 8018d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018d4c:	bf08      	it	eq
 8018d4e:	461e      	moveq	r6, r3
 8018d50:	4b12      	ldr	r3, [pc, #72]	; (8018d9c <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x29c>)
 8018d52:	681b      	ldr	r3, [r3, #0]
 8018d54:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8018d58:	b10a      	cbz	r2, 8018d5e <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x25e>
 8018d5a:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 8018d5c:	b905      	cbnz	r5, 8018d60 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x260>
 8018d5e:	689d      	ldr	r5, [r3, #8]
 8018d60:	682b      	ldr	r3, [r5, #0]
 8018d62:	4620      	mov	r0, r4
 8018d64:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 8018d66:	f7ff fec2 	bl	8018aee <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>
 8018d6a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8018d6e:	9604      	str	r6, [sp, #16]
 8018d70:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8018d74:	ab13      	add	r3, sp, #76	; 0x4c
 8018d76:	9301      	str	r3, [sp, #4]
 8018d78:	ab15      	add	r3, sp, #84	; 0x54
 8018d7a:	9300      	str	r3, [sp, #0]
 8018d7c:	aa1e      	add	r2, sp, #120	; 0x78
 8018d7e:	ab19      	add	r3, sp, #100	; 0x64
 8018d80:	a917      	add	r1, sp, #92	; 0x5c
 8018d82:	4628      	mov	r0, r5
 8018d84:	47b8      	blx	r7
 8018d86:	b033      	add	sp, #204	; 0xcc
 8018d88:	ecbd 8b04 	vpop	{d8-d9}
 8018d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d90:	2300      	movs	r3, #0
 8018d92:	9312      	str	r3, [sp, #72]	; 0x48
 8018d94:	e6f7      	b.n	8018b86 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x86>
 8018d96:	bf00      	nop
 8018d98:	2000af42 	.word	0x2000af42
 8018d9c:	2000af48 	.word	0x2000af48

08018da0 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE>:
 8018da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018da4:	ed2d 8b02 	vpush	{d8}
 8018da8:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8018dac:	b098      	sub	sp, #96	; 0x60
 8018dae:	4604      	mov	r4, r0
 8018db0:	4688      	mov	r8, r1
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	d077      	beq.n	8018ea6 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x106>
 8018db6:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8018dba:	4628      	mov	r0, r5
 8018dbc:	f005 f968 	bl	801e090 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018dc0:	ee07 0a90 	vmov	s15, r0
 8018dc4:	4628      	mov	r0, r5
 8018dc6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8018dca:	f005 f995 	bl	801e0f8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018dce:	4b4e      	ldr	r3, [pc, #312]	; (8018f08 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x168>)
 8018dd0:	781b      	ldrb	r3, [r3, #0]
 8018dd2:	ee07 0a90 	vmov	s15, r0
 8018dd6:	2b01      	cmp	r3, #1
 8018dd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018ddc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8018de0:	d066      	beq.n	8018eb0 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x110>
 8018de2:	eeb0 6a47 	vmov.f32	s12, s14
 8018de6:	ee17 3a10 	vmov	r3, s14
 8018dea:	eeb0 4a48 	vmov.f32	s8, s16
 8018dee:	eeb0 7a48 	vmov.f32	s14, s16
 8018df2:	eef0 4a67 	vmov.f32	s9, s15
 8018df6:	eeb0 8a67 	vmov.f32	s16, s15
 8018dfa:	ed94 5a17 	vldr	s10, [r4, #92]	; 0x5c
 8018dfe:	edd4 5a18 	vldr	s11, [r4, #96]	; 0x60
 8018e02:	ed94 3a1b 	vldr	s6, [r4, #108]	; 0x6c
 8018e06:	edd4 2a1d 	vldr	s5, [r4, #116]	; 0x74
 8018e0a:	ed94 2a1a 	vldr	s4, [r4, #104]	; 0x68
 8018e0e:	edd4 3a1e 	vldr	s7, [r4, #120]	; 0x78
 8018e12:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8018e14:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8018e16:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8018e18:	f8d4 c080 	ldr.w	ip, [r4, #128]	; 0x80
 8018e1c:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
 8018e20:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8018e24:	ee73 1a65 	vsub.f32	s3, s6, s11
 8018e28:	ee72 6ac5 	vsub.f32	s13, s5, s10
 8018e2c:	ee32 1a45 	vsub.f32	s2, s4, s10
 8018e30:	ee66 6ae1 	vnmul.f32	s13, s13, s3
 8018e34:	ee73 1ae5 	vsub.f32	s3, s7, s11
 8018e38:	eee1 6a21 	vfma.f32	s13, s2, s3
 8018e3c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8018e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e44:	dd3d      	ble.n	8018ec2 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x122>
 8018e46:	ed8d 5a04 	vstr	s10, [sp, #16]
 8018e4a:	ed8d 2a05 	vstr	s4, [sp, #20]
 8018e4e:	edcd 2a06 	vstr	s5, [sp, #24]
 8018e52:	f8cd c01c 	str.w	ip, [sp, #28]
 8018e56:	edcd 5a08 	vstr	s11, [sp, #32]
 8018e5a:	ed8d 3a09 	vstr	s6, [sp, #36]	; 0x24
 8018e5e:	edcd 3a0a 	vstr	s7, [sp, #40]	; 0x28
 8018e62:	970b      	str	r7, [sp, #44]	; 0x2c
 8018e64:	960c      	str	r6, [sp, #48]	; 0x30
 8018e66:	950d      	str	r5, [sp, #52]	; 0x34
 8018e68:	920e      	str	r2, [sp, #56]	; 0x38
 8018e6a:	900f      	str	r0, [sp, #60]	; 0x3c
 8018e6c:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 8018e70:	ed8d 4a11 	vstr	s8, [sp, #68]	; 0x44
 8018e74:	ed8d 7a12 	vstr	s14, [sp, #72]	; 0x48
 8018e78:	edcd 4a13 	vstr	s9, [sp, #76]	; 0x4c
 8018e7c:	ed8d 8a14 	vstr	s16, [sp, #80]	; 0x50
 8018e80:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
 8018e84:	9316      	str	r3, [sp, #88]	; 0x58
 8018e86:	ed8d 6a17 	vstr	s12, [sp, #92]	; 0x5c
 8018e8a:	ab14      	add	r3, sp, #80	; 0x50
 8018e8c:	9303      	str	r3, [sp, #12]
 8018e8e:	ab10      	add	r3, sp, #64	; 0x40
 8018e90:	9302      	str	r3, [sp, #8]
 8018e92:	ab0c      	add	r3, sp, #48	; 0x30
 8018e94:	9301      	str	r3, [sp, #4]
 8018e96:	ab08      	add	r3, sp, #32
 8018e98:	9300      	str	r3, [sp, #0]
 8018e9a:	2200      	movs	r2, #0
 8018e9c:	ab04      	add	r3, sp, #16
 8018e9e:	4641      	mov	r1, r8
 8018ea0:	4620      	mov	r0, r4
 8018ea2:	f7ff fe2d 	bl	8018b00 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 8018ea6:	b018      	add	sp, #96	; 0x60
 8018ea8:	ecbd 8b02 	vpop	{d8}
 8018eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018eb0:	eeb0 6a48 	vmov.f32	s12, s16
 8018eb4:	eef0 4a47 	vmov.f32	s9, s14
 8018eb8:	ee17 3a90 	vmov	r3, s15
 8018ebc:	eeb0 4a67 	vmov.f32	s8, s15
 8018ec0:	e79b      	b.n	8018dfa <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x5a>
 8018ec2:	ed8d 5a05 	vstr	s10, [sp, #20]
 8018ec6:	ed8d 2a04 	vstr	s4, [sp, #16]
 8018eca:	f8cd c018 	str.w	ip, [sp, #24]
 8018ece:	edcd 2a07 	vstr	s5, [sp, #28]
 8018ed2:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 8018ed6:	ed8d 3a08 	vstr	s6, [sp, #32]
 8018eda:	970a      	str	r7, [sp, #40]	; 0x28
 8018edc:	edcd 3a0b 	vstr	s7, [sp, #44]	; 0x2c
 8018ee0:	960d      	str	r6, [sp, #52]	; 0x34
 8018ee2:	950c      	str	r5, [sp, #48]	; 0x30
 8018ee4:	900e      	str	r0, [sp, #56]	; 0x38
 8018ee6:	920f      	str	r2, [sp, #60]	; 0x3c
 8018ee8:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44
 8018eec:	ed8d 4a10 	vstr	s8, [sp, #64]	; 0x40
 8018ef0:	edcd 4a12 	vstr	s9, [sp, #72]	; 0x48
 8018ef4:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
 8018ef8:	ed8d 8a15 	vstr	s16, [sp, #84]	; 0x54
 8018efc:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 8018f00:	ed8d 6a16 	vstr	s12, [sp, #88]	; 0x58
 8018f04:	9317      	str	r3, [sp, #92]	; 0x5c
 8018f06:	e7c0      	b.n	8018e8a <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0xea>
 8018f08:	2000af40 	.word	0x2000af40

08018f0c <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 8018f0c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8018f10:	b133      	cbz	r3, 8018f20 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 8018f12:	790b      	ldrb	r3, [r1, #4]
 8018f14:	2b01      	cmp	r3, #1
 8018f16:	bf01      	itttt	eq
 8018f18:	8dc3      	ldrheq	r3, [r0, #46]	; 0x2e
 8018f1a:	8e02      	ldrheq	r2, [r0, #48]	; 0x30
 8018f1c:	85c2      	strheq	r2, [r0, #46]	; 0x2e
 8018f1e:	8603      	strheq	r3, [r0, #48]	; 0x30
 8018f20:	f7ff ba4d 	b.w	80183be <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

08018f24 <_ZNK8touchgfx6Button17invalidateContentEv>:
 8018f24:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
 8018f28:	b12a      	cbz	r2, 8018f36 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8018f2a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8018f2e:	b112      	cbz	r2, 8018f36 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8018f30:	6803      	ldr	r3, [r0, #0]
 8018f32:	695b      	ldr	r3, [r3, #20]
 8018f34:	4718      	bx	r3
 8018f36:	4770      	bx	lr

08018f38 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8018f38:	2300      	movs	r3, #0
 8018f3a:	8083      	strh	r3, [r0, #4]
 8018f3c:	80c3      	strh	r3, [r0, #6]
 8018f3e:	8003      	strh	r3, [r0, #0]
 8018f40:	8043      	strh	r3, [r0, #2]
 8018f42:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8018f46:	2bff      	cmp	r3, #255	; 0xff
 8018f48:	bf01      	itttt	eq
 8018f4a:	890b      	ldrheq	r3, [r1, #8]
 8018f4c:	8083      	strheq	r3, [r0, #4]
 8018f4e:	894b      	ldrheq	r3, [r1, #10]
 8018f50:	80c3      	strheq	r3, [r0, #6]
 8018f52:	4770      	bx	lr

08018f54 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8018f54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018f56:	4604      	mov	r4, r0
 8018f58:	6808      	ldr	r0, [r1, #0]
 8018f5a:	6849      	ldr	r1, [r1, #4]
 8018f5c:	466b      	mov	r3, sp
 8018f5e:	c303      	stmia	r3!, {r0, r1}
 8018f60:	6823      	ldr	r3, [r4, #0]
 8018f62:	4669      	mov	r1, sp
 8018f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f66:	4620      	mov	r0, r4
 8018f68:	4798      	blx	r3
 8018f6a:	4b08      	ldr	r3, [pc, #32]	; (8018f8c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8018f6c:	681b      	ldr	r3, [r3, #0]
 8018f6e:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8018f72:	b10a      	cbz	r2, 8018f78 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8018f74:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8018f76:	b900      	cbnz	r0, 8018f7a <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8018f78:	6898      	ldr	r0, [r3, #8]
 8018f7a:	6803      	ldr	r3, [r0, #0]
 8018f7c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8018f7e:	6a1d      	ldr	r5, [r3, #32]
 8018f80:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8018f84:	4669      	mov	r1, sp
 8018f86:	47a8      	blx	r5
 8018f88:	b003      	add	sp, #12
 8018f8a:	bd30      	pop	{r4, r5, pc}
 8018f8c:	2000af48 	.word	0x2000af48

08018f90 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8018f90:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8018f94:	b12a      	cbz	r2, 8018fa2 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8018f96:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8018f9a:	b112      	cbz	r2, 8018fa2 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8018f9c:	6803      	ldr	r3, [r0, #0]
 8018f9e:	695b      	ldr	r3, [r3, #20]
 8018fa0:	4718      	bx	r3
 8018fa2:	4770      	bx	lr

08018fa4 <_ZNK8touchgfx5Gauge9getCenterERiS1_>:
 8018fa4:	f9b0 3150 	ldrsh.w	r3, [r0, #336]	; 0x150
 8018fa8:	600b      	str	r3, [r1, #0]
 8018faa:	f9b0 3152 	ldrsh.w	r3, [r0, #338]	; 0x152
 8018fae:	6013      	str	r3, [r2, #0]
 8018fb0:	4770      	bx	lr

08018fb2 <_ZN8touchgfx5Gauge8setWidthEs>:
 8018fb2:	8101      	strh	r1, [r0, #8]
 8018fb4:	f8a0 10bc 	strh.w	r1, [r0, #188]	; 0xbc
 8018fb8:	f8a0 1160 	strh.w	r1, [r0, #352]	; 0x160
 8018fbc:	4770      	bx	lr

08018fbe <_ZN8touchgfx5Gauge9setHeightEs>:
 8018fbe:	8141      	strh	r1, [r0, #10]
 8018fc0:	f8a0 10be 	strh.w	r1, [r0, #190]	; 0xbe
 8018fc4:	f8a0 1162 	strh.w	r1, [r0, #354]	; 0x162
 8018fc8:	4770      	bx	lr

08018fca <_ZNK8touchgfx5Gauge13getStartAngleEv>:
 8018fca:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
 8018fce:	4770      	bx	lr

08018fd0 <_ZNK8touchgfx5Gauge11getEndAngleEv>:
 8018fd0:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 8018fd4:	4770      	bx	lr

08018fd6 <_ZN8touchgfx5Gauge28setProgressIndicatorPositionEssss>:
 8018fd6:	4770      	bx	lr

08018fd8 <_ZN8touchgfx5Gauge8setAlphaEh>:
 8018fd8:	b538      	push	{r3, r4, r5, lr}
 8018fda:	4604      	mov	r4, r0
 8018fdc:	460d      	mov	r5, r1
 8018fde:	f7fd f90e 	bl	80161fe <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 8018fe2:	f884 50dc 	strb.w	r5, [r4, #220]	; 0xdc
 8018fe6:	f884 517e 	strb.w	r5, [r4, #382]	; 0x17e
 8018fea:	bd38      	pop	{r3, r4, r5, pc}

08018fec <_ZNK8touchgfx5Gauge17invalidateContentEv>:
 8018fec:	b510      	push	{r4, lr}
 8018fee:	6803      	ldr	r3, [r0, #0]
 8018ff0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8018ff4:	4604      	mov	r4, r0
 8018ff6:	4798      	blx	r3
 8018ff8:	b170      	cbz	r0, 8019018 <_ZNK8touchgfx5Gauge17invalidateContentEv+0x2c>
 8018ffa:	6823      	ldr	r3, [r4, #0]
 8018ffc:	4620      	mov	r0, r4
 8018ffe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8019002:	4798      	blx	r3
 8019004:	b140      	cbz	r0, 8019018 <_ZNK8touchgfx5Gauge17invalidateContentEv+0x2c>
 8019006:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801900a:	b12b      	cbz	r3, 8019018 <_ZNK8touchgfx5Gauge17invalidateContentEv+0x2c>
 801900c:	6823      	ldr	r3, [r4, #0]
 801900e:	4620      	mov	r0, r4
 8019010:	695b      	ldr	r3, [r3, #20]
 8019012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019016:	4718      	bx	r3
 8019018:	bd10      	pop	{r4, pc}
	...

0801901c <_ZN8touchgfx5GaugeC1Ev>:
 801901c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801901e:	4604      	mov	r4, r0
 8019020:	4626      	mov	r6, r4
 8019022:	f7fd f9df 	bl	80163e4 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 8019026:	4b18      	ldr	r3, [pc, #96]	; (8019088 <_ZN8touchgfx5GaugeC1Ev+0x6c>)
 8019028:	f846 3bb4 	str.w	r3, [r6], #180
 801902c:	a902      	add	r1, sp, #8
 801902e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019032:	f821 3d04 	strh.w	r3, [r1, #-4]!
 8019036:	4630      	mov	r0, r6
 8019038:	f7ff faaa 	bl	8018590 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>
 801903c:	2500      	movs	r5, #0
 801903e:	2301      	movs	r3, #1
 8019040:	f504 77ac 	add.w	r7, r4, #344	; 0x158
 8019044:	f884 3144 	strb.w	r3, [r4, #324]	; 0x144
 8019048:	f884 3145 	strb.w	r3, [r4, #325]	; 0x145
 801904c:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
 8019050:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
 8019054:	f8c4 5150 	str.w	r5, [r4, #336]	; 0x150
 8019058:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
 801905c:	4638      	mov	r0, r7
 801905e:	f7fe fc13 	bl	8017888 <_ZN8touchgfx6CircleC1Ev>
 8019062:	f104 0158 	add.w	r1, r4, #88	; 0x58
 8019066:	4620      	mov	r0, r4
 8019068:	f7fd fa55 	bl	8016516 <_ZN8touchgfx9Container6removeERNS_8DrawableE>
 801906c:	4639      	mov	r1, r7
 801906e:	4620      	mov	r0, r4
 8019070:	f7fd fa18 	bl	80164a4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8019074:	4620      	mov	r0, r4
 8019076:	4631      	mov	r1, r6
 8019078:	f7fd fa14 	bl	80164a4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801907c:	4620      	mov	r0, r4
 801907e:	f884 517d 	strb.w	r5, [r4, #381]	; 0x17d
 8019082:	b003      	add	sp, #12
 8019084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019086:	bf00      	nop
 8019088:	0802f4c0 	.word	0x0802f4c0

0801908c <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>:
 801908c:	f880 1144 	strb.w	r1, [r0, #324]	; 0x144
 8019090:	4770      	bx	lr

08019092 <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>:
 8019092:	f880 1145 	strb.w	r1, [r0, #325]	; 0x145
 8019096:	4770      	bx	lr

08019098 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>:
 8019098:	b538      	push	{r3, r4, r5, lr}
 801909a:	8902      	ldrh	r2, [r0, #8]
 801909c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80190a0:	f8a0 20bc 	strh.w	r2, [r0, #188]	; 0xbc
 80190a4:	4604      	mov	r4, r0
 80190a6:	f100 05b4 	add.w	r5, r0, #180	; 0xb4
 80190aa:	2200      	movs	r2, #0
 80190ac:	4611      	mov	r1, r2
 80190ae:	f8a0 30be 	strh.w	r3, [r0, #190]	; 0xbe
 80190b2:	4628      	mov	r0, r5
 80190b4:	f7f9 fe9d 	bl	8012df2 <_ZN8touchgfx8Drawable5setXYEss>
 80190b8:	f9b4 2156 	ldrsh.w	r2, [r4, #342]	; 0x156
 80190bc:	f9b4 3152 	ldrsh.w	r3, [r4, #338]	; 0x152
 80190c0:	1a9b      	subs	r3, r3, r2
 80190c2:	ee07 3a90 	vmov	s15, r3
 80190c6:	f9b4 2154 	ldrsh.w	r2, [r4, #340]	; 0x154
 80190ca:	f9b4 3150 	ldrsh.w	r3, [r4, #336]	; 0x150
 80190ce:	1a9b      	subs	r3, r3, r2
 80190d0:	ee07 3a10 	vmov	s14, r3
 80190d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80190d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80190dc:	edc4 7a39 	vstr	s15, [r4, #228]	; 0xe4
 80190e0:	ed84 7a38 	vstr	s14, [r4, #224]	; 0xe0
 80190e4:	4628      	mov	r0, r5
 80190e6:	f7ff fa9f 	bl	8018628 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 80190ea:	4b16      	ldr	r3, [pc, #88]	; (8019144 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv+0xac>)
 80190ec:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
 80190f0:	4628      	mov	r0, r5
 80190f2:	f7ff fa99 	bl	8018628 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 80190f6:	f9b4 3152 	ldrsh.w	r3, [r4, #338]	; 0x152
 80190fa:	f9b4 2150 	ldrsh.w	r2, [r4, #336]	; 0x150
 80190fe:	ee07 3a90 	vmov	s15, r3
 8019102:	ee07 2a10 	vmov	s14, r2
 8019106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801910a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801910e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8019112:	ed84 7a3e 	vstr	s14, [r4, #248]	; 0xf8
 8019116:	edc4 7a3f 	vstr	s15, [r4, #252]	; 0xfc
 801911a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 801911e:	4628      	mov	r0, r5
 8019120:	f7ff fa82 	bl	8018628 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 8019124:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8019128:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
 801912c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
 8019130:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
 8019134:	4628      	mov	r0, r5
 8019136:	f7ff fa77 	bl	8018628 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 801913a:	2301      	movs	r3, #1
 801913c:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
 8019140:	bd38      	pop	{r3, r4, r5, pc}
 8019142:	bf00      	nop
 8019144:	43960000 	.word	0x43960000

08019148 <_ZN8touchgfx5Gauge9setNeedleEtss>:
 8019148:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801914a:	4604      	mov	r4, r0
 801914c:	a802      	add	r0, sp, #8
 801914e:	4616      	mov	r6, r2
 8019150:	f820 1d04 	strh.w	r1, [r0, #-4]!
 8019154:	461d      	mov	r5, r3
 8019156:	4601      	mov	r1, r0
 8019158:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 801915c:	f7ff fbba 	bl	80188d4 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>
 8019160:	f8a4 6154 	strh.w	r6, [r4, #340]	; 0x154
 8019164:	f8a4 5156 	strh.w	r5, [r4, #342]	; 0x156
 8019168:	4620      	mov	r0, r4
 801916a:	f7ff ff95 	bl	8019098 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>
 801916e:	b002      	add	sp, #8
 8019170:	bd70      	pop	{r4, r5, r6, pc}

08019172 <_ZN8touchgfx5Gauge9setCenterEii>:
 8019172:	b570      	push	{r4, r5, r6, lr}
 8019174:	4606      	mov	r6, r0
 8019176:	460d      	mov	r5, r1
 8019178:	f8a6 1150 	strh.w	r1, [r6, #336]	; 0x150
 801917c:	f8a6 2152 	strh.w	r2, [r6, #338]	; 0x152
 8019180:	4614      	mov	r4, r2
 8019182:	f7ff ff89 	bl	8019098 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>
 8019186:	f9b6 215e 	ldrsh.w	r2, [r6, #350]	; 0x15e
 801918a:	f9b6 115c 	ldrsh.w	r1, [r6, #348]	; 0x15c
 801918e:	1aa4      	subs	r4, r4, r2
 8019190:	1a6d      	subs	r5, r5, r1
 8019192:	0164      	lsls	r4, r4, #5
 8019194:	016d      	lsls	r5, r5, #5
 8019196:	3410      	adds	r4, #16
 8019198:	3510      	adds	r5, #16
 801919a:	f8c6 5184 	str.w	r5, [r6, #388]	; 0x184
 801919e:	f8c6 4188 	str.w	r4, [r6, #392]	; 0x188
 80191a2:	bd70      	pop	{r4, r5, r6, pc}

080191a4 <_ZN8touchgfx6Circle12updateArcEndIiEEvT_>:
 80191a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80191a6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80191a8:	0149      	lsls	r1, r1, #5
 80191aa:	4299      	cmp	r1, r3
 80191ac:	4604      	mov	r4, r0
 80191ae:	9101      	str	r1, [sp, #4]
 80191b0:	d00b      	beq.n	80191ca <_ZN8touchgfx6Circle12updateArcEndIiEEvT_+0x26>
 80191b2:	4601      	mov	r1, r0
 80191b4:	aa01      	add	r2, sp, #4
 80191b6:	a802      	add	r0, sp, #8
 80191b8:	f7fe fd64 	bl	8017c84 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>
 80191bc:	9b01      	ldr	r3, [sp, #4]
 80191be:	63e3      	str	r3, [r4, #60]	; 0x3c
 80191c0:	6823      	ldr	r3, [r4, #0]
 80191c2:	a902      	add	r1, sp, #8
 80191c4:	691b      	ldr	r3, [r3, #16]
 80191c6:	4620      	mov	r0, r4
 80191c8:	4798      	blx	r3
 80191ca:	b004      	add	sp, #16
 80191cc:	bd10      	pop	{r4, pc}
	...

080191d0 <_ZN8touchgfx5Gauge8setValueEi>:
 80191d0:	b570      	push	{r4, r5, r6, lr}
 80191d2:	4604      	mov	r4, r0
 80191d4:	f7fd f85e 	bl	8016294 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 80191d8:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	; 0xa4
 80191dc:	429a      	cmp	r2, r3
 80191de:	bfac      	ite	ge
 80191e0:	f894 3145 	ldrbge.w	r3, [r4, #325]	; 0x145
 80191e4:	f894 3144 	ldrblt.w	r3, [r4, #324]	; 0x144
 80191e8:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
 80191ec:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
 80191f0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 80191f4:	1ac9      	subs	r1, r1, r3
 80191f6:	2900      	cmp	r1, #0
 80191f8:	bfb8      	it	lt
 80191fa:	4249      	neglt	r1, r1
 80191fc:	b289      	uxth	r1, r1
 80191fe:	4620      	mov	r0, r4
 8019200:	f7fd f86a 	bl	80162d8 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8019204:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8019208:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
 801920c:	eddf 6a19 	vldr	s13, [pc, #100]	; 8019274 <_ZN8touchgfx5Gauge8setValueEi+0xa4>
 8019210:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8019278 <_ZN8touchgfx5Gauge8setValueEi+0xa8>
 8019214:	429a      	cmp	r2, r3
 8019216:	4605      	mov	r5, r0
 8019218:	f504 76ac 	add.w	r6, r4, #344	; 0x158
 801921c:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 8019220:	da15      	bge.n	801924e <_ZN8touchgfx5Gauge8setValueEi+0x7e>
 8019222:	1b5b      	subs	r3, r3, r5
 8019224:	ee07 3a90 	vmov	s15, r3
 8019228:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801922c:	edd4 0a3b 	vldr	s1, [r4, #236]	; 0xec
 8019230:	ed94 0a3a 	vldr	s0, [r4, #232]	; 0xe8
 8019234:	ee87 1aa6 	vdiv.f32	s2, s15, s13
 8019238:	ee21 1a07 	vmul.f32	s2, s2, s14
 801923c:	f7ff f96a 	bl	8018514 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
 8019240:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
 8019244:	1b49      	subs	r1, r1, r5
 8019246:	4630      	mov	r0, r6
 8019248:	f7ff ffac 	bl	80191a4 <_ZN8touchgfx6Circle12updateArcEndIiEEvT_>
 801924c:	bd70      	pop	{r4, r5, r6, pc}
 801924e:	442b      	add	r3, r5
 8019250:	ee07 3a90 	vmov	s15, r3
 8019254:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019258:	edd4 0a3b 	vldr	s1, [r4, #236]	; 0xec
 801925c:	ed94 0a3a 	vldr	s0, [r4, #232]	; 0xe8
 8019260:	ee87 1aa6 	vdiv.f32	s2, s15, s13
 8019264:	ee21 1a07 	vmul.f32	s2, s2, s14
 8019268:	f7ff f954 	bl	8018514 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
 801926c:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
 8019270:	4429      	add	r1, r5
 8019272:	e7e8      	b.n	8019246 <_ZN8touchgfx5Gauge8setValueEi+0x76>
 8019274:	43340000 	.word	0x43340000
 8019278:	40490fdb 	.word	0x40490fdb

0801927c <_ZN8touchgfx5Gauge16setStartEndAngleEii>:
 801927c:	b510      	push	{r4, lr}
 801927e:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
 8019282:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
 8019286:	0149      	lsls	r1, r1, #5
 8019288:	0152      	lsls	r2, r2, #5
 801928a:	f8c0 1190 	str.w	r1, [r0, #400]	; 0x190
 801928e:	f8c0 2194 	str.w	r2, [r0, #404]	; 0x194
 8019292:	4604      	mov	r4, r0
 8019294:	f7fc ffb0 	bl	80161f8 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>
 8019298:	4601      	mov	r1, r0
 801929a:	4620      	mov	r0, r4
 801929c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80192a0:	f7ff bf96 	b.w	80191d0 <_ZN8touchgfx5Gauge8setValueEi>

080192a4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 80192a4:	b570      	push	{r4, r5, r6, lr}
 80192a6:	880b      	ldrh	r3, [r1, #0]
 80192a8:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80192aa:	4605      	mov	r5, r0
 80192ac:	8813      	ldrh	r3, [r2, #0]
 80192ae:	f825 3f30 	strh.w	r3, [r5, #48]!
 80192b2:	4604      	mov	r4, r0
 80192b4:	4628      	mov	r0, r5
 80192b6:	f004 feeb 	bl	801e090 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80192ba:	4606      	mov	r6, r0
 80192bc:	4628      	mov	r0, r5
 80192be:	f004 ff1b 	bl	801e0f8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80192c2:	6823      	ldr	r3, [r4, #0]
 80192c4:	4605      	mov	r5, r0
 80192c6:	4631      	mov	r1, r6
 80192c8:	4620      	mov	r0, r4
 80192ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80192cc:	4798      	blx	r3
 80192ce:	6823      	ldr	r3, [r4, #0]
 80192d0:	4629      	mov	r1, r5
 80192d2:	4620      	mov	r0, r4
 80192d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80192d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80192da:	4718      	bx	r3

080192dc <_ZNK8touchgfx6Button12getSolidRectEv>:
 80192dc:	b510      	push	{r4, lr}
 80192de:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 80192e2:	2bff      	cmp	r3, #255	; 0xff
 80192e4:	4604      	mov	r4, r0
 80192e6:	d006      	beq.n	80192f6 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 80192e8:	2300      	movs	r3, #0
 80192ea:	8003      	strh	r3, [r0, #0]
 80192ec:	8043      	strh	r3, [r0, #2]
 80192ee:	8083      	strh	r3, [r0, #4]
 80192f0:	80c3      	strh	r3, [r0, #6]
 80192f2:	4620      	mov	r0, r4
 80192f4:	bd10      	pop	{r4, pc}
 80192f6:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 80192fa:	b11b      	cbz	r3, 8019304 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 80192fc:	3130      	adds	r1, #48	; 0x30
 80192fe:	f004 ff2f 	bl	801e160 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8019302:	e7f6      	b.n	80192f2 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8019304:	312e      	adds	r1, #46	; 0x2e
 8019306:	e7fa      	b.n	80192fe <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

08019308 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8019308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801930c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8019310:	b08a      	sub	sp, #40	; 0x28
 8019312:	4604      	mov	r4, r0
 8019314:	4688      	mov	r8, r1
 8019316:	2b00      	cmp	r3, #0
 8019318:	d066      	beq.n	80193e8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 801931a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801931c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019320:	a805      	add	r0, sp, #20
 8019322:	f004 feb5 	bl	801e090 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019326:	4607      	mov	r7, r0
 8019328:	a805      	add	r0, sp, #20
 801932a:	f004 fee5 	bl	801e0f8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801932e:	f9b8 6000 	ldrsh.w	r6, [r8]
 8019332:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8019336:	4432      	add	r2, r6
 8019338:	b292      	uxth	r2, r2
 801933a:	2300      	movs	r3, #0
 801933c:	fa0f fc82 	sxth.w	ip, r2
 8019340:	459c      	cmp	ip, r3
 8019342:	9306      	str	r3, [sp, #24]
 8019344:	dd52      	ble.n	80193ec <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8019346:	42b7      	cmp	r7, r6
 8019348:	dd50      	ble.n	80193ec <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801934a:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 801934e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8019352:	442b      	add	r3, r5
 8019354:	b29b      	uxth	r3, r3
 8019356:	b219      	sxth	r1, r3
 8019358:	2900      	cmp	r1, #0
 801935a:	dd47      	ble.n	80193ec <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801935c:	42a8      	cmp	r0, r5
 801935e:	dd45      	ble.n	80193ec <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8019360:	4567      	cmp	r7, ip
 8019362:	bfb8      	it	lt
 8019364:	b2ba      	uxthlt	r2, r7
 8019366:	4288      	cmp	r0, r1
 8019368:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801936c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8019370:	bfb8      	it	lt
 8019372:	b283      	uxthlt	r3, r0
 8019374:	1b92      	subs	r2, r2, r6
 8019376:	1b5b      	subs	r3, r3, r5
 8019378:	f8ad 201c 	strh.w	r2, [sp, #28]
 801937c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019380:	f8ad 6018 	strh.w	r6, [sp, #24]
 8019384:	f8ad 501a 	strh.w	r5, [sp, #26]
 8019388:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801938c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019390:	429a      	cmp	r2, r3
 8019392:	d026      	beq.n	80193e2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8019394:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8019398:	2b00      	cmp	r3, #0
 801939a:	dd22      	ble.n	80193e2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801939c:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80193a0:	2b00      	cmp	r3, #0
 80193a2:	dd1e      	ble.n	80193e2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80193a4:	2300      	movs	r3, #0
 80193a6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80193aa:	6823      	ldr	r3, [r4, #0]
 80193ac:	a908      	add	r1, sp, #32
 80193ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80193b0:	4620      	mov	r0, r4
 80193b2:	4798      	blx	r3
 80193b4:	4b0f      	ldr	r3, [pc, #60]	; (80193f4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 80193b6:	681b      	ldr	r3, [r3, #0]
 80193b8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80193bc:	b10a      	cbz	r2, 80193c2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 80193be:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80193c0:	b900      	cbnz	r0, 80193c4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 80193c2:	6898      	ldr	r0, [r3, #8]
 80193c4:	6801      	ldr	r1, [r0, #0]
 80193c6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80193ca:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80193ce:	2501      	movs	r5, #1
 80193d0:	9502      	str	r5, [sp, #8]
 80193d2:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 80193d6:	9401      	str	r4, [sp, #4]
 80193d8:	ac06      	add	r4, sp, #24
 80193da:	9400      	str	r4, [sp, #0]
 80193dc:	688c      	ldr	r4, [r1, #8]
 80193de:	a905      	add	r1, sp, #20
 80193e0:	47a0      	blx	r4
 80193e2:	b00a      	add	sp, #40	; 0x28
 80193e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193e8:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80193ea:	e797      	b.n	801931c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 80193ec:	2300      	movs	r3, #0
 80193ee:	9307      	str	r3, [sp, #28]
 80193f0:	e7ca      	b.n	8019388 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 80193f2:	bf00      	nop
 80193f4:	2000af48 	.word	0x2000af48

080193f8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 80193f8:	b570      	push	{r4, r5, r6, lr}
 80193fa:	880b      	ldrh	r3, [r1, #0]
 80193fc:	84c3      	strh	r3, [r0, #38]	; 0x26
 80193fe:	4604      	mov	r4, r0
 8019400:	4608      	mov	r0, r1
 8019402:	460d      	mov	r5, r1
 8019404:	f004 fe44 	bl	801e090 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019408:	4606      	mov	r6, r0
 801940a:	4628      	mov	r0, r5
 801940c:	f004 fe74 	bl	801e0f8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019410:	6823      	ldr	r3, [r4, #0]
 8019412:	4605      	mov	r5, r0
 8019414:	4631      	mov	r1, r6
 8019416:	4620      	mov	r0, r4
 8019418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801941a:	4798      	blx	r3
 801941c:	6823      	ldr	r3, [r4, #0]
 801941e:	4629      	mov	r1, r5
 8019420:	4620      	mov	r0, r4
 8019422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019424:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019428:	4718      	bx	r3

0801942a <_ZNK8touchgfx5Image12getSolidRectEv>:
 801942a:	b510      	push	{r4, lr}
 801942c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8019430:	2bff      	cmp	r3, #255	; 0xff
 8019432:	4604      	mov	r4, r0
 8019434:	d006      	beq.n	8019444 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8019436:	2300      	movs	r3, #0
 8019438:	8003      	strh	r3, [r0, #0]
 801943a:	8043      	strh	r3, [r0, #2]
 801943c:	8083      	strh	r3, [r0, #4]
 801943e:	80c3      	strh	r3, [r0, #6]
 8019440:	4620      	mov	r0, r4
 8019442:	bd10      	pop	{r4, pc}
 8019444:	3126      	adds	r1, #38	; 0x26
 8019446:	f004 fe8b 	bl	801e160 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801944a:	e7f9      	b.n	8019440 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0801944c <_ZNK8touchgfx5Image17invalidateContentEv>:
 801944c:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8019450:	b12a      	cbz	r2, 801945e <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8019452:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8019456:	b112      	cbz	r2, 801945e <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8019458:	6803      	ldr	r3, [r0, #0]
 801945a:	695b      	ldr	r3, [r3, #20]
 801945c:	4718      	bx	r3
 801945e:	4770      	bx	lr

08019460 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8019460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019464:	4604      	mov	r4, r0
 8019466:	b088      	sub	sp, #32
 8019468:	f854 3b26 	ldr.w	r3, [r4], #38
 801946c:	2500      	movs	r5, #0
 801946e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019470:	460f      	mov	r7, r1
 8019472:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8019476:	a904      	add	r1, sp, #16
 8019478:	4606      	mov	r6, r0
 801947a:	4798      	blx	r3
 801947c:	4620      	mov	r0, r4
 801947e:	f004 fe07 	bl	801e090 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019482:	4680      	mov	r8, r0
 8019484:	4620      	mov	r0, r4
 8019486:	f004 fe37 	bl	801e0f8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801948a:	9506      	str	r5, [sp, #24]
 801948c:	ad06      	add	r5, sp, #24
 801948e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8019492:	4639      	mov	r1, r7
 8019494:	4628      	mov	r0, r5
 8019496:	f8ad 801c 	strh.w	r8, [sp, #28]
 801949a:	f7fd f981 	bl	80167a0 <_ZN8touchgfx4RectaNERKS0_>
 801949e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80194a2:	2b00      	cmp	r3, #0
 80194a4:	dd19      	ble.n	80194da <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80194a6:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	dd15      	ble.n	80194da <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80194ae:	4b0c      	ldr	r3, [pc, #48]	; (80194e0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 80194b0:	681b      	ldr	r3, [r3, #0]
 80194b2:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80194b6:	b10a      	cbz	r2, 80194bc <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 80194b8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80194ba:	b900      	cbnz	r0, 80194be <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 80194bc:	6898      	ldr	r0, [r3, #8]
 80194be:	6801      	ldr	r1, [r0, #0]
 80194c0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80194c4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80194c8:	2701      	movs	r7, #1
 80194ca:	9702      	str	r7, [sp, #8]
 80194cc:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 80194d0:	e9cd 5600 	strd	r5, r6, [sp]
 80194d4:	688d      	ldr	r5, [r1, #8]
 80194d6:	4621      	mov	r1, r4
 80194d8:	47a8      	blx	r5
 80194da:	b008      	add	sp, #32
 80194dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194e0:	2000af48 	.word	0x2000af48

080194e4 <_ZN8touchgfx7OutlineD1Ev>:
 80194e4:	4770      	bx	lr

080194e6 <_ZN8touchgfx7OutlineD0Ev>:
 80194e6:	b510      	push	{r4, lr}
 80194e8:	2130      	movs	r1, #48	; 0x30
 80194ea:	4604      	mov	r4, r0
 80194ec:	f012 fd2b 	bl	802bf46 <_ZdlPvj>
 80194f0:	4620      	mov	r0, r4
 80194f2:	bd10      	pop	{r4, pc}

080194f4 <_ZN8touchgfx7Outline5resetEv>:
 80194f4:	b510      	push	{r4, lr}
 80194f6:	4604      	mov	r4, r0
 80194f8:	f000 fe82 	bl	801a200 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 80194fc:	60e0      	str	r0, [r4, #12]
 80194fe:	f000 fe85 	bl	801a20c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8019502:	68e3      	ldr	r3, [r4, #12]
 8019504:	6123      	str	r3, [r4, #16]
 8019506:	08c0      	lsrs	r0, r0, #3
 8019508:	2200      	movs	r2, #0
 801950a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 801950e:	3801      	subs	r0, #1
 8019510:	6060      	str	r0, [r4, #4]
 8019512:	60a2      	str	r2, [r4, #8]
 8019514:	8019      	strh	r1, [r3, #0]
 8019516:	8059      	strh	r1, [r3, #2]
 8019518:	809a      	strh	r2, [r3, #4]
 801951a:	80da      	strh	r2, [r3, #6]
 801951c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801951e:	f023 0301 	bic.w	r3, r3, #1
 8019522:	f043 0302 	orr.w	r3, r3, #2
 8019526:	6263      	str	r3, [r4, #36]	; 0x24
 8019528:	bd10      	pop	{r4, pc}
	...

0801952c <_ZN8touchgfx7OutlineC1Ev>:
 801952c:	b510      	push	{r4, lr}
 801952e:	4b0a      	ldr	r3, [pc, #40]	; (8019558 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8019530:	6003      	str	r3, [r0, #0]
 8019532:	2300      	movs	r3, #0
 8019534:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8019538:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801953c:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8019540:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8019544:	6243      	str	r3, [r0, #36]	; 0x24
 8019546:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801954a:	4604      	mov	r4, r0
 801954c:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 8019550:	f7ff ffd0 	bl	80194f4 <_ZN8touchgfx7Outline5resetEv>
 8019554:	4620      	mov	r0, r4
 8019556:	bd10      	pop	{r4, pc}
 8019558:	0802f688 	.word	0x0802f688

0801955c <_ZN8touchgfx7Outline10renderLineEiiii>:
 801955c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019560:	b093      	sub	sp, #76	; 0x4c
 8019562:	1156      	asrs	r6, r2, #5
 8019564:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8019566:	9305      	str	r3, [sp, #20]
 8019568:	f004 051f 	and.w	r5, r4, #31
 801956c:	1153      	asrs	r3, r2, #5
 801956e:	9504      	str	r5, [sp, #16]
 8019570:	1165      	asrs	r5, r4, #5
 8019572:	9303      	str	r3, [sp, #12]
 8019574:	42ae      	cmp	r6, r5
 8019576:	ea4f 1364 	mov.w	r3, r4, asr #5
 801957a:	9306      	str	r3, [sp, #24]
 801957c:	f002 031f 	and.w	r3, r2, #31
 8019580:	f040 80f8 	bne.w	8019774 <_ZN8touchgfx7Outline10renderLineEiiii+0x218>
 8019584:	9c04      	ldr	r4, [sp, #16]
 8019586:	9a05      	ldr	r2, [sp, #20]
 8019588:	42a3      	cmp	r3, r4
 801958a:	ea4f 1e62 	mov.w	lr, r2, asr #5
 801958e:	6902      	ldr	r2, [r0, #16]
 8019590:	d125      	bne.n	80195de <_ZN8touchgfx7Outline10renderLineEiiii+0x82>
 8019592:	f9b2 3000 	ldrsh.w	r3, [r2]
 8019596:	459e      	cmp	lr, r3
 8019598:	d103      	bne.n	80195a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x46>
 801959a:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801959e:	429e      	cmp	r6, r3
 80195a0:	d035      	beq.n	801960e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 80195a2:	88d1      	ldrh	r1, [r2, #6]
 80195a4:	8893      	ldrh	r3, [r2, #4]
 80195a6:	430b      	orrs	r3, r1
 80195a8:	d010      	beq.n	80195cc <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 80195aa:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80195ae:	2b00      	cmp	r3, #0
 80195b0:	db0c      	blt.n	80195cc <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 80195b2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80195b4:	428b      	cmp	r3, r1
 80195b6:	da09      	bge.n	80195cc <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 80195b8:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 80195bc:	428b      	cmp	r3, r1
 80195be:	bf38      	it	cc
 80195c0:	3208      	addcc	r2, #8
 80195c2:	f103 0301 	add.w	r3, r3, #1
 80195c6:	bf38      	it	cc
 80195c8:	6102      	strcc	r2, [r0, #16]
 80195ca:	6083      	str	r3, [r0, #8]
 80195cc:	6903      	ldr	r3, [r0, #16]
 80195ce:	9a03      	ldr	r2, [sp, #12]
 80195d0:	f8a3 e000 	strh.w	lr, [r3]
 80195d4:	805a      	strh	r2, [r3, #2]
 80195d6:	2200      	movs	r2, #0
 80195d8:	809a      	strh	r2, [r3, #4]
 80195da:	80da      	strh	r2, [r3, #6]
 80195dc:	e017      	b.n	801960e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 80195de:	9c05      	ldr	r4, [sp, #20]
 80195e0:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 80195e4:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 80195e8:	f004 041f 	and.w	r4, r4, #31
 80195ec:	114e      	asrs	r6, r1, #5
 80195ee:	9402      	str	r4, [sp, #8]
 80195f0:	9c04      	ldr	r4, [sp, #16]
 80195f2:	4576      	cmp	r6, lr
 80195f4:	f001 0c1f 	and.w	ip, r1, #31
 80195f8:	eba4 0403 	sub.w	r4, r4, r3
 80195fc:	d10a      	bne.n	8019614 <_ZN8touchgfx7Outline10renderLineEiiii+0xb8>
 80195fe:	9b02      	ldr	r3, [sp, #8]
 8019600:	449c      	add	ip, r3
 8019602:	44a0      	add	r8, r4
 8019604:	fb04 a40c 	mla	r4, r4, ip, sl
 8019608:	f8a2 8004 	strh.w	r8, [r2, #4]
 801960c:	80d4      	strh	r4, [r2, #6]
 801960e:	b013      	add	sp, #76	; 0x4c
 8019610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019614:	9d05      	ldr	r5, [sp, #20]
 8019616:	1a69      	subs	r1, r5, r1
 8019618:	bf5b      	ittet	pl
 801961a:	f1cc 0520 	rsbpl	r5, ip, #32
 801961e:	436c      	mulpl	r4, r5
 8019620:	2500      	movmi	r5, #0
 8019622:	2520      	movpl	r5, #32
 8019624:	bf44      	itt	mi
 8019626:	fb04 f40c 	mulmi.w	r4, r4, ip
 801962a:	4249      	negmi	r1, r1
 801962c:	9501      	str	r5, [sp, #4]
 801962e:	9f01      	ldr	r7, [sp, #4]
 8019630:	fb94 f5f1 	sdiv	r5, r4, r1
 8019634:	fb01 4415 	mls	r4, r1, r5, r4
 8019638:	bf54      	ite	pl
 801963a:	f04f 0901 	movpl.w	r9, #1
 801963e:	f04f 39ff 	movmi.w	r9, #4294967295
 8019642:	2c00      	cmp	r4, #0
 8019644:	bfb8      	it	lt
 8019646:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801964a:	44bc      	add	ip, r7
 801964c:	44a8      	add	r8, r5
 801964e:	fb05 ac0c 	mla	ip, r5, ip, sl
 8019652:	f8a2 8004 	strh.w	r8, [r2, #4]
 8019656:	f8a2 c006 	strh.w	ip, [r2, #6]
 801965a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801965e:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8019662:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8019666:	bfb8      	it	lt
 8019668:	1864      	addlt	r4, r4, r1
 801966a:	ea58 0202 	orrs.w	r2, r8, r2
 801966e:	444e      	add	r6, r9
 8019670:	d011      	beq.n	8019696 <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 8019672:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8019676:	f1b8 0f00 	cmp.w	r8, #0
 801967a:	db0c      	blt.n	8019696 <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 801967c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 801967e:	4590      	cmp	r8, r2
 8019680:	da09      	bge.n	8019696 <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 8019682:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8019686:	4590      	cmp	r8, r2
 8019688:	bf3c      	itt	cc
 801968a:	f10c 0208 	addcc.w	r2, ip, #8
 801968e:	6102      	strcc	r2, [r0, #16]
 8019690:	f108 0201 	add.w	r2, r8, #1
 8019694:	6082      	str	r2, [r0, #8]
 8019696:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801969a:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801969e:	f8ac 6000 	strh.w	r6, [ip]
 80196a2:	2700      	movs	r7, #0
 80196a4:	45b6      	cmp	lr, r6
 80196a6:	f8ac 2002 	strh.w	r2, [ip, #2]
 80196aa:	f8ac 7004 	strh.w	r7, [ip, #4]
 80196ae:	f8ac 7006 	strh.w	r7, [ip, #6]
 80196b2:	442b      	add	r3, r5
 80196b4:	d04d      	beq.n	8019752 <_ZN8touchgfx7Outline10renderLineEiiii+0x1f6>
 80196b6:	9f04      	ldr	r7, [sp, #16]
 80196b8:	1aff      	subs	r7, r7, r3
 80196ba:	443d      	add	r5, r7
 80196bc:	016d      	lsls	r5, r5, #5
 80196be:	fb95 f8f1 	sdiv	r8, r5, r1
 80196c2:	fb01 5518 	mls	r5, r1, r8, r5
 80196c6:	2d00      	cmp	r5, #0
 80196c8:	bfb8      	it	lt
 80196ca:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80196ce:	f108 0701 	add.w	r7, r8, #1
 80196d2:	bfb8      	it	lt
 80196d4:	186d      	addlt	r5, r5, r1
 80196d6:	1a64      	subs	r4, r4, r1
 80196d8:	9703      	str	r7, [sp, #12]
 80196da:	f04f 0a00 	mov.w	sl, #0
 80196de:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80196e2:	1964      	adds	r4, r4, r5
 80196e4:	bf58      	it	pl
 80196e6:	9f03      	ldrpl	r7, [sp, #12]
 80196e8:	f8bc b004 	ldrh.w	fp, [ip, #4]
 80196ec:	bf48      	it	mi
 80196ee:	4647      	movmi	r7, r8
 80196f0:	44bb      	add	fp, r7
 80196f2:	f8ac b004 	strh.w	fp, [ip, #4]
 80196f6:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80196fa:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80196fe:	f8ac b006 	strh.w	fp, [ip, #6]
 8019702:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8019706:	443b      	add	r3, r7
 8019708:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801970c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8019710:	bf58      	it	pl
 8019712:	1a64      	subpl	r4, r4, r1
 8019714:	ea5b 0707 	orrs.w	r7, fp, r7
 8019718:	444e      	add	r6, r9
 801971a:	d011      	beq.n	8019740 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 801971c:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8019720:	f1bb 0f00 	cmp.w	fp, #0
 8019724:	db0c      	blt.n	8019740 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 8019726:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8019728:	45bb      	cmp	fp, r7
 801972a:	da09      	bge.n	8019740 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 801972c:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8019730:	45bb      	cmp	fp, r7
 8019732:	bf3c      	itt	cc
 8019734:	f10c 0708 	addcc.w	r7, ip, #8
 8019738:	6107      	strcc	r7, [r0, #16]
 801973a:	f10b 0701 	add.w	r7, fp, #1
 801973e:	6087      	str	r7, [r0, #8]
 8019740:	6907      	ldr	r7, [r0, #16]
 8019742:	45b6      	cmp	lr, r6
 8019744:	803e      	strh	r6, [r7, #0]
 8019746:	807a      	strh	r2, [r7, #2]
 8019748:	f8a7 a004 	strh.w	sl, [r7, #4]
 801974c:	f8a7 a006 	strh.w	sl, [r7, #6]
 8019750:	d1c5      	bne.n	80196de <_ZN8touchgfx7Outline10renderLineEiiii+0x182>
 8019752:	9a04      	ldr	r2, [sp, #16]
 8019754:	1ad3      	subs	r3, r2, r3
 8019756:	6902      	ldr	r2, [r0, #16]
 8019758:	8891      	ldrh	r1, [r2, #4]
 801975a:	88d6      	ldrh	r6, [r2, #6]
 801975c:	4419      	add	r1, r3
 801975e:	8091      	strh	r1, [r2, #4]
 8019760:	9902      	ldr	r1, [sp, #8]
 8019762:	f101 0c20 	add.w	ip, r1, #32
 8019766:	9901      	ldr	r1, [sp, #4]
 8019768:	ebac 0c01 	sub.w	ip, ip, r1
 801976c:	fb03 630c 	mla	r3, r3, ip, r6
 8019770:	80d3      	strh	r3, [r2, #6]
 8019772:	e74c      	b.n	801960e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8019774:	9d05      	ldr	r5, [sp, #20]
 8019776:	1aa2      	subs	r2, r4, r2
 8019778:	eba5 0501 	sub.w	r5, r5, r1
 801977c:	9508      	str	r5, [sp, #32]
 801977e:	9202      	str	r2, [sp, #8]
 8019780:	f140 8128 	bpl.w	80199d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x478>
 8019784:	9a03      	ldr	r2, [sp, #12]
 8019786:	2a00      	cmp	r2, #0
 8019788:	f6ff af41 	blt.w	801960e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 801978c:	9a02      	ldr	r2, [sp, #8]
 801978e:	4252      	negs	r2, r2
 8019790:	9202      	str	r2, [sp, #8]
 8019792:	9a06      	ldr	r2, [sp, #24]
 8019794:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8019798:	f04f 34ff 	mov.w	r4, #4294967295
 801979c:	9206      	str	r2, [sp, #24]
 801979e:	462a      	mov	r2, r5
 80197a0:	940b      	str	r4, [sp, #44]	; 0x2c
 80197a2:	435a      	muls	r2, r3
 80197a4:	2400      	movs	r4, #0
 80197a6:	9d02      	ldr	r5, [sp, #8]
 80197a8:	9401      	str	r4, [sp, #4]
 80197aa:	9c02      	ldr	r4, [sp, #8]
 80197ac:	fb92 f4f4 	sdiv	r4, r2, r4
 80197b0:	fb05 2214 	mls	r2, r5, r4, r2
 80197b4:	2a00      	cmp	r2, #0
 80197b6:	9207      	str	r2, [sp, #28]
 80197b8:	bfbc      	itt	lt
 80197ba:	1952      	addlt	r2, r2, r5
 80197bc:	9207      	strlt	r2, [sp, #28]
 80197be:	9a01      	ldr	r2, [sp, #4]
 80197c0:	6905      	ldr	r5, [r0, #16]
 80197c2:	bfb8      	it	lt
 80197c4:	f104 34ff 	addlt.w	r4, r4, #4294967295
 80197c8:	eb04 0901 	add.w	r9, r4, r1
 80197cc:	429a      	cmp	r2, r3
 80197ce:	ea4f 1669 	mov.w	r6, r9, asr #5
 80197d2:	f040 8112 	bne.w	80199fa <_ZN8touchgfx7Outline10renderLineEiiii+0x49e>
 80197d6:	f9b5 3000 	ldrsh.w	r3, [r5]
 80197da:	429e      	cmp	r6, r3
 80197dc:	d104      	bne.n	80197e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x28c>
 80197de:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80197e2:	9a03      	ldr	r2, [sp, #12]
 80197e4:	429a      	cmp	r2, r3
 80197e6:	d01b      	beq.n	8019820 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 80197e8:	88ea      	ldrh	r2, [r5, #6]
 80197ea:	88ab      	ldrh	r3, [r5, #4]
 80197ec:	4313      	orrs	r3, r2
 80197ee:	d010      	beq.n	8019812 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 80197f0:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80197f4:	2a00      	cmp	r2, #0
 80197f6:	db0c      	blt.n	8019812 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 80197f8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80197fa:	429a      	cmp	r2, r3
 80197fc:	da09      	bge.n	8019812 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 80197fe:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8019802:	429a      	cmp	r2, r3
 8019804:	bf38      	it	cc
 8019806:	3508      	addcc	r5, #8
 8019808:	f102 0201 	add.w	r2, r2, #1
 801980c:	bf38      	it	cc
 801980e:	6105      	strcc	r5, [r0, #16]
 8019810:	6082      	str	r2, [r0, #8]
 8019812:	6903      	ldr	r3, [r0, #16]
 8019814:	9a03      	ldr	r2, [sp, #12]
 8019816:	805a      	strh	r2, [r3, #2]
 8019818:	2200      	movs	r2, #0
 801981a:	801e      	strh	r6, [r3, #0]
 801981c:	809a      	strh	r2, [r3, #4]
 801981e:	80da      	strh	r2, [r3, #6]
 8019820:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019822:	9a03      	ldr	r2, [sp, #12]
 8019824:	6901      	ldr	r1, [r0, #16]
 8019826:	441a      	add	r2, r3
 8019828:	f9b1 3000 	ldrsh.w	r3, [r1]
 801982c:	42b3      	cmp	r3, r6
 801982e:	d103      	bne.n	8019838 <_ZN8touchgfx7Outline10renderLineEiiii+0x2dc>
 8019830:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8019834:	429a      	cmp	r2, r3
 8019836:	d01a      	beq.n	801986e <_ZN8touchgfx7Outline10renderLineEiiii+0x312>
 8019838:	88cc      	ldrh	r4, [r1, #6]
 801983a:	888b      	ldrh	r3, [r1, #4]
 801983c:	4323      	orrs	r3, r4
 801983e:	d010      	beq.n	8019862 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8019840:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8019844:	2c00      	cmp	r4, #0
 8019846:	db0c      	blt.n	8019862 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8019848:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801984a:	429c      	cmp	r4, r3
 801984c:	da09      	bge.n	8019862 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 801984e:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8019852:	429c      	cmp	r4, r3
 8019854:	bf38      	it	cc
 8019856:	3108      	addcc	r1, #8
 8019858:	f104 0401 	add.w	r4, r4, #1
 801985c:	bf38      	it	cc
 801985e:	6101      	strcc	r1, [r0, #16]
 8019860:	6084      	str	r4, [r0, #8]
 8019862:	6903      	ldr	r3, [r0, #16]
 8019864:	2100      	movs	r1, #0
 8019866:	801e      	strh	r6, [r3, #0]
 8019868:	805a      	strh	r2, [r3, #2]
 801986a:	8099      	strh	r1, [r3, #4]
 801986c:	80d9      	strh	r1, [r3, #6]
 801986e:	9b06      	ldr	r3, [sp, #24]
 8019870:	4293      	cmp	r3, r2
 8019872:	f000 8082 	beq.w	801997a <_ZN8touchgfx7Outline10renderLineEiiii+0x41e>
 8019876:	9b08      	ldr	r3, [sp, #32]
 8019878:	9c02      	ldr	r4, [sp, #8]
 801987a:	9902      	ldr	r1, [sp, #8]
 801987c:	015b      	lsls	r3, r3, #5
 801987e:	fb93 f1f1 	sdiv	r1, r3, r1
 8019882:	fb04 3311 	mls	r3, r4, r1, r3
 8019886:	2b00      	cmp	r3, #0
 8019888:	9103      	str	r1, [sp, #12]
 801988a:	9308      	str	r3, [sp, #32]
 801988c:	da04      	bge.n	8019898 <_ZN8touchgfx7Outline10renderLineEiiii+0x33c>
 801988e:	1e4b      	subs	r3, r1, #1
 8019890:	9303      	str	r3, [sp, #12]
 8019892:	9b08      	ldr	r3, [sp, #32]
 8019894:	4423      	add	r3, r4
 8019896:	9308      	str	r3, [sp, #32]
 8019898:	9b07      	ldr	r3, [sp, #28]
 801989a:	9902      	ldr	r1, [sp, #8]
 801989c:	1a5b      	subs	r3, r3, r1
 801989e:	9307      	str	r3, [sp, #28]
 80198a0:	9b01      	ldr	r3, [sp, #4]
 80198a2:	f1c3 0320 	rsb	r3, r3, #32
 80198a6:	930e      	str	r3, [sp, #56]	; 0x38
 80198a8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80198aa:	9b01      	ldr	r3, [sp, #4]
 80198ac:	1a5b      	subs	r3, r3, r1
 80198ae:	464f      	mov	r7, r9
 80198b0:	930a      	str	r3, [sp, #40]	; 0x28
 80198b2:	2600      	movs	r6, #0
 80198b4:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 80198b8:	185b      	adds	r3, r3, r1
 80198ba:	bf58      	it	pl
 80198bc:	9902      	ldrpl	r1, [sp, #8]
 80198be:	9307      	str	r3, [sp, #28]
 80198c0:	bf5d      	ittte	pl
 80198c2:	1a5b      	subpl	r3, r3, r1
 80198c4:	9307      	strpl	r3, [sp, #28]
 80198c6:	9b03      	ldrpl	r3, [sp, #12]
 80198c8:	9903      	ldrmi	r1, [sp, #12]
 80198ca:	bf58      	it	pl
 80198cc:	1c59      	addpl	r1, r3, #1
 80198ce:	4489      	add	r9, r1
 80198d0:	2a00      	cmp	r2, #0
 80198d2:	ea4f 1a69 	mov.w	sl, r9, asr #5
 80198d6:	db2e      	blt.n	8019936 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 80198d8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80198da:	4293      	cmp	r3, r2
 80198dc:	dd2b      	ble.n	8019936 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 80198de:	9c01      	ldr	r4, [sp, #4]
 80198e0:	6905      	ldr	r5, [r0, #16]
 80198e2:	46a0      	mov	r8, r4
 80198e4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80198e6:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 80198ea:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 80198ee:	45a0      	cmp	r8, r4
 80198f0:	f040 814f 	bne.w	8019b92 <_ZN8touchgfx7Outline10renderLineEiiii+0x636>
 80198f4:	f9b5 1000 	ldrsh.w	r1, [r5]
 80198f8:	4551      	cmp	r1, sl
 80198fa:	d103      	bne.n	8019904 <_ZN8touchgfx7Outline10renderLineEiiii+0x3a8>
 80198fc:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8019900:	4291      	cmp	r1, r2
 8019902:	d018      	beq.n	8019936 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8019904:	ea5c 010e 	orrs.w	r1, ip, lr
 8019908:	d00f      	beq.n	801992a <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 801990a:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 801990e:	2900      	cmp	r1, #0
 8019910:	db0b      	blt.n	801992a <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 8019912:	428b      	cmp	r3, r1
 8019914:	dd09      	ble.n	801992a <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 8019916:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 801991a:	4299      	cmp	r1, r3
 801991c:	bf38      	it	cc
 801991e:	3508      	addcc	r5, #8
 8019920:	f101 0101 	add.w	r1, r1, #1
 8019924:	bf38      	it	cc
 8019926:	6105      	strcc	r5, [r0, #16]
 8019928:	6081      	str	r1, [r0, #8]
 801992a:	6903      	ldr	r3, [r0, #16]
 801992c:	f8a3 a000 	strh.w	sl, [r3]
 8019930:	805a      	strh	r2, [r3, #2]
 8019932:	809e      	strh	r6, [r3, #4]
 8019934:	80de      	strh	r6, [r3, #6]
 8019936:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019938:	6901      	ldr	r1, [r0, #16]
 801993a:	441a      	add	r2, r3
 801993c:	88cc      	ldrh	r4, [r1, #6]
 801993e:	888b      	ldrh	r3, [r1, #4]
 8019940:	4323      	orrs	r3, r4
 8019942:	d010      	beq.n	8019966 <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 8019944:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8019948:	2c00      	cmp	r4, #0
 801994a:	db0c      	blt.n	8019966 <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 801994c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801994e:	429c      	cmp	r4, r3
 8019950:	da09      	bge.n	8019966 <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 8019952:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8019956:	429c      	cmp	r4, r3
 8019958:	bf38      	it	cc
 801995a:	3108      	addcc	r1, #8
 801995c:	f104 0401 	add.w	r4, r4, #1
 8019960:	bf38      	it	cc
 8019962:	6101      	strcc	r1, [r0, #16]
 8019964:	6084      	str	r4, [r0, #8]
 8019966:	6903      	ldr	r3, [r0, #16]
 8019968:	f8a3 a000 	strh.w	sl, [r3]
 801996c:	805a      	strh	r2, [r3, #2]
 801996e:	809e      	strh	r6, [r3, #4]
 8019970:	80de      	strh	r6, [r3, #6]
 8019972:	9b06      	ldr	r3, [sp, #24]
 8019974:	4293      	cmp	r3, r2
 8019976:	464f      	mov	r7, r9
 8019978:	d19c      	bne.n	80198b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x358>
 801997a:	9b01      	ldr	r3, [sp, #4]
 801997c:	6907      	ldr	r7, [r0, #16]
 801997e:	f1c3 0620 	rsb	r6, r3, #32
 8019982:	9b05      	ldr	r3, [sp, #20]
 8019984:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8019988:	9b04      	ldr	r3, [sp, #16]
 801998a:	429e      	cmp	r6, r3
 801998c:	f040 81cc 	bne.w	8019d28 <_ZN8touchgfx7Outline10renderLineEiiii+0x7cc>
 8019990:	f9b7 3000 	ldrsh.w	r3, [r7]
 8019994:	459e      	cmp	lr, r3
 8019996:	d104      	bne.n	80199a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x446>
 8019998:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801999c:	429a      	cmp	r2, r3
 801999e:	f43f ae36 	beq.w	801960e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 80199a2:	88f9      	ldrh	r1, [r7, #6]
 80199a4:	88bb      	ldrh	r3, [r7, #4]
 80199a6:	430b      	orrs	r3, r1
 80199a8:	d010      	beq.n	80199cc <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 80199aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80199ae:	2b00      	cmp	r3, #0
 80199b0:	db0c      	blt.n	80199cc <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 80199b2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80199b4:	428b      	cmp	r3, r1
 80199b6:	da09      	bge.n	80199cc <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 80199b8:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 80199bc:	428b      	cmp	r3, r1
 80199be:	bf38      	it	cc
 80199c0:	3708      	addcc	r7, #8
 80199c2:	f103 0301 	add.w	r3, r3, #1
 80199c6:	bf38      	it	cc
 80199c8:	6107      	strcc	r7, [r0, #16]
 80199ca:	6083      	str	r3, [r0, #8]
 80199cc:	6903      	ldr	r3, [r0, #16]
 80199ce:	f8a3 e000 	strh.w	lr, [r3]
 80199d2:	e5ff      	b.n	80195d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x78>
 80199d4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80199d6:	9c03      	ldr	r4, [sp, #12]
 80199d8:	42a2      	cmp	r2, r4
 80199da:	f6ff ae18 	blt.w	801960e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 80199de:	9c06      	ldr	r4, [sp, #24]
 80199e0:	42a2      	cmp	r2, r4
 80199e2:	bfb8      	it	lt
 80199e4:	3201      	addlt	r2, #1
 80199e6:	9c08      	ldr	r4, [sp, #32]
 80199e8:	bfb8      	it	lt
 80199ea:	9206      	strlt	r2, [sp, #24]
 80199ec:	f1c3 0220 	rsb	r2, r3, #32
 80199f0:	4362      	muls	r2, r4
 80199f2:	2401      	movs	r4, #1
 80199f4:	940b      	str	r4, [sp, #44]	; 0x2c
 80199f6:	2420      	movs	r4, #32
 80199f8:	e6d5      	b.n	80197a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x24a>
 80199fa:	f009 021f 	and.w	r2, r9, #31
 80199fe:	ea4f 1861 	mov.w	r8, r1, asr #5
 8019a02:	920c      	str	r2, [sp, #48]	; 0x30
 8019a04:	9a01      	ldr	r2, [sp, #4]
 8019a06:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8019a0a:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8019a0e:	45b0      	cmp	r8, r6
 8019a10:	f001 011f 	and.w	r1, r1, #31
 8019a14:	eba2 0203 	sub.w	r2, r2, r3
 8019a18:	d108      	bne.n	8019a2c <_ZN8touchgfx7Outline10renderLineEiiii+0x4d0>
 8019a1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019a1c:	4419      	add	r1, r3
 8019a1e:	4496      	add	lr, r2
 8019a20:	fb02 a101 	mla	r1, r2, r1, sl
 8019a24:	f8a5 e004 	strh.w	lr, [r5, #4]
 8019a28:	80e9      	strh	r1, [r5, #6]
 8019a2a:	e6f9      	b.n	8019820 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 8019a2c:	2c00      	cmp	r4, #0
 8019a2e:	f2c0 80a9 	blt.w	8019b84 <_ZN8touchgfx7Outline10renderLineEiiii+0x628>
 8019a32:	2701      	movs	r7, #1
 8019a34:	f1c1 0c20 	rsb	ip, r1, #32
 8019a38:	970a      	str	r7, [sp, #40]	; 0x28
 8019a3a:	fb02 f20c 	mul.w	r2, r2, ip
 8019a3e:	2720      	movs	r7, #32
 8019a40:	9709      	str	r7, [sp, #36]	; 0x24
 8019a42:	fb92 fcf4 	sdiv	ip, r2, r4
 8019a46:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8019a48:	fb04 221c 	mls	r2, r4, ip, r2
 8019a4c:	2a00      	cmp	r2, #0
 8019a4e:	bfb8      	it	lt
 8019a50:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8019a54:	4439      	add	r1, r7
 8019a56:	fb0c a101 	mla	r1, ip, r1, sl
 8019a5a:	80e9      	strh	r1, [r5, #6]
 8019a5c:	44e6      	add	lr, ip
 8019a5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8019a60:	f8a5 e004 	strh.w	lr, [r5, #4]
 8019a64:	eb08 0501 	add.w	r5, r8, r1
 8019a68:	6901      	ldr	r1, [r0, #16]
 8019a6a:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8019a6e:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8019a72:	bfb8      	it	lt
 8019a74:	1912      	addlt	r2, r2, r4
 8019a76:	ea58 070e 	orrs.w	r7, r8, lr
 8019a7a:	d010      	beq.n	8019a9e <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8019a7c:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8019a80:	f1be 0f00 	cmp.w	lr, #0
 8019a84:	db0b      	blt.n	8019a9e <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8019a86:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8019a88:	45be      	cmp	lr, r7
 8019a8a:	da08      	bge.n	8019a9e <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8019a8c:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8019a90:	45be      	cmp	lr, r7
 8019a92:	bf3c      	itt	cc
 8019a94:	3108      	addcc	r1, #8
 8019a96:	6101      	strcc	r1, [r0, #16]
 8019a98:	f10e 0101 	add.w	r1, lr, #1
 8019a9c:	6081      	str	r1, [r0, #8]
 8019a9e:	6901      	ldr	r1, [r0, #16]
 8019aa0:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8019aa4:	800d      	strh	r5, [r1, #0]
 8019aa6:	f04f 0e00 	mov.w	lr, #0
 8019aaa:	42ae      	cmp	r6, r5
 8019aac:	f8a1 8002 	strh.w	r8, [r1, #2]
 8019ab0:	f8a1 e004 	strh.w	lr, [r1, #4]
 8019ab4:	f8a1 e006 	strh.w	lr, [r1, #6]
 8019ab8:	4463      	add	r3, ip
 8019aba:	d054      	beq.n	8019b66 <_ZN8touchgfx7Outline10renderLineEiiii+0x60a>
 8019abc:	9901      	ldr	r1, [sp, #4]
 8019abe:	1ac9      	subs	r1, r1, r3
 8019ac0:	4461      	add	r1, ip
 8019ac2:	0149      	lsls	r1, r1, #5
 8019ac4:	fb91 fef4 	sdiv	lr, r1, r4
 8019ac8:	fb04 111e 	mls	r1, r4, lr, r1
 8019acc:	2900      	cmp	r1, #0
 8019ace:	bfb8      	it	lt
 8019ad0:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8019ad4:	f10e 0701 	add.w	r7, lr, #1
 8019ad8:	bfb8      	it	lt
 8019ada:	1909      	addlt	r1, r1, r4
 8019adc:	1b12      	subs	r2, r2, r4
 8019ade:	970d      	str	r7, [sp, #52]	; 0x34
 8019ae0:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8019ae4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8019ae6:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8019aea:	1852      	adds	r2, r2, r1
 8019aec:	bf54      	ite	pl
 8019aee:	f8dd c034 	ldrpl.w	ip, [sp, #52]	; 0x34
 8019af2:	46f4      	movmi	ip, lr
 8019af4:	44e3      	add	fp, ip
 8019af6:	f8aa b004 	strh.w	fp, [sl, #4]
 8019afa:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8019afe:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 8019b02:	f8aa b006 	strh.w	fp, [sl, #6]
 8019b06:	4463      	add	r3, ip
 8019b08:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8019b0c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8019b10:	f8bc a004 	ldrh.w	sl, [ip, #4]
 8019b14:	bf58      	it	pl
 8019b16:	1b12      	subpl	r2, r2, r4
 8019b18:	443d      	add	r5, r7
 8019b1a:	ea5b 070a 	orrs.w	r7, fp, sl
 8019b1e:	d014      	beq.n	8019b4a <_ZN8touchgfx7Outline10renderLineEiiii+0x5ee>
 8019b20:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8019b24:	f1ba 0f00 	cmp.w	sl, #0
 8019b28:	db0f      	blt.n	8019b4a <_ZN8touchgfx7Outline10renderLineEiiii+0x5ee>
 8019b2a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8019b2c:	45ba      	cmp	sl, r7
 8019b2e:	da0c      	bge.n	8019b4a <_ZN8touchgfx7Outline10renderLineEiiii+0x5ee>
 8019b30:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8019b34:	45ba      	cmp	sl, r7
 8019b36:	bf38      	it	cc
 8019b38:	f10c 0c08 	addcc.w	ip, ip, #8
 8019b3c:	f10a 0a01 	add.w	sl, sl, #1
 8019b40:	bf38      	it	cc
 8019b42:	f8c0 c010 	strcc.w	ip, [r0, #16]
 8019b46:	f8c0 a008 	str.w	sl, [r0, #8]
 8019b4a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8019b4e:	f04f 0700 	mov.w	r7, #0
 8019b52:	42ae      	cmp	r6, r5
 8019b54:	f8ac 5000 	strh.w	r5, [ip]
 8019b58:	f8ac 8002 	strh.w	r8, [ip, #2]
 8019b5c:	f8ac 7004 	strh.w	r7, [ip, #4]
 8019b60:	f8ac 7006 	strh.w	r7, [ip, #6]
 8019b64:	d1bc      	bne.n	8019ae0 <_ZN8touchgfx7Outline10renderLineEiiii+0x584>
 8019b66:	6904      	ldr	r4, [r0, #16]
 8019b68:	9a01      	ldr	r2, [sp, #4]
 8019b6a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019b6c:	1ad3      	subs	r3, r2, r3
 8019b6e:	88a2      	ldrh	r2, [r4, #4]
 8019b70:	441a      	add	r2, r3
 8019b72:	80a2      	strh	r2, [r4, #4]
 8019b74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019b76:	3120      	adds	r1, #32
 8019b78:	1a89      	subs	r1, r1, r2
 8019b7a:	88e2      	ldrh	r2, [r4, #6]
 8019b7c:	fb03 2301 	mla	r3, r3, r1, r2
 8019b80:	80e3      	strh	r3, [r4, #6]
 8019b82:	e64d      	b.n	8019820 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 8019b84:	f04f 37ff 	mov.w	r7, #4294967295
 8019b88:	970a      	str	r7, [sp, #40]	; 0x28
 8019b8a:	434a      	muls	r2, r1
 8019b8c:	4264      	negs	r4, r4
 8019b8e:	2700      	movs	r7, #0
 8019b90:	e756      	b.n	8019a40 <_ZN8touchgfx7Outline10renderLineEiiii+0x4e4>
 8019b92:	ea4f 1867 	mov.w	r8, r7, asr #5
 8019b96:	f009 031f 	and.w	r3, r9, #31
 8019b9a:	45d0      	cmp	r8, sl
 8019b9c:	f007 071f 	and.w	r7, r7, #31
 8019ba0:	930f      	str	r3, [sp, #60]	; 0x3c
 8019ba2:	fa1f fc8c 	uxth.w	ip, ip
 8019ba6:	fa1f fe8e 	uxth.w	lr, lr
 8019baa:	d10a      	bne.n	8019bc2 <_ZN8touchgfx7Outline10renderLineEiiii+0x666>
 8019bac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019bae:	449c      	add	ip, r3
 8019bb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019bb2:	f8a5 c004 	strh.w	ip, [r5, #4]
 8019bb6:	441f      	add	r7, r3
 8019bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019bba:	fb03 e707 	mla	r7, r3, r7, lr
 8019bbe:	80ef      	strh	r7, [r5, #6]
 8019bc0:	e6b9      	b.n	8019936 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8019bc2:	2900      	cmp	r1, #0
 8019bc4:	f2c0 80a8 	blt.w	8019d18 <_ZN8touchgfx7Outline10renderLineEiiii+0x7bc>
 8019bc8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019bca:	f1c7 0320 	rsb	r3, r7, #32
 8019bce:	4363      	muls	r3, r4
 8019bd0:	2401      	movs	r4, #1
 8019bd2:	940d      	str	r4, [sp, #52]	; 0x34
 8019bd4:	2420      	movs	r4, #32
 8019bd6:	940c      	str	r4, [sp, #48]	; 0x30
 8019bd8:	fb93 f4f1 	sdiv	r4, r3, r1
 8019bdc:	fb01 3b14 	mls	fp, r1, r4, r3
 8019be0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019be2:	f1bb 0f00 	cmp.w	fp, #0
 8019be6:	bfb8      	it	lt
 8019be8:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8019bec:	441f      	add	r7, r3
 8019bee:	fb04 e707 	mla	r7, r4, r7, lr
 8019bf2:	44a4      	add	ip, r4
 8019bf4:	f8a5 c004 	strh.w	ip, [r5, #4]
 8019bf8:	80ef      	strh	r7, [r5, #6]
 8019bfa:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8019bfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019c00:	f8bc e006 	ldrh.w	lr, [ip, #6]
 8019c04:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8019c08:	bfb8      	it	lt
 8019c0a:	448b      	addlt	fp, r1
 8019c0c:	eb08 0503 	add.w	r5, r8, r3
 8019c10:	ea5e 0307 	orrs.w	r3, lr, r7
 8019c14:	d011      	beq.n	8019c3a <_ZN8touchgfx7Outline10renderLineEiiii+0x6de>
 8019c16:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8019c1a:	f1be 0f00 	cmp.w	lr, #0
 8019c1e:	db0c      	blt.n	8019c3a <_ZN8touchgfx7Outline10renderLineEiiii+0x6de>
 8019c20:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8019c22:	45be      	cmp	lr, r7
 8019c24:	da09      	bge.n	8019c3a <_ZN8touchgfx7Outline10renderLineEiiii+0x6de>
 8019c26:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8019c2a:	45be      	cmp	lr, r7
 8019c2c:	bf3c      	itt	cc
 8019c2e:	f10c 0708 	addcc.w	r7, ip, #8
 8019c32:	6107      	strcc	r7, [r0, #16]
 8019c34:	f10e 0701 	add.w	r7, lr, #1
 8019c38:	6087      	str	r7, [r0, #8]
 8019c3a:	6907      	ldr	r7, [r0, #16]
 8019c3c:	b213      	sxth	r3, r2
 8019c3e:	9310      	str	r3, [sp, #64]	; 0x40
 8019c40:	807b      	strh	r3, [r7, #2]
 8019c42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019c44:	803d      	strh	r5, [r7, #0]
 8019c46:	4555      	cmp	r5, sl
 8019c48:	80be      	strh	r6, [r7, #4]
 8019c4a:	80fe      	strh	r6, [r7, #6]
 8019c4c:	eb04 0c03 	add.w	ip, r4, r3
 8019c50:	d051      	beq.n	8019cf6 <_ZN8touchgfx7Outline10renderLineEiiii+0x79a>
 8019c52:	9b01      	ldr	r3, [sp, #4]
 8019c54:	eba3 070c 	sub.w	r7, r3, ip
 8019c58:	443c      	add	r4, r7
 8019c5a:	0164      	lsls	r4, r4, #5
 8019c5c:	fb94 f8f1 	sdiv	r8, r4, r1
 8019c60:	fb01 4418 	mls	r4, r1, r8, r4
 8019c64:	2c00      	cmp	r4, #0
 8019c66:	bfb8      	it	lt
 8019c68:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8019c6c:	ebab 0301 	sub.w	r3, fp, r1
 8019c70:	f108 0701 	add.w	r7, r8, #1
 8019c74:	bfb8      	it	lt
 8019c76:	1864      	addlt	r4, r4, r1
 8019c78:	9309      	str	r3, [sp, #36]	; 0x24
 8019c7a:	9711      	str	r7, [sp, #68]	; 0x44
 8019c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c7e:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8019c82:	191b      	adds	r3, r3, r4
 8019c84:	bf58      	it	pl
 8019c86:	9f11      	ldrpl	r7, [sp, #68]	; 0x44
 8019c88:	f8be b004 	ldrh.w	fp, [lr, #4]
 8019c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8019c8e:	bf48      	it	mi
 8019c90:	4647      	movmi	r7, r8
 8019c92:	44bb      	add	fp, r7
 8019c94:	f8ae b004 	strh.w	fp, [lr, #4]
 8019c98:	f8be b006 	ldrh.w	fp, [lr, #6]
 8019c9c:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8019ca0:	f8ae b006 	strh.w	fp, [lr, #6]
 8019ca4:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8019ca8:	44bc      	add	ip, r7
 8019caa:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8019cac:	f8be b006 	ldrh.w	fp, [lr, #6]
 8019cb0:	443d      	add	r5, r7
 8019cb2:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8019cb6:	bf5c      	itt	pl
 8019cb8:	1a5b      	subpl	r3, r3, r1
 8019cba:	9309      	strpl	r3, [sp, #36]	; 0x24
 8019cbc:	ea5b 0307 	orrs.w	r3, fp, r7
 8019cc0:	d011      	beq.n	8019ce6 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8019cc2:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8019cc6:	f1bb 0f00 	cmp.w	fp, #0
 8019cca:	db0c      	blt.n	8019ce6 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8019ccc:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8019cce:	45bb      	cmp	fp, r7
 8019cd0:	da09      	bge.n	8019ce6 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8019cd2:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8019cd6:	45bb      	cmp	fp, r7
 8019cd8:	bf3c      	itt	cc
 8019cda:	f10e 0708 	addcc.w	r7, lr, #8
 8019cde:	6107      	strcc	r7, [r0, #16]
 8019ce0:	f10b 0701 	add.w	r7, fp, #1
 8019ce4:	6087      	str	r7, [r0, #8]
 8019ce6:	6907      	ldr	r7, [r0, #16]
 8019ce8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019cea:	803d      	strh	r5, [r7, #0]
 8019cec:	4555      	cmp	r5, sl
 8019cee:	807b      	strh	r3, [r7, #2]
 8019cf0:	80be      	strh	r6, [r7, #4]
 8019cf2:	80fe      	strh	r6, [r7, #6]
 8019cf4:	d1c2      	bne.n	8019c7c <_ZN8touchgfx7Outline10renderLineEiiii+0x720>
 8019cf6:	9b01      	ldr	r3, [sp, #4]
 8019cf8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8019cfa:	eba3 0c0c 	sub.w	ip, r3, ip
 8019cfe:	6903      	ldr	r3, [r0, #16]
 8019d00:	8899      	ldrh	r1, [r3, #4]
 8019d02:	4461      	add	r1, ip
 8019d04:	8099      	strh	r1, [r3, #4]
 8019d06:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019d08:	3720      	adds	r7, #32
 8019d0a:	1a7f      	subs	r7, r7, r1
 8019d0c:	88d9      	ldrh	r1, [r3, #6]
 8019d0e:	fb0c 1c07 	mla	ip, ip, r7, r1
 8019d12:	f8a3 c006 	strh.w	ip, [r3, #6]
 8019d16:	e60e      	b.n	8019936 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8019d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019d1a:	f04f 34ff 	mov.w	r4, #4294967295
 8019d1e:	940d      	str	r4, [sp, #52]	; 0x34
 8019d20:	437b      	muls	r3, r7
 8019d22:	4249      	negs	r1, r1
 8019d24:	2400      	movs	r4, #0
 8019d26:	e756      	b.n	8019bd6 <_ZN8touchgfx7Outline10renderLineEiiii+0x67a>
 8019d28:	9905      	ldr	r1, [sp, #20]
 8019d2a:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8019d2e:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8019d32:	f001 011f 	and.w	r1, r1, #31
 8019d36:	ea4f 1b69 	mov.w	fp, r9, asr #5
 8019d3a:	9102      	str	r1, [sp, #8]
 8019d3c:	9904      	ldr	r1, [sp, #16]
 8019d3e:	45f3      	cmp	fp, lr
 8019d40:	f009 0c1f 	and.w	ip, r9, #31
 8019d44:	eba1 0406 	sub.w	r4, r1, r6
 8019d48:	d108      	bne.n	8019d5c <_ZN8touchgfx7Outline10renderLineEiiii+0x800>
 8019d4a:	9b02      	ldr	r3, [sp, #8]
 8019d4c:	449c      	add	ip, r3
 8019d4e:	44a0      	add	r8, r4
 8019d50:	fb04 a40c 	mla	r4, r4, ip, sl
 8019d54:	f8a7 8004 	strh.w	r8, [r7, #4]
 8019d58:	80fc      	strh	r4, [r7, #6]
 8019d5a:	e458      	b.n	801960e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8019d5c:	9905      	ldr	r1, [sp, #20]
 8019d5e:	ebb1 0109 	subs.w	r1, r1, r9
 8019d62:	bf5b      	ittet	pl
 8019d64:	f1cc 0520 	rsbpl	r5, ip, #32
 8019d68:	436c      	mulpl	r4, r5
 8019d6a:	2500      	movmi	r5, #0
 8019d6c:	2520      	movpl	r5, #32
 8019d6e:	bf44      	itt	mi
 8019d70:	fb04 f40c 	mulmi.w	r4, r4, ip
 8019d74:	4249      	negmi	r1, r1
 8019d76:	9501      	str	r5, [sp, #4]
 8019d78:	9b01      	ldr	r3, [sp, #4]
 8019d7a:	fb94 f5f1 	sdiv	r5, r4, r1
 8019d7e:	fb01 4415 	mls	r4, r1, r5, r4
 8019d82:	bf54      	ite	pl
 8019d84:	f04f 0901 	movpl.w	r9, #1
 8019d88:	f04f 39ff 	movmi.w	r9, #4294967295
 8019d8c:	2c00      	cmp	r4, #0
 8019d8e:	bfb8      	it	lt
 8019d90:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8019d94:	449c      	add	ip, r3
 8019d96:	44a8      	add	r8, r5
 8019d98:	fb05 ac0c 	mla	ip, r5, ip, sl
 8019d9c:	f8a7 8004 	strh.w	r8, [r7, #4]
 8019da0:	f8a7 c006 	strh.w	ip, [r7, #6]
 8019da4:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8019da8:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8019dac:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8019db0:	bfb8      	it	lt
 8019db2:	1864      	addlt	r4, r4, r1
 8019db4:	ea58 0707 	orrs.w	r7, r8, r7
 8019db8:	eb0b 0309 	add.w	r3, fp, r9
 8019dbc:	d011      	beq.n	8019de2 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 8019dbe:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8019dc2:	f1b8 0f00 	cmp.w	r8, #0
 8019dc6:	db0c      	blt.n	8019de2 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 8019dc8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8019dca:	45b8      	cmp	r8, r7
 8019dcc:	da09      	bge.n	8019de2 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 8019dce:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8019dd2:	45b8      	cmp	r8, r7
 8019dd4:	bf3c      	itt	cc
 8019dd6:	f10c 0708 	addcc.w	r7, ip, #8
 8019dda:	6107      	strcc	r7, [r0, #16]
 8019ddc:	f108 0701 	add.w	r7, r8, #1
 8019de0:	6087      	str	r7, [r0, #8]
 8019de2:	6907      	ldr	r7, [r0, #16]
 8019de4:	f04f 0c00 	mov.w	ip, #0
 8019de8:	b212      	sxth	r2, r2
 8019dea:	459e      	cmp	lr, r3
 8019dec:	803b      	strh	r3, [r7, #0]
 8019dee:	807a      	strh	r2, [r7, #2]
 8019df0:	f8a7 c004 	strh.w	ip, [r7, #4]
 8019df4:	f8a7 c006 	strh.w	ip, [r7, #6]
 8019df8:	442e      	add	r6, r5
 8019dfa:	d04d      	beq.n	8019e98 <_ZN8touchgfx7Outline10renderLineEiiii+0x93c>
 8019dfc:	9f04      	ldr	r7, [sp, #16]
 8019dfe:	1bbf      	subs	r7, r7, r6
 8019e00:	443d      	add	r5, r7
 8019e02:	016d      	lsls	r5, r5, #5
 8019e04:	fb95 f8f1 	sdiv	r8, r5, r1
 8019e08:	fb01 5518 	mls	r5, r1, r8, r5
 8019e0c:	4565      	cmp	r5, ip
 8019e0e:	bfb8      	it	lt
 8019e10:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8019e14:	f108 0701 	add.w	r7, r8, #1
 8019e18:	bfb8      	it	lt
 8019e1a:	186d      	addlt	r5, r5, r1
 8019e1c:	1a64      	subs	r4, r4, r1
 8019e1e:	9703      	str	r7, [sp, #12]
 8019e20:	f04f 0a00 	mov.w	sl, #0
 8019e24:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8019e28:	1964      	adds	r4, r4, r5
 8019e2a:	bf58      	it	pl
 8019e2c:	9f03      	ldrpl	r7, [sp, #12]
 8019e2e:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8019e32:	bf48      	it	mi
 8019e34:	4647      	movmi	r7, r8
 8019e36:	44bb      	add	fp, r7
 8019e38:	f8ac b004 	strh.w	fp, [ip, #4]
 8019e3c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8019e40:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8019e44:	f8ac b006 	strh.w	fp, [ip, #6]
 8019e48:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8019e4c:	443e      	add	r6, r7
 8019e4e:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8019e52:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8019e56:	bf58      	it	pl
 8019e58:	1a64      	subpl	r4, r4, r1
 8019e5a:	ea5b 0707 	orrs.w	r7, fp, r7
 8019e5e:	444b      	add	r3, r9
 8019e60:	d011      	beq.n	8019e86 <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 8019e62:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8019e66:	f1bb 0f00 	cmp.w	fp, #0
 8019e6a:	db0c      	blt.n	8019e86 <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 8019e6c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8019e6e:	45bb      	cmp	fp, r7
 8019e70:	da09      	bge.n	8019e86 <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 8019e72:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8019e76:	45bb      	cmp	fp, r7
 8019e78:	bf3c      	itt	cc
 8019e7a:	f10c 0708 	addcc.w	r7, ip, #8
 8019e7e:	6107      	strcc	r7, [r0, #16]
 8019e80:	f10b 0701 	add.w	r7, fp, #1
 8019e84:	6087      	str	r7, [r0, #8]
 8019e86:	6907      	ldr	r7, [r0, #16]
 8019e88:	459e      	cmp	lr, r3
 8019e8a:	803b      	strh	r3, [r7, #0]
 8019e8c:	807a      	strh	r2, [r7, #2]
 8019e8e:	f8a7 a004 	strh.w	sl, [r7, #4]
 8019e92:	f8a7 a006 	strh.w	sl, [r7, #6]
 8019e96:	d1c5      	bne.n	8019e24 <_ZN8touchgfx7Outline10renderLineEiiii+0x8c8>
 8019e98:	9b04      	ldr	r3, [sp, #16]
 8019e9a:	1b9e      	subs	r6, r3, r6
 8019e9c:	6903      	ldr	r3, [r0, #16]
 8019e9e:	889a      	ldrh	r2, [r3, #4]
 8019ea0:	4432      	add	r2, r6
 8019ea2:	809a      	strh	r2, [r3, #4]
 8019ea4:	9a02      	ldr	r2, [sp, #8]
 8019ea6:	f102 0c20 	add.w	ip, r2, #32
 8019eaa:	9a01      	ldr	r2, [sp, #4]
 8019eac:	ebac 0c02 	sub.w	ip, ip, r2
 8019eb0:	88da      	ldrh	r2, [r3, #6]
 8019eb2:	fb06 260c 	mla	r6, r6, ip, r2
 8019eb6:	80de      	strh	r6, [r3, #6]
 8019eb8:	f7ff bba9 	b.w	801960e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>

08019ebc <_ZN8touchgfx7Outline6lineToEii>:
 8019ebc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8019ebe:	079b      	lsls	r3, r3, #30
 8019ec0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019ec2:	460e      	mov	r6, r1
 8019ec4:	4615      	mov	r5, r2
 8019ec6:	d511      	bpl.n	8019eec <_ZN8touchgfx7Outline6lineToEii+0x30>
 8019ec8:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8019ecc:	ea86 0701 	eor.w	r7, r6, r1
 8019ed0:	ea85 0302 	eor.w	r3, r5, r2
 8019ed4:	433b      	orrs	r3, r7
 8019ed6:	d009      	beq.n	8019eec <_ZN8touchgfx7Outline6lineToEii+0x30>
 8019ed8:	4633      	mov	r3, r6
 8019eda:	9500      	str	r5, [sp, #0]
 8019edc:	f7ff fb3e 	bl	801955c <_ZN8touchgfx7Outline10renderLineEiiii>
 8019ee0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8019ee2:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8019ee6:	f043 0301 	orr.w	r3, r3, #1
 8019eea:	6243      	str	r3, [r0, #36]	; 0x24
 8019eec:	b003      	add	sp, #12
 8019eee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019ef0 <_ZN8touchgfx7Outline6moveToEii>:
 8019ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ef2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8019ef4:	4615      	mov	r5, r2
 8019ef6:	079a      	lsls	r2, r3, #30
 8019ef8:	4604      	mov	r4, r0
 8019efa:	460e      	mov	r6, r1
 8019efc:	d401      	bmi.n	8019f02 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8019efe:	f7ff faf9 	bl	80194f4 <_ZN8touchgfx7Outline5resetEv>
 8019f02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019f04:	07db      	lsls	r3, r3, #31
 8019f06:	d504      	bpl.n	8019f12 <_ZN8touchgfx7Outline6moveToEii+0x22>
 8019f08:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8019f0c:	4620      	mov	r0, r4
 8019f0e:	f7ff ffd5 	bl	8019ebc <_ZN8touchgfx7Outline6lineToEii>
 8019f12:	6923      	ldr	r3, [r4, #16]
 8019f14:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019f18:	1170      	asrs	r0, r6, #5
 8019f1a:	4290      	cmp	r0, r2
 8019f1c:	ea4f 1165 	mov.w	r1, r5, asr #5
 8019f20:	d103      	bne.n	8019f2a <_ZN8touchgfx7Outline6moveToEii+0x3a>
 8019f22:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019f26:	4291      	cmp	r1, r2
 8019f28:	d01a      	beq.n	8019f60 <_ZN8touchgfx7Outline6moveToEii+0x70>
 8019f2a:	88df      	ldrh	r7, [r3, #6]
 8019f2c:	889a      	ldrh	r2, [r3, #4]
 8019f2e:	433a      	orrs	r2, r7
 8019f30:	d010      	beq.n	8019f54 <_ZN8touchgfx7Outline6moveToEii+0x64>
 8019f32:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019f36:	2a00      	cmp	r2, #0
 8019f38:	db0c      	blt.n	8019f54 <_ZN8touchgfx7Outline6moveToEii+0x64>
 8019f3a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8019f3c:	42ba      	cmp	r2, r7
 8019f3e:	da09      	bge.n	8019f54 <_ZN8touchgfx7Outline6moveToEii+0x64>
 8019f40:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8019f44:	42ba      	cmp	r2, r7
 8019f46:	bf38      	it	cc
 8019f48:	3308      	addcc	r3, #8
 8019f4a:	f102 0201 	add.w	r2, r2, #1
 8019f4e:	bf38      	it	cc
 8019f50:	6123      	strcc	r3, [r4, #16]
 8019f52:	60a2      	str	r2, [r4, #8]
 8019f54:	6923      	ldr	r3, [r4, #16]
 8019f56:	2200      	movs	r2, #0
 8019f58:	8018      	strh	r0, [r3, #0]
 8019f5a:	8059      	strh	r1, [r3, #2]
 8019f5c:	809a      	strh	r2, [r3, #4]
 8019f5e:	80da      	strh	r2, [r3, #6]
 8019f60:	6166      	str	r6, [r4, #20]
 8019f62:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8019f66:	6225      	str	r5, [r4, #32]
 8019f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019f6a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8019f6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019f6e:	b0d0      	sub	sp, #320	; 0x140
 8019f70:	466c      	mov	r4, sp
 8019f72:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8019f76:	4627      	mov	r7, r4
 8019f78:	1a0d      	subs	r5, r1, r0
 8019f7a:	2d48      	cmp	r5, #72	; 0x48
 8019f7c:	f100 0308 	add.w	r3, r0, #8
 8019f80:	f340 80d5 	ble.w	801a12e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8019f84:	112d      	asrs	r5, r5, #4
 8019f86:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 8019f8a:	f9b0 9000 	ldrsh.w	r9, [r0]
 8019f8e:	6816      	ldr	r6, [r2, #0]
 8019f90:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8019f94:	6006      	str	r6, [r0, #0]
 8019f96:	6856      	ldr	r6, [r2, #4]
 8019f98:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8019f9c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8019fa0:	6046      	str	r6, [r0, #4]
 8019fa2:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8019fa6:	f8a2 8002 	strh.w	r8, [r2, #2]
 8019faa:	f8a2 e004 	strh.w	lr, [r2, #4]
 8019fae:	f8a2 c006 	strh.w	ip, [r2, #6]
 8019fb2:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8019fb6:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8019fba:	4565      	cmp	r5, ip
 8019fbc:	f1a1 0208 	sub.w	r2, r1, #8
 8019fc0:	db06      	blt.n	8019fd0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8019fc2:	d119      	bne.n	8019ff8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8019fc4:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8019fc8:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8019fcc:	42ae      	cmp	r6, r5
 8019fce:	dd13      	ble.n	8019ff8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8019fd0:	460e      	mov	r6, r1
 8019fd2:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8019fd6:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8019fda:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8019fde:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8019fe2:	601d      	str	r5, [r3, #0]
 8019fe4:	6875      	ldr	r5, [r6, #4]
 8019fe6:	605d      	str	r5, [r3, #4]
 8019fe8:	f821 9c08 	strh.w	r9, [r1, #-8]
 8019fec:	f821 cc06 	strh.w	ip, [r1, #-6]
 8019ff0:	f821 8c04 	strh.w	r8, [r1, #-4]
 8019ff4:	f821 ec02 	strh.w	lr, [r1, #-2]
 8019ff8:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8019ffc:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 801a000:	42ae      	cmp	r6, r5
 801a002:	db06      	blt.n	801a012 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 801a004:	d116      	bne.n	801a034 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 801a006:	f9b0 c000 	ldrsh.w	ip, [r0]
 801a00a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 801a00e:	45ac      	cmp	ip, r5
 801a010:	da10      	bge.n	801a034 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 801a012:	681d      	ldr	r5, [r3, #0]
 801a014:	f9b0 8000 	ldrsh.w	r8, [r0]
 801a018:	6005      	str	r5, [r0, #0]
 801a01a:	685d      	ldr	r5, [r3, #4]
 801a01c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801a020:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801a024:	f8a0 8008 	strh.w	r8, [r0, #8]
 801a028:	6045      	str	r5, [r0, #4]
 801a02a:	8146      	strh	r6, [r0, #10]
 801a02c:	f8a0 e00c 	strh.w	lr, [r0, #12]
 801a030:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801a034:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 801a038:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801a03c:	4565      	cmp	r5, ip
 801a03e:	db06      	blt.n	801a04e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 801a040:	d119      	bne.n	801a076 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801a042:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 801a046:	f9b0 5000 	ldrsh.w	r5, [r0]
 801a04a:	42ae      	cmp	r6, r5
 801a04c:	da13      	bge.n	801a076 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801a04e:	460e      	mov	r6, r1
 801a050:	f9b0 9000 	ldrsh.w	r9, [r0]
 801a054:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801a058:	6005      	str	r5, [r0, #0]
 801a05a:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 801a05e:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 801a062:	6875      	ldr	r5, [r6, #4]
 801a064:	6045      	str	r5, [r0, #4]
 801a066:	f821 9c08 	strh.w	r9, [r1, #-8]
 801a06a:	f821 cc06 	strh.w	ip, [r1, #-6]
 801a06e:	f821 8c04 	strh.w	r8, [r1, #-4]
 801a072:	f821 ec02 	strh.w	lr, [r1, #-2]
 801a076:	3308      	adds	r3, #8
 801a078:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801a07c:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 801a080:	45e6      	cmp	lr, ip
 801a082:	dbf8      	blt.n	801a076 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801a084:	d105      	bne.n	801a092 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801a086:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a08a:	f9b0 5000 	ldrsh.w	r5, [r0]
 801a08e:	42ae      	cmp	r6, r5
 801a090:	dbf1      	blt.n	801a076 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801a092:	4615      	mov	r5, r2
 801a094:	3a08      	subs	r2, #8
 801a096:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 801a09a:	45b4      	cmp	ip, r6
 801a09c:	dbf9      	blt.n	801a092 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801a09e:	d105      	bne.n	801a0ac <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 801a0a0:	f9b0 8000 	ldrsh.w	r8, [r0]
 801a0a4:	f9b2 6000 	ldrsh.w	r6, [r2]
 801a0a8:	45b0      	cmp	r8, r6
 801a0aa:	dbf2      	blt.n	801a092 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801a0ac:	4293      	cmp	r3, r2
 801a0ae:	f1a5 0608 	sub.w	r6, r5, #8
 801a0b2:	d816      	bhi.n	801a0e2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 801a0b4:	f8d6 c000 	ldr.w	ip, [r6]
 801a0b8:	f9b3 a000 	ldrsh.w	sl, [r3]
 801a0bc:	f8c3 c000 	str.w	ip, [r3]
 801a0c0:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 801a0c4:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 801a0c8:	f8d6 c004 	ldr.w	ip, [r6, #4]
 801a0cc:	f8c3 c004 	str.w	ip, [r3, #4]
 801a0d0:	f825 ac08 	strh.w	sl, [r5, #-8]
 801a0d4:	f825 ec06 	strh.w	lr, [r5, #-6]
 801a0d8:	f825 9c04 	strh.w	r9, [r5, #-4]
 801a0dc:	f825 8c02 	strh.w	r8, [r5, #-2]
 801a0e0:	e7c9      	b.n	801a076 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801a0e2:	f8d6 e000 	ldr.w	lr, [r6]
 801a0e6:	f9b0 a000 	ldrsh.w	sl, [r0]
 801a0ea:	f8c0 e000 	str.w	lr, [r0]
 801a0ee:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 801a0f2:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 801a0f6:	f8d6 e004 	ldr.w	lr, [r6, #4]
 801a0fa:	f8c0 e004 	str.w	lr, [r0, #4]
 801a0fe:	f825 ac08 	strh.w	sl, [r5, #-8]
 801a102:	f825 cc06 	strh.w	ip, [r5, #-6]
 801a106:	f825 9c04 	strh.w	r9, [r5, #-4]
 801a10a:	f825 8c02 	strh.w	r8, [r5, #-2]
 801a10e:	1acd      	subs	r5, r1, r3
 801a110:	1a16      	subs	r6, r2, r0
 801a112:	10ed      	asrs	r5, r5, #3
 801a114:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 801a118:	bfb5      	itete	lt
 801a11a:	e9c4 0200 	strdlt	r0, r2, [r4]
 801a11e:	e9c4 3100 	strdge	r3, r1, [r4]
 801a122:	460a      	movlt	r2, r1
 801a124:	4603      	movge	r3, r0
 801a126:	3408      	adds	r4, #8
 801a128:	4618      	mov	r0, r3
 801a12a:	4611      	mov	r1, r2
 801a12c:	e724      	b.n	8019f78 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 801a12e:	4299      	cmp	r1, r3
 801a130:	d928      	bls.n	801a184 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x21a>
 801a132:	f1a3 0210 	sub.w	r2, r3, #16
 801a136:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 801a13a:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 801a13e:	45ac      	cmp	ip, r5
 801a140:	db06      	blt.n	801a150 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 801a142:	d11d      	bne.n	801a180 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x216>
 801a144:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 801a148:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 801a14c:	42ae      	cmp	r6, r5
 801a14e:	da17      	bge.n	801a180 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x216>
 801a150:	4615      	mov	r5, r2
 801a152:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 801a156:	f855 6f08 	ldr.w	r6, [r5, #8]!
 801a15a:	6116      	str	r6, [r2, #16]
 801a15c:	686e      	ldr	r6, [r5, #4]
 801a15e:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 801a162:	f9b2 e016 	ldrsh.w	lr, [r2, #22]
 801a166:	f8a2 9008 	strh.w	r9, [r2, #8]
 801a16a:	42a8      	cmp	r0, r5
 801a16c:	6156      	str	r6, [r2, #20]
 801a16e:	f8a2 c00a 	strh.w	ip, [r2, #10]
 801a172:	f8a2 800c 	strh.w	r8, [r2, #12]
 801a176:	f8a2 e00e 	strh.w	lr, [r2, #14]
 801a17a:	f1a2 0208 	sub.w	r2, r2, #8
 801a17e:	d1da      	bne.n	801a136 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 801a180:	3308      	adds	r3, #8
 801a182:	e7d4      	b.n	801a12e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801a184:	42bc      	cmp	r4, r7
 801a186:	d903      	bls.n	801a190 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x226>
 801a188:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 801a18c:	3c08      	subs	r4, #8
 801a18e:	e6f3      	b.n	8019f78 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 801a190:	b050      	add	sp, #320	; 0x140
 801a192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801a196 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 801a196:	b510      	push	{r4, lr}
 801a198:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801a19a:	07da      	lsls	r2, r3, #31
 801a19c:	4604      	mov	r4, r0
 801a19e:	d507      	bpl.n	801a1b0 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 801a1a0:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 801a1a4:	f7ff fe8a 	bl	8019ebc <_ZN8touchgfx7Outline6lineToEii>
 801a1a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801a1aa:	f023 0301 	bic.w	r3, r3, #1
 801a1ae:	6243      	str	r3, [r0, #36]	; 0x24
 801a1b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a1b2:	079b      	lsls	r3, r3, #30
 801a1b4:	d521      	bpl.n	801a1fa <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 801a1b6:	6923      	ldr	r3, [r4, #16]
 801a1b8:	88d9      	ldrh	r1, [r3, #6]
 801a1ba:	889a      	ldrh	r2, [r3, #4]
 801a1bc:	430a      	orrs	r2, r1
 801a1be:	d010      	beq.n	801a1e2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801a1c0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801a1c4:	2a00      	cmp	r2, #0
 801a1c6:	db0c      	blt.n	801a1e2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801a1c8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801a1ca:	428a      	cmp	r2, r1
 801a1cc:	da09      	bge.n	801a1e2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801a1ce:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 801a1d2:	4291      	cmp	r1, r2
 801a1d4:	bf88      	it	hi
 801a1d6:	3308      	addhi	r3, #8
 801a1d8:	f102 0201 	add.w	r2, r2, #1
 801a1dc:	bf88      	it	hi
 801a1de:	6123      	strhi	r3, [r4, #16]
 801a1e0:	60a2      	str	r2, [r4, #8]
 801a1e2:	68a1      	ldr	r1, [r4, #8]
 801a1e4:	b129      	cbz	r1, 801a1f2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801a1e6:	6863      	ldr	r3, [r4, #4]
 801a1e8:	4299      	cmp	r1, r3
 801a1ea:	d802      	bhi.n	801a1f2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801a1ec:	68e0      	ldr	r0, [r4, #12]
 801a1ee:	f7ff febc 	bl	8019f6a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 801a1f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a1f4:	f023 0302 	bic.w	r3, r3, #2
 801a1f8:	6263      	str	r3, [r4, #36]	; 0x24
 801a1fa:	68e0      	ldr	r0, [r4, #12]
 801a1fc:	bd10      	pop	{r4, pc}
	...

0801a200 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 801a200:	4b01      	ldr	r3, [pc, #4]	; (801a208 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801a202:	6818      	ldr	r0, [r3, #0]
 801a204:	4770      	bx	lr
 801a206:	bf00      	nop
 801a208:	2000af50 	.word	0x2000af50

0801a20c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801a20c:	4b01      	ldr	r3, [pc, #4]	; (801a214 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801a20e:	6818      	ldr	r0, [r3, #0]
 801a210:	4770      	bx	lr
 801a212:	bf00      	nop
 801a214:	2000af54 	.word	0x2000af54

0801a218 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801a218:	b510      	push	{r4, lr}
 801a21a:	6803      	ldr	r3, [r0, #0]
 801a21c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a21e:	460c      	mov	r4, r1
 801a220:	4798      	blx	r3
 801a222:	1b03      	subs	r3, r0, r4
 801a224:	4258      	negs	r0, r3
 801a226:	4158      	adcs	r0, r3
 801a228:	bd10      	pop	{r4, pc}
	...

0801a22c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801a22c:	4b01      	ldr	r3, [pc, #4]	; (801a234 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801a22e:	6019      	str	r1, [r3, #0]
 801a230:	4770      	bx	lr
 801a232:	bf00      	nop
 801a234:	2000af58 	.word	0x2000af58

0801a238 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801a238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a23c:	4696      	mov	lr, r2
 801a23e:	4605      	mov	r5, r0
 801a240:	4614      	mov	r4, r2
 801a242:	460e      	mov	r6, r1
 801a244:	461f      	mov	r7, r3
 801a246:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a24a:	b097      	sub	sp, #92	; 0x5c
 801a24c:	f10d 0c1c 	add.w	ip, sp, #28
 801a250:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a254:	f8de 3000 	ldr.w	r3, [lr]
 801a258:	f8cc 3000 	str.w	r3, [ip]
 801a25c:	f104 0e14 	add.w	lr, r4, #20
 801a260:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a264:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801a268:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a26c:	f8de 3000 	ldr.w	r3, [lr]
 801a270:	f8cc 3000 	str.w	r3, [ip]
 801a274:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801a278:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a27c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801a280:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a284:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 801a288:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 801a28c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801a290:	f8de 3000 	ldr.w	r3, [lr]
 801a294:	f8cc 3000 	str.w	r3, [ip]
 801a298:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a29a:	682b      	ldr	r3, [r5, #0]
 801a29c:	9201      	str	r2, [sp, #4]
 801a29e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801a2a2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a2a4:	9200      	str	r2, [sp, #0]
 801a2a6:	f8cd 8008 	str.w	r8, [sp, #8]
 801a2aa:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 801a2ae:	aa07      	add	r2, sp, #28
 801a2b0:	463b      	mov	r3, r7
 801a2b2:	4631      	mov	r1, r6
 801a2b4:	4628      	mov	r0, r5
 801a2b6:	47d8      	blx	fp
 801a2b8:	46a6      	mov	lr, r4
 801a2ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a2be:	f10d 0c1c 	add.w	ip, sp, #28
 801a2c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a2c6:	f8de 3000 	ldr.w	r3, [lr]
 801a2ca:	f8cc 3000 	str.w	r3, [ip]
 801a2ce:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801a2d2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a2d6:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801a2da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a2de:	343c      	adds	r4, #60	; 0x3c
 801a2e0:	f8de 3000 	ldr.w	r3, [lr]
 801a2e4:	f8cc 3000 	str.w	r3, [ip]
 801a2e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a2ea:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801a2ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a2f2:	6823      	ldr	r3, [r4, #0]
 801a2f4:	f8cc 3000 	str.w	r3, [ip]
 801a2f8:	682b      	ldr	r3, [r5, #0]
 801a2fa:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801a2fe:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a300:	9201      	str	r2, [sp, #4]
 801a302:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a304:	9200      	str	r2, [sp, #0]
 801a306:	f8cd 8008 	str.w	r8, [sp, #8]
 801a30a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 801a30c:	aa07      	add	r2, sp, #28
 801a30e:	463b      	mov	r3, r7
 801a310:	4631      	mov	r1, r6
 801a312:	4628      	mov	r0, r5
 801a314:	47a0      	blx	r4
 801a316:	b017      	add	sp, #92	; 0x5c
 801a318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a31c <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801a31c:	2000      	movs	r0, #0
 801a31e:	4770      	bx	lr

0801a320 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801a320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a324:	b08d      	sub	sp, #52	; 0x34
 801a326:	4688      	mov	r8, r1
 801a328:	9916      	ldr	r1, [sp, #88]	; 0x58
 801a32a:	f8d3 c000 	ldr.w	ip, [r3]
 801a32e:	680f      	ldr	r7, [r1, #0]
 801a330:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801a334:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 801a338:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801a33c:	edd3 6a07 	vldr	s13, [r3, #28]
 801a340:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a342:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801a346:	f9b1 9000 	ldrsh.w	r9, [r1]
 801a34a:	f9ba 1000 	ldrsh.w	r1, [sl]
 801a34e:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801a352:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801a356:	eba7 070c 	sub.w	r7, r7, ip
 801a35a:	42bc      	cmp	r4, r7
 801a35c:	bfa8      	it	ge
 801a35e:	463c      	movge	r4, r7
 801a360:	ee07 4a90 	vmov	s15, r4
 801a364:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801a368:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801a36c:	ee25 4a04 	vmul.f32	s8, s10, s8
 801a370:	ee65 4a24 	vmul.f32	s9, s10, s9
 801a374:	ee25 5a27 	vmul.f32	s10, s10, s15
 801a378:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801a37c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801a380:	eb09 0e0c 	add.w	lr, r9, ip
 801a384:	4571      	cmp	r1, lr
 801a386:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801a38a:	ee32 1a05 	vadd.f32	s2, s4, s10
 801a38e:	ee36 0a84 	vadd.f32	s0, s13, s8
 801a392:	ee61 1a87 	vmul.f32	s3, s3, s14
 801a396:	ee22 2a07 	vmul.f32	s4, s4, s14
 801a39a:	f340 808d 	ble.w	801a4b8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 801a39e:	eba1 060e 	sub.w	r6, r1, lr
 801a3a2:	fb96 f5f4 	sdiv	r5, r6, r4
 801a3a6:	ee07 5a10 	vmov	s14, r5
 801a3aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a3ae:	2d00      	cmp	r5, #0
 801a3b0:	fb04 6615 	mls	r6, r4, r5, r6
 801a3b4:	eea7 0a04 	vfma.f32	s0, s14, s8
 801a3b8:	eee7 0a24 	vfma.f32	s1, s14, s9
 801a3bc:	eea7 1a05 	vfma.f32	s2, s14, s10
 801a3c0:	dd13      	ble.n	801a3ea <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca>
 801a3c2:	ee70 6a44 	vsub.f32	s13, s0, s8
 801a3c6:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801a3ca:	eef5 6a40 	vcmp.f32	s13, #0.0
 801a3ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3d2:	bf18      	it	ne
 801a3d4:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801a3d8:	ee31 2a45 	vsub.f32	s4, s2, s10
 801a3dc:	bf08      	it	eq
 801a3de:	eeb0 7a67 	vmoveq.f32	s14, s15
 801a3e2:	ee61 1a87 	vmul.f32	s3, s3, s14
 801a3e6:	ee22 2a07 	vmul.f32	s4, s4, s14
 801a3ea:	fb05 f204 	mul.w	r2, r5, r4
 801a3ee:	1abf      	subs	r7, r7, r2
 801a3f0:	4494      	add	ip, r2
 801a3f2:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801a3f6:	4411      	add	r1, r2
 801a3f8:	eb09 020c 	add.w	r2, r9, ip
 801a3fc:	443a      	add	r2, r7
 801a3fe:	b209      	sxth	r1, r1
 801a400:	428a      	cmp	r2, r1
 801a402:	bfc4      	itt	gt
 801a404:	eba1 0209 	subgt.w	r2, r1, r9
 801a408:	eba2 070c 	subgt.w	r7, r2, ip
 801a40c:	2f00      	cmp	r7, #0
 801a40e:	dd50      	ble.n	801a4b2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x192>
 801a410:	fb97 f1f4 	sdiv	r1, r7, r4
 801a414:	fb04 7211 	mls	r2, r4, r1, r7
 801a418:	b90a      	cbnz	r2, 801a41e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 801a41a:	3901      	subs	r1, #1
 801a41c:	4622      	mov	r2, r4
 801a41e:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801a422:	6840      	ldr	r0, [r0, #4]
 801a424:	900b      	str	r0, [sp, #44]	; 0x2c
 801a426:	f8d0 a000 	ldr.w	sl, [r0]
 801a42a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a42c:	9008      	str	r0, [sp, #32]
 801a42e:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801a432:	9818      	ldr	r0, [sp, #96]	; 0x60
 801a434:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801a438:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801a43c:	695b      	ldr	r3, [r3, #20]
 801a43e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801a440:	445b      	add	r3, fp
 801a442:	eef0 6a42 	vmov.f32	s13, s4
 801a446:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801a44a:	ee21 3a23 	vmul.f32	s6, s2, s7
 801a44e:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801a452:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a456:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801a45a:	9307      	str	r3, [sp, #28]
 801a45c:	ee17 7a90 	vmov	r7, s15
 801a460:	ee73 7a42 	vsub.f32	s15, s6, s4
 801a464:	eeb0 7a61 	vmov.f32	s14, s3
 801a468:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801a46c:	ee16 3a90 	vmov	r3, s13
 801a470:	fb97 f7f4 	sdiv	r7, r7, r4
 801a474:	ee17 ca90 	vmov	ip, s15
 801a478:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801a47c:	fb9c fcf4 	sdiv	ip, ip, r4
 801a480:	fb0c 3306 	mla	r3, ip, r6, r3
 801a484:	9302      	str	r3, [sp, #8]
 801a486:	ee17 3a10 	vmov	r3, s14
 801a48a:	44b6      	add	lr, r6
 801a48c:	fb04 e505 	mla	r5, r4, r5, lr
 801a490:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801a494:	fb07 3706 	mla	r7, r7, r6, r3
 801a498:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801a49c:	e9cd 4700 	strd	r4, r7, [sp]
 801a4a0:	2900      	cmp	r1, #0
 801a4a2:	bfcc      	ite	gt
 801a4a4:	46a1      	movgt	r9, r4
 801a4a6:	4691      	movle	r9, r2
 801a4a8:	eba9 0306 	sub.w	r3, r9, r6
 801a4ac:	f8da 4008 	ldr.w	r4, [sl, #8]
 801a4b0:	47a0      	blx	r4
 801a4b2:	b00d      	add	sp, #52	; 0x34
 801a4b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4b8:	2500      	movs	r5, #0
 801a4ba:	462e      	mov	r6, r5
 801a4bc:	e799      	b.n	801a3f2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd2>
	...

0801a4c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801a4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4c4:	b0db      	sub	sp, #364	; 0x16c
 801a4c6:	461d      	mov	r5, r3
 801a4c8:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801a4cc:	930a      	str	r3, [sp, #40]	; 0x28
 801a4ce:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 801a4d2:	930b      	str	r3, [sp, #44]	; 0x2c
 801a4d4:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 801a4d8:	9310      	str	r3, [sp, #64]	; 0x40
 801a4da:	6803      	ldr	r3, [r0, #0]
 801a4dc:	910f      	str	r1, [sp, #60]	; 0x3c
 801a4de:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 801a4e0:	9009      	str	r0, [sp, #36]	; 0x24
 801a4e2:	4614      	mov	r4, r2
 801a4e4:	4629      	mov	r1, r5
 801a4e6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801a4ea:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801a4ee:	47b8      	blx	r7
 801a4f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a4f2:	6058      	str	r0, [r3, #4]
 801a4f4:	2800      	cmp	r0, #0
 801a4f6:	f000 83a1 	beq.w	801ac3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a4fa:	682b      	ldr	r3, [r5, #0]
 801a4fc:	9314      	str	r3, [sp, #80]	; 0x50
 801a4fe:	686b      	ldr	r3, [r5, #4]
 801a500:	9315      	str	r3, [sp, #84]	; 0x54
 801a502:	4bc4      	ldr	r3, [pc, #784]	; (801a814 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801a504:	ed94 7a02 	vldr	s14, [r4, #8]
 801a508:	7819      	ldrb	r1, [r3, #0]
 801a50a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801a50e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801a512:	2900      	cmp	r1, #0
 801a514:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a518:	bf16      	itet	ne
 801a51a:	4619      	movne	r1, r3
 801a51c:	4611      	moveq	r1, r2
 801a51e:	4613      	movne	r3, r2
 801a520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a524:	9116      	str	r1, [sp, #88]	; 0x58
 801a526:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801a52a:	f240 8387 	bls.w	801ac3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a52e:	ed94 7a07 	vldr	s14, [r4, #28]
 801a532:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a53a:	f240 837f 	bls.w	801ac3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a53e:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801a542:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a54a:	f240 8377 	bls.w	801ac3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a54e:	6822      	ldr	r2, [r4, #0]
 801a550:	4bb1      	ldr	r3, [pc, #708]	; (801a818 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801a552:	429a      	cmp	r2, r3
 801a554:	f2c0 8372 	blt.w	801ac3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a558:	49b0      	ldr	r1, [pc, #704]	; (801a81c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801a55a:	6963      	ldr	r3, [r4, #20]
 801a55c:	428a      	cmp	r2, r1
 801a55e:	f300 836d 	bgt.w	801ac3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a562:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801a566:	48ae      	ldr	r0, [pc, #696]	; (801a820 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801a568:	33ff      	adds	r3, #255	; 0xff
 801a56a:	4283      	cmp	r3, r0
 801a56c:	f200 8366 	bhi.w	801ac3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a570:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801a572:	4dac      	ldr	r5, [pc, #688]	; (801a824 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801a574:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801a578:	33ff      	adds	r3, #255	; 0xff
 801a57a:	42ab      	cmp	r3, r5
 801a57c:	f200 835e 	bhi.w	801ac3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a580:	6862      	ldr	r2, [r4, #4]
 801a582:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801a586:	33ff      	adds	r3, #255	; 0xff
 801a588:	4283      	cmp	r3, r0
 801a58a:	f200 8357 	bhi.w	801ac3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a58e:	69a1      	ldr	r1, [r4, #24]
 801a590:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801a594:	33ff      	adds	r3, #255	; 0xff
 801a596:	4283      	cmp	r3, r0
 801a598:	f200 8350 	bhi.w	801ac3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a59c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801a59e:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801a5a2:	30ff      	adds	r0, #255	; 0xff
 801a5a4:	42a8      	cmp	r0, r5
 801a5a6:	f200 8349 	bhi.w	801ac3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a5aa:	428a      	cmp	r2, r1
 801a5ac:	f280 8110 	bge.w	801a7d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801a5b0:	429a      	cmp	r2, r3
 801a5b2:	f300 8119 	bgt.w	801a7e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801a5b6:	4299      	cmp	r1, r3
 801a5b8:	f280 811d 	bge.w	801a7f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801a5bc:	2502      	movs	r5, #2
 801a5be:	2701      	movs	r7, #1
 801a5c0:	46a9      	mov	r9, r5
 801a5c2:	46b8      	mov	r8, r7
 801a5c4:	f04f 0a00 	mov.w	sl, #0
 801a5c8:	4621      	mov	r1, r4
 801a5ca:	a849      	add	r0, sp, #292	; 0x124
 801a5cc:	f003 fa98 	bl	801db00 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801a5d0:	4622      	mov	r2, r4
 801a5d2:	4653      	mov	r3, sl
 801a5d4:	a949      	add	r1, sp, #292	; 0x124
 801a5d6:	f8cd 9000 	str.w	r9, [sp]
 801a5da:	a819      	add	r0, sp, #100	; 0x64
 801a5dc:	f003 fbc0 	bl	801dd60 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a5e0:	4622      	mov	r2, r4
 801a5e2:	4653      	mov	r3, sl
 801a5e4:	a949      	add	r1, sp, #292	; 0x124
 801a5e6:	f8cd 8000 	str.w	r8, [sp]
 801a5ea:	a829      	add	r0, sp, #164	; 0xa4
 801a5ec:	f003 fbb8 	bl	801dd60 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a5f0:	4643      	mov	r3, r8
 801a5f2:	4622      	mov	r2, r4
 801a5f4:	a949      	add	r1, sp, #292	; 0x124
 801a5f6:	f8cd 9000 	str.w	r9, [sp]
 801a5fa:	a839      	add	r0, sp, #228	; 0xe4
 801a5fc:	f003 fbb0 	bl	801dd60 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a600:	42af      	cmp	r7, r5
 801a602:	bfb5      	itete	lt
 801a604:	2300      	movlt	r3, #0
 801a606:	2301      	movge	r3, #1
 801a608:	930e      	strlt	r3, [sp, #56]	; 0x38
 801a60a:	930e      	strge	r3, [sp, #56]	; 0x38
 801a60c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a60e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a612:	af12      	add	r7, sp, #72	; 0x48
 801a614:	bfb9      	ittee	lt
 801a616:	ad29      	addlt	r5, sp, #164	; 0xa4
 801a618:	ac19      	addlt	r4, sp, #100	; 0x64
 801a61a:	ad19      	addge	r5, sp, #100	; 0x64
 801a61c:	ac29      	addge	r4, sp, #164	; 0xa4
 801a61e:	e887 0003 	stmia.w	r7, {r0, r1}
 801a622:	b928      	cbnz	r0, 801a630 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801a624:	4b80      	ldr	r3, [pc, #512]	; (801a828 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801a626:	6818      	ldr	r0, [r3, #0]
 801a628:	6803      	ldr	r3, [r0, #0]
 801a62a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a62c:	4798      	blx	r3
 801a62e:	6038      	str	r0, [r7, #0]
 801a630:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801a632:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801a636:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a63a:	930c      	str	r3, [sp, #48]	; 0x30
 801a63c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a63e:	6963      	ldr	r3, [r4, #20]
 801a640:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801a642:	440b      	add	r3, r1
 801a644:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801a648:	4408      	add	r0, r1
 801a64a:	b200      	sxth	r0, r0
 801a64c:	4283      	cmp	r3, r0
 801a64e:	900d      	str	r0, [sp, #52]	; 0x34
 801a650:	f280 80dd 	bge.w	801a80e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801a654:	428b      	cmp	r3, r1
 801a656:	da08      	bge.n	801a66a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801a658:	2a00      	cmp	r2, #0
 801a65a:	dd06      	ble.n	801a66a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801a65c:	1acb      	subs	r3, r1, r3
 801a65e:	429a      	cmp	r2, r3
 801a660:	f2c0 80e4 	blt.w	801a82c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801a664:	2b00      	cmp	r3, #0
 801a666:	f300 80e2 	bgt.w	801a82e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801a66a:	6967      	ldr	r7, [r4, #20]
 801a66c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a66e:	443b      	add	r3, r7
 801a670:	461f      	mov	r7, r3
 801a672:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a674:	1bdf      	subs	r7, r3, r7
 801a676:	4297      	cmp	r7, r2
 801a678:	bfa8      	it	ge
 801a67a:	4617      	movge	r7, r2
 801a67c:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801a680:	2f00      	cmp	r7, #0
 801a682:	f340 8166 	ble.w	801a952 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801a686:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801a688:	6829      	ldr	r1, [r5, #0]
 801a68a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a68e:	f9bb 3000 	ldrsh.w	r3, [fp]
 801a692:	6820      	ldr	r0, [r4, #0]
 801a694:	4411      	add	r1, r2
 801a696:	4299      	cmp	r1, r3
 801a698:	dd1a      	ble.n	801a6d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801a69a:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801a69e:	440b      	add	r3, r1
 801a6a0:	4402      	add	r2, r0
 801a6a2:	b21b      	sxth	r3, r3
 801a6a4:	429a      	cmp	r2, r3
 801a6a6:	dc13      	bgt.n	801a6d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801a6a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a6aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a6ac:	681b      	ldr	r3, [r3, #0]
 801a6ae:	9206      	str	r2, [sp, #24]
 801a6b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a6b2:	9205      	str	r2, [sp, #20]
 801a6b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a6b6:	9500      	str	r5, [sp, #0]
 801a6b8:	e9cd b203 	strd	fp, r2, [sp, #12]
 801a6bc:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801a6be:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a6c0:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801a6c4:	a912      	add	r1, sp, #72	; 0x48
 801a6c6:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801a6ca:	aa49      	add	r2, sp, #292	; 0x124
 801a6cc:	4623      	mov	r3, r4
 801a6ce:	47c8      	blx	r9
 801a6d0:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a6d4:	441a      	add	r2, r3
 801a6d6:	6963      	ldr	r3, [r4, #20]
 801a6d8:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801a6dc:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801a6e0:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801a6e4:	68a1      	ldr	r1, [r4, #8]
 801a6e6:	ed94 6a08 	vldr	s12, [r4, #32]
 801a6ea:	6022      	str	r2, [r4, #0]
 801a6ec:	3301      	adds	r3, #1
 801a6ee:	6163      	str	r3, [r4, #20]
 801a6f0:	69a3      	ldr	r3, [r4, #24]
 801a6f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a6f6:	3b01      	subs	r3, #1
 801a6f8:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801a6fc:	61a3      	str	r3, [r4, #24]
 801a6fe:	6923      	ldr	r3, [r4, #16]
 801a700:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801a704:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a708:	edd4 6a07 	vldr	s13, [r4, #28]
 801a70c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801a710:	440b      	add	r3, r1
 801a712:	68e1      	ldr	r1, [r4, #12]
 801a714:	6123      	str	r3, [r4, #16]
 801a716:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a71a:	428b      	cmp	r3, r1
 801a71c:	edc4 6a07 	vstr	s13, [r4, #28]
 801a720:	db15      	blt.n	801a74e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801a722:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801a726:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a72a:	3201      	adds	r2, #1
 801a72c:	edc4 6a07 	vstr	s13, [r4, #28]
 801a730:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801a734:	6022      	str	r2, [r4, #0]
 801a736:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a73a:	1a5b      	subs	r3, r3, r1
 801a73c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801a740:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801a744:	6123      	str	r3, [r4, #16]
 801a746:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a74a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801a74e:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a752:	441a      	add	r2, r3
 801a754:	696b      	ldr	r3, [r5, #20]
 801a756:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801a75a:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801a75e:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801a762:	68a9      	ldr	r1, [r5, #8]
 801a764:	ed95 6a08 	vldr	s12, [r5, #32]
 801a768:	602a      	str	r2, [r5, #0]
 801a76a:	3301      	adds	r3, #1
 801a76c:	616b      	str	r3, [r5, #20]
 801a76e:	69ab      	ldr	r3, [r5, #24]
 801a770:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a774:	3b01      	subs	r3, #1
 801a776:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801a77a:	61ab      	str	r3, [r5, #24]
 801a77c:	692b      	ldr	r3, [r5, #16]
 801a77e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801a782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a786:	edd5 6a07 	vldr	s13, [r5, #28]
 801a78a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801a78e:	440b      	add	r3, r1
 801a790:	68e9      	ldr	r1, [r5, #12]
 801a792:	612b      	str	r3, [r5, #16]
 801a794:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a798:	428b      	cmp	r3, r1
 801a79a:	edc5 6a07 	vstr	s13, [r5, #28]
 801a79e:	db15      	blt.n	801a7cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801a7a0:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801a7a4:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a7a8:	3201      	adds	r2, #1
 801a7aa:	edc5 6a07 	vstr	s13, [r5, #28]
 801a7ae:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801a7b2:	602a      	str	r2, [r5, #0]
 801a7b4:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a7b8:	1a5b      	subs	r3, r3, r1
 801a7ba:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801a7be:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801a7c2:	612b      	str	r3, [r5, #16]
 801a7c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a7c8:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801a7cc:	3f01      	subs	r7, #1
 801a7ce:	e757      	b.n	801a680 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801a7d0:	4299      	cmp	r1, r3
 801a7d2:	dc13      	bgt.n	801a7fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801a7d4:	429a      	cmp	r2, r3
 801a7d6:	da14      	bge.n	801a802 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801a7d8:	2502      	movs	r5, #2
 801a7da:	2703      	movs	r7, #3
 801a7dc:	46a9      	mov	r9, r5
 801a7de:	f04f 0800 	mov.w	r8, #0
 801a7e2:	f04f 0a01 	mov.w	sl, #1
 801a7e6:	e6ef      	b.n	801a5c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801a7e8:	2501      	movs	r5, #1
 801a7ea:	2700      	movs	r7, #0
 801a7ec:	46a9      	mov	r9, r5
 801a7ee:	46b8      	mov	r8, r7
 801a7f0:	f04f 0a02 	mov.w	sl, #2
 801a7f4:	e6e8      	b.n	801a5c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801a7f6:	2501      	movs	r5, #1
 801a7f8:	2702      	movs	r7, #2
 801a7fa:	e6e1      	b.n	801a5c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801a7fc:	2500      	movs	r5, #0
 801a7fe:	2701      	movs	r7, #1
 801a800:	e7f4      	b.n	801a7ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801a802:	2702      	movs	r7, #2
 801a804:	2503      	movs	r5, #3
 801a806:	f04f 0900 	mov.w	r9, #0
 801a80a:	46b8      	mov	r8, r7
 801a80c:	e7e9      	b.n	801a7e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801a80e:	4613      	mov	r3, r2
 801a810:	e728      	b.n	801a664 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801a812:	bf00      	nop
 801a814:	2000af40 	.word	0x2000af40
 801a818:	fffd8f01 	.word	0xfffd8f01
 801a81c:	00027100 	.word	0x00027100
 801a820:	0004e1ff 	.word	0x0004e1ff
 801a824:	0004e1fe 	.word	0x0004e1fe
 801a828:	2000af48 	.word	0x2000af48
 801a82c:	4613      	mov	r3, r2
 801a82e:	992b      	ldr	r1, [sp, #172]	; 0xac
 801a830:	9111      	str	r1, [sp, #68]	; 0x44
 801a832:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801a836:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801a83a:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801a83c:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 801a840:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801a844:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801a848:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801a84c:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801a850:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801a854:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801a858:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801a85c:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801a860:	469e      	mov	lr, r3
 801a862:	469c      	mov	ip, r3
 801a864:	f04f 0900 	mov.w	r9, #0
 801a868:	f1bc 0f00 	cmp.w	ip, #0
 801a86c:	d147      	bne.n	801a8fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801a86e:	eb03 0c07 	add.w	ip, r3, r7
 801a872:	1ad7      	subs	r7, r2, r3
 801a874:	f1b9 0f00 	cmp.w	r9, #0
 801a878:	d009      	beq.n	801a88e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801a87a:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801a87e:	9029      	str	r0, [sp, #164]	; 0xa4
 801a880:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 801a884:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801a888:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801a88c:	912d      	str	r1, [sp, #180]	; 0xb4
 801a88e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801a890:	9111      	str	r1, [sp, #68]	; 0x44
 801a892:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801a896:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801a89a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801a89e:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801a8a2:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801a8a6:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801a8aa:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801a8ae:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801a8b2:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801a8b6:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801a8ba:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801a8be:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801a8c2:	f04f 0800 	mov.w	r8, #0
 801a8c6:	f1be 0f00 	cmp.w	lr, #0
 801a8ca:	d031      	beq.n	801a930 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801a8cc:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801a8ce:	4431      	add	r1, r6
 801a8d0:	4549      	cmp	r1, r9
 801a8d2:	4450      	add	r0, sl
 801a8d4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801a8d8:	ee37 7a04 	vadd.f32	s14, s14, s8
 801a8dc:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801a8e0:	db08      	blt.n	801a8f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801a8e2:	ee77 7a85 	vadd.f32	s15, s15, s10
 801a8e6:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801a8ea:	ee37 7a06 	vadd.f32	s14, s14, s12
 801a8ee:	3001      	adds	r0, #1
 801a8f0:	eba1 0109 	sub.w	r1, r1, r9
 801a8f4:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a8f8:	f04f 0801 	mov.w	r8, #1
 801a8fc:	e7e3      	b.n	801a8c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801a8fe:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801a900:	4431      	add	r1, r6
 801a902:	4541      	cmp	r1, r8
 801a904:	4450      	add	r0, sl
 801a906:	ee37 7a24 	vadd.f32	s14, s14, s9
 801a90a:	ee77 7a84 	vadd.f32	s15, s15, s8
 801a90e:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801a912:	db08      	blt.n	801a926 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801a914:	ee76 6a85 	vadd.f32	s13, s13, s10
 801a918:	ee37 7a25 	vadd.f32	s14, s14, s11
 801a91c:	ee77 7a86 	vadd.f32	s15, s15, s12
 801a920:	3001      	adds	r0, #1
 801a922:	eba1 0108 	sub.w	r1, r1, r8
 801a926:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a92a:	f04f 0901 	mov.w	r9, #1
 801a92e:	e79b      	b.n	801a868 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801a930:	449c      	add	ip, r3
 801a932:	1aff      	subs	r7, r7, r3
 801a934:	f1b8 0f00 	cmp.w	r8, #0
 801a938:	d009      	beq.n	801a94e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801a93a:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801a93e:	9019      	str	r0, [sp, #100]	; 0x64
 801a940:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801a944:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801a948:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801a94c:	911d      	str	r1, [sp, #116]	; 0x74
 801a94e:	1ad2      	subs	r2, r2, r3
 801a950:	e68b      	b.n	801a66a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801a952:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a954:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801a956:	2b00      	cmp	r3, #0
 801a958:	f000 80d1 	beq.w	801aafe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801a95c:	ad19      	add	r5, sp, #100	; 0x64
 801a95e:	ac39      	add	r4, sp, #228	; 0xe4
 801a960:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801a962:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801a966:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a96a:	930c      	str	r3, [sp, #48]	; 0x30
 801a96c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a96e:	6963      	ldr	r3, [r4, #20]
 801a970:	440b      	add	r3, r1
 801a972:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801a976:	4408      	add	r0, r1
 801a978:	b200      	sxth	r0, r0
 801a97a:	4283      	cmp	r3, r0
 801a97c:	900d      	str	r0, [sp, #52]	; 0x34
 801a97e:	f280 80c1 	bge.w	801ab04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801a982:	428b      	cmp	r3, r1
 801a984:	da08      	bge.n	801a998 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801a986:	2a00      	cmp	r2, #0
 801a988:	dd06      	ble.n	801a998 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801a98a:	1acb      	subs	r3, r1, r3
 801a98c:	429a      	cmp	r2, r3
 801a98e:	f2c0 80bb 	blt.w	801ab08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801a992:	2b00      	cmp	r3, #0
 801a994:	f300 80b9 	bgt.w	801ab0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801a998:	6967      	ldr	r7, [r4, #20]
 801a99a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a99c:	443b      	add	r3, r7
 801a99e:	461f      	mov	r7, r3
 801a9a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a9a2:	1bdf      	subs	r7, r3, r7
 801a9a4:	4297      	cmp	r7, r2
 801a9a6:	bfa8      	it	ge
 801a9a8:	4617      	movge	r7, r2
 801a9aa:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801a9ae:	2f00      	cmp	r7, #0
 801a9b0:	f340 813c 	ble.w	801ac2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801a9b4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801a9b6:	6829      	ldr	r1, [r5, #0]
 801a9b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a9bc:	f9bb 3000 	ldrsh.w	r3, [fp]
 801a9c0:	6820      	ldr	r0, [r4, #0]
 801a9c2:	4411      	add	r1, r2
 801a9c4:	4299      	cmp	r1, r3
 801a9c6:	dd1a      	ble.n	801a9fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801a9c8:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801a9cc:	440b      	add	r3, r1
 801a9ce:	4402      	add	r2, r0
 801a9d0:	b21b      	sxth	r3, r3
 801a9d2:	429a      	cmp	r2, r3
 801a9d4:	dc13      	bgt.n	801a9fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801a9d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a9d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a9da:	681b      	ldr	r3, [r3, #0]
 801a9dc:	9206      	str	r2, [sp, #24]
 801a9de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a9e0:	9205      	str	r2, [sp, #20]
 801a9e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a9e4:	9500      	str	r5, [sp, #0]
 801a9e6:	e9cd b203 	strd	fp, r2, [sp, #12]
 801a9ea:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801a9ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a9ee:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801a9f2:	a912      	add	r1, sp, #72	; 0x48
 801a9f4:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801a9f8:	aa49      	add	r2, sp, #292	; 0x124
 801a9fa:	4623      	mov	r3, r4
 801a9fc:	47c8      	blx	r9
 801a9fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 801aa02:	441a      	add	r2, r3
 801aa04:	6963      	ldr	r3, [r4, #20]
 801aa06:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801aa0a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801aa0e:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801aa12:	68a1      	ldr	r1, [r4, #8]
 801aa14:	ed94 6a08 	vldr	s12, [r4, #32]
 801aa18:	6022      	str	r2, [r4, #0]
 801aa1a:	3301      	adds	r3, #1
 801aa1c:	6163      	str	r3, [r4, #20]
 801aa1e:	69a3      	ldr	r3, [r4, #24]
 801aa20:	ee37 7a27 	vadd.f32	s14, s14, s15
 801aa24:	3b01      	subs	r3, #1
 801aa26:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801aa2a:	61a3      	str	r3, [r4, #24]
 801aa2c:	6923      	ldr	r3, [r4, #16]
 801aa2e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801aa32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801aa36:	edd4 6a07 	vldr	s13, [r4, #28]
 801aa3a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801aa3e:	440b      	add	r3, r1
 801aa40:	68e1      	ldr	r1, [r4, #12]
 801aa42:	6123      	str	r3, [r4, #16]
 801aa44:	ee76 6a86 	vadd.f32	s13, s13, s12
 801aa48:	428b      	cmp	r3, r1
 801aa4a:	edc4 6a07 	vstr	s13, [r4, #28]
 801aa4e:	db15      	blt.n	801aa7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801aa50:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801aa54:	ee76 6a26 	vadd.f32	s13, s12, s13
 801aa58:	3201      	adds	r2, #1
 801aa5a:	edc4 6a07 	vstr	s13, [r4, #28]
 801aa5e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801aa62:	6022      	str	r2, [r4, #0]
 801aa64:	ee36 7a87 	vadd.f32	s14, s13, s14
 801aa68:	1a5b      	subs	r3, r3, r1
 801aa6a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801aa6e:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801aa72:	6123      	str	r3, [r4, #16]
 801aa74:	ee77 7a27 	vadd.f32	s15, s14, s15
 801aa78:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801aa7c:	e9d5 2300 	ldrd	r2, r3, [r5]
 801aa80:	441a      	add	r2, r3
 801aa82:	696b      	ldr	r3, [r5, #20]
 801aa84:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801aa88:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801aa8c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801aa90:	68a9      	ldr	r1, [r5, #8]
 801aa92:	ed95 6a08 	vldr	s12, [r5, #32]
 801aa96:	602a      	str	r2, [r5, #0]
 801aa98:	3301      	adds	r3, #1
 801aa9a:	616b      	str	r3, [r5, #20]
 801aa9c:	69ab      	ldr	r3, [r5, #24]
 801aa9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 801aaa2:	3b01      	subs	r3, #1
 801aaa4:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801aaa8:	61ab      	str	r3, [r5, #24]
 801aaaa:	692b      	ldr	r3, [r5, #16]
 801aaac:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801aab0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801aab4:	edd5 6a07 	vldr	s13, [r5, #28]
 801aab8:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801aabc:	440b      	add	r3, r1
 801aabe:	68e9      	ldr	r1, [r5, #12]
 801aac0:	612b      	str	r3, [r5, #16]
 801aac2:	ee76 6a86 	vadd.f32	s13, s13, s12
 801aac6:	428b      	cmp	r3, r1
 801aac8:	edc5 6a07 	vstr	s13, [r5, #28]
 801aacc:	db15      	blt.n	801aafa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801aace:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801aad2:	ee76 6a26 	vadd.f32	s13, s12, s13
 801aad6:	3201      	adds	r2, #1
 801aad8:	edc5 6a07 	vstr	s13, [r5, #28]
 801aadc:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801aae0:	602a      	str	r2, [r5, #0]
 801aae2:	ee36 7a87 	vadd.f32	s14, s13, s14
 801aae6:	1a5b      	subs	r3, r3, r1
 801aae8:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801aaec:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801aaf0:	612b      	str	r3, [r5, #16]
 801aaf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 801aaf6:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801aafa:	3f01      	subs	r7, #1
 801aafc:	e757      	b.n	801a9ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801aafe:	ad39      	add	r5, sp, #228	; 0xe4
 801ab00:	ac19      	add	r4, sp, #100	; 0x64
 801ab02:	e72d      	b.n	801a960 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801ab04:	4613      	mov	r3, r2
 801ab06:	e744      	b.n	801a992 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801ab08:	4613      	mov	r3, r2
 801ab0a:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801ab0e:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 801ab10:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801ab14:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801ab18:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801ab1c:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801ab20:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 801ab24:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 801ab28:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801ab2c:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801ab2e:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801ab32:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801ab36:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801ab3a:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801ab3e:	960e      	str	r6, [sp, #56]	; 0x38
 801ab40:	469e      	mov	lr, r3
 801ab42:	461f      	mov	r7, r3
 801ab44:	f04f 0900 	mov.w	r9, #0
 801ab48:	2f00      	cmp	r7, #0
 801ab4a:	d146      	bne.n	801abda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801ab4c:	449c      	add	ip, r3
 801ab4e:	1ad7      	subs	r7, r2, r3
 801ab50:	f1b9 0f00 	cmp.w	r9, #0
 801ab54:	d009      	beq.n	801ab6a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801ab56:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801ab5a:	9039      	str	r0, [sp, #228]	; 0xe4
 801ab5c:	913d      	str	r1, [sp, #244]	; 0xf4
 801ab5e:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801ab62:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801ab66:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801ab6a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801ab6c:	910e      	str	r1, [sp, #56]	; 0x38
 801ab6e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801ab72:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801ab76:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801ab7a:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801ab7e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801ab82:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801ab86:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801ab8a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801ab8e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801ab92:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801ab96:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801ab9a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801ab9e:	f04f 0800 	mov.w	r8, #0
 801aba2:	f1be 0f00 	cmp.w	lr, #0
 801aba6:	d030      	beq.n	801ac0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801aba8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801abaa:	4431      	add	r1, r6
 801abac:	4549      	cmp	r1, r9
 801abae:	4450      	add	r0, sl
 801abb0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801abb4:	ee37 7a04 	vadd.f32	s14, s14, s8
 801abb8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801abbc:	db08      	blt.n	801abd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801abbe:	ee77 7a85 	vadd.f32	s15, s15, s10
 801abc2:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801abc6:	ee37 7a06 	vadd.f32	s14, s14, s12
 801abca:	3001      	adds	r0, #1
 801abcc:	eba1 0109 	sub.w	r1, r1, r9
 801abd0:	f10e 3eff 	add.w	lr, lr, #4294967295
 801abd4:	f04f 0801 	mov.w	r8, #1
 801abd8:	e7e3      	b.n	801aba2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801abda:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801abdc:	4431      	add	r1, r6
 801abde:	4541      	cmp	r1, r8
 801abe0:	4450      	add	r0, sl
 801abe2:	ee37 7a24 	vadd.f32	s14, s14, s9
 801abe6:	ee77 7a84 	vadd.f32	s15, s15, s8
 801abea:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801abee:	db08      	blt.n	801ac02 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801abf0:	ee76 6a85 	vadd.f32	s13, s13, s10
 801abf4:	ee37 7a25 	vadd.f32	s14, s14, s11
 801abf8:	ee77 7a86 	vadd.f32	s15, s15, s12
 801abfc:	3001      	adds	r0, #1
 801abfe:	eba1 0108 	sub.w	r1, r1, r8
 801ac02:	3f01      	subs	r7, #1
 801ac04:	f04f 0901 	mov.w	r9, #1
 801ac08:	e79e      	b.n	801ab48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801ac0a:	449c      	add	ip, r3
 801ac0c:	1aff      	subs	r7, r7, r3
 801ac0e:	f1b8 0f00 	cmp.w	r8, #0
 801ac12:	d009      	beq.n	801ac28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801ac14:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801ac18:	9019      	str	r0, [sp, #100]	; 0x64
 801ac1a:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801ac1e:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801ac22:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801ac26:	911d      	str	r1, [sp, #116]	; 0x74
 801ac28:	1ad2      	subs	r2, r2, r3
 801ac2a:	e6b5      	b.n	801a998 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801ac2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ac2e:	681b      	ldr	r3, [r3, #0]
 801ac30:	b923      	cbnz	r3, 801ac3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801ac32:	4b04      	ldr	r3, [pc, #16]	; (801ac44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801ac34:	6818      	ldr	r0, [r3, #0]
 801ac36:	6803      	ldr	r3, [r0, #0]
 801ac38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ac3a:	4798      	blx	r3
 801ac3c:	b05b      	add	sp, #364	; 0x16c
 801ac3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac42:	bf00      	nop
 801ac44:	2000af48 	.word	0x2000af48

0801ac48 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801ac48:	2b03      	cmp	r3, #3
 801ac4a:	d818      	bhi.n	801ac7e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801ac4c:	e8df f003 	tbb	[pc, r3]
 801ac50:	130d0602 	.word	0x130d0602
 801ac54:	f9b0 2000 	ldrsh.w	r2, [r0]
 801ac58:	1850      	adds	r0, r2, r1
 801ac5a:	4770      	bx	lr
 801ac5c:	8803      	ldrh	r3, [r0, #0]
 801ac5e:	8880      	ldrh	r0, [r0, #4]
 801ac60:	4418      	add	r0, r3
 801ac62:	b200      	sxth	r0, r0
 801ac64:	1a80      	subs	r0, r0, r2
 801ac66:	3801      	subs	r0, #1
 801ac68:	4770      	bx	lr
 801ac6a:	8803      	ldrh	r3, [r0, #0]
 801ac6c:	8880      	ldrh	r0, [r0, #4]
 801ac6e:	4418      	add	r0, r3
 801ac70:	b200      	sxth	r0, r0
 801ac72:	1a40      	subs	r0, r0, r1
 801ac74:	e7f7      	b.n	801ac66 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801ac76:	f9b0 0000 	ldrsh.w	r0, [r0]
 801ac7a:	4410      	add	r0, r2
 801ac7c:	4770      	bx	lr
 801ac7e:	2000      	movs	r0, #0
 801ac80:	4770      	bx	lr

0801ac82 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801ac82:	2b03      	cmp	r3, #3
 801ac84:	d817      	bhi.n	801acb6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801ac86:	e8df f003 	tbb	[pc, r3]
 801ac8a:	0602      	.short	0x0602
 801ac8c:	1009      	.short	0x1009
 801ac8e:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801ac92:	1850      	adds	r0, r2, r1
 801ac94:	4770      	bx	lr
 801ac96:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801ac9a:	e7fa      	b.n	801ac92 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801ac9c:	8843      	ldrh	r3, [r0, #2]
 801ac9e:	88c0      	ldrh	r0, [r0, #6]
 801aca0:	4418      	add	r0, r3
 801aca2:	b200      	sxth	r0, r0
 801aca4:	1a80      	subs	r0, r0, r2
 801aca6:	3801      	subs	r0, #1
 801aca8:	4770      	bx	lr
 801acaa:	8843      	ldrh	r3, [r0, #2]
 801acac:	88c0      	ldrh	r0, [r0, #6]
 801acae:	4418      	add	r0, r3
 801acb0:	b200      	sxth	r0, r0
 801acb2:	1a40      	subs	r0, r0, r1
 801acb4:	e7f7      	b.n	801aca6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801acb6:	2000      	movs	r0, #0
 801acb8:	4770      	bx	lr
	...

0801acbc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801acbc:	4b01      	ldr	r3, [pc, #4]	; (801acc4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801acbe:	2200      	movs	r2, #0
 801acc0:	601a      	str	r2, [r3, #0]
 801acc2:	4770      	bx	lr
 801acc4:	2000af58 	.word	0x2000af58

0801acc8 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801acc8:	4603      	mov	r3, r0
 801acca:	b1c8      	cbz	r0, 801ad00 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801accc:	0c02      	lsrs	r2, r0, #16
 801acce:	0412      	lsls	r2, r2, #16
 801acd0:	b9a2      	cbnz	r2, 801acfc <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801acd2:	0403      	lsls	r3, r0, #16
 801acd4:	2010      	movs	r0, #16
 801acd6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801acda:	bf04      	itt	eq
 801acdc:	021b      	lsleq	r3, r3, #8
 801acde:	3008      	addeq	r0, #8
 801ace0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801ace4:	bf04      	itt	eq
 801ace6:	011b      	lsleq	r3, r3, #4
 801ace8:	3004      	addeq	r0, #4
 801acea:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801acee:	bf04      	itt	eq
 801acf0:	009b      	lsleq	r3, r3, #2
 801acf2:	3002      	addeq	r0, #2
 801acf4:	2b00      	cmp	r3, #0
 801acf6:	db04      	blt.n	801ad02 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801acf8:	3001      	adds	r0, #1
 801acfa:	4770      	bx	lr
 801acfc:	2000      	movs	r0, #0
 801acfe:	e7ea      	b.n	801acd6 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801ad00:	2020      	movs	r0, #32
 801ad02:	4770      	bx	lr

0801ad04 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801ad04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad08:	b087      	sub	sp, #28
 801ad0a:	460d      	mov	r5, r1
 801ad0c:	4616      	mov	r6, r2
 801ad0e:	4698      	mov	r8, r3
 801ad10:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801ad14:	4601      	mov	r1, r0
 801ad16:	b120      	cbz	r0, 801ad22 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801ad18:	b11a      	cbz	r2, 801ad22 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801ad1a:	2d1f      	cmp	r5, #31
 801ad1c:	d801      	bhi.n	801ad22 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801ad1e:	2b1f      	cmp	r3, #31
 801ad20:	d904      	bls.n	801ad2c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 801ad22:	2000      	movs	r0, #0
 801ad24:	6038      	str	r0, [r7, #0]
 801ad26:	b007      	add	sp, #28
 801ad28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad2c:	b97d      	cbnz	r5, 801ad4e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 801ad2e:	b143      	cbz	r3, 801ad42 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 801ad30:	4602      	mov	r2, r0
 801ad32:	e9cd 4700 	strd	r4, r7, [sp]
 801ad36:	462b      	mov	r3, r5
 801ad38:	4641      	mov	r1, r8
 801ad3a:	4630      	mov	r0, r6
 801ad3c:	f7ff ffe2 	bl	801ad04 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801ad40:	e7f1      	b.n	801ad26 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801ad42:	f04f 33ff 	mov.w	r3, #4294967295
 801ad46:	603b      	str	r3, [r7, #0]
 801ad48:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801ad4c:	e7eb      	b.n	801ad26 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801ad4e:	fa32 fa05 	lsrs.w	sl, r2, r5
 801ad52:	d106      	bne.n	801ad62 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 801ad54:	4346      	muls	r6, r0
 801ad56:	fbb6 f0f4 	udiv	r0, r6, r4
 801ad5a:	fb04 6610 	mls	r6, r4, r0, r6
 801ad5e:	603e      	str	r6, [r7, #0]
 801ad60:	e7e1      	b.n	801ad26 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801ad62:	2201      	movs	r2, #1
 801ad64:	40aa      	lsls	r2, r5
 801ad66:	3a01      	subs	r2, #1
 801ad68:	4016      	ands	r6, r2
 801ad6a:	fa00 fb05 	lsl.w	fp, r0, r5
 801ad6e:	4630      	mov	r0, r6
 801ad70:	fbbb f9f4 	udiv	r9, fp, r4
 801ad74:	fb0a f309 	mul.w	r3, sl, r9
 801ad78:	9303      	str	r3, [sp, #12]
 801ad7a:	f7ff ffa5 	bl	801acc8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801ad7e:	462b      	mov	r3, r5
 801ad80:	460a      	mov	r2, r1
 801ad82:	e9cd 4700 	strd	r4, r7, [sp]
 801ad86:	4601      	mov	r1, r0
 801ad88:	4630      	mov	r0, r6
 801ad8a:	f7ff ffbb 	bl	801ad04 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801ad8e:	fb04 b919 	mls	r9, r4, r9, fp
 801ad92:	4606      	mov	r6, r0
 801ad94:	4648      	mov	r0, r9
 801ad96:	eb05 0108 	add.w	r1, r5, r8
 801ad9a:	f7ff ff95 	bl	801acc8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801ad9e:	ab05      	add	r3, sp, #20
 801ada0:	e9cd 4300 	strd	r4, r3, [sp]
 801ada4:	464a      	mov	r2, r9
 801ada6:	4603      	mov	r3, r0
 801ada8:	4650      	mov	r0, sl
 801adaa:	f7ff ffab 	bl	801ad04 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801adae:	6839      	ldr	r1, [r7, #0]
 801adb0:	9a05      	ldr	r2, [sp, #20]
 801adb2:	9b03      	ldr	r3, [sp, #12]
 801adb4:	4411      	add	r1, r2
 801adb6:	fbb1 f2f4 	udiv	r2, r1, r4
 801adba:	18d3      	adds	r3, r2, r3
 801adbc:	441e      	add	r6, r3
 801adbe:	fb04 1412 	mls	r4, r4, r2, r1
 801adc2:	4430      	add	r0, r6
 801adc4:	603c      	str	r4, [r7, #0]
 801adc6:	e7ae      	b.n	801ad26 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

0801adc8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801adc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801adcc:	b085      	sub	sp, #20
 801adce:	f1b0 0900 	subs.w	r9, r0, #0
 801add2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801add4:	461d      	mov	r5, r3
 801add6:	bfbf      	itttt	lt
 801add8:	6823      	ldrlt	r3, [r4, #0]
 801adda:	425b      	neglt	r3, r3
 801addc:	f1c9 0900 	rsblt	r9, r9, #0
 801ade0:	6023      	strlt	r3, [r4, #0]
 801ade2:	bfb4      	ite	lt
 801ade4:	f04f 36ff 	movlt.w	r6, #4294967295
 801ade8:	2601      	movge	r6, #1
 801adea:	2a00      	cmp	r2, #0
 801adec:	4617      	mov	r7, r2
 801adee:	da04      	bge.n	801adfa <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801adf0:	6823      	ldr	r3, [r4, #0]
 801adf2:	425b      	negs	r3, r3
 801adf4:	4257      	negs	r7, r2
 801adf6:	4276      	negs	r6, r6
 801adf8:	6023      	str	r3, [r4, #0]
 801adfa:	2d00      	cmp	r5, #0
 801adfc:	4638      	mov	r0, r7
 801adfe:	bfba      	itte	lt
 801ae00:	426d      	neglt	r5, r5
 801ae02:	f04f 38ff 	movlt.w	r8, #4294967295
 801ae06:	f04f 0801 	movge.w	r8, #1
 801ae0a:	f7ff ff5d 	bl	801acc8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801ae0e:	ab03      	add	r3, sp, #12
 801ae10:	e9cd 5300 	strd	r5, r3, [sp]
 801ae14:	463a      	mov	r2, r7
 801ae16:	4603      	mov	r3, r0
 801ae18:	4648      	mov	r0, r9
 801ae1a:	f7ff ff73 	bl	801ad04 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801ae1e:	6823      	ldr	r3, [r4, #0]
 801ae20:	9a03      	ldr	r2, [sp, #12]
 801ae22:	4546      	cmp	r6, r8
 801ae24:	441a      	add	r2, r3
 801ae26:	fb92 f3f5 	sdiv	r3, r2, r5
 801ae2a:	4418      	add	r0, r3
 801ae2c:	bf18      	it	ne
 801ae2e:	4240      	negne	r0, r0
 801ae30:	fb05 2313 	mls	r3, r5, r3, r2
 801ae34:	1c72      	adds	r2, r6, #1
 801ae36:	6023      	str	r3, [r4, #0]
 801ae38:	d105      	bne.n	801ae46 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801ae3a:	2b00      	cmp	r3, #0
 801ae3c:	f1c3 0200 	rsb	r2, r3, #0
 801ae40:	db0b      	blt.n	801ae5a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801ae42:	6022      	str	r2, [r4, #0]
 801ae44:	e006      	b.n	801ae54 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801ae46:	2e01      	cmp	r6, #1
 801ae48:	d104      	bne.n	801ae54 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801ae4a:	2b00      	cmp	r3, #0
 801ae4c:	da02      	bge.n	801ae54 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801ae4e:	442b      	add	r3, r5
 801ae50:	3801      	subs	r0, #1
 801ae52:	6023      	str	r3, [r4, #0]
 801ae54:	b005      	add	sp, #20
 801ae56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ae5a:	3801      	subs	r0, #1
 801ae5c:	1b52      	subs	r2, r2, r5
 801ae5e:	e7f0      	b.n	801ae42 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0801ae60 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801ae60:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801ae64:	4c1c      	ldr	r4, [pc, #112]	; (801aed8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801ae66:	6807      	ldr	r7, [r0, #0]
 801ae68:	69a3      	ldr	r3, [r4, #24]
 801ae6a:	4605      	mov	r5, r0
 801ae6c:	b92b      	cbnz	r3, 801ae7a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801ae6e:	6840      	ldr	r0, [r0, #4]
 801ae70:	e9c5 7000 	strd	r7, r0, [r5]
 801ae74:	b004      	add	sp, #16
 801ae76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae7a:	68a2      	ldr	r2, [r4, #8]
 801ae7c:	6820      	ldr	r0, [r4, #0]
 801ae7e:	ae04      	add	r6, sp, #16
 801ae80:	f04f 0802 	mov.w	r8, #2
 801ae84:	fb93 f1f8 	sdiv	r1, r3, r8
 801ae88:	440a      	add	r2, r1
 801ae8a:	f846 2d04 	str.w	r2, [r6, #-4]!
 801ae8e:	69e1      	ldr	r1, [r4, #28]
 801ae90:	9600      	str	r6, [sp, #0]
 801ae92:	463a      	mov	r2, r7
 801ae94:	f7ff ff98 	bl	801adc8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801ae98:	69a3      	ldr	r3, [r4, #24]
 801ae9a:	686a      	ldr	r2, [r5, #4]
 801ae9c:	6a21      	ldr	r1, [r4, #32]
 801ae9e:	9600      	str	r6, [sp, #0]
 801aea0:	4607      	mov	r7, r0
 801aea2:	6860      	ldr	r0, [r4, #4]
 801aea4:	f7ff ff90 	bl	801adc8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801aea8:	6962      	ldr	r2, [r4, #20]
 801aeaa:	69a3      	ldr	r3, [r4, #24]
 801aeac:	fb93 f8f8 	sdiv	r8, r3, r8
 801aeb0:	4442      	add	r2, r8
 801aeb2:	9203      	str	r2, [sp, #12]
 801aeb4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801aeb6:	682a      	ldr	r2, [r5, #0]
 801aeb8:	9600      	str	r6, [sp, #0]
 801aeba:	4407      	add	r7, r0
 801aebc:	68e0      	ldr	r0, [r4, #12]
 801aebe:	f7ff ff83 	bl	801adc8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801aec2:	9600      	str	r6, [sp, #0]
 801aec4:	4680      	mov	r8, r0
 801aec6:	69a3      	ldr	r3, [r4, #24]
 801aec8:	686a      	ldr	r2, [r5, #4]
 801aeca:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801aecc:	6920      	ldr	r0, [r4, #16]
 801aece:	f7ff ff7b 	bl	801adc8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801aed2:	4440      	add	r0, r8
 801aed4:	e7cc      	b.n	801ae70 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801aed6:	bf00      	nop
 801aed8:	2000af5c 	.word	0x2000af5c

0801aedc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801aedc:	4b07      	ldr	r3, [pc, #28]	; (801aefc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801aede:	781b      	ldrb	r3, [r3, #0]
 801aee0:	2b01      	cmp	r3, #1
 801aee2:	d109      	bne.n	801aef8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801aee4:	f9b1 3000 	ldrsh.w	r3, [r1]
 801aee8:	f9b0 2000 	ldrsh.w	r2, [r0]
 801aeec:	8003      	strh	r3, [r0, #0]
 801aeee:	4b04      	ldr	r3, [pc, #16]	; (801af00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801aef0:	881b      	ldrh	r3, [r3, #0]
 801aef2:	3b01      	subs	r3, #1
 801aef4:	1a9b      	subs	r3, r3, r2
 801aef6:	800b      	strh	r3, [r1, #0]
 801aef8:	4770      	bx	lr
 801aefa:	bf00      	nop
 801aefc:	2000af40 	.word	0x2000af40
 801af00:	2000af3c 	.word	0x2000af3c

0801af04 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801af04:	b510      	push	{r4, lr}
 801af06:	4b07      	ldr	r3, [pc, #28]	; (801af24 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801af08:	781b      	ldrb	r3, [r3, #0]
 801af0a:	2b01      	cmp	r3, #1
 801af0c:	d108      	bne.n	801af20 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801af0e:	4b06      	ldr	r3, [pc, #24]	; (801af28 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801af10:	880c      	ldrh	r4, [r1, #0]
 801af12:	881b      	ldrh	r3, [r3, #0]
 801af14:	f9b0 2000 	ldrsh.w	r2, [r0]
 801af18:	3b01      	subs	r3, #1
 801af1a:	1b1b      	subs	r3, r3, r4
 801af1c:	8003      	strh	r3, [r0, #0]
 801af1e:	800a      	strh	r2, [r1, #0]
 801af20:	bd10      	pop	{r4, pc}
 801af22:	bf00      	nop
 801af24:	2000af40 	.word	0x2000af40
 801af28:	2000af3c 	.word	0x2000af3c

0801af2c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801af2c:	b510      	push	{r4, lr}
 801af2e:	4b0a      	ldr	r3, [pc, #40]	; (801af58 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801af30:	781b      	ldrb	r3, [r3, #0]
 801af32:	2b01      	cmp	r3, #1
 801af34:	d10e      	bne.n	801af54 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801af36:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801af3a:	8843      	ldrh	r3, [r0, #2]
 801af3c:	f9b0 4000 	ldrsh.w	r4, [r0]
 801af40:	8044      	strh	r4, [r0, #2]
 801af42:	18ca      	adds	r2, r1, r3
 801af44:	4b05      	ldr	r3, [pc, #20]	; (801af5c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801af46:	881b      	ldrh	r3, [r3, #0]
 801af48:	1a9b      	subs	r3, r3, r2
 801af4a:	8003      	strh	r3, [r0, #0]
 801af4c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801af50:	80c3      	strh	r3, [r0, #6]
 801af52:	8081      	strh	r1, [r0, #4]
 801af54:	bd10      	pop	{r4, pc}
 801af56:	bf00      	nop
 801af58:	2000af40 	.word	0x2000af40
 801af5c:	2000af3c 	.word	0x2000af3c

0801af60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801af60:	4b08      	ldr	r3, [pc, #32]	; (801af84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801af62:	781b      	ldrb	r3, [r3, #0]
 801af64:	2b01      	cmp	r3, #1
 801af66:	d10c      	bne.n	801af82 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801af68:	8803      	ldrh	r3, [r0, #0]
 801af6a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801af6e:	8842      	ldrh	r2, [r0, #2]
 801af70:	8002      	strh	r2, [r0, #0]
 801af72:	185a      	adds	r2, r3, r1
 801af74:	4b04      	ldr	r3, [pc, #16]	; (801af88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801af76:	881b      	ldrh	r3, [r3, #0]
 801af78:	1a9b      	subs	r3, r3, r2
 801af7a:	8043      	strh	r3, [r0, #2]
 801af7c:	88c3      	ldrh	r3, [r0, #6]
 801af7e:	8083      	strh	r3, [r0, #4]
 801af80:	80c1      	strh	r1, [r0, #6]
 801af82:	4770      	bx	lr
 801af84:	2000af40 	.word	0x2000af40
 801af88:	2000af3c 	.word	0x2000af3c

0801af8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801af8c:	b510      	push	{r4, lr}
 801af8e:	4b07      	ldr	r3, [pc, #28]	; (801afac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801af90:	781b      	ldrb	r3, [r3, #0]
 801af92:	2b01      	cmp	r3, #1
 801af94:	d108      	bne.n	801afa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801af96:	f9b1 3000 	ldrsh.w	r3, [r1]
 801af9a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801af9e:	8003      	strh	r3, [r0, #0]
 801afa0:	8893      	ldrh	r3, [r2, #4]
 801afa2:	3b01      	subs	r3, #1
 801afa4:	1b1b      	subs	r3, r3, r4
 801afa6:	800b      	strh	r3, [r1, #0]
 801afa8:	bd10      	pop	{r4, pc}
 801afaa:	bf00      	nop
 801afac:	2000af40 	.word	0x2000af40

0801afb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 801afb0:	4b0b      	ldr	r3, [pc, #44]	; (801afe0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 801afb2:	781b      	ldrb	r3, [r3, #0]
 801afb4:	2b01      	cmp	r3, #1
 801afb6:	d111      	bne.n	801afdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 801afb8:	680b      	ldr	r3, [r1, #0]
 801afba:	ed90 7a00 	vldr	s14, [r0]
 801afbe:	6003      	str	r3, [r0, #0]
 801afc0:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801afc4:	eddf 6a07 	vldr	s13, [pc, #28]	; 801afe4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 801afc8:	ee07 3a90 	vmov	s15, r3
 801afcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801afd0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801afd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801afd8:	edc1 7a00 	vstr	s15, [r1]
 801afdc:	4770      	bx	lr
 801afde:	bf00      	nop
 801afe0:	2000af40 	.word	0x2000af40
 801afe4:	38d1b717 	.word	0x38d1b717

0801afe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801afe8:	b510      	push	{r4, lr}
 801afea:	4b0a      	ldr	r3, [pc, #40]	; (801b014 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801afec:	781b      	ldrb	r3, [r3, #0]
 801afee:	2b01      	cmp	r3, #1
 801aff0:	460a      	mov	r2, r1
 801aff2:	d10d      	bne.n	801b010 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801aff4:	8881      	ldrh	r1, [r0, #4]
 801aff6:	8803      	ldrh	r3, [r0, #0]
 801aff8:	440b      	add	r3, r1
 801affa:	4601      	mov	r1, r0
 801affc:	3b01      	subs	r3, #1
 801affe:	f821 3b02 	strh.w	r3, [r1], #2
 801b002:	f7ff ffc3 	bl	801af8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801b006:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b00a:	88c2      	ldrh	r2, [r0, #6]
 801b00c:	8082      	strh	r2, [r0, #4]
 801b00e:	80c3      	strh	r3, [r0, #6]
 801b010:	bd10      	pop	{r4, pc}
 801b012:	bf00      	nop
 801b014:	2000af40 	.word	0x2000af40

0801b018 <_ZN8touchgfx11Application13requestRedrawEv>:
 801b018:	4b06      	ldr	r3, [pc, #24]	; (801b034 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801b01a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b01e:	4b06      	ldr	r3, [pc, #24]	; (801b038 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801b020:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 801b024:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b028:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 801b02c:	2100      	movs	r1, #0
 801b02e:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 801b032:	4770      	bx	lr
 801b034:	2000af3c 	.word	0x2000af3c
 801b038:	2000af3e 	.word	0x2000af3e

0801b03c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801b03c:	4b03      	ldr	r3, [pc, #12]	; (801b04c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801b03e:	6818      	ldr	r0, [r3, #0]
 801b040:	b110      	cbz	r0, 801b048 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801b042:	6803      	ldr	r3, [r0, #0]
 801b044:	699b      	ldr	r3, [r3, #24]
 801b046:	4718      	bx	r3
 801b048:	4770      	bx	lr
 801b04a:	bf00      	nop
 801b04c:	2000af8c 	.word	0x2000af8c

0801b050 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801b050:	4770      	bx	lr
	...

0801b054 <_ZN8touchgfx11Application4drawEv>:
 801b054:	b507      	push	{r0, r1, r2, lr}
 801b056:	4b09      	ldr	r3, [pc, #36]	; (801b07c <_ZN8touchgfx11Application4drawEv+0x28>)
 801b058:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b05c:	4b08      	ldr	r3, [pc, #32]	; (801b080 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801b05e:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b062:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b066:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b06a:	6803      	ldr	r3, [r0, #0]
 801b06c:	2100      	movs	r1, #0
 801b06e:	9100      	str	r1, [sp, #0]
 801b070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b072:	4669      	mov	r1, sp
 801b074:	4798      	blx	r3
 801b076:	b003      	add	sp, #12
 801b078:	f85d fb04 	ldr.w	pc, [sp], #4
 801b07c:	2000af3c 	.word	0x2000af3c
 801b080:	2000af3e 	.word	0x2000af3e

0801b084 <_ZN8touchgfx11Application10invalidateEv>:
 801b084:	4b09      	ldr	r3, [pc, #36]	; (801b0ac <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801b086:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b08a:	4b09      	ldr	r3, [pc, #36]	; (801b0b0 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801b08c:	b082      	sub	sp, #8
 801b08e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b092:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b096:	2100      	movs	r1, #0
 801b098:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b09c:	9100      	str	r1, [sp, #0]
 801b09e:	6803      	ldr	r3, [r0, #0]
 801b0a0:	aa02      	add	r2, sp, #8
 801b0a2:	e912 0006 	ldmdb	r2, {r1, r2}
 801b0a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b0a8:	b002      	add	sp, #8
 801b0aa:	4718      	bx	r3
 801b0ac:	2000af3c 	.word	0x2000af3c
 801b0b0:	2000af3e 	.word	0x2000af3e

0801b0b4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801b0b4:	4b03      	ldr	r3, [pc, #12]	; (801b0c4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801b0b6:	6818      	ldr	r0, [r3, #0]
 801b0b8:	b110      	cbz	r0, 801b0c0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801b0ba:	6803      	ldr	r3, [r0, #0]
 801b0bc:	69db      	ldr	r3, [r3, #28]
 801b0be:	4718      	bx	r3
 801b0c0:	4770      	bx	lr
 801b0c2:	bf00      	nop
 801b0c4:	2000af8c 	.word	0x2000af8c

0801b0c8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801b0c8:	4b03      	ldr	r3, [pc, #12]	; (801b0d8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801b0ca:	6818      	ldr	r0, [r3, #0]
 801b0cc:	b110      	cbz	r0, 801b0d4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801b0ce:	6803      	ldr	r3, [r0, #0]
 801b0d0:	6a1b      	ldr	r3, [r3, #32]
 801b0d2:	4718      	bx	r3
 801b0d4:	4770      	bx	lr
 801b0d6:	bf00      	nop
 801b0d8:	2000af8c 	.word	0x2000af8c

0801b0dc <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801b0dc:	2300      	movs	r3, #0
 801b0de:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 801b0e2:	4770      	bx	lr

0801b0e4 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801b0e4:	4b03      	ldr	r3, [pc, #12]	; (801b0f4 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801b0e6:	6818      	ldr	r0, [r3, #0]
 801b0e8:	b110      	cbz	r0, 801b0f0 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801b0ea:	6803      	ldr	r3, [r0, #0]
 801b0ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b0ee:	4718      	bx	r3
 801b0f0:	4770      	bx	lr
 801b0f2:	bf00      	nop
 801b0f4:	2000af8c 	.word	0x2000af8c

0801b0f8 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801b0f8:	b510      	push	{r4, lr}
 801b0fa:	f9b1 4000 	ldrsh.w	r4, [r1]
 801b0fe:	888a      	ldrh	r2, [r1, #4]
 801b100:	f9b0 3000 	ldrsh.w	r3, [r0]
 801b104:	4422      	add	r2, r4
 801b106:	b212      	sxth	r2, r2
 801b108:	4293      	cmp	r3, r2
 801b10a:	da15      	bge.n	801b138 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801b10c:	8882      	ldrh	r2, [r0, #4]
 801b10e:	4413      	add	r3, r2
 801b110:	b21b      	sxth	r3, r3
 801b112:	429c      	cmp	r4, r3
 801b114:	da10      	bge.n	801b138 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801b116:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801b11a:	88c9      	ldrh	r1, [r1, #6]
 801b11c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801b120:	4419      	add	r1, r3
 801b122:	b209      	sxth	r1, r1
 801b124:	428a      	cmp	r2, r1
 801b126:	da07      	bge.n	801b138 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801b128:	88c0      	ldrh	r0, [r0, #6]
 801b12a:	4410      	add	r0, r2
 801b12c:	b200      	sxth	r0, r0
 801b12e:	4283      	cmp	r3, r0
 801b130:	bfac      	ite	ge
 801b132:	2000      	movge	r0, #0
 801b134:	2001      	movlt	r0, #1
 801b136:	bd10      	pop	{r4, pc}
 801b138:	2000      	movs	r0, #0
 801b13a:	e7fc      	b.n	801b136 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801b13c <_ZN8touchgfx4Rect10restrictToEss>:
 801b13c:	f9b0 3000 	ldrsh.w	r3, [r0]
 801b140:	2b00      	cmp	r3, #0
 801b142:	b510      	push	{r4, lr}
 801b144:	da04      	bge.n	801b150 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801b146:	8884      	ldrh	r4, [r0, #4]
 801b148:	4423      	add	r3, r4
 801b14a:	8083      	strh	r3, [r0, #4]
 801b14c:	2300      	movs	r3, #0
 801b14e:	8003      	strh	r3, [r0, #0]
 801b150:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b154:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b158:	1b09      	subs	r1, r1, r4
 801b15a:	428b      	cmp	r3, r1
 801b15c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801b160:	bfc8      	it	gt
 801b162:	8081      	strhgt	r1, [r0, #4]
 801b164:	2b00      	cmp	r3, #0
 801b166:	da04      	bge.n	801b172 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801b168:	88c1      	ldrh	r1, [r0, #6]
 801b16a:	440b      	add	r3, r1
 801b16c:	80c3      	strh	r3, [r0, #6]
 801b16e:	2300      	movs	r3, #0
 801b170:	8043      	strh	r3, [r0, #2]
 801b172:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801b176:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801b17a:	1a52      	subs	r2, r2, r1
 801b17c:	4293      	cmp	r3, r2
 801b17e:	bfc8      	it	gt
 801b180:	80c2      	strhgt	r2, [r0, #6]
 801b182:	bd10      	pop	{r4, pc}

0801b184 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801b184:	b510      	push	{r4, lr}
 801b186:	4b10      	ldr	r3, [pc, #64]	; (801b1c8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801b188:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b18c:	4b0f      	ldr	r3, [pc, #60]	; (801b1cc <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801b18e:	460c      	mov	r4, r1
 801b190:	4620      	mov	r0, r4
 801b192:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b196:	f7ff ffd1 	bl	801b13c <_ZN8touchgfx4Rect10restrictToEss>
 801b19a:	4b0d      	ldr	r3, [pc, #52]	; (801b1d0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801b19c:	6818      	ldr	r0, [r3, #0]
 801b19e:	b190      	cbz	r0, 801b1c6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801b1a0:	6803      	ldr	r3, [r0, #0]
 801b1a2:	4621      	mov	r1, r4
 801b1a4:	689b      	ldr	r3, [r3, #8]
 801b1a6:	4798      	blx	r3
 801b1a8:	4b0a      	ldr	r3, [pc, #40]	; (801b1d4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801b1aa:	6818      	ldr	r0, [r3, #0]
 801b1ac:	b118      	cbz	r0, 801b1b6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801b1ae:	6803      	ldr	r3, [r0, #0]
 801b1b0:	4621      	mov	r1, r4
 801b1b2:	689b      	ldr	r3, [r3, #8]
 801b1b4:	4798      	blx	r3
 801b1b6:	4b08      	ldr	r3, [pc, #32]	; (801b1d8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801b1b8:	6818      	ldr	r0, [r3, #0]
 801b1ba:	6803      	ldr	r3, [r0, #0]
 801b1bc:	4621      	mov	r1, r4
 801b1be:	69db      	ldr	r3, [r3, #28]
 801b1c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b1c4:	4718      	bx	r3
 801b1c6:	bd10      	pop	{r4, pc}
 801b1c8:	2000af3e 	.word	0x2000af3e
 801b1cc:	2000af3c 	.word	0x2000af3c
 801b1d0:	2000af8c 	.word	0x2000af8c
 801b1d4:	2000af88 	.word	0x2000af88
 801b1d8:	2000af48 	.word	0x2000af48

0801b1dc <_ZNK8touchgfx4Rect8includesERKS0_>:
 801b1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1de:	4606      	mov	r6, r0
 801b1e0:	4608      	mov	r0, r1
 801b1e2:	460f      	mov	r7, r1
 801b1e4:	f7fb fb1f 	bl	8016826 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b1e8:	b9e8      	cbnz	r0, 801b226 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801b1ea:	f9b7 5000 	ldrsh.w	r5, [r7]
 801b1ee:	f9b6 4000 	ldrsh.w	r4, [r6]
 801b1f2:	42a5      	cmp	r5, r4
 801b1f4:	db17      	blt.n	801b226 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801b1f6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801b1fa:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801b1fe:	429a      	cmp	r2, r3
 801b200:	db11      	blt.n	801b226 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801b202:	88b9      	ldrh	r1, [r7, #4]
 801b204:	440d      	add	r5, r1
 801b206:	88b1      	ldrh	r1, [r6, #4]
 801b208:	440c      	add	r4, r1
 801b20a:	b22d      	sxth	r5, r5
 801b20c:	b224      	sxth	r4, r4
 801b20e:	42a5      	cmp	r5, r4
 801b210:	dc09      	bgt.n	801b226 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801b212:	88f8      	ldrh	r0, [r7, #6]
 801b214:	4410      	add	r0, r2
 801b216:	88f2      	ldrh	r2, [r6, #6]
 801b218:	4413      	add	r3, r2
 801b21a:	b200      	sxth	r0, r0
 801b21c:	b21b      	sxth	r3, r3
 801b21e:	4298      	cmp	r0, r3
 801b220:	bfcc      	ite	gt
 801b222:	2000      	movgt	r0, #0
 801b224:	2001      	movle	r0, #1
 801b226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b228 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801b228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b22a:	4604      	mov	r4, r0
 801b22c:	4608      	mov	r0, r1
 801b22e:	460d      	mov	r5, r1
 801b230:	f7fb faf9 	bl	8016826 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b234:	b978      	cbnz	r0, 801b256 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801b236:	4620      	mov	r0, r4
 801b238:	f7fb faf5 	bl	8016826 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b23c:	f9b5 6000 	ldrsh.w	r6, [r5]
 801b240:	b150      	cbz	r0, 801b258 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801b242:	8026      	strh	r6, [r4, #0]
 801b244:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801b248:	8063      	strh	r3, [r4, #2]
 801b24a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801b24e:	80a3      	strh	r3, [r4, #4]
 801b250:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801b254:	80e3      	strh	r3, [r4, #6]
 801b256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b258:	f9b4 1000 	ldrsh.w	r1, [r4]
 801b25c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801b260:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801b264:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801b268:	88ed      	ldrh	r5, [r5, #6]
 801b26a:	42b1      	cmp	r1, r6
 801b26c:	460f      	mov	r7, r1
 801b26e:	bfa8      	it	ge
 801b270:	4637      	movge	r7, r6
 801b272:	4293      	cmp	r3, r2
 801b274:	4618      	mov	r0, r3
 801b276:	4466      	add	r6, ip
 801b278:	bfa8      	it	ge
 801b27a:	4610      	movge	r0, r2
 801b27c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801b280:	8027      	strh	r7, [r4, #0]
 801b282:	442a      	add	r2, r5
 801b284:	88e5      	ldrh	r5, [r4, #6]
 801b286:	8060      	strh	r0, [r4, #2]
 801b288:	4461      	add	r1, ip
 801b28a:	442b      	add	r3, r5
 801b28c:	b236      	sxth	r6, r6
 801b28e:	b209      	sxth	r1, r1
 801b290:	b212      	sxth	r2, r2
 801b292:	b21b      	sxth	r3, r3
 801b294:	428e      	cmp	r6, r1
 801b296:	bfac      	ite	ge
 801b298:	ebc7 0106 	rsbge	r1, r7, r6
 801b29c:	ebc7 0101 	rsblt	r1, r7, r1
 801b2a0:	429a      	cmp	r2, r3
 801b2a2:	bfac      	ite	ge
 801b2a4:	ebc0 0202 	rsbge	r2, r0, r2
 801b2a8:	ebc0 0203 	rsblt	r2, r0, r3
 801b2ac:	80a1      	strh	r1, [r4, #4]
 801b2ae:	80e2      	strh	r2, [r4, #6]
 801b2b0:	e7d1      	b.n	801b256 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801b2b4 <_ZN8touchgfx11Application11getInstanceEv>:
 801b2b4:	4b01      	ldr	r3, [pc, #4]	; (801b2bc <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801b2b6:	6818      	ldr	r0, [r3, #0]
 801b2b8:	4770      	bx	lr
 801b2ba:	bf00      	nop
 801b2bc:	2000af9c 	.word	0x2000af9c

0801b2c0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 801b2c0:	b510      	push	{r4, lr}
 801b2c2:	2300      	movs	r3, #0
 801b2c4:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 801b2c8:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801b2cc:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 801b2d0:	4604      	mov	r4, r0
 801b2d2:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 801b2d6:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 801b2da:	429a      	cmp	r2, r3
 801b2dc:	d90e      	bls.n	801b2fc <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801b2de:	18e2      	adds	r2, r4, r3
 801b2e0:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 801b2e4:	b122      	cbz	r2, 801b2f0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801b2e6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801b2ea:	6803      	ldr	r3, [r0, #0]
 801b2ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b2ee:	4798      	blx	r3
 801b2f0:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 801b2f4:	3301      	adds	r3, #1
 801b2f6:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801b2fa:	e7ea      	b.n	801b2d2 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 801b2fc:	bd10      	pop	{r4, pc}

0801b2fe <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 801b2fe:	b530      	push	{r4, r5, lr}
 801b300:	f8b0 5080 	ldrh.w	r5, [r0, #128]	; 0x80
 801b304:	2200      	movs	r2, #0
 801b306:	b293      	uxth	r3, r2
 801b308:	429d      	cmp	r5, r3
 801b30a:	d90e      	bls.n	801b32a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 801b30c:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 801b310:	428b      	cmp	r3, r1
 801b312:	d10b      	bne.n	801b32c <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 801b314:	1884      	adds	r4, r0, r2
 801b316:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 801b31a:	b13b      	cbz	r3, 801b32c <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 801b31c:	3b01      	subs	r3, #1
 801b31e:	b2db      	uxtb	r3, r3
 801b320:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
 801b324:	b90b      	cbnz	r3, 801b32a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 801b326:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801b32a:	bd30      	pop	{r4, r5, pc}
 801b32c:	3201      	adds	r2, #1
 801b32e:	e7ea      	b.n	801b306 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

0801b330 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801b330:	2300      	movs	r3, #0
 801b332:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 801b336:	f100 0284 	add.w	r2, r0, #132	; 0x84
 801b33a:	30a4      	adds	r0, #164	; 0xa4
 801b33c:	f802 3b01 	strb.w	r3, [r2], #1
 801b340:	4282      	cmp	r2, r0
 801b342:	d1fb      	bne.n	801b33c <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801b344:	4770      	bx	lr
	...

0801b348 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801b348:	b570      	push	{r4, r5, r6, lr}
 801b34a:	4c0b      	ldr	r4, [pc, #44]	; (801b378 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801b34c:	4605      	mov	r5, r0
 801b34e:	6820      	ldr	r0, [r4, #0]
 801b350:	460e      	mov	r6, r1
 801b352:	b110      	cbz	r0, 801b35a <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 801b354:	6803      	ldr	r3, [r0, #0]
 801b356:	695b      	ldr	r3, [r3, #20]
 801b358:	4798      	blx	r3
 801b35a:	1d28      	adds	r0, r5, #4
 801b35c:	f7ff ffe8 	bl	801b330 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801b360:	6026      	str	r6, [r4, #0]
 801b362:	6833      	ldr	r3, [r6, #0]
 801b364:	4630      	mov	r0, r6
 801b366:	68db      	ldr	r3, [r3, #12]
 801b368:	4798      	blx	r3
 801b36a:	682b      	ldr	r3, [r5, #0]
 801b36c:	4628      	mov	r0, r5
 801b36e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b370:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b374:	4718      	bx	r3
 801b376:	bf00      	nop
 801b378:	2000af8c 	.word	0x2000af8c

0801b37c <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 801b37c:	2300      	movs	r3, #0
 801b37e:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 801b382:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 801b386:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b388:	461a      	mov	r2, r3
 801b38a:	461c      	mov	r4, r3
 801b38c:	461d      	mov	r5, r3
 801b38e:	459c      	cmp	ip, r3
 801b390:	dd1a      	ble.n	801b3c8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801b392:	18c6      	adds	r6, r0, r3
 801b394:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 801b398:	b16e      	cbz	r6, 801b3b6 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801b39a:	429a      	cmp	r2, r3
 801b39c:	d008      	beq.n	801b3b0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801b39e:	fa1f fe82 	uxth.w	lr, r2
 801b3a2:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801b3a6:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801b3aa:	1887      	adds	r7, r0, r2
 801b3ac:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 801b3b0:	3201      	adds	r2, #1
 801b3b2:	3301      	adds	r3, #1
 801b3b4:	e7eb      	b.n	801b38e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801b3b6:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 801b3ba:	4299      	cmp	r1, r3
 801b3bc:	bfa8      	it	ge
 801b3be:	3501      	addge	r5, #1
 801b3c0:	429e      	cmp	r6, r3
 801b3c2:	bfc8      	it	gt
 801b3c4:	3401      	addgt	r4, #1
 801b3c6:	e7f4      	b.n	801b3b2 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 801b3c8:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 801b3cc:	1b49      	subs	r1, r1, r5
 801b3ce:	1b1b      	subs	r3, r3, r4
 801b3d0:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 801b3d4:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 801b3d8:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801b3dc:	4293      	cmp	r3, r2
 801b3de:	dd03      	ble.n	801b3e8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 801b3e0:	3b01      	subs	r3, #1
 801b3e2:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 801b3e6:	e7f7      	b.n	801b3d8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 801b3e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801b3ec <_ZN8touchgfx11Application15handleTickEventEv>:
 801b3ec:	b570      	push	{r4, r5, r6, lr}
 801b3ee:	4d16      	ldr	r5, [pc, #88]	; (801b448 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 801b3f0:	4604      	mov	r4, r0
 801b3f2:	6828      	ldr	r0, [r5, #0]
 801b3f4:	b140      	cbz	r0, 801b408 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801b3f6:	7a03      	ldrb	r3, [r0, #8]
 801b3f8:	b933      	cbnz	r3, 801b408 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801b3fa:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801b3fe:	6803      	ldr	r3, [r0, #0]
 801b400:	689b      	ldr	r3, [r3, #8]
 801b402:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b406:	4718      	bx	r3
 801b408:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 801b40c:	4e0f      	ldr	r6, [pc, #60]	; (801b44c <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801b40e:	b973      	cbnz	r3, 801b42e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b410:	b168      	cbz	r0, 801b42e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b412:	7a03      	ldrb	r3, [r0, #8]
 801b414:	b15b      	cbz	r3, 801b42e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b416:	6830      	ldr	r0, [r6, #0]
 801b418:	b110      	cbz	r0, 801b420 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801b41a:	6803      	ldr	r3, [r0, #0]
 801b41c:	691b      	ldr	r3, [r3, #16]
 801b41e:	4798      	blx	r3
 801b420:	6828      	ldr	r0, [r5, #0]
 801b422:	6803      	ldr	r3, [r0, #0]
 801b424:	68db      	ldr	r3, [r3, #12]
 801b426:	4798      	blx	r3
 801b428:	2301      	movs	r3, #1
 801b42a:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801b42e:	3404      	adds	r4, #4
 801b430:	4620      	mov	r0, r4
 801b432:	f7ff ff45 	bl	801b2c0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801b436:	4620      	mov	r0, r4
 801b438:	f7ff ffa0 	bl	801b37c <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801b43c:	6830      	ldr	r0, [r6, #0]
 801b43e:	b110      	cbz	r0, 801b446 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 801b440:	6803      	ldr	r3, [r0, #0]
 801b442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b444:	e7dd      	b.n	801b402 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801b446:	bd70      	pop	{r4, r5, r6, pc}
 801b448:	2000af90 	.word	0x2000af90
 801b44c:	2000af8c 	.word	0x2000af8c

0801b450 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
 801b450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b452:	2300      	movs	r3, #0
 801b454:	4604      	mov	r4, r0
 801b456:	460d      	mov	r5, r1
 801b458:	f8b0 1080 	ldrh.w	r1, [r0, #128]	; 0x80
 801b45c:	4618      	mov	r0, r3
 801b45e:	b29a      	uxth	r2, r3
 801b460:	4291      	cmp	r1, r2
 801b462:	d911      	bls.n	801b488 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x38>
 801b464:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
 801b468:	18e6      	adds	r6, r4, r3
 801b46a:	42af      	cmp	r7, r5
 801b46c:	f896 2084 	ldrb.w	r2, [r6, #132]	; 0x84
 801b470:	d105      	bne.n	801b47e <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
 801b472:	2aff      	cmp	r2, #255	; 0xff
 801b474:	d002      	beq.n	801b47c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 801b476:	3201      	adds	r2, #1
 801b478:	f886 2084 	strb.w	r2, [r6, #132]	; 0x84
 801b47c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b47e:	2a00      	cmp	r2, #0
 801b480:	bf08      	it	eq
 801b482:	2001      	moveq	r0, #1
 801b484:	3301      	adds	r3, #1
 801b486:	e7ea      	b.n	801b45e <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
 801b488:	b120      	cbz	r0, 801b494 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x44>
 801b48a:	2920      	cmp	r1, #32
 801b48c:	d102      	bne.n	801b494 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x44>
 801b48e:	4620      	mov	r0, r4
 801b490:	f7ff ff74 	bl	801b37c <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801b494:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
 801b498:	2b1f      	cmp	r3, #31
 801b49a:	d8ef      	bhi.n	801b47c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 801b49c:	18e2      	adds	r2, r4, r3
 801b49e:	2101      	movs	r1, #1
 801b4a0:	f882 1084 	strb.w	r1, [r2, #132]	; 0x84
 801b4a4:	185a      	adds	r2, r3, r1
 801b4a6:	f8a4 2080 	strh.w	r2, [r4, #128]	; 0x80
 801b4aa:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801b4ae:	e7e5      	b.n	801b47c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

0801b4b0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801b4b0:	4603      	mov	r3, r0
 801b4b2:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801b4b6:	2200      	movs	r2, #0
 801b4b8:	801a      	strh	r2, [r3, #0]
 801b4ba:	805a      	strh	r2, [r3, #2]
 801b4bc:	809a      	strh	r2, [r3, #4]
 801b4be:	80da      	strh	r2, [r3, #6]
 801b4c0:	3308      	adds	r3, #8
 801b4c2:	428b      	cmp	r3, r1
 801b4c4:	d1f8      	bne.n	801b4b8 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801b4c6:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801b4ca:	4770      	bx	lr

0801b4cc <_ZN8touchgfx11ApplicationC1Ev>:
 801b4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b4ce:	4606      	mov	r6, r0
 801b4d0:	4b1c      	ldr	r3, [pc, #112]	; (801b544 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801b4d2:	f846 3b04 	str.w	r3, [r6], #4
 801b4d6:	4604      	mov	r4, r0
 801b4d8:	2500      	movs	r5, #0
 801b4da:	22a8      	movs	r2, #168	; 0xa8
 801b4dc:	2100      	movs	r1, #0
 801b4de:	4630      	mov	r0, r6
 801b4e0:	f011 fd27 	bl	802cf32 <memset>
 801b4e4:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 801b4e8:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801b4ec:	f7ff ffe0 	bl	801b4b0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b4f0:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801b4f4:	f7ff ffdc 	bl	801b4b0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b4f8:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801b4fc:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801b500:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 801b504:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 801b508:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 801b50c:	490e      	ldr	r1, [pc, #56]	; (801b548 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801b50e:	480f      	ldr	r0, [pc, #60]	; (801b54c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801b510:	4f0f      	ldr	r7, [pc, #60]	; (801b550 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801b512:	f010 f8e5 	bl	802b6e0 <CRC_Lock>
 801b516:	4b0f      	ldr	r3, [pc, #60]	; (801b554 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 801b518:	b158      	cbz	r0, 801b532 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 801b51a:	801d      	strh	r5, [r3, #0]
 801b51c:	4a0e      	ldr	r2, [pc, #56]	; (801b558 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 801b51e:	2300      	movs	r3, #0
 801b520:	6013      	str	r3, [r2, #0]
 801b522:	4a0e      	ldr	r2, [pc, #56]	; (801b55c <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801b524:	603b      	str	r3, [r7, #0]
 801b526:	4630      	mov	r0, r6
 801b528:	6013      	str	r3, [r2, #0]
 801b52a:	f7ff ff01 	bl	801b330 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801b52e:	4620      	mov	r0, r4
 801b530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b532:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801b536:	2002      	movs	r0, #2
 801b538:	801a      	strh	r2, [r3, #0]
 801b53a:	6038      	str	r0, [r7, #0]
 801b53c:	f001 fb00 	bl	801cb40 <_ZN8touchgfx6Screen4drawEv>
 801b540:	e7ec      	b.n	801b51c <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801b542:	bf00      	nop
 801b544:	0802f6f0 	.word	0x0802f6f0
 801b548:	b5e8b5cd 	.word	0xb5e8b5cd
 801b54c:	f407a5c2 	.word	0xf407a5c2
 801b550:	2000af8c 	.word	0x2000af8c
 801b554:	20000038 	.word	0x20000038
 801b558:	2000af9c 	.word	0x2000af9c
 801b55c:	2000af90 	.word	0x2000af90

0801b560 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801b560:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801b564:	3b01      	subs	r3, #1
 801b566:	b29b      	uxth	r3, r3
 801b568:	428b      	cmp	r3, r1
 801b56a:	b510      	push	{r4, lr}
 801b56c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801b570:	d908      	bls.n	801b584 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801b572:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801b576:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801b57a:	681a      	ldr	r2, [r3, #0]
 801b57c:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801b580:	685a      	ldr	r2, [r3, #4]
 801b582:	6062      	str	r2, [r4, #4]
 801b584:	bd10      	pop	{r4, pc}
	...

0801b588 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801b588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b58c:	4b8f      	ldr	r3, [pc, #572]	; (801b7cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 801b58e:	b08f      	sub	sp, #60	; 0x3c
 801b590:	ac0a      	add	r4, sp, #40	; 0x28
 801b592:	e884 0006 	stmia.w	r4, {r1, r2}
 801b596:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b59a:	4b8d      	ldr	r3, [pc, #564]	; (801b7d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 801b59c:	4683      	mov	fp, r0
 801b59e:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b5a2:	4620      	mov	r0, r4
 801b5a4:	f7ff fdca 	bl	801b13c <_ZN8touchgfx4Rect10restrictToEss>
 801b5a8:	4620      	mov	r0, r4
 801b5aa:	f7fb f93c 	bl	8016826 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b5ae:	2800      	cmp	r0, #0
 801b5b0:	d16a      	bne.n	801b688 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b5b2:	9403      	str	r4, [sp, #12]
 801b5b4:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 801b5b8:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 801b5bc:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 801b5c0:	35a4      	adds	r5, #164	; 0xa4
 801b5c2:	9301      	str	r3, [sp, #4]
 801b5c4:	b15c      	cbz	r4, 801b5de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801b5c6:	4629      	mov	r1, r5
 801b5c8:	9803      	ldr	r0, [sp, #12]
 801b5ca:	f7ff fe07 	bl	801b1dc <_ZNK8touchgfx4Rect8includesERKS0_>
 801b5ce:	3c01      	subs	r4, #1
 801b5d0:	b118      	cbz	r0, 801b5da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 801b5d2:	b2a1      	uxth	r1, r4
 801b5d4:	9801      	ldr	r0, [sp, #4]
 801b5d6:	f7ff ffc3 	bl	801b560 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b5da:	3d08      	subs	r5, #8
 801b5dc:	e7f2      	b.n	801b5c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 801b5de:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	; 0xec
 801b5e2:	f8cd a010 	str.w	sl, [sp, #16]
 801b5e6:	f10a 33ff 	add.w	r3, sl, #4294967295
 801b5ea:	9302      	str	r3, [sp, #8]
 801b5ec:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801b5f0:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 801b5f4:	9306      	str	r3, [sp, #24]
 801b5f6:	445c      	add	r4, fp
 801b5f8:	2500      	movs	r5, #0
 801b5fa:	4626      	mov	r6, r4
 801b5fc:	f8cd a014 	str.w	sl, [sp, #20]
 801b600:	462f      	mov	r7, r5
 801b602:	9b05      	ldr	r3, [sp, #20]
 801b604:	2b00      	cmp	r3, #0
 801b606:	d073      	beq.n	801b6f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801b608:	9903      	ldr	r1, [sp, #12]
 801b60a:	4630      	mov	r0, r6
 801b60c:	f7ff fd74 	bl	801b0f8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b610:	b350      	cbz	r0, 801b668 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801b612:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801b616:	f9b6 c000 	ldrsh.w	ip, [r6]
 801b61a:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	; 0x2a
 801b61e:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801b622:	45e6      	cmp	lr, ip
 801b624:	db33      	blt.n	801b68e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801b626:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801b62a:	88b3      	ldrh	r3, [r6, #4]
 801b62c:	4472      	add	r2, lr
 801b62e:	4463      	add	r3, ip
 801b630:	b212      	sxth	r2, r2
 801b632:	b21b      	sxth	r3, r3
 801b634:	429a      	cmp	r2, r3
 801b636:	dc2a      	bgt.n	801b68e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801b638:	88f3      	ldrh	r3, [r6, #6]
 801b63a:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801b63e:	fa1f f289 	uxth.w	r2, r9
 801b642:	4413      	add	r3, r2
 801b644:	b29b      	uxth	r3, r3
 801b646:	45c8      	cmp	r8, r9
 801b648:	fa1f fc88 	uxth.w	ip, r8
 801b64c:	fa0f fe83 	sxth.w	lr, r3
 801b650:	db0f      	blt.n	801b672 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801b652:	eba3 030c 	sub.w	r3, r3, ip
 801b656:	1ac9      	subs	r1, r1, r3
 801b658:	b209      	sxth	r1, r1
 801b65a:	2900      	cmp	r1, #0
 801b65c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801b660:	dd12      	ble.n	801b688 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b662:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 801b666:	4605      	mov	r5, r0
 801b668:	9b05      	ldr	r3, [sp, #20]
 801b66a:	3b01      	subs	r3, #1
 801b66c:	9305      	str	r3, [sp, #20]
 801b66e:	3e08      	subs	r6, #8
 801b670:	e7c7      	b.n	801b602 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801b672:	4461      	add	r1, ip
 801b674:	b209      	sxth	r1, r1
 801b676:	4571      	cmp	r1, lr
 801b678:	dc38      	bgt.n	801b6ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801b67a:	eba2 020c 	sub.w	r2, r2, ip
 801b67e:	b212      	sxth	r2, r2
 801b680:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801b684:	2a00      	cmp	r2, #0
 801b686:	dcee      	bgt.n	801b666 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801b688:	b00f      	add	sp, #60	; 0x3c
 801b68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b68e:	45c8      	cmp	r8, r9
 801b690:	db2c      	blt.n	801b6ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801b692:	88f3      	ldrh	r3, [r6, #6]
 801b694:	4499      	add	r9, r3
 801b696:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801b69a:	4498      	add	r8, r3
 801b69c:	fa0f f989 	sxth.w	r9, r9
 801b6a0:	fa0f f888 	sxth.w	r8, r8
 801b6a4:	45c1      	cmp	r9, r8
 801b6a6:	db21      	blt.n	801b6ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801b6a8:	88b3      	ldrh	r3, [r6, #4]
 801b6aa:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801b6ae:	fa1f f28c 	uxth.w	r2, ip
 801b6b2:	4413      	add	r3, r2
 801b6b4:	b29b      	uxth	r3, r3
 801b6b6:	45e6      	cmp	lr, ip
 801b6b8:	fa1f f88e 	uxth.w	r8, lr
 801b6bc:	fa0f f983 	sxth.w	r9, r3
 801b6c0:	db0a      	blt.n	801b6d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 801b6c2:	eba3 0308 	sub.w	r3, r3, r8
 801b6c6:	1ac9      	subs	r1, r1, r3
 801b6c8:	b209      	sxth	r1, r1
 801b6ca:	2900      	cmp	r1, #0
 801b6cc:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801b6d0:	ddda      	ble.n	801b688 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b6d2:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801b6d6:	e7c6      	b.n	801b666 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801b6d8:	4441      	add	r1, r8
 801b6da:	b209      	sxth	r1, r1
 801b6dc:	4549      	cmp	r1, r9
 801b6de:	dc05      	bgt.n	801b6ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801b6e0:	eba2 0208 	sub.w	r2, r2, r8
 801b6e4:	b212      	sxth	r2, r2
 801b6e6:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801b6ea:	e7cb      	b.n	801b684 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801b6ec:	4607      	mov	r7, r0
 801b6ee:	e7bb      	b.n	801b668 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801b6f0:	2d00      	cmp	r5, #0
 801b6f2:	d181      	bne.n	801b5f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 801b6f4:	2f00      	cmp	r7, #0
 801b6f6:	f000 81dd 	beq.w	801bab4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801b6fa:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 801b6fe:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 801b702:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 801b706:	b2b3      	uxth	r3, r6
 801b708:	9305      	str	r3, [sp, #20]
 801b70a:	9a05      	ldr	r2, [sp, #20]
 801b70c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801b710:	4413      	add	r3, r2
 801b712:	b2ba      	uxth	r2, r7
 801b714:	4492      	add	sl, r2
 801b716:	b29b      	uxth	r3, r3
 801b718:	fa1f fa8a 	uxth.w	sl, sl
 801b71c:	fa0f f883 	sxth.w	r8, r3
 801b720:	fa0f f98a 	sxth.w	r9, sl
 801b724:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801b728:	9b04      	ldr	r3, [sp, #16]
 801b72a:	2b00      	cmp	r3, #0
 801b72c:	d052      	beq.n	801b7d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801b72e:	9903      	ldr	r1, [sp, #12]
 801b730:	4620      	mov	r0, r4
 801b732:	f7ff fce1 	bl	801b0f8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b736:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b73a:	b1c0      	cbz	r0, 801b76e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b73c:	f9b4 e000 	ldrsh.w	lr, [r4]
 801b740:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801b744:	4576      	cmp	r6, lr
 801b746:	dc22      	bgt.n	801b78e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801b748:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801b74c:	44f4      	add	ip, lr
 801b74e:	fa0f fc8c 	sxth.w	ip, ip
 801b752:	45e0      	cmp	r8, ip
 801b754:	db1b      	blt.n	801b78e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801b756:	428f      	cmp	r7, r1
 801b758:	fa1f fc81 	uxth.w	ip, r1
 801b75c:	88e1      	ldrh	r1, [r4, #6]
 801b75e:	dc0d      	bgt.n	801b77c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 801b760:	ebaa 0c0c 	sub.w	ip, sl, ip
 801b764:	eba1 010c 	sub.w	r1, r1, ip
 801b768:	f8a4 9002 	strh.w	r9, [r4, #2]
 801b76c:	80e1      	strh	r1, [r4, #6]
 801b76e:	4628      	mov	r0, r5
 801b770:	9904      	ldr	r1, [sp, #16]
 801b772:	3901      	subs	r1, #1
 801b774:	9104      	str	r1, [sp, #16]
 801b776:	3c08      	subs	r4, #8
 801b778:	4605      	mov	r5, r0
 801b77a:	e7d3      	b.n	801b724 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 801b77c:	4461      	add	r1, ip
 801b77e:	b209      	sxth	r1, r1
 801b780:	4549      	cmp	r1, r9
 801b782:	dcf5      	bgt.n	801b770 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801b784:	eba2 0c0c 	sub.w	ip, r2, ip
 801b788:	f8a4 c006 	strh.w	ip, [r4, #6]
 801b78c:	e7ef      	b.n	801b76e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b78e:	428f      	cmp	r7, r1
 801b790:	dcee      	bgt.n	801b770 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801b792:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801b796:	4461      	add	r1, ip
 801b798:	b209      	sxth	r1, r1
 801b79a:	4589      	cmp	r9, r1
 801b79c:	dbe8      	blt.n	801b770 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801b79e:	4576      	cmp	r6, lr
 801b7a0:	fa1f fc8e 	uxth.w	ip, lr
 801b7a4:	88a1      	ldrh	r1, [r4, #4]
 801b7a6:	dc07      	bgt.n	801b7b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 801b7a8:	eba3 0c0c 	sub.w	ip, r3, ip
 801b7ac:	eba1 010c 	sub.w	r1, r1, ip
 801b7b0:	f8a4 8000 	strh.w	r8, [r4]
 801b7b4:	80a1      	strh	r1, [r4, #4]
 801b7b6:	e7da      	b.n	801b76e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b7b8:	4461      	add	r1, ip
 801b7ba:	b209      	sxth	r1, r1
 801b7bc:	4588      	cmp	r8, r1
 801b7be:	dbd7      	blt.n	801b770 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801b7c0:	9905      	ldr	r1, [sp, #20]
 801b7c2:	eba1 0c0c 	sub.w	ip, r1, ip
 801b7c6:	f8a4 c004 	strh.w	ip, [r4, #4]
 801b7ca:	e7d0      	b.n	801b76e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b7cc:	2000af3e 	.word	0x2000af3e
 801b7d0:	2000af3c 	.word	0x2000af3c
 801b7d4:	2d00      	cmp	r5, #0
 801b7d6:	f000 816d 	beq.w	801bab4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801b7da:	9b06      	ldr	r3, [sp, #24]
 801b7dc:	445b      	add	r3, fp
 801b7de:	461c      	mov	r4, r3
 801b7e0:	9b02      	ldr	r3, [sp, #8]
 801b7e2:	3301      	adds	r3, #1
 801b7e4:	f000 8166 	beq.w	801bab4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801b7e8:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 801b7ec:	4629      	mov	r1, r5
 801b7ee:	9803      	ldr	r0, [sp, #12]
 801b7f0:	f7ff fcf4 	bl	801b1dc <_ZNK8touchgfx4Rect8includesERKS0_>
 801b7f4:	b120      	cbz	r0, 801b800 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 801b7f6:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801b7fa:	9801      	ldr	r0, [sp, #4]
 801b7fc:	f7ff feb0 	bl	801b560 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b800:	9903      	ldr	r1, [sp, #12]
 801b802:	4628      	mov	r0, r5
 801b804:	f7ff fc78 	bl	801b0f8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b808:	2800      	cmp	r0, #0
 801b80a:	f000 809c 	beq.w	801b946 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801b80e:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 801b812:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801b816:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801b81a:	9309      	str	r3, [sp, #36]	; 0x24
 801b81c:	fa1f f189 	uxth.w	r1, r9
 801b820:	eb01 0c03 	add.w	ip, r1, r3
 801b824:	fa1f fa8c 	uxth.w	sl, ip
 801b828:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801b82c:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 801b830:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 801b834:	b283      	uxth	r3, r0
 801b836:	eb03 050c 	add.w	r5, r3, ip
 801b83a:	b2ad      	uxth	r5, r5
 801b83c:	9505      	str	r5, [sp, #20]
 801b83e:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801b842:	9504      	str	r5, [sp, #16]
 801b844:	4548      	cmp	r0, r9
 801b846:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 801b84a:	f340 8099 	ble.w	801b980 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 801b84e:	1a5b      	subs	r3, r3, r1
 801b850:	b29b      	uxth	r3, r3
 801b852:	4596      	cmp	lr, r2
 801b854:	fa0f f08a 	sxth.w	r0, sl
 801b858:	b21e      	sxth	r6, r3
 801b85a:	dd2e      	ble.n	801b8ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 801b85c:	9f02      	ldr	r7, [sp, #8]
 801b85e:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 801b862:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801b866:	9f04      	ldr	r7, [sp, #16]
 801b868:	1a3f      	subs	r7, r7, r0
 801b86a:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 801b86e:	fa1f fe8e 	uxth.w	lr, lr
 801b872:	b292      	uxth	r2, r2
 801b874:	ebae 0102 	sub.w	r1, lr, r2
 801b878:	44a6      	add	lr, r4
 801b87a:	4402      	add	r2, r0
 801b87c:	b289      	uxth	r1, r1
 801b87e:	fa0f fe8e 	sxth.w	lr, lr
 801b882:	b212      	sxth	r2, r2
 801b884:	b20d      	sxth	r5, r1
 801b886:	ebae 0202 	sub.w	r2, lr, r2
 801b88a:	436f      	muls	r7, r5
 801b88c:	4372      	muls	r2, r6
 801b88e:	4297      	cmp	r7, r2
 801b890:	db09      	blt.n	801b8a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801b892:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 801b896:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 801b89a:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801b89e:	449c      	add	ip, r3
 801b8a0:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801b8a4:	e686      	b.n	801b5b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b8a6:	4421      	add	r1, r4
 801b8a8:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 801b8ac:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 801b8b0:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801b8b4:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801b8b8:	e67c      	b.n	801b5b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b8ba:	9f04      	ldr	r7, [sp, #16]
 801b8bc:	42b8      	cmp	r0, r7
 801b8be:	da27      	bge.n	801b910 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801b8c0:	9902      	ldr	r1, [sp, #8]
 801b8c2:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 801b8c6:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 801b8ca:	eb05 010e 	add.w	r1, r5, lr
 801b8ce:	fa1f f881 	uxth.w	r8, r1
 801b8d2:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 801b8d6:	4411      	add	r1, r2
 801b8d8:	eba1 0108 	sub.w	r1, r1, r8
 801b8dc:	b289      	uxth	r1, r1
 801b8de:	fa0f f988 	sxth.w	r9, r8
 801b8e2:	eba2 020e 	sub.w	r2, r2, lr
 801b8e6:	fa0f f881 	sxth.w	r8, r1
 801b8ea:	1a3f      	subs	r7, r7, r0
 801b8ec:	4372      	muls	r2, r6
 801b8ee:	fb08 f707 	mul.w	r7, r8, r7
 801b8f2:	42ba      	cmp	r2, r7
 801b8f4:	dc06      	bgt.n	801b904 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 801b8f6:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 801b8fa:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 801b8fe:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 801b902:	e7ca      	b.n	801b89a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 801b904:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 801b908:	4429      	add	r1, r5
 801b90a:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801b90e:	e651      	b.n	801b5b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b910:	9805      	ldr	r0, [sp, #20]
 801b912:	ebaa 0000 	sub.w	r0, sl, r0
 801b916:	b280      	uxth	r0, r0
 801b918:	2d06      	cmp	r5, #6
 801b91a:	fa0f fe80 	sxth.w	lr, r0
 801b91e:	d817      	bhi.n	801b950 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 801b920:	9b04      	ldr	r3, [sp, #16]
 801b922:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801b926:	1c6b      	adds	r3, r5, #1
 801b928:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 801b92c:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 801b930:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 801b934:	9b01      	ldr	r3, [sp, #4]
 801b936:	9801      	ldr	r0, [sp, #4]
 801b938:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b93c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801b940:	805a      	strh	r2, [r3, #2]
 801b942:	809e      	strh	r6, [r3, #4]
 801b944:	80d9      	strh	r1, [r3, #6]
 801b946:	9b02      	ldr	r3, [sp, #8]
 801b948:	3b01      	subs	r3, #1
 801b94a:	9302      	str	r3, [sp, #8]
 801b94c:	3c08      	subs	r4, #8
 801b94e:	e747      	b.n	801b7e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 801b950:	9a02      	ldr	r2, [sp, #8]
 801b952:	45b6      	cmp	lr, r6
 801b954:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801b958:	db0d      	blt.n	801b976 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801b95a:	449c      	add	ip, r3
 801b95c:	fa1f fc8c 	uxth.w	ip, ip
 801b960:	445a      	add	r2, fp
 801b962:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801b966:	448c      	add	ip, r1
 801b968:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801b96c:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 801b970:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 801b974:	e61e      	b.n	801b5b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b976:	445a      	add	r2, fp
 801b978:	4484      	add	ip, r0
 801b97a:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 801b97e:	e78f      	b.n	801b8a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801b980:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801b984:	fa1f f18e 	uxth.w	r1, lr
 801b988:	eb01 0806 	add.w	r8, r1, r6
 801b98c:	b293      	uxth	r3, r2
 801b98e:	fa1f f888 	uxth.w	r8, r8
 801b992:	9306      	str	r3, [sp, #24]
 801b994:	fa0f f388 	sxth.w	r3, r8
 801b998:	9307      	str	r3, [sp, #28]
 801b99a:	9f06      	ldr	r7, [sp, #24]
 801b99c:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 801b9a0:	443b      	add	r3, r7
 801b9a2:	b29b      	uxth	r3, r3
 801b9a4:	4596      	cmp	lr, r2
 801b9a6:	9308      	str	r3, [sp, #32]
 801b9a8:	da24      	bge.n	801b9f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801b9aa:	9905      	ldr	r1, [sp, #20]
 801b9ac:	eba3 0308 	sub.w	r3, r3, r8
 801b9b0:	ebaa 0401 	sub.w	r4, sl, r1
 801b9b4:	b2a4      	uxth	r4, r4
 801b9b6:	b29b      	uxth	r3, r3
 801b9b8:	b225      	sxth	r5, r4
 801b9ba:	b219      	sxth	r1, r3
 801b9bc:	eba2 020e 	sub.w	r2, r2, lr
 801b9c0:	eba9 0000 	sub.w	r0, r9, r0
 801b9c4:	436a      	muls	r2, r5
 801b9c6:	4348      	muls	r0, r1
 801b9c8:	4282      	cmp	r2, r0
 801b9ca:	9a02      	ldr	r2, [sp, #8]
 801b9cc:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801b9d0:	445a      	add	r2, fp
 801b9d2:	dc06      	bgt.n	801b9e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 801b9d4:	9b07      	ldr	r3, [sp, #28]
 801b9d6:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 801b9da:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 801b9de:	44a4      	add	ip, r4
 801b9e0:	e75e      	b.n	801b8a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801b9e2:	9904      	ldr	r1, [sp, #16]
 801b9e4:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 801b9e8:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 801b9ec:	4433      	add	r3, r6
 801b9ee:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801b9f2:	e5df      	b.n	801b5b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b9f4:	9f06      	ldr	r7, [sp, #24]
 801b9f6:	9b04      	ldr	r3, [sp, #16]
 801b9f8:	1bc9      	subs	r1, r1, r7
 801b9fa:	fa0f f78a 	sxth.w	r7, sl
 801b9fe:	b289      	uxth	r1, r1
 801ba00:	429f      	cmp	r7, r3
 801ba02:	fa0f fe81 	sxth.w	lr, r1
 801ba06:	dd23      	ble.n	801ba50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 801ba08:	9a05      	ldr	r2, [sp, #20]
 801ba0a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801ba0e:	9d07      	ldr	r5, [sp, #28]
 801ba10:	ebaa 0202 	sub.w	r2, sl, r2
 801ba14:	b292      	uxth	r2, r2
 801ba16:	eba5 0a03 	sub.w	sl, r5, r3
 801ba1a:	b214      	sxth	r4, r2
 801ba1c:	eba9 0000 	sub.w	r0, r9, r0
 801ba20:	9b02      	ldr	r3, [sp, #8]
 801ba22:	fb0e f000 	mul.w	r0, lr, r0
 801ba26:	fb04 fa0a 	mul.w	sl, r4, sl
 801ba2a:	00db      	lsls	r3, r3, #3
 801ba2c:	4550      	cmp	r0, sl
 801ba2e:	445b      	add	r3, fp
 801ba30:	db03      	blt.n	801ba3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 801ba32:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 801ba36:	4494      	add	ip, r2
 801ba38:	e732      	b.n	801b8a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801ba3a:	9a04      	ldr	r2, [sp, #16]
 801ba3c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 801ba40:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 801ba44:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 801ba48:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801ba4c:	4431      	add	r1, r6
 801ba4e:	e75c      	b.n	801b90a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 801ba50:	9b08      	ldr	r3, [sp, #32]
 801ba52:	eba3 0308 	sub.w	r3, r3, r8
 801ba56:	b29b      	uxth	r3, r3
 801ba58:	2d06      	cmp	r5, #6
 801ba5a:	b218      	sxth	r0, r3
 801ba5c:	d813      	bhi.n	801ba86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 801ba5e:	9b07      	ldr	r3, [sp, #28]
 801ba60:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 801ba64:	1c6b      	adds	r3, r5, #1
 801ba66:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 801ba6a:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 801ba6e:	9b01      	ldr	r3, [sp, #4]
 801ba70:	9901      	ldr	r1, [sp, #4]
 801ba72:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801ba76:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801ba7a:	805a      	strh	r2, [r3, #2]
 801ba7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ba7e:	809a      	strh	r2, [r3, #4]
 801ba80:	f8a3 e006 	strh.w	lr, [r3, #6]
 801ba84:	e75f      	b.n	801b946 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801ba86:	9c02      	ldr	r4, [sp, #8]
 801ba88:	4570      	cmp	r0, lr
 801ba8a:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801ba8e:	db0d      	blt.n	801baac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 801ba90:	4431      	add	r1, r6
 801ba92:	9b06      	ldr	r3, [sp, #24]
 801ba94:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801ba98:	b289      	uxth	r1, r1
 801ba9a:	445c      	add	r4, fp
 801ba9c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801baa0:	4419      	add	r1, r3
 801baa2:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 801baa6:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 801baaa:	e583      	b.n	801b5b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801baac:	445c      	add	r4, fp
 801baae:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 801bab2:	e79b      	b.n	801b9ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 801bab4:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 801bab8:	1e65      	subs	r5, r4, #1
 801baba:	b2ad      	uxth	r5, r5
 801babc:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 801bac0:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801bac4:	42b5      	cmp	r5, r6
 801bac6:	d044      	beq.n	801bb52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 801bac8:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801bacc:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	; 0xa6
 801bad0:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801bad4:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	; 0xa4
 801bad8:	4282      	cmp	r2, r0
 801bada:	d11f      	bne.n	801bb1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801badc:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	; 0x2e
 801bae0:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 801bae4:	459c      	cmp	ip, r3
 801bae6:	d119      	bne.n	801bb1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801bae8:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
 801baec:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801baf0:	19d8      	adds	r0, r3, r7
 801baf2:	b200      	sxth	r0, r0
 801baf4:	4288      	cmp	r0, r1
 801baf6:	d109      	bne.n	801bb0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 801baf8:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
 801bafc:	4413      	add	r3, r2
 801bafe:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801bb02:	4629      	mov	r1, r5
 801bb04:	9801      	ldr	r0, [sp, #4]
 801bb06:	f7ff fd2b 	bl	801b560 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801bb0a:	e003      	b.n	801bb14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801bb0c:	4411      	add	r1, r2
 801bb0e:	b209      	sxth	r1, r1
 801bb10:	42b9      	cmp	r1, r7
 801bb12:	d0f3      	beq.n	801bafc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 801bb14:	3d01      	subs	r5, #1
 801bb16:	b2ad      	uxth	r5, r5
 801bb18:	3c08      	subs	r4, #8
 801bb1a:	e7d3      	b.n	801bac4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 801bb1c:	42b9      	cmp	r1, r7
 801bb1e:	d1f9      	bne.n	801bb14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801bb20:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
 801bb24:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801bb28:	4299      	cmp	r1, r3
 801bb2a:	d1f3      	bne.n	801bb14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801bb2c:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 801bb30:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801bb34:	181f      	adds	r7, r3, r0
 801bb36:	b23f      	sxth	r7, r7
 801bb38:	42ba      	cmp	r2, r7
 801bb3a:	d105      	bne.n	801bb48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 801bb3c:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
 801bb40:	440b      	add	r3, r1
 801bb42:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801bb46:	e7dc      	b.n	801bb02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 801bb48:	440a      	add	r2, r1
 801bb4a:	b212      	sxth	r2, r2
 801bb4c:	4290      	cmp	r0, r2
 801bb4e:	d1e1      	bne.n	801bb14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801bb50:	e7f6      	b.n	801bb40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 801bb52:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 801bb56:	2e07      	cmp	r6, #7
 801bb58:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801bb5c:	d812      	bhi.n	801bb84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 801bb5e:	1c75      	adds	r5, r6, #1
 801bb60:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 801bb64:	9d01      	ldr	r5, [sp, #4]
 801bb66:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801bb6a:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801bb6e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801bb72:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801bb76:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801bb7a:	442c      	add	r4, r5
 801bb7c:	8061      	strh	r1, [r4, #2]
 801bb7e:	80a2      	strh	r2, [r4, #4]
 801bb80:	80e3      	strh	r3, [r4, #6]
 801bb82:	e581      	b.n	801b688 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801bb84:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 801bb88:	3e01      	subs	r6, #1
 801bb8a:	445c      	add	r4, fp
 801bb8c:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801bb90:	f04f 37ff 	mov.w	r7, #4294967295
 801bb94:	2500      	movs	r5, #0
 801bb96:	9305      	str	r3, [sp, #20]
 801bb98:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801bb9c:	9302      	str	r3, [sp, #8]
 801bb9e:	1e72      	subs	r2, r6, #1
 801bba0:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 801bba4:	9304      	str	r3, [sp, #16]
 801bba6:	4691      	mov	r9, r2
 801bba8:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 801bbac:	f1b9 3fff 	cmp.w	r9, #4294967295
 801bbb0:	bf14      	ite	ne
 801bbb2:	9905      	ldrne	r1, [sp, #20]
 801bbb4:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801bbb8:	6818      	ldr	r0, [r3, #0]
 801bbba:	9207      	str	r2, [sp, #28]
 801bbbc:	bf18      	it	ne
 801bbbe:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801bbc2:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801bbc6:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801bbca:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801bbce:	9306      	str	r3, [sp, #24]
 801bbd0:	fb18 f801 	smulbb	r8, r8, r1
 801bbd4:	6859      	ldr	r1, [r3, #4]
 801bbd6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801bbda:	4671      	mov	r1, lr
 801bbdc:	a80c      	add	r0, sp, #48	; 0x30
 801bbde:	f7ff fb23 	bl	801b228 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801bbe2:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801bbe6:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801bbea:	9b04      	ldr	r3, [sp, #16]
 801bbec:	9a02      	ldr	r2, [sp, #8]
 801bbee:	fb10 f001 	smulbb	r0, r0, r1
 801bbf2:	fb02 8803 	mla	r8, r2, r3, r8
 801bbf6:	eba0 0108 	sub.w	r1, r0, r8
 801bbfa:	f04f 0c08 	mov.w	ip, #8
 801bbfe:	fb90 f0fc 	sdiv	r0, r0, ip
 801bc02:	4288      	cmp	r0, r1
 801bc04:	dc20      	bgt.n	801bc48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 801bc06:	4551      	cmp	r1, sl
 801bc08:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801bc0c:	da03      	bge.n	801bc16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68e>
 801bc0e:	b1d9      	cbz	r1, 801bc48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 801bc10:	468a      	mov	sl, r1
 801bc12:	464f      	mov	r7, r9
 801bc14:	4635      	mov	r5, r6
 801bc16:	f109 39ff 	add.w	r9, r9, #4294967295
 801bc1a:	f119 0f02 	cmn.w	r9, #2
 801bc1e:	d1c5      	bne.n	801bbac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 801bc20:	4616      	mov	r6, r2
 801bc22:	3201      	adds	r2, #1
 801bc24:	f1a4 0408 	sub.w	r4, r4, #8
 801bc28:	d1b6      	bne.n	801bb98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 801bc2a:	9b01      	ldr	r3, [sp, #4]
 801bc2c:	b2ac      	uxth	r4, r5
 801bc2e:	00ed      	lsls	r5, r5, #3
 801bc30:	1958      	adds	r0, r3, r5
 801bc32:	1c7b      	adds	r3, r7, #1
 801bc34:	d10b      	bne.n	801bc4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c6>
 801bc36:	4601      	mov	r1, r0
 801bc38:	9803      	ldr	r0, [sp, #12]
 801bc3a:	f7ff faf5 	bl	801b228 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801bc3e:	4621      	mov	r1, r4
 801bc40:	9801      	ldr	r0, [sp, #4]
 801bc42:	f7ff fc8d 	bl	801b560 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801bc46:	e4b5      	b.n	801b5b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801bc48:	464f      	mov	r7, r9
 801bc4a:	4635      	mov	r5, r6
 801bc4c:	e7ed      	b.n	801bc2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a2>
 801bc4e:	9b01      	ldr	r3, [sp, #4]
 801bc50:	00ff      	lsls	r7, r7, #3
 801bc52:	19d9      	adds	r1, r3, r7
 801bc54:	f7ff fae8 	bl	801b228 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801bc58:	9b03      	ldr	r3, [sp, #12]
 801bc5a:	cb03      	ldmia	r3!, {r0, r1}
 801bc5c:	445f      	add	r7, fp
 801bc5e:	445d      	add	r5, fp
 801bc60:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 801bc64:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 801bc68:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801bc6c:	9b03      	ldr	r3, [sp, #12]
 801bc6e:	6869      	ldr	r1, [r5, #4]
 801bc70:	c303      	stmia	r3!, {r0, r1}
 801bc72:	e7e4      	b.n	801bc3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b6>

0801bc74 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801bc74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc78:	f500 7698 	add.w	r6, r0, #304	; 0x130
 801bc7c:	b09b      	sub	sp, #108	; 0x6c
 801bc7e:	4604      	mov	r4, r0
 801bc80:	4630      	mov	r0, r6
 801bc82:	f7fa fdd0 	bl	8016826 <_ZNK8touchgfx4Rect7isEmptyEv>
 801bc86:	4605      	mov	r5, r0
 801bc88:	b948      	cbnz	r0, 801bc9e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 801bc8a:	6823      	ldr	r3, [r4, #0]
 801bc8c:	e896 0006 	ldmia.w	r6, {r1, r2}
 801bc90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bc92:	4620      	mov	r0, r4
 801bc94:	4798      	blx	r3
 801bc96:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801bc9a:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 801bc9e:	4bc6      	ldr	r3, [pc, #792]	; (801bfb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 801bca0:	681b      	ldr	r3, [r3, #0]
 801bca2:	2b00      	cmp	r3, #0
 801bca4:	d03f      	beq.n	801bd26 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801bca6:	4dc5      	ldr	r5, [pc, #788]	; (801bfbc <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 801bca8:	4628      	mov	r0, r5
 801bcaa:	f7fa fdbc 	bl	8016826 <_ZNK8touchgfx4Rect7isEmptyEv>
 801bcae:	4606      	mov	r6, r0
 801bcb0:	2800      	cmp	r0, #0
 801bcb2:	d138      	bne.n	801bd26 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801bcb4:	4628      	mov	r0, r5
 801bcb6:	f7ff f939 	bl	801af2c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801bcba:	6823      	ldr	r3, [r4, #0]
 801bcbc:	6829      	ldr	r1, [r5, #0]
 801bcbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bcc0:	686a      	ldr	r2, [r5, #4]
 801bcc2:	4620      	mov	r0, r4
 801bcc4:	4798      	blx	r3
 801bcc6:	802e      	strh	r6, [r5, #0]
 801bcc8:	806e      	strh	r6, [r5, #2]
 801bcca:	80ae      	strh	r6, [r5, #4]
 801bccc:	80ee      	strh	r6, [r5, #6]
 801bcce:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 801bcd2:	4dbb      	ldr	r5, [pc, #748]	; (801bfc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801bcd4:	4640      	mov	r0, r8
 801bcd6:	f7ff fbeb 	bl	801b4b0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801bcda:	882e      	ldrh	r6, [r5, #0]
 801bcdc:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801bce0:	4633      	mov	r3, r6
 801bce2:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801bce6:	42bb      	cmp	r3, r7
 801bce8:	d224      	bcs.n	801bd34 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801bcea:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801bcee:	2907      	cmp	r1, #7
 801bcf0:	d816      	bhi.n	801bd20 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 801bcf2:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801bcf6:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 801bcfa:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 801bcfe:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801bd02:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801bd06:	1c4a      	adds	r2, r1, #1
 801bd08:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 801bd0c:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 801bd10:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 801bd14:	f8a2 a002 	strh.w	sl, [r2, #2]
 801bd18:	f8a2 e004 	strh.w	lr, [r2, #4]
 801bd1c:	f8a2 c006 	strh.w	ip, [r2, #6]
 801bd20:	3301      	adds	r3, #1
 801bd22:	b29b      	uxth	r3, r3
 801bd24:	e7df      	b.n	801bce6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 801bd26:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801bd2a:	2b00      	cmp	r3, #0
 801bd2c:	d1cf      	bne.n	801bcce <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 801bd2e:	b01b      	add	sp, #108	; 0x6c
 801bd30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd34:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 801bd38:	42b3      	cmp	r3, r6
 801bd3a:	d90c      	bls.n	801bd56 <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 801bd3c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801bd40:	6822      	ldr	r2, [r4, #0]
 801bd42:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 801bd46:	6c17      	ldr	r7, [r2, #64]	; 0x40
 801bd48:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 801bd4c:	4620      	mov	r0, r4
 801bd4e:	3601      	adds	r6, #1
 801bd50:	47b8      	blx	r7
 801bd52:	b2b6      	uxth	r6, r6
 801bd54:	e7ee      	b.n	801bd34 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801bd56:	4a9b      	ldr	r2, [pc, #620]	; (801bfc4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801bd58:	6813      	ldr	r3, [r2, #0]
 801bd5a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801bd5e:	2b01      	cmp	r3, #1
 801bd60:	4691      	mov	r9, r2
 801bd62:	f040 80e2 	bne.w	801bf2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 801bd66:	8829      	ldrh	r1, [r5, #0]
 801bd68:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801bd6c:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 801bd70:	33ae      	adds	r3, #174	; 0xae
 801bd72:	2600      	movs	r6, #0
 801bd74:	428f      	cmp	r7, r1
 801bd76:	f103 0308 	add.w	r3, r3, #8
 801bd7a:	dd0a      	ble.n	801bd92 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 801bd7c:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 801bd80:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 801bd84:	4402      	add	r2, r0
 801bd86:	b212      	sxth	r2, r2
 801bd88:	4296      	cmp	r6, r2
 801bd8a:	bfb8      	it	lt
 801bd8c:	4616      	movlt	r6, r2
 801bd8e:	3101      	adds	r1, #1
 801bd90:	e7f0      	b.n	801bd74 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 801bd92:	4b8d      	ldr	r3, [pc, #564]	; (801bfc8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801bd94:	f8df 922c 	ldr.w	r9, [pc, #556]	; 801bfc4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>
 801bd98:	881b      	ldrh	r3, [r3, #0]
 801bd9a:	2b0f      	cmp	r3, #15
 801bd9c:	bf88      	it	hi
 801bd9e:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 801bda2:	f04f 0300 	mov.w	r3, #0
 801bda6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801bdaa:	bf98      	it	ls
 801bdac:	f04f 0b01 	movls.w	fp, #1
 801bdb0:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 801bdb4:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 801bdb8:	4b82      	ldr	r3, [pc, #520]	; (801bfc4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801bdba:	4438      	add	r0, r7
 801bdbc:	b207      	sxth	r7, r0
 801bdbe:	6818      	ldr	r0, [r3, #0]
 801bdc0:	42b7      	cmp	r7, r6
 801bdc2:	6803      	ldr	r3, [r0, #0]
 801bdc4:	f280 8083 	bge.w	801bece <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801bdc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801bdcc:	4798      	blx	r3
 801bdce:	eb07 030b 	add.w	r3, r7, fp
 801bdd2:	4298      	cmp	r0, r3
 801bdd4:	da07      	bge.n	801bde6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 801bdd6:	42b0      	cmp	r0, r6
 801bdd8:	da05      	bge.n	801bde6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 801bdda:	4287      	cmp	r7, r0
 801bddc:	dd6c      	ble.n	801beb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 801bdde:	2f00      	cmp	r7, #0
 801bde0:	dd6a      	ble.n	801beb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 801bde2:	4630      	mov	r0, r6
 801bde4:	e004      	b.n	801bdf0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 801bde6:	4287      	cmp	r7, r0
 801bde8:	dcfb      	bgt.n	801bde2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801bdea:	42b0      	cmp	r0, r6
 801bdec:	bfa8      	it	ge
 801bdee:	4630      	movge	r0, r6
 801bdf0:	4b76      	ldr	r3, [pc, #472]	; (801bfcc <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801bdf2:	f8ad 7016 	strh.w	r7, [sp, #22]
 801bdf6:	1bc0      	subs	r0, r0, r7
 801bdf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bdfc:	882f      	ldrh	r7, [r5, #0]
 801bdfe:	f8ad 3018 	strh.w	r3, [sp, #24]
 801be02:	2200      	movs	r2, #0
 801be04:	f8ad 2014 	strh.w	r2, [sp, #20]
 801be08:	f8ad 001a 	strh.w	r0, [sp, #26]
 801be0c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801be10:	42bb      	cmp	r3, r7
 801be12:	d9cd      	bls.n	801bdb0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 801be14:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801be18:	ab07      	add	r3, sp, #28
 801be1a:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801be1e:	6851      	ldr	r1, [r2, #4]
 801be20:	c303      	stmia	r3!, {r0, r1}
 801be22:	a905      	add	r1, sp, #20
 801be24:	a807      	add	r0, sp, #28
 801be26:	f7ff f967 	bl	801b0f8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801be2a:	2800      	cmp	r0, #0
 801be2c:	d04c      	beq.n	801bec8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 801be2e:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801be32:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801be36:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801be3a:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801be3e:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801be42:	9302      	str	r3, [sp, #8]
 801be44:	4686      	mov	lr, r0
 801be46:	4290      	cmp	r0, r2
 801be48:	4450      	add	r0, sl
 801be4a:	f8bd a018 	ldrh.w	sl, [sp, #24]
 801be4e:	bfb8      	it	lt
 801be50:	4696      	movlt	lr, r2
 801be52:	4452      	add	r2, sl
 801be54:	4299      	cmp	r1, r3
 801be56:	b280      	uxth	r0, r0
 801be58:	b292      	uxth	r2, r2
 801be5a:	468c      	mov	ip, r1
 801be5c:	fa0f fa82 	sxth.w	sl, r2
 801be60:	bfb8      	it	lt
 801be62:	469c      	movlt	ip, r3
 801be64:	b203      	sxth	r3, r0
 801be66:	4553      	cmp	r3, sl
 801be68:	bfb8      	it	lt
 801be6a:	4602      	movlt	r2, r0
 801be6c:	eba2 020e 	sub.w	r2, r2, lr
 801be70:	f8ad 2020 	strh.w	r2, [sp, #32]
 801be74:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801be78:	9b02      	ldr	r3, [sp, #8]
 801be7a:	f8ad e01c 	strh.w	lr, [sp, #28]
 801be7e:	4411      	add	r1, r2
 801be80:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801be84:	f8ad c01e 	strh.w	ip, [sp, #30]
 801be88:	4413      	add	r3, r2
 801be8a:	b289      	uxth	r1, r1
 801be8c:	b29b      	uxth	r3, r3
 801be8e:	b208      	sxth	r0, r1
 801be90:	b21a      	sxth	r2, r3
 801be92:	4290      	cmp	r0, r2
 801be94:	bfb8      	it	lt
 801be96:	460b      	movlt	r3, r1
 801be98:	eba3 030c 	sub.w	r3, r3, ip
 801be9c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801bea0:	a807      	add	r0, sp, #28
 801bea2:	f7fa fcc0 	bl	8016826 <_ZNK8touchgfx4Rect7isEmptyEv>
 801bea6:	b920      	cbnz	r0, 801beb2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 801bea8:	6823      	ldr	r3, [r4, #0]
 801beaa:	a907      	add	r1, sp, #28
 801beac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801beae:	4620      	mov	r0, r4
 801beb0:	4798      	blx	r3
 801beb2:	3701      	adds	r7, #1
 801beb4:	b2bf      	uxth	r7, r7
 801beb6:	e7a9      	b.n	801be0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 801beb8:	f8d9 0000 	ldr.w	r0, [r9]
 801bebc:	6803      	ldr	r3, [r0, #0]
 801bebe:	2101      	movs	r1, #1
 801bec0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801bec4:	4798      	blx	r3
 801bec6:	e773      	b.n	801bdb0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 801bec8:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801becc:	e7e8      	b.n	801bea0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 801bece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bed0:	4798      	blx	r3
 801bed2:	4b3f      	ldr	r3, [pc, #252]	; (801bfd0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801bed4:	781b      	ldrb	r3, [r3, #0]
 801bed6:	2b00      	cmp	r3, #0
 801bed8:	f43f af29 	beq.w	801bd2e <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801bedc:	2300      	movs	r3, #0
 801bede:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 801bee2:	882b      	ldrh	r3, [r5, #0]
 801bee4:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801bee8:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801beec:	42ab      	cmp	r3, r5
 801beee:	f4bf af1e 	bcs.w	801bd2e <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801bef2:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 801bef6:	2907      	cmp	r1, #7
 801bef8:	d814      	bhi.n	801bf24 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 801befa:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801befe:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 801bf02:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 801bf06:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 801bf0a:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801bf0e:	1c4a      	adds	r2, r1, #1
 801bf10:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 801bf14:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801bf18:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 801bf1c:	f8a2 c002 	strh.w	ip, [r2, #2]
 801bf20:	8097      	strh	r7, [r2, #4]
 801bf22:	80d6      	strh	r6, [r2, #6]
 801bf24:	3301      	adds	r3, #1
 801bf26:	b29b      	uxth	r3, r3
 801bf28:	e7e0      	b.n	801beec <_ZN8touchgfx11Application15drawCachedAreasEv+0x278>
 801bf2a:	2b02      	cmp	r3, #2
 801bf2c:	f040 8133 	bne.w	801c196 <_ZN8touchgfx11Application15drawCachedAreasEv+0x522>
 801bf30:	4b28      	ldr	r3, [pc, #160]	; (801bfd4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 801bf32:	781b      	ldrb	r3, [r3, #0]
 801bf34:	2b01      	cmp	r3, #1
 801bf36:	f104 0aac 	add.w	sl, r4, #172	; 0xac
 801bf3a:	f000 8098 	beq.w	801c06e <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 801bf3e:	882a      	ldrh	r2, [r5, #0]
 801bf40:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	; 0xec
 801bf44:	3201      	adds	r2, #1
 801bf46:	b292      	uxth	r2, r2
 801bf48:	2900      	cmp	r1, #0
 801bf4a:	d0c2      	beq.n	801bed2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 801bf4c:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	; 0xae
 801bf50:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 801bf54:	441e      	add	r6, r3
 801bf56:	b236      	sxth	r6, r6
 801bf58:	4694      	mov	ip, r2
 801bf5a:	f04f 0900 	mov.w	r9, #0
 801bf5e:	fa1f f38c 	uxth.w	r3, ip
 801bf62:	4299      	cmp	r1, r3
 801bf64:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 801bf68:	f240 80bf 	bls.w	801c0ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x476>
 801bf6c:	4427      	add	r7, r4
 801bf6e:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801bf72:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 801bf76:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	; 0xae
 801bf7a:	4283      	cmp	r3, r0
 801bf7c:	f340 80a1 	ble.w	801c0c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x44e>
 801bf80:	f8be 60b2 	ldrh.w	r6, [lr, #178]	; 0xb2
 801bf84:	4406      	add	r6, r0
 801bf86:	b236      	sxth	r6, r6
 801bf88:	429e      	cmp	r6, r3
 801bf8a:	bfa8      	it	ge
 801bf8c:	461e      	movge	r6, r3
 801bf8e:	46e1      	mov	r9, ip
 801bf90:	f10c 0c01 	add.w	ip, ip, #1
 801bf94:	e7e3      	b.n	801bf5e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ea>
 801bf96:	d10a      	bne.n	801bfae <_ZN8touchgfx11Application15drawCachedAreasEv+0x33a>
 801bf98:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	; 0xb2
 801bf9c:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	; 0xb2
 801bfa0:	4562      	cmp	r2, ip
 801bfa2:	bfb8      	it	lt
 801bfa4:	4662      	movlt	r2, ip
 801bfa6:	4288      	cmp	r0, r1
 801bfa8:	bfb8      	it	lt
 801bfaa:	461f      	movlt	r7, r3
 801bfac:	e087      	b.n	801c0be <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 801bfae:	428a      	cmp	r2, r1
 801bfb0:	bfb8      	it	lt
 801bfb2:	460a      	movlt	r2, r1
 801bfb4:	e083      	b.n	801c0be <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 801bfb6:	bf00      	nop
 801bfb8:	2000af88 	.word	0x2000af88
 801bfbc:	2000af94 	.word	0x2000af94
 801bfc0:	20000038 	.word	0x20000038
 801bfc4:	2000af48 	.word	0x2000af48
 801bfc8:	2000af3e 	.word	0x2000af3e
 801bfcc:	2000af3c 	.word	0x2000af3c
 801bfd0:	2000af46 	.word	0x2000af46
 801bfd4:	2000af40 	.word	0x2000af40
 801bfd8:	19a1      	adds	r1, r4, r6
 801bfda:	ab07      	add	r3, sp, #28
 801bfdc:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801bfe0:	6849      	ldr	r1, [r1, #4]
 801bfe2:	c303      	stmia	r3!, {r0, r1}
 801bfe4:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801bfe8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801bfec:	2b13      	cmp	r3, #19
 801bfee:	bfd8      	it	le
 801bff0:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801bff4:	f8ad 201c 	strh.w	r2, [sp, #28]
 801bff8:	440b      	add	r3, r1
 801bffa:	1a9b      	subs	r3, r3, r2
 801bffc:	a807      	add	r0, sp, #28
 801bffe:	f8ad 3020 	strh.w	r3, [sp, #32]
 801c002:	f7fe ffad 	bl	801af60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c006:	a807      	add	r0, sp, #28
 801c008:	f7fa fc0d 	bl	8016826 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c00c:	bb78      	cbnz	r0, 801c06e <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 801c00e:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801c012:	f8d9 0000 	ldr.w	r0, [r9]
 801c016:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801c01a:	f8d0 e000 	ldr.w	lr, [r0]
 801c01e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801c022:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801c026:	f1bc 0f14 	cmp.w	ip, #20
 801c02a:	bfa8      	it	ge
 801c02c:	f04f 0c14 	movge.w	ip, #20
 801c030:	fa1f fc8c 	uxth.w	ip, ip
 801c034:	f8cd c000 	str.w	ip, [sp]
 801c038:	f8de b090 	ldr.w	fp, [lr, #144]	; 0x90
 801c03c:	47d8      	blx	fp
 801c03e:	4683      	mov	fp, r0
 801c040:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801c044:	a807      	add	r0, sp, #28
 801c046:	f7fe ff71 	bl	801af2c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801c04a:	6823      	ldr	r3, [r4, #0]
 801c04c:	4426      	add	r6, r4
 801c04e:	4620      	mov	r0, r4
 801c050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c052:	a907      	add	r1, sp, #28
 801c054:	4798      	blx	r3
 801c056:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	; 0xb0
 801c05a:	eba0 000b 	sub.w	r0, r0, fp
 801c05e:	b200      	sxth	r0, r0
 801c060:	f8a6 00b0 	strh.w	r0, [r6, #176]	; 0xb0
 801c064:	b918      	cbnz	r0, 801c06e <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 801c066:	b2b9      	uxth	r1, r7
 801c068:	4650      	mov	r0, sl
 801c06a:	f7ff fa79 	bl	801b560 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c06e:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 801c072:	f1bb 0f00 	cmp.w	fp, #0
 801c076:	f43f af2c 	beq.w	801bed2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 801c07a:	882b      	ldrh	r3, [r5, #0]
 801c07c:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 801c080:	3301      	adds	r3, #1
 801c082:	b29b      	uxth	r3, r3
 801c084:	2700      	movs	r7, #0
 801c086:	b299      	uxth	r1, r3
 801c088:	458b      	cmp	fp, r1
 801c08a:	ea4f 06c7 	mov.w	r6, r7, lsl #3
 801c08e:	d9a3      	bls.n	801bfd8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>
 801c090:	4426      	add	r6, r4
 801c092:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 801c096:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	; 0xac
 801c09a:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	; 0xb0
 801c09e:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	; 0xac
 801c0a2:	4408      	add	r0, r1
 801c0a4:	f8be 10b0 	ldrh.w	r1, [lr, #176]	; 0xb0
 801c0a8:	4461      	add	r1, ip
 801c0aa:	b200      	sxth	r0, r0
 801c0ac:	b209      	sxth	r1, r1
 801c0ae:	4288      	cmp	r0, r1
 801c0b0:	f6bf af71 	bge.w	801bf96 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 801c0b4:	4584      	cmp	ip, r0
 801c0b6:	4662      	mov	r2, ip
 801c0b8:	461f      	mov	r7, r3
 801c0ba:	bfb8      	it	lt
 801c0bc:	4602      	movlt	r2, r0
 801c0be:	3301      	adds	r3, #1
 801c0c0:	e7e1      	b.n	801c086 <_ZN8touchgfx11Application15drawCachedAreasEv+0x412>
 801c0c2:	d10e      	bne.n	801c0e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x46e>
 801c0c4:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 801c0c8:	f8be e0b2 	ldrh.w	lr, [lr, #178]	; 0xb2
 801c0cc:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 801c0d0:	4473      	add	r3, lr
 801c0d2:	b21b      	sxth	r3, r3
 801c0d4:	429e      	cmp	r6, r3
 801c0d6:	bfa8      	it	ge
 801c0d8:	461e      	movge	r6, r3
 801c0da:	4287      	cmp	r7, r0
 801c0dc:	bfb8      	it	lt
 801c0de:	46e1      	movlt	r9, ip
 801c0e0:	e756      	b.n	801bf90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 801c0e2:	4286      	cmp	r6, r0
 801c0e4:	bfa8      	it	ge
 801c0e6:	4606      	movge	r6, r0
 801c0e8:	e752      	b.n	801bf90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 801c0ea:	eb0a 0007 	add.w	r0, sl, r7
 801c0ee:	4427      	add	r7, r4
 801c0f0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801c0f4:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	; 0xb2
 801c0f8:	f1bb 0f13 	cmp.w	fp, #19
 801c0fc:	bfde      	ittt	le
 801c0fe:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	; 0xae
 801c102:	445e      	addle	r6, fp
 801c104:	b236      	sxthle	r6, r6
 801c106:	f7fa fb8e 	bl	8016826 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c10a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801c10e:	2800      	cmp	r0, #0
 801c110:	f47f af1a 	bne.w	801bf48 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d4>
 801c114:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 801c118:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801c11c:	482a      	ldr	r0, [pc, #168]	; (801c1c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x554>)
 801c11e:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 801c122:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 801c126:	6800      	ldr	r0, [r0, #0]
 801c128:	f8ad 101c 	strh.w	r1, [sp, #28]
 801c12c:	1ab6      	subs	r6, r6, r2
 801c12e:	2e14      	cmp	r6, #20
 801c130:	f8ad 201e 	strh.w	r2, [sp, #30]
 801c134:	f8ad 3020 	strh.w	r3, [sp, #32]
 801c138:	bfa8      	it	ge
 801c13a:	2614      	movge	r6, #20
 801c13c:	f8d0 c000 	ldr.w	ip, [r0]
 801c140:	b2b6      	uxth	r6, r6
 801c142:	fa1f fb8b 	uxth.w	fp, fp
 801c146:	455e      	cmp	r6, fp
 801c148:	bf94      	ite	ls
 801c14a:	9600      	strls	r6, [sp, #0]
 801c14c:	f8cd b000 	strhi.w	fp, [sp]
 801c150:	b292      	uxth	r2, r2
 801c152:	f8dc 6090 	ldr.w	r6, [ip, #144]	; 0x90
 801c156:	b29b      	uxth	r3, r3
 801c158:	b289      	uxth	r1, r1
 801c15a:	47b0      	blx	r6
 801c15c:	6823      	ldr	r3, [r4, #0]
 801c15e:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801c162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c164:	a907      	add	r1, sp, #28
 801c166:	4620      	mov	r0, r4
 801c168:	4798      	blx	r3
 801c16a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801c16e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801c172:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 801c176:	1a5b      	subs	r3, r3, r1
 801c178:	440a      	add	r2, r1
 801c17a:	b21b      	sxth	r3, r3
 801c17c:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 801c180:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801c184:	2b00      	cmp	r3, #0
 801c186:	f47f aeda 	bne.w	801bf3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801c18a:	fa1f f189 	uxth.w	r1, r9
 801c18e:	4650      	mov	r0, sl
 801c190:	f7ff f9e6 	bl	801b560 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c194:	e6d3      	b.n	801bf3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801c196:	882e      	ldrh	r6, [r5, #0]
 801c198:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801c19c:	42b3      	cmp	r3, r6
 801c19e:	f67f ae98 	bls.w	801bed2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 801c1a2:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 801c1a6:	ab07      	add	r3, sp, #28
 801c1a8:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801c1ac:	6851      	ldr	r1, [r2, #4]
 801c1ae:	c303      	stmia	r3!, {r0, r1}
 801c1b0:	a807      	add	r0, sp, #28
 801c1b2:	f7fa fb38 	bl	8016826 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c1b6:	b920      	cbnz	r0, 801c1c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x54e>
 801c1b8:	6823      	ldr	r3, [r4, #0]
 801c1ba:	a907      	add	r1, sp, #28
 801c1bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c1be:	4620      	mov	r0, r4
 801c1c0:	4798      	blx	r3
 801c1c2:	3601      	adds	r6, #1
 801c1c4:	b2b6      	uxth	r6, r6
 801c1c6:	e7e7      	b.n	801c198 <_ZN8touchgfx11Application15drawCachedAreasEv+0x524>
 801c1c8:	2000af48 	.word	0x2000af48

0801c1cc <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801c1cc:	4b03      	ldr	r3, [pc, #12]	; (801c1dc <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801c1ce:	2200      	movs	r2, #0
 801c1d0:	801a      	strh	r2, [r3, #0]
 801c1d2:	805a      	strh	r2, [r3, #2]
 801c1d4:	809a      	strh	r2, [r3, #4]
 801c1d6:	80da      	strh	r2, [r3, #6]
 801c1d8:	4770      	bx	lr
 801c1da:	bf00      	nop
 801c1dc:	2000af94 	.word	0x2000af94

0801c1e0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801c1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1e4:	4606      	mov	r6, r0
 801c1e6:	b09d      	sub	sp, #116	; 0x74
 801c1e8:	a803      	add	r0, sp, #12
 801c1ea:	4614      	mov	r4, r2
 801c1ec:	468a      	mov	sl, r1
 801c1ee:	461d      	mov	r5, r3
 801c1f0:	f000 fe4d 	bl	801ce8e <_ZN8touchgfx12TextProviderC1Ev>
 801c1f4:	6833      	ldr	r3, [r6, #0]
 801c1f6:	4630      	mov	r0, r6
 801c1f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c1fa:	4798      	blx	r3
 801c1fc:	6833      	ldr	r3, [r6, #0]
 801c1fe:	4607      	mov	r7, r0
 801c200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c202:	4630      	mov	r0, r6
 801c204:	4798      	blx	r3
 801c206:	462a      	mov	r2, r5
 801c208:	9000      	str	r0, [sp, #0]
 801c20a:	4621      	mov	r1, r4
 801c20c:	463b      	mov	r3, r7
 801c20e:	a803      	add	r0, sp, #12
 801c210:	f000 fe90 	bl	801cf34 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c214:	2500      	movs	r5, #0
 801c216:	462c      	mov	r4, r5
 801c218:	46a9      	mov	r9, r5
 801c21a:	46a8      	mov	r8, r5
 801c21c:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801c220:	2300      	movs	r3, #0
 801c222:	9302      	str	r3, [sp, #8]
 801c224:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801c228:	429c      	cmp	r4, r3
 801c22a:	d002      	beq.n	801c232 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801c22c:	455c      	cmp	r4, fp
 801c22e:	bf18      	it	ne
 801c230:	4625      	movne	r5, r4
 801c232:	ab02      	add	r3, sp, #8
 801c234:	4632      	mov	r2, r6
 801c236:	4651      	mov	r1, sl
 801c238:	a803      	add	r0, sp, #12
 801c23a:	f001 f96d 	bl	801d518 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c23e:	4604      	mov	r4, r0
 801c240:	b108      	cbz	r0, 801c246 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801c242:	280a      	cmp	r0, #10
 801c244:	d10a      	bne.n	801c25c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801c246:	45c1      	cmp	r9, r8
 801c248:	bf38      	it	cc
 801c24a:	46c1      	movcc	r9, r8
 801c24c:	f04f 0800 	mov.w	r8, #0
 801c250:	2c00      	cmp	r4, #0
 801c252:	d1e5      	bne.n	801c220 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801c254:	4648      	mov	r0, r9
 801c256:	b01d      	add	sp, #116	; 0x74
 801c258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c25c:	9a02      	ldr	r2, [sp, #8]
 801c25e:	2a00      	cmp	r2, #0
 801c260:	d0de      	beq.n	801c220 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801c262:	7b57      	ldrb	r7, [r2, #13]
 801c264:	6833      	ldr	r3, [r6, #0]
 801c266:	8894      	ldrh	r4, [r2, #4]
 801c268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c26a:	007f      	lsls	r7, r7, #1
 801c26c:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801c270:	7a97      	ldrb	r7, [r2, #10]
 801c272:	4629      	mov	r1, r5
 801c274:	4307      	orrs	r7, r0
 801c276:	4630      	mov	r0, r6
 801c278:	4798      	blx	r3
 801c27a:	4438      	add	r0, r7
 801c27c:	4480      	add	r8, r0
 801c27e:	fa1f f888 	uxth.w	r8, r8
 801c282:	e7e5      	b.n	801c250 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801c284 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801c284:	b508      	push	{r3, lr}
 801c286:	6803      	ldr	r3, [r0, #0]
 801c288:	68db      	ldr	r3, [r3, #12]
 801c28a:	4798      	blx	r3
 801c28c:	b128      	cbz	r0, 801c29a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801c28e:	7b43      	ldrb	r3, [r0, #13]
 801c290:	7a80      	ldrb	r0, [r0, #10]
 801c292:	005b      	lsls	r3, r3, #1
 801c294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c298:	4318      	orrs	r0, r3
 801c29a:	bd08      	pop	{r3, pc}

0801c29c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801c29c:	b40e      	push	{r1, r2, r3}
 801c29e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c2a0:	b09e      	sub	sp, #120	; 0x78
 801c2a2:	ab23      	add	r3, sp, #140	; 0x8c
 801c2a4:	4605      	mov	r5, r0
 801c2a6:	f853 4b04 	ldr.w	r4, [r3], #4
 801c2aa:	9303      	str	r3, [sp, #12]
 801c2ac:	a805      	add	r0, sp, #20
 801c2ae:	f000 fdee 	bl	801ce8e <_ZN8touchgfx12TextProviderC1Ev>
 801c2b2:	682b      	ldr	r3, [r5, #0]
 801c2b4:	4628      	mov	r0, r5
 801c2b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c2b8:	4798      	blx	r3
 801c2ba:	682b      	ldr	r3, [r5, #0]
 801c2bc:	4606      	mov	r6, r0
 801c2be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c2c0:	4628      	mov	r0, r5
 801c2c2:	4798      	blx	r3
 801c2c4:	4633      	mov	r3, r6
 801c2c6:	ae1e      	add	r6, sp, #120	; 0x78
 801c2c8:	4621      	mov	r1, r4
 801c2ca:	9000      	str	r0, [sp, #0]
 801c2cc:	9a03      	ldr	r2, [sp, #12]
 801c2ce:	2400      	movs	r4, #0
 801c2d0:	a805      	add	r0, sp, #20
 801c2d2:	f000 fe2f 	bl	801cf34 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c2d6:	f846 4d68 	str.w	r4, [r6, #-104]!
 801c2da:	462a      	mov	r2, r5
 801c2dc:	4633      	mov	r3, r6
 801c2de:	4621      	mov	r1, r4
 801c2e0:	a805      	add	r0, sp, #20
 801c2e2:	f001 f919 	bl	801d518 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c2e6:	b1f0      	cbz	r0, 801c326 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 801c2e8:	280a      	cmp	r0, #10
 801c2ea:	d018      	beq.n	801c31e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801c2ec:	9f04      	ldr	r7, [sp, #16]
 801c2ee:	b1b7      	cbz	r7, 801c31e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801c2f0:	7b78      	ldrb	r0, [r7, #13]
 801c2f2:	7a3b      	ldrb	r3, [r7, #8]
 801c2f4:	88ea      	ldrh	r2, [r5, #6]
 801c2f6:	00c1      	lsls	r1, r0, #3
 801c2f8:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801c2fc:	4319      	orrs	r1, r3
 801c2fe:	0643      	lsls	r3, r0, #25
 801c300:	bf44      	itt	mi
 801c302:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801c306:	b219      	sxthmi	r1, r3
 801c308:	0100      	lsls	r0, r0, #4
 801c30a:	79fb      	ldrb	r3, [r7, #7]
 801c30c:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801c310:	4303      	orrs	r3, r0
 801c312:	4413      	add	r3, r2
 801c314:	1a5b      	subs	r3, r3, r1
 801c316:	b21b      	sxth	r3, r3
 801c318:	429c      	cmp	r4, r3
 801c31a:	bfb8      	it	lt
 801c31c:	461c      	movlt	r4, r3
 801c31e:	4633      	mov	r3, r6
 801c320:	462a      	mov	r2, r5
 801c322:	2100      	movs	r1, #0
 801c324:	e7dc      	b.n	801c2e0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801c326:	b2a0      	uxth	r0, r4
 801c328:	b01e      	add	sp, #120	; 0x78
 801c32a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c32e:	b003      	add	sp, #12
 801c330:	4770      	bx	lr

0801c332 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801c332:	7a43      	ldrb	r3, [r0, #9]
 801c334:	8880      	ldrh	r0, [r0, #4]
 801c336:	4418      	add	r0, r3
 801c338:	b280      	uxth	r0, r0
 801c33a:	4770      	bx	lr

0801c33c <_ZNK8touchgfx4Font13getFontHeightEv>:
 801c33c:	6803      	ldr	r3, [r0, #0]
 801c33e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c340:	4718      	bx	r3

0801c342 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801c342:	b40e      	push	{r1, r2, r3}
 801c344:	b570      	push	{r4, r5, r6, lr}
 801c346:	b09d      	sub	sp, #116	; 0x74
 801c348:	ab21      	add	r3, sp, #132	; 0x84
 801c34a:	4604      	mov	r4, r0
 801c34c:	f853 5b04 	ldr.w	r5, [r3], #4
 801c350:	9302      	str	r3, [sp, #8]
 801c352:	a803      	add	r0, sp, #12
 801c354:	f000 fd9b 	bl	801ce8e <_ZN8touchgfx12TextProviderC1Ev>
 801c358:	6823      	ldr	r3, [r4, #0]
 801c35a:	4620      	mov	r0, r4
 801c35c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c35e:	4798      	blx	r3
 801c360:	6823      	ldr	r3, [r4, #0]
 801c362:	4606      	mov	r6, r0
 801c364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c366:	4620      	mov	r0, r4
 801c368:	4798      	blx	r3
 801c36a:	4633      	mov	r3, r6
 801c36c:	9000      	str	r0, [sp, #0]
 801c36e:	9a02      	ldr	r2, [sp, #8]
 801c370:	4629      	mov	r1, r5
 801c372:	a803      	add	r0, sp, #12
 801c374:	f000 fdde 	bl	801cf34 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c378:	a803      	add	r0, sp, #12
 801c37a:	f001 f94f 	bl	801d61c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c37e:	2401      	movs	r4, #1
 801c380:	b2a3      	uxth	r3, r4
 801c382:	b140      	cbz	r0, 801c396 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 801c384:	280a      	cmp	r0, #10
 801c386:	bf08      	it	eq
 801c388:	3301      	addeq	r3, #1
 801c38a:	a803      	add	r0, sp, #12
 801c38c:	bf08      	it	eq
 801c38e:	b21c      	sxtheq	r4, r3
 801c390:	f001 f944 	bl	801d61c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c394:	e7f4      	b.n	801c380 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801c396:	4618      	mov	r0, r3
 801c398:	b01d      	add	sp, #116	; 0x74
 801c39a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c39e:	b003      	add	sp, #12
 801c3a0:	4770      	bx	lr

0801c3a2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801c3a2:	b40e      	push	{r1, r2, r3}
 801c3a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c3a6:	b09e      	sub	sp, #120	; 0x78
 801c3a8:	ab23      	add	r3, sp, #140	; 0x8c
 801c3aa:	4604      	mov	r4, r0
 801c3ac:	f853 5b04 	ldr.w	r5, [r3], #4
 801c3b0:	9303      	str	r3, [sp, #12]
 801c3b2:	a805      	add	r0, sp, #20
 801c3b4:	f000 fd6b 	bl	801ce8e <_ZN8touchgfx12TextProviderC1Ev>
 801c3b8:	6823      	ldr	r3, [r4, #0]
 801c3ba:	4620      	mov	r0, r4
 801c3bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c3be:	4798      	blx	r3
 801c3c0:	6823      	ldr	r3, [r4, #0]
 801c3c2:	4606      	mov	r6, r0
 801c3c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c3c6:	4620      	mov	r0, r4
 801c3c8:	4798      	blx	r3
 801c3ca:	4633      	mov	r3, r6
 801c3cc:	4629      	mov	r1, r5
 801c3ce:	9000      	str	r0, [sp, #0]
 801c3d0:	9a03      	ldr	r2, [sp, #12]
 801c3d2:	a805      	add	r0, sp, #20
 801c3d4:	ad1e      	add	r5, sp, #120	; 0x78
 801c3d6:	f000 fdad 	bl	801cf34 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c3da:	2100      	movs	r1, #0
 801c3dc:	f845 1d68 	str.w	r1, [r5, #-104]!
 801c3e0:	4622      	mov	r2, r4
 801c3e2:	462b      	mov	r3, r5
 801c3e4:	a805      	add	r0, sp, #20
 801c3e6:	f001 f897 	bl	801d518 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c3ea:	f647 76ff 	movw	r6, #32767	; 0x7fff
 801c3ee:	b1d8      	cbz	r0, 801c428 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801c3f0:	280a      	cmp	r0, #10
 801c3f2:	d012      	beq.n	801c41a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801c3f4:	9804      	ldr	r0, [sp, #16]
 801c3f6:	b180      	cbz	r0, 801c41a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801c3f8:	7b47      	ldrb	r7, [r0, #13]
 801c3fa:	88e2      	ldrh	r2, [r4, #6]
 801c3fc:	00fb      	lsls	r3, r7, #3
 801c3fe:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801c402:	7a03      	ldrb	r3, [r0, #8]
 801c404:	430b      	orrs	r3, r1
 801c406:	0679      	lsls	r1, r7, #25
 801c408:	bf44      	itt	mi
 801c40a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c40e:	b21b      	sxthmi	r3, r3
 801c410:	1ad3      	subs	r3, r2, r3
 801c412:	b21b      	sxth	r3, r3
 801c414:	429e      	cmp	r6, r3
 801c416:	bfa8      	it	ge
 801c418:	461e      	movge	r6, r3
 801c41a:	462b      	mov	r3, r5
 801c41c:	4622      	mov	r2, r4
 801c41e:	2100      	movs	r1, #0
 801c420:	a805      	add	r0, sp, #20
 801c422:	f001 f879 	bl	801d518 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c426:	e7e2      	b.n	801c3ee <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801c428:	4630      	mov	r0, r6
 801c42a:	b01e      	add	sp, #120	; 0x78
 801c42c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c430:	b003      	add	sp, #12
 801c432:	4770      	bx	lr

0801c434 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801c434:	b513      	push	{r0, r1, r4, lr}
 801c436:	6803      	ldr	r3, [r0, #0]
 801c438:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801c43c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c440:	f8ad 1004 	strh.w	r1, [sp, #4]
 801c444:	2400      	movs	r4, #0
 801c446:	9400      	str	r4, [sp, #0]
 801c448:	f8ad 2006 	strh.w	r2, [sp, #6]
 801c44c:	691b      	ldr	r3, [r3, #16]
 801c44e:	4669      	mov	r1, sp
 801c450:	4798      	blx	r3
 801c452:	b002      	add	sp, #8
 801c454:	bd10      	pop	{r4, pc}

0801c456 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801c456:	b538      	push	{r3, r4, r5, lr}
 801c458:	680b      	ldr	r3, [r1, #0]
 801c45a:	460c      	mov	r4, r1
 801c45c:	68db      	ldr	r3, [r3, #12]
 801c45e:	4605      	mov	r5, r0
 801c460:	4798      	blx	r3
 801c462:	6823      	ldr	r3, [r4, #0]
 801c464:	4620      	mov	r0, r4
 801c466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c468:	4629      	mov	r1, r5
 801c46a:	4798      	blx	r3
 801c46c:	4628      	mov	r0, r5
 801c46e:	bd38      	pop	{r3, r4, r5, pc}

0801c470 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801c470:	b410      	push	{r4}
 801c472:	880a      	ldrh	r2, [r1, #0]
 801c474:	8884      	ldrh	r4, [r0, #4]
 801c476:	4422      	add	r2, r4
 801c478:	800a      	strh	r2, [r1, #0]
 801c47a:	88c4      	ldrh	r4, [r0, #6]
 801c47c:	884a      	ldrh	r2, [r1, #2]
 801c47e:	4422      	add	r2, r4
 801c480:	804a      	strh	r2, [r1, #2]
 801c482:	6940      	ldr	r0, [r0, #20]
 801c484:	b120      	cbz	r0, 801c490 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801c486:	6803      	ldr	r3, [r0, #0]
 801c488:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c48c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c48e:	4718      	bx	r3
 801c490:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c494:	4770      	bx	lr

0801c496 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801c496:	b570      	push	{r4, r5, r6, lr}
 801c498:	8882      	ldrh	r2, [r0, #4]
 801c49a:	880b      	ldrh	r3, [r1, #0]
 801c49c:	4413      	add	r3, r2
 801c49e:	800b      	strh	r3, [r1, #0]
 801c4a0:	88c2      	ldrh	r2, [r0, #6]
 801c4a2:	884b      	ldrh	r3, [r1, #2]
 801c4a4:	460c      	mov	r4, r1
 801c4a6:	4413      	add	r3, r2
 801c4a8:	804b      	strh	r3, [r1, #2]
 801c4aa:	4605      	mov	r5, r0
 801c4ac:	1d01      	adds	r1, r0, #4
 801c4ae:	4620      	mov	r0, r4
 801c4b0:	f7fa f976 	bl	80167a0 <_ZN8touchgfx4RectaNERKS0_>
 801c4b4:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801c4b8:	2b00      	cmp	r3, #0
 801c4ba:	dd0b      	ble.n	801c4d4 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c4bc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c4c0:	2b00      	cmp	r3, #0
 801c4c2:	dd07      	ble.n	801c4d4 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c4c4:	6968      	ldr	r0, [r5, #20]
 801c4c6:	b128      	cbz	r0, 801c4d4 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c4c8:	6803      	ldr	r3, [r0, #0]
 801c4ca:	4621      	mov	r1, r4
 801c4cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c4ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c4d2:	4718      	bx	r3
 801c4d4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801c4d8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801c4d8:	b570      	push	{r4, r5, r6, lr}
 801c4da:	8882      	ldrh	r2, [r0, #4]
 801c4dc:	880b      	ldrh	r3, [r1, #0]
 801c4de:	4413      	add	r3, r2
 801c4e0:	800b      	strh	r3, [r1, #0]
 801c4e2:	88c2      	ldrh	r2, [r0, #6]
 801c4e4:	884b      	ldrh	r3, [r1, #2]
 801c4e6:	460c      	mov	r4, r1
 801c4e8:	4413      	add	r3, r2
 801c4ea:	804b      	strh	r3, [r1, #2]
 801c4ec:	4605      	mov	r5, r0
 801c4ee:	1d01      	adds	r1, r0, #4
 801c4f0:	4620      	mov	r0, r4
 801c4f2:	f7fa f955 	bl	80167a0 <_ZN8touchgfx4RectaNERKS0_>
 801c4f6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801c4fa:	2b00      	cmp	r3, #0
 801c4fc:	dd19      	ble.n	801c532 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801c4fe:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c502:	2b00      	cmp	r3, #0
 801c504:	dd15      	ble.n	801c532 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801c506:	6968      	ldr	r0, [r5, #20]
 801c508:	b128      	cbz	r0, 801c516 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801c50a:	6803      	ldr	r3, [r0, #0]
 801c50c:	4621      	mov	r1, r4
 801c50e:	691b      	ldr	r3, [r3, #16]
 801c510:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c514:	4718      	bx	r3
 801c516:	4b07      	ldr	r3, [pc, #28]	; (801c534 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801c518:	681b      	ldr	r3, [r3, #0]
 801c51a:	3304      	adds	r3, #4
 801c51c:	429d      	cmp	r5, r3
 801c51e:	d108      	bne.n	801c532 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801c520:	f7fe fec8 	bl	801b2b4 <_ZN8touchgfx11Application11getInstanceEv>
 801c524:	6803      	ldr	r3, [r0, #0]
 801c526:	6821      	ldr	r1, [r4, #0]
 801c528:	6862      	ldr	r2, [r4, #4]
 801c52a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c52c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c530:	4718      	bx	r3
 801c532:	bd70      	pop	{r4, r5, r6, pc}
 801c534:	2000af8c 	.word	0x2000af8c

0801c538 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801c538:	b570      	push	{r4, r5, r6, lr}
 801c53a:	4604      	mov	r4, r0
 801c53c:	4616      	mov	r6, r2
 801c53e:	460d      	mov	r5, r1
 801c540:	b901      	cbnz	r1, 801c544 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801c542:	b192      	cbz	r2, 801c56a <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801c544:	6823      	ldr	r3, [r4, #0]
 801c546:	4620      	mov	r0, r4
 801c548:	699b      	ldr	r3, [r3, #24]
 801c54a:	4798      	blx	r3
 801c54c:	88e2      	ldrh	r2, [r4, #6]
 801c54e:	88a1      	ldrh	r1, [r4, #4]
 801c550:	4432      	add	r2, r6
 801c552:	4429      	add	r1, r5
 801c554:	4620      	mov	r0, r4
 801c556:	b212      	sxth	r2, r2
 801c558:	b209      	sxth	r1, r1
 801c55a:	f7f6 fc4a 	bl	8012df2 <_ZN8touchgfx8Drawable5setXYEss>
 801c55e:	6823      	ldr	r3, [r4, #0]
 801c560:	4620      	mov	r0, r4
 801c562:	699b      	ldr	r3, [r3, #24]
 801c564:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c568:	4718      	bx	r3
 801c56a:	bd70      	pop	{r4, r5, r6, pc}

0801c56c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801c56c:	b510      	push	{r4, lr}
 801c56e:	4604      	mov	r4, r0
 801c570:	4608      	mov	r0, r1
 801c572:	2300      	movs	r3, #0
 801c574:	8023      	strh	r3, [r4, #0]
 801c576:	8063      	strh	r3, [r4, #2]
 801c578:	6803      	ldr	r3, [r0, #0]
 801c57a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c57e:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801c582:	80a1      	strh	r1, [r4, #4]
 801c584:	80e2      	strh	r2, [r4, #6]
 801c586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c588:	4621      	mov	r1, r4
 801c58a:	4798      	blx	r3
 801c58c:	4620      	mov	r0, r4
 801c58e:	bd10      	pop	{r4, pc}

0801c590 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801c590:	b530      	push	{r4, r5, lr}
 801c592:	8083      	strh	r3, [r0, #4]
 801c594:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801c598:	80c3      	strh	r3, [r0, #6]
 801c59a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801c59e:	7203      	strb	r3, [r0, #8]
 801c5a0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801c5a4:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801c5a8:	7243      	strb	r3, [r0, #9]
 801c5aa:	7a83      	ldrb	r3, [r0, #10]
 801c5ac:	6141      	str	r1, [r0, #20]
 801c5ae:	f365 0306 	bfi	r3, r5, #0, #7
 801c5b2:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801c5b6:	8302      	strh	r2, [r0, #24]
 801c5b8:	f365 13c7 	bfi	r3, r5, #7, #1
 801c5bc:	7283      	strb	r3, [r0, #10]
 801c5be:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801c5c2:	72c3      	strb	r3, [r0, #11]
 801c5c4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801c5c8:	7303      	strb	r3, [r0, #12]
 801c5ca:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801c5ce:	81c3      	strh	r3, [r0, #14]
 801c5d0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801c5d4:	8203      	strh	r3, [r0, #16]
 801c5d6:	4b01      	ldr	r3, [pc, #4]	; (801c5dc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801c5d8:	6003      	str	r3, [r0, #0]
 801c5da:	bd30      	pop	{r4, r5, pc}
 801c5dc:	0802f7ac 	.word	0x0802f7ac

0801c5e0 <_ZNK8touchgfx9ConstFont4findEt>:
 801c5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c5e2:	6944      	ldr	r4, [r0, #20]
 801c5e4:	b3bc      	cbz	r4, 801c656 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c5e6:	88a3      	ldrh	r3, [r4, #4]
 801c5e8:	8b02      	ldrh	r2, [r0, #24]
 801c5ea:	1acb      	subs	r3, r1, r3
 801c5ec:	f102 32ff 	add.w	r2, r2, #4294967295
 801c5f0:	d431      	bmi.n	801c656 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c5f2:	4293      	cmp	r3, r2
 801c5f4:	dd0c      	ble.n	801c610 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801c5f6:	230e      	movs	r3, #14
 801c5f8:	fb03 4302 	mla	r3, r3, r2, r4
 801c5fc:	889b      	ldrh	r3, [r3, #4]
 801c5fe:	1a5b      	subs	r3, r3, r1
 801c600:	1ad3      	subs	r3, r2, r3
 801c602:	429a      	cmp	r2, r3
 801c604:	db27      	blt.n	801c656 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c606:	2b00      	cmp	r3, #0
 801c608:	bfbc      	itt	lt
 801c60a:	2302      	movlt	r3, #2
 801c60c:	fb92 f3f3 	sdivlt	r3, r2, r3
 801c610:	2500      	movs	r5, #0
 801c612:	260e      	movs	r6, #14
 801c614:	4295      	cmp	r5, r2
 801c616:	dc1e      	bgt.n	801c656 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c618:	fb06 4003 	mla	r0, r6, r3, r4
 801c61c:	8887      	ldrh	r7, [r0, #4]
 801c61e:	42b9      	cmp	r1, r7
 801c620:	d01a      	beq.n	801c658 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801c622:	d20d      	bcs.n	801c640 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801c624:	1e5a      	subs	r2, r3, #1
 801c626:	4295      	cmp	r5, r2
 801c628:	dc15      	bgt.n	801c656 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c62a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801c62e:	1a5b      	subs	r3, r3, r1
 801c630:	1ad3      	subs	r3, r2, r3
 801c632:	429a      	cmp	r2, r3
 801c634:	db0f      	blt.n	801c656 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c636:	429d      	cmp	r5, r3
 801c638:	ddec      	ble.n	801c614 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c63a:	1953      	adds	r3, r2, r5
 801c63c:	105b      	asrs	r3, r3, #1
 801c63e:	e7e9      	b.n	801c614 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c640:	1c5d      	adds	r5, r3, #1
 801c642:	42aa      	cmp	r2, r5
 801c644:	db07      	blt.n	801c656 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c646:	8a43      	ldrh	r3, [r0, #18]
 801c648:	1acb      	subs	r3, r1, r3
 801c64a:	442b      	add	r3, r5
 801c64c:	429d      	cmp	r5, r3
 801c64e:	dc02      	bgt.n	801c656 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c650:	429a      	cmp	r2, r3
 801c652:	dadf      	bge.n	801c614 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c654:	e7f1      	b.n	801c63a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801c656:	2000      	movs	r0, #0
 801c658:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c65a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801c65a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c65c:	4604      	mov	r4, r0
 801c65e:	4617      	mov	r7, r2
 801c660:	461e      	mov	r6, r3
 801c662:	b911      	cbnz	r1, 801c66a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801c664:	2500      	movs	r5, #0
 801c666:	4628      	mov	r0, r5
 801c668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c66a:	290a      	cmp	r1, #10
 801c66c:	d0fa      	beq.n	801c664 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c66e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801c672:	4291      	cmp	r1, r2
 801c674:	d0f6      	beq.n	801c664 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c676:	f242 020b 	movw	r2, #8203	; 0x200b
 801c67a:	4291      	cmp	r1, r2
 801c67c:	d0f2      	beq.n	801c664 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c67e:	f7ff ffaf 	bl	801c5e0 <_ZNK8touchgfx9ConstFont4findEt>
 801c682:	4605      	mov	r5, r0
 801c684:	b950      	cbnz	r0, 801c69c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801c686:	6823      	ldr	r3, [r4, #0]
 801c688:	4620      	mov	r0, r4
 801c68a:	691b      	ldr	r3, [r3, #16]
 801c68c:	4798      	blx	r3
 801c68e:	4601      	mov	r1, r0
 801c690:	4620      	mov	r0, r4
 801c692:	f7ff ffa5 	bl	801c5e0 <_ZNK8touchgfx9ConstFont4findEt>
 801c696:	4605      	mov	r5, r0
 801c698:	2800      	cmp	r0, #0
 801c69a:	d0e3      	beq.n	801c664 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c69c:	6823      	ldr	r3, [r4, #0]
 801c69e:	4629      	mov	r1, r5
 801c6a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c6a2:	4620      	mov	r0, r4
 801c6a4:	4798      	blx	r3
 801c6a6:	6038      	str	r0, [r7, #0]
 801c6a8:	6823      	ldr	r3, [r4, #0]
 801c6aa:	4620      	mov	r0, r4
 801c6ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c6ae:	4798      	blx	r3
 801c6b0:	7030      	strb	r0, [r6, #0]
 801c6b2:	e7d8      	b.n	801c666 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801c6b4 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 801c6b4:	b538      	push	{r3, r4, r5, lr}
 801c6b6:	4605      	mov	r5, r0
 801c6b8:	f001 fe5a 	bl	801e370 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c6bc:	4604      	mov	r4, r0
 801c6be:	4628      	mov	r0, r5
 801c6c0:	f001 fd9a 	bl	801e1f8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801c6c4:	2800      	cmp	r0, #0
 801c6c6:	bf14      	ite	ne
 801c6c8:	2002      	movne	r0, #2
 801c6ca:	2000      	moveq	r0, #0
 801c6cc:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801c6d0:	b280      	uxth	r0, r0
 801c6d2:	bd38      	pop	{r3, r4, r5, pc}

0801c6d4 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 801c6d4:	b538      	push	{r3, r4, r5, lr}
 801c6d6:	4605      	mov	r5, r0
 801c6d8:	f001 fe4a 	bl	801e370 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c6dc:	4604      	mov	r4, r0
 801c6de:	4628      	mov	r0, r5
 801c6e0:	f001 fd8a 	bl	801e1f8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801c6e4:	2800      	cmp	r0, #0
 801c6e6:	bf14      	ite	ne
 801c6e8:	2002      	movne	r0, #2
 801c6ea:	2000      	moveq	r0, #0
 801c6ec:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801c6f0:	f040 0001 	orr.w	r0, r0, #1
 801c6f4:	b280      	uxth	r0, r0
 801c6f6:	bd38      	pop	{r3, r4, r5, pc}

0801c6f8 <_ZN8touchgfx4clzuEm>:
 801c6f8:	4603      	mov	r3, r0
 801c6fa:	b1c8      	cbz	r0, 801c730 <_ZN8touchgfx4clzuEm+0x38>
 801c6fc:	0c02      	lsrs	r2, r0, #16
 801c6fe:	0412      	lsls	r2, r2, #16
 801c700:	b9a2      	cbnz	r2, 801c72c <_ZN8touchgfx4clzuEm+0x34>
 801c702:	0403      	lsls	r3, r0, #16
 801c704:	2010      	movs	r0, #16
 801c706:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801c70a:	bf04      	itt	eq
 801c70c:	021b      	lsleq	r3, r3, #8
 801c70e:	3008      	addeq	r0, #8
 801c710:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801c714:	bf04      	itt	eq
 801c716:	011b      	lsleq	r3, r3, #4
 801c718:	3004      	addeq	r0, #4
 801c71a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801c71e:	bf04      	itt	eq
 801c720:	009b      	lsleq	r3, r3, #2
 801c722:	3002      	addeq	r0, #2
 801c724:	2b00      	cmp	r3, #0
 801c726:	db04      	blt.n	801c732 <_ZN8touchgfx4clzuEm+0x3a>
 801c728:	3001      	adds	r0, #1
 801c72a:	4770      	bx	lr
 801c72c:	2000      	movs	r0, #0
 801c72e:	e7ea      	b.n	801c706 <_ZN8touchgfx4clzuEm+0xe>
 801c730:	2020      	movs	r0, #32
 801c732:	4770      	bx	lr

0801c734 <_ZN8touchgfx7muldivuEmmmRm>:
 801c734:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801c738:	460f      	mov	r7, r1
 801c73a:	4615      	mov	r5, r2
 801c73c:	461e      	mov	r6, r3
 801c73e:	4601      	mov	r1, r0
 801c740:	b100      	cbz	r0, 801c744 <_ZN8touchgfx7muldivuEmmmRm+0x10>
 801c742:	b927      	cbnz	r7, 801c74e <_ZN8touchgfx7muldivuEmmmRm+0x1a>
 801c744:	2000      	movs	r0, #0
 801c746:	6030      	str	r0, [r6, #0]
 801c748:	b002      	add	sp, #8
 801c74a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c74e:	f7ff ffd3 	bl	801c6f8 <_ZN8touchgfx4clzuEm>
 801c752:	b980      	cbnz	r0, 801c776 <_ZN8touchgfx7muldivuEmmmRm+0x42>
 801c754:	4638      	mov	r0, r7
 801c756:	f7ff ffcf 	bl	801c6f8 <_ZN8touchgfx4clzuEm>
 801c75a:	2800      	cmp	r0, #0
 801c75c:	dd05      	ble.n	801c76a <_ZN8touchgfx7muldivuEmmmRm+0x36>
 801c75e:	4633      	mov	r3, r6
 801c760:	462a      	mov	r2, r5
 801c762:	4638      	mov	r0, r7
 801c764:	f7ff ffe6 	bl	801c734 <_ZN8touchgfx7muldivuEmmmRm>
 801c768:	e7ee      	b.n	801c748 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801c76a:	f04f 33ff 	mov.w	r3, #4294967295
 801c76e:	6033      	str	r3, [r6, #0]
 801c770:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801c774:	e7e8      	b.n	801c748 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801c776:	fa37 f800 	lsrs.w	r8, r7, r0
 801c77a:	fb07 f301 	mul.w	r3, r7, r1
 801c77e:	d105      	bne.n	801c78c <_ZN8touchgfx7muldivuEmmmRm+0x58>
 801c780:	fbb3 f0f5 	udiv	r0, r3, r5
 801c784:	fb05 3510 	mls	r5, r5, r0, r3
 801c788:	6035      	str	r5, [r6, #0]
 801c78a:	e7dd      	b.n	801c748 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801c78c:	2301      	movs	r3, #1
 801c78e:	fa01 fa00 	lsl.w	sl, r1, r0
 801c792:	fa03 f000 	lsl.w	r0, r3, r0
 801c796:	3801      	subs	r0, #1
 801c798:	462a      	mov	r2, r5
 801c79a:	4633      	mov	r3, r6
 801c79c:	4038      	ands	r0, r7
 801c79e:	f7ff ffc9 	bl	801c734 <_ZN8touchgfx7muldivuEmmmRm>
 801c7a2:	fbba f9f5 	udiv	r9, sl, r5
 801c7a6:	462a      	mov	r2, r5
 801c7a8:	4607      	mov	r7, r0
 801c7aa:	ab01      	add	r3, sp, #4
 801c7ac:	fb05 a119 	mls	r1, r5, r9, sl
 801c7b0:	4640      	mov	r0, r8
 801c7b2:	f7ff ffbf 	bl	801c734 <_ZN8touchgfx7muldivuEmmmRm>
 801c7b6:	9b01      	ldr	r3, [sp, #4]
 801c7b8:	6832      	ldr	r2, [r6, #0]
 801c7ba:	fb08 f409 	mul.w	r4, r8, r9
 801c7be:	441a      	add	r2, r3
 801c7c0:	fbb2 f3f5 	udiv	r3, r2, r5
 801c7c4:	441c      	add	r4, r3
 801c7c6:	443c      	add	r4, r7
 801c7c8:	4420      	add	r0, r4
 801c7ca:	fb05 2513 	mls	r5, r5, r3, r2
 801c7ce:	e7db      	b.n	801c788 <_ZN8touchgfx7muldivuEmmmRm+0x54>

0801c7d0 <_ZN8touchgfx6muldivElllRl>:
 801c7d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c7d2:	2800      	cmp	r0, #0
 801c7d4:	bfba      	itte	lt
 801c7d6:	4240      	neglt	r0, r0
 801c7d8:	f04f 34ff 	movlt.w	r4, #4294967295
 801c7dc:	2401      	movge	r4, #1
 801c7de:	2900      	cmp	r1, #0
 801c7e0:	bfbc      	itt	lt
 801c7e2:	4249      	neglt	r1, r1
 801c7e4:	4264      	neglt	r4, r4
 801c7e6:	2a00      	cmp	r2, #0
 801c7e8:	bfb6      	itet	lt
 801c7ea:	4265      	neglt	r5, r4
 801c7ec:	4625      	movge	r5, r4
 801c7ee:	4252      	neglt	r2, r2
 801c7f0:	4288      	cmp	r0, r1
 801c7f2:	461e      	mov	r6, r3
 801c7f4:	bfc2      	ittt	gt
 801c7f6:	4603      	movgt	r3, r0
 801c7f8:	4608      	movgt	r0, r1
 801c7fa:	4619      	movgt	r1, r3
 801c7fc:	ab01      	add	r3, sp, #4
 801c7fe:	f7ff ff99 	bl	801c734 <_ZN8touchgfx7muldivuEmmmRm>
 801c802:	9b01      	ldr	r3, [sp, #4]
 801c804:	4368      	muls	r0, r5
 801c806:	435c      	muls	r4, r3
 801c808:	6034      	str	r4, [r6, #0]
 801c80a:	b002      	add	sp, #8
 801c80c:	bd70      	pop	{r4, r5, r6, pc}

0801c80e <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801c80e:	2000      	movs	r0, #0
 801c810:	4770      	bx	lr

0801c812 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801c812:	2001      	movs	r0, #1
 801c814:	4770      	bx	lr

0801c816 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801c816:	2002      	movs	r0, #2
 801c818:	4770      	bx	lr

0801c81a <_ZN8touchgfx12GestureEventD1Ev>:
 801c81a:	4770      	bx	lr

0801c81c <_ZN8touchgfx9DragEventD1Ev>:
 801c81c:	4770      	bx	lr

0801c81e <_ZN8touchgfx10ClickEventD1Ev>:
 801c81e:	4770      	bx	lr

0801c820 <_ZN8touchgfx10ClickEventD0Ev>:
 801c820:	b510      	push	{r4, lr}
 801c822:	210c      	movs	r1, #12
 801c824:	4604      	mov	r4, r0
 801c826:	f00f fb8e 	bl	802bf46 <_ZdlPvj>
 801c82a:	4620      	mov	r0, r4
 801c82c:	bd10      	pop	{r4, pc}

0801c82e <_ZN8touchgfx9DragEventD0Ev>:
 801c82e:	b510      	push	{r4, lr}
 801c830:	2110      	movs	r1, #16
 801c832:	4604      	mov	r4, r0
 801c834:	f00f fb87 	bl	802bf46 <_ZdlPvj>
 801c838:	4620      	mov	r0, r4
 801c83a:	bd10      	pop	{r4, pc}

0801c83c <_ZN8touchgfx12GestureEventD0Ev>:
 801c83c:	b510      	push	{r4, lr}
 801c83e:	210c      	movs	r1, #12
 801c840:	4604      	mov	r4, r0
 801c842:	f00f fb80 	bl	802bf46 <_ZdlPvj>
 801c846:	4620      	mov	r0, r4
 801c848:	bd10      	pop	{r4, pc}
	...

0801c84c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801c84c:	b530      	push	{r4, r5, lr}
 801c84e:	460d      	mov	r5, r1
 801c850:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801c852:	b087      	sub	sp, #28
 801c854:	4604      	mov	r4, r0
 801c856:	b301      	cbz	r1, 801c89a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801c858:	a801      	add	r0, sp, #4
 801c85a:	f7ff fe87 	bl	801c56c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c85e:	892a      	ldrh	r2, [r5, #8]
 801c860:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801c864:	7928      	ldrb	r0, [r5, #4]
 801c866:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801c86a:	f88d 0010 	strb.w	r0, [sp, #16]
 801c86e:	1ad2      	subs	r2, r2, r3
 801c870:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801c872:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801c874:	f8ad 1012 	strh.w	r1, [sp, #18]
 801c878:	441a      	add	r2, r3
 801c87a:	896b      	ldrh	r3, [r5, #10]
 801c87c:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801c880:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c884:	1b5b      	subs	r3, r3, r5
 801c886:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801c888:	442b      	add	r3, r5
 801c88a:	4d05      	ldr	r5, [pc, #20]	; (801c8a0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801c88c:	9503      	str	r5, [sp, #12]
 801c88e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c892:	6803      	ldr	r3, [r0, #0]
 801c894:	a903      	add	r1, sp, #12
 801c896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c898:	4798      	blx	r3
 801c89a:	b007      	add	sp, #28
 801c89c:	bd30      	pop	{r4, r5, pc}
 801c89e:	bf00      	nop
 801c8a0:	0802f834 	.word	0x0802f834

0801c8a4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801c8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c8a8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c8aa:	b08a      	sub	sp, #40	; 0x28
 801c8ac:	4604      	mov	r4, r0
 801c8ae:	460d      	mov	r5, r1
 801c8b0:	b113      	cbz	r3, 801c8b8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801c8b2:	790b      	ldrb	r3, [r1, #4]
 801c8b4:	2b00      	cmp	r3, #0
 801c8b6:	d044      	beq.n	801c942 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c8b8:	f104 0804 	add.w	r8, r4, #4
 801c8bc:	4641      	mov	r1, r8
 801c8be:	a803      	add	r0, sp, #12
 801c8c0:	f7ff fe54 	bl	801c56c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c8c4:	792b      	ldrb	r3, [r5, #4]
 801c8c6:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801c8ca:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801c8ce:	b983      	cbnz	r3, 801c8f2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801c8d0:	892a      	ldrh	r2, [r5, #8]
 801c8d2:	88e9      	ldrh	r1, [r5, #6]
 801c8d4:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801c8d8:	1b92      	subs	r2, r2, r6
 801c8da:	1bc9      	subs	r1, r1, r7
 801c8dc:	9301      	str	r3, [sp, #4]
 801c8de:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801c8e2:	9300      	str	r3, [sp, #0]
 801c8e4:	b212      	sxth	r2, r2
 801c8e6:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801c8ea:	b209      	sxth	r1, r1
 801c8ec:	4640      	mov	r0, r8
 801c8ee:	f7f9 fe73 	bl	80165d8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801c8f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801c8f4:	b329      	cbz	r1, 801c942 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c8f6:	a805      	add	r0, sp, #20
 801c8f8:	f7ff fe38 	bl	801c56c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c8fc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801c900:	792b      	ldrb	r3, [r5, #4]
 801c902:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801c904:	f88d 3020 	strb.w	r3, [sp, #32]
 801c908:	1abf      	subs	r7, r7, r2
 801c90a:	88ea      	ldrh	r2, [r5, #6]
 801c90c:	4417      	add	r7, r2
 801c90e:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801c910:	4417      	add	r7, r2
 801c912:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801c916:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801c91a:	1ab6      	subs	r6, r6, r2
 801c91c:	892a      	ldrh	r2, [r5, #8]
 801c91e:	4416      	add	r6, r2
 801c920:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801c922:	4416      	add	r6, r2
 801c924:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801c928:	4a07      	ldr	r2, [pc, #28]	; (801c948 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801c92a:	9207      	str	r2, [sp, #28]
 801c92c:	2600      	movs	r6, #0
 801c92e:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801c932:	6803      	ldr	r3, [r0, #0]
 801c934:	a907      	add	r1, sp, #28
 801c936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c938:	4798      	blx	r3
 801c93a:	792b      	ldrb	r3, [r5, #4]
 801c93c:	b10b      	cbz	r3, 801c942 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c93e:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801c942:	b00a      	add	sp, #40	; 0x28
 801c944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c948:	0802f80c 	.word	0x0802f80c

0801c94c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801c94c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c950:	460c      	mov	r4, r1
 801c952:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801c954:	b088      	sub	sp, #32
 801c956:	4605      	mov	r5, r0
 801c958:	2900      	cmp	r1, #0
 801c95a:	d06d      	beq.n	801ca38 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801c95c:	4668      	mov	r0, sp
 801c95e:	f7ff fe05 	bl	801c56c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c962:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801c964:	88e3      	ldrh	r3, [r4, #6]
 801c966:	f9bd 8000 	ldrsh.w	r8, [sp]
 801c96a:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801c96e:	440b      	add	r3, r1
 801c970:	b21b      	sxth	r3, r3
 801c972:	4543      	cmp	r3, r8
 801c974:	db31      	blt.n	801c9da <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c976:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801c97a:	44c4      	add	ip, r8
 801c97c:	fa0f fc8c 	sxth.w	ip, ip
 801c980:	4563      	cmp	r3, ip
 801c982:	da2a      	bge.n	801c9da <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c984:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801c986:	8926      	ldrh	r6, [r4, #8]
 801c988:	4416      	add	r6, r2
 801c98a:	b236      	sxth	r6, r6
 801c98c:	42be      	cmp	r6, r7
 801c98e:	db24      	blt.n	801c9da <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c990:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801c994:	4438      	add	r0, r7
 801c996:	b200      	sxth	r0, r0
 801c998:	4286      	cmp	r6, r0
 801c99a:	da1e      	bge.n	801c9da <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c99c:	8963      	ldrh	r3, [r4, #10]
 801c99e:	4419      	add	r1, r3
 801c9a0:	b209      	sxth	r1, r1
 801c9a2:	4541      	cmp	r1, r8
 801c9a4:	db08      	blt.n	801c9b8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c9a6:	4561      	cmp	r1, ip
 801c9a8:	da06      	bge.n	801c9b8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c9aa:	89a3      	ldrh	r3, [r4, #12]
 801c9ac:	441a      	add	r2, r3
 801c9ae:	b212      	sxth	r2, r2
 801c9b0:	42ba      	cmp	r2, r7
 801c9b2:	db01      	blt.n	801c9b8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c9b4:	4282      	cmp	r2, r0
 801c9b6:	db10      	blt.n	801c9da <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c9b8:	4b21      	ldr	r3, [pc, #132]	; (801ca40 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801c9ba:	9304      	str	r3, [sp, #16]
 801c9bc:	2302      	movs	r3, #2
 801c9be:	f88d 3014 	strb.w	r3, [sp, #20]
 801c9c2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801c9c4:	2300      	movs	r3, #0
 801c9c6:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c9ca:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c9ce:	f8ad 301a 	strh.w	r3, [sp, #26]
 801c9d2:	6803      	ldr	r3, [r0, #0]
 801c9d4:	a904      	add	r1, sp, #16
 801c9d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c9d8:	4798      	blx	r3
 801c9da:	1d29      	adds	r1, r5, #4
 801c9dc:	a802      	add	r0, sp, #8
 801c9de:	f7ff fdc5 	bl	801c56c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c9e2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801c9e6:	88e0      	ldrh	r0, [r4, #6]
 801c9e8:	7921      	ldrb	r1, [r4, #4]
 801c9ea:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801c9ee:	8922      	ldrh	r2, [r4, #8]
 801c9f0:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801c9f2:	f88d 1014 	strb.w	r1, [sp, #20]
 801c9f6:	eba3 0808 	sub.w	r8, r3, r8
 801c9fa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c9fe:	1bdf      	subs	r7, r3, r7
 801ca00:	b2bb      	uxth	r3, r7
 801ca02:	fa1f f888 	uxth.w	r8, r8
 801ca06:	8967      	ldrh	r7, [r4, #10]
 801ca08:	89a4      	ldrh	r4, [r4, #12]
 801ca0a:	4440      	add	r0, r8
 801ca0c:	4460      	add	r0, ip
 801ca0e:	441a      	add	r2, r3
 801ca10:	44b8      	add	r8, r7
 801ca12:	4423      	add	r3, r4
 801ca14:	f8ad 0016 	strh.w	r0, [sp, #22]
 801ca18:	4433      	add	r3, r6
 801ca1a:	4432      	add	r2, r6
 801ca1c:	44e0      	add	r8, ip
 801ca1e:	4c09      	ldr	r4, [pc, #36]	; (801ca44 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801ca20:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801ca22:	9404      	str	r4, [sp, #16]
 801ca24:	f8ad 2018 	strh.w	r2, [sp, #24]
 801ca28:	f8ad 801a 	strh.w	r8, [sp, #26]
 801ca2c:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ca30:	6803      	ldr	r3, [r0, #0]
 801ca32:	a904      	add	r1, sp, #16
 801ca34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ca36:	4798      	blx	r3
 801ca38:	b008      	add	sp, #32
 801ca3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ca3e:	bf00      	nop
 801ca40:	0802f80c 	.word	0x0802f80c
 801ca44:	0802f820 	.word	0x0802f820

0801ca48 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801ca48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ca4a:	4604      	mov	r4, r0
 801ca4c:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801ca50:	3201      	adds	r2, #1
 801ca52:	d112      	bne.n	801ca7a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801ca54:	6803      	ldr	r3, [r0, #0]
 801ca56:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801ca5a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801ca5e:	f8ad 1004 	strh.w	r1, [sp, #4]
 801ca62:	2500      	movs	r5, #0
 801ca64:	9500      	str	r5, [sp, #0]
 801ca66:	466d      	mov	r5, sp
 801ca68:	4629      	mov	r1, r5
 801ca6a:	f8ad 2006 	strh.w	r2, [sp, #6]
 801ca6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ca70:	4798      	blx	r3
 801ca72:	e895 0003 	ldmia.w	r5, {r0, r1}
 801ca76:	e884 0003 	stmia.w	r4, {r0, r1}
 801ca7a:	4620      	mov	r0, r4
 801ca7c:	b003      	add	sp, #12
 801ca7e:	bd30      	pop	{r4, r5, pc}

0801ca80 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801ca80:	b513      	push	{r0, r1, r4, lr}
 801ca82:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801ca86:	3301      	adds	r3, #1
 801ca88:	4604      	mov	r4, r0
 801ca8a:	d109      	bne.n	801caa0 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801ca8c:	4601      	mov	r1, r0
 801ca8e:	4668      	mov	r0, sp
 801ca90:	f7ff fd6c 	bl	801c56c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ca94:	f8bd 3000 	ldrh.w	r3, [sp]
 801ca98:	8423      	strh	r3, [r4, #32]
 801ca9a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801ca9e:	8463      	strh	r3, [r4, #34]	; 0x22
 801caa0:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801caa4:	b002      	add	sp, #8
 801caa6:	bd10      	pop	{r4, pc}

0801caa8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801caa8:	b513      	push	{r0, r1, r4, lr}
 801caaa:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801caae:	3301      	adds	r3, #1
 801cab0:	4604      	mov	r4, r0
 801cab2:	d109      	bne.n	801cac8 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801cab4:	4601      	mov	r1, r0
 801cab6:	4668      	mov	r0, sp
 801cab8:	f7ff fd58 	bl	801c56c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cabc:	f8bd 3000 	ldrh.w	r3, [sp]
 801cac0:	8423      	strh	r3, [r4, #32]
 801cac2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cac6:	8463      	strh	r3, [r4, #34]	; 0x22
 801cac8:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801cacc:	b002      	add	sp, #8
 801cace:	bd10      	pop	{r4, pc}

0801cad0 <_ZN8touchgfx6ScreenC1Ev>:
 801cad0:	b570      	push	{r4, r5, r6, lr}
 801cad2:	4605      	mov	r5, r0
 801cad4:	4b16      	ldr	r3, [pc, #88]	; (801cb30 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801cad6:	f845 3b04 	str.w	r3, [r5], #4
 801cada:	2300      	movs	r3, #0
 801cadc:	8103      	strh	r3, [r0, #8]
 801cade:	8143      	strh	r3, [r0, #10]
 801cae0:	8183      	strh	r3, [r0, #12]
 801cae2:	81c3      	strh	r3, [r0, #14]
 801cae4:	8203      	strh	r3, [r0, #16]
 801cae6:	8243      	strh	r3, [r0, #18]
 801cae8:	8283      	strh	r3, [r0, #20]
 801caea:	82c3      	strh	r3, [r0, #22]
 801caec:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801caf0:	6203      	str	r3, [r0, #32]
 801caf2:	8483      	strh	r3, [r0, #36]	; 0x24
 801caf4:	84c3      	strh	r3, [r0, #38]	; 0x26
 801caf6:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801cafa:	4a0e      	ldr	r2, [pc, #56]	; (801cb34 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801cafc:	6343      	str	r3, [r0, #52]	; 0x34
 801cafe:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801cb02:	4b0d      	ldr	r3, [pc, #52]	; (801cb38 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801cb04:	6042      	str	r2, [r0, #4]
 801cb06:	f9b3 6000 	ldrsh.w	r6, [r3]
 801cb0a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801cb0c:	4a0b      	ldr	r2, [pc, #44]	; (801cb3c <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801cb0e:	4604      	mov	r4, r0
 801cb10:	2101      	movs	r1, #1
 801cb12:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801cb16:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801cb1a:	f9b2 1000 	ldrsh.w	r1, [r2]
 801cb1e:	4628      	mov	r0, r5
 801cb20:	4798      	blx	r3
 801cb22:	6863      	ldr	r3, [r4, #4]
 801cb24:	4628      	mov	r0, r5
 801cb26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cb28:	4631      	mov	r1, r6
 801cb2a:	4798      	blx	r3
 801cb2c:	4620      	mov	r0, r4
 801cb2e:	bd70      	pop	{r4, r5, r6, pc}
 801cb30:	0802f848 	.word	0x0802f848
 801cb34:	0802eed0 	.word	0x0802eed0
 801cb38:	2000af3e 	.word	0x2000af3e
 801cb3c:	2000af3c 	.word	0x2000af3c

0801cb40 <_ZN8touchgfx6Screen4drawEv>:
 801cb40:	b507      	push	{r0, r1, r2, lr}
 801cb42:	4b09      	ldr	r3, [pc, #36]	; (801cb68 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801cb44:	f9b3 2000 	ldrsh.w	r2, [r3]
 801cb48:	4b08      	ldr	r3, [pc, #32]	; (801cb6c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801cb4a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801cb4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801cb52:	f8ad 3006 	strh.w	r3, [sp, #6]
 801cb56:	6803      	ldr	r3, [r0, #0]
 801cb58:	2100      	movs	r1, #0
 801cb5a:	9100      	str	r1, [sp, #0]
 801cb5c:	689b      	ldr	r3, [r3, #8]
 801cb5e:	4669      	mov	r1, sp
 801cb60:	4798      	blx	r3
 801cb62:	b003      	add	sp, #12
 801cb64:	f85d fb04 	ldr.w	pc, [sp], #4
 801cb68:	2000af3c 	.word	0x2000af3c
 801cb6c:	2000af3e 	.word	0x2000af3e

0801cb70 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801cb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb74:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801cb78:	2b00      	cmp	r3, #0
 801cb7a:	b089      	sub	sp, #36	; 0x24
 801cb7c:	4680      	mov	r8, r0
 801cb7e:	460c      	mov	r4, r1
 801cb80:	4615      	mov	r5, r2
 801cb82:	dd0e      	ble.n	801cba2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801cb84:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801cb88:	2b00      	cmp	r3, #0
 801cb8a:	dd0a      	ble.n	801cba2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801cb8c:	4628      	mov	r0, r5
 801cb8e:	f7ff ff5b 	bl	801ca48 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801cb92:	4621      	mov	r1, r4
 801cb94:	f7fe fab0 	bl	801b0f8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801cb98:	69eb      	ldr	r3, [r5, #28]
 801cb9a:	b928      	cbnz	r0, 801cba8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801cb9c:	461d      	mov	r5, r3
 801cb9e:	2b00      	cmp	r3, #0
 801cba0:	d1f4      	bne.n	801cb8c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801cba2:	b009      	add	sp, #36	; 0x24
 801cba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cba8:	ae04      	add	r6, sp, #16
 801cbaa:	2b00      	cmp	r3, #0
 801cbac:	f000 80b5 	beq.w	801cd1a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801cbb0:	682b      	ldr	r3, [r5, #0]
 801cbb2:	4629      	mov	r1, r5
 801cbb4:	68db      	ldr	r3, [r3, #12]
 801cbb6:	a802      	add	r0, sp, #8
 801cbb8:	4798      	blx	r3
 801cbba:	4628      	mov	r0, r5
 801cbbc:	f7ff ff60 	bl	801ca80 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801cbc0:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801cbc4:	4407      	add	r7, r0
 801cbc6:	4628      	mov	r0, r5
 801cbc8:	f7ff ff6e 	bl	801caa8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801cbcc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801cbd0:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801cbd4:	f8ad 2014 	strh.w	r2, [sp, #20]
 801cbd8:	4418      	add	r0, r3
 801cbda:	4621      	mov	r1, r4
 801cbdc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801cbe0:	f8ad 0012 	strh.w	r0, [sp, #18]
 801cbe4:	b23f      	sxth	r7, r7
 801cbe6:	4630      	mov	r0, r6
 801cbe8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cbec:	f8ad 7010 	strh.w	r7, [sp, #16]
 801cbf0:	f7f9 fdd6 	bl	80167a0 <_ZN8touchgfx4RectaNERKS0_>
 801cbf4:	4628      	mov	r0, r5
 801cbf6:	f7ff ff27 	bl	801ca48 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801cbfa:	4602      	mov	r2, r0
 801cbfc:	e896 0003 	ldmia.w	r6, {r0, r1}
 801cc00:	ab06      	add	r3, sp, #24
 801cc02:	e883 0003 	stmia.w	r3, {r0, r1}
 801cc06:	4611      	mov	r1, r2
 801cc08:	4618      	mov	r0, r3
 801cc0a:	f7f9 fdc9 	bl	80167a0 <_ZN8touchgfx4RectaNERKS0_>
 801cc0e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801cc12:	f9b4 1000 	ldrsh.w	r1, [r4]
 801cc16:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801cc1a:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801cc1e:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801cc22:	4299      	cmp	r1, r3
 801cc24:	d10b      	bne.n	801cc3e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801cc26:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801cc2a:	4552      	cmp	r2, sl
 801cc2c:	d107      	bne.n	801cc3e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801cc2e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801cc32:	455a      	cmp	r2, fp
 801cc34:	d103      	bne.n	801cc3e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801cc36:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801cc3a:	454a      	cmp	r2, r9
 801cc3c:	d06d      	beq.n	801cd1a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801cc3e:	f1bb 0f00 	cmp.w	fp, #0
 801cc42:	dd65      	ble.n	801cd10 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801cc44:	f1b9 0f00 	cmp.w	r9, #0
 801cc48:	dd62      	ble.n	801cd10 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801cc4a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801cc4e:	fa1f f08a 	uxth.w	r0, sl
 801cc52:	4552      	cmp	r2, sl
 801cc54:	9000      	str	r0, [sp, #0]
 801cc56:	da12      	bge.n	801cc7e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801cc58:	9301      	str	r3, [sp, #4]
 801cc5a:	9b00      	ldr	r3, [sp, #0]
 801cc5c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801cc60:	f8ad 2012 	strh.w	r2, [sp, #18]
 801cc64:	1a9a      	subs	r2, r3, r2
 801cc66:	f8ad 1010 	strh.w	r1, [sp, #16]
 801cc6a:	f8ad 0014 	strh.w	r0, [sp, #20]
 801cc6e:	f8ad 2016 	strh.w	r2, [sp, #22]
 801cc72:	69ea      	ldr	r2, [r5, #28]
 801cc74:	4631      	mov	r1, r6
 801cc76:	4640      	mov	r0, r8
 801cc78:	f7ff ff7a 	bl	801cb70 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cc7c:	9b01      	ldr	r3, [sp, #4]
 801cc7e:	f9b4 2000 	ldrsh.w	r2, [r4]
 801cc82:	429a      	cmp	r2, r3
 801cc84:	b29f      	uxth	r7, r3
 801cc86:	da0d      	bge.n	801cca4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801cc88:	f8ad 2010 	strh.w	r2, [sp, #16]
 801cc8c:	1aba      	subs	r2, r7, r2
 801cc8e:	f8ad a012 	strh.w	sl, [sp, #18]
 801cc92:	f8ad 2014 	strh.w	r2, [sp, #20]
 801cc96:	f8ad 9016 	strh.w	r9, [sp, #22]
 801cc9a:	69ea      	ldr	r2, [r5, #28]
 801cc9c:	4631      	mov	r1, r6
 801cc9e:	4640      	mov	r0, r8
 801cca0:	f7ff ff66 	bl	801cb70 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cca4:	8822      	ldrh	r2, [r4, #0]
 801cca6:	88a3      	ldrh	r3, [r4, #4]
 801cca8:	445f      	add	r7, fp
 801ccaa:	4413      	add	r3, r2
 801ccac:	b29b      	uxth	r3, r3
 801ccae:	b2bf      	uxth	r7, r7
 801ccb0:	b23a      	sxth	r2, r7
 801ccb2:	b219      	sxth	r1, r3
 801ccb4:	4291      	cmp	r1, r2
 801ccb6:	dd0d      	ble.n	801ccd4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801ccb8:	1bdb      	subs	r3, r3, r7
 801ccba:	f8ad 2010 	strh.w	r2, [sp, #16]
 801ccbe:	f8ad a012 	strh.w	sl, [sp, #18]
 801ccc2:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ccc6:	f8ad 9016 	strh.w	r9, [sp, #22]
 801ccca:	69ea      	ldr	r2, [r5, #28]
 801cccc:	4631      	mov	r1, r6
 801ccce:	4640      	mov	r0, r8
 801ccd0:	f7ff ff4e 	bl	801cb70 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ccd4:	88e2      	ldrh	r2, [r4, #6]
 801ccd6:	8863      	ldrh	r3, [r4, #2]
 801ccd8:	4413      	add	r3, r2
 801ccda:	9a00      	ldr	r2, [sp, #0]
 801ccdc:	444a      	add	r2, r9
 801ccde:	b29b      	uxth	r3, r3
 801cce0:	fa1f f982 	uxth.w	r9, r2
 801cce4:	fa0f f289 	sxth.w	r2, r9
 801cce8:	b219      	sxth	r1, r3
 801ccea:	428a      	cmp	r2, r1
 801ccec:	da15      	bge.n	801cd1a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801ccee:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801ccf2:	f9b4 0000 	ldrsh.w	r0, [r4]
 801ccf6:	f8ad 1014 	strh.w	r1, [sp, #20]
 801ccfa:	eba3 0309 	sub.w	r3, r3, r9
 801ccfe:	f8ad 0010 	strh.w	r0, [sp, #16]
 801cd02:	f8ad 2012 	strh.w	r2, [sp, #18]
 801cd06:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cd0a:	69ea      	ldr	r2, [r5, #28]
 801cd0c:	4631      	mov	r1, r6
 801cd0e:	e001      	b.n	801cd14 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801cd10:	69ea      	ldr	r2, [r5, #28]
 801cd12:	4621      	mov	r1, r4
 801cd14:	4640      	mov	r0, r8
 801cd16:	f7ff ff2b 	bl	801cb70 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cd1a:	4628      	mov	r0, r5
 801cd1c:	f7ff fe94 	bl	801ca48 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801cd20:	6861      	ldr	r1, [r4, #4]
 801cd22:	4602      	mov	r2, r0
 801cd24:	6820      	ldr	r0, [r4, #0]
 801cd26:	4633      	mov	r3, r6
 801cd28:	c303      	stmia	r3!, {r0, r1}
 801cd2a:	4611      	mov	r1, r2
 801cd2c:	4630      	mov	r0, r6
 801cd2e:	f7f9 fd37 	bl	80167a0 <_ZN8touchgfx4RectaNERKS0_>
 801cd32:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801cd36:	2b00      	cmp	r3, #0
 801cd38:	f77f af33 	ble.w	801cba2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801cd3c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801cd40:	2b00      	cmp	r3, #0
 801cd42:	f77f af2e 	ble.w	801cba2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801cd46:	4628      	mov	r0, r5
 801cd48:	f7ff fe9a 	bl	801ca80 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801cd4c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801cd50:	1a18      	subs	r0, r3, r0
 801cd52:	f8ad 0010 	strh.w	r0, [sp, #16]
 801cd56:	4628      	mov	r0, r5
 801cd58:	f7ff fea6 	bl	801caa8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801cd5c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801cd60:	1a18      	subs	r0, r3, r0
 801cd62:	f8ad 0012 	strh.w	r0, [sp, #18]
 801cd66:	682b      	ldr	r3, [r5, #0]
 801cd68:	4631      	mov	r1, r6
 801cd6a:	689b      	ldr	r3, [r3, #8]
 801cd6c:	4628      	mov	r0, r5
 801cd6e:	4798      	blx	r3
 801cd70:	e717      	b.n	801cba2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801cd72 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801cd72:	b570      	push	{r4, r5, r6, lr}
 801cd74:	460c      	mov	r4, r1
 801cd76:	b086      	sub	sp, #24
 801cd78:	1d06      	adds	r6, r0, #4
 801cd7a:	2300      	movs	r3, #0
 801cd7c:	4631      	mov	r1, r6
 801cd7e:	4605      	mov	r5, r0
 801cd80:	a802      	add	r0, sp, #8
 801cd82:	9301      	str	r3, [sp, #4]
 801cd84:	f7ff fbf2 	bl	801c56c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cd88:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801cd8c:	8822      	ldrh	r2, [r4, #0]
 801cd8e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801cd92:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801cd96:	f8ad 0014 	strh.w	r0, [sp, #20]
 801cd9a:	1ad2      	subs	r2, r2, r3
 801cd9c:	8863      	ldrh	r3, [r4, #2]
 801cd9e:	f8ad 2010 	strh.w	r2, [sp, #16]
 801cda2:	1a5b      	subs	r3, r3, r1
 801cda4:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801cda8:	f8ad 1016 	strh.w	r1, [sp, #22]
 801cdac:	aa01      	add	r2, sp, #4
 801cdae:	a904      	add	r1, sp, #16
 801cdb0:	4630      	mov	r0, r6
 801cdb2:	f8ad 3012 	strh.w	r3, [sp, #18]
 801cdb6:	f7f9 fdcb 	bl	8016950 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801cdba:	9a01      	ldr	r2, [sp, #4]
 801cdbc:	b11a      	cbz	r2, 801cdc6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801cdbe:	4621      	mov	r1, r4
 801cdc0:	4628      	mov	r0, r5
 801cdc2:	f7ff fed5 	bl	801cb70 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cdc6:	b006      	add	sp, #24
 801cdc8:	bd70      	pop	{r4, r5, r6, pc}

0801cdca <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801cdca:	b530      	push	{r4, r5, lr}
 801cdcc:	4602      	mov	r2, r0
 801cdce:	4604      	mov	r4, r0
 801cdd0:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801cdd4:	b085      	sub	sp, #20
 801cdd6:	460d      	mov	r5, r1
 801cdd8:	6851      	ldr	r1, [r2, #4]
 801cdda:	466b      	mov	r3, sp
 801cddc:	c303      	stmia	r3!, {r0, r1}
 801cdde:	4629      	mov	r1, r5
 801cde0:	4668      	mov	r0, sp
 801cde2:	f7f9 fcdd 	bl	80167a0 <_ZN8touchgfx4RectaNERKS0_>
 801cde6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801cdea:	b12b      	cbz	r3, 801cdf8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801cdec:	4669      	mov	r1, sp
 801cdee:	4620      	mov	r0, r4
 801cdf0:	f7ff ffbf 	bl	801cd72 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801cdf4:	b005      	add	sp, #20
 801cdf6:	bd30      	pop	{r4, r5, pc}
 801cdf8:	3404      	adds	r4, #4
 801cdfa:	4621      	mov	r1, r4
 801cdfc:	a802      	add	r0, sp, #8
 801cdfe:	f7ff fbb5 	bl	801c56c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ce02:	f8bd 3000 	ldrh.w	r3, [sp]
 801ce06:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801ce0a:	1a9b      	subs	r3, r3, r2
 801ce0c:	f8ad 3000 	strh.w	r3, [sp]
 801ce10:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801ce14:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801ce18:	4669      	mov	r1, sp
 801ce1a:	1a9b      	subs	r3, r3, r2
 801ce1c:	4620      	mov	r0, r4
 801ce1e:	f8ad 3002 	strh.w	r3, [sp, #2]
 801ce22:	f7f9 fd5c 	bl	80168de <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801ce26:	e7e5      	b.n	801cdf4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801ce28 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801ce28:	680a      	ldr	r2, [r1, #0]
 801ce2a:	460b      	mov	r3, r1
 801ce2c:	6992      	ldr	r2, [r2, #24]
 801ce2e:	1d01      	adds	r1, r0, #4
 801ce30:	4618      	mov	r0, r3
 801ce32:	4710      	bx	r2

0801ce34 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 801ce34:	4298      	cmp	r0, r3
 801ce36:	d200      	bcs.n	801ce3a <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 801ce38:	b913      	cbnz	r3, 801ce40 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 801ce3a:	440a      	add	r2, r1
 801ce3c:	b210      	sxth	r0, r2
 801ce3e:	4770      	bx	lr
 801ce40:	ee07 2a90 	vmov	s15, r2
 801ce44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801ce48:	ee07 0a90 	vmov	s15, r0
 801ce4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ce50:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ce54:	ee07 3a10 	vmov	s14, r3
 801ce58:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801ce5c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801ce60:	ee07 1a90 	vmov	s15, r1
 801ce64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ce68:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ce6c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801ce70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ce74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce78:	bfcc      	ite	gt
 801ce7a:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801ce7e:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801ce82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ce86:	ee17 3a90 	vmov	r3, s15
 801ce8a:	b218      	sxth	r0, r3
 801ce8c:	4770      	bx	lr

0801ce8e <_ZN8touchgfx12TextProviderC1Ev>:
 801ce8e:	b538      	push	{r3, r4, r5, lr}
 801ce90:	2500      	movs	r5, #0
 801ce92:	2302      	movs	r3, #2
 801ce94:	4604      	mov	r4, r0
 801ce96:	e9c0 5500 	strd	r5, r5, [r0]
 801ce9a:	7403      	strb	r3, [r0, #16]
 801ce9c:	6145      	str	r5, [r0, #20]
 801ce9e:	7605      	strb	r5, [r0, #24]
 801cea0:	83c5      	strh	r5, [r0, #30]
 801cea2:	8405      	strh	r5, [r0, #32]
 801cea4:	86c5      	strh	r5, [r0, #54]	; 0x36
 801cea6:	8705      	strh	r5, [r0, #56]	; 0x38
 801cea8:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801ceaa:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801ceae:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801ceb2:	220e      	movs	r2, #14
 801ceb4:	4629      	mov	r1, r5
 801ceb6:	304c      	adds	r0, #76	; 0x4c
 801ceb8:	f010 f83b 	bl	802cf32 <memset>
 801cebc:	2301      	movs	r3, #1
 801cebe:	4620      	mov	r0, r4
 801cec0:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801cec4:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801cec8:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801cecc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801ced0:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801ced4:	f7f6 fe54 	bl	8013b80 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801ced8:	4620      	mov	r0, r4
 801ceda:	bd38      	pop	{r3, r4, r5, pc}

0801cedc <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801cedc:	b530      	push	{r4, r5, lr}
 801cede:	2500      	movs	r5, #0
 801cee0:	2401      	movs	r4, #1
 801cee2:	6843      	ldr	r3, [r0, #4]
 801cee4:	b913      	cbnz	r3, 801ceec <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801cee6:	6803      	ldr	r3, [r0, #0]
 801cee8:	b313      	cbz	r3, 801cf30 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801ceea:	6043      	str	r3, [r0, #4]
 801ceec:	7e03      	ldrb	r3, [r0, #24]
 801ceee:	b143      	cbz	r3, 801cf02 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801cef0:	6943      	ldr	r3, [r0, #20]
 801cef2:	b12b      	cbz	r3, 801cf00 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801cef4:	881a      	ldrh	r2, [r3, #0]
 801cef6:	b11a      	cbz	r2, 801cf00 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801cef8:	1c9a      	adds	r2, r3, #2
 801cefa:	6142      	str	r2, [r0, #20]
 801cefc:	8818      	ldrh	r0, [r3, #0]
 801cefe:	bd30      	pop	{r4, r5, pc}
 801cf00:	7605      	strb	r5, [r0, #24]
 801cf02:	6843      	ldr	r3, [r0, #4]
 801cf04:	8819      	ldrh	r1, [r3, #0]
 801cf06:	b199      	cbz	r1, 801cf30 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801cf08:	1c9a      	adds	r2, r3, #2
 801cf0a:	2902      	cmp	r1, #2
 801cf0c:	6042      	str	r2, [r0, #4]
 801cf0e:	d1f5      	bne.n	801cefc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801cf10:	7c03      	ldrb	r3, [r0, #16]
 801cf12:	2b01      	cmp	r3, #1
 801cf14:	d8e5      	bhi.n	801cee2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801cf16:	1c5a      	adds	r2, r3, #1
 801cf18:	3302      	adds	r3, #2
 801cf1a:	7402      	strb	r2, [r0, #16]
 801cf1c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801cf20:	6143      	str	r3, [r0, #20]
 801cf22:	2b00      	cmp	r3, #0
 801cf24:	d0dd      	beq.n	801cee2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801cf26:	881b      	ldrh	r3, [r3, #0]
 801cf28:	2b00      	cmp	r3, #0
 801cf2a:	d0da      	beq.n	801cee2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801cf2c:	7604      	strb	r4, [r0, #24]
 801cf2e:	e7d8      	b.n	801cee2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801cf30:	2000      	movs	r0, #0
 801cf32:	e7e4      	b.n	801cefe <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801cf34 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801cf34:	b430      	push	{r4, r5}
 801cf36:	6001      	str	r1, [r0, #0]
 801cf38:	2100      	movs	r1, #0
 801cf3a:	6041      	str	r1, [r0, #4]
 801cf3c:	6815      	ldr	r5, [r2, #0]
 801cf3e:	6085      	str	r5, [r0, #8]
 801cf40:	6852      	ldr	r2, [r2, #4]
 801cf42:	6443      	str	r3, [r0, #68]	; 0x44
 801cf44:	9b02      	ldr	r3, [sp, #8]
 801cf46:	60c2      	str	r2, [r0, #12]
 801cf48:	7401      	strb	r1, [r0, #16]
 801cf4a:	6141      	str	r1, [r0, #20]
 801cf4c:	7601      	strb	r1, [r0, #24]
 801cf4e:	8701      	strh	r1, [r0, #56]	; 0x38
 801cf50:	8401      	strh	r1, [r0, #32]
 801cf52:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801cf56:	6483      	str	r3, [r0, #72]	; 0x48
 801cf58:	bc30      	pop	{r4, r5}
 801cf5a:	f7f6 be11 	b.w	8013b80 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801cf5e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801cf5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cf60:	4605      	mov	r5, r0
 801cf62:	4608      	mov	r0, r1
 801cf64:	b1e9      	cbz	r1, 801cfa2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 801cf66:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801cf6a:	460b      	mov	r3, r1
 801cf6c:	f101 0708 	add.w	r7, r1, #8
 801cf70:	4622      	mov	r2, r4
 801cf72:	6818      	ldr	r0, [r3, #0]
 801cf74:	6859      	ldr	r1, [r3, #4]
 801cf76:	4626      	mov	r6, r4
 801cf78:	c603      	stmia	r6!, {r0, r1}
 801cf7a:	3308      	adds	r3, #8
 801cf7c:	42bb      	cmp	r3, r7
 801cf7e:	4634      	mov	r4, r6
 801cf80:	d1f7      	bne.n	801cf72 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801cf82:	6818      	ldr	r0, [r3, #0]
 801cf84:	6030      	str	r0, [r6, #0]
 801cf86:	889b      	ldrh	r3, [r3, #4]
 801cf88:	80b3      	strh	r3, [r6, #4]
 801cf8a:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801cf8e:	015b      	lsls	r3, r3, #5
 801cf90:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801cf94:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801cf98:	430b      	orrs	r3, r1
 801cf9a:	425b      	negs	r3, r3
 801cf9c:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801cfa0:	4610      	mov	r0, r2
 801cfa2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cfa4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801cfa4:	b538      	push	{r3, r4, r5, lr}
 801cfa6:	460c      	mov	r4, r1
 801cfa8:	6811      	ldr	r1, [r2, #0]
 801cfaa:	4610      	mov	r0, r2
 801cfac:	68cd      	ldr	r5, [r1, #12]
 801cfae:	4619      	mov	r1, r3
 801cfb0:	47a8      	blx	r5
 801cfb2:	2800      	cmp	r0, #0
 801cfb4:	bf08      	it	eq
 801cfb6:	4620      	moveq	r0, r4
 801cfb8:	bd38      	pop	{r3, r4, r5, pc}
	...

0801cfbc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801cfbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cfbe:	4604      	mov	r4, r0
 801cfc0:	4615      	mov	r5, r2
 801cfc2:	4608      	mov	r0, r1
 801cfc4:	b93a      	cbnz	r2, 801cfd6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801cfc6:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801cfca:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801cfce:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801cfd2:	4628      	mov	r0, r5
 801cfd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cfd6:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801cfda:	8893      	ldrh	r3, [r2, #4]
 801cfdc:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801cfe0:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801cfe4:	79ee      	ldrb	r6, [r5, #7]
 801cfe6:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801cfea:	4316      	orrs	r6, r2
 801cfec:	19da      	adds	r2, r3, r7
 801cfee:	b291      	uxth	r1, r2
 801cff0:	291d      	cmp	r1, #29
 801cff2:	b2b7      	uxth	r7, r6
 801cff4:	d87a      	bhi.n	801d0ec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x130>
 801cff6:	2201      	movs	r2, #1
 801cff8:	408a      	lsls	r2, r1
 801cffa:	4975      	ldr	r1, [pc, #468]	; (801d1d0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801cffc:	420a      	tst	r2, r1
 801cffe:	ea4f 06e6 	mov.w	r6, r6, asr #3
 801d002:	d12d      	bne.n	801d060 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801d004:	f412 7f60 	tst.w	r2, #896	; 0x380
 801d008:	d070      	beq.n	801d0ec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x130>
 801d00a:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801d00e:	462b      	mov	r3, r5
 801d010:	f105 0e08 	add.w	lr, r5, #8
 801d014:	4615      	mov	r5, r2
 801d016:	6818      	ldr	r0, [r3, #0]
 801d018:	6859      	ldr	r1, [r3, #4]
 801d01a:	4694      	mov	ip, r2
 801d01c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801d020:	3308      	adds	r3, #8
 801d022:	4573      	cmp	r3, lr
 801d024:	4662      	mov	r2, ip
 801d026:	d1f6      	bne.n	801d016 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801d028:	6818      	ldr	r0, [r3, #0]
 801d02a:	f8cc 0000 	str.w	r0, [ip]
 801d02e:	889b      	ldrh	r3, [r3, #4]
 801d030:	f8ac 3004 	strh.w	r3, [ip, #4]
 801d034:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801d038:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801d03c:	b2b3      	uxth	r3, r6
 801d03e:	1aca      	subs	r2, r1, r3
 801d040:	b292      	uxth	r2, r2
 801d042:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801d046:	10d2      	asrs	r2, r2, #3
 801d048:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801d04c:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801d050:	4302      	orrs	r2, r0
 801d052:	1bcf      	subs	r7, r1, r7
 801d054:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801d058:	1afb      	subs	r3, r7, r3
 801d05a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801d05e:	e7b8      	b.n	801cfd2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801d060:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801d062:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d066:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801d068:	f640 6333 	movw	r3, #3635	; 0xe33
 801d06c:	4299      	cmp	r1, r3
 801d06e:	d110      	bne.n	801d092 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801d070:	6803      	ldr	r3, [r0, #0]
 801d072:	68db      	ldr	r3, [r3, #12]
 801d074:	4798      	blx	r3
 801d076:	7b41      	ldrb	r1, [r0, #13]
 801d078:	00cb      	lsls	r3, r1, #3
 801d07a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d07e:	7a03      	ldrb	r3, [r0, #8]
 801d080:	0648      	lsls	r0, r1, #25
 801d082:	ea43 0302 	orr.w	r3, r3, r2
 801d086:	bf44      	itt	mi
 801d088:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d08c:	b21b      	sxthmi	r3, r3
 801d08e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d092:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801d096:	443b      	add	r3, r7
 801d098:	4433      	add	r3, r6
 801d09a:	b29b      	uxth	r3, r3
 801d09c:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801d0a0:	462a      	mov	r2, r5
 801d0a2:	f105 0c08 	add.w	ip, r5, #8
 801d0a6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d0aa:	4635      	mov	r5, r6
 801d0ac:	6810      	ldr	r0, [r2, #0]
 801d0ae:	6851      	ldr	r1, [r2, #4]
 801d0b0:	4637      	mov	r7, r6
 801d0b2:	c703      	stmia	r7!, {r0, r1}
 801d0b4:	3208      	adds	r2, #8
 801d0b6:	4562      	cmp	r2, ip
 801d0b8:	463e      	mov	r6, r7
 801d0ba:	d1f7      	bne.n	801d0ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801d0bc:	6810      	ldr	r0, [r2, #0]
 801d0be:	6038      	str	r0, [r7, #0]
 801d0c0:	8892      	ldrh	r2, [r2, #4]
 801d0c2:	80ba      	strh	r2, [r7, #4]
 801d0c4:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801d0c8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801d0cc:	10db      	asrs	r3, r3, #3
 801d0ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801d0d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d0d6:	4313      	orrs	r3, r2
 801d0d8:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801d0dc:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801d0e0:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801d0e4:	1a9b      	subs	r3, r3, r2
 801d0e6:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801d0ea:	e772      	b.n	801cfd2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801d0ec:	f023 0204 	bic.w	r2, r3, #4
 801d0f0:	f640 611b 	movw	r1, #3611	; 0xe1b
 801d0f4:	428a      	cmp	r2, r1
 801d0f6:	d003      	beq.n	801d100 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801d0f8:	f640 621d 	movw	r2, #3613	; 0xe1d
 801d0fc:	4293      	cmp	r3, r2
 801d0fe:	d120      	bne.n	801d142 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x186>
 801d100:	3b01      	subs	r3, #1
 801d102:	4602      	mov	r2, r0
 801d104:	b29b      	uxth	r3, r3
 801d106:	4629      	mov	r1, r5
 801d108:	4620      	mov	r0, r4
 801d10a:	f7ff ff4b 	bl	801cfa4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d10e:	7b41      	ldrb	r1, [r0, #13]
 801d110:	00cb      	lsls	r3, r1, #3
 801d112:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d116:	7a03      	ldrb	r3, [r0, #8]
 801d118:	0649      	lsls	r1, r1, #25
 801d11a:	ea43 0302 	orr.w	r3, r3, r2
 801d11e:	bf44      	itt	mi
 801d120:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d124:	b21b      	sxthmi	r3, r3
 801d126:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d12a:	7b6b      	ldrb	r3, [r5, #13]
 801d12c:	7aaa      	ldrb	r2, [r5, #10]
 801d12e:	005b      	lsls	r3, r3, #1
 801d130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d134:	4313      	orrs	r3, r2
 801d136:	115a      	asrs	r2, r3, #5
 801d138:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801d13c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801d140:	e036      	b.n	801d1b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 801d142:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801d146:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801d14a:	7a2a      	ldrb	r2, [r5, #8]
 801d14c:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801d150:	ea42 0201 	orr.w	r2, r2, r1
 801d154:	bf1c      	itt	ne
 801d156:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801d15a:	b212      	sxthne	r2, r2
 801d15c:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801d160:	f640 6109 	movw	r1, #3593	; 0xe09
 801d164:	f023 0210 	bic.w	r2, r3, #16
 801d168:	428a      	cmp	r2, r1
 801d16a:	d003      	beq.n	801d174 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b8>
 801d16c:	f640 6213 	movw	r2, #3603	; 0xe13
 801d170:	4293      	cmp	r3, r2
 801d172:	d12a      	bne.n	801d1ca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801d174:	7b6e      	ldrb	r6, [r5, #13]
 801d176:	0076      	lsls	r6, r6, #1
 801d178:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801d17c:	7aae      	ldrb	r6, [r5, #10]
 801d17e:	4316      	orrs	r6, r2
 801d180:	f640 6213 	movw	r2, #3603	; 0xe13
 801d184:	4293      	cmp	r3, r2
 801d186:	bf18      	it	ne
 801d188:	f103 33ff 	addne.w	r3, r3, #4294967295
 801d18c:	4602      	mov	r2, r0
 801d18e:	bf14      	ite	ne
 801d190:	b29b      	uxthne	r3, r3
 801d192:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801d196:	4629      	mov	r1, r5
 801d198:	4620      	mov	r0, r4
 801d19a:	f7ff ff03 	bl	801cfa4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d19e:	7b43      	ldrb	r3, [r0, #13]
 801d1a0:	7a82      	ldrb	r2, [r0, #10]
 801d1a2:	005b      	lsls	r3, r3, #1
 801d1a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d1a8:	4313      	orrs	r3, r2
 801d1aa:	1af6      	subs	r6, r6, r3
 801d1ac:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801d1b0:	7b69      	ldrb	r1, [r5, #13]
 801d1b2:	00cb      	lsls	r3, r1, #3
 801d1b4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d1b8:	7a2b      	ldrb	r3, [r5, #8]
 801d1ba:	4313      	orrs	r3, r2
 801d1bc:	064a      	lsls	r2, r1, #25
 801d1be:	bf44      	itt	mi
 801d1c0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d1c4:	b21b      	sxthmi	r3, r3
 801d1c6:	1bdb      	subs	r3, r3, r7
 801d1c8:	e747      	b.n	801d05a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801d1ca:	2300      	movs	r3, #0
 801d1cc:	e7b6      	b.n	801d13c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x180>
 801d1ce:	bf00      	nop
 801d1d0:	3fc00079 	.word	0x3fc00079

0801d1d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801d1d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d1d8:	4604      	mov	r4, r0
 801d1da:	b942      	cbnz	r2, 801d1ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801d1dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d1e0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801d1e4:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801d1e8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801d1ec:	e047      	b.n	801d27e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801d1ee:	7b51      	ldrb	r1, [r2, #13]
 801d1f0:	8893      	ldrh	r3, [r2, #4]
 801d1f2:	010d      	lsls	r5, r1, #4
 801d1f4:	f405 7080 	and.w	r0, r5, #256	; 0x100
 801d1f8:	79d5      	ldrb	r5, [r2, #7]
 801d1fa:	4305      	orrs	r5, r0
 801d1fc:	2d04      	cmp	r5, #4
 801d1fe:	bfcc      	ite	gt
 801d200:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801d204:	f04f 0e01 	movle.w	lr, #1
 801d208:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801d20c:	f200 80ab 	bhi.w	801d366 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801d210:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801d214:	4283      	cmp	r3, r0
 801d216:	d216      	bcs.n	801d246 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d218:	f240 605b 	movw	r0, #1627	; 0x65b
 801d21c:	4283      	cmp	r3, r0
 801d21e:	d859      	bhi.n	801d2d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801d220:	f240 6057 	movw	r0, #1623	; 0x657
 801d224:	4283      	cmp	r3, r0
 801d226:	d20e      	bcs.n	801d246 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d228:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801d22c:	d24a      	bcs.n	801d2c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801d22e:	f240 604e 	movw	r0, #1614	; 0x64e
 801d232:	4283      	cmp	r3, r0
 801d234:	d207      	bcs.n	801d246 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d236:	f240 601a 	movw	r0, #1562	; 0x61a
 801d23a:	4283      	cmp	r3, r0
 801d23c:	d02a      	beq.n	801d294 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d23e:	d821      	bhi.n	801d284 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801d240:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801d244:	d35b      	bcc.n	801d2fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d246:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801d24a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801d24e:	f040 80d0 	bne.w	801d3f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801d252:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801d256:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801d25a:	f040 80ca 	bne.w	801d3f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801d25e:	00cb      	lsls	r3, r1, #3
 801d260:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801d264:	7a13      	ldrb	r3, [r2, #8]
 801d266:	0649      	lsls	r1, r1, #25
 801d268:	ea43 0300 	orr.w	r3, r3, r0
 801d26c:	bf44      	itt	mi
 801d26e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d272:	b21b      	sxthmi	r3, r3
 801d274:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d278:	1b5d      	subs	r5, r3, r5
 801d27a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801d27e:	4610      	mov	r0, r2
 801d280:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d284:	f240 604b 	movw	r0, #1611	; 0x64b
 801d288:	4283      	cmp	r3, r0
 801d28a:	d338      	bcc.n	801d2fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d28c:	f240 604c 	movw	r0, #1612	; 0x64c
 801d290:	4283      	cmp	r3, r0
 801d292:	d9d8      	bls.n	801d246 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d294:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801d298:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801d29c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801d2a0:	f040 80f2 	bne.w	801d488 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 801d2a4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801d2a8:	f040 80ee 	bne.w	801d488 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 801d2ac:	00cb      	lsls	r3, r1, #3
 801d2ae:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801d2b2:	7a13      	ldrb	r3, [r2, #8]
 801d2b4:	064e      	lsls	r6, r1, #25
 801d2b6:	ea43 0300 	orr.w	r3, r3, r0
 801d2ba:	bf44      	itt	mi
 801d2bc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d2c0:	b21b      	sxthmi	r3, r3
 801d2c2:	e7d9      	b.n	801d278 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801d2c4:	f240 6054 	movw	r0, #1620	; 0x654
 801d2c8:	4283      	cmp	r3, r0
 801d2ca:	d8e3      	bhi.n	801d294 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d2cc:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801d2d0:	d9e0      	bls.n	801d294 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d2d2:	e7b8      	b.n	801d246 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d2d4:	f240 6074 	movw	r0, #1652	; 0x674
 801d2d8:	4283      	cmp	r3, r0
 801d2da:	d0b4      	beq.n	801d246 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d2dc:	d82d      	bhi.n	801d33a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801d2de:	f240 605e 	movw	r0, #1630	; 0x65e
 801d2e2:	4283      	cmp	r3, r0
 801d2e4:	d804      	bhi.n	801d2f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801d2e6:	f240 605d 	movw	r0, #1629	; 0x65d
 801d2ea:	4283      	cmp	r3, r0
 801d2ec:	d3d2      	bcc.n	801d294 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d2ee:	e7aa      	b.n	801d246 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d2f0:	f240 605f 	movw	r0, #1631	; 0x65f
 801d2f4:	4283      	cmp	r3, r0
 801d2f6:	d0cd      	beq.n	801d294 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d2f8:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801d2fc:	d0a3      	beq.n	801d246 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d2fe:	00cb      	lsls	r3, r1, #3
 801d300:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801d304:	7a13      	ldrb	r3, [r2, #8]
 801d306:	0649      	lsls	r1, r1, #25
 801d308:	ea43 0300 	orr.w	r3, r3, r0
 801d30c:	bf44      	itt	mi
 801d30e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d312:	b21b      	sxthmi	r3, r3
 801d314:	1b5d      	subs	r5, r3, r5
 801d316:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d31a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801d31e:	7b53      	ldrb	r3, [r2, #13]
 801d320:	015b      	lsls	r3, r3, #5
 801d322:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801d326:	7993      	ldrb	r3, [r2, #6]
 801d328:	430b      	orrs	r3, r1
 801d32a:	005b      	lsls	r3, r3, #1
 801d32c:	2105      	movs	r1, #5
 801d32e:	fb93 f3f1 	sdiv	r3, r3, r1
 801d332:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801d336:	440b      	add	r3, r1
 801d338:	e756      	b.n	801d1e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801d33a:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801d33e:	4283      	cmp	r3, r0
 801d340:	d809      	bhi.n	801d356 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801d342:	f240 60df 	movw	r0, #1759	; 0x6df
 801d346:	4283      	cmp	r3, r0
 801d348:	f4bf af7d 	bcs.w	801d246 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d34c:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801d350:	2b05      	cmp	r3, #5
 801d352:	d8d4      	bhi.n	801d2fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d354:	e777      	b.n	801d246 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d356:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801d35a:	4283      	cmp	r3, r0
 801d35c:	d09a      	beq.n	801d294 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d35e:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801d362:	4283      	cmp	r3, r0
 801d364:	e7ca      	b.n	801d2fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801d366:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801d36a:	d22b      	bcs.n	801d3c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801d36c:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801d370:	4283      	cmp	r3, r0
 801d372:	d28f      	bcs.n	801d294 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d374:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801d378:	4283      	cmp	r3, r0
 801d37a:	d816      	bhi.n	801d3aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801d37c:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801d380:	4283      	cmp	r3, r0
 801d382:	f4bf af60 	bcs.w	801d246 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d386:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801d38a:	4283      	cmp	r3, r0
 801d38c:	d80a      	bhi.n	801d3a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801d38e:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801d392:	4283      	cmp	r3, r0
 801d394:	f4bf af57 	bcs.w	801d246 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d398:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801d39c:	4283      	cmp	r3, r0
 801d39e:	f43f af79 	beq.w	801d294 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d3a2:	e7ac      	b.n	801d2fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d3a4:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801d3a8:	e7f8      	b.n	801d39c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801d3aa:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801d3ae:	4283      	cmp	r3, r0
 801d3b0:	d802      	bhi.n	801d3b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801d3b2:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801d3b6:	e798      	b.n	801d2ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801d3b8:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801d3bc:	4283      	cmp	r3, r0
 801d3be:	f47f af42 	bne.w	801d246 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d3c2:	e767      	b.n	801d294 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d3c4:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801d3c8:	4283      	cmp	r3, r0
 801d3ca:	f43f af63 	beq.w	801d294 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d3ce:	d802      	bhi.n	801d3d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801d3d0:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801d3d4:	e7f2      	b.n	801d3bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801d3d6:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801d3da:	4283      	cmp	r3, r0
 801d3dc:	d805      	bhi.n	801d3ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801d3de:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801d3e2:	4283      	cmp	r3, r0
 801d3e4:	f4ff af2f 	bcc.w	801d246 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d3e8:	e754      	b.n	801d294 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d3ea:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801d3ee:	4283      	cmp	r3, r0
 801d3f0:	e7af      	b.n	801d352 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801d3f2:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801d3f6:	4617      	mov	r7, r2
 801d3f8:	f102 0808 	add.w	r8, r2, #8
 801d3fc:	4666      	mov	r6, ip
 801d3fe:	6838      	ldr	r0, [r7, #0]
 801d400:	6879      	ldr	r1, [r7, #4]
 801d402:	46e6      	mov	lr, ip
 801d404:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801d408:	3708      	adds	r7, #8
 801d40a:	4547      	cmp	r7, r8
 801d40c:	46f4      	mov	ip, lr
 801d40e:	d1f6      	bne.n	801d3fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801d410:	6838      	ldr	r0, [r7, #0]
 801d412:	f8ce 0000 	str.w	r0, [lr]
 801d416:	88b9      	ldrh	r1, [r7, #4]
 801d418:	f8ae 1004 	strh.w	r1, [lr, #4]
 801d41c:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801d420:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801d424:	d009      	beq.n	801d43a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801d426:	7b51      	ldrb	r1, [r2, #13]
 801d428:	7992      	ldrb	r2, [r2, #6]
 801d42a:	0149      	lsls	r1, r1, #5
 801d42c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801d430:	4311      	orrs	r1, r2
 801d432:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801d436:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801d43a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801d43e:	b2ad      	uxth	r5, r5
 801d440:	d00d      	beq.n	801d45e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 801d442:	442b      	add	r3, r5
 801d444:	b29b      	uxth	r3, r3
 801d446:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801d44a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801d44e:	10db      	asrs	r3, r3, #3
 801d450:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801d454:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d458:	4313      	orrs	r3, r2
 801d45a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801d45e:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801d462:	00cb      	lsls	r3, r1, #3
 801d464:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d468:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801d46c:	064f      	lsls	r7, r1, #25
 801d46e:	ea43 0302 	orr.w	r3, r3, r2
 801d472:	bf44      	itt	mi
 801d474:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d478:	b21b      	sxthmi	r3, r3
 801d47a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d47e:	1b5b      	subs	r3, r3, r5
 801d480:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801d484:	4632      	mov	r2, r6
 801d486:	e6fa      	b.n	801d27e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801d488:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801d48c:	4617      	mov	r7, r2
 801d48e:	f102 0908 	add.w	r9, r2, #8
 801d492:	4666      	mov	r6, ip
 801d494:	6838      	ldr	r0, [r7, #0]
 801d496:	6879      	ldr	r1, [r7, #4]
 801d498:	46e0      	mov	r8, ip
 801d49a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801d49e:	3708      	adds	r7, #8
 801d4a0:	454f      	cmp	r7, r9
 801d4a2:	46c4      	mov	ip, r8
 801d4a4:	d1f6      	bne.n	801d494 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 801d4a6:	6838      	ldr	r0, [r7, #0]
 801d4a8:	f8c8 0000 	str.w	r0, [r8]
 801d4ac:	88b9      	ldrh	r1, [r7, #4]
 801d4ae:	f8a8 1004 	strh.w	r1, [r8, #4]
 801d4b2:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801d4b6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801d4ba:	d009      	beq.n	801d4d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 801d4bc:	7b51      	ldrb	r1, [r2, #13]
 801d4be:	7992      	ldrb	r2, [r2, #6]
 801d4c0:	0149      	lsls	r1, r1, #5
 801d4c2:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801d4c6:	4311      	orrs	r1, r2
 801d4c8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801d4cc:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801d4d0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801d4d4:	d00e      	beq.n	801d4f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 801d4d6:	eba3 030e 	sub.w	r3, r3, lr
 801d4da:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801d4de:	b29b      	uxth	r3, r3
 801d4e0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801d4e4:	10db      	asrs	r3, r3, #3
 801d4e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d4ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801d4ee:	4313      	orrs	r3, r2
 801d4f0:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801d4f4:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801d4f8:	00cb      	lsls	r3, r1, #3
 801d4fa:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d4fe:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801d502:	0648      	lsls	r0, r1, #25
 801d504:	ea43 0302 	orr.w	r3, r3, r2
 801d508:	bf44      	itt	mi
 801d50a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d50e:	b21b      	sxthmi	r3, r3
 801d510:	1b5d      	subs	r5, r3, r5
 801d512:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801d516:	e7b5      	b.n	801d484 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

0801d518 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801d518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d51c:	461e      	mov	r6, r3
 801d51e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801d520:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d524:	4604      	mov	r4, r0
 801d526:	4617      	mov	r7, r2
 801d528:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801d52c:	f7f6 fa82 	bl	8013a34 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d530:	4605      	mov	r5, r0
 801d532:	b918      	cbnz	r0, 801d53c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801d534:	6030      	str	r0, [r6, #0]
 801d536:	4628      	mov	r0, r5
 801d538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d53c:	683b      	ldr	r3, [r7, #0]
 801d53e:	4601      	mov	r1, r0
 801d540:	68db      	ldr	r3, [r3, #12]
 801d542:	4638      	mov	r0, r7
 801d544:	4798      	blx	r3
 801d546:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801d54a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801d54e:	4602      	mov	r2, r0
 801d550:	6030      	str	r0, [r6, #0]
 801d552:	d213      	bcs.n	801d57c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801d554:	4643      	mov	r3, r8
 801d556:	4639      	mov	r1, r7
 801d558:	4620      	mov	r0, r4
 801d55a:	f7ff fe3b 	bl	801d1d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801d55e:	6030      	str	r0, [r6, #0]
 801d560:	6833      	ldr	r3, [r6, #0]
 801d562:	b143      	cbz	r3, 801d576 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801d564:	7b5a      	ldrb	r2, [r3, #13]
 801d566:	7a9b      	ldrb	r3, [r3, #10]
 801d568:	0052      	lsls	r2, r2, #1
 801d56a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801d56e:	4313      	orrs	r3, r2
 801d570:	bf0c      	ite	eq
 801d572:	2301      	moveq	r3, #1
 801d574:	2300      	movne	r3, #0
 801d576:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801d57a:	e7dc      	b.n	801d536 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801d57c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801d580:	b29b      	uxth	r3, r3
 801d582:	2b7f      	cmp	r3, #127	; 0x7f
 801d584:	d804      	bhi.n	801d590 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801d586:	4639      	mov	r1, r7
 801d588:	4620      	mov	r0, r4
 801d58a:	f7ff fd17 	bl	801cfbc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801d58e:	e7e6      	b.n	801d55e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801d590:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801d594:	2b00      	cmp	r3, #0
 801d596:	d0e3      	beq.n	801d560 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801d598:	f640 1302 	movw	r3, #2306	; 0x902
 801d59c:	429d      	cmp	r5, r3
 801d59e:	d1df      	bne.n	801d560 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801d5a0:	4601      	mov	r1, r0
 801d5a2:	4620      	mov	r0, r4
 801d5a4:	f7ff fcdb 	bl	801cf5e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801d5a8:	e7d9      	b.n	801d55e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801d5aa <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801d5aa:	b510      	push	{r4, lr}
 801d5ac:	4604      	mov	r4, r0
 801d5ae:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801d5b2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801d5b4:	b1f1      	cbz	r1, 801d5f4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 801d5b6:	2b0a      	cmp	r3, #10
 801d5b8:	d02f      	beq.n	801d61a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 801d5ba:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801d5bc:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801d5c0:	3901      	subs	r1, #1
 801d5c2:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801d5c4:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801d5c8:	1c51      	adds	r1, r2, #1
 801d5ca:	b289      	uxth	r1, r1
 801d5cc:	2901      	cmp	r1, #1
 801d5ce:	bf84      	itt	hi
 801d5d0:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801d5d4:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801d5d6:	f103 0201 	add.w	r2, r3, #1
 801d5da:	8722      	strh	r2, [r4, #56]	; 0x38
 801d5dc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801d5de:	bf98      	it	ls
 801d5e0:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801d5e2:	4413      	add	r3, r2
 801d5e4:	b29b      	uxth	r3, r3
 801d5e6:	2b09      	cmp	r3, #9
 801d5e8:	bf88      	it	hi
 801d5ea:	3b0a      	subhi	r3, #10
 801d5ec:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d5f0:	8458      	strh	r0, [r3, #34]	; 0x22
 801d5f2:	e7dc      	b.n	801d5ae <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801d5f4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801d5f6:	2b0a      	cmp	r3, #10
 801d5f8:	d00f      	beq.n	801d61a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 801d5fa:	4620      	mov	r0, r4
 801d5fc:	f7ff fc6e 	bl	801cedc <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801d600:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801d602:	1c5a      	adds	r2, r3, #1
 801d604:	8722      	strh	r2, [r4, #56]	; 0x38
 801d606:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801d608:	4413      	add	r3, r2
 801d60a:	b29b      	uxth	r3, r3
 801d60c:	2b09      	cmp	r3, #9
 801d60e:	bf88      	it	hi
 801d610:	3b0a      	subhi	r3, #10
 801d612:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d616:	8458      	strh	r0, [r3, #34]	; 0x22
 801d618:	e7ec      	b.n	801d5f4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 801d61a:	bd10      	pop	{r4, pc}

0801d61c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801d61c:	b538      	push	{r3, r4, r5, lr}
 801d61e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801d620:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801d624:	4604      	mov	r4, r0
 801d626:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801d628:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801d62a:	3a01      	subs	r2, #1
 801d62c:	8702      	strh	r2, [r0, #56]	; 0x38
 801d62e:	1c5a      	adds	r2, r3, #1
 801d630:	b292      	uxth	r2, r2
 801d632:	2a09      	cmp	r2, #9
 801d634:	bf86      	itte	hi
 801d636:	3b09      	subhi	r3, #9
 801d638:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801d63a:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801d63c:	f7ff ffb5 	bl	801d5aa <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801d640:	8c23      	ldrh	r3, [r4, #32]
 801d642:	2b01      	cmp	r3, #1
 801d644:	bf9c      	itt	ls
 801d646:	3301      	addls	r3, #1
 801d648:	8423      	strhls	r3, [r4, #32]
 801d64a:	8be3      	ldrh	r3, [r4, #30]
 801d64c:	b90b      	cbnz	r3, 801d652 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801d64e:	2302      	movs	r3, #2
 801d650:	83e3      	strh	r3, [r4, #30]
 801d652:	8be3      	ldrh	r3, [r4, #30]
 801d654:	3b01      	subs	r3, #1
 801d656:	b29b      	uxth	r3, r3
 801d658:	83e3      	strh	r3, [r4, #30]
 801d65a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d65e:	4628      	mov	r0, r5
 801d660:	8365      	strh	r5, [r4, #26]
 801d662:	bd38      	pop	{r3, r4, r5, pc}

0801d664 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801d664:	428a      	cmp	r2, r1
 801d666:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d66a:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 801d66c:	d931      	bls.n	801d6d2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 801d66e:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801d670:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801d674:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801d678:	19ee      	adds	r6, r5, r7
 801d67a:	1a54      	subs	r4, r2, r1
 801d67c:	3e01      	subs	r6, #1
 801d67e:	fa1f fe84 	uxth.w	lr, r4
 801d682:	b2b4      	uxth	r4, r6
 801d684:	eba4 090e 	sub.w	r9, r4, lr
 801d688:	fa1f f989 	uxth.w	r9, r9
 801d68c:	2c09      	cmp	r4, #9
 801d68e:	4626      	mov	r6, r4
 801d690:	bf88      	it	hi
 801d692:	f1a4 060a 	subhi.w	r6, r4, #10
 801d696:	f1bc 0f00 	cmp.w	ip, #0
 801d69a:	bf08      	it	eq
 801d69c:	f04f 0c02 	moveq.w	ip, #2
 801d6a0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801d6a4:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d6a8:	fa1f fc8c 	uxth.w	ip, ip
 801d6ac:	3c01      	subs	r4, #1
 801d6ae:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801d6b2:	b2a4      	uxth	r4, r4
 801d6b4:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801d6b8:	454c      	cmp	r4, r9
 801d6ba:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801d6be:	d1e5      	bne.n	801d68c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801d6c0:	eba5 050e 	sub.w	r5, r5, lr
 801d6c4:	eb0e 0408 	add.w	r4, lr, r8
 801d6c8:	8705      	strh	r5, [r0, #56]	; 0x38
 801d6ca:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 801d6ce:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801d6d2:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801d6d4:	1a64      	subs	r4, r4, r1
 801d6d6:	4439      	add	r1, r7
 801d6d8:	b289      	uxth	r1, r1
 801d6da:	2909      	cmp	r1, #9
 801d6dc:	bf88      	it	hi
 801d6de:	390a      	subhi	r1, #10
 801d6e0:	8704      	strh	r4, [r0, #56]	; 0x38
 801d6e2:	86c1      	strh	r1, [r0, #54]	; 0x36
 801d6e4:	250a      	movs	r5, #10
 801d6e6:	b18a      	cbz	r2, 801d70c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 801d6e8:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801d6ea:	3a01      	subs	r2, #1
 801d6ec:	b292      	uxth	r2, r2
 801d6ee:	3101      	adds	r1, #1
 801d6f0:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801d6f4:	8701      	strh	r1, [r0, #56]	; 0x38
 801d6f6:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801d6f8:	b901      	cbnz	r1, 801d6fc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 801d6fa:	86c5      	strh	r5, [r0, #54]	; 0x36
 801d6fc:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801d6fe:	3901      	subs	r1, #1
 801d700:	b289      	uxth	r1, r1
 801d702:	86c1      	strh	r1, [r0, #54]	; 0x36
 801d704:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801d708:	844c      	strh	r4, [r1, #34]	; 0x22
 801d70a:	e7ec      	b.n	801d6e6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 801d70c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d710:	f7ff bf4b 	b.w	801d5aa <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801d714 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801d714:	b570      	push	{r4, r5, r6, lr}
 801d716:	2500      	movs	r5, #0
 801d718:	4295      	cmp	r5, r2
 801d71a:	d011      	beq.n	801d740 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801d71c:	8bc4      	ldrh	r4, [r0, #30]
 801d71e:	f831 6b02 	ldrh.w	r6, [r1], #2
 801d722:	4414      	add	r4, r2
 801d724:	3c01      	subs	r4, #1
 801d726:	1b64      	subs	r4, r4, r5
 801d728:	b2a4      	uxth	r4, r4
 801d72a:	2c01      	cmp	r4, #1
 801d72c:	bf88      	it	hi
 801d72e:	3c02      	subhi	r4, #2
 801d730:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801d734:	8b64      	ldrh	r4, [r4, #26]
 801d736:	42b4      	cmp	r4, r6
 801d738:	d117      	bne.n	801d76a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801d73a:	3501      	adds	r5, #1
 801d73c:	b2ad      	uxth	r5, r5
 801d73e:	e7eb      	b.n	801d718 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801d740:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d744:	2400      	movs	r4, #0
 801d746:	4413      	add	r3, r2
 801d748:	b2a2      	uxth	r2, r4
 801d74a:	429a      	cmp	r2, r3
 801d74c:	da0f      	bge.n	801d76e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801d74e:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801d750:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801d754:	4432      	add	r2, r6
 801d756:	b292      	uxth	r2, r2
 801d758:	2a09      	cmp	r2, #9
 801d75a:	bf88      	it	hi
 801d75c:	3a0a      	subhi	r2, #10
 801d75e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801d762:	3401      	adds	r4, #1
 801d764:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801d766:	42aa      	cmp	r2, r5
 801d768:	d0ee      	beq.n	801d748 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801d76a:	2000      	movs	r0, #0
 801d76c:	bd70      	pop	{r4, r5, r6, pc}
 801d76e:	2001      	movs	r0, #1
 801d770:	e7fc      	b.n	801d76c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801d772 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801d772:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d776:	4605      	mov	r5, r0
 801d778:	4616      	mov	r6, r2
 801d77a:	1c8c      	adds	r4, r1, #2
 801d77c:	8809      	ldrh	r1, [r1, #0]
 801d77e:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801d782:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801d786:	42b3      	cmp	r3, r6
 801d788:	d124      	bne.n	801d7d4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801d78a:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801d78e:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801d792:	f001 070f 	and.w	r7, r1, #15
 801d796:	f8cd 8000 	str.w	r8, [sp]
 801d79a:	464b      	mov	r3, r9
 801d79c:	4652      	mov	r2, sl
 801d79e:	4621      	mov	r1, r4
 801d7a0:	4628      	mov	r0, r5
 801d7a2:	f7ff ffb7 	bl	801d714 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801d7a6:	4683      	mov	fp, r0
 801d7a8:	b168      	cbz	r0, 801d7c6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801d7aa:	eb0a 0109 	add.w	r1, sl, r9
 801d7ae:	4441      	add	r1, r8
 801d7b0:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801d7b4:	463a      	mov	r2, r7
 801d7b6:	4649      	mov	r1, r9
 801d7b8:	4628      	mov	r0, r5
 801d7ba:	f7ff ff53 	bl	801d664 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801d7be:	4658      	mov	r0, fp
 801d7c0:	b003      	add	sp, #12
 801d7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d7c6:	eb07 010a 	add.w	r1, r7, sl
 801d7ca:	4449      	add	r1, r9
 801d7cc:	4441      	add	r1, r8
 801d7ce:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801d7d2:	e7d2      	b.n	801d77a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801d7d4:	f04f 0b00 	mov.w	fp, #0
 801d7d8:	e7f1      	b.n	801d7be <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801d7da <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801d7da:	b570      	push	{r4, r5, r6, lr}
 801d7dc:	8810      	ldrh	r0, [r2, #0]
 801d7de:	4298      	cmp	r0, r3
 801d7e0:	d817      	bhi.n	801d812 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d7e2:	1e48      	subs	r0, r1, #1
 801d7e4:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801d7e8:	4298      	cmp	r0, r3
 801d7ea:	d312      	bcc.n	801d812 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d7ec:	2400      	movs	r4, #0
 801d7ee:	428c      	cmp	r4, r1
 801d7f0:	d20f      	bcs.n	801d812 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d7f2:	1860      	adds	r0, r4, r1
 801d7f4:	1040      	asrs	r0, r0, #1
 801d7f6:	0085      	lsls	r5, r0, #2
 801d7f8:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801d7fc:	42b3      	cmp	r3, r6
 801d7fe:	d902      	bls.n	801d806 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801d800:	3001      	adds	r0, #1
 801d802:	b284      	uxth	r4, r0
 801d804:	e7f3      	b.n	801d7ee <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d806:	d201      	bcs.n	801d80c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801d808:	b281      	uxth	r1, r0
 801d80a:	e7f0      	b.n	801d7ee <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d80c:	442a      	add	r2, r5
 801d80e:	8850      	ldrh	r0, [r2, #2]
 801d810:	bd70      	pop	{r4, r5, r6, pc}
 801d812:	2000      	movs	r0, #0
 801d814:	e7fc      	b.n	801d810 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801d816 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801d816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d81a:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801d81c:	886f      	ldrh	r7, [r5, #2]
 801d81e:	4604      	mov	r4, r0
 801d820:	087f      	lsrs	r7, r7, #1
 801d822:	260b      	movs	r6, #11
 801d824:	3e01      	subs	r6, #1
 801d826:	d013      	beq.n	801d850 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801d828:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801d82a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d82e:	462a      	mov	r2, r5
 801d830:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801d834:	4639      	mov	r1, r7
 801d836:	4643      	mov	r3, r8
 801d838:	4620      	mov	r0, r4
 801d83a:	f7ff ffce 	bl	801d7da <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801d83e:	b138      	cbz	r0, 801d850 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801d840:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801d844:	4642      	mov	r2, r8
 801d846:	4620      	mov	r0, r4
 801d848:	f7ff ff93 	bl	801d772 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801d84c:	2800      	cmp	r0, #0
 801d84e:	d1e9      	bne.n	801d824 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801d850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d854 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>:
 801d854:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d856:	b08d      	sub	sp, #52	; 0x34
 801d858:	2300      	movs	r3, #0
 801d85a:	9304      	str	r3, [sp, #16]
 801d85c:	9305      	str	r3, [sp, #20]
 801d85e:	9306      	str	r3, [sp, #24]
 801d860:	aa04      	add	r2, sp, #16
 801d862:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801d866:	9307      	str	r3, [sp, #28]
 801d868:	f100 0640 	add.w	r6, r0, #64	; 0x40
 801d86c:	4613      	mov	r3, r2
 801d86e:	f101 0710 	add.w	r7, r1, #16
 801d872:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801d8b0 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x5c>
 801d876:	460c      	mov	r4, r1
 801d878:	4605      	mov	r5, r0
 801d87a:	ecb4 7a01 	vldmia	r4!, {s14}
 801d87e:	ecf5 6a01 	vldmia	r5!, {s13}
 801d882:	42bc      	cmp	r4, r7
 801d884:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d888:	d1f7      	bne.n	801d87a <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x26>
 801d88a:	3010      	adds	r0, #16
 801d88c:	42b0      	cmp	r0, r6
 801d88e:	ece2 7a01 	vstmia	r2!, {s15}
 801d892:	d1ee      	bne.n	801d872 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x1e>
 801d894:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801d896:	ac0c      	add	r4, sp, #48	; 0x30
 801d898:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801d89c:	ed9d 0a08 	vldr	s0, [sp, #32]
 801d8a0:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
 801d8a4:	ed9d 1a0a 	vldr	s2, [sp, #40]	; 0x28
 801d8a8:	eddd 1a0b 	vldr	s3, [sp, #44]	; 0x2c
 801d8ac:	b00d      	add	sp, #52	; 0x34
 801d8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d8b0:	00000000 	.word	0x00000000

0801d8b4 <_ZN8touchgfx9Matrix4x4C1Ev>:
 801d8b4:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 801d8e4 <_ZN8touchgfx9Matrix4x4C1Ev+0x30>
 801d8b8:	2300      	movs	r3, #0
 801d8ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801d8be:	eb00 1103 	add.w	r1, r0, r3, lsl #4
 801d8c2:	2200      	movs	r2, #0
 801d8c4:	4293      	cmp	r3, r2
 801d8c6:	f102 0201 	add.w	r2, r2, #1
 801d8ca:	bf14      	ite	ne
 801d8cc:	eef0 6a47 	vmovne.f32	s13, s14
 801d8d0:	eef0 6a67 	vmoveq.f32	s13, s15
 801d8d4:	2a04      	cmp	r2, #4
 801d8d6:	ece1 6a01 	vstmia	r1!, {s13}
 801d8da:	d1f3      	bne.n	801d8c4 <_ZN8touchgfx9Matrix4x4C1Ev+0x10>
 801d8dc:	3301      	adds	r3, #1
 801d8de:	2b04      	cmp	r3, #4
 801d8e0:	d1ed      	bne.n	801d8be <_ZN8touchgfx9Matrix4x4C1Ev+0xa>
 801d8e2:	4770      	bx	lr
 801d8e4:	00000000 	.word	0x00000000

0801d8e8 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>:
 801d8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d8ec:	460c      	mov	r4, r1
 801d8ee:	4605      	mov	r5, r0
 801d8f0:	4690      	mov	r8, r2
 801d8f2:	f7ff ffdf 	bl	801d8b4 <_ZN8touchgfx9Matrix4x4C1Ev>
 801d8f6:	4628      	mov	r0, r5
 801d8f8:	4621      	mov	r1, r4
 801d8fa:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 801d8fe:	2300      	movs	r3, #0
 801d900:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801d940 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x58>
 801d904:	eb08 0603 	add.w	r6, r8, r3
 801d908:	460f      	mov	r7, r1
 801d90a:	2400      	movs	r4, #0
 801d90c:	4632      	mov	r2, r6
 801d90e:	ecf7 6a01 	vldmia	r7!, {s13}
 801d912:	ed92 7a00 	vldr	s14, [r2]
 801d916:	3401      	adds	r4, #1
 801d918:	2c04      	cmp	r4, #4
 801d91a:	f106 0610 	add.w	r6, r6, #16
 801d91e:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d922:	d1f3      	bne.n	801d90c <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x24>
 801d924:	18c2      	adds	r2, r0, r3
 801d926:	3304      	adds	r3, #4
 801d928:	2b10      	cmp	r3, #16
 801d92a:	edc2 7a00 	vstr	s15, [r2]
 801d92e:	d1e7      	bne.n	801d900 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x18>
 801d930:	3110      	adds	r1, #16
 801d932:	4561      	cmp	r1, ip
 801d934:	f100 0010 	add.w	r0, r0, #16
 801d938:	d1e1      	bne.n	801d8fe <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x16>
 801d93a:	4628      	mov	r0, r5
 801d93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d940:	00000000 	.word	0x00000000

0801d944 <_ZN8touchgfx9Matrix4x415setViewDistanceEf>:
 801d944:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801d948:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801d94c:	f100 0320 	add.w	r3, r0, #32
 801d950:	3030      	adds	r0, #48	; 0x30
 801d952:	ecf3 7a01 	vldmia	r3!, {s15}
 801d956:	ee60 7a27 	vmul.f32	s15, s0, s15
 801d95a:	4283      	cmp	r3, r0
 801d95c:	edc3 7a03 	vstr	s15, [r3, #12]
 801d960:	d1f7      	bne.n	801d952 <_ZN8touchgfx9Matrix4x415setViewDistanceEf+0xe>
 801d962:	4770      	bx	lr

0801d964 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>:
 801d964:	b510      	push	{r4, lr}
 801d966:	ed2d 8b02 	vpush	{d8}
 801d96a:	4604      	mov	r4, r0
 801d96c:	eef0 8a40 	vmov.f32	s17, s0
 801d970:	f00e fb56 	bl	802c020 <sinf>
 801d974:	eeb0 8a40 	vmov.f32	s16, s0
 801d978:	eeb0 0a68 	vmov.f32	s0, s17
 801d97c:	f00e fb0c 	bl	802bf98 <cosf>
 801d980:	f104 0310 	add.w	r3, r4, #16
 801d984:	f104 0220 	add.w	r2, r4, #32
 801d988:	eeb1 6a48 	vneg.f32	s12, s16
 801d98c:	edd3 7a04 	vldr	s15, [r3, #16]
 801d990:	edd3 6a00 	vldr	s13, [r3]
 801d994:	ee26 7a27 	vmul.f32	s14, s12, s15
 801d998:	ee67 7a80 	vmul.f32	s15, s15, s0
 801d99c:	eea6 7a80 	vfma.f32	s14, s13, s0
 801d9a0:	eee6 7a88 	vfma.f32	s15, s13, s16
 801d9a4:	eca3 7a01 	vstmia	r3!, {s14}
 801d9a8:	429a      	cmp	r2, r3
 801d9aa:	edc3 7a03 	vstr	s15, [r3, #12]
 801d9ae:	d1ed      	bne.n	801d98c <_ZN8touchgfx9Matrix4x420concatenateXRotationEf+0x28>
 801d9b0:	ecbd 8b02 	vpop	{d8}
 801d9b4:	4620      	mov	r0, r4
 801d9b6:	bd10      	pop	{r4, pc}

0801d9b8 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>:
 801d9b8:	b510      	push	{r4, lr}
 801d9ba:	ed2d 8b02 	vpush	{d8}
 801d9be:	4604      	mov	r4, r0
 801d9c0:	eef0 8a40 	vmov.f32	s17, s0
 801d9c4:	f00e fb2c 	bl	802c020 <sinf>
 801d9c8:	eeb0 8a40 	vmov.f32	s16, s0
 801d9cc:	eeb0 0a68 	vmov.f32	s0, s17
 801d9d0:	f00e fae2 	bl	802bf98 <cosf>
 801d9d4:	4623      	mov	r3, r4
 801d9d6:	f104 0210 	add.w	r2, r4, #16
 801d9da:	eeb1 6a48 	vneg.f32	s12, s16
 801d9de:	edd3 7a08 	vldr	s15, [r3, #32]
 801d9e2:	edd3 6a00 	vldr	s13, [r3]
 801d9e6:	ee27 7a88 	vmul.f32	s14, s15, s16
 801d9ea:	ee67 7a80 	vmul.f32	s15, s15, s0
 801d9ee:	eea6 7a80 	vfma.f32	s14, s13, s0
 801d9f2:	eee6 7a26 	vfma.f32	s15, s12, s13
 801d9f6:	eca3 7a01 	vstmia	r3!, {s14}
 801d9fa:	429a      	cmp	r2, r3
 801d9fc:	edc3 7a07 	vstr	s15, [r3, #28]
 801da00:	d1ed      	bne.n	801d9de <_ZN8touchgfx9Matrix4x420concatenateYRotationEf+0x26>
 801da02:	ecbd 8b02 	vpop	{d8}
 801da06:	4620      	mov	r0, r4
 801da08:	bd10      	pop	{r4, pc}

0801da0a <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>:
 801da0a:	b510      	push	{r4, lr}
 801da0c:	ed2d 8b02 	vpush	{d8}
 801da10:	4604      	mov	r4, r0
 801da12:	eef0 8a40 	vmov.f32	s17, s0
 801da16:	f00e fb03 	bl	802c020 <sinf>
 801da1a:	eeb0 8a40 	vmov.f32	s16, s0
 801da1e:	eeb0 0a68 	vmov.f32	s0, s17
 801da22:	f00e fab9 	bl	802bf98 <cosf>
 801da26:	4623      	mov	r3, r4
 801da28:	f104 0210 	add.w	r2, r4, #16
 801da2c:	eeb1 6a48 	vneg.f32	s12, s16
 801da30:	edd3 7a04 	vldr	s15, [r3, #16]
 801da34:	edd3 6a00 	vldr	s13, [r3]
 801da38:	ee26 7a27 	vmul.f32	s14, s12, s15
 801da3c:	ee67 7a80 	vmul.f32	s15, s15, s0
 801da40:	eea6 7a80 	vfma.f32	s14, s13, s0
 801da44:	eee6 7a88 	vfma.f32	s15, s13, s16
 801da48:	eca3 7a01 	vstmia	r3!, {s14}
 801da4c:	429a      	cmp	r2, r3
 801da4e:	edc3 7a03 	vstr	s15, [r3, #12]
 801da52:	d1ed      	bne.n	801da30 <_ZN8touchgfx9Matrix4x420concatenateZRotationEf+0x26>
 801da54:	ecbd 8b02 	vpop	{d8}
 801da58:	4620      	mov	r0, r4
 801da5a:	bd10      	pop	{r4, pc}

0801da5c <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>:
 801da5c:	4603      	mov	r3, r0
 801da5e:	f100 0210 	add.w	r2, r0, #16
 801da62:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 801da66:	edd3 7a00 	vldr	s15, [r3]
 801da6a:	eee7 7a00 	vfma.f32	s15, s14, s0
 801da6e:	ece3 7a01 	vstmia	r3!, {s15}
 801da72:	4293      	cmp	r3, r2
 801da74:	d1f5      	bne.n	801da62 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf+0x6>
 801da76:	4770      	bx	lr

0801da78 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>:
 801da78:	f100 0310 	add.w	r3, r0, #16
 801da7c:	f100 0220 	add.w	r2, r0, #32
 801da80:	ed93 7a08 	vldr	s14, [r3, #32]
 801da84:	edd3 7a00 	vldr	s15, [r3]
 801da88:	eee7 7a00 	vfma.f32	s15, s14, s0
 801da8c:	ece3 7a01 	vstmia	r3!, {s15}
 801da90:	4293      	cmp	r3, r2
 801da92:	d1f5      	bne.n	801da80 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf+0x8>
 801da94:	4770      	bx	lr

0801da96 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>:
 801da96:	f100 0320 	add.w	r3, r0, #32
 801da9a:	f100 0230 	add.w	r2, r0, #48	; 0x30
 801da9e:	ed93 7a04 	vldr	s14, [r3, #16]
 801daa2:	edd3 7a00 	vldr	s15, [r3]
 801daa6:	eee7 7a00 	vfma.f32	s15, s14, s0
 801daaa:	ece3 7a01 	vstmia	r3!, {s15}
 801daae:	4293      	cmp	r3, r2
 801dab0:	d1f5      	bne.n	801da9e <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf+0x8>
 801dab2:	4770      	bx	lr

0801dab4 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>:
 801dab4:	4603      	mov	r3, r0
 801dab6:	f100 0210 	add.w	r2, r0, #16
 801daba:	edd3 7a00 	vldr	s15, [r3]
 801dabe:	ee67 7a80 	vmul.f32	s15, s15, s0
 801dac2:	ece3 7a01 	vstmia	r3!, {s15}
 801dac6:	4293      	cmp	r3, r2
 801dac8:	d1f7      	bne.n	801daba <_ZN8touchgfx9Matrix4x417concatenateXScaleEf+0x6>
 801daca:	4770      	bx	lr

0801dacc <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>:
 801dacc:	f100 0310 	add.w	r3, r0, #16
 801dad0:	f100 0220 	add.w	r2, r0, #32
 801dad4:	edd3 7a00 	vldr	s15, [r3]
 801dad8:	ee67 7a80 	vmul.f32	s15, s15, s0
 801dadc:	ece3 7a01 	vstmia	r3!, {s15}
 801dae0:	4293      	cmp	r3, r2
 801dae2:	d1f7      	bne.n	801dad4 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf+0x8>
 801dae4:	4770      	bx	lr

0801dae6 <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>:
 801dae6:	f100 0320 	add.w	r3, r0, #32
 801daea:	f100 0230 	add.w	r2, r0, #48	; 0x30
 801daee:	edd3 7a00 	vldr	s15, [r3]
 801daf2:	ee67 7a80 	vmul.f32	s15, s15, s0
 801daf6:	ece3 7a01 	vstmia	r3!, {s15}
 801dafa:	4293      	cmp	r3, r2
 801dafc:	d1f7      	bne.n	801daee <_ZN8touchgfx9Matrix4x417concatenateZScaleEf+0x8>
 801dafe:	4770      	bx	lr

0801db00 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801db00:	b570      	push	{r4, r5, r6, lr}
 801db02:	694a      	ldr	r2, [r1, #20]
 801db04:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801db06:	684b      	ldr	r3, [r1, #4]
 801db08:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801db0a:	1b54      	subs	r4, r2, r5
 801db0c:	f000 8106 	beq.w	801dd1c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801db10:	1b9b      	subs	r3, r3, r6
 801db12:	d003      	beq.n	801db1c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801db14:	4363      	muls	r3, r4
 801db16:	2210      	movs	r2, #16
 801db18:	fb93 f3f2 	sdiv	r3, r3, r2
 801db1c:	680c      	ldr	r4, [r1, #0]
 801db1e:	698a      	ldr	r2, [r1, #24]
 801db20:	1b65      	subs	r5, r4, r5
 801db22:	f000 80fd 	beq.w	801dd20 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801db26:	1b92      	subs	r2, r2, r6
 801db28:	d003      	beq.n	801db32 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801db2a:	436a      	muls	r2, r5
 801db2c:	2410      	movs	r4, #16
 801db2e:	fb92 f2f4 	sdiv	r2, r2, r4
 801db32:	1a9b      	subs	r3, r3, r2
 801db34:	ee07 3a90 	vmov	s15, r3
 801db38:	ed9f 4a88 	vldr	s8, [pc, #544]	; 801dd5c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801db3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801db40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801db44:	ee67 7a84 	vmul.f32	s15, s15, s8
 801db48:	460a      	mov	r2, r1
 801db4a:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801db4e:	4603      	mov	r3, r0
 801db50:	f100 040c 	add.w	r4, r0, #12
 801db54:	eeb1 6a43 	vneg.f32	s12, s6
 801db58:	edd2 7a02 	vldr	s15, [r2, #8]
 801db5c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801db60:	3214      	adds	r2, #20
 801db62:	ece3 6a01 	vstmia	r3!, {s13}
 801db66:	ed52 7a02 	vldr	s15, [r2, #-8]
 801db6a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801db6e:	429c      	cmp	r4, r3
 801db70:	edc3 7a02 	vstr	s15, [r3, #8]
 801db74:	ed52 7a01 	vldr	s15, [r2, #-4]
 801db78:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801db7c:	edc3 7a05 	vstr	s15, [r3, #20]
 801db80:	d1ea      	bne.n	801db58 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801db82:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801db84:	698b      	ldr	r3, [r1, #24]
 801db86:	edd0 4a02 	vldr	s9, [r0, #8]
 801db8a:	edd0 3a00 	vldr	s7, [r0]
 801db8e:	edd0 6a01 	vldr	s13, [r0, #4]
 801db92:	ed90 5a05 	vldr	s10, [r0, #20]
 801db96:	ed90 2a03 	vldr	s4, [r0, #12]
 801db9a:	edd0 5a04 	vldr	s11, [r0, #16]
 801db9e:	ed90 1a07 	vldr	s2, [r0, #28]
 801dba2:	edd0 2a06 	vldr	s5, [r0, #24]
 801dba6:	1a9b      	subs	r3, r3, r2
 801dba8:	ee07 3a90 	vmov	s15, r3
 801dbac:	684b      	ldr	r3, [r1, #4]
 801dbae:	1a9b      	subs	r3, r3, r2
 801dbb0:	ee07 3a10 	vmov	s14, r3
 801dbb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dbb8:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801dbbc:	ee67 7a84 	vmul.f32	s15, s15, s8
 801dbc0:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801dbc4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dbc8:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801dbcc:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dbd0:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801dbd4:	eee6 7a87 	vfma.f32	s15, s13, s14
 801dbd8:	ee32 5a45 	vsub.f32	s10, s4, s10
 801dbdc:	ee67 7a83 	vmul.f32	s15, s15, s6
 801dbe0:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801dbe4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801dbe6:	694a      	ldr	r2, [r1, #20]
 801dbe8:	1b13      	subs	r3, r2, r4
 801dbea:	ee07 3a10 	vmov	s14, r3
 801dbee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dbf2:	680b      	ldr	r3, [r1, #0]
 801dbf4:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dbf8:	1b1b      	subs	r3, r3, r4
 801dbfa:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801dbfe:	ee07 3a10 	vmov	s14, r3
 801dc02:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dc06:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dc0a:	eee6 4a87 	vfma.f32	s9, s13, s14
 801dc0e:	ee64 4a86 	vmul.f32	s9, s9, s12
 801dc12:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801dc16:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801dc18:	698b      	ldr	r3, [r1, #24]
 801dc1a:	1a9b      	subs	r3, r3, r2
 801dc1c:	ee06 3a90 	vmov	s13, r3
 801dc20:	684b      	ldr	r3, [r1, #4]
 801dc22:	1a9b      	subs	r3, r3, r2
 801dc24:	ee07 3a10 	vmov	s14, r3
 801dc28:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801dc2c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dc30:	ee66 6a84 	vmul.f32	s13, s13, s8
 801dc34:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dc38:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801dc3c:	eee5 6a87 	vfma.f32	s13, s11, s14
 801dc40:	ee66 6a83 	vmul.f32	s13, s13, s6
 801dc44:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801dc48:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801dc4a:	694a      	ldr	r2, [r1, #20]
 801dc4c:	1b13      	subs	r3, r2, r4
 801dc4e:	ee07 3a10 	vmov	s14, r3
 801dc52:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dc56:	680b      	ldr	r3, [r1, #0]
 801dc58:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dc5c:	1b1b      	subs	r3, r3, r4
 801dc5e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801dc62:	ee07 3a10 	vmov	s14, r3
 801dc66:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dc6a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dc6e:	eea5 5a87 	vfma.f32	s10, s11, s14
 801dc72:	edd0 5a08 	vldr	s11, [r0, #32]
 801dc76:	ee25 5a06 	vmul.f32	s10, s10, s12
 801dc7a:	ee31 1a65 	vsub.f32	s2, s2, s11
 801dc7e:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801dc82:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801dc84:	698b      	ldr	r3, [r1, #24]
 801dc86:	1a9b      	subs	r3, r3, r2
 801dc88:	ee07 3a10 	vmov	s14, r3
 801dc8c:	684b      	ldr	r3, [r1, #4]
 801dc8e:	1a9b      	subs	r3, r3, r2
 801dc90:	ee01 3a90 	vmov	s3, r3
 801dc94:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dc98:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801dc9c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dca0:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801dca4:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801dca8:	ee61 1a84 	vmul.f32	s3, s3, s8
 801dcac:	eea1 7a21 	vfma.f32	s14, s2, s3
 801dcb0:	ee27 7a03 	vmul.f32	s14, s14, s6
 801dcb4:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801dcb8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801dcba:	694a      	ldr	r2, [r1, #20]
 801dcbc:	1b13      	subs	r3, r2, r4
 801dcbe:	ee03 3a10 	vmov	s6, r3
 801dcc2:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801dcc6:	680b      	ldr	r3, [r1, #0]
 801dcc8:	ee23 3a04 	vmul.f32	s6, s6, s8
 801dccc:	1b1b      	subs	r3, r3, r4
 801dcce:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801dcd2:	ee03 3a10 	vmov	s6, r3
 801dcd6:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801dcda:	ee23 4a04 	vmul.f32	s8, s6, s8
 801dcde:	eee1 5a04 	vfma.f32	s11, s2, s8
 801dce2:	ee25 6a86 	vmul.f32	s12, s11, s12
 801dce6:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801dcea:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801dcee:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801dcf2:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801dcf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dcfa:	dd13      	ble.n	801dd24 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801dcfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801dd00:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801dd04:	63c3      	str	r3, [r0, #60]	; 0x3c
 801dd06:	eee3 7a87 	vfma.f32	s15, s7, s14
 801dd0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801dd0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd12:	dd15      	ble.n	801dd40 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801dd14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801dd18:	6403      	str	r3, [r0, #64]	; 0x40
 801dd1a:	bd70      	pop	{r4, r5, r6, pc}
 801dd1c:	4623      	mov	r3, r4
 801dd1e:	e6fd      	b.n	801db1c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801dd20:	462a      	mov	r2, r5
 801dd22:	e706      	b.n	801db32 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801dd24:	d502      	bpl.n	801dd2c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801dd26:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801dd2a:	e7e9      	b.n	801dd00 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801dd2c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801dd30:	eea3 2a85 	vfma.f32	s4, s7, s10
 801dd34:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801dd38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd3c:	dade      	bge.n	801dcfc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801dd3e:	e7f2      	b.n	801dd26 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801dd40:	d502      	bpl.n	801dd48 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801dd42:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801dd46:	e7e7      	b.n	801dd18 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801dd48:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801dd4c:	eee3 4a86 	vfma.f32	s9, s7, s12
 801dd50:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801dd54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd58:	dadc      	bge.n	801dd14 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801dd5a:	e7f2      	b.n	801dd42 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801dd5c:	3d800000 	.word	0x3d800000

0801dd60 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801dd60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dd64:	2714      	movs	r7, #20
 801dd66:	435f      	muls	r7, r3
 801dd68:	eb02 0c07 	add.w	ip, r2, r7
 801dd6c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801dd70:	f115 0e0f 	adds.w	lr, r5, #15
 801dd74:	f100 80a2 	bmi.w	801debc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801dd78:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801dd7c:	9c08      	ldr	r4, [sp, #32]
 801dd7e:	f8c0 e014 	str.w	lr, [r0, #20]
 801dd82:	2614      	movs	r6, #20
 801dd84:	4366      	muls	r6, r4
 801dd86:	eb02 0806 	add.w	r8, r2, r6
 801dd8a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801dd8e:	f115 040f 	adds.w	r4, r5, #15
 801dd92:	f100 809f 	bmi.w	801ded4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801dd96:	1124      	asrs	r4, r4, #4
 801dd98:	eba4 040e 	sub.w	r4, r4, lr
 801dd9c:	6184      	str	r4, [r0, #24]
 801dd9e:	2c00      	cmp	r4, #0
 801dda0:	f000 808a 	beq.w	801deb8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801dda4:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801dda8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801ddac:	5995      	ldr	r5, [r2, r6]
 801ddae:	eba4 0809 	sub.w	r8, r4, r9
 801ddb2:	59d4      	ldr	r4, [r2, r7]
 801ddb4:	eba5 0a04 	sub.w	sl, r5, r4
 801ddb8:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801ddbc:	fb0e fe05 	mul.w	lr, lr, r5
 801ddc0:	fb0a ee19 	mls	lr, sl, r9, lr
 801ddc4:	fb08 e404 	mla	r4, r8, r4, lr
 801ddc8:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801ddcc:	3c01      	subs	r4, #1
 801ddce:	19a4      	adds	r4, r4, r6
 801ddd0:	f100 808c 	bmi.w	801deec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801ddd4:	fb94 fef6 	sdiv	lr, r4, r6
 801ddd8:	f8c0 e000 	str.w	lr, [r0]
 801dddc:	fb06 441e 	mls	r4, r6, lr, r4
 801dde0:	6104      	str	r4, [r0, #16]
 801dde2:	2d00      	cmp	r5, #0
 801dde4:	f2c0 8095 	blt.w	801df12 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801dde8:	fb95 f4f6 	sdiv	r4, r5, r6
 801ddec:	6044      	str	r4, [r0, #4]
 801ddee:	fb06 5514 	mls	r5, r6, r4, r5
 801ddf2:	6085      	str	r5, [r0, #8]
 801ddf4:	60c6      	str	r6, [r0, #12]
 801ddf6:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801ddfa:	6945      	ldr	r5, [r0, #20]
 801ddfc:	59d2      	ldr	r2, [r2, r7]
 801ddfe:	eddf 6a4d 	vldr	s13, [pc, #308]	; 801df34 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801de02:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801de06:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801de0a:	ee07 4a10 	vmov	s14, r4
 801de0e:	6804      	ldr	r4, [r0, #0]
 801de10:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801de14:	ee07 2a90 	vmov	s15, r2
 801de18:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801de1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801de20:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801de24:	ee27 7a26 	vmul.f32	s14, s14, s13
 801de28:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801de2c:	edd3 6a00 	vldr	s13, [r3]
 801de30:	eee6 6a07 	vfma.f32	s13, s12, s14
 801de34:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801de38:	eee6 6a27 	vfma.f32	s13, s12, s15
 801de3c:	edc0 6a07 	vstr	s13, [r0, #28]
 801de40:	edd0 6a01 	vldr	s13, [r0, #4]
 801de44:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801de48:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801de4c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801de50:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801de54:	ed80 6a08 	vstr	s12, [r0, #32]
 801de58:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801de5a:	6242      	str	r2, [r0, #36]	; 0x24
 801de5c:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801de60:	ed93 6a03 	vldr	s12, [r3, #12]
 801de64:	eea5 6a87 	vfma.f32	s12, s11, s14
 801de68:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801de6c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801de70:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801de74:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801de78:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801de7c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801de80:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801de84:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801de86:	6302      	str	r2, [r0, #48]	; 0x30
 801de88:	ed93 6a06 	vldr	s12, [r3, #24]
 801de8c:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801de90:	eea5 6a87 	vfma.f32	s12, s11, s14
 801de94:	eeb0 7a46 	vmov.f32	s14, s12
 801de98:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801de9c:	eea6 7a27 	vfma.f32	s14, s12, s15
 801dea0:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801dea4:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801dea8:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801deac:	eee6 7a87 	vfma.f32	s15, s13, s14
 801deb0:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801deb4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801deb6:	63c3      	str	r3, [r0, #60]	; 0x3c
 801deb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801debc:	f1c5 0501 	rsb	r5, r5, #1
 801dec0:	f015 050f 	ands.w	r5, r5, #15
 801dec4:	bf18      	it	ne
 801dec6:	2501      	movne	r5, #1
 801dec8:	2410      	movs	r4, #16
 801deca:	fb9e fef4 	sdiv	lr, lr, r4
 801dece:	ebae 0e05 	sub.w	lr, lr, r5
 801ded2:	e753      	b.n	801dd7c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801ded4:	f1c5 0501 	rsb	r5, r5, #1
 801ded8:	f015 050f 	ands.w	r5, r5, #15
 801dedc:	bf18      	it	ne
 801dede:	2501      	movne	r5, #1
 801dee0:	f04f 0910 	mov.w	r9, #16
 801dee4:	fb94 f4f9 	sdiv	r4, r4, r9
 801dee8:	1b64      	subs	r4, r4, r5
 801deea:	e755      	b.n	801dd98 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801deec:	4264      	negs	r4, r4
 801deee:	fb94 fef6 	sdiv	lr, r4, r6
 801def2:	f1ce 0800 	rsb	r8, lr, #0
 801def6:	fb06 441e 	mls	r4, r6, lr, r4
 801defa:	f8c0 8000 	str.w	r8, [r0]
 801defe:	6104      	str	r4, [r0, #16]
 801df00:	2c00      	cmp	r4, #0
 801df02:	f43f af6e 	beq.w	801dde2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801df06:	ea6f 0e0e 	mvn.w	lr, lr
 801df0a:	f8c0 e000 	str.w	lr, [r0]
 801df0e:	1b34      	subs	r4, r6, r4
 801df10:	e766      	b.n	801dde0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801df12:	426d      	negs	r5, r5
 801df14:	fb95 f4f6 	sdiv	r4, r5, r6
 801df18:	f1c4 0e00 	rsb	lr, r4, #0
 801df1c:	fb06 5514 	mls	r5, r6, r4, r5
 801df20:	f8c0 e004 	str.w	lr, [r0, #4]
 801df24:	6085      	str	r5, [r0, #8]
 801df26:	2d00      	cmp	r5, #0
 801df28:	f43f af64 	beq.w	801ddf4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801df2c:	43e4      	mvns	r4, r4
 801df2e:	6044      	str	r4, [r0, #4]
 801df30:	1b75      	subs	r5, r6, r5
 801df32:	e75e      	b.n	801ddf2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801df34:	3d800000 	.word	0x3d800000

0801df38 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801df38:	4b01      	ldr	r3, [pc, #4]	; (801df40 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801df3a:	6018      	str	r0, [r3, #0]
 801df3c:	4770      	bx	lr
 801df3e:	bf00      	nop
 801df40:	2000afb0 	.word	0x2000afb0

0801df44 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801df44:	4b06      	ldr	r3, [pc, #24]	; (801df60 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801df46:	881a      	ldrh	r2, [r3, #0]
 801df48:	4282      	cmp	r2, r0
 801df4a:	d807      	bhi.n	801df5c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801df4c:	4b05      	ldr	r3, [pc, #20]	; (801df64 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801df4e:	881b      	ldrh	r3, [r3, #0]
 801df50:	4413      	add	r3, r2
 801df52:	4298      	cmp	r0, r3
 801df54:	bfac      	ite	ge
 801df56:	2000      	movge	r0, #0
 801df58:	2001      	movlt	r0, #1
 801df5a:	4770      	bx	lr
 801df5c:	2000      	movs	r0, #0
 801df5e:	4770      	bx	lr
 801df60:	2000afd0 	.word	0x2000afd0
 801df64:	2000afd4 	.word	0x2000afd4

0801df68 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801df68:	b508      	push	{r3, lr}
 801df6a:	4601      	mov	r1, r0
 801df6c:	f7ff ffea 	bl	801df44 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801df70:	b118      	cbz	r0, 801df7a <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801df72:	4b02      	ldr	r3, [pc, #8]	; (801df7c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801df74:	681b      	ldr	r3, [r3, #0]
 801df76:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801df7a:	bd08      	pop	{r3, pc}
 801df7c:	2000afb4 	.word	0x2000afb4

0801df80 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801df80:	b5f0      	push	{r4, r5, r6, r7, lr}
 801df82:	4c24      	ldr	r4, [pc, #144]	; (801e014 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801df84:	6823      	ldr	r3, [r4, #0]
 801df86:	2b00      	cmp	r3, #0
 801df88:	d042      	beq.n	801e010 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801df8a:	4a23      	ldr	r2, [pc, #140]	; (801e018 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801df8c:	4d23      	ldr	r5, [pc, #140]	; (801e01c <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801df8e:	8811      	ldrh	r1, [r2, #0]
 801df90:	f8b5 c000 	ldrh.w	ip, [r5]
 801df94:	4822      	ldr	r0, [pc, #136]	; (801e020 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801df96:	4461      	add	r1, ip
 801df98:	1c4a      	adds	r2, r1, #1
 801df9a:	f022 0201 	bic.w	r2, r2, #1
 801df9e:	008f      	lsls	r7, r1, #2
 801dfa0:	0412      	lsls	r2, r2, #16
 801dfa2:	19de      	adds	r6, r3, r7
 801dfa4:	0c12      	lsrs	r2, r2, #16
 801dfa6:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801dfaa:	6006      	str	r6, [r0, #0]
 801dfac:	4e1d      	ldr	r6, [pc, #116]	; (801e024 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801dfae:	19da      	adds	r2, r3, r7
 801dfb0:	6032      	str	r2, [r6, #0]
 801dfb2:	220e      	movs	r2, #14
 801dfb4:	fb02 f20c 	mul.w	r2, r2, ip
 801dfb8:	3203      	adds	r2, #3
 801dfba:	f022 0203 	bic.w	r2, r2, #3
 801dfbe:	443a      	add	r2, r7
 801dfc0:	4f19      	ldr	r7, [pc, #100]	; (801e028 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801dfc2:	4413      	add	r3, r2
 801dfc4:	603b      	str	r3, [r7, #0]
 801dfc6:	4f19      	ldr	r7, [pc, #100]	; (801e02c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801dfc8:	2300      	movs	r3, #0
 801dfca:	803b      	strh	r3, [r7, #0]
 801dfcc:	4f18      	ldr	r7, [pc, #96]	; (801e030 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801dfce:	683f      	ldr	r7, [r7, #0]
 801dfd0:	1aba      	subs	r2, r7, r2
 801dfd2:	4f18      	ldr	r7, [pc, #96]	; (801e034 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801dfd4:	603a      	str	r2, [r7, #0]
 801dfd6:	4a18      	ldr	r2, [pc, #96]	; (801e038 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801dfd8:	469c      	mov	ip, r3
 801dfda:	8013      	strh	r3, [r2, #0]
 801dfdc:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801dfe0:	428b      	cmp	r3, r1
 801dfe2:	d10d      	bne.n	801e000 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801dfe4:	882d      	ldrh	r5, [r5, #0]
 801dfe6:	6830      	ldr	r0, [r6, #0]
 801dfe8:	2300      	movs	r3, #0
 801dfea:	240e      	movs	r4, #14
 801dfec:	429d      	cmp	r5, r3
 801dfee:	d90f      	bls.n	801e010 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801dff0:	fb04 0203 	mla	r2, r4, r3, r0
 801dff4:	3301      	adds	r3, #1
 801dff6:	7b11      	ldrb	r1, [r2, #12]
 801dff8:	f36f 1145 	bfc	r1, #5, #1
 801dffc:	7311      	strb	r1, [r2, #12]
 801dffe:	e7f5      	b.n	801dfec <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801e000:	6822      	ldr	r2, [r4, #0]
 801e002:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801e006:	6802      	ldr	r2, [r0, #0]
 801e008:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801e00c:	3301      	adds	r3, #1
 801e00e:	e7e7      	b.n	801dfe0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801e010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e012:	bf00      	nop
 801e014:	2000afb4 	.word	0x2000afb4
 801e018:	2000afd0 	.word	0x2000afd0
 801e01c:	2000afd4 	.word	0x2000afd4
 801e020:	2000afc8 	.word	0x2000afc8
 801e024:	2000afb8 	.word	0x2000afb8
 801e028:	2000afc0 	.word	0x2000afc0
 801e02c:	2000afd2 	.word	0x2000afd2
 801e030:	2000afbc 	.word	0x2000afbc
 801e034:	2000afcc 	.word	0x2000afcc
 801e038:	2000afc4 	.word	0x2000afc4

0801e03c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801e03c:	4b06      	ldr	r3, [pc, #24]	; (801e058 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801e03e:	681b      	ldr	r3, [r3, #0]
 801e040:	b943      	cbnz	r3, 801e054 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801e042:	b139      	cbz	r1, 801e054 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801e044:	4b05      	ldr	r3, [pc, #20]	; (801e05c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801e046:	801a      	strh	r2, [r3, #0]
 801e048:	4b05      	ldr	r3, [pc, #20]	; (801e060 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801e04a:	6019      	str	r1, [r3, #0]
 801e04c:	4b05      	ldr	r3, [pc, #20]	; (801e064 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801e04e:	6018      	str	r0, [r3, #0]
 801e050:	f7ff bf96 	b.w	801df80 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801e054:	4770      	bx	lr
 801e056:	bf00      	nop
 801e058:	2000afc0 	.word	0x2000afc0
 801e05c:	2000afd4 	.word	0x2000afd4
 801e060:	2000afbc 	.word	0x2000afbc
 801e064:	2000afb4 	.word	0x2000afb4

0801e068 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801e068:	b470      	push	{r4, r5, r6}
 801e06a:	4c07      	ldr	r4, [pc, #28]	; (801e088 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801e06c:	6826      	ldr	r6, [r4, #0]
 801e06e:	4605      	mov	r5, r0
 801e070:	4610      	mov	r0, r2
 801e072:	9a03      	ldr	r2, [sp, #12]
 801e074:	b936      	cbnz	r6, 801e084 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801e076:	6025      	str	r5, [r4, #0]
 801e078:	4c04      	ldr	r4, [pc, #16]	; (801e08c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801e07a:	8021      	strh	r1, [r4, #0]
 801e07c:	bc70      	pop	{r4, r5, r6}
 801e07e:	4619      	mov	r1, r3
 801e080:	f7ff bfdc 	b.w	801e03c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801e084:	bc70      	pop	{r4, r5, r6}
 801e086:	4770      	bx	lr
 801e088:	2000afd8 	.word	0x2000afd8
 801e08c:	2000afd0 	.word	0x2000afd0

0801e090 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801e090:	4a12      	ldr	r2, [pc, #72]	; (801e0dc <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801e092:	8803      	ldrh	r3, [r0, #0]
 801e094:	8812      	ldrh	r2, [r2, #0]
 801e096:	4293      	cmp	r3, r2
 801e098:	d207      	bcs.n	801e0aa <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801e09a:	4a11      	ldr	r2, [pc, #68]	; (801e0e0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801e09c:	6812      	ldr	r2, [r2, #0]
 801e09e:	2114      	movs	r1, #20
 801e0a0:	fb01 2303 	mla	r3, r1, r3, r2
 801e0a4:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801e0a8:	4770      	bx	lr
 801e0aa:	490e      	ldr	r1, [pc, #56]	; (801e0e4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801e0ac:	8809      	ldrh	r1, [r1, #0]
 801e0ae:	4411      	add	r1, r2
 801e0b0:	428b      	cmp	r3, r1
 801e0b2:	da04      	bge.n	801e0be <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801e0b4:	1a9b      	subs	r3, r3, r2
 801e0b6:	4a0c      	ldr	r2, [pc, #48]	; (801e0e8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801e0b8:	210e      	movs	r1, #14
 801e0ba:	6812      	ldr	r2, [r2, #0]
 801e0bc:	e7f0      	b.n	801e0a0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801e0be:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e0c2:	4293      	cmp	r3, r2
 801e0c4:	d108      	bne.n	801e0d8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801e0c6:	4b09      	ldr	r3, [pc, #36]	; (801e0ec <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801e0c8:	781b      	ldrb	r3, [r3, #0]
 801e0ca:	b91b      	cbnz	r3, 801e0d4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801e0cc:	4b08      	ldr	r3, [pc, #32]	; (801e0f0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801e0ce:	f9b3 0000 	ldrsh.w	r0, [r3]
 801e0d2:	4770      	bx	lr
 801e0d4:	4b07      	ldr	r3, [pc, #28]	; (801e0f4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801e0d6:	e7fa      	b.n	801e0ce <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801e0d8:	2000      	movs	r0, #0
 801e0da:	4770      	bx	lr
 801e0dc:	2000afd0 	.word	0x2000afd0
 801e0e0:	2000afd8 	.word	0x2000afd8
 801e0e4:	2000afd4 	.word	0x2000afd4
 801e0e8:	2000afb8 	.word	0x2000afb8
 801e0ec:	2000af40 	.word	0x2000af40
 801e0f0:	2000af42 	.word	0x2000af42
 801e0f4:	2000af44 	.word	0x2000af44

0801e0f8 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801e0f8:	4a12      	ldr	r2, [pc, #72]	; (801e144 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801e0fa:	8803      	ldrh	r3, [r0, #0]
 801e0fc:	8812      	ldrh	r2, [r2, #0]
 801e0fe:	4293      	cmp	r3, r2
 801e100:	d207      	bcs.n	801e112 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801e102:	4a11      	ldr	r2, [pc, #68]	; (801e148 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801e104:	6812      	ldr	r2, [r2, #0]
 801e106:	2114      	movs	r1, #20
 801e108:	fb01 2303 	mla	r3, r1, r3, r2
 801e10c:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801e110:	4770      	bx	lr
 801e112:	490e      	ldr	r1, [pc, #56]	; (801e14c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801e114:	8809      	ldrh	r1, [r1, #0]
 801e116:	4411      	add	r1, r2
 801e118:	428b      	cmp	r3, r1
 801e11a:	da04      	bge.n	801e126 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801e11c:	1a9b      	subs	r3, r3, r2
 801e11e:	4a0c      	ldr	r2, [pc, #48]	; (801e150 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801e120:	210e      	movs	r1, #14
 801e122:	6812      	ldr	r2, [r2, #0]
 801e124:	e7f0      	b.n	801e108 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801e126:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e12a:	4293      	cmp	r3, r2
 801e12c:	d108      	bne.n	801e140 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801e12e:	4b09      	ldr	r3, [pc, #36]	; (801e154 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801e130:	781b      	ldrb	r3, [r3, #0]
 801e132:	b91b      	cbnz	r3, 801e13c <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801e134:	4b08      	ldr	r3, [pc, #32]	; (801e158 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801e136:	f9b3 0000 	ldrsh.w	r0, [r3]
 801e13a:	4770      	bx	lr
 801e13c:	4b07      	ldr	r3, [pc, #28]	; (801e15c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801e13e:	e7fa      	b.n	801e136 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801e140:	2000      	movs	r0, #0
 801e142:	4770      	bx	lr
 801e144:	2000afd0 	.word	0x2000afd0
 801e148:	2000afd8 	.word	0x2000afd8
 801e14c:	2000afd4 	.word	0x2000afd4
 801e150:	2000afb8 	.word	0x2000afb8
 801e154:	2000af40 	.word	0x2000af40
 801e158:	2000af44 	.word	0x2000af44
 801e15c:	2000af42 	.word	0x2000af42

0801e160 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801e160:	b510      	push	{r4, lr}
 801e162:	4a1f      	ldr	r2, [pc, #124]	; (801e1e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801e164:	880b      	ldrh	r3, [r1, #0]
 801e166:	8812      	ldrh	r2, [r2, #0]
 801e168:	4293      	cmp	r3, r2
 801e16a:	d213      	bcs.n	801e194 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801e16c:	4a1d      	ldr	r2, [pc, #116]	; (801e1e4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801e16e:	6812      	ldr	r2, [r2, #0]
 801e170:	2114      	movs	r1, #20
 801e172:	fb01 2303 	mla	r3, r1, r3, r2
 801e176:	8a1a      	ldrh	r2, [r3, #16]
 801e178:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801e17c:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801e180:	8a5b      	ldrh	r3, [r3, #18]
 801e182:	8004      	strh	r4, [r0, #0]
 801e184:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801e188:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e18c:	8041      	strh	r1, [r0, #2]
 801e18e:	8082      	strh	r2, [r0, #4]
 801e190:	80c3      	strh	r3, [r0, #6]
 801e192:	e00e      	b.n	801e1b2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801e194:	4914      	ldr	r1, [pc, #80]	; (801e1e8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801e196:	8809      	ldrh	r1, [r1, #0]
 801e198:	4411      	add	r1, r2
 801e19a:	428b      	cmp	r3, r1
 801e19c:	da0a      	bge.n	801e1b4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801e19e:	1a9b      	subs	r3, r3, r2
 801e1a0:	4a12      	ldr	r2, [pc, #72]	; (801e1ec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801e1a2:	6812      	ldr	r2, [r2, #0]
 801e1a4:	210e      	movs	r1, #14
 801e1a6:	fb01 2303 	mla	r3, r1, r3, r2
 801e1aa:	681a      	ldr	r2, [r3, #0]
 801e1ac:	6002      	str	r2, [r0, #0]
 801e1ae:	685a      	ldr	r2, [r3, #4]
 801e1b0:	6042      	str	r2, [r0, #4]
 801e1b2:	bd10      	pop	{r4, pc}
 801e1b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e1b8:	4293      	cmp	r3, r2
 801e1ba:	d10b      	bne.n	801e1d4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 801e1bc:	4b0c      	ldr	r3, [pc, #48]	; (801e1f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801e1be:	f9b3 1000 	ldrsh.w	r1, [r3]
 801e1c2:	4b0c      	ldr	r3, [pc, #48]	; (801e1f4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801e1c4:	8081      	strh	r1, [r0, #4]
 801e1c6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e1ca:	80c2      	strh	r2, [r0, #6]
 801e1cc:	2300      	movs	r3, #0
 801e1ce:	8003      	strh	r3, [r0, #0]
 801e1d0:	8043      	strh	r3, [r0, #2]
 801e1d2:	e7ee      	b.n	801e1b2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801e1d4:	2300      	movs	r3, #0
 801e1d6:	8003      	strh	r3, [r0, #0]
 801e1d8:	8043      	strh	r3, [r0, #2]
 801e1da:	8083      	strh	r3, [r0, #4]
 801e1dc:	e7d8      	b.n	801e190 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801e1de:	bf00      	nop
 801e1e0:	2000afd0 	.word	0x2000afd0
 801e1e4:	2000afd8 	.word	0x2000afd8
 801e1e8:	2000afd4 	.word	0x2000afd4
 801e1ec:	2000afb8 	.word	0x2000afb8
 801e1f0:	2000af3c 	.word	0x2000af3c
 801e1f4:	2000af3e 	.word	0x2000af3e

0801e1f8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801e1f8:	4a17      	ldr	r2, [pc, #92]	; (801e258 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801e1fa:	8803      	ldrh	r3, [r0, #0]
 801e1fc:	8812      	ldrh	r2, [r2, #0]
 801e1fe:	4293      	cmp	r3, r2
 801e200:	d213      	bcs.n	801e22a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801e202:	4a16      	ldr	r2, [pc, #88]	; (801e25c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801e204:	6812      	ldr	r2, [r2, #0]
 801e206:	2114      	movs	r1, #20
 801e208:	fb01 2303 	mla	r3, r1, r3, r2
 801e20c:	8a1a      	ldrh	r2, [r3, #16]
 801e20e:	8919      	ldrh	r1, [r3, #8]
 801e210:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801e214:	428a      	cmp	r2, r1
 801e216:	db1d      	blt.n	801e254 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801e218:	8a58      	ldrh	r0, [r3, #18]
 801e21a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801e21e:	895b      	ldrh	r3, [r3, #10]
 801e220:	4298      	cmp	r0, r3
 801e222:	bfac      	ite	ge
 801e224:	2000      	movge	r0, #0
 801e226:	2001      	movlt	r0, #1
 801e228:	4770      	bx	lr
 801e22a:	490d      	ldr	r1, [pc, #52]	; (801e260 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801e22c:	8809      	ldrh	r1, [r1, #0]
 801e22e:	4411      	add	r1, r2
 801e230:	428b      	cmp	r3, r1
 801e232:	da0d      	bge.n	801e250 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801e234:	1a9b      	subs	r3, r3, r2
 801e236:	4a0b      	ldr	r2, [pc, #44]	; (801e264 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801e238:	6812      	ldr	r2, [r2, #0]
 801e23a:	210e      	movs	r1, #14
 801e23c:	fb01 2303 	mla	r3, r1, r3, r2
 801e240:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801e244:	891a      	ldrh	r2, [r3, #8]
 801e246:	4291      	cmp	r1, r2
 801e248:	db04      	blt.n	801e254 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801e24a:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801e24e:	e7e6      	b.n	801e21e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801e250:	2000      	movs	r0, #0
 801e252:	4770      	bx	lr
 801e254:	2001      	movs	r0, #1
 801e256:	4770      	bx	lr
 801e258:	2000afd0 	.word	0x2000afd0
 801e25c:	2000afd8 	.word	0x2000afd8
 801e260:	2000afd4 	.word	0x2000afd4
 801e264:	2000afb8 	.word	0x2000afb8

0801e268 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801e268:	4a12      	ldr	r2, [pc, #72]	; (801e2b4 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801e26a:	8803      	ldrh	r3, [r0, #0]
 801e26c:	8811      	ldrh	r1, [r2, #0]
 801e26e:	428b      	cmp	r3, r1
 801e270:	d20b      	bcs.n	801e28a <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801e272:	4a11      	ldr	r2, [pc, #68]	; (801e2b8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801e274:	6812      	ldr	r2, [r2, #0]
 801e276:	b112      	cbz	r2, 801e27e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801e278:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801e27c:	b9c0      	cbnz	r0, 801e2b0 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801e27e:	4a0f      	ldr	r2, [pc, #60]	; (801e2bc <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801e280:	6811      	ldr	r1, [r2, #0]
 801e282:	2214      	movs	r2, #20
 801e284:	4353      	muls	r3, r2
 801e286:	58c8      	ldr	r0, [r1, r3]
 801e288:	4770      	bx	lr
 801e28a:	4a0d      	ldr	r2, [pc, #52]	; (801e2c0 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801e28c:	8812      	ldrh	r2, [r2, #0]
 801e28e:	440a      	add	r2, r1
 801e290:	4293      	cmp	r3, r2
 801e292:	da04      	bge.n	801e29e <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801e294:	4a08      	ldr	r2, [pc, #32]	; (801e2b8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801e296:	6812      	ldr	r2, [r2, #0]
 801e298:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801e29c:	4770      	bx	lr
 801e29e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e2a2:	4293      	cmp	r3, r2
 801e2a4:	d103      	bne.n	801e2ae <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801e2a6:	4b07      	ldr	r3, [pc, #28]	; (801e2c4 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801e2a8:	681b      	ldr	r3, [r3, #0]
 801e2aa:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801e2ac:	4770      	bx	lr
 801e2ae:	2000      	movs	r0, #0
 801e2b0:	4770      	bx	lr
 801e2b2:	bf00      	nop
 801e2b4:	2000afd0 	.word	0x2000afd0
 801e2b8:	2000afb4 	.word	0x2000afb4
 801e2bc:	2000afd8 	.word	0x2000afd8
 801e2c0:	2000afd4 	.word	0x2000afd4
 801e2c4:	2000af48 	.word	0x2000af48

0801e2c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801e2c8:	4b24      	ldr	r3, [pc, #144]	; (801e35c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801e2ca:	8802      	ldrh	r2, [r0, #0]
 801e2cc:	8818      	ldrh	r0, [r3, #0]
 801e2ce:	4282      	cmp	r2, r0
 801e2d0:	d221      	bcs.n	801e316 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801e2d2:	4b23      	ldr	r3, [pc, #140]	; (801e360 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801e2d4:	6819      	ldr	r1, [r3, #0]
 801e2d6:	2314      	movs	r3, #20
 801e2d8:	fb03 1302 	mla	r3, r3, r2, r1
 801e2dc:	6858      	ldr	r0, [r3, #4]
 801e2de:	2800      	cmp	r0, #0
 801e2e0:	d03a      	beq.n	801e358 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801e2e2:	4920      	ldr	r1, [pc, #128]	; (801e364 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801e2e4:	6809      	ldr	r1, [r1, #0]
 801e2e6:	2900      	cmp	r1, #0
 801e2e8:	d036      	beq.n	801e358 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801e2ea:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801e2ee:	2900      	cmp	r1, #0
 801e2f0:	d032      	beq.n	801e358 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801e2f2:	891a      	ldrh	r2, [r3, #8]
 801e2f4:	8958      	ldrh	r0, [r3, #10]
 801e2f6:	4350      	muls	r0, r2
 801e2f8:	7c5a      	ldrb	r2, [r3, #17]
 801e2fa:	7cdb      	ldrb	r3, [r3, #19]
 801e2fc:	0952      	lsrs	r2, r2, #5
 801e2fe:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801e302:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801e306:	2b0b      	cmp	r3, #11
 801e308:	bf18      	it	ne
 801e30a:	0040      	lslne	r0, r0, #1
 801e30c:	3003      	adds	r0, #3
 801e30e:	f020 0003 	bic.w	r0, r0, #3
 801e312:	4408      	add	r0, r1
 801e314:	4770      	bx	lr
 801e316:	4b14      	ldr	r3, [pc, #80]	; (801e368 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801e318:	881b      	ldrh	r3, [r3, #0]
 801e31a:	4403      	add	r3, r0
 801e31c:	429a      	cmp	r2, r3
 801e31e:	da1a      	bge.n	801e356 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801e320:	4b12      	ldr	r3, [pc, #72]	; (801e36c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801e322:	681b      	ldr	r3, [r3, #0]
 801e324:	1a10      	subs	r0, r2, r0
 801e326:	210e      	movs	r1, #14
 801e328:	fb01 3000 	mla	r0, r1, r0, r3
 801e32c:	7b03      	ldrb	r3, [r0, #12]
 801e32e:	f003 031f 	and.w	r3, r3, #31
 801e332:	2b0b      	cmp	r3, #11
 801e334:	d10b      	bne.n	801e34e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801e336:	8903      	ldrh	r3, [r0, #8]
 801e338:	8940      	ldrh	r0, [r0, #10]
 801e33a:	4358      	muls	r0, r3
 801e33c:	4b09      	ldr	r3, [pc, #36]	; (801e364 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801e33e:	6819      	ldr	r1, [r3, #0]
 801e340:	3003      	adds	r0, #3
 801e342:	f020 0303 	bic.w	r3, r0, #3
 801e346:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801e34a:	4418      	add	r0, r3
 801e34c:	4770      	bx	lr
 801e34e:	2b0d      	cmp	r3, #13
 801e350:	d101      	bne.n	801e356 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801e352:	300d      	adds	r0, #13
 801e354:	4770      	bx	lr
 801e356:	2000      	movs	r0, #0
 801e358:	4770      	bx	lr
 801e35a:	bf00      	nop
 801e35c:	2000afd0 	.word	0x2000afd0
 801e360:	2000afd8 	.word	0x2000afd8
 801e364:	2000afb4 	.word	0x2000afb4
 801e368:	2000afd4 	.word	0x2000afd4
 801e36c:	2000afb8 	.word	0x2000afb8

0801e370 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801e370:	b510      	push	{r4, lr}
 801e372:	4a17      	ldr	r2, [pc, #92]	; (801e3d0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801e374:	8803      	ldrh	r3, [r0, #0]
 801e376:	8812      	ldrh	r2, [r2, #0]
 801e378:	4293      	cmp	r3, r2
 801e37a:	d20c      	bcs.n	801e396 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801e37c:	4a15      	ldr	r2, [pc, #84]	; (801e3d4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801e37e:	6812      	ldr	r2, [r2, #0]
 801e380:	2114      	movs	r1, #20
 801e382:	fb01 2303 	mla	r3, r1, r3, r2
 801e386:	7c58      	ldrb	r0, [r3, #17]
 801e388:	0942      	lsrs	r2, r0, #5
 801e38a:	7cd8      	ldrb	r0, [r3, #19]
 801e38c:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801e390:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801e394:	bd10      	pop	{r4, pc}
 801e396:	4910      	ldr	r1, [pc, #64]	; (801e3d8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801e398:	8809      	ldrh	r1, [r1, #0]
 801e39a:	4411      	add	r1, r2
 801e39c:	428b      	cmp	r3, r1
 801e39e:	da09      	bge.n	801e3b4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801e3a0:	1a9b      	subs	r3, r3, r2
 801e3a2:	4a0e      	ldr	r2, [pc, #56]	; (801e3dc <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801e3a4:	6812      	ldr	r2, [r2, #0]
 801e3a6:	210e      	movs	r1, #14
 801e3a8:	fb01 2303 	mla	r3, r1, r3, r2
 801e3ac:	7b18      	ldrb	r0, [r3, #12]
 801e3ae:	f000 001f 	and.w	r0, r0, #31
 801e3b2:	e7ef      	b.n	801e394 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801e3b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e3b8:	4293      	cmp	r3, r2
 801e3ba:	d106      	bne.n	801e3ca <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801e3bc:	f7f3 ffba 	bl	8012334 <_ZN8touchgfx3HAL3lcdEv>
 801e3c0:	6803      	ldr	r3, [r0, #0]
 801e3c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e3c8:	4718      	bx	r3
 801e3ca:	2000      	movs	r0, #0
 801e3cc:	e7e2      	b.n	801e394 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801e3ce:	bf00      	nop
 801e3d0:	2000afd0 	.word	0x2000afd0
 801e3d4:	2000afd8 	.word	0x2000afd8
 801e3d8:	2000afd4 	.word	0x2000afd4
 801e3dc:	2000afb8 	.word	0x2000afb8

0801e3e0 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801e3e0:	2010      	movs	r0, #16
 801e3e2:	4770      	bx	lr

0801e3e4 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801e3e4:	2000      	movs	r0, #0
 801e3e6:	4770      	bx	lr

0801e3e8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801e3e8:	4b02      	ldr	r3, [pc, #8]	; (801e3f4 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 801e3ea:	8818      	ldrh	r0, [r3, #0]
 801e3ec:	0040      	lsls	r0, r0, #1
 801e3ee:	b280      	uxth	r0, r0
 801e3f0:	4770      	bx	lr
 801e3f2:	bf00      	nop
 801e3f4:	2000af42 	.word	0x2000af42

0801e3f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801e3f8:	2bff      	cmp	r3, #255	; 0xff
 801e3fa:	d050      	beq.n	801e49e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801e3fc:	2a0b      	cmp	r2, #11
 801e3fe:	d04a      	beq.n	801e496 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801e400:	d80e      	bhi.n	801e420 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801e402:	2a03      	cmp	r2, #3
 801e404:	d03f      	beq.n	801e486 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801e406:	d804      	bhi.n	801e412 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e408:	2a01      	cmp	r2, #1
 801e40a:	d03e      	beq.n	801e48a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801e40c:	d93f      	bls.n	801e48e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801e40e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801e410:	4770      	bx	lr
 801e412:	2a09      	cmp	r2, #9
 801e414:	d03f      	beq.n	801e496 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801e416:	d83c      	bhi.n	801e492 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801e418:	2a08      	cmp	r2, #8
 801e41a:	d03a      	beq.n	801e492 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801e41c:	2000      	movs	r0, #0
 801e41e:	4770      	bx	lr
 801e420:	2a2f      	cmp	r2, #47	; 0x2f
 801e422:	d024      	beq.n	801e46e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801e424:	d80d      	bhi.n	801e442 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801e426:	2a2d      	cmp	r2, #45	; 0x2d
 801e428:	d014      	beq.n	801e454 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801e42a:	d826      	bhi.n	801e47a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801e42c:	2a2c      	cmp	r2, #44	; 0x2c
 801e42e:	d1f5      	bne.n	801e41c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e430:	684b      	ldr	r3, [r1, #4]
 801e432:	781b      	ldrb	r3, [r3, #0]
 801e434:	2b01      	cmp	r3, #1
 801e436:	d018      	beq.n	801e46a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801e438:	d323      	bcc.n	801e482 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801e43a:	2b02      	cmp	r3, #2
 801e43c:	d1ee      	bne.n	801e41c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e43e:	6880      	ldr	r0, [r0, #8]
 801e440:	4770      	bx	lr
 801e442:	2a31      	cmp	r2, #49	; 0x31
 801e444:	d004      	beq.n	801e450 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801e446:	d328      	bcc.n	801e49a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801e448:	2a32      	cmp	r2, #50	; 0x32
 801e44a:	d026      	beq.n	801e49a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801e44c:	2a33      	cmp	r2, #51	; 0x33
 801e44e:	d1e5      	bne.n	801e41c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e450:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801e452:	4770      	bx	lr
 801e454:	684b      	ldr	r3, [r1, #4]
 801e456:	781b      	ldrb	r3, [r3, #0]
 801e458:	2b01      	cmp	r3, #1
 801e45a:	d004      	beq.n	801e466 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e45c:	d30b      	bcc.n	801e476 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e45e:	2b02      	cmp	r3, #2
 801e460:	d1dc      	bne.n	801e41c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e462:	6900      	ldr	r0, [r0, #16]
 801e464:	4770      	bx	lr
 801e466:	6a00      	ldr	r0, [r0, #32]
 801e468:	4770      	bx	lr
 801e46a:	6980      	ldr	r0, [r0, #24]
 801e46c:	4770      	bx	lr
 801e46e:	684b      	ldr	r3, [r1, #4]
 801e470:	781b      	ldrb	r3, [r3, #0]
 801e472:	2b00      	cmp	r3, #0
 801e474:	d1d2      	bne.n	801e41c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e476:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801e478:	4770      	bx	lr
 801e47a:	684b      	ldr	r3, [r1, #4]
 801e47c:	781b      	ldrb	r3, [r3, #0]
 801e47e:	2b00      	cmp	r3, #0
 801e480:	d1cc      	bne.n	801e41c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e482:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801e484:	4770      	bx	lr
 801e486:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801e488:	4770      	bx	lr
 801e48a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801e48c:	4770      	bx	lr
 801e48e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801e490:	4770      	bx	lr
 801e492:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801e494:	4770      	bx	lr
 801e496:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801e498:	4770      	bx	lr
 801e49a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801e49c:	4770      	bx	lr
 801e49e:	2a0b      	cmp	r2, #11
 801e4a0:	d049      	beq.n	801e536 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801e4a2:	d80e      	bhi.n	801e4c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801e4a4:	2a03      	cmp	r2, #3
 801e4a6:	d040      	beq.n	801e52a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801e4a8:	d804      	bhi.n	801e4b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801e4aa:	2a01      	cmp	r2, #1
 801e4ac:	d03f      	beq.n	801e52e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801e4ae:	d940      	bls.n	801e532 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801e4b0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801e4b2:	4770      	bx	lr
 801e4b4:	2a09      	cmp	r2, #9
 801e4b6:	d03e      	beq.n	801e536 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801e4b8:	d801      	bhi.n	801e4be <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801e4ba:	2a08      	cmp	r2, #8
 801e4bc:	d1ae      	bne.n	801e41c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e4be:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801e4c0:	4770      	bx	lr
 801e4c2:	2a2f      	cmp	r2, #47	; 0x2f
 801e4c4:	d024      	beq.n	801e510 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801e4c6:	d80d      	bhi.n	801e4e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801e4c8:	2a2d      	cmp	r2, #45	; 0x2d
 801e4ca:	d014      	beq.n	801e4f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801e4cc:	d826      	bhi.n	801e51c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801e4ce:	2a2c      	cmp	r2, #44	; 0x2c
 801e4d0:	d1a4      	bne.n	801e41c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e4d2:	684b      	ldr	r3, [r1, #4]
 801e4d4:	781b      	ldrb	r3, [r3, #0]
 801e4d6:	2b01      	cmp	r3, #1
 801e4d8:	d018      	beq.n	801e50c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801e4da:	d324      	bcc.n	801e526 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801e4dc:	2b02      	cmp	r3, #2
 801e4de:	d19d      	bne.n	801e41c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e4e0:	68c0      	ldr	r0, [r0, #12]
 801e4e2:	4770      	bx	lr
 801e4e4:	2a31      	cmp	r2, #49	; 0x31
 801e4e6:	d004      	beq.n	801e4f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801e4e8:	d327      	bcc.n	801e53a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801e4ea:	2a32      	cmp	r2, #50	; 0x32
 801e4ec:	d025      	beq.n	801e53a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801e4ee:	2a33      	cmp	r2, #51	; 0x33
 801e4f0:	d194      	bne.n	801e41c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e4f2:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801e4f4:	4770      	bx	lr
 801e4f6:	684b      	ldr	r3, [r1, #4]
 801e4f8:	781b      	ldrb	r3, [r3, #0]
 801e4fa:	2b01      	cmp	r3, #1
 801e4fc:	d004      	beq.n	801e508 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801e4fe:	d30b      	bcc.n	801e518 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801e500:	2b02      	cmp	r3, #2
 801e502:	d18b      	bne.n	801e41c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e504:	6940      	ldr	r0, [r0, #20]
 801e506:	4770      	bx	lr
 801e508:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801e50a:	4770      	bx	lr
 801e50c:	69c0      	ldr	r0, [r0, #28]
 801e50e:	4770      	bx	lr
 801e510:	684b      	ldr	r3, [r1, #4]
 801e512:	781b      	ldrb	r3, [r3, #0]
 801e514:	2b00      	cmp	r3, #0
 801e516:	d181      	bne.n	801e41c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e518:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801e51a:	4770      	bx	lr
 801e51c:	684b      	ldr	r3, [r1, #4]
 801e51e:	781b      	ldrb	r3, [r3, #0]
 801e520:	2b00      	cmp	r3, #0
 801e522:	f47f af7b 	bne.w	801e41c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e526:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801e528:	4770      	bx	lr
 801e52a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801e52c:	4770      	bx	lr
 801e52e:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801e530:	4770      	bx	lr
 801e532:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801e534:	4770      	bx	lr
 801e536:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801e538:	4770      	bx	lr
 801e53a:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801e53c:	4770      	bx	lr

0801e53e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e53e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e542:	b087      	sub	sp, #28
 801e544:	9815      	ldr	r0, [sp, #84]	; 0x54
 801e546:	9205      	str	r2, [sp, #20]
 801e548:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e54c:	9202      	str	r2, [sp, #8]
 801e54e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801e552:	9101      	str	r1, [sp, #4]
 801e554:	6841      	ldr	r1, [r0, #4]
 801e556:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801e55a:	fb01 2404 	mla	r4, r1, r4, r2
 801e55e:	6802      	ldr	r2, [r0, #0]
 801e560:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e564:	f8de 2000 	ldr.w	r2, [lr]
 801e568:	9203      	str	r2, [sp, #12]
 801e56a:	f8de 2004 	ldr.w	r2, [lr, #4]
 801e56e:	3204      	adds	r2, #4
 801e570:	9204      	str	r2, [sp, #16]
 801e572:	9a02      	ldr	r2, [sp, #8]
 801e574:	43d6      	mvns	r6, r2
 801e576:	b2f6      	uxtb	r6, r6
 801e578:	9a01      	ldr	r2, [sp, #4]
 801e57a:	2a00      	cmp	r2, #0
 801e57c:	dc03      	bgt.n	801e586 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e57e:	9a05      	ldr	r2, [sp, #20]
 801e580:	2a00      	cmp	r2, #0
 801e582:	f340 8129 	ble.w	801e7d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e586:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e588:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801e58c:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801e590:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e594:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e596:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e59a:	2b00      	cmp	r3, #0
 801e59c:	dd0e      	ble.n	801e5bc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e59e:	1408      	asrs	r0, r1, #16
 801e5a0:	d405      	bmi.n	801e5ae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e5a2:	4560      	cmp	r0, ip
 801e5a4:	da03      	bge.n	801e5ae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e5a6:	1410      	asrs	r0, r2, #16
 801e5a8:	d401      	bmi.n	801e5ae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e5aa:	42b8      	cmp	r0, r7
 801e5ac:	db07      	blt.n	801e5be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801e5ae:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e5b0:	4401      	add	r1, r0
 801e5b2:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e5b4:	3b01      	subs	r3, #1
 801e5b6:	4402      	add	r2, r0
 801e5b8:	3402      	adds	r4, #2
 801e5ba:	e7ee      	b.n	801e59a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e5bc:	d071      	beq.n	801e6a2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e5be:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e5c0:	1e58      	subs	r0, r3, #1
 801e5c2:	fb05 1500 	mla	r5, r5, r0, r1
 801e5c6:	142d      	asrs	r5, r5, #16
 801e5c8:	d45f      	bmi.n	801e68a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e5ca:	4565      	cmp	r5, ip
 801e5cc:	da5d      	bge.n	801e68a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e5ce:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801e5d0:	fb05 2000 	mla	r0, r5, r0, r2
 801e5d4:	1400      	asrs	r0, r0, #16
 801e5d6:	d458      	bmi.n	801e68a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e5d8:	42b8      	cmp	r0, r7
 801e5da:	da56      	bge.n	801e68a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e5dc:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801e5e0:	4699      	mov	r9, r3
 801e5e2:	46a2      	mov	sl, r4
 801e5e4:	f1b9 0f00 	cmp.w	r9, #0
 801e5e8:	dd57      	ble.n	801e69a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801e5ea:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801e5ee:	9803      	ldr	r0, [sp, #12]
 801e5f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801e5f4:	140d      	asrs	r5, r1, #16
 801e5f6:	fb07 000c 	mla	r0, r7, ip, r0
 801e5fa:	f109 39ff 	add.w	r9, r9, #4294967295
 801e5fe:	5d40      	ldrb	r0, [r0, r5]
 801e600:	9d04      	ldr	r5, [sp, #16]
 801e602:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801e606:	f8ba 5000 	ldrh.w	r5, [sl]
 801e60a:	122f      	asrs	r7, r5, #8
 801e60c:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e610:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e614:	fb17 f706 	smulbb	r7, r7, r6
 801e618:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801e61c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e620:	00ed      	lsls	r5, r5, #3
 801e622:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801e626:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801e62a:	10c7      	asrs	r7, r0, #3
 801e62c:	b2ed      	uxtb	r5, r5
 801e62e:	00c0      	lsls	r0, r0, #3
 801e630:	fb18 f806 	smulbb	r8, r8, r6
 801e634:	fb15 f506 	smulbb	r5, r5, r6
 801e638:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e63c:	b2c0      	uxtb	r0, r0
 801e63e:	fa1f fc8c 	uxth.w	ip, ip
 801e642:	fb07 870b 	mla	r7, r7, fp, r8
 801e646:	fb00 500b 	mla	r0, r0, fp, r5
 801e64a:	b280      	uxth	r0, r0
 801e64c:	b2bf      	uxth	r7, r7
 801e64e:	f10c 0501 	add.w	r5, ip, #1
 801e652:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e656:	f107 0801 	add.w	r8, r7, #1
 801e65a:	1c45      	adds	r5, r0, #1
 801e65c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e660:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801e664:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e666:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e66a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e66e:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801e672:	ea45 0c0c 	orr.w	ip, r5, ip
 801e676:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801e67a:	4401      	add	r1, r0
 801e67c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e67e:	ea4c 0c08 	orr.w	ip, ip, r8
 801e682:	f82a cb02 	strh.w	ip, [sl], #2
 801e686:	4402      	add	r2, r0
 801e688:	e7ac      	b.n	801e5e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801e68a:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801e68e:	f04f 0800 	mov.w	r8, #0
 801e692:	eb03 0008 	add.w	r0, r3, r8
 801e696:	2800      	cmp	r0, #0
 801e698:	dc41      	bgt.n	801e71e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e69a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e69e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e6a2:	9b01      	ldr	r3, [sp, #4]
 801e6a4:	2b00      	cmp	r3, #0
 801e6a6:	f340 8097 	ble.w	801e7d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e6aa:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e6ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e6b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e6b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e6b8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e6bc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e6c0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e6c4:	eef0 6a62 	vmov.f32	s13, s5
 801e6c8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e6cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e6d0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e6d4:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801e6d8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e6dc:	eef0 6a43 	vmov.f32	s13, s6
 801e6e0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e6e4:	ee12 2a90 	vmov	r2, s5
 801e6e8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e6ec:	fb92 f3f3 	sdiv	r3, r2, r3
 801e6f0:	ee13 2a10 	vmov	r2, s6
 801e6f4:	9313      	str	r3, [sp, #76]	; 0x4c
 801e6f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e6f8:	fb92 f3f3 	sdiv	r3, r2, r3
 801e6fc:	9314      	str	r3, [sp, #80]	; 0x50
 801e6fe:	9b01      	ldr	r3, [sp, #4]
 801e700:	9a05      	ldr	r2, [sp, #20]
 801e702:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e706:	3b01      	subs	r3, #1
 801e708:	9301      	str	r3, [sp, #4]
 801e70a:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801e70e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e710:	eeb0 3a67 	vmov.f32	s6, s15
 801e714:	bf08      	it	eq
 801e716:	4613      	moveq	r3, r2
 801e718:	eef0 2a47 	vmov.f32	s5, s14
 801e71c:	e72c      	b.n	801e578 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e71e:	140f      	asrs	r7, r1, #16
 801e720:	d453      	bmi.n	801e7ca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e722:	f8de 5008 	ldr.w	r5, [lr, #8]
 801e726:	42bd      	cmp	r5, r7
 801e728:	dd4f      	ble.n	801e7ca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e72a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801e72e:	d44c      	bmi.n	801e7ca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e730:	f8de 000c 	ldr.w	r0, [lr, #12]
 801e734:	4560      	cmp	r0, ip
 801e736:	dd48      	ble.n	801e7ca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e738:	9803      	ldr	r0, [sp, #12]
 801e73a:	b22d      	sxth	r5, r5
 801e73c:	fb0c 0505 	mla	r5, ip, r5, r0
 801e740:	5de8      	ldrb	r0, [r5, r7]
 801e742:	9d04      	ldr	r5, [sp, #16]
 801e744:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801e748:	f06f 0501 	mvn.w	r5, #1
 801e74c:	fb05 fb08 	mul.w	fp, r5, r8
 801e750:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e754:	f834 500b 	ldrh.w	r5, [r4, fp]
 801e758:	122f      	asrs	r7, r5, #8
 801e75a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e75e:	fb17 f706 	smulbb	r7, r7, r6
 801e762:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801e766:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e76a:	00ed      	lsls	r5, r5, #3
 801e76c:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801e770:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801e774:	10c7      	asrs	r7, r0, #3
 801e776:	b2ed      	uxtb	r5, r5
 801e778:	00c0      	lsls	r0, r0, #3
 801e77a:	fb19 f906 	smulbb	r9, r9, r6
 801e77e:	fb15 f506 	smulbb	r5, r5, r6
 801e782:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e786:	b2c0      	uxtb	r0, r0
 801e788:	fa1f fc8c 	uxth.w	ip, ip
 801e78c:	fb07 970a 	mla	r7, r7, sl, r9
 801e790:	fb00 500a 	mla	r0, r0, sl, r5
 801e794:	b2bf      	uxth	r7, r7
 801e796:	b280      	uxth	r0, r0
 801e798:	f10c 0501 	add.w	r5, ip, #1
 801e79c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e7a0:	f107 0901 	add.w	r9, r7, #1
 801e7a4:	1c45      	adds	r5, r0, #1
 801e7a6:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e7aa:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801e7ae:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e7b2:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e7b6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801e7ba:	ea45 0c0c 	orr.w	ip, r5, ip
 801e7be:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801e7c2:	ea4c 0c09 	orr.w	ip, ip, r9
 801e7c6:	f824 c00b 	strh.w	ip, [r4, fp]
 801e7ca:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e7cc:	4401      	add	r1, r0
 801e7ce:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e7d0:	f108 38ff 	add.w	r8, r8, #4294967295
 801e7d4:	4402      	add	r2, r0
 801e7d6:	e75c      	b.n	801e692 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801e7d8:	b007      	add	sp, #28
 801e7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e7de <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e7de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7e2:	b085      	sub	sp, #20
 801e7e4:	4693      	mov	fp, r2
 801e7e6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e7e8:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801e7ea:	6870      	ldr	r0, [r6, #4]
 801e7ec:	9100      	str	r1, [sp, #0]
 801e7ee:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e7f2:	fb00 2404 	mla	r4, r0, r4, r2
 801e7f6:	6832      	ldr	r2, [r6, #0]
 801e7f8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e7fc:	682a      	ldr	r2, [r5, #0]
 801e7fe:	9201      	str	r2, [sp, #4]
 801e800:	686a      	ldr	r2, [r5, #4]
 801e802:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801e806:	3204      	adds	r2, #4
 801e808:	9202      	str	r2, [sp, #8]
 801e80a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e80e:	9a00      	ldr	r2, [sp, #0]
 801e810:	2a00      	cmp	r2, #0
 801e812:	dc03      	bgt.n	801e81c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e814:	f1bb 0f00 	cmp.w	fp, #0
 801e818:	f340 80a0 	ble.w	801e95c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801e81c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e81e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e822:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801e826:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e82a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e82c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e830:	2b00      	cmp	r3, #0
 801e832:	dd0c      	ble.n	801e84e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e834:	1406      	asrs	r6, r0, #16
 801e836:	d405      	bmi.n	801e844 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e838:	454e      	cmp	r6, r9
 801e83a:	da03      	bge.n	801e844 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e83c:	1416      	asrs	r6, r2, #16
 801e83e:	d401      	bmi.n	801e844 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e840:	4546      	cmp	r6, r8
 801e842:	db05      	blt.n	801e850 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e844:	4470      	add	r0, lr
 801e846:	4462      	add	r2, ip
 801e848:	3b01      	subs	r3, #1
 801e84a:	3402      	adds	r4, #2
 801e84c:	e7f0      	b.n	801e830 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801e84e:	d00f      	beq.n	801e870 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e850:	1e5e      	subs	r6, r3, #1
 801e852:	fb0e 0706 	mla	r7, lr, r6, r0
 801e856:	143f      	asrs	r7, r7, #16
 801e858:	d541      	bpl.n	801e8de <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801e85a:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801e85e:	4698      	mov	r8, r3
 801e860:	9603      	str	r6, [sp, #12]
 801e862:	f1b8 0f00 	cmp.w	r8, #0
 801e866:	dc59      	bgt.n	801e91c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e868:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e86c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e870:	9b00      	ldr	r3, [sp, #0]
 801e872:	2b00      	cmp	r3, #0
 801e874:	dd72      	ble.n	801e95c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801e876:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e87a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e87e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e882:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e884:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e888:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e88c:	eeb0 6a62 	vmov.f32	s12, s5
 801e890:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e894:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e898:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e89c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e8a0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e8a4:	eeb0 6a43 	vmov.f32	s12, s6
 801e8a8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e8ac:	ee12 2a90 	vmov	r2, s5
 801e8b0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e8b4:	fb92 fef3 	sdiv	lr, r2, r3
 801e8b8:	ee13 2a10 	vmov	r2, s6
 801e8bc:	fb92 fcf3 	sdiv	ip, r2, r3
 801e8c0:	9b00      	ldr	r3, [sp, #0]
 801e8c2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e8c6:	3b01      	subs	r3, #1
 801e8c8:	9300      	str	r3, [sp, #0]
 801e8ca:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e8ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e8d0:	eeb0 3a67 	vmov.f32	s6, s15
 801e8d4:	bf08      	it	eq
 801e8d6:	465b      	moveq	r3, fp
 801e8d8:	eef0 2a47 	vmov.f32	s5, s14
 801e8dc:	e797      	b.n	801e80e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801e8de:	454f      	cmp	r7, r9
 801e8e0:	dabb      	bge.n	801e85a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e8e2:	fb0c 2606 	mla	r6, ip, r6, r2
 801e8e6:	1436      	asrs	r6, r6, #16
 801e8e8:	d4b7      	bmi.n	801e85a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e8ea:	4546      	cmp	r6, r8
 801e8ec:	dab5      	bge.n	801e85a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e8ee:	461e      	mov	r6, r3
 801e8f0:	46a0      	mov	r8, r4
 801e8f2:	2e00      	cmp	r6, #0
 801e8f4:	ddb8      	ble.n	801e868 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801e8f6:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801e8fa:	9901      	ldr	r1, [sp, #4]
 801e8fc:	1417      	asrs	r7, r2, #16
 801e8fe:	ea4f 4920 	mov.w	r9, r0, asr #16
 801e902:	fb0a 1707 	mla	r7, sl, r7, r1
 801e906:	9902      	ldr	r1, [sp, #8]
 801e908:	f817 7009 	ldrb.w	r7, [r7, r9]
 801e90c:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801e910:	f828 7b02 	strh.w	r7, [r8], #2
 801e914:	4470      	add	r0, lr
 801e916:	4462      	add	r2, ip
 801e918:	3e01      	subs	r6, #1
 801e91a:	e7ea      	b.n	801e8f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801e91c:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e920:	d417      	bmi.n	801e952 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e922:	68ae      	ldr	r6, [r5, #8]
 801e924:	454e      	cmp	r6, r9
 801e926:	dd14      	ble.n	801e952 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e928:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801e92c:	d411      	bmi.n	801e952 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e92e:	68ef      	ldr	r7, [r5, #12]
 801e930:	4557      	cmp	r7, sl
 801e932:	dd0e      	ble.n	801e952 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e934:	9f01      	ldr	r7, [sp, #4]
 801e936:	b236      	sxth	r6, r6
 801e938:	fb0a 7606 	mla	r6, sl, r6, r7
 801e93c:	9f02      	ldr	r7, [sp, #8]
 801e93e:	f816 6009 	ldrb.w	r6, [r6, r9]
 801e942:	f06f 0101 	mvn.w	r1, #1
 801e946:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801e94a:	fb01 f608 	mul.w	r6, r1, r8
 801e94e:	9903      	ldr	r1, [sp, #12]
 801e950:	538f      	strh	r7, [r1, r6]
 801e952:	4470      	add	r0, lr
 801e954:	4462      	add	r2, ip
 801e956:	f108 38ff 	add.w	r8, r8, #4294967295
 801e95a:	e782      	b.n	801e862 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e95c:	b005      	add	sp, #20
 801e95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e962 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e962:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e966:	b087      	sub	sp, #28
 801e968:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e96a:	9205      	str	r2, [sp, #20]
 801e96c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e970:	9203      	str	r2, [sp, #12]
 801e972:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801e976:	9102      	str	r1, [sp, #8]
 801e978:	6861      	ldr	r1, [r4, #4]
 801e97a:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801e97e:	fb01 2000 	mla	r0, r1, r0, r2
 801e982:	6822      	ldr	r2, [r4, #0]
 801e984:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801e988:	9200      	str	r2, [sp, #0]
 801e98a:	f8dc 2000 	ldr.w	r2, [ip]
 801e98e:	9204      	str	r2, [sp, #16]
 801e990:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801e994:	3204      	adds	r2, #4
 801e996:	9201      	str	r2, [sp, #4]
 801e998:	9a03      	ldr	r2, [sp, #12]
 801e99a:	43d5      	mvns	r5, r2
 801e99c:	b2ed      	uxtb	r5, r5
 801e99e:	9a02      	ldr	r2, [sp, #8]
 801e9a0:	2a00      	cmp	r2, #0
 801e9a2:	dc03      	bgt.n	801e9ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801e9a4:	9a05      	ldr	r2, [sp, #20]
 801e9a6:	2a00      	cmp	r2, #0
 801e9a8:	f340 812c 	ble.w	801ec04 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801e9ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e9ae:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801e9b2:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801e9b6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e9ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e9bc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e9c0:	2b00      	cmp	r3, #0
 801e9c2:	dd10      	ble.n	801e9e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e9c4:	140c      	asrs	r4, r1, #16
 801e9c6:	d405      	bmi.n	801e9d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e9c8:	4574      	cmp	r4, lr
 801e9ca:	da03      	bge.n	801e9d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e9cc:	1414      	asrs	r4, r2, #16
 801e9ce:	d401      	bmi.n	801e9d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e9d0:	42bc      	cmp	r4, r7
 801e9d2:	db09      	blt.n	801e9e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e9d4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e9d6:	9800      	ldr	r0, [sp, #0]
 801e9d8:	4421      	add	r1, r4
 801e9da:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e9dc:	3002      	adds	r0, #2
 801e9de:	4422      	add	r2, r4
 801e9e0:	3b01      	subs	r3, #1
 801e9e2:	9000      	str	r0, [sp, #0]
 801e9e4:	e7ec      	b.n	801e9c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801e9e6:	d071      	beq.n	801eacc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801e9e8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e9ea:	1e5c      	subs	r4, r3, #1
 801e9ec:	fb06 1604 	mla	r6, r6, r4, r1
 801e9f0:	1436      	asrs	r6, r6, #16
 801e9f2:	d45d      	bmi.n	801eab0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e9f4:	4576      	cmp	r6, lr
 801e9f6:	da5b      	bge.n	801eab0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e9f8:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801e9fa:	fb06 2404 	mla	r4, r6, r4, r2
 801e9fe:	1424      	asrs	r4, r4, #16
 801ea00:	d456      	bmi.n	801eab0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801ea02:	42bc      	cmp	r4, r7
 801ea04:	da54      	bge.n	801eab0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801ea06:	f8dd 9000 	ldr.w	r9, [sp]
 801ea0a:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801ea0e:	4698      	mov	r8, r3
 801ea10:	f1b8 0f00 	cmp.w	r8, #0
 801ea14:	dd54      	ble.n	801eac0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801ea16:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801ea1a:	9804      	ldr	r0, [sp, #16]
 801ea1c:	1414      	asrs	r4, r2, #16
 801ea1e:	fb07 0404 	mla	r4, r7, r4, r0
 801ea22:	140e      	asrs	r6, r1, #16
 801ea24:	9801      	ldr	r0, [sp, #4]
 801ea26:	f814 e006 	ldrb.w	lr, [r4, r6]
 801ea2a:	f8b9 4000 	ldrh.w	r4, [r9]
 801ea2e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801ea32:	eb00 0b0e 	add.w	fp, r0, lr
 801ea36:	1227      	asrs	r7, r4, #8
 801ea38:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801ea3c:	f89b b001 	ldrb.w	fp, [fp, #1]
 801ea40:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801ea44:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ea46:	fb16 f60a 	smulbb	r6, r6, sl
 801ea4a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ea4e:	fb07 6705 	mla	r7, r7, r5, r6
 801ea52:	10e6      	asrs	r6, r4, #3
 801ea54:	00e4      	lsls	r4, r4, #3
 801ea56:	b2e4      	uxtb	r4, r4
 801ea58:	fb1b fb0a 	smulbb	fp, fp, sl
 801ea5c:	fb14 f405 	smulbb	r4, r4, r5
 801ea60:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ea64:	b2bf      	uxth	r7, r7
 801ea66:	fb06 b605 	mla	r6, r6, r5, fp
 801ea6a:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801ea6e:	b2b6      	uxth	r6, r6
 801ea70:	fa1f fe8e 	uxth.w	lr, lr
 801ea74:	1c7c      	adds	r4, r7, #1
 801ea76:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801ea7a:	f106 0b01 	add.w	fp, r6, #1
 801ea7e:	f10e 0401 	add.w	r4, lr, #1
 801ea82:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801ea86:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801ea8a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ea8e:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801ea92:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801ea96:	4327      	orrs	r7, r4
 801ea98:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801ea9c:	4401      	add	r1, r0
 801ea9e:	9814      	ldr	r0, [sp, #80]	; 0x50
 801eaa0:	ea47 070b 	orr.w	r7, r7, fp
 801eaa4:	f829 7b02 	strh.w	r7, [r9], #2
 801eaa8:	4402      	add	r2, r0
 801eaaa:	f108 38ff 	add.w	r8, r8, #4294967295
 801eaae:	e7af      	b.n	801ea10 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801eab0:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801eab4:	f04f 0e00 	mov.w	lr, #0
 801eab8:	eb03 040e 	add.w	r4, r3, lr
 801eabc:	2c00      	cmp	r4, #0
 801eabe:	dc43      	bgt.n	801eb48 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801eac0:	9a00      	ldr	r2, [sp, #0]
 801eac2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eac6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801eaca:	9300      	str	r3, [sp, #0]
 801eacc:	9b02      	ldr	r3, [sp, #8]
 801eace:	2b00      	cmp	r3, #0
 801ead0:	f340 8098 	ble.w	801ec04 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801ead4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ead8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801eadc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801eae0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eae2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eae6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eaea:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eaee:	eef0 6a62 	vmov.f32	s13, s5
 801eaf2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eaf6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eafa:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eafe:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801eb02:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eb06:	eef0 6a43 	vmov.f32	s13, s6
 801eb0a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eb0e:	ee12 2a90 	vmov	r2, s5
 801eb12:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eb16:	fb92 f3f3 	sdiv	r3, r2, r3
 801eb1a:	ee13 2a10 	vmov	r2, s6
 801eb1e:	9313      	str	r3, [sp, #76]	; 0x4c
 801eb20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eb22:	fb92 f3f3 	sdiv	r3, r2, r3
 801eb26:	9314      	str	r3, [sp, #80]	; 0x50
 801eb28:	9b02      	ldr	r3, [sp, #8]
 801eb2a:	9a05      	ldr	r2, [sp, #20]
 801eb2c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eb30:	3b01      	subs	r3, #1
 801eb32:	9302      	str	r3, [sp, #8]
 801eb34:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801eb38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eb3a:	eeb0 3a67 	vmov.f32	s6, s15
 801eb3e:	bf08      	it	eq
 801eb40:	4613      	moveq	r3, r2
 801eb42:	eef0 2a47 	vmov.f32	s5, s14
 801eb46:	e72a      	b.n	801e99e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801eb48:	140f      	asrs	r7, r1, #16
 801eb4a:	d454      	bmi.n	801ebf6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801eb4c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801eb50:	42be      	cmp	r6, r7
 801eb52:	dd50      	ble.n	801ebf6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801eb54:	ea5f 4822 	movs.w	r8, r2, asr #16
 801eb58:	d44d      	bmi.n	801ebf6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801eb5a:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801eb5e:	4544      	cmp	r4, r8
 801eb60:	dd49      	ble.n	801ebf6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801eb62:	9c04      	ldr	r4, [sp, #16]
 801eb64:	b236      	sxth	r6, r6
 801eb66:	fb08 4606 	mla	r6, r8, r6, r4
 801eb6a:	f06f 0001 	mvn.w	r0, #1
 801eb6e:	f816 8007 	ldrb.w	r8, [r6, r7]
 801eb72:	9c01      	ldr	r4, [sp, #4]
 801eb74:	fb00 fa0e 	mul.w	sl, r0, lr
 801eb78:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801eb7c:	9800      	ldr	r0, [sp, #0]
 801eb7e:	eb04 0b08 	add.w	fp, r4, r8
 801eb82:	f830 400a 	ldrh.w	r4, [r0, sl]
 801eb86:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801eb8a:	9801      	ldr	r0, [sp, #4]
 801eb8c:	f89b b001 	ldrb.w	fp, [fp, #1]
 801eb90:	f810 8008 	ldrb.w	r8, [r0, r8]
 801eb94:	9800      	ldr	r0, [sp, #0]
 801eb96:	1227      	asrs	r7, r4, #8
 801eb98:	fb16 f609 	smulbb	r6, r6, r9
 801eb9c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801eba0:	fb07 6705 	mla	r7, r7, r5, r6
 801eba4:	10e6      	asrs	r6, r4, #3
 801eba6:	00e4      	lsls	r4, r4, #3
 801eba8:	b2e4      	uxtb	r4, r4
 801ebaa:	fb1b fb09 	smulbb	fp, fp, r9
 801ebae:	fb14 f405 	smulbb	r4, r4, r5
 801ebb2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ebb6:	b2bf      	uxth	r7, r7
 801ebb8:	fb06 b605 	mla	r6, r6, r5, fp
 801ebbc:	fb08 4809 	mla	r8, r8, r9, r4
 801ebc0:	b2b6      	uxth	r6, r6
 801ebc2:	fa1f f888 	uxth.w	r8, r8
 801ebc6:	1c7c      	adds	r4, r7, #1
 801ebc8:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801ebcc:	f106 0b01 	add.w	fp, r6, #1
 801ebd0:	f108 0401 	add.w	r4, r8, #1
 801ebd4:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801ebd8:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801ebdc:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ebe0:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801ebe4:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801ebe8:	4327      	orrs	r7, r4
 801ebea:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801ebee:	ea47 070b 	orr.w	r7, r7, fp
 801ebf2:	f820 700a 	strh.w	r7, [r0, sl]
 801ebf6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ebf8:	4401      	add	r1, r0
 801ebfa:	9814      	ldr	r0, [sp, #80]	; 0x50
 801ebfc:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ec00:	4402      	add	r2, r0
 801ec02:	e759      	b.n	801eab8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801ec04:	b007      	add	sp, #28
 801ec06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801ec0c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ec0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec10:	b085      	sub	sp, #20
 801ec12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ec16:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801ec18:	9203      	str	r2, [sp, #12]
 801ec1a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801ec1e:	6870      	ldr	r0, [r6, #4]
 801ec20:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801ec22:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801ec26:	686f      	ldr	r7, [r5, #4]
 801ec28:	9101      	str	r1, [sp, #4]
 801ec2a:	fb00 2404 	mla	r4, r0, r4, r2
 801ec2e:	6832      	ldr	r2, [r6, #0]
 801ec30:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ec34:	682a      	ldr	r2, [r5, #0]
 801ec36:	9202      	str	r2, [sp, #8]
 801ec38:	3704      	adds	r7, #4
 801ec3a:	9a01      	ldr	r2, [sp, #4]
 801ec3c:	2a00      	cmp	r2, #0
 801ec3e:	dc03      	bgt.n	801ec48 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ec40:	9a03      	ldr	r2, [sp, #12]
 801ec42:	2a00      	cmp	r2, #0
 801ec44:	f340 80cc 	ble.w	801ede0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801ec48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ec4a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801ec4e:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801ec52:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ec56:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ec58:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ec5c:	2b00      	cmp	r3, #0
 801ec5e:	dd0d      	ble.n	801ec7c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ec60:	1406      	asrs	r6, r0, #16
 801ec62:	d405      	bmi.n	801ec70 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801ec64:	454e      	cmp	r6, r9
 801ec66:	da03      	bge.n	801ec70 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801ec68:	1416      	asrs	r6, r2, #16
 801ec6a:	d401      	bmi.n	801ec70 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801ec6c:	4546      	cmp	r6, r8
 801ec6e:	db06      	blt.n	801ec7e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ec70:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801ec72:	4460      	add	r0, ip
 801ec74:	4432      	add	r2, r6
 801ec76:	3b01      	subs	r3, #1
 801ec78:	3402      	adds	r4, #2
 801ec7a:	e7ef      	b.n	801ec5c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801ec7c:	d00f      	beq.n	801ec9e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ec7e:	1e5e      	subs	r6, r3, #1
 801ec80:	fb0c 0e06 	mla	lr, ip, r6, r0
 801ec84:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801ec88:	d543      	bpl.n	801ed12 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801ec8a:	4698      	mov	r8, r3
 801ec8c:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801ec90:	f1b8 0f00 	cmp.w	r8, #0
 801ec94:	dc71      	bgt.n	801ed7a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801ec96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ec9a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ec9e:	9b01      	ldr	r3, [sp, #4]
 801eca0:	2b00      	cmp	r3, #0
 801eca2:	f340 809d 	ble.w	801ede0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801eca6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ecaa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ecae:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ecb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ecb4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ecb8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ecbc:	eeb0 6a62 	vmov.f32	s12, s5
 801ecc0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ecc4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ecc8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eccc:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ecd0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ecd4:	eeb0 6a43 	vmov.f32	s12, s6
 801ecd8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ecdc:	ee12 2a90 	vmov	r2, s5
 801ece0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ece4:	fb92 fcf3 	sdiv	ip, r2, r3
 801ece8:	ee13 2a10 	vmov	r2, s6
 801ecec:	fb92 f3f3 	sdiv	r3, r2, r3
 801ecf0:	9312      	str	r3, [sp, #72]	; 0x48
 801ecf2:	9b01      	ldr	r3, [sp, #4]
 801ecf4:	9a03      	ldr	r2, [sp, #12]
 801ecf6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ecfa:	3b01      	subs	r3, #1
 801ecfc:	9301      	str	r3, [sp, #4]
 801ecfe:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ed02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ed04:	eeb0 3a67 	vmov.f32	s6, s15
 801ed08:	bf08      	it	eq
 801ed0a:	4613      	moveq	r3, r2
 801ed0c:	eef0 2a47 	vmov.f32	s5, s14
 801ed10:	e793      	b.n	801ec3a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801ed12:	45ce      	cmp	lr, r9
 801ed14:	dab9      	bge.n	801ec8a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ed16:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ed18:	fb01 2606 	mla	r6, r1, r6, r2
 801ed1c:	1436      	asrs	r6, r6, #16
 801ed1e:	d4b4      	bmi.n	801ec8a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ed20:	4546      	cmp	r6, r8
 801ed22:	dab2      	bge.n	801ec8a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ed24:	4698      	mov	r8, r3
 801ed26:	46a2      	mov	sl, r4
 801ed28:	f1b8 0f00 	cmp.w	r8, #0
 801ed2c:	ddb3      	ble.n	801ec96 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801ed2e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801ed32:	9902      	ldr	r1, [sp, #8]
 801ed34:	1416      	asrs	r6, r2, #16
 801ed36:	fb09 1606 	mla	r6, r9, r6, r1
 801ed3a:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801ed3e:	492a      	ldr	r1, [pc, #168]	; (801ede8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801ed40:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801ed44:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801ed48:	eb07 0b0e 	add.w	fp, r7, lr
 801ed4c:	4460      	add	r0, ip
 801ed4e:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801ed52:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801ed56:	00f6      	lsls	r6, r6, #3
 801ed58:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801ed5c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801ed60:	ea49 0606 	orr.w	r6, r9, r6
 801ed64:	f817 900e 	ldrb.w	r9, [r7, lr]
 801ed68:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ed6a:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801ed6e:	f82a 6b02 	strh.w	r6, [sl], #2
 801ed72:	440a      	add	r2, r1
 801ed74:	f108 38ff 	add.w	r8, r8, #4294967295
 801ed78:	e7d6      	b.n	801ed28 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801ed7a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801ed7e:	d429      	bmi.n	801edd4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801ed80:	68ae      	ldr	r6, [r5, #8]
 801ed82:	454e      	cmp	r6, r9
 801ed84:	dd26      	ble.n	801edd4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801ed86:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801ed8a:	d423      	bmi.n	801edd4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801ed8c:	68e9      	ldr	r1, [r5, #12]
 801ed8e:	4559      	cmp	r1, fp
 801ed90:	dd20      	ble.n	801edd4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801ed92:	9902      	ldr	r1, [sp, #8]
 801ed94:	fa0f fe86 	sxth.w	lr, r6
 801ed98:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801ed9c:	f06f 0101 	mvn.w	r1, #1
 801eda0:	f81e e009 	ldrb.w	lr, [lr, r9]
 801eda4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801eda8:	eb07 060e 	add.w	r6, r7, lr
 801edac:	fb01 f908 	mul.w	r9, r1, r8
 801edb0:	f896 b002 	ldrb.w	fp, [r6, #2]
 801edb4:	7876      	ldrb	r6, [r6, #1]
 801edb6:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801edba:	00f6      	lsls	r6, r6, #3
 801edbc:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801edc0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801edc4:	ea4b 0606 	orr.w	r6, fp, r6
 801edc8:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801edcc:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801edd0:	f82a 6009 	strh.w	r6, [sl, r9]
 801edd4:	9912      	ldr	r1, [sp, #72]	; 0x48
 801edd6:	4460      	add	r0, ip
 801edd8:	440a      	add	r2, r1
 801edda:	f108 38ff 	add.w	r8, r8, #4294967295
 801edde:	e757      	b.n	801ec90 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801ede0:	b005      	add	sp, #20
 801ede2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ede6:	bf00      	nop
 801ede8:	fffff800 	.word	0xfffff800

0801edec <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801edec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801edf0:	b087      	sub	sp, #28
 801edf2:	468b      	mov	fp, r1
 801edf4:	9815      	ldr	r0, [sp, #84]	; 0x54
 801edf6:	9204      	str	r2, [sp, #16]
 801edf8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801edfc:	9205      	str	r2, [sp, #20]
 801edfe:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801ee02:	6841      	ldr	r1, [r0, #4]
 801ee04:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801ee08:	fb01 2404 	mla	r4, r1, r4, r2
 801ee0c:	6802      	ldr	r2, [r0, #0]
 801ee0e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ee12:	f8dc 2000 	ldr.w	r2, [ip]
 801ee16:	9201      	str	r2, [sp, #4]
 801ee18:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801ee1c:	3204      	adds	r2, #4
 801ee1e:	9202      	str	r2, [sp, #8]
 801ee20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ee24:	f1bb 0f00 	cmp.w	fp, #0
 801ee28:	dc03      	bgt.n	801ee32 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801ee2a:	9a04      	ldr	r2, [sp, #16]
 801ee2c:	2a00      	cmp	r2, #0
 801ee2e:	f340 8138 	ble.w	801f0a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801ee32:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ee34:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801ee38:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801ee3c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ee40:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ee42:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ee46:	2b00      	cmp	r3, #0
 801ee48:	dd0e      	ble.n	801ee68 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ee4a:	1402      	asrs	r2, r0, #16
 801ee4c:	d405      	bmi.n	801ee5a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ee4e:	42ba      	cmp	r2, r7
 801ee50:	da03      	bge.n	801ee5a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ee52:	140a      	asrs	r2, r1, #16
 801ee54:	d401      	bmi.n	801ee5a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ee56:	42b2      	cmp	r2, r6
 801ee58:	db07      	blt.n	801ee6a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ee5a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ee5c:	4410      	add	r0, r2
 801ee5e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ee60:	3b01      	subs	r3, #1
 801ee62:	4411      	add	r1, r2
 801ee64:	3402      	adds	r4, #2
 801ee66:	e7ee      	b.n	801ee46 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801ee68:	d019      	beq.n	801ee9e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801ee6a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ee6c:	1e5a      	subs	r2, r3, #1
 801ee6e:	fb05 0502 	mla	r5, r5, r2, r0
 801ee72:	142d      	asrs	r5, r5, #16
 801ee74:	d409      	bmi.n	801ee8a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ee76:	42bd      	cmp	r5, r7
 801ee78:	da07      	bge.n	801ee8a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ee7a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801ee7c:	fb05 1202 	mla	r2, r5, r2, r1
 801ee80:	1412      	asrs	r2, r2, #16
 801ee82:	d402      	bmi.n	801ee8a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ee84:	42b2      	cmp	r2, r6
 801ee86:	f2c0 80ac 	blt.w	801efe2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801ee8a:	f04f 0e00 	mov.w	lr, #0
 801ee8e:	eb03 020e 	add.w	r2, r3, lr
 801ee92:	2a00      	cmp	r2, #0
 801ee94:	dc3e      	bgt.n	801ef14 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801ee96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ee9a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ee9e:	f1bb 0f00 	cmp.w	fp, #0
 801eea2:	f340 80fe 	ble.w	801f0a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801eea6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eeaa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eeae:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801eeb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eeb4:	f1bb 0b01 	subs.w	fp, fp, #1
 801eeb8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eebc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eec0:	eeb0 6a62 	vmov.f32	s12, s5
 801eec4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eec8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eecc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eed0:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801eed4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eed8:	eeb0 6a43 	vmov.f32	s12, s6
 801eedc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eee0:	ee12 2a90 	vmov	r2, s5
 801eee4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eee8:	fb92 f3f3 	sdiv	r3, r2, r3
 801eeec:	ee13 2a10 	vmov	r2, s6
 801eef0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eef4:	9313      	str	r3, [sp, #76]	; 0x4c
 801eef6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eef8:	fb92 f3f3 	sdiv	r3, r2, r3
 801eefc:	9a04      	ldr	r2, [sp, #16]
 801eefe:	9314      	str	r3, [sp, #80]	; 0x50
 801ef00:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ef04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ef06:	eeb0 3a67 	vmov.f32	s6, s15
 801ef0a:	bf08      	it	eq
 801ef0c:	4613      	moveq	r3, r2
 801ef0e:	eef0 2a47 	vmov.f32	s5, s14
 801ef12:	e787      	b.n	801ee24 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801ef14:	1406      	asrs	r6, r0, #16
 801ef16:	d45d      	bmi.n	801efd4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ef18:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801ef1c:	42b5      	cmp	r5, r6
 801ef1e:	dd59      	ble.n	801efd4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ef20:	140f      	asrs	r7, r1, #16
 801ef22:	d457      	bmi.n	801efd4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ef24:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801ef28:	42ba      	cmp	r2, r7
 801ef2a:	dd53      	ble.n	801efd4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ef2c:	9a01      	ldr	r2, [sp, #4]
 801ef2e:	b22d      	sxth	r5, r5
 801ef30:	fb07 2505 	mla	r5, r7, r5, r2
 801ef34:	5daa      	ldrb	r2, [r5, r6]
 801ef36:	9d02      	ldr	r5, [sp, #8]
 801ef38:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801ef3c:	0e2e      	lsrs	r6, r5, #24
 801ef3e:	d049      	beq.n	801efd4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ef40:	f06f 0201 	mvn.w	r2, #1
 801ef44:	fb02 f20e 	mul.w	r2, r2, lr
 801ef48:	9203      	str	r2, [sp, #12]
 801ef4a:	f834 8002 	ldrh.w	r8, [r4, r2]
 801ef4e:	9a05      	ldr	r2, [sp, #20]
 801ef50:	4356      	muls	r6, r2
 801ef52:	1c72      	adds	r2, r6, #1
 801ef54:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801ef58:	1212      	asrs	r2, r2, #8
 801ef5a:	fa1f f982 	uxth.w	r9, r2
 801ef5e:	ea4f 2728 	mov.w	r7, r8, asr #8
 801ef62:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ef66:	43d2      	mvns	r2, r2
 801ef68:	b2d2      	uxtb	r2, r2
 801ef6a:	fb16 f609 	smulbb	r6, r6, r9
 801ef6e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ef72:	fb07 6702 	mla	r7, r7, r2, r6
 801ef76:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ef7a:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801ef7e:	b2ed      	uxtb	r5, r5
 801ef80:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801ef84:	fa5f f888 	uxtb.w	r8, r8
 801ef88:	fb15 f509 	smulbb	r5, r5, r9
 801ef8c:	fb08 5502 	mla	r5, r8, r2, r5
 801ef90:	b2bf      	uxth	r7, r7
 801ef92:	fb1a fa09 	smulbb	sl, sl, r9
 801ef96:	b2ad      	uxth	r5, r5
 801ef98:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ef9c:	fb06 a602 	mla	r6, r6, r2, sl
 801efa0:	1c7a      	adds	r2, r7, #1
 801efa2:	f105 0a01 	add.w	sl, r5, #1
 801efa6:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801efaa:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801efae:	b2b6      	uxth	r6, r6
 801efb0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801efb4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801efb8:	ea4a 0707 	orr.w	r7, sl, r7
 801efbc:	f106 0a01 	add.w	sl, r6, #1
 801efc0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801efc4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801efc8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801efcc:	9a03      	ldr	r2, [sp, #12]
 801efce:	ea47 070a 	orr.w	r7, r7, sl
 801efd2:	52a7      	strh	r7, [r4, r2]
 801efd4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801efd6:	4410      	add	r0, r2
 801efd8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801efda:	f10e 3eff 	add.w	lr, lr, #4294967295
 801efde:	4411      	add	r1, r2
 801efe0:	e755      	b.n	801ee8e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801efe2:	f04f 0800 	mov.w	r8, #0
 801efe6:	eba3 0208 	sub.w	r2, r3, r8
 801efea:	2a00      	cmp	r2, #0
 801efec:	f77f af53 	ble.w	801ee96 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801eff0:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801eff4:	9f01      	ldr	r7, [sp, #4]
 801eff6:	140a      	asrs	r2, r1, #16
 801eff8:	1405      	asrs	r5, r0, #16
 801effa:	fb06 7202 	mla	r2, r6, r2, r7
 801effe:	5d52      	ldrb	r2, [r2, r5]
 801f000:	9d02      	ldr	r5, [sp, #8]
 801f002:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801f006:	0e2e      	lsrs	r6, r5, #24
 801f008:	d044      	beq.n	801f094 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801f00a:	9a05      	ldr	r2, [sp, #20]
 801f00c:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801f010:	4356      	muls	r6, r2
 801f012:	1c72      	adds	r2, r6, #1
 801f014:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801f018:	1212      	asrs	r2, r2, #8
 801f01a:	fa1f f982 	uxth.w	r9, r2
 801f01e:	ea4f 272e 	mov.w	r7, lr, asr #8
 801f022:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801f026:	43d2      	mvns	r2, r2
 801f028:	b2d2      	uxtb	r2, r2
 801f02a:	fb16 f609 	smulbb	r6, r6, r9
 801f02e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f032:	fb07 6702 	mla	r7, r7, r2, r6
 801f036:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801f03a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801f03e:	b2ed      	uxtb	r5, r5
 801f040:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f044:	fa5f fe8e 	uxtb.w	lr, lr
 801f048:	fb15 f509 	smulbb	r5, r5, r9
 801f04c:	fb0e 5502 	mla	r5, lr, r2, r5
 801f050:	b2bf      	uxth	r7, r7
 801f052:	fb1a fa09 	smulbb	sl, sl, r9
 801f056:	b2ad      	uxth	r5, r5
 801f058:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f05c:	fb06 a602 	mla	r6, r6, r2, sl
 801f060:	1c7a      	adds	r2, r7, #1
 801f062:	f105 0a01 	add.w	sl, r5, #1
 801f066:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801f06a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f06e:	b2b6      	uxth	r6, r6
 801f070:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f074:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f078:	ea4a 0707 	orr.w	r7, sl, r7
 801f07c:	f106 0a01 	add.w	sl, r6, #1
 801f080:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f084:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f088:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f08c:	ea47 070a 	orr.w	r7, r7, sl
 801f090:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801f094:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f096:	4410      	add	r0, r2
 801f098:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f09a:	f108 0801 	add.w	r8, r8, #1
 801f09e:	4411      	add	r1, r2
 801f0a0:	e7a1      	b.n	801efe6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801f0a2:	b007      	add	sp, #28
 801f0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f0a8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0ac:	b085      	sub	sp, #20
 801f0ae:	468b      	mov	fp, r1
 801f0b0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f0b2:	9203      	str	r2, [sp, #12]
 801f0b4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f0b8:	6841      	ldr	r1, [r0, #4]
 801f0ba:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801f0be:	fb01 2404 	mla	r4, r1, r4, r2
 801f0c2:	6802      	ldr	r2, [r0, #0]
 801f0c4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f0c8:	f8de 2000 	ldr.w	r2, [lr]
 801f0cc:	9200      	str	r2, [sp, #0]
 801f0ce:	f8de 2004 	ldr.w	r2, [lr, #4]
 801f0d2:	3204      	adds	r2, #4
 801f0d4:	9201      	str	r2, [sp, #4]
 801f0d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f0da:	f1bb 0f00 	cmp.w	fp, #0
 801f0de:	dc03      	bgt.n	801f0e8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801f0e0:	9a03      	ldr	r2, [sp, #12]
 801f0e2:	2a00      	cmp	r2, #0
 801f0e4:	f340 8153 	ble.w	801f38e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801f0e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f0ea:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801f0ee:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801f0f2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f0f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f0f8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f0fc:	2b00      	cmp	r3, #0
 801f0fe:	dd0e      	ble.n	801f11e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f100:	1408      	asrs	r0, r1, #16
 801f102:	d405      	bmi.n	801f110 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f104:	42b8      	cmp	r0, r7
 801f106:	da03      	bge.n	801f110 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f108:	1410      	asrs	r0, r2, #16
 801f10a:	d401      	bmi.n	801f110 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f10c:	42b0      	cmp	r0, r6
 801f10e:	db07      	blt.n	801f120 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f110:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f112:	4401      	add	r1, r0
 801f114:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f116:	3b01      	subs	r3, #1
 801f118:	4402      	add	r2, r0
 801f11a:	3402      	adds	r4, #2
 801f11c:	e7ee      	b.n	801f0fc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801f11e:	d017      	beq.n	801f150 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801f120:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f122:	1e58      	subs	r0, r3, #1
 801f124:	fb05 1500 	mla	r5, r5, r0, r1
 801f128:	142d      	asrs	r5, r5, #16
 801f12a:	d409      	bmi.n	801f140 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f12c:	42bd      	cmp	r5, r7
 801f12e:	da07      	bge.n	801f140 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f130:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f132:	fb05 2000 	mla	r0, r5, r0, r2
 801f136:	1400      	asrs	r0, r0, #16
 801f138:	d402      	bmi.n	801f140 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f13a:	42b0      	cmp	r0, r6
 801f13c:	f2c0 80bc 	blt.w	801f2b8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801f140:	2600      	movs	r6, #0
 801f142:	1998      	adds	r0, r3, r6
 801f144:	2800      	cmp	r0, #0
 801f146:	dc3e      	bgt.n	801f1c6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801f148:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f14c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f150:	f1bb 0f00 	cmp.w	fp, #0
 801f154:	f340 811b 	ble.w	801f38e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801f158:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f15c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f160:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f164:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f166:	f1bb 0b01 	subs.w	fp, fp, #1
 801f16a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f16e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f172:	eeb0 6a62 	vmov.f32	s12, s5
 801f176:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f17a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f17e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f182:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f186:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f18a:	eeb0 6a43 	vmov.f32	s12, s6
 801f18e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f192:	ee12 2a90 	vmov	r2, s5
 801f196:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f19a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f19e:	ee13 2a10 	vmov	r2, s6
 801f1a2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f1a6:	9311      	str	r3, [sp, #68]	; 0x44
 801f1a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f1aa:	fb92 f3f3 	sdiv	r3, r2, r3
 801f1ae:	9a03      	ldr	r2, [sp, #12]
 801f1b0:	9312      	str	r3, [sp, #72]	; 0x48
 801f1b2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f1b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f1b8:	eeb0 3a67 	vmov.f32	s6, s15
 801f1bc:	bf08      	it	eq
 801f1be:	4613      	moveq	r3, r2
 801f1c0:	eef0 2a47 	vmov.f32	s5, s14
 801f1c4:	e789      	b.n	801f0da <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801f1c6:	140f      	asrs	r7, r1, #16
 801f1c8:	d426      	bmi.n	801f218 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801f1ca:	f8de 5008 	ldr.w	r5, [lr, #8]
 801f1ce:	42bd      	cmp	r5, r7
 801f1d0:	dd22      	ble.n	801f218 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801f1d2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f1d6:	d41f      	bmi.n	801f218 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801f1d8:	f8de 000c 	ldr.w	r0, [lr, #12]
 801f1dc:	4560      	cmp	r0, ip
 801f1de:	dd1b      	ble.n	801f218 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801f1e0:	9800      	ldr	r0, [sp, #0]
 801f1e2:	b22d      	sxth	r5, r5
 801f1e4:	fb0c 0505 	mla	r5, ip, r5, r0
 801f1e8:	5de8      	ldrb	r0, [r5, r7]
 801f1ea:	9d01      	ldr	r5, [sp, #4]
 801f1ec:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801f1f0:	0e07      	lsrs	r7, r0, #24
 801f1f2:	2fff      	cmp	r7, #255	; 0xff
 801f1f4:	d116      	bne.n	801f224 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801f1f6:	f06f 0501 	mvn.w	r5, #1
 801f1fa:	fb05 f706 	mul.w	r7, r5, r6
 801f1fe:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801f202:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801f206:	0945      	lsrs	r5, r0, #5
 801f208:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f20c:	ea4c 0505 	orr.w	r5, ip, r5
 801f210:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801f214:	4305      	orrs	r5, r0
 801f216:	53e5      	strh	r5, [r4, r7]
 801f218:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f21a:	4401      	add	r1, r0
 801f21c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f21e:	3e01      	subs	r6, #1
 801f220:	4402      	add	r2, r0
 801f222:	e78e      	b.n	801f142 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801f224:	b2fd      	uxtb	r5, r7
 801f226:	2f00      	cmp	r7, #0
 801f228:	d0f6      	beq.n	801f218 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801f22a:	f06f 0701 	mvn.w	r7, #1
 801f22e:	4377      	muls	r7, r6
 801f230:	fa1f f985 	uxth.w	r9, r5
 801f234:	f834 8007 	ldrh.w	r8, [r4, r7]
 801f238:	9702      	str	r7, [sp, #8]
 801f23a:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801f23e:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801f242:	43ed      	mvns	r5, r5
 801f244:	b2ed      	uxtb	r5, r5
 801f246:	fb17 f709 	smulbb	r7, r7, r9
 801f24a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f24e:	fb0c 7c05 	mla	ip, ip, r5, r7
 801f252:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801f256:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801f25a:	b2c0      	uxtb	r0, r0
 801f25c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801f260:	fa5f f888 	uxtb.w	r8, r8
 801f264:	fb10 f009 	smulbb	r0, r0, r9
 801f268:	fb08 0005 	mla	r0, r8, r5, r0
 801f26c:	b280      	uxth	r0, r0
 801f26e:	fa1f fc8c 	uxth.w	ip, ip
 801f272:	fb1a fa09 	smulbb	sl, sl, r9
 801f276:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f27a:	fb07 a705 	mla	r7, r7, r5, sl
 801f27e:	f100 0a01 	add.w	sl, r0, #1
 801f282:	f10c 0501 	add.w	r5, ip, #1
 801f286:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801f28a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f28e:	b2bf      	uxth	r7, r7
 801f290:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f294:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f298:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f29c:	f107 0a01 	add.w	sl, r7, #1
 801f2a0:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801f2a4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f2a8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f2ac:	9802      	ldr	r0, [sp, #8]
 801f2ae:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f2b2:	f824 c000 	strh.w	ip, [r4, r0]
 801f2b6:	e7af      	b.n	801f218 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801f2b8:	f04f 0800 	mov.w	r8, #0
 801f2bc:	eba3 0008 	sub.w	r0, r3, r8
 801f2c0:	2800      	cmp	r0, #0
 801f2c2:	f77f af41 	ble.w	801f148 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f2c6:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801f2ca:	9f00      	ldr	r7, [sp, #0]
 801f2cc:	1410      	asrs	r0, r2, #16
 801f2ce:	140d      	asrs	r5, r1, #16
 801f2d0:	fb06 7000 	mla	r0, r6, r0, r7
 801f2d4:	5d40      	ldrb	r0, [r0, r5]
 801f2d6:	9d01      	ldr	r5, [sp, #4]
 801f2d8:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801f2dc:	0e2e      	lsrs	r6, r5, #24
 801f2de:	2eff      	cmp	r6, #255	; 0xff
 801f2e0:	d112      	bne.n	801f308 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801f2e2:	482c      	ldr	r0, [pc, #176]	; (801f394 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801f2e4:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801f2e8:	0968      	lsrs	r0, r5, #5
 801f2ea:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f2ee:	4330      	orrs	r0, r6
 801f2f0:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801f2f4:	4328      	orrs	r0, r5
 801f2f6:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801f2fa:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f2fc:	4401      	add	r1, r0
 801f2fe:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f300:	f108 0801 	add.w	r8, r8, #1
 801f304:	4402      	add	r2, r0
 801f306:	e7d9      	b.n	801f2bc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f308:	b2f0      	uxtb	r0, r6
 801f30a:	2e00      	cmp	r6, #0
 801f30c:	d0f5      	beq.n	801f2fa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801f30e:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801f312:	fa1f f980 	uxth.w	r9, r0
 801f316:	ea4f 272c 	mov.w	r7, ip, asr #8
 801f31a:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801f31e:	43c0      	mvns	r0, r0
 801f320:	b2c0      	uxtb	r0, r0
 801f322:	fb16 f609 	smulbb	r6, r6, r9
 801f326:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f32a:	fb07 6700 	mla	r7, r7, r0, r6
 801f32e:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801f332:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801f336:	b2ed      	uxtb	r5, r5
 801f338:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f33c:	fa5f fc8c 	uxtb.w	ip, ip
 801f340:	fb15 f509 	smulbb	r5, r5, r9
 801f344:	fb0c 5500 	mla	r5, ip, r0, r5
 801f348:	b2bf      	uxth	r7, r7
 801f34a:	fb1a fa09 	smulbb	sl, sl, r9
 801f34e:	b2ad      	uxth	r5, r5
 801f350:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f354:	fb06 a600 	mla	r6, r6, r0, sl
 801f358:	1c78      	adds	r0, r7, #1
 801f35a:	f105 0a01 	add.w	sl, r5, #1
 801f35e:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801f362:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f366:	b2b6      	uxth	r6, r6
 801f368:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f36c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f370:	ea4a 0707 	orr.w	r7, sl, r7
 801f374:	f106 0a01 	add.w	sl, r6, #1
 801f378:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f37c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f380:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f384:	ea47 070a 	orr.w	r7, r7, sl
 801f388:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801f38c:	e7b5      	b.n	801f2fa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801f38e:	b005      	add	sp, #20
 801f390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f394:	fffff800 	.word	0xfffff800

0801f398 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f39c:	b087      	sub	sp, #28
 801f39e:	468b      	mov	fp, r1
 801f3a0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f3a2:	9204      	str	r2, [sp, #16]
 801f3a4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f3a8:	9205      	str	r2, [sp, #20]
 801f3aa:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801f3ae:	6861      	ldr	r1, [r4, #4]
 801f3b0:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801f3b4:	fb01 2000 	mla	r0, r1, r0, r2
 801f3b8:	6822      	ldr	r2, [r4, #0]
 801f3ba:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801f3be:	f8de 2000 	ldr.w	r2, [lr]
 801f3c2:	9201      	str	r2, [sp, #4]
 801f3c4:	f8de 2004 	ldr.w	r2, [lr, #4]
 801f3c8:	9202      	str	r2, [sp, #8]
 801f3ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f3ce:	f1bb 0f00 	cmp.w	fp, #0
 801f3d2:	dc03      	bgt.n	801f3dc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801f3d4:	9a04      	ldr	r2, [sp, #16]
 801f3d6:	2a00      	cmp	r2, #0
 801f3d8:	f340 8142 	ble.w	801f660 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801f3dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f3de:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801f3e2:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801f3e6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f3ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f3ec:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f3f0:	2b00      	cmp	r3, #0
 801f3f2:	dd0e      	ble.n	801f412 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f3f4:	140c      	asrs	r4, r1, #16
 801f3f6:	d405      	bmi.n	801f404 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f3f8:	42bc      	cmp	r4, r7
 801f3fa:	da03      	bge.n	801f404 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f3fc:	1414      	asrs	r4, r2, #16
 801f3fe:	d401      	bmi.n	801f404 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f400:	42b4      	cmp	r4, r6
 801f402:	db07      	blt.n	801f414 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f404:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f406:	4421      	add	r1, r4
 801f408:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f40a:	3b01      	subs	r3, #1
 801f40c:	4422      	add	r2, r4
 801f40e:	3002      	adds	r0, #2
 801f410:	e7ee      	b.n	801f3f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801f412:	d019      	beq.n	801f448 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801f414:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f416:	1e5c      	subs	r4, r3, #1
 801f418:	fb05 1504 	mla	r5, r5, r4, r1
 801f41c:	142d      	asrs	r5, r5, #16
 801f41e:	d409      	bmi.n	801f434 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f420:	42bd      	cmp	r5, r7
 801f422:	da07      	bge.n	801f434 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f424:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f426:	fb05 2404 	mla	r4, r5, r4, r2
 801f42a:	1424      	asrs	r4, r4, #16
 801f42c:	d402      	bmi.n	801f434 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f42e:	42b4      	cmp	r4, r6
 801f430:	f2c0 80b1 	blt.w	801f596 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801f434:	f04f 0800 	mov.w	r8, #0
 801f438:	eb03 0408 	add.w	r4, r3, r8
 801f43c:	2c00      	cmp	r4, #0
 801f43e:	dc3e      	bgt.n	801f4be <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801f440:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f444:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f448:	f1bb 0f00 	cmp.w	fp, #0
 801f44c:	f340 8108 	ble.w	801f660 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801f450:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f454:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f458:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f45c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f45e:	f1bb 0b01 	subs.w	fp, fp, #1
 801f462:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f466:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f46a:	eeb0 6a62 	vmov.f32	s12, s5
 801f46e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f472:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f476:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f47a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f47e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f482:	eeb0 6a43 	vmov.f32	s12, s6
 801f486:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f48a:	ee12 2a90 	vmov	r2, s5
 801f48e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f492:	fb92 f3f3 	sdiv	r3, r2, r3
 801f496:	ee13 2a10 	vmov	r2, s6
 801f49a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f49e:	9313      	str	r3, [sp, #76]	; 0x4c
 801f4a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f4a2:	fb92 f3f3 	sdiv	r3, r2, r3
 801f4a6:	9a04      	ldr	r2, [sp, #16]
 801f4a8:	9314      	str	r3, [sp, #80]	; 0x50
 801f4aa:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801f4ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f4b0:	eeb0 3a67 	vmov.f32	s6, s15
 801f4b4:	bf08      	it	eq
 801f4b6:	4613      	moveq	r3, r2
 801f4b8:	eef0 2a47 	vmov.f32	s5, s14
 801f4bc:	e787      	b.n	801f3ce <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801f4be:	140e      	asrs	r6, r1, #16
 801f4c0:	d462      	bmi.n	801f588 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f4c2:	f8de 5008 	ldr.w	r5, [lr, #8]
 801f4c6:	42b5      	cmp	r5, r6
 801f4c8:	dd5e      	ble.n	801f588 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f4ca:	1417      	asrs	r7, r2, #16
 801f4cc:	d45c      	bmi.n	801f588 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f4ce:	f8de 400c 	ldr.w	r4, [lr, #12]
 801f4d2:	42bc      	cmp	r4, r7
 801f4d4:	dd58      	ble.n	801f588 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f4d6:	b22d      	sxth	r5, r5
 801f4d8:	fb07 6505 	mla	r5, r7, r5, r6
 801f4dc:	9c02      	ldr	r4, [sp, #8]
 801f4de:	5d66      	ldrb	r6, [r4, r5]
 801f4e0:	2e00      	cmp	r6, #0
 801f4e2:	d051      	beq.n	801f588 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f4e4:	9c01      	ldr	r4, [sp, #4]
 801f4e6:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801f4ea:	f06f 0401 	mvn.w	r4, #1
 801f4ee:	fb04 f408 	mul.w	r4, r4, r8
 801f4f2:	9403      	str	r4, [sp, #12]
 801f4f4:	5b05      	ldrh	r5, [r0, r4]
 801f4f6:	9c05      	ldr	r4, [sp, #20]
 801f4f8:	4366      	muls	r6, r4
 801f4fa:	1c74      	adds	r4, r6, #1
 801f4fc:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801f500:	1224      	asrs	r4, r4, #8
 801f502:	b2a7      	uxth	r7, r4
 801f504:	122e      	asrs	r6, r5, #8
 801f506:	43e4      	mvns	r4, r4
 801f508:	b2e4      	uxtb	r4, r4
 801f50a:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801f50e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f512:	fb16 f604 	smulbb	r6, r6, r4
 801f516:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f51a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f51e:	00ed      	lsls	r5, r5, #3
 801f520:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f524:	b2ed      	uxtb	r5, r5
 801f526:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801f52a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801f52e:	fb15 f504 	smulbb	r5, r5, r4
 801f532:	fa5f f989 	uxtb.w	r9, r9
 801f536:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f53a:	fb09 5507 	mla	r5, r9, r7, r5
 801f53e:	fb1a fa04 	smulbb	sl, sl, r4
 801f542:	fa1f fc8c 	uxth.w	ip, ip
 801f546:	b2ad      	uxth	r5, r5
 801f548:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f54c:	fb06 a607 	mla	r6, r6, r7, sl
 801f550:	f10c 0401 	add.w	r4, ip, #1
 801f554:	f105 0a01 	add.w	sl, r5, #1
 801f558:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801f55c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f560:	b2b6      	uxth	r6, r6
 801f562:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f566:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f56a:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f56e:	f106 0a01 	add.w	sl, r6, #1
 801f572:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f576:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f57a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f57e:	9c03      	ldr	r4, [sp, #12]
 801f580:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f584:	f820 c004 	strh.w	ip, [r0, r4]
 801f588:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f58a:	4421      	add	r1, r4
 801f58c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f58e:	f108 38ff 	add.w	r8, r8, #4294967295
 801f592:	4422      	add	r2, r4
 801f594:	e750      	b.n	801f438 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f596:	f04f 0900 	mov.w	r9, #0
 801f59a:	eba3 0409 	sub.w	r4, r3, r9
 801f59e:	2c00      	cmp	r4, #0
 801f5a0:	f77f af4e 	ble.w	801f440 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801f5a4:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801f5a8:	140d      	asrs	r5, r1, #16
 801f5aa:	1414      	asrs	r4, r2, #16
 801f5ac:	fb06 5404 	mla	r4, r6, r4, r5
 801f5b0:	9d02      	ldr	r5, [sp, #8]
 801f5b2:	5d2e      	ldrb	r6, [r5, r4]
 801f5b4:	2e00      	cmp	r6, #0
 801f5b6:	d04c      	beq.n	801f652 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801f5b8:	9d01      	ldr	r5, [sp, #4]
 801f5ba:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801f5be:	9c05      	ldr	r4, [sp, #20]
 801f5c0:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801f5c4:	4366      	muls	r6, r4
 801f5c6:	1c74      	adds	r4, r6, #1
 801f5c8:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801f5cc:	1224      	asrs	r4, r4, #8
 801f5ce:	b2a7      	uxth	r7, r4
 801f5d0:	122e      	asrs	r6, r5, #8
 801f5d2:	43e4      	mvns	r4, r4
 801f5d4:	b2e4      	uxtb	r4, r4
 801f5d6:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801f5da:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f5de:	fb16 f604 	smulbb	r6, r6, r4
 801f5e2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f5e6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f5ea:	00ed      	lsls	r5, r5, #3
 801f5ec:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f5f0:	b2ed      	uxtb	r5, r5
 801f5f2:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801f5f6:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801f5fa:	fb15 f504 	smulbb	r5, r5, r4
 801f5fe:	fa5f f888 	uxtb.w	r8, r8
 801f602:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f606:	fb08 5507 	mla	r5, r8, r7, r5
 801f60a:	fb1a fa04 	smulbb	sl, sl, r4
 801f60e:	fa1f fc8c 	uxth.w	ip, ip
 801f612:	b2ad      	uxth	r5, r5
 801f614:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f618:	fb06 a607 	mla	r6, r6, r7, sl
 801f61c:	f10c 0401 	add.w	r4, ip, #1
 801f620:	f105 0a01 	add.w	sl, r5, #1
 801f624:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801f628:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f62c:	b2b6      	uxth	r6, r6
 801f62e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f632:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f636:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f63a:	f106 0a01 	add.w	sl, r6, #1
 801f63e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f642:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f646:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f64a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f64e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801f652:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f654:	4421      	add	r1, r4
 801f656:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f658:	f109 0901 	add.w	r9, r9, #1
 801f65c:	4422      	add	r2, r4
 801f65e:	e79c      	b.n	801f59a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801f660:	b007      	add	sp, #28
 801f662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f666 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f666:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f66a:	b085      	sub	sp, #20
 801f66c:	468b      	mov	fp, r1
 801f66e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f670:	9203      	str	r2, [sp, #12]
 801f672:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801f676:	6861      	ldr	r1, [r4, #4]
 801f678:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801f67c:	fb01 2000 	mla	r0, r1, r0, r2
 801f680:	6822      	ldr	r2, [r4, #0]
 801f682:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801f686:	f8d8 2000 	ldr.w	r2, [r8]
 801f68a:	9200      	str	r2, [sp, #0]
 801f68c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801f690:	9201      	str	r2, [sp, #4]
 801f692:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f696:	f1bb 0f00 	cmp.w	fp, #0
 801f69a:	dc03      	bgt.n	801f6a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f69c:	9a03      	ldr	r2, [sp, #12]
 801f69e:	2a00      	cmp	r2, #0
 801f6a0:	f340 8146 	ble.w	801f930 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801f6a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f6a6:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801f6aa:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801f6ae:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f6b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f6b4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f6b8:	2b00      	cmp	r3, #0
 801f6ba:	dd0e      	ble.n	801f6da <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801f6bc:	140c      	asrs	r4, r1, #16
 801f6be:	d405      	bmi.n	801f6cc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f6c0:	42bc      	cmp	r4, r7
 801f6c2:	da03      	bge.n	801f6cc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f6c4:	1414      	asrs	r4, r2, #16
 801f6c6:	d401      	bmi.n	801f6cc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f6c8:	42b4      	cmp	r4, r6
 801f6ca:	db07      	blt.n	801f6dc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f6cc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f6ce:	4421      	add	r1, r4
 801f6d0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f6d2:	3b01      	subs	r3, #1
 801f6d4:	4422      	add	r2, r4
 801f6d6:	3002      	adds	r0, #2
 801f6d8:	e7ee      	b.n	801f6b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f6da:	d017      	beq.n	801f70c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801f6dc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f6de:	1e5c      	subs	r4, r3, #1
 801f6e0:	fb05 1504 	mla	r5, r5, r4, r1
 801f6e4:	142d      	asrs	r5, r5, #16
 801f6e6:	d409      	bmi.n	801f6fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f6e8:	42bd      	cmp	r5, r7
 801f6ea:	da07      	bge.n	801f6fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f6ec:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f6ee:	fb05 2404 	mla	r4, r5, r4, r2
 801f6f2:	1424      	asrs	r4, r4, #16
 801f6f4:	d402      	bmi.n	801f6fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f6f6:	42b4      	cmp	r4, r6
 801f6f8:	f2c0 80b3 	blt.w	801f862 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801f6fc:	2600      	movs	r6, #0
 801f6fe:	199c      	adds	r4, r3, r6
 801f700:	2c00      	cmp	r4, #0
 801f702:	dc3e      	bgt.n	801f782 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f704:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f708:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f70c:	f1bb 0f00 	cmp.w	fp, #0
 801f710:	f340 810e 	ble.w	801f930 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801f714:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f718:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f71c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f720:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f722:	f1bb 0b01 	subs.w	fp, fp, #1
 801f726:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f72a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f72e:	eeb0 6a62 	vmov.f32	s12, s5
 801f732:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f736:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f73a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f73e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f742:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f746:	eeb0 6a43 	vmov.f32	s12, s6
 801f74a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f74e:	ee12 2a90 	vmov	r2, s5
 801f752:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f756:	fb92 f3f3 	sdiv	r3, r2, r3
 801f75a:	ee13 2a10 	vmov	r2, s6
 801f75e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f762:	9311      	str	r3, [sp, #68]	; 0x44
 801f764:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f766:	fb92 f3f3 	sdiv	r3, r2, r3
 801f76a:	9a03      	ldr	r2, [sp, #12]
 801f76c:	9312      	str	r3, [sp, #72]	; 0x48
 801f76e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f774:	eeb0 3a67 	vmov.f32	s6, s15
 801f778:	bf08      	it	eq
 801f77a:	4613      	moveq	r3, r2
 801f77c:	eef0 2a47 	vmov.f32	s5, s14
 801f780:	e789      	b.n	801f696 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801f782:	140f      	asrs	r7, r1, #16
 801f784:	d418      	bmi.n	801f7b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f786:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801f78a:	42bd      	cmp	r5, r7
 801f78c:	dd14      	ble.n	801f7b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f78e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f792:	d411      	bmi.n	801f7b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f794:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801f798:	4564      	cmp	r4, ip
 801f79a:	dd0d      	ble.n	801f7b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f79c:	b22d      	sxth	r5, r5
 801f79e:	fb0c 7505 	mla	r5, ip, r5, r7
 801f7a2:	9c01      	ldr	r4, [sp, #4]
 801f7a4:	5d64      	ldrb	r4, [r4, r5]
 801f7a6:	2cff      	cmp	r4, #255	; 0xff
 801f7a8:	d10c      	bne.n	801f7c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801f7aa:	9c00      	ldr	r4, [sp, #0]
 801f7ac:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801f7b0:	f06f 0401 	mvn.w	r4, #1
 801f7b4:	4374      	muls	r4, r6
 801f7b6:	5305      	strh	r5, [r0, r4]
 801f7b8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f7ba:	4421      	add	r1, r4
 801f7bc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f7be:	3e01      	subs	r6, #1
 801f7c0:	4422      	add	r2, r4
 801f7c2:	e79c      	b.n	801f6fe <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f7c4:	2c00      	cmp	r4, #0
 801f7c6:	d0f7      	beq.n	801f7b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f7c8:	9f00      	ldr	r7, [sp, #0]
 801f7ca:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801f7ce:	f06f 0501 	mvn.w	r5, #1
 801f7d2:	4375      	muls	r5, r6
 801f7d4:	9502      	str	r5, [sp, #8]
 801f7d6:	5b45      	ldrh	r5, [r0, r5]
 801f7d8:	fa1f fc84 	uxth.w	ip, r4
 801f7dc:	122f      	asrs	r7, r5, #8
 801f7de:	43e4      	mvns	r4, r4
 801f7e0:	b2e4      	uxtb	r4, r4
 801f7e2:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801f7e6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f7ea:	fb17 f704 	smulbb	r7, r7, r4
 801f7ee:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f7f2:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801f7f6:	00ed      	lsls	r5, r5, #3
 801f7f8:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801f7fc:	b2ed      	uxtb	r5, r5
 801f7fe:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801f802:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801f806:	fb15 f504 	smulbb	r5, r5, r4
 801f80a:	fa5f f989 	uxtb.w	r9, r9
 801f80e:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f812:	fb09 550c 	mla	r5, r9, ip, r5
 801f816:	fb1a fa04 	smulbb	sl, sl, r4
 801f81a:	fa1f fe8e 	uxth.w	lr, lr
 801f81e:	b2ad      	uxth	r5, r5
 801f820:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f824:	fb07 a70c 	mla	r7, r7, ip, sl
 801f828:	f10e 0401 	add.w	r4, lr, #1
 801f82c:	f105 0a01 	add.w	sl, r5, #1
 801f830:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801f834:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f838:	b2bf      	uxth	r7, r7
 801f83a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f83e:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801f842:	ea4a 0e0e 	orr.w	lr, sl, lr
 801f846:	f107 0a01 	add.w	sl, r7, #1
 801f84a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801f84e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f852:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f856:	9c02      	ldr	r4, [sp, #8]
 801f858:	ea4e 0e0a 	orr.w	lr, lr, sl
 801f85c:	f820 e004 	strh.w	lr, [r0, r4]
 801f860:	e7aa      	b.n	801f7b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f862:	f04f 0900 	mov.w	r9, #0
 801f866:	eba3 0409 	sub.w	r4, r3, r9
 801f86a:	2c00      	cmp	r4, #0
 801f86c:	f77f af4a 	ble.w	801f704 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f870:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801f874:	1414      	asrs	r4, r2, #16
 801f876:	140d      	asrs	r5, r1, #16
 801f878:	fb06 5504 	mla	r5, r6, r4, r5
 801f87c:	9c01      	ldr	r4, [sp, #4]
 801f87e:	5d64      	ldrb	r4, [r4, r5]
 801f880:	2cff      	cmp	r4, #255	; 0xff
 801f882:	d10b      	bne.n	801f89c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801f884:	9c00      	ldr	r4, [sp, #0]
 801f886:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801f88a:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801f88e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f890:	4421      	add	r1, r4
 801f892:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f894:	f109 0901 	add.w	r9, r9, #1
 801f898:	4422      	add	r2, r4
 801f89a:	e7e4      	b.n	801f866 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801f89c:	2c00      	cmp	r4, #0
 801f89e:	d0f6      	beq.n	801f88e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801f8a0:	9e00      	ldr	r6, [sp, #0]
 801f8a2:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801f8a6:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801f8aa:	b2a7      	uxth	r7, r4
 801f8ac:	122e      	asrs	r6, r5, #8
 801f8ae:	43e4      	mvns	r4, r4
 801f8b0:	b2e4      	uxtb	r4, r4
 801f8b2:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801f8b6:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f8ba:	fb16 f604 	smulbb	r6, r6, r4
 801f8be:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f8c2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f8c6:	00ed      	lsls	r5, r5, #3
 801f8c8:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f8cc:	b2ed      	uxtb	r5, r5
 801f8ce:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801f8d2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f8d6:	fb15 f504 	smulbb	r5, r5, r4
 801f8da:	fa5f fe8e 	uxtb.w	lr, lr
 801f8de:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f8e2:	fb0e 5507 	mla	r5, lr, r7, r5
 801f8e6:	fb1a fa04 	smulbb	sl, sl, r4
 801f8ea:	fa1f fc8c 	uxth.w	ip, ip
 801f8ee:	b2ad      	uxth	r5, r5
 801f8f0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f8f4:	fb06 a607 	mla	r6, r6, r7, sl
 801f8f8:	f10c 0401 	add.w	r4, ip, #1
 801f8fc:	f105 0a01 	add.w	sl, r5, #1
 801f900:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801f904:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f908:	b2b6      	uxth	r6, r6
 801f90a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f90e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f912:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f916:	f106 0a01 	add.w	sl, r6, #1
 801f91a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f91e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f922:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f926:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f92a:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801f92e:	e7ae      	b.n	801f88e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801f930:	b005      	add	sp, #20
 801f932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f936 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f936:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f93a:	b085      	sub	sp, #20
 801f93c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f93e:	9203      	str	r2, [sp, #12]
 801f940:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801f944:	9201      	str	r2, [sp, #4]
 801f946:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f94a:	9100      	str	r1, [sp, #0]
 801f94c:	6841      	ldr	r1, [r0, #4]
 801f94e:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801f952:	fb01 2404 	mla	r4, r1, r4, r2
 801f956:	6802      	ldr	r2, [r0, #0]
 801f958:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f95c:	f8de 2000 	ldr.w	r2, [lr]
 801f960:	9202      	str	r2, [sp, #8]
 801f962:	9a01      	ldr	r2, [sp, #4]
 801f964:	43d6      	mvns	r6, r2
 801f966:	b2f6      	uxtb	r6, r6
 801f968:	9a00      	ldr	r2, [sp, #0]
 801f96a:	2a00      	cmp	r2, #0
 801f96c:	dc03      	bgt.n	801f976 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801f96e:	9a03      	ldr	r2, [sp, #12]
 801f970:	2a00      	cmp	r2, #0
 801f972:	f340 8124 	ble.w	801fbbe <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801f976:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f978:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801f97c:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801f980:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f984:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f986:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f98a:	2b00      	cmp	r3, #0
 801f98c:	dd0e      	ble.n	801f9ac <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f98e:	1408      	asrs	r0, r1, #16
 801f990:	d405      	bmi.n	801f99e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f992:	4560      	cmp	r0, ip
 801f994:	da03      	bge.n	801f99e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f996:	1410      	asrs	r0, r2, #16
 801f998:	d401      	bmi.n	801f99e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f99a:	42b8      	cmp	r0, r7
 801f99c:	db07      	blt.n	801f9ae <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f99e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f9a0:	4401      	add	r1, r0
 801f9a2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f9a4:	3b01      	subs	r3, #1
 801f9a6:	4402      	add	r2, r0
 801f9a8:	3402      	adds	r4, #2
 801f9aa:	e7ee      	b.n	801f98a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801f9ac:	d06e      	beq.n	801fa8c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f9ae:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f9b0:	1e58      	subs	r0, r3, #1
 801f9b2:	fb05 1500 	mla	r5, r5, r0, r1
 801f9b6:	142d      	asrs	r5, r5, #16
 801f9b8:	d45c      	bmi.n	801fa74 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f9ba:	4565      	cmp	r5, ip
 801f9bc:	da5a      	bge.n	801fa74 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f9be:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f9c0:	fb05 2000 	mla	r0, r5, r0, r2
 801f9c4:	1400      	asrs	r0, r0, #16
 801f9c6:	d455      	bmi.n	801fa74 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f9c8:	42b8      	cmp	r0, r7
 801f9ca:	da53      	bge.n	801fa74 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f9cc:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801f9d0:	4699      	mov	r9, r3
 801f9d2:	46a2      	mov	sl, r4
 801f9d4:	f1b9 0f00 	cmp.w	r9, #0
 801f9d8:	dd54      	ble.n	801fa84 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f9da:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801f9de:	140d      	asrs	r5, r1, #16
 801f9e0:	1410      	asrs	r0, r2, #16
 801f9e2:	fb07 5000 	mla	r0, r7, r0, r5
 801f9e6:	9d02      	ldr	r5, [sp, #8]
 801f9e8:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801f9ec:	f8ba 5000 	ldrh.w	r5, [sl]
 801f9f0:	122f      	asrs	r7, r5, #8
 801f9f2:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801f9f6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f9fa:	fb17 f706 	smulbb	r7, r7, r6
 801f9fe:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801fa02:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fa06:	00ed      	lsls	r5, r5, #3
 801fa08:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801fa0c:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801fa10:	10c7      	asrs	r7, r0, #3
 801fa12:	b2ed      	uxtb	r5, r5
 801fa14:	00c0      	lsls	r0, r0, #3
 801fa16:	fb18 f806 	smulbb	r8, r8, r6
 801fa1a:	fb15 f506 	smulbb	r5, r5, r6
 801fa1e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fa22:	b2c0      	uxtb	r0, r0
 801fa24:	fa1f fc8c 	uxth.w	ip, ip
 801fa28:	fb07 870b 	mla	r7, r7, fp, r8
 801fa2c:	fb00 500b 	mla	r0, r0, fp, r5
 801fa30:	b280      	uxth	r0, r0
 801fa32:	b2bf      	uxth	r7, r7
 801fa34:	f10c 0501 	add.w	r5, ip, #1
 801fa38:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801fa3c:	f107 0801 	add.w	r8, r7, #1
 801fa40:	1c45      	adds	r5, r0, #1
 801fa42:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801fa46:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801fa4a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fa4c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fa50:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801fa54:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801fa58:	ea45 0c0c 	orr.w	ip, r5, ip
 801fa5c:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801fa60:	4401      	add	r1, r0
 801fa62:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fa64:	ea4c 0c08 	orr.w	ip, ip, r8
 801fa68:	f82a cb02 	strh.w	ip, [sl], #2
 801fa6c:	4402      	add	r2, r0
 801fa6e:	f109 39ff 	add.w	r9, r9, #4294967295
 801fa72:	e7af      	b.n	801f9d4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801fa74:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801fa78:	f04f 0800 	mov.w	r8, #0
 801fa7c:	eb03 0008 	add.w	r0, r3, r8
 801fa80:	2800      	cmp	r0, #0
 801fa82:	dc41      	bgt.n	801fb08 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801fa84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fa88:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801fa8c:	9b00      	ldr	r3, [sp, #0]
 801fa8e:	2b00      	cmp	r3, #0
 801fa90:	f340 8095 	ble.w	801fbbe <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801fa94:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fa98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fa9c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801faa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801faa2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801faa6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801faaa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801faae:	eef0 6a62 	vmov.f32	s13, s5
 801fab2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fab6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801faba:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fabe:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801fac2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fac6:	eef0 6a43 	vmov.f32	s13, s6
 801faca:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801face:	ee12 2a90 	vmov	r2, s5
 801fad2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fad6:	fb92 f3f3 	sdiv	r3, r2, r3
 801fada:	ee13 2a10 	vmov	r2, s6
 801fade:	9311      	str	r3, [sp, #68]	; 0x44
 801fae0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fae2:	fb92 f3f3 	sdiv	r3, r2, r3
 801fae6:	9312      	str	r3, [sp, #72]	; 0x48
 801fae8:	9b00      	ldr	r3, [sp, #0]
 801faea:	9a03      	ldr	r2, [sp, #12]
 801faec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801faf0:	3b01      	subs	r3, #1
 801faf2:	9300      	str	r3, [sp, #0]
 801faf4:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801faf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fafa:	eeb0 3a67 	vmov.f32	s6, s15
 801fafe:	bf08      	it	eq
 801fb00:	4613      	moveq	r3, r2
 801fb02:	eef0 2a47 	vmov.f32	s5, s14
 801fb06:	e72f      	b.n	801f968 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801fb08:	140f      	asrs	r7, r1, #16
 801fb0a:	d451      	bmi.n	801fbb0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801fb0c:	f8de 5008 	ldr.w	r5, [lr, #8]
 801fb10:	42bd      	cmp	r5, r7
 801fb12:	dd4d      	ble.n	801fbb0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801fb14:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801fb18:	d44a      	bmi.n	801fbb0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801fb1a:	f8de 000c 	ldr.w	r0, [lr, #12]
 801fb1e:	4560      	cmp	r0, ip
 801fb20:	dd46      	ble.n	801fbb0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801fb22:	b22d      	sxth	r5, r5
 801fb24:	fb0c 7505 	mla	r5, ip, r5, r7
 801fb28:	9802      	ldr	r0, [sp, #8]
 801fb2a:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801fb2e:	f06f 0501 	mvn.w	r5, #1
 801fb32:	fb05 fb08 	mul.w	fp, r5, r8
 801fb36:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801fb3a:	f834 500b 	ldrh.w	r5, [r4, fp]
 801fb3e:	122f      	asrs	r7, r5, #8
 801fb40:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801fb44:	fb17 f706 	smulbb	r7, r7, r6
 801fb48:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801fb4c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fb50:	00ed      	lsls	r5, r5, #3
 801fb52:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801fb56:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801fb5a:	10c7      	asrs	r7, r0, #3
 801fb5c:	b2ed      	uxtb	r5, r5
 801fb5e:	00c0      	lsls	r0, r0, #3
 801fb60:	fb19 f906 	smulbb	r9, r9, r6
 801fb64:	fb15 f506 	smulbb	r5, r5, r6
 801fb68:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fb6c:	b2c0      	uxtb	r0, r0
 801fb6e:	fa1f fc8c 	uxth.w	ip, ip
 801fb72:	fb07 970a 	mla	r7, r7, sl, r9
 801fb76:	fb00 500a 	mla	r0, r0, sl, r5
 801fb7a:	b2bf      	uxth	r7, r7
 801fb7c:	b280      	uxth	r0, r0
 801fb7e:	f10c 0501 	add.w	r5, ip, #1
 801fb82:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801fb86:	f107 0901 	add.w	r9, r7, #1
 801fb8a:	1c45      	adds	r5, r0, #1
 801fb8c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801fb90:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801fb94:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fb98:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801fb9c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801fba0:	ea45 0c0c 	orr.w	ip, r5, ip
 801fba4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801fba8:	ea4c 0c09 	orr.w	ip, ip, r9
 801fbac:	f824 c00b 	strh.w	ip, [r4, fp]
 801fbb0:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fbb2:	4401      	add	r1, r0
 801fbb4:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fbb6:	f108 38ff 	add.w	r8, r8, #4294967295
 801fbba:	4402      	add	r2, r0
 801fbbc:	e75e      	b.n	801fa7c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801fbbe:	b005      	add	sp, #20
 801fbc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fbc4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fbc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fbc8:	b085      	sub	sp, #20
 801fbca:	4693      	mov	fp, r2
 801fbcc:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801fbce:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801fbd0:	6870      	ldr	r0, [r6, #4]
 801fbd2:	9101      	str	r1, [sp, #4]
 801fbd4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801fbd8:	fb00 2404 	mla	r4, r0, r4, r2
 801fbdc:	6832      	ldr	r2, [r6, #0]
 801fbde:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801fbe2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fbe6:	682a      	ldr	r2, [r5, #0]
 801fbe8:	9202      	str	r2, [sp, #8]
 801fbea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fbee:	9a01      	ldr	r2, [sp, #4]
 801fbf0:	2a00      	cmp	r2, #0
 801fbf2:	dc03      	bgt.n	801fbfc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801fbf4:	f1bb 0f00 	cmp.w	fp, #0
 801fbf8:	f340 809a 	ble.w	801fd30 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801fbfc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fbfe:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801fc02:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801fc06:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801fc0a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fc0c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fc10:	2b00      	cmp	r3, #0
 801fc12:	dd0c      	ble.n	801fc2e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801fc14:	1406      	asrs	r6, r0, #16
 801fc16:	d405      	bmi.n	801fc24 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fc18:	454e      	cmp	r6, r9
 801fc1a:	da03      	bge.n	801fc24 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fc1c:	1416      	asrs	r6, r2, #16
 801fc1e:	d401      	bmi.n	801fc24 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fc20:	4546      	cmp	r6, r8
 801fc22:	db05      	blt.n	801fc30 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801fc24:	4470      	add	r0, lr
 801fc26:	4462      	add	r2, ip
 801fc28:	3b01      	subs	r3, #1
 801fc2a:	3402      	adds	r4, #2
 801fc2c:	e7f0      	b.n	801fc10 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801fc2e:	d00f      	beq.n	801fc50 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801fc30:	1e5e      	subs	r6, r3, #1
 801fc32:	fb0e 0706 	mla	r7, lr, r6, r0
 801fc36:	143f      	asrs	r7, r7, #16
 801fc38:	d541      	bpl.n	801fcbe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801fc3a:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801fc3e:	4698      	mov	r8, r3
 801fc40:	9603      	str	r6, [sp, #12]
 801fc42:	f1b8 0f00 	cmp.w	r8, #0
 801fc46:	dc56      	bgt.n	801fcf6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801fc48:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fc4c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801fc50:	9b01      	ldr	r3, [sp, #4]
 801fc52:	2b00      	cmp	r3, #0
 801fc54:	dd6c      	ble.n	801fd30 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801fc56:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fc5a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fc5e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fc62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fc64:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fc68:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fc6c:	eeb0 6a62 	vmov.f32	s12, s5
 801fc70:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fc74:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fc78:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fc7c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801fc80:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fc84:	eeb0 6a43 	vmov.f32	s12, s6
 801fc88:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fc8c:	ee12 2a90 	vmov	r2, s5
 801fc90:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fc94:	fb92 fef3 	sdiv	lr, r2, r3
 801fc98:	ee13 2a10 	vmov	r2, s6
 801fc9c:	fb92 fcf3 	sdiv	ip, r2, r3
 801fca0:	9b01      	ldr	r3, [sp, #4]
 801fca2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fca6:	3b01      	subs	r3, #1
 801fca8:	9301      	str	r3, [sp, #4]
 801fcaa:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801fcae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fcb0:	eeb0 3a67 	vmov.f32	s6, s15
 801fcb4:	bf08      	it	eq
 801fcb6:	465b      	moveq	r3, fp
 801fcb8:	eef0 2a47 	vmov.f32	s5, s14
 801fcbc:	e797      	b.n	801fbee <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801fcbe:	454f      	cmp	r7, r9
 801fcc0:	dabb      	bge.n	801fc3a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fcc2:	fb0c 2606 	mla	r6, ip, r6, r2
 801fcc6:	1436      	asrs	r6, r6, #16
 801fcc8:	d4b7      	bmi.n	801fc3a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fcca:	4546      	cmp	r6, r8
 801fccc:	dab5      	bge.n	801fc3a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fcce:	461e      	mov	r6, r3
 801fcd0:	46a0      	mov	r8, r4
 801fcd2:	2e00      	cmp	r6, #0
 801fcd4:	ddb8      	ble.n	801fc48 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801fcd6:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801fcda:	9902      	ldr	r1, [sp, #8]
 801fcdc:	1417      	asrs	r7, r2, #16
 801fcde:	ea4f 4920 	mov.w	r9, r0, asr #16
 801fce2:	fb0a 9707 	mla	r7, sl, r7, r9
 801fce6:	4470      	add	r0, lr
 801fce8:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801fcec:	f828 7b02 	strh.w	r7, [r8], #2
 801fcf0:	4462      	add	r2, ip
 801fcf2:	3e01      	subs	r6, #1
 801fcf4:	e7ed      	b.n	801fcd2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801fcf6:	ea5f 4920 	movs.w	r9, r0, asr #16
 801fcfa:	d414      	bmi.n	801fd26 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801fcfc:	68ae      	ldr	r6, [r5, #8]
 801fcfe:	454e      	cmp	r6, r9
 801fd00:	dd11      	ble.n	801fd26 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801fd02:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801fd06:	d40e      	bmi.n	801fd26 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801fd08:	68ef      	ldr	r7, [r5, #12]
 801fd0a:	4557      	cmp	r7, sl
 801fd0c:	dd0b      	ble.n	801fd26 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801fd0e:	b236      	sxth	r6, r6
 801fd10:	fb0a 9606 	mla	r6, sl, r6, r9
 801fd14:	9f02      	ldr	r7, [sp, #8]
 801fd16:	f06f 0101 	mvn.w	r1, #1
 801fd1a:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801fd1e:	fb01 f608 	mul.w	r6, r1, r8
 801fd22:	9903      	ldr	r1, [sp, #12]
 801fd24:	538f      	strh	r7, [r1, r6]
 801fd26:	4470      	add	r0, lr
 801fd28:	4462      	add	r2, ip
 801fd2a:	f108 38ff 	add.w	r8, r8, #4294967295
 801fd2e:	e788      	b.n	801fc42 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801fd30:	b005      	add	sp, #20
 801fd32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fd36 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fd36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd3a:	b087      	sub	sp, #28
 801fd3c:	468b      	mov	fp, r1
 801fd3e:	9815      	ldr	r0, [sp, #84]	; 0x54
 801fd40:	9203      	str	r2, [sp, #12]
 801fd42:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801fd46:	9204      	str	r2, [sp, #16]
 801fd48:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801fd4c:	6841      	ldr	r1, [r0, #4]
 801fd4e:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801fd52:	fb01 2505 	mla	r5, r1, r5, r2
 801fd56:	6802      	ldr	r2, [r0, #0]
 801fd58:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801fd5c:	f8d9 2000 	ldr.w	r2, [r9]
 801fd60:	9201      	str	r2, [sp, #4]
 801fd62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fd66:	f1bb 0f00 	cmp.w	fp, #0
 801fd6a:	dc03      	bgt.n	801fd74 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801fd6c:	9a03      	ldr	r2, [sp, #12]
 801fd6e:	2a00      	cmp	r2, #0
 801fd70:	f340 8159 	ble.w	8020026 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801fd74:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fd76:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801fd7a:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801fd7e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801fd82:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fd84:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801fd88:	2b00      	cmp	r3, #0
 801fd8a:	dd0e      	ble.n	801fdaa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801fd8c:	1402      	asrs	r2, r0, #16
 801fd8e:	d405      	bmi.n	801fd9c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801fd90:	42ba      	cmp	r2, r7
 801fd92:	da03      	bge.n	801fd9c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801fd94:	140a      	asrs	r2, r1, #16
 801fd96:	d401      	bmi.n	801fd9c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801fd98:	42b2      	cmp	r2, r6
 801fd9a:	db07      	blt.n	801fdac <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fd9c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fd9e:	4410      	add	r0, r2
 801fda0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fda2:	3b01      	subs	r3, #1
 801fda4:	4411      	add	r1, r2
 801fda6:	3502      	adds	r5, #2
 801fda8:	e7ee      	b.n	801fd88 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801fdaa:	d017      	beq.n	801fddc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801fdac:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fdae:	1e5a      	subs	r2, r3, #1
 801fdb0:	fb04 0402 	mla	r4, r4, r2, r0
 801fdb4:	1424      	asrs	r4, r4, #16
 801fdb6:	d409      	bmi.n	801fdcc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fdb8:	42bc      	cmp	r4, r7
 801fdba:	da07      	bge.n	801fdcc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fdbc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fdbe:	fb04 1202 	mla	r2, r4, r2, r1
 801fdc2:	1412      	asrs	r2, r2, #16
 801fdc4:	d402      	bmi.n	801fdcc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fdc6:	42b2      	cmp	r2, r6
 801fdc8:	f2c0 80bf 	blt.w	801ff4a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801fdcc:	2700      	movs	r7, #0
 801fdce:	19da      	adds	r2, r3, r7
 801fdd0:	2a00      	cmp	r2, #0
 801fdd2:	dc3e      	bgt.n	801fe52 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801fdd4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fdd8:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801fddc:	f1bb 0f00 	cmp.w	fp, #0
 801fde0:	f340 8121 	ble.w	8020026 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801fde4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fde8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fdec:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fdf0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fdf2:	f1bb 0b01 	subs.w	fp, fp, #1
 801fdf6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fdfa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fdfe:	eeb0 6a62 	vmov.f32	s12, s5
 801fe02:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fe06:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fe0a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fe0e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801fe12:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fe16:	eeb0 6a43 	vmov.f32	s12, s6
 801fe1a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fe1e:	ee12 2a90 	vmov	r2, s5
 801fe22:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fe26:	fb92 f3f3 	sdiv	r3, r2, r3
 801fe2a:	ee13 2a10 	vmov	r2, s6
 801fe2e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fe32:	9313      	str	r3, [sp, #76]	; 0x4c
 801fe34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fe36:	fb92 f3f3 	sdiv	r3, r2, r3
 801fe3a:	9a03      	ldr	r2, [sp, #12]
 801fe3c:	9314      	str	r3, [sp, #80]	; 0x50
 801fe3e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801fe42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fe44:	eeb0 3a67 	vmov.f32	s6, s15
 801fe48:	bf08      	it	eq
 801fe4a:	4613      	moveq	r3, r2
 801fe4c:	eef0 2a47 	vmov.f32	s5, s14
 801fe50:	e789      	b.n	801fd66 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801fe52:	1406      	asrs	r6, r0, #16
 801fe54:	d42d      	bmi.n	801feb2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fe56:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801fe5a:	42b4      	cmp	r4, r6
 801fe5c:	dd29      	ble.n	801feb2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fe5e:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801fe62:	d426      	bmi.n	801feb2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fe64:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801fe68:	4562      	cmp	r2, ip
 801fe6a:	dd22      	ble.n	801feb2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fe6c:	b224      	sxth	r4, r4
 801fe6e:	9a01      	ldr	r2, [sp, #4]
 801fe70:	fb0c 6404 	mla	r4, ip, r4, r6
 801fe74:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801fe78:	0e22      	lsrs	r2, r4, #24
 801fe7a:	d01a      	beq.n	801feb2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fe7c:	9e04      	ldr	r6, [sp, #16]
 801fe7e:	4372      	muls	r2, r6
 801fe80:	1c56      	adds	r6, r2, #1
 801fe82:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801fe86:	1212      	asrs	r2, r2, #8
 801fe88:	0a26      	lsrs	r6, r4, #8
 801fe8a:	2aff      	cmp	r2, #255	; 0xff
 801fe8c:	9605      	str	r6, [sp, #20]
 801fe8e:	d116      	bne.n	801febe <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801fe90:	f06f 0201 	mvn.w	r2, #1
 801fe94:	fb02 fc07 	mul.w	ip, r2, r7
 801fe98:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801fe9c:	0962      	lsrs	r2, r4, #5
 801fe9e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fea2:	f026 0607 	bic.w	r6, r6, #7
 801fea6:	4316      	orrs	r6, r2
 801fea8:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801feac:	4326      	orrs	r6, r4
 801feae:	f825 600c 	strh.w	r6, [r5, ip]
 801feb2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801feb4:	4410      	add	r0, r2
 801feb6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801feb8:	3f01      	subs	r7, #1
 801feba:	4411      	add	r1, r2
 801febc:	e787      	b.n	801fdce <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801febe:	f06f 0601 	mvn.w	r6, #1
 801fec2:	437e      	muls	r6, r7
 801fec4:	fa1f fa82 	uxth.w	sl, r2
 801fec8:	f835 8006 	ldrh.w	r8, [r5, r6]
 801fecc:	9602      	str	r6, [sp, #8]
 801fece:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801fed2:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801fed6:	43d2      	mvns	r2, r2
 801fed8:	b2d2      	uxtb	r2, r2
 801feda:	fb1c fc0a 	smulbb	ip, ip, sl
 801fede:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801fee2:	fb0e ce02 	mla	lr, lr, r2, ip
 801fee6:	b2e4      	uxtb	r4, r4
 801fee8:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801feec:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801fef0:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801fef4:	fa5f f888 	uxtb.w	r8, r8
 801fef8:	fb14 f40a 	smulbb	r4, r4, sl
 801fefc:	fb08 4402 	mla	r4, r8, r2, r4
 801ff00:	fa1f fe8e 	uxth.w	lr, lr
 801ff04:	fb16 f60a 	smulbb	r6, r6, sl
 801ff08:	b2a4      	uxth	r4, r4
 801ff0a:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801ff0e:	fb0c 6c02 	mla	ip, ip, r2, r6
 801ff12:	f10e 0201 	add.w	r2, lr, #1
 801ff16:	1c66      	adds	r6, r4, #1
 801ff18:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801ff1c:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801ff20:	fa1f fc8c 	uxth.w	ip, ip
 801ff24:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801ff28:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801ff2c:	ea46 0e0e 	orr.w	lr, r6, lr
 801ff30:	f10c 0601 	add.w	r6, ip, #1
 801ff34:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801ff38:	0976      	lsrs	r6, r6, #5
 801ff3a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801ff3e:	9a02      	ldr	r2, [sp, #8]
 801ff40:	ea4e 0e06 	orr.w	lr, lr, r6
 801ff44:	f825 e002 	strh.w	lr, [r5, r2]
 801ff48:	e7b3      	b.n	801feb2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ff4a:	f04f 0800 	mov.w	r8, #0
 801ff4e:	eba3 0208 	sub.w	r2, r3, r8
 801ff52:	2a00      	cmp	r2, #0
 801ff54:	f77f af3e 	ble.w	801fdd4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ff58:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801ff5c:	1404      	asrs	r4, r0, #16
 801ff5e:	140a      	asrs	r2, r1, #16
 801ff60:	fb06 4202 	mla	r2, r6, r2, r4
 801ff64:	9c01      	ldr	r4, [sp, #4]
 801ff66:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801ff6a:	0e22      	lsrs	r2, r4, #24
 801ff6c:	d016      	beq.n	801ff9c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801ff6e:	9e04      	ldr	r6, [sp, #16]
 801ff70:	4372      	muls	r2, r6
 801ff72:	1c56      	adds	r6, r2, #1
 801ff74:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801ff78:	1212      	asrs	r2, r2, #8
 801ff7a:	2aff      	cmp	r2, #255	; 0xff
 801ff7c:	ea4f 2614 	mov.w	r6, r4, lsr #8
 801ff80:	d113      	bne.n	801ffaa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801ff82:	0962      	lsrs	r2, r4, #5
 801ff84:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801ff88:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ff8c:	f026 0607 	bic.w	r6, r6, #7
 801ff90:	4316      	orrs	r6, r2
 801ff92:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801ff96:	4326      	orrs	r6, r4
 801ff98:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801ff9c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ff9e:	4410      	add	r0, r2
 801ffa0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ffa2:	f108 0801 	add.w	r8, r8, #1
 801ffa6:	4411      	add	r1, r2
 801ffa8:	e7d1      	b.n	801ff4e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801ffaa:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801ffae:	fa1f fa82 	uxth.w	sl, r2
 801ffb2:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801ffb6:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801ffba:	43d2      	mvns	r2, r2
 801ffbc:	b2d2      	uxtb	r2, r2
 801ffbe:	fb17 f70a 	smulbb	r7, r7, sl
 801ffc2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ffc6:	fb0c 7c02 	mla	ip, ip, r2, r7
 801ffca:	b2e4      	uxtb	r4, r4
 801ffcc:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801ffd0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801ffd4:	fa5f fe8e 	uxtb.w	lr, lr
 801ffd8:	fb14 f40a 	smulbb	r4, r4, sl
 801ffdc:	fb0e 4402 	mla	r4, lr, r2, r4
 801ffe0:	b2f6      	uxtb	r6, r6
 801ffe2:	fa1f fc8c 	uxth.w	ip, ip
 801ffe6:	fb16 f60a 	smulbb	r6, r6, sl
 801ffea:	b2a4      	uxth	r4, r4
 801ffec:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fff0:	fb07 6702 	mla	r7, r7, r2, r6
 801fff4:	f10c 0201 	add.w	r2, ip, #1
 801fff8:	1c66      	adds	r6, r4, #1
 801fffa:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801fffe:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8020002:	b2bf      	uxth	r7, r7
 8020004:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8020008:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802000c:	ea46 0c0c 	orr.w	ip, r6, ip
 8020010:	1c7e      	adds	r6, r7, #1
 8020012:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8020016:	0976      	lsrs	r6, r6, #5
 8020018:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802001c:	ea4c 0c06 	orr.w	ip, ip, r6
 8020020:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 8020024:	e7ba      	b.n	801ff9c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8020026:	b007      	add	sp, #28
 8020028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802002c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802002c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020030:	b085      	sub	sp, #20
 8020032:	468b      	mov	fp, r1
 8020034:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020036:	9203      	str	r2, [sp, #12]
 8020038:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 802003c:	6841      	ldr	r1, [r0, #4]
 802003e:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8020042:	fb01 2404 	mla	r4, r1, r4, r2
 8020046:	6802      	ldr	r2, [r0, #0]
 8020048:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 802004c:	f8d8 2000 	ldr.w	r2, [r8]
 8020050:	9201      	str	r2, [sp, #4]
 8020052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020056:	f1bb 0f00 	cmp.w	fp, #0
 802005a:	dc03      	bgt.n	8020064 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 802005c:	9a03      	ldr	r2, [sp, #12]
 802005e:	2a00      	cmp	r2, #0
 8020060:	f340 814f 	ble.w	8020302 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8020064:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020066:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 802006a:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 802006e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020072:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020074:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020078:	2b00      	cmp	r3, #0
 802007a:	dd0e      	ble.n	802009a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802007c:	1408      	asrs	r0, r1, #16
 802007e:	d405      	bmi.n	802008c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020080:	42b8      	cmp	r0, r7
 8020082:	da03      	bge.n	802008c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020084:	1410      	asrs	r0, r2, #16
 8020086:	d401      	bmi.n	802008c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020088:	42b0      	cmp	r0, r6
 802008a:	db07      	blt.n	802009c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802008c:	9811      	ldr	r0, [sp, #68]	; 0x44
 802008e:	4401      	add	r1, r0
 8020090:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020092:	3b01      	subs	r3, #1
 8020094:	4402      	add	r2, r0
 8020096:	3402      	adds	r4, #2
 8020098:	e7ee      	b.n	8020078 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 802009a:	d017      	beq.n	80200cc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802009c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802009e:	1e58      	subs	r0, r3, #1
 80200a0:	fb05 1500 	mla	r5, r5, r0, r1
 80200a4:	142d      	asrs	r5, r5, #16
 80200a6:	d409      	bmi.n	80200bc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80200a8:	42bd      	cmp	r5, r7
 80200aa:	da07      	bge.n	80200bc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80200ac:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80200ae:	fb05 2000 	mla	r0, r5, r0, r2
 80200b2:	1400      	asrs	r0, r0, #16
 80200b4:	d402      	bmi.n	80200bc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80200b6:	42b0      	cmp	r0, r6
 80200b8:	f2c0 80ba 	blt.w	8020230 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80200bc:	2600      	movs	r6, #0
 80200be:	1998      	adds	r0, r3, r6
 80200c0:	2800      	cmp	r0, #0
 80200c2:	dc3e      	bgt.n	8020142 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 80200c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80200c8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80200cc:	f1bb 0f00 	cmp.w	fp, #0
 80200d0:	f340 8117 	ble.w	8020302 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 80200d4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80200d8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80200dc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80200e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80200e2:	f1bb 0b01 	subs.w	fp, fp, #1
 80200e6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80200ea:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80200ee:	eeb0 6a62 	vmov.f32	s12, s5
 80200f2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80200f6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80200fa:	ee77 2a62 	vsub.f32	s5, s14, s5
 80200fe:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020102:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020106:	eeb0 6a43 	vmov.f32	s12, s6
 802010a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802010e:	ee12 2a90 	vmov	r2, s5
 8020112:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020116:	fb92 f3f3 	sdiv	r3, r2, r3
 802011a:	ee13 2a10 	vmov	r2, s6
 802011e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020122:	9311      	str	r3, [sp, #68]	; 0x44
 8020124:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020126:	fb92 f3f3 	sdiv	r3, r2, r3
 802012a:	9a03      	ldr	r2, [sp, #12]
 802012c:	9312      	str	r3, [sp, #72]	; 0x48
 802012e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020132:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020134:	eeb0 3a67 	vmov.f32	s6, s15
 8020138:	bf08      	it	eq
 802013a:	4613      	moveq	r3, r2
 802013c:	eef0 2a47 	vmov.f32	s5, s14
 8020140:	e789      	b.n	8020056 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8020142:	140f      	asrs	r7, r1, #16
 8020144:	d424      	bmi.n	8020190 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020146:	f8d8 5008 	ldr.w	r5, [r8, #8]
 802014a:	42bd      	cmp	r5, r7
 802014c:	dd20      	ble.n	8020190 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802014e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8020152:	d41d      	bmi.n	8020190 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020154:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8020158:	4560      	cmp	r0, ip
 802015a:	dd19      	ble.n	8020190 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802015c:	b22d      	sxth	r5, r5
 802015e:	fb0c 7505 	mla	r5, ip, r5, r7
 8020162:	9801      	ldr	r0, [sp, #4]
 8020164:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8020168:	0e07      	lsrs	r7, r0, #24
 802016a:	2fff      	cmp	r7, #255	; 0xff
 802016c:	d116      	bne.n	802019c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 802016e:	f06f 0501 	mvn.w	r5, #1
 8020172:	fb05 f706 	mul.w	r7, r5, r6
 8020176:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 802017a:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 802017e:	0945      	lsrs	r5, r0, #5
 8020180:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020184:	ea4c 0505 	orr.w	r5, ip, r5
 8020188:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 802018c:	4305      	orrs	r5, r0
 802018e:	53e5      	strh	r5, [r4, r7]
 8020190:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020192:	4401      	add	r1, r0
 8020194:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020196:	3e01      	subs	r6, #1
 8020198:	4402      	add	r2, r0
 802019a:	e790      	b.n	80200be <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802019c:	b2fd      	uxtb	r5, r7
 802019e:	2f00      	cmp	r7, #0
 80201a0:	d0f6      	beq.n	8020190 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80201a2:	f06f 0701 	mvn.w	r7, #1
 80201a6:	4377      	muls	r7, r6
 80201a8:	fa1f f985 	uxth.w	r9, r5
 80201ac:	f834 e007 	ldrh.w	lr, [r4, r7]
 80201b0:	9702      	str	r7, [sp, #8]
 80201b2:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80201b6:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80201ba:	43ed      	mvns	r5, r5
 80201bc:	b2ed      	uxtb	r5, r5
 80201be:	fb17 f709 	smulbb	r7, r7, r9
 80201c2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80201c6:	fb0c 7c05 	mla	ip, ip, r5, r7
 80201ca:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 80201ce:	ea4f 07ee 	mov.w	r7, lr, asr #3
 80201d2:	b2c0      	uxtb	r0, r0
 80201d4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80201d8:	fa5f fe8e 	uxtb.w	lr, lr
 80201dc:	fb10 f009 	smulbb	r0, r0, r9
 80201e0:	fb0e 0005 	mla	r0, lr, r5, r0
 80201e4:	b280      	uxth	r0, r0
 80201e6:	fa1f fc8c 	uxth.w	ip, ip
 80201ea:	fb1a fa09 	smulbb	sl, sl, r9
 80201ee:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80201f2:	fb07 a705 	mla	r7, r7, r5, sl
 80201f6:	f100 0a01 	add.w	sl, r0, #1
 80201fa:	f10c 0501 	add.w	r5, ip, #1
 80201fe:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8020202:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8020206:	b2bf      	uxth	r7, r7
 8020208:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 802020c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020210:	ea4a 0c0c 	orr.w	ip, sl, ip
 8020214:	f107 0a01 	add.w	sl, r7, #1
 8020218:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 802021c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020220:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020224:	9802      	ldr	r0, [sp, #8]
 8020226:	ea4c 0c0a 	orr.w	ip, ip, sl
 802022a:	f824 c000 	strh.w	ip, [r4, r0]
 802022e:	e7af      	b.n	8020190 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020230:	f04f 0e00 	mov.w	lr, #0
 8020234:	eba3 000e 	sub.w	r0, r3, lr
 8020238:	2800      	cmp	r0, #0
 802023a:	f77f af43 	ble.w	80200c4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802023e:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8020242:	140d      	asrs	r5, r1, #16
 8020244:	1410      	asrs	r0, r2, #16
 8020246:	fb06 5000 	mla	r0, r6, r0, r5
 802024a:	9d01      	ldr	r5, [sp, #4]
 802024c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8020250:	0e2e      	lsrs	r6, r5, #24
 8020252:	2eff      	cmp	r6, #255	; 0xff
 8020254:	d112      	bne.n	802027c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8020256:	482c      	ldr	r0, [pc, #176]	; (8020308 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 8020258:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 802025c:	0968      	lsrs	r0, r5, #5
 802025e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020262:	4330      	orrs	r0, r6
 8020264:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8020268:	4328      	orrs	r0, r5
 802026a:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 802026e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020270:	4401      	add	r1, r0
 8020272:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020274:	f10e 0e01 	add.w	lr, lr, #1
 8020278:	4402      	add	r2, r0
 802027a:	e7db      	b.n	8020234 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 802027c:	b2f0      	uxtb	r0, r6
 802027e:	2e00      	cmp	r6, #0
 8020280:	d0f5      	beq.n	802026e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8020282:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8020286:	fa1f f980 	uxth.w	r9, r0
 802028a:	ea4f 272c 	mov.w	r7, ip, asr #8
 802028e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8020292:	43c0      	mvns	r0, r0
 8020294:	b2c0      	uxtb	r0, r0
 8020296:	fb16 f609 	smulbb	r6, r6, r9
 802029a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802029e:	fb07 6700 	mla	r7, r7, r0, r6
 80202a2:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80202a6:	ea4f 06ec 	mov.w	r6, ip, asr #3
 80202aa:	b2ed      	uxtb	r5, r5
 80202ac:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80202b0:	fa5f fc8c 	uxtb.w	ip, ip
 80202b4:	fb15 f509 	smulbb	r5, r5, r9
 80202b8:	fb0c 5500 	mla	r5, ip, r0, r5
 80202bc:	b2bf      	uxth	r7, r7
 80202be:	fb1a fa09 	smulbb	sl, sl, r9
 80202c2:	b2ad      	uxth	r5, r5
 80202c4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80202c8:	fb06 a600 	mla	r6, r6, r0, sl
 80202cc:	1c78      	adds	r0, r7, #1
 80202ce:	f105 0a01 	add.w	sl, r5, #1
 80202d2:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 80202d6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80202da:	b2b6      	uxth	r6, r6
 80202dc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80202e0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80202e4:	ea4a 0707 	orr.w	r7, sl, r7
 80202e8:	f106 0a01 	add.w	sl, r6, #1
 80202ec:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80202f0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80202f4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80202f8:	ea47 070a 	orr.w	r7, r7, sl
 80202fc:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8020300:	e7b5      	b.n	802026e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8020302:	b005      	add	sp, #20
 8020304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020308:	fffff800 	.word	0xfffff800

0802030c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802030c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020310:	b087      	sub	sp, #28
 8020312:	468b      	mov	fp, r1
 8020314:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020316:	9203      	str	r2, [sp, #12]
 8020318:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 802031c:	9204      	str	r2, [sp, #16]
 802031e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8020322:	6841      	ldr	r1, [r0, #4]
 8020324:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8020328:	fb01 2404 	mla	r4, r1, r4, r2
 802032c:	6802      	ldr	r2, [r0, #0]
 802032e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020332:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8020336:	3201      	adds	r2, #1
 8020338:	f022 0201 	bic.w	r2, r2, #1
 802033c:	9200      	str	r2, [sp, #0]
 802033e:	f8d9 2000 	ldr.w	r2, [r9]
 8020342:	9201      	str	r2, [sp, #4]
 8020344:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020348:	f1bb 0f00 	cmp.w	fp, #0
 802034c:	dc03      	bgt.n	8020356 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802034e:	9a03      	ldr	r2, [sp, #12]
 8020350:	2a00      	cmp	r2, #0
 8020352:	f340 8169 	ble.w	8020628 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8020356:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020358:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 802035c:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8020360:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020364:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020366:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 802036a:	2b00      	cmp	r3, #0
 802036c:	dd0e      	ble.n	802038c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 802036e:	1402      	asrs	r2, r0, #16
 8020370:	d405      	bmi.n	802037e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020372:	42ba      	cmp	r2, r7
 8020374:	da03      	bge.n	802037e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020376:	140a      	asrs	r2, r1, #16
 8020378:	d401      	bmi.n	802037e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802037a:	42b2      	cmp	r2, r6
 802037c:	db07      	blt.n	802038e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802037e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020380:	4410      	add	r0, r2
 8020382:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020384:	3b01      	subs	r3, #1
 8020386:	4411      	add	r1, r2
 8020388:	3402      	adds	r4, #2
 802038a:	e7ee      	b.n	802036a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802038c:	d017      	beq.n	80203be <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802038e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020390:	1e5a      	subs	r2, r3, #1
 8020392:	fb05 0502 	mla	r5, r5, r2, r0
 8020396:	142d      	asrs	r5, r5, #16
 8020398:	d409      	bmi.n	80203ae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 802039a:	42bd      	cmp	r5, r7
 802039c:	da07      	bge.n	80203ae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 802039e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80203a0:	fb05 1202 	mla	r2, r5, r2, r1
 80203a4:	1412      	asrs	r2, r2, #16
 80203a6:	d402      	bmi.n	80203ae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80203a8:	42b2      	cmp	r2, r6
 80203aa:	f2c0 80c7 	blt.w	802053c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80203ae:	2700      	movs	r7, #0
 80203b0:	19da      	adds	r2, r3, r7
 80203b2:	2a00      	cmp	r2, #0
 80203b4:	dc3e      	bgt.n	8020434 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80203b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80203ba:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80203be:	f1bb 0f00 	cmp.w	fp, #0
 80203c2:	f340 8131 	ble.w	8020628 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80203c6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80203ca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80203ce:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80203d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80203d4:	f1bb 0b01 	subs.w	fp, fp, #1
 80203d8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80203dc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80203e0:	eeb0 6a62 	vmov.f32	s12, s5
 80203e4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80203e8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80203ec:	ee77 2a62 	vsub.f32	s5, s14, s5
 80203f0:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80203f4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80203f8:	eeb0 6a43 	vmov.f32	s12, s6
 80203fc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020400:	ee12 2a90 	vmov	r2, s5
 8020404:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020408:	fb92 f3f3 	sdiv	r3, r2, r3
 802040c:	ee13 2a10 	vmov	r2, s6
 8020410:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020414:	9313      	str	r3, [sp, #76]	; 0x4c
 8020416:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020418:	fb92 f3f3 	sdiv	r3, r2, r3
 802041c:	9a03      	ldr	r2, [sp, #12]
 802041e:	9314      	str	r3, [sp, #80]	; 0x50
 8020420:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8020424:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020426:	eeb0 3a67 	vmov.f32	s6, s15
 802042a:	bf08      	it	eq
 802042c:	4613      	moveq	r3, r2
 802042e:	eef0 2a47 	vmov.f32	s5, s14
 8020432:	e789      	b.n	8020348 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8020434:	1405      	asrs	r5, r0, #16
 8020436:	d435      	bmi.n	80204a4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8020438:	f8d9 2008 	ldr.w	r2, [r9, #8]
 802043c:	42aa      	cmp	r2, r5
 802043e:	dd31      	ble.n	80204a4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8020440:	140e      	asrs	r6, r1, #16
 8020442:	d42f      	bmi.n	80204a4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8020444:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8020448:	42b2      	cmp	r2, r6
 802044a:	dd2b      	ble.n	80204a4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802044c:	9a00      	ldr	r2, [sp, #0]
 802044e:	fb06 5502 	mla	r5, r6, r2, r5
 8020452:	086a      	lsrs	r2, r5, #1
 8020454:	9e01      	ldr	r6, [sp, #4]
 8020456:	5cb2      	ldrb	r2, [r6, r2]
 8020458:	07ee      	lsls	r6, r5, #31
 802045a:	bf54      	ite	pl
 802045c:	f002 020f 	andpl.w	r2, r2, #15
 8020460:	1112      	asrmi	r2, r2, #4
 8020462:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020466:	b2d2      	uxtb	r2, r2
 8020468:	b1e2      	cbz	r2, 80204a4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802046a:	9d04      	ldr	r5, [sp, #16]
 802046c:	436a      	muls	r2, r5
 802046e:	1c55      	adds	r5, r2, #1
 8020470:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8020474:	4d6e      	ldr	r5, [pc, #440]	; (8020630 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8020476:	682d      	ldr	r5, [r5, #0]
 8020478:	1212      	asrs	r2, r2, #8
 802047a:	0a2e      	lsrs	r6, r5, #8
 802047c:	2aff      	cmp	r2, #255	; 0xff
 802047e:	9605      	str	r6, [sp, #20]
 8020480:	d116      	bne.n	80204b0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8020482:	f06f 0201 	mvn.w	r2, #1
 8020486:	fb02 fc07 	mul.w	ip, r2, r7
 802048a:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 802048e:	096a      	lsrs	r2, r5, #5
 8020490:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020494:	f026 0607 	bic.w	r6, r6, #7
 8020498:	4316      	orrs	r6, r2
 802049a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 802049e:	432e      	orrs	r6, r5
 80204a0:	f824 600c 	strh.w	r6, [r4, ip]
 80204a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80204a6:	4410      	add	r0, r2
 80204a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80204aa:	3f01      	subs	r7, #1
 80204ac:	4411      	add	r1, r2
 80204ae:	e77f      	b.n	80203b0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 80204b0:	f06f 0601 	mvn.w	r6, #1
 80204b4:	437e      	muls	r6, r7
 80204b6:	fa1f fa82 	uxth.w	sl, r2
 80204ba:	f834 8006 	ldrh.w	r8, [r4, r6]
 80204be:	9602      	str	r6, [sp, #8]
 80204c0:	ea4f 2e28 	mov.w	lr, r8, asr #8
 80204c4:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 80204c8:	43d2      	mvns	r2, r2
 80204ca:	b2d2      	uxtb	r2, r2
 80204cc:	fb1c fc0a 	smulbb	ip, ip, sl
 80204d0:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80204d4:	fb0e ce02 	mla	lr, lr, r2, ip
 80204d8:	b2ed      	uxtb	r5, r5
 80204da:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 80204de:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80204e2:	f89d 6014 	ldrb.w	r6, [sp, #20]
 80204e6:	fa5f f888 	uxtb.w	r8, r8
 80204ea:	fb15 f50a 	smulbb	r5, r5, sl
 80204ee:	fb08 5502 	mla	r5, r8, r2, r5
 80204f2:	fa1f fe8e 	uxth.w	lr, lr
 80204f6:	fb16 f60a 	smulbb	r6, r6, sl
 80204fa:	b2ad      	uxth	r5, r5
 80204fc:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8020500:	fb0c 6c02 	mla	ip, ip, r2, r6
 8020504:	f10e 0201 	add.w	r2, lr, #1
 8020508:	1c6e      	adds	r6, r5, #1
 802050a:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 802050e:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 8020512:	fa1f fc8c 	uxth.w	ip, ip
 8020516:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 802051a:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 802051e:	ea46 0e0e 	orr.w	lr, r6, lr
 8020522:	f10c 0601 	add.w	r6, ip, #1
 8020526:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 802052a:	0976      	lsrs	r6, r6, #5
 802052c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020530:	9a02      	ldr	r2, [sp, #8]
 8020532:	ea4e 0e06 	orr.w	lr, lr, r6
 8020536:	f824 e002 	strh.w	lr, [r4, r2]
 802053a:	e7b3      	b.n	80204a4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802053c:	f04f 0800 	mov.w	r8, #0
 8020540:	eba3 0208 	sub.w	r2, r3, r8
 8020544:	2a00      	cmp	r2, #0
 8020546:	f77f af36 	ble.w	80203b6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802054a:	9e00      	ldr	r6, [sp, #0]
 802054c:	1402      	asrs	r2, r0, #16
 802054e:	140d      	asrs	r5, r1, #16
 8020550:	fb06 2505 	mla	r5, r6, r5, r2
 8020554:	086a      	lsrs	r2, r5, #1
 8020556:	9e01      	ldr	r6, [sp, #4]
 8020558:	5cb2      	ldrb	r2, [r6, r2]
 802055a:	07ed      	lsls	r5, r5, #31
 802055c:	bf54      	ite	pl
 802055e:	f002 020f 	andpl.w	r2, r2, #15
 8020562:	1112      	asrmi	r2, r2, #4
 8020564:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020568:	b2d2      	uxtb	r2, r2
 802056a:	b1c2      	cbz	r2, 802059e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 802056c:	9d04      	ldr	r5, [sp, #16]
 802056e:	436a      	muls	r2, r5
 8020570:	1c55      	adds	r5, r2, #1
 8020572:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8020576:	4d2e      	ldr	r5, [pc, #184]	; (8020630 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8020578:	1212      	asrs	r2, r2, #8
 802057a:	682e      	ldr	r6, [r5, #0]
 802057c:	2aff      	cmp	r2, #255	; 0xff
 802057e:	ea4f 2516 	mov.w	r5, r6, lsr #8
 8020582:	d113      	bne.n	80205ac <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8020584:	0972      	lsrs	r2, r6, #5
 8020586:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 802058a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802058e:	f025 0507 	bic.w	r5, r5, #7
 8020592:	4315      	orrs	r5, r2
 8020594:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8020598:	4335      	orrs	r5, r6
 802059a:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 802059e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80205a0:	4410      	add	r0, r2
 80205a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80205a4:	f108 0801 	add.w	r8, r8, #1
 80205a8:	4411      	add	r1, r2
 80205aa:	e7c9      	b.n	8020540 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80205ac:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 80205b0:	fa1f fa82 	uxth.w	sl, r2
 80205b4:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80205b8:	f3c6 4707 	ubfx	r7, r6, #16, #8
 80205bc:	43d2      	mvns	r2, r2
 80205be:	b2d2      	uxtb	r2, r2
 80205c0:	fb17 f70a 	smulbb	r7, r7, sl
 80205c4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80205c8:	fb0c 7c02 	mla	ip, ip, r2, r7
 80205cc:	b2f6      	uxtb	r6, r6
 80205ce:	ea4f 07ee 	mov.w	r7, lr, asr #3
 80205d2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80205d6:	fa5f fe8e 	uxtb.w	lr, lr
 80205da:	fb16 f60a 	smulbb	r6, r6, sl
 80205de:	fb0e 6602 	mla	r6, lr, r2, r6
 80205e2:	b2ed      	uxtb	r5, r5
 80205e4:	fa1f fc8c 	uxth.w	ip, ip
 80205e8:	fb15 f50a 	smulbb	r5, r5, sl
 80205ec:	b2b6      	uxth	r6, r6
 80205ee:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80205f2:	fb07 5702 	mla	r7, r7, r2, r5
 80205f6:	f10c 0201 	add.w	r2, ip, #1
 80205fa:	1c75      	adds	r5, r6, #1
 80205fc:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8020600:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 8020604:	b2bf      	uxth	r7, r7
 8020606:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 802060a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802060e:	ea45 0c0c 	orr.w	ip, r5, ip
 8020612:	1c7d      	adds	r5, r7, #1
 8020614:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 8020618:	096d      	lsrs	r5, r5, #5
 802061a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802061e:	ea4c 0c05 	orr.w	ip, ip, r5
 8020622:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 8020626:	e7ba      	b.n	802059e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8020628:	b007      	add	sp, #28
 802062a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802062e:	bf00      	nop
 8020630:	2000af58 	.word	0x2000af58

08020634 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020638:	b087      	sub	sp, #28
 802063a:	f8df 830c 	ldr.w	r8, [pc, #780]	; 8020948 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 802063e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020640:	9205      	str	r2, [sp, #20]
 8020642:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8020646:	9101      	str	r1, [sp, #4]
 8020648:	6841      	ldr	r1, [r0, #4]
 802064a:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 802064e:	fb01 2404 	mla	r4, r1, r4, r2
 8020652:	6802      	ldr	r2, [r0, #0]
 8020654:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020658:	f8db 2008 	ldr.w	r2, [fp, #8]
 802065c:	3201      	adds	r2, #1
 802065e:	f022 0201 	bic.w	r2, r2, #1
 8020662:	9202      	str	r2, [sp, #8]
 8020664:	f8db 2000 	ldr.w	r2, [fp]
 8020668:	9203      	str	r2, [sp, #12]
 802066a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802066e:	9a01      	ldr	r2, [sp, #4]
 8020670:	2a00      	cmp	r2, #0
 8020672:	dc03      	bgt.n	802067c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020674:	9a05      	ldr	r2, [sp, #20]
 8020676:	2a00      	cmp	r2, #0
 8020678:	f340 8162 	ble.w	8020940 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 802067c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802067e:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 8020682:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 8020686:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 802068a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802068c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020690:	2b00      	cmp	r3, #0
 8020692:	dd0e      	ble.n	80206b2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8020694:	1402      	asrs	r2, r0, #16
 8020696:	d405      	bmi.n	80206a4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020698:	42ba      	cmp	r2, r7
 802069a:	da03      	bge.n	80206a4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802069c:	140a      	asrs	r2, r1, #16
 802069e:	d401      	bmi.n	80206a4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80206a0:	42b2      	cmp	r2, r6
 80206a2:	db07      	blt.n	80206b4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80206a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80206a6:	4410      	add	r0, r2
 80206a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80206aa:	3b01      	subs	r3, #1
 80206ac:	4411      	add	r1, r2
 80206ae:	3402      	adds	r4, #2
 80206b0:	e7ee      	b.n	8020690 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80206b2:	d017      	beq.n	80206e4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80206b4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80206b6:	1e5a      	subs	r2, r3, #1
 80206b8:	fb05 0502 	mla	r5, r5, r2, r0
 80206bc:	142d      	asrs	r5, r5, #16
 80206be:	d409      	bmi.n	80206d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80206c0:	42bd      	cmp	r5, r7
 80206c2:	da07      	bge.n	80206d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80206c4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80206c6:	fb05 1202 	mla	r2, r5, r2, r1
 80206ca:	1412      	asrs	r2, r2, #16
 80206cc:	d402      	bmi.n	80206d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80206ce:	42b2      	cmp	r2, r6
 80206d0:	f2c0 80c3 	blt.w	802085a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 80206d4:	2500      	movs	r5, #0
 80206d6:	195a      	adds	r2, r3, r5
 80206d8:	2a00      	cmp	r2, #0
 80206da:	dc3f      	bgt.n	802075c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80206dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80206e0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80206e4:	9b01      	ldr	r3, [sp, #4]
 80206e6:	2b00      	cmp	r3, #0
 80206e8:	f340 812a 	ble.w	8020940 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80206ec:	ee30 0a04 	vadd.f32	s0, s0, s8
 80206f0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80206f4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80206f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80206fa:	ee31 1a05 	vadd.f32	s2, s2, s10
 80206fe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020702:	eeb0 6a62 	vmov.f32	s12, s5
 8020706:	ee61 7a27 	vmul.f32	s15, s2, s15
 802070a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802070e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020712:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8020716:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802071a:	eeb0 6a43 	vmov.f32	s12, s6
 802071e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020722:	ee12 2a90 	vmov	r2, s5
 8020726:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802072a:	fb92 f3f3 	sdiv	r3, r2, r3
 802072e:	ee13 2a10 	vmov	r2, s6
 8020732:	9313      	str	r3, [sp, #76]	; 0x4c
 8020734:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020736:	fb92 f3f3 	sdiv	r3, r2, r3
 802073a:	9314      	str	r3, [sp, #80]	; 0x50
 802073c:	9b01      	ldr	r3, [sp, #4]
 802073e:	9a05      	ldr	r2, [sp, #20]
 8020740:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020744:	3b01      	subs	r3, #1
 8020746:	9301      	str	r3, [sp, #4]
 8020748:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 802074c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802074e:	eeb0 3a67 	vmov.f32	s6, s15
 8020752:	bf08      	it	eq
 8020754:	4613      	moveq	r3, r2
 8020756:	eef0 2a47 	vmov.f32	s5, s14
 802075a:	e788      	b.n	802066e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802075c:	1406      	asrs	r6, r0, #16
 802075e:	d42c      	bmi.n	80207ba <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020760:	f8db 2008 	ldr.w	r2, [fp, #8]
 8020764:	42b2      	cmp	r2, r6
 8020766:	dd28      	ble.n	80207ba <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020768:	140f      	asrs	r7, r1, #16
 802076a:	d426      	bmi.n	80207ba <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802076c:	f8db 200c 	ldr.w	r2, [fp, #12]
 8020770:	42ba      	cmp	r2, r7
 8020772:	dd22      	ble.n	80207ba <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020774:	9a02      	ldr	r2, [sp, #8]
 8020776:	fb07 6602 	mla	r6, r7, r2, r6
 802077a:	0872      	lsrs	r2, r6, #1
 802077c:	9f03      	ldr	r7, [sp, #12]
 802077e:	5cba      	ldrb	r2, [r7, r2]
 8020780:	07f6      	lsls	r6, r6, #31
 8020782:	bf54      	ite	pl
 8020784:	f002 020f 	andpl.w	r2, r2, #15
 8020788:	1112      	asrmi	r2, r2, #4
 802078a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802078e:	b2d2      	uxtb	r2, r2
 8020790:	2aff      	cmp	r2, #255	; 0xff
 8020792:	d118      	bne.n	80207c6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8020794:	f8d8 2000 	ldr.w	r2, [r8]
 8020798:	f06f 0601 	mvn.w	r6, #1
 802079c:	fb06 f705 	mul.w	r7, r6, r5
 80207a0:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 80207a4:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 80207a8:	0956      	lsrs	r6, r2, #5
 80207aa:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80207ae:	ea4c 0606 	orr.w	r6, ip, r6
 80207b2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80207b6:	4316      	orrs	r6, r2
 80207b8:	53e6      	strh	r6, [r4, r7]
 80207ba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80207bc:	4410      	add	r0, r2
 80207be:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80207c0:	3d01      	subs	r5, #1
 80207c2:	4411      	add	r1, r2
 80207c4:	e787      	b.n	80206d6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80207c6:	2a00      	cmp	r2, #0
 80207c8:	d0f7      	beq.n	80207ba <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80207ca:	f06f 0601 	mvn.w	r6, #1
 80207ce:	436e      	muls	r6, r5
 80207d0:	f8d8 c000 	ldr.w	ip, [r8]
 80207d4:	f834 e006 	ldrh.w	lr, [r4, r6]
 80207d8:	9604      	str	r6, [sp, #16]
 80207da:	fa1f f982 	uxth.w	r9, r2
 80207de:	ea4f 272e 	mov.w	r7, lr, asr #8
 80207e2:	f3cc 4607 	ubfx	r6, ip, #16, #8
 80207e6:	43d2      	mvns	r2, r2
 80207e8:	b2d2      	uxtb	r2, r2
 80207ea:	fb16 f609 	smulbb	r6, r6, r9
 80207ee:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80207f2:	fb07 6702 	mla	r7, r7, r2, r6
 80207f6:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 80207fa:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80207fe:	fa5f fc8c 	uxtb.w	ip, ip
 8020802:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020806:	fa5f fe8e 	uxtb.w	lr, lr
 802080a:	fb1c fc09 	smulbb	ip, ip, r9
 802080e:	fb0e cc02 	mla	ip, lr, r2, ip
 8020812:	b2bf      	uxth	r7, r7
 8020814:	fb1a fa09 	smulbb	sl, sl, r9
 8020818:	fa1f fc8c 	uxth.w	ip, ip
 802081c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020820:	fb06 a602 	mla	r6, r6, r2, sl
 8020824:	1c7a      	adds	r2, r7, #1
 8020826:	f10c 0a01 	add.w	sl, ip, #1
 802082a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 802082e:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8020832:	b2b6      	uxth	r6, r6
 8020834:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020838:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 802083c:	ea4a 0707 	orr.w	r7, sl, r7
 8020840:	f106 0a01 	add.w	sl, r6, #1
 8020844:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020848:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802084c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020850:	9a04      	ldr	r2, [sp, #16]
 8020852:	ea47 070a 	orr.w	r7, r7, sl
 8020856:	52a7      	strh	r7, [r4, r2]
 8020858:	e7af      	b.n	80207ba <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802085a:	f04f 0e00 	mov.w	lr, #0
 802085e:	eba3 020e 	sub.w	r2, r3, lr
 8020862:	2a00      	cmp	r2, #0
 8020864:	f77f af3a 	ble.w	80206dc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8020868:	9e02      	ldr	r6, [sp, #8]
 802086a:	1402      	asrs	r2, r0, #16
 802086c:	140d      	asrs	r5, r1, #16
 802086e:	fb06 2505 	mla	r5, r6, r5, r2
 8020872:	086a      	lsrs	r2, r5, #1
 8020874:	9e03      	ldr	r6, [sp, #12]
 8020876:	5cb2      	ldrb	r2, [r6, r2]
 8020878:	07ed      	lsls	r5, r5, #31
 802087a:	bf54      	ite	pl
 802087c:	f002 020f 	andpl.w	r2, r2, #15
 8020880:	1112      	asrmi	r2, r2, #4
 8020882:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020886:	b2d2      	uxtb	r2, r2
 8020888:	2aff      	cmp	r2, #255	; 0xff
 802088a:	d115      	bne.n	80208b8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 802088c:	f8d8 5000 	ldr.w	r5, [r8]
 8020890:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 8020894:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 8020898:	096a      	lsrs	r2, r5, #5
 802089a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802089e:	4332      	orrs	r2, r6
 80208a0:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80208a4:	432a      	orrs	r2, r5
 80208a6:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 80208aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80208ac:	4410      	add	r0, r2
 80208ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80208b0:	f10e 0e01 	add.w	lr, lr, #1
 80208b4:	4411      	add	r1, r2
 80208b6:	e7d2      	b.n	802085e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80208b8:	2a00      	cmp	r2, #0
 80208ba:	d0f6      	beq.n	80208aa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80208bc:	f8d8 7000 	ldr.w	r7, [r8]
 80208c0:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 80208c4:	fa1f f982 	uxth.w	r9, r2
 80208c8:	ea4f 262c 	mov.w	r6, ip, asr #8
 80208cc:	f3c7 4507 	ubfx	r5, r7, #16, #8
 80208d0:	43d2      	mvns	r2, r2
 80208d2:	b2d2      	uxtb	r2, r2
 80208d4:	fb15 f509 	smulbb	r5, r5, r9
 80208d8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80208dc:	fb06 5602 	mla	r6, r6, r2, r5
 80208e0:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 80208e4:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80208e8:	b2ff      	uxtb	r7, r7
 80208ea:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80208ee:	fa5f fc8c 	uxtb.w	ip, ip
 80208f2:	fb17 f709 	smulbb	r7, r7, r9
 80208f6:	fb0c 7702 	mla	r7, ip, r2, r7
 80208fa:	b2b6      	uxth	r6, r6
 80208fc:	fb1a fa09 	smulbb	sl, sl, r9
 8020900:	b2bf      	uxth	r7, r7
 8020902:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8020906:	fb05 a502 	mla	r5, r5, r2, sl
 802090a:	1c72      	adds	r2, r6, #1
 802090c:	f107 0a01 	add.w	sl, r7, #1
 8020910:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8020914:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8020918:	b2ad      	uxth	r5, r5
 802091a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 802091e:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8020922:	ea4a 0606 	orr.w	r6, sl, r6
 8020926:	f105 0a01 	add.w	sl, r5, #1
 802092a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 802092e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020932:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020936:	ea46 060a 	orr.w	r6, r6, sl
 802093a:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 802093e:	e7b4      	b.n	80208aa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8020940:	b007      	add	sp, #28
 8020942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020946:	bf00      	nop
 8020948:	2000af58 	.word	0x2000af58

0802094c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D1Ev>:
 802094c:	4770      	bx	lr

0802094e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED1Ev>:
 802094e:	4770      	bx	lr

08020950 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 8020950:	4770      	bx	lr

08020952 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8020952:	4770      	bx	lr

08020954 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8020954:	4770      	bx	lr

08020956 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8020956:	4770      	bx	lr

08020958 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8020958:	4770      	bx	lr

0802095a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 802095a:	4770      	bx	lr

0802095c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 802095c:	4770      	bx	lr

0802095e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 802095e:	4770      	bx	lr

08020960 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020960:	4770      	bx	lr

08020962 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020962:	4770      	bx	lr

08020964 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8020964:	4770      	bx	lr

08020966 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020966:	4770      	bx	lr

08020968 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020968:	4770      	bx	lr

0802096a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 802096a:	4770      	bx	lr

0802096c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 802096c:	4770      	bx	lr

0802096e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 802096e:	4770      	bx	lr

08020970 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020970:	4770      	bx	lr

08020972 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020972:	4770      	bx	lr

08020974 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020974:	4770      	bx	lr

08020976 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020976:	4770      	bx	lr

08020978 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020978:	4770      	bx	lr

0802097a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 802097a:	4770      	bx	lr

0802097c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 802097c:	4770      	bx	lr

0802097e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 802097e:	4770      	bx	lr

08020980 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8020980:	4770      	bx	lr

08020982 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020982:	4770      	bx	lr

08020984 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8020984:	4770      	bx	lr

08020986 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020986:	4770      	bx	lr

08020988 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8020988:	4770      	bx	lr

0802098a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 802098a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802098e:	b088      	sub	sp, #32
 8020990:	ac08      	add	r4, sp, #32
 8020992:	4606      	mov	r6, r0
 8020994:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8020998:	4620      	mov	r0, r4
 802099a:	4688      	mov	r8, r1
 802099c:	4691      	mov	r9, r2
 802099e:	f7fd fc63 	bl	801e268 <_ZNK8touchgfx6Bitmap7getDataEv>
 80209a2:	6833      	ldr	r3, [r6, #0]
 80209a4:	4605      	mov	r5, r0
 80209a6:	4620      	mov	r0, r4
 80209a8:	699f      	ldr	r7, [r3, #24]
 80209aa:	f7fd fb71 	bl	801e090 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80209ae:	4682      	mov	sl, r0
 80209b0:	4620      	mov	r0, r4
 80209b2:	f7fd fba1 	bl	801e0f8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80209b6:	9500      	str	r5, [sp, #0]
 80209b8:	e9cd a001 	strd	sl, r0, [sp, #4]
 80209bc:	464b      	mov	r3, r9
 80209be:	a806      	add	r0, sp, #24
 80209c0:	4642      	mov	r2, r8
 80209c2:	4631      	mov	r1, r6
 80209c4:	47b8      	blx	r7
 80209c6:	4628      	mov	r0, r5
 80209c8:	b008      	add	sp, #32
 80209ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080209d0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 80209d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80209d4:	2300      	movs	r3, #0
 80209d6:	9300      	str	r3, [sp, #0]
 80209d8:	4b3d      	ldr	r3, [pc, #244]	; (8020ad0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 80209da:	781b      	ldrb	r3, [r3, #0]
 80209dc:	2b00      	cmp	r3, #0
 80209de:	d137      	bne.n	8020a50 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 80209e0:	4a3c      	ldr	r2, [pc, #240]	; (8020ad4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 80209e2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80209e6:	f8ad 2004 	strh.w	r2, [sp, #4]
 80209ea:	2b00      	cmp	r3, #0
 80209ec:	d132      	bne.n	8020a54 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 80209ee:	4b3a      	ldr	r3, [pc, #232]	; (8020ad8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 80209f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80209f4:	6808      	ldr	r0, [r1, #0]
 80209f6:	6849      	ldr	r1, [r1, #4]
 80209f8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80209fc:	ac02      	add	r4, sp, #8
 80209fe:	ab02      	add	r3, sp, #8
 8020a00:	c303      	stmia	r3!, {r0, r1}
 8020a02:	4669      	mov	r1, sp
 8020a04:	4620      	mov	r0, r4
 8020a06:	f7fa faef 	bl	801afe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020a0a:	4668      	mov	r0, sp
 8020a0c:	f7fa faa8 	bl	801af60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020a10:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8020a14:	f8bd 2000 	ldrh.w	r2, [sp]
 8020a18:	4d30      	ldr	r5, [pc, #192]	; (8020adc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 8020a1a:	4413      	add	r3, r2
 8020a1c:	f8ad 3008 	strh.w	r3, [sp, #8]
 8020a20:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8020a24:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8020a28:	6828      	ldr	r0, [r5, #0]
 8020a2a:	4413      	add	r3, r2
 8020a2c:	f8ad 300a 	strh.w	r3, [sp, #10]
 8020a30:	6803      	ldr	r3, [r0, #0]
 8020a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020a34:	4798      	blx	r3
 8020a36:	f010 0f01 	tst.w	r0, #1
 8020a3a:	462f      	mov	r7, r5
 8020a3c:	d00c      	beq.n	8020a58 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 8020a3e:	6828      	ldr	r0, [r5, #0]
 8020a40:	6803      	ldr	r3, [r0, #0]
 8020a42:	e894 0006 	ldmia.w	r4, {r1, r2}
 8020a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8020a48:	4798      	blx	r3
 8020a4a:	b004      	add	sp, #16
 8020a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020a50:	4a21      	ldr	r2, [pc, #132]	; (8020ad8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8020a52:	e7c6      	b.n	80209e2 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8020a54:	4b1f      	ldr	r3, [pc, #124]	; (8020ad4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8020a56:	e7cb      	b.n	80209f0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8020a58:	6838      	ldr	r0, [r7, #0]
 8020a5a:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8020a5e:	6803      	ldr	r3, [r0, #0]
 8020a60:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 8020a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020a66:	4798      	blx	r3
 8020a68:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8020a6c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8020a70:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 8020a74:	fb16 3602 	smlabb	r6, r6, r2, r3
 8020a78:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8020a7c:	6838      	ldr	r0, [r7, #0]
 8020a7e:	6803      	ldr	r3, [r0, #0]
 8020a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020a82:	4798      	blx	r3
 8020a84:	4a13      	ldr	r2, [pc, #76]	; (8020ad4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8020a86:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 8020a8a:	8813      	ldrh	r3, [r2, #0]
 8020a8c:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8020a90:	fb03 1404 	mla	r4, r3, r4, r1
 8020a94:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8020a98:	435d      	muls	r5, r3
 8020a9a:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8020a9e:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8020aa2:	4691      	mov	r9, r2
 8020aa4:	6838      	ldr	r0, [r7, #0]
 8020aa6:	42ac      	cmp	r4, r5
 8020aa8:	6803      	ldr	r3, [r0, #0]
 8020aaa:	d20e      	bcs.n	8020aca <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 8020aac:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 8020ab0:	4632      	mov	r2, r6
 8020ab2:	4643      	mov	r3, r8
 8020ab4:	4621      	mov	r1, r4
 8020ab6:	47d0      	blx	sl
 8020ab8:	f8b9 3000 	ldrh.w	r3, [r9]
 8020abc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020ac0:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8020ac4:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8020ac8:	e7ec      	b.n	8020aa4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 8020aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020acc:	4798      	blx	r3
 8020ace:	e7bc      	b.n	8020a4a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8020ad0:	2000af40 	.word	0x2000af40
 8020ad4:	2000af42 	.word	0x2000af42
 8020ad8:	2000af44 	.word	0x2000af44
 8020adc:	2000af48 	.word	0x2000af48

08020ae0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8020ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ae4:	b08b      	sub	sp, #44	; 0x2c
 8020ae6:	460f      	mov	r7, r1
 8020ae8:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 8020aec:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8020af0:	4616      	mov	r6, r2
 8020af2:	f1bb 0f00 	cmp.w	fp, #0
 8020af6:	d04a      	beq.n	8020b8e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 8020af8:	6810      	ldr	r0, [r2, #0]
 8020afa:	6851      	ldr	r1, [r2, #4]
 8020afc:	ad06      	add	r5, sp, #24
 8020afe:	c503      	stmia	r5!, {r0, r1}
 8020b00:	6818      	ldr	r0, [r3, #0]
 8020b02:	6859      	ldr	r1, [r3, #4]
 8020b04:	ad08      	add	r5, sp, #32
 8020b06:	c503      	stmia	r5!, {r0, r1}
 8020b08:	a806      	add	r0, sp, #24
 8020b0a:	f7fa fa29 	bl	801af60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020b0e:	4631      	mov	r1, r6
 8020b10:	a808      	add	r0, sp, #32
 8020b12:	f7fa fa69 	bl	801afe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020b16:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8020b1a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8020b1e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8020b22:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8020b26:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8020b2a:	fb16 2103 	smlabb	r1, r6, r3, r2
 8020b2e:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 8020b32:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8020b36:	4f5f      	ldr	r7, [pc, #380]	; (8020cb4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8020b38:	440a      	add	r2, r1
 8020b3a:	f8ad 2020 	strh.w	r2, [sp, #32]
 8020b3e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8020b42:	6838      	ldr	r0, [r7, #0]
 8020b44:	4413      	add	r3, r2
 8020b46:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8020b4a:	6803      	ldr	r3, [r0, #0]
 8020b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020b4e:	4798      	blx	r3
 8020b50:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8020b54:	46b9      	mov	r9, r7
 8020b56:	d11d      	bne.n	8020b94 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8020b58:	b9fc      	cbnz	r4, 8020b9a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8020b5a:	f010 0f01 	tst.w	r0, #1
 8020b5e:	d01c      	beq.n	8020b9a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8020b60:	f8d9 0000 	ldr.w	r0, [r9]
 8020b64:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8020b68:	6801      	ldr	r1, [r0, #0]
 8020b6a:	f8cd b00c 	str.w	fp, [sp, #12]
 8020b6e:	2700      	movs	r7, #0
 8020b70:	e9cd 4704 	strd	r4, r7, [sp, #16]
 8020b74:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8020b78:	9402      	str	r4, [sp, #8]
 8020b7a:	b2ad      	uxth	r5, r5
 8020b7c:	fa1f f488 	uxth.w	r4, r8
 8020b80:	9501      	str	r5, [sp, #4]
 8020b82:	9400      	str	r4, [sp, #0]
 8020b84:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 8020b86:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8020b8a:	4631      	mov	r1, r6
 8020b8c:	47a0      	blx	r4
 8020b8e:	b00b      	add	sp, #44	; 0x2c
 8020b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b94:	f010 0f04 	tst.w	r0, #4
 8020b98:	e7e1      	b.n	8020b5e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 8020b9a:	f8d9 0000 	ldr.w	r0, [r9]
 8020b9e:	6803      	ldr	r3, [r0, #0]
 8020ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020ba2:	4798      	blx	r3
 8020ba4:	4b44      	ldr	r3, [pc, #272]	; (8020cb8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 8020ba6:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 8020baa:	881a      	ldrh	r2, [r3, #0]
 8020bac:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8020bb0:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8020bb4:	fb02 1404 	mla	r4, r2, r4, r1
 8020bb8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8020bbc:	469a      	mov	sl, r3
 8020bbe:	fb05 f502 	mul.w	r5, r5, r2
 8020bc2:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8020bc6:	d059      	beq.n	8020c7c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 8020bc8:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 8020bcc:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8020bd0:	fa1f f28b 	uxth.w	r2, fp
 8020bd4:	fa1f f989 	uxth.w	r9, r9
 8020bd8:	469e      	mov	lr, r3
 8020bda:	42ac      	cmp	r4, r5
 8020bdc:	d264      	bcs.n	8020ca8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8020bde:	eb04 0a07 	add.w	sl, r4, r7
 8020be2:	4554      	cmp	r4, sl
 8020be4:	d23d      	bcs.n	8020c62 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 8020be6:	8821      	ldrh	r1, [r4, #0]
 8020be8:	f836 3b02 	ldrh.w	r3, [r6], #2
 8020bec:	1208      	asrs	r0, r1, #8
 8020bee:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8020bf2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020bf6:	fb10 f009 	smulbb	r0, r0, r9
 8020bfa:	ea4f 0be1 	mov.w	fp, r1, asr #3
 8020bfe:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020c02:	00c9      	lsls	r1, r1, #3
 8020c04:	fb0c 0c02 	mla	ip, ip, r2, r0
 8020c08:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8020c0c:	10d8      	asrs	r0, r3, #3
 8020c0e:	b2c9      	uxtb	r1, r1
 8020c10:	00db      	lsls	r3, r3, #3
 8020c12:	fa1f fc8c 	uxth.w	ip, ip
 8020c16:	fb1b fb09 	smulbb	fp, fp, r9
 8020c1a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8020c1e:	b2db      	uxtb	r3, r3
 8020c20:	fb11 f109 	smulbb	r1, r1, r9
 8020c24:	fb00 b002 	mla	r0, r0, r2, fp
 8020c28:	fb03 1302 	mla	r3, r3, r2, r1
 8020c2c:	f10c 0b01 	add.w	fp, ip, #1
 8020c30:	b29b      	uxth	r3, r3
 8020c32:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8020c36:	b280      	uxth	r0, r0
 8020c38:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 8020c3c:	f103 0c01 	add.w	ip, r3, #1
 8020c40:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8020c44:	1c43      	adds	r3, r0, #1
 8020c46:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8020c4a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8020c4e:	0940      	lsrs	r0, r0, #5
 8020c50:	ea4c 0c0b 	orr.w	ip, ip, fp
 8020c54:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020c58:	ea4c 0c00 	orr.w	ip, ip, r0
 8020c5c:	f824 cb02 	strh.w	ip, [r4], #2
 8020c60:	e7bf      	b.n	8020be2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 8020c62:	f8be 3000 	ldrh.w	r3, [lr]
 8020c66:	eba3 0308 	sub.w	r3, r3, r8
 8020c6a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020c6e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8020c72:	eba3 0308 	sub.w	r3, r3, r8
 8020c76:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8020c7a:	e7ae      	b.n	8020bda <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 8020c7c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8020c80:	f8d9 0000 	ldr.w	r0, [r9]
 8020c84:	42ac      	cmp	r4, r5
 8020c86:	6803      	ldr	r3, [r0, #0]
 8020c88:	d20e      	bcs.n	8020ca8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8020c8a:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8020c8e:	4632      	mov	r2, r6
 8020c90:	463b      	mov	r3, r7
 8020c92:	4621      	mov	r1, r4
 8020c94:	47c0      	blx	r8
 8020c96:	f8ba 3000 	ldrh.w	r3, [sl]
 8020c9a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020c9e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8020ca2:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8020ca6:	e7eb      	b.n	8020c80 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8020ca8:	4b02      	ldr	r3, [pc, #8]	; (8020cb4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8020caa:	6818      	ldr	r0, [r3, #0]
 8020cac:	6803      	ldr	r3, [r0, #0]
 8020cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020cb0:	4798      	blx	r3
 8020cb2:	e76c      	b.n	8020b8e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 8020cb4:	2000af48 	.word	0x2000af48
 8020cb8:	2000af42 	.word	0x2000af42

08020cbc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 8020cbc:	b510      	push	{r4, lr}
 8020cbe:	2104      	movs	r1, #4
 8020cc0:	4604      	mov	r4, r0
 8020cc2:	f00b f940 	bl	802bf46 <_ZdlPvj>
 8020cc6:	4620      	mov	r0, r4
 8020cc8:	bd10      	pop	{r4, pc}

08020cca <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED0Ev>:
 8020cca:	b510      	push	{r4, lr}
 8020ccc:	2104      	movs	r1, #4
 8020cce:	4604      	mov	r4, r0
 8020cd0:	f00b f939 	bl	802bf46 <_ZdlPvj>
 8020cd4:	4620      	mov	r0, r4
 8020cd6:	bd10      	pop	{r4, pc}

08020cd8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D0Ev>:
 8020cd8:	b510      	push	{r4, lr}
 8020cda:	f640 0144 	movw	r1, #2116	; 0x844
 8020cde:	4604      	mov	r4, r0
 8020ce0:	f00b f931 	bl	802bf46 <_ZdlPvj>
 8020ce4:	4620      	mov	r0, r4
 8020ce6:	bd10      	pop	{r4, pc}

08020ce8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020ce8:	b510      	push	{r4, lr}
 8020cea:	2104      	movs	r1, #4
 8020cec:	4604      	mov	r4, r0
 8020cee:	f00b f92a 	bl	802bf46 <_ZdlPvj>
 8020cf2:	4620      	mov	r0, r4
 8020cf4:	bd10      	pop	{r4, pc}

08020cf6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8020cf6:	b510      	push	{r4, lr}
 8020cf8:	2104      	movs	r1, #4
 8020cfa:	4604      	mov	r4, r0
 8020cfc:	f00b f923 	bl	802bf46 <_ZdlPvj>
 8020d00:	4620      	mov	r0, r4
 8020d02:	bd10      	pop	{r4, pc}

08020d04 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020d04:	b510      	push	{r4, lr}
 8020d06:	2104      	movs	r1, #4
 8020d08:	4604      	mov	r4, r0
 8020d0a:	f00b f91c 	bl	802bf46 <_ZdlPvj>
 8020d0e:	4620      	mov	r0, r4
 8020d10:	bd10      	pop	{r4, pc}

08020d12 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8020d12:	b510      	push	{r4, lr}
 8020d14:	2104      	movs	r1, #4
 8020d16:	4604      	mov	r4, r0
 8020d18:	f00b f915 	bl	802bf46 <_ZdlPvj>
 8020d1c:	4620      	mov	r0, r4
 8020d1e:	bd10      	pop	{r4, pc}

08020d20 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020d20:	b510      	push	{r4, lr}
 8020d22:	2104      	movs	r1, #4
 8020d24:	4604      	mov	r4, r0
 8020d26:	f00b f90e 	bl	802bf46 <_ZdlPvj>
 8020d2a:	4620      	mov	r0, r4
 8020d2c:	bd10      	pop	{r4, pc}

08020d2e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8020d2e:	b510      	push	{r4, lr}
 8020d30:	2104      	movs	r1, #4
 8020d32:	4604      	mov	r4, r0
 8020d34:	f00b f907 	bl	802bf46 <_ZdlPvj>
 8020d38:	4620      	mov	r0, r4
 8020d3a:	bd10      	pop	{r4, pc}

08020d3c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020d3c:	b510      	push	{r4, lr}
 8020d3e:	2104      	movs	r1, #4
 8020d40:	4604      	mov	r4, r0
 8020d42:	f00b f900 	bl	802bf46 <_ZdlPvj>
 8020d46:	4620      	mov	r0, r4
 8020d48:	bd10      	pop	{r4, pc}

08020d4a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8020d4a:	b510      	push	{r4, lr}
 8020d4c:	2104      	movs	r1, #4
 8020d4e:	4604      	mov	r4, r0
 8020d50:	f00b f8f9 	bl	802bf46 <_ZdlPvj>
 8020d54:	4620      	mov	r0, r4
 8020d56:	bd10      	pop	{r4, pc}

08020d58 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020d58:	b510      	push	{r4, lr}
 8020d5a:	2104      	movs	r1, #4
 8020d5c:	4604      	mov	r4, r0
 8020d5e:	f00b f8f2 	bl	802bf46 <_ZdlPvj>
 8020d62:	4620      	mov	r0, r4
 8020d64:	bd10      	pop	{r4, pc}

08020d66 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020d66:	b510      	push	{r4, lr}
 8020d68:	2104      	movs	r1, #4
 8020d6a:	4604      	mov	r4, r0
 8020d6c:	f00b f8eb 	bl	802bf46 <_ZdlPvj>
 8020d70:	4620      	mov	r0, r4
 8020d72:	bd10      	pop	{r4, pc}

08020d74 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020d74:	b510      	push	{r4, lr}
 8020d76:	2104      	movs	r1, #4
 8020d78:	4604      	mov	r4, r0
 8020d7a:	f00b f8e4 	bl	802bf46 <_ZdlPvj>
 8020d7e:	4620      	mov	r0, r4
 8020d80:	bd10      	pop	{r4, pc}

08020d82 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020d82:	b510      	push	{r4, lr}
 8020d84:	2104      	movs	r1, #4
 8020d86:	4604      	mov	r4, r0
 8020d88:	f00b f8dd 	bl	802bf46 <_ZdlPvj>
 8020d8c:	4620      	mov	r0, r4
 8020d8e:	bd10      	pop	{r4, pc}

08020d90 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020d90:	b510      	push	{r4, lr}
 8020d92:	2104      	movs	r1, #4
 8020d94:	4604      	mov	r4, r0
 8020d96:	f00b f8d6 	bl	802bf46 <_ZdlPvj>
 8020d9a:	4620      	mov	r0, r4
 8020d9c:	bd10      	pop	{r4, pc}

08020d9e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8020d9e:	b510      	push	{r4, lr}
 8020da0:	2104      	movs	r1, #4
 8020da2:	4604      	mov	r4, r0
 8020da4:	f00b f8cf 	bl	802bf46 <_ZdlPvj>
 8020da8:	4620      	mov	r0, r4
 8020daa:	bd10      	pop	{r4, pc}

08020dac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020dac:	b510      	push	{r4, lr}
 8020dae:	2104      	movs	r1, #4
 8020db0:	4604      	mov	r4, r0
 8020db2:	f00b f8c8 	bl	802bf46 <_ZdlPvj>
 8020db6:	4620      	mov	r0, r4
 8020db8:	bd10      	pop	{r4, pc}

08020dba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020dba:	b510      	push	{r4, lr}
 8020dbc:	2104      	movs	r1, #4
 8020dbe:	4604      	mov	r4, r0
 8020dc0:	f00b f8c1 	bl	802bf46 <_ZdlPvj>
 8020dc4:	4620      	mov	r0, r4
 8020dc6:	bd10      	pop	{r4, pc}

08020dc8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020dc8:	b510      	push	{r4, lr}
 8020dca:	2104      	movs	r1, #4
 8020dcc:	4604      	mov	r4, r0
 8020dce:	f00b f8ba 	bl	802bf46 <_ZdlPvj>
 8020dd2:	4620      	mov	r0, r4
 8020dd4:	bd10      	pop	{r4, pc}

08020dd6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8020dd6:	b510      	push	{r4, lr}
 8020dd8:	2104      	movs	r1, #4
 8020dda:	4604      	mov	r4, r0
 8020ddc:	f00b f8b3 	bl	802bf46 <_ZdlPvj>
 8020de0:	4620      	mov	r0, r4
 8020de2:	bd10      	pop	{r4, pc}

08020de4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020de4:	b510      	push	{r4, lr}
 8020de6:	2104      	movs	r1, #4
 8020de8:	4604      	mov	r4, r0
 8020dea:	f00b f8ac 	bl	802bf46 <_ZdlPvj>
 8020dee:	4620      	mov	r0, r4
 8020df0:	bd10      	pop	{r4, pc}

08020df2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020df2:	b510      	push	{r4, lr}
 8020df4:	2104      	movs	r1, #4
 8020df6:	4604      	mov	r4, r0
 8020df8:	f00b f8a5 	bl	802bf46 <_ZdlPvj>
 8020dfc:	4620      	mov	r0, r4
 8020dfe:	bd10      	pop	{r4, pc}

08020e00 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020e00:	b510      	push	{r4, lr}
 8020e02:	2104      	movs	r1, #4
 8020e04:	4604      	mov	r4, r0
 8020e06:	f00b f89e 	bl	802bf46 <_ZdlPvj>
 8020e0a:	4620      	mov	r0, r4
 8020e0c:	bd10      	pop	{r4, pc}

08020e0e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020e0e:	b510      	push	{r4, lr}
 8020e10:	2104      	movs	r1, #4
 8020e12:	4604      	mov	r4, r0
 8020e14:	f00b f897 	bl	802bf46 <_ZdlPvj>
 8020e18:	4620      	mov	r0, r4
 8020e1a:	bd10      	pop	{r4, pc}

08020e1c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020e1c:	b510      	push	{r4, lr}
 8020e1e:	2104      	movs	r1, #4
 8020e20:	4604      	mov	r4, r0
 8020e22:	f00b f890 	bl	802bf46 <_ZdlPvj>
 8020e26:	4620      	mov	r0, r4
 8020e28:	bd10      	pop	{r4, pc}

08020e2a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020e2a:	b510      	push	{r4, lr}
 8020e2c:	2104      	movs	r1, #4
 8020e2e:	4604      	mov	r4, r0
 8020e30:	f00b f889 	bl	802bf46 <_ZdlPvj>
 8020e34:	4620      	mov	r0, r4
 8020e36:	bd10      	pop	{r4, pc}

08020e38 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8020e38:	b510      	push	{r4, lr}
 8020e3a:	2104      	movs	r1, #4
 8020e3c:	4604      	mov	r4, r0
 8020e3e:	f00b f882 	bl	802bf46 <_ZdlPvj>
 8020e42:	4620      	mov	r0, r4
 8020e44:	bd10      	pop	{r4, pc}

08020e46 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8020e46:	b510      	push	{r4, lr}
 8020e48:	2104      	movs	r1, #4
 8020e4a:	4604      	mov	r4, r0
 8020e4c:	f00b f87b 	bl	802bf46 <_ZdlPvj>
 8020e50:	4620      	mov	r0, r4
 8020e52:	bd10      	pop	{r4, pc}

08020e54 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8020e54:	b510      	push	{r4, lr}
 8020e56:	2104      	movs	r1, #4
 8020e58:	4604      	mov	r4, r0
 8020e5a:	f00b f874 	bl	802bf46 <_ZdlPvj>
 8020e5e:	4620      	mov	r0, r4
 8020e60:	bd10      	pop	{r4, pc}

08020e62 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8020e62:	b510      	push	{r4, lr}
 8020e64:	2104      	movs	r1, #4
 8020e66:	4604      	mov	r4, r0
 8020e68:	f00b f86d 	bl	802bf46 <_ZdlPvj>
 8020e6c:	4620      	mov	r0, r4
 8020e6e:	bd10      	pop	{r4, pc}

08020e70 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 8020e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e74:	b08f      	sub	sp, #60	; 0x3c
 8020e76:	461c      	mov	r4, r3
 8020e78:	9205      	str	r2, [sp, #20]
 8020e7a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8020e7e:	9100      	str	r1, [sp, #0]
 8020e80:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020e82:	9201      	str	r2, [sp, #4]
 8020e84:	2a00      	cmp	r2, #0
 8020e86:	f000 8115 	beq.w	80210b4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x244>
 8020e8a:	6820      	ldr	r0, [r4, #0]
 8020e8c:	6861      	ldr	r1, [r4, #4]
 8020e8e:	aa0a      	add	r2, sp, #40	; 0x28
 8020e90:	c203      	stmia	r2!, {r0, r1}
 8020e92:	6818      	ldr	r0, [r3, #0]
 8020e94:	6859      	ldr	r1, [r3, #4]
 8020e96:	aa0c      	add	r2, sp, #48	; 0x30
 8020e98:	c203      	stmia	r2!, {r0, r1}
 8020e9a:	a80a      	add	r0, sp, #40	; 0x28
 8020e9c:	f7fa f860 	bl	801af60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020ea0:	4621      	mov	r1, r4
 8020ea2:	a80c      	add	r0, sp, #48	; 0x30
 8020ea4:	f7fa f8a0 	bl	801afe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020ea8:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8020eac:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	; 0x2e
 8020eb0:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 8020eb4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8020eb8:	bfde      	ittt	le
 8020eba:	b2b3      	uxthle	r3, r6
 8020ebc:	f44f 6280 	movle.w	r2, #1024	; 0x400
 8020ec0:	fb92 f3f3 	sdivle	r3, r2, r3
 8020ec4:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8020ec8:	bfc8      	it	gt
 8020eca:	2301      	movgt	r3, #1
 8020ecc:	fb92 f1f3 	sdiv	r1, r2, r3
 8020ed0:	fa1f fc81 	uxth.w	ip, r1
 8020ed4:	fb0c 2413 	mls	r4, ip, r3, r2
 8020ed8:	fb14 f406 	smulbb	r4, r4, r6
 8020edc:	441d      	add	r5, r3
 8020ede:	4404      	add	r4, r0
 8020ee0:	4661      	mov	r1, ip
 8020ee2:	3d01      	subs	r5, #1
 8020ee4:	b2a4      	uxth	r4, r4
 8020ee6:	fb95 f5f3 	sdiv	r5, r5, r3
 8020eea:	b131      	cbz	r1, 8020efa <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x8a>
 8020eec:	9b05      	ldr	r3, [sp, #20]
 8020eee:	9900      	ldr	r1, [sp, #0]
 8020ef0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8020ef4:	ba1b      	rev	r3, r3
 8020ef6:	4419      	add	r1, r3
 8020ef8:	9100      	str	r1, [sp, #0]
 8020efa:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8020efe:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8020f02:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 8020f06:	4418      	add	r0, r3
 8020f08:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8020f0c:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 8020f10:	441a      	add	r2, r3
 8020f12:	4b6a      	ldr	r3, [pc, #424]	; (80210bc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 8020f14:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8020f18:	6818      	ldr	r0, [r3, #0]
 8020f1a:	6803      	ldr	r3, [r0, #0]
 8020f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020f1e:	4798      	blx	r3
 8020f20:	4967      	ldr	r1, [pc, #412]	; (80210c0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>)
 8020f22:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8020f26:	880b      	ldrh	r3, [r1, #0]
 8020f28:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8020f2c:	9109      	str	r1, [sp, #36]	; 0x24
 8020f2e:	fb03 c202 	mla	r2, r3, r2, ip
 8020f32:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020f36:	4373      	muls	r3, r6
 8020f38:	b2ad      	uxth	r5, r5
 8020f3a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020f3e:	00ad      	lsls	r5, r5, #2
 8020f40:	9306      	str	r3, [sp, #24]
 8020f42:	1d2b      	adds	r3, r5, #4
 8020f44:	9307      	str	r3, [sp, #28]
 8020f46:	9b01      	ldr	r3, [sp, #4]
 8020f48:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8020f4c:	9103      	str	r1, [sp, #12]
 8020f4e:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8020f52:	2c00      	cmp	r4, #0
 8020f54:	bf0c      	ite	eq
 8020f56:	46c6      	moveq	lr, r8
 8020f58:	f04f 0e00 	movne.w	lr, #0
 8020f5c:	2300      	movs	r3, #0
 8020f5e:	b292      	uxth	r2, r2
 8020f60:	fa1f fe8e 	uxth.w	lr, lr
 8020f64:	9302      	str	r3, [sp, #8]
 8020f66:	9204      	str	r2, [sp, #16]
 8020f68:	9a06      	ldr	r2, [sp, #24]
 8020f6a:	4282      	cmp	r2, r0
 8020f6c:	f240 809d 	bls.w	80210aa <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x23a>
 8020f70:	b963      	cbnz	r3, 8020f8c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11c>
 8020f72:	9b00      	ldr	r3, [sp, #0]
 8020f74:	781a      	ldrb	r2, [r3, #0]
 8020f76:	0993      	lsrs	r3, r2, #6
 8020f78:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8020f7c:	9202      	str	r2, [sp, #8]
 8020f7e:	1e5a      	subs	r2, r3, #1
 8020f80:	2a02      	cmp	r2, #2
 8020f82:	d815      	bhi.n	8020fb0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x140>
 8020f84:	9a00      	ldr	r2, [sp, #0]
 8020f86:	3201      	adds	r2, #1
 8020f88:	9200      	str	r2, [sp, #0]
 8020f8a:	b29b      	uxth	r3, r3
 8020f8c:	b1b4      	cbz	r4, 8020fbc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x14c>
 8020f8e:	429c      	cmp	r4, r3
 8020f90:	bf95      	itete	ls
 8020f92:	1b1c      	subls	r4, r3, r4
 8020f94:	1ae4      	subhi	r4, r4, r3
 8020f96:	fa1f fa84 	uxthls.w	sl, r4
 8020f9a:	b2a4      	uxthhi	r4, r4
 8020f9c:	bf87      	ittee	hi
 8020f9e:	4671      	movhi	r1, lr
 8020fa0:	f04f 0a00 	movhi.w	sl, #0
 8020fa4:	fa1f f188 	uxthls.w	r1, r8
 8020fa8:	2400      	movls	r4, #0
 8020faa:	4653      	mov	r3, sl
 8020fac:	468e      	mov	lr, r1
 8020fae:	e7db      	b.n	8020f68 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xf8>
 8020fb0:	9a00      	ldr	r2, [sp, #0]
 8020fb2:	9b00      	ldr	r3, [sp, #0]
 8020fb4:	3202      	adds	r2, #2
 8020fb6:	785b      	ldrb	r3, [r3, #1]
 8020fb8:	9200      	str	r2, [sp, #0]
 8020fba:	e7e7      	b.n	8020f8c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11c>
 8020fbc:	2202      	movs	r2, #2
 8020fbe:	4615      	mov	r5, r2
 8020fc0:	9907      	ldr	r1, [sp, #28]
 8020fc2:	9a02      	ldr	r2, [sp, #8]
 8020fc4:	fb15 1202 	smlabb	r2, r5, r2, r1
 8020fc8:	9905      	ldr	r1, [sp, #20]
 8020fca:	4573      	cmp	r3, lr
 8020fcc:	f831 c002 	ldrh.w	ip, [r1, r2]
 8020fd0:	9a01      	ldr	r2, [sp, #4]
 8020fd2:	bf2b      	itete	cs
 8020fd4:	eba3 0a0e 	subcs.w	sl, r3, lr
 8020fd8:	ebae 0103 	subcc.w	r1, lr, r3
 8020fdc:	46f1      	movcs	r9, lr
 8020fde:	4699      	movcc	r9, r3
 8020fe0:	bf27      	ittee	cs
 8020fe2:	fa1f fa8a 	uxthcs.w	sl, sl
 8020fe6:	4621      	movcs	r1, r4
 8020fe8:	b289      	uxthcc	r1, r1
 8020fea:	46a2      	movcc	sl, r4
 8020fec:	2aff      	cmp	r2, #255	; 0xff
 8020fee:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8020ff2:	d105      	bne.n	8021000 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x190>
 8020ff4:	4481      	add	r9, r0
 8020ff6:	4581      	cmp	r9, r0
 8020ff8:	d045      	beq.n	8021086 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x216>
 8020ffa:	f820 cb02 	strh.w	ip, [r0], #2
 8020ffe:	e7fa      	b.n	8020ff6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x186>
 8021000:	9d03      	ldr	r5, [sp, #12]
 8021002:	ea4f 222c 	mov.w	r2, ip, asr #8
 8021006:	ea4f 0bec 	mov.w	fp, ip, asr #3
 802100a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802100e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021012:	436a      	muls	r2, r5
 8021014:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8021018:	fa5f fc8c 	uxtb.w	ip, ip
 802101c:	9208      	str	r2, [sp, #32]
 802101e:	fb0b fb05 	mul.w	fp, fp, r5
 8021022:	fb0c fc05 	mul.w	ip, ip, r5
 8021026:	4481      	add	r9, r0
 8021028:	4581      	cmp	r9, r0
 802102a:	d02c      	beq.n	8021086 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x216>
 802102c:	8802      	ldrh	r2, [r0, #0]
 802102e:	9d04      	ldr	r5, [sp, #16]
 8021030:	9f04      	ldr	r7, [sp, #16]
 8021032:	1216      	asrs	r6, r2, #8
 8021034:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8021038:	fb16 f605 	smulbb	r6, r6, r5
 802103c:	9d08      	ldr	r5, [sp, #32]
 802103e:	442e      	add	r6, r5
 8021040:	10d5      	asrs	r5, r2, #3
 8021042:	00d2      	lsls	r2, r2, #3
 8021044:	b2d2      	uxtb	r2, r2
 8021046:	fb12 f207 	smulbb	r2, r2, r7
 802104a:	b2b6      	uxth	r6, r6
 802104c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8021050:	4462      	add	r2, ip
 8021052:	fb15 f507 	smulbb	r5, r5, r7
 8021056:	b292      	uxth	r2, r2
 8021058:	1c77      	adds	r7, r6, #1
 802105a:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 802105e:	1c57      	adds	r7, r2, #1
 8021060:	445d      	add	r5, fp
 8021062:	eb07 2212 	add.w	r2, r7, r2, lsr #8
 8021066:	b2ad      	uxth	r5, r5
 8021068:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802106c:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8021070:	4316      	orrs	r6, r2
 8021072:	1c6a      	adds	r2, r5, #1
 8021074:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8021078:	096d      	lsrs	r5, r5, #5
 802107a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802107e:	432e      	orrs	r6, r5
 8021080:	f820 6b02 	strh.w	r6, [r0], #2
 8021084:	e7d0      	b.n	8021028 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1b8>
 8021086:	4573      	cmp	r3, lr
 8021088:	d38f      	bcc.n	8020faa <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13a>
 802108a:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 802108e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021090:	fa1f f188 	uxth.w	r1, r8
 8021094:	1a64      	subs	r4, r4, r1
 8021096:	881b      	ldrh	r3, [r3, #0]
 8021098:	b2a4      	uxth	r4, r4
 802109a:	2c00      	cmp	r4, #0
 802109c:	eba3 0308 	sub.w	r3, r3, r8
 80210a0:	bf18      	it	ne
 80210a2:	2100      	movne	r1, #0
 80210a4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80210a8:	e77f      	b.n	8020faa <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13a>
 80210aa:	4b04      	ldr	r3, [pc, #16]	; (80210bc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 80210ac:	6818      	ldr	r0, [r3, #0]
 80210ae:	6803      	ldr	r3, [r0, #0]
 80210b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80210b2:	4798      	blx	r3
 80210b4:	b00f      	add	sp, #60	; 0x3c
 80210b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210ba:	bf00      	nop
 80210bc:	2000af48 	.word	0x2000af48
 80210c0:	2000af42 	.word	0x2000af42

080210c4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 80210c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80210c8:	b09f      	sub	sp, #124	; 0x7c
 80210ca:	e9cd 1213 	strd	r1, r2, [sp, #76]	; 0x4c
 80210ce:	f89d 20a4 	ldrb.w	r2, [sp, #164]	; 0xa4
 80210d2:	9209      	str	r2, [sp, #36]	; 0x24
 80210d4:	461d      	mov	r5, r3
 80210d6:	4604      	mov	r4, r0
 80210d8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80210da:	2a00      	cmp	r2, #0
 80210dc:	f000 81eb 	beq.w	80214b6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3f2>
 80210e0:	6828      	ldr	r0, [r5, #0]
 80210e2:	6869      	ldr	r1, [r5, #4]
 80210e4:	aa1a      	add	r2, sp, #104	; 0x68
 80210e6:	c203      	stmia	r2!, {r0, r1}
 80210e8:	6818      	ldr	r0, [r3, #0]
 80210ea:	6859      	ldr	r1, [r3, #4]
 80210ec:	aa1c      	add	r2, sp, #112	; 0x70
 80210ee:	c203      	stmia	r2!, {r0, r1}
 80210f0:	a81a      	add	r0, sp, #104	; 0x68
 80210f2:	f7f9 ff35 	bl	801af60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80210f6:	4629      	mov	r1, r5
 80210f8:	a81c      	add	r0, sp, #112	; 0x70
 80210fa:	f7f9 ff75 	bl	801afe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80210fe:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 8021102:	f9bd 806e 	ldrsh.w	r8, [sp, #110]	; 0x6e
 8021106:	f9bd 6076 	ldrsh.w	r6, [sp, #118]	; 0x76
 802110a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802110e:	bfd7      	itett	le
 8021110:	b29a      	uxthle	r2, r3
 8021112:	2201      	movgt	r2, #1
 8021114:	f44f 6180 	movle.w	r1, #1024	; 0x400
 8021118:	fb91 f2f2 	sdivle	r2, r1, r2
 802111c:	9202      	str	r2, [sp, #8]
 802111e:	9802      	ldr	r0, [sp, #8]
 8021120:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
 8021124:	fb92 f0f0 	sdiv	r0, r2, r0
 8021128:	b280      	uxth	r0, r0
 802112a:	9010      	str	r0, [sp, #64]	; 0x40
 802112c:	9902      	ldr	r1, [sp, #8]
 802112e:	9802      	ldr	r0, [sp, #8]
 8021130:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021132:	4488      	add	r8, r1
 8021134:	fb05 2510 	mls	r5, r5, r0, r2
 8021138:	fb15 f503 	smulbb	r5, r5, r3
 802113c:	f108 38ff 	add.w	r8, r8, #4294967295
 8021140:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8021144:	fb98 f8f1 	sdiv	r8, r8, r1
 8021148:	f8bd 1070 	ldrh.w	r1, [sp, #112]	; 0x70
 802114c:	440d      	add	r5, r1
 802114e:	4419      	add	r1, r3
 8021150:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 8021154:	f8ad 1070 	strh.w	r1, [sp, #112]	; 0x70
 8021158:	441a      	add	r2, r3
 802115a:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 802115e:	9304      	str	r3, [sp, #16]
 8021160:	4b95      	ldr	r3, [pc, #596]	; (80213b8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f4>)
 8021162:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
 8021166:	6818      	ldr	r0, [r3, #0]
 8021168:	6803      	ldr	r3, [r0, #0]
 802116a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802116c:	4798      	blx	r3
 802116e:	4b93      	ldr	r3, [pc, #588]	; (80213bc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f8>)
 8021170:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	; 0x72
 8021174:	881a      	ldrh	r2, [r3, #0]
 8021176:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 802117a:	9318      	str	r3, [sp, #96]	; 0x60
 802117c:	fb02 7101 	mla	r1, r2, r1, r7
 8021180:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8021184:	4356      	muls	r6, r2
 8021186:	eb00 0246 	add.w	r2, r0, r6, lsl #1
 802118a:	f108 0801 	add.w	r8, r8, #1
 802118e:	920a      	str	r2, [sp, #40]	; 0x28
 8021190:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021192:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8021196:	930f      	str	r3, [sp, #60]	; 0x3c
 8021198:	fa1f f888 	uxth.w	r8, r8
 802119c:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 80211a0:	f108 0204 	add.w	r2, r8, #4
 80211a4:	9211      	str	r2, [sp, #68]	; 0x44
 80211a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80211a8:	4b85      	ldr	r3, [pc, #532]	; (80213c0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2fc>)
 80211aa:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80211ae:	b2ad      	uxth	r5, r5
 80211b0:	9215      	str	r2, [sp, #84]	; 0x54
 80211b2:	2d00      	cmp	r5, #0
 80211b4:	9a04      	ldr	r2, [sp, #16]
 80211b6:	f04f 0100 	mov.w	r1, #0
 80211ba:	bf18      	it	ne
 80211bc:	2200      	movne	r2, #0
 80211be:	1b1b      	subs	r3, r3, r4
 80211c0:	b292      	uxth	r2, r2
 80211c2:	910d      	str	r1, [sp, #52]	; 0x34
 80211c4:	9319      	str	r3, [sp, #100]	; 0x64
 80211c6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80211c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80211ca:	fa11 f383 	uxtah	r3, r1, r3
 80211ce:	9914      	ldr	r1, [sp, #80]	; 0x50
 80211d0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80211d4:	3304      	adds	r3, #4
 80211d6:	9306      	str	r3, [sp, #24]
 80211d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80211da:	4283      	cmp	r3, r0
 80211dc:	f240 8166 	bls.w	80214ac <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3e8>
 80211e0:	9902      	ldr	r1, [sp, #8]
 80211e2:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 80211e6:	fbb5 f3f3 	udiv	r3, r5, r3
 80211ea:	1acb      	subs	r3, r1, r3
 80211ec:	b29b      	uxth	r3, r3
 80211ee:	9316      	str	r3, [sp, #88]	; 0x58
 80211f0:	9b06      	ldr	r3, [sp, #24]
 80211f2:	9e06      	ldr	r6, [sp, #24]
 80211f4:	7859      	ldrb	r1, [r3, #1]
 80211f6:	789b      	ldrb	r3, [r3, #2]
 80211f8:	7836      	ldrb	r6, [r6, #0]
 80211fa:	9612      	str	r6, [sp, #72]	; 0x48
 80211fc:	021b      	lsls	r3, r3, #8
 80211fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8021202:	9906      	ldr	r1, [sp, #24]
 8021204:	78c9      	ldrb	r1, [r1, #3]
 8021206:	430b      	orrs	r3, r1
 8021208:	9913      	ldr	r1, [sp, #76]	; 0x4c
 802120a:	3601      	adds	r6, #1
 802120c:	4419      	add	r1, r3
 802120e:	9605      	str	r6, [sp, #20]
 8021210:	1c4e      	adds	r6, r1, #1
 8021212:	9603      	str	r6, [sp, #12]
 8021214:	7849      	ldrb	r1, [r1, #1]
 8021216:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8021218:	0209      	lsls	r1, r1, #8
 802121a:	5cf3      	ldrb	r3, [r6, r3]
 802121c:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
 8021220:	4319      	orrs	r1, r3
 8021222:	b28b      	uxth	r3, r1
 8021224:	930c      	str	r3, [sp, #48]	; 0x30
 8021226:	2300      	movs	r3, #0
 8021228:	f04f 0a01 	mov.w	sl, #1
 802122c:	9307      	str	r3, [sp, #28]
 802122e:	469c      	mov	ip, r3
 8021230:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8021234:	f884 1804 	strb.w	r1, [r4, #2052]	; 0x804
 8021238:	46d3      	mov	fp, sl
 802123a:	4657      	mov	r7, sl
 802123c:	930e      	str	r3, [sp, #56]	; 0x38
 802123e:	2d00      	cmp	r5, #0
 8021240:	d07e      	beq.n	8021340 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x27c>
 8021242:	42af      	cmp	r7, r5
 8021244:	d26e      	bcs.n	8021324 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x260>
 8021246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021248:	9201      	str	r2, [sp, #4]
 802124a:	1bed      	subs	r5, r5, r7
 802124c:	4283      	cmp	r3, r0
 802124e:	b2ad      	uxth	r5, r5
 8021250:	d802      	bhi.n	8021258 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x194>
 8021252:	e073      	b.n	802133c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x278>
 8021254:	2b00      	cmp	r3, #0
 8021256:	d15f      	bne.n	8021318 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x254>
 8021258:	9b03      	ldr	r3, [sp, #12]
 802125a:	785b      	ldrb	r3, [r3, #1]
 802125c:	f1cb 0207 	rsb	r2, fp, #7
 8021260:	4093      	lsls	r3, r2
 8021262:	005b      	lsls	r3, r3, #1
 8021264:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 8021268:	9b03      	ldr	r3, [sp, #12]
 802126a:	781b      	ldrb	r3, [r3, #0]
 802126c:	fa43 f30b 	asr.w	r3, r3, fp
 8021270:	b2db      	uxtb	r3, r3
 8021272:	4313      	orrs	r3, r2
 8021274:	f10b 0201 	add.w	r2, fp, #1
 8021278:	fa5f fb82 	uxtb.w	fp, r2
 802127c:	9a03      	ldr	r2, [sp, #12]
 802127e:	f1bb 0f08 	cmp.w	fp, #8
 8021282:	bf15      	itete	ne
 8021284:	3201      	addne	r2, #1
 8021286:	3202      	addeq	r2, #2
 8021288:	9203      	strne	r2, [sp, #12]
 802128a:	9203      	streq	r2, [sp, #12]
 802128c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802128e:	b29f      	uxth	r7, r3
 8021290:	bf08      	it	eq
 8021292:	f04f 0b00 	moveq.w	fp, #0
 8021296:	42ba      	cmp	r2, r7
 8021298:	d309      	bcc.n	80212ae <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ea>
 802129a:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
 802129e:	2301      	movs	r3, #1
 80212a0:	9a05      	ldr	r2, [sp, #20]
 80212a2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80212a6:	d30e      	bcc.n	80212c6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x202>
 80212a8:	469a      	mov	sl, r3
 80212aa:	2600      	movs	r6, #0
 80212ac:	e035      	b.n	802131a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x256>
 80212ae:	9b05      	ldr	r3, [sp, #20]
 80212b0:	429f      	cmp	r7, r3
 80212b2:	d318      	bcc.n	80212e6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x222>
 80212b4:	eb04 030a 	add.w	r3, r4, sl
 80212b8:	f894 2804 	ldrb.w	r2, [r4, #2052]	; 0x804
 80212bc:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
 80212c0:	f10a 0301 	add.w	r3, sl, #1
 80212c4:	b29b      	uxth	r3, r3
 80212c6:	9a05      	ldr	r2, [sp, #20]
 80212c8:	f894 6804 	ldrb.w	r6, [r4, #2052]	; 0x804
 80212cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80212ce:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80212d2:	7116      	strb	r6, [r2, #4]
 80212d4:	f10a 0601 	add.w	r6, sl, #1
 80212d8:	80d1      	strh	r1, [r2, #6]
 80212da:	7156      	strb	r6, [r2, #5]
 80212dc:	9a05      	ldr	r2, [sp, #20]
 80212de:	3201      	adds	r2, #1
 80212e0:	b292      	uxth	r2, r2
 80212e2:	9205      	str	r2, [sp, #20]
 80212e4:	e7e0      	b.n	80212a8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e4>
 80212e6:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 80212ea:	463a      	mov	r2, r7
 80212ec:	795b      	ldrb	r3, [r3, #5]
 80212ee:	f603 0604 	addw	r6, r3, #2052	; 0x804
 80212f2:	4426      	add	r6, r4
 80212f4:	9919      	ldr	r1, [sp, #100]	; 0x64
 80212f6:	eb01 0c06 	add.w	ip, r1, r6
 80212fa:	f1bc 0f00 	cmp.w	ip, #0
 80212fe:	dd07      	ble.n	8021310 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>
 8021300:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8021304:	f892 c004 	ldrb.w	ip, [r2, #4]
 8021308:	f806 cd01 	strb.w	ip, [r6, #-1]!
 802130c:	88d2      	ldrh	r2, [r2, #6]
 802130e:	e7f1      	b.n	80212f4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x230>
 8021310:	f884 2804 	strb.w	r2, [r4, #2052]	; 0x804
 8021314:	b29b      	uxth	r3, r3
 8021316:	e7c3      	b.n	80212a0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1dc>
 8021318:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802131a:	970c      	str	r7, [sp, #48]	; 0x30
 802131c:	9a01      	ldr	r2, [sp, #4]
 802131e:	46b4      	mov	ip, r6
 8021320:	461f      	mov	r7, r3
 8021322:	e78c      	b.n	802123e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x17a>
 8021324:	1b7b      	subs	r3, r7, r5
 8021326:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 802132a:	9201      	str	r2, [sp, #4]
 802132c:	eb0c 0605 	add.w	r6, ip, r5
 8021330:	b29b      	uxth	r3, r3
 8021332:	b2b6      	uxth	r6, r6
 8021334:	2500      	movs	r5, #0
 8021336:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021338:	4282      	cmp	r2, r0
 802133a:	d88b      	bhi.n	8021254 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x190>
 802133c:	9a01      	ldr	r2, [sp, #4]
 802133e:	e74b      	b.n	80211d8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x114>
 8021340:	4297      	cmp	r7, r2
 8021342:	d332      	bcc.n	80213aa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2e6>
 8021344:	1abb      	subs	r3, r7, r2
 8021346:	b29b      	uxth	r3, r3
 8021348:	9208      	str	r2, [sp, #32]
 802134a:	9501      	str	r5, [sp, #4]
 802134c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802134e:	29ff      	cmp	r1, #255	; 0xff
 8021350:	9908      	ldr	r1, [sp, #32]
 8021352:	eb0c 0601 	add.w	r6, ip, r1
 8021356:	d135      	bne.n	80213c4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x300>
 8021358:	f1a0 0e02 	sub.w	lr, r0, #2
 802135c:	b2b6      	uxth	r6, r6
 802135e:	45b4      	cmp	ip, r6
 8021360:	f040 808c 	bne.w	802147c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3b8>
 8021364:	9908      	ldr	r1, [sp, #32]
 8021366:	4297      	cmp	r7, r2
 8021368:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 802136c:	d3e2      	bcc.n	8021334 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x270>
 802136e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8021370:	9904      	ldr	r1, [sp, #16]
 8021372:	8812      	ldrh	r2, [r2, #0]
 8021374:	1a52      	subs	r2, r2, r1
 8021376:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 802137a:	9a07      	ldr	r2, [sp, #28]
 802137c:	9916      	ldr	r1, [sp, #88]	; 0x58
 802137e:	3201      	adds	r2, #1
 8021380:	428a      	cmp	r2, r1
 8021382:	9207      	str	r2, [sp, #28]
 8021384:	f040 8087 	bne.w	8021496 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3d2>
 8021388:	f8bd 5070 	ldrh.w	r5, [sp, #112]	; 0x70
 802138c:	f8bd 7068 	ldrh.w	r7, [sp, #104]	; 0x68
 8021390:	9b04      	ldr	r3, [sp, #16]
 8021392:	1bed      	subs	r5, r5, r7
 8021394:	b2ad      	uxth	r5, r5
 8021396:	2d00      	cmp	r5, #0
 8021398:	bf08      	it	eq
 802139a:	461a      	moveq	r2, r3
 802139c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802139e:	bf18      	it	ne
 80213a0:	2200      	movne	r2, #0
 80213a2:	3301      	adds	r3, #1
 80213a4:	930d      	str	r3, [sp, #52]	; 0x34
 80213a6:	b292      	uxth	r2, r2
 80213a8:	e70d      	b.n	80211c6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x102>
 80213aa:	1bd1      	subs	r1, r2, r7
 80213ac:	b28b      	uxth	r3, r1
 80213ae:	9301      	str	r3, [sp, #4]
 80213b0:	9708      	str	r7, [sp, #32]
 80213b2:	462b      	mov	r3, r5
 80213b4:	e7ca      	b.n	802134c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x288>
 80213b6:	bf00      	nop
 80213b8:	2000af48 	.word	0x2000af48
 80213bc:	2000af42 	.word	0x2000af42
 80213c0:	fffff7fb 	.word	0xfffff7fb
 80213c4:	b2b6      	uxth	r6, r6
 80213c6:	900b      	str	r0, [sp, #44]	; 0x2c
 80213c8:	45b4      	cmp	ip, r6
 80213ca:	d0cb      	beq.n	8021364 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2a0>
 80213cc:	f10c 0101 	add.w	r1, ip, #1
 80213d0:	44a4      	add	ip, r4
 80213d2:	9117      	str	r1, [sp, #92]	; 0x5c
 80213d4:	f89c 5804 	ldrb.w	r5, [ip, #2052]	; 0x804
 80213d8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80213da:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 80213de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80213e0:	f8b1 c000 	ldrh.w	ip, [r1]
 80213e4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80213e6:	ea4f 2e2c 	mov.w	lr, ip, asr #8
 80213ea:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80213ee:	fb1e fe01 	smulbb	lr, lr, r1
 80213f2:	ea4f 2825 	mov.w	r8, r5, asr #8
 80213f6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80213f8:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 80213fc:	fb08 e801 	mla	r8, r8, r1, lr
 8021400:	ea4f 09ec 	mov.w	r9, ip, asr #3
 8021404:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021406:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 802140a:	fb19 f901 	smulbb	r9, r9, r1
 802140e:	ea4f 0ee5 	mov.w	lr, r5, asr #3
 8021412:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8021414:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8021418:	fb0e 9e01 	mla	lr, lr, r1, r9
 802141c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021420:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021422:	fa5f fc8c 	uxtb.w	ip, ip
 8021426:	fb1c fc01 	smulbb	ip, ip, r1
 802142a:	00ed      	lsls	r5, r5, #3
 802142c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802142e:	b2ed      	uxtb	r5, r5
 8021430:	fb05 c501 	mla	r5, r5, r1, ip
 8021434:	fa1f f888 	uxth.w	r8, r8
 8021438:	fa1f fe8e 	uxth.w	lr, lr
 802143c:	b2ad      	uxth	r5, r5
 802143e:	f108 0c01 	add.w	ip, r8, #1
 8021442:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8021446:	f10e 0901 	add.w	r9, lr, #1
 802144a:	f105 0c01 	add.w	ip, r5, #1
 802144e:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 8021452:	eb09 291e 	add.w	r9, r9, lr, lsr #8
 8021456:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802145a:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 802145e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8021462:	ea4c 0808 	orr.w	r8, ip, r8
 8021466:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8021468:	f8bd c05c 	ldrh.w	ip, [sp, #92]	; 0x5c
 802146c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021470:	ea48 0809 	orr.w	r8, r8, r9
 8021474:	f821 8b02 	strh.w	r8, [r1], #2
 8021478:	910b      	str	r1, [sp, #44]	; 0x2c
 802147a:	e7a5      	b.n	80213c8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x304>
 802147c:	f10c 0801 	add.w	r8, ip, #1
 8021480:	44a4      	add	ip, r4
 8021482:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021484:	f89c 5804 	ldrb.w	r5, [ip, #2052]	; 0x804
 8021488:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 802148c:	f82e 5f02 	strh.w	r5, [lr, #2]!
 8021490:	fa1f fc88 	uxth.w	ip, r8
 8021494:	e763      	b.n	802135e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x29a>
 8021496:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 802149a:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 802149e:	1aad      	subs	r5, r5, r2
 80214a0:	b2ad      	uxth	r5, r5
 80214a2:	2d00      	cmp	r5, #0
 80214a4:	bf18      	it	ne
 80214a6:	2200      	movne	r2, #0
 80214a8:	9201      	str	r2, [sp, #4]
 80214aa:	e744      	b.n	8021336 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x272>
 80214ac:	4b03      	ldr	r3, [pc, #12]	; (80214bc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3f8>)
 80214ae:	6818      	ldr	r0, [r3, #0]
 80214b0:	6803      	ldr	r3, [r0, #0]
 80214b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80214b4:	4798      	blx	r3
 80214b6:	b01f      	add	sp, #124	; 0x7c
 80214b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80214bc:	2000af48 	.word	0x2000af48

080214c0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 80214c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80214c4:	b08f      	sub	sp, #60	; 0x3c
 80214c6:	461c      	mov	r4, r3
 80214c8:	9203      	str	r2, [sp, #12]
 80214ca:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80214ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80214d0:	9202      	str	r2, [sp, #8]
 80214d2:	460f      	mov	r7, r1
 80214d4:	2a00      	cmp	r2, #0
 80214d6:	f000 8128 	beq.w	802172a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 80214da:	6820      	ldr	r0, [r4, #0]
 80214dc:	6861      	ldr	r1, [r4, #4]
 80214de:	aa0a      	add	r2, sp, #40	; 0x28
 80214e0:	c203      	stmia	r2!, {r0, r1}
 80214e2:	6818      	ldr	r0, [r3, #0]
 80214e4:	6859      	ldr	r1, [r3, #4]
 80214e6:	aa0c      	add	r2, sp, #48	; 0x30
 80214e8:	c203      	stmia	r2!, {r0, r1}
 80214ea:	a80a      	add	r0, sp, #40	; 0x28
 80214ec:	f7f9 fd38 	bl	801af60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80214f0:	4621      	mov	r1, r4
 80214f2:	a80c      	add	r0, sp, #48	; 0x30
 80214f4:	f7f9 fd78 	bl	801afe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80214f8:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 80214fc:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	; 0x2e
 8021500:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 8021504:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8021508:	bfde      	ittt	le
 802150a:	b2b3      	uxthle	r3, r6
 802150c:	f44f 6280 	movle.w	r2, #1024	; 0x400
 8021510:	fb92 f3f3 	sdivle	r3, r2, r3
 8021514:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8021518:	bfc8      	it	gt
 802151a:	2301      	movgt	r3, #1
 802151c:	fb92 f1f3 	sdiv	r1, r2, r3
 8021520:	fa1f fc81 	uxth.w	ip, r1
 8021524:	fb0c 2413 	mls	r4, ip, r3, r2
 8021528:	fb14 f406 	smulbb	r4, r4, r6
 802152c:	441d      	add	r5, r3
 802152e:	4404      	add	r4, r0
 8021530:	4661      	mov	r1, ip
 8021532:	3d01      	subs	r5, #1
 8021534:	b2a4      	uxth	r4, r4
 8021536:	fb95 f5f3 	sdiv	r5, r5, r3
 802153a:	b121      	cbz	r1, 8021546 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x86>
 802153c:	9b03      	ldr	r3, [sp, #12]
 802153e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8021542:	ba1b      	rev	r3, r3
 8021544:	441f      	add	r7, r3
 8021546:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 802154a:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 802154e:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 8021552:	4418      	add	r0, r3
 8021554:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8021558:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 802155c:	441a      	add	r2, r3
 802155e:	4b74      	ldr	r3, [pc, #464]	; (8021730 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x270>)
 8021560:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8021564:	6818      	ldr	r0, [r3, #0]
 8021566:	6803      	ldr	r3, [r0, #0]
 8021568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802156a:	4798      	blx	r3
 802156c:	4a71      	ldr	r2, [pc, #452]	; (8021734 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x274>)
 802156e:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 8021572:	8813      	ldrh	r3, [r2, #0]
 8021574:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8021578:	9209      	str	r2, [sp, #36]	; 0x24
 802157a:	fb03 c101 	mla	r1, r3, r1, ip
 802157e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8021582:	4373      	muls	r3, r6
 8021584:	b2ad      	uxth	r5, r5
 8021586:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 802158a:	00ad      	lsls	r5, r5, #2
 802158c:	2c00      	cmp	r4, #0
 802158e:	9304      	str	r3, [sp, #16]
 8021590:	f105 0304 	add.w	r3, r5, #4
 8021594:	9305      	str	r3, [sp, #20]
 8021596:	bf0c      	ite	eq
 8021598:	46c8      	moveq	r8, r9
 802159a:	f04f 0800 	movne.w	r8, #0
 802159e:	2300      	movs	r3, #0
 80215a0:	fa1f f888 	uxth.w	r8, r8
 80215a4:	9301      	str	r3, [sp, #4]
 80215a6:	9a04      	ldr	r2, [sp, #16]
 80215a8:	4282      	cmp	r2, r0
 80215aa:	f240 80b9 	bls.w	8021720 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 80215ae:	b95b      	cbnz	r3, 80215c8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x108>
 80215b0:	783a      	ldrb	r2, [r7, #0]
 80215b2:	0993      	lsrs	r3, r2, #6
 80215b4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80215b8:	9201      	str	r2, [sp, #4]
 80215ba:	1e5a      	subs	r2, r3, #1
 80215bc:	2a02      	cmp	r2, #2
 80215be:	bf8d      	iteet	hi
 80215c0:	787b      	ldrbhi	r3, [r7, #1]
 80215c2:	3701      	addls	r7, #1
 80215c4:	b29b      	uxthls	r3, r3
 80215c6:	3702      	addhi	r7, #2
 80215c8:	b184      	cbz	r4, 80215ec <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 80215ca:	429c      	cmp	r4, r3
 80215cc:	bf95      	itete	ls
 80215ce:	1b1c      	subls	r4, r3, r4
 80215d0:	1ae4      	subhi	r4, r4, r3
 80215d2:	fa1f fa84 	uxthls.w	sl, r4
 80215d6:	b2a4      	uxthhi	r4, r4
 80215d8:	bf87      	ittee	hi
 80215da:	46c4      	movhi	ip, r8
 80215dc:	f04f 0a00 	movhi.w	sl, #0
 80215e0:	fa1f fc89 	uxthls.w	ip, r9
 80215e4:	2400      	movls	r4, #0
 80215e6:	4653      	mov	r3, sl
 80215e8:	46e0      	mov	r8, ip
 80215ea:	e7dc      	b.n	80215a6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xe6>
 80215ec:	2204      	movs	r2, #4
 80215ee:	4615      	mov	r5, r2
 80215f0:	9905      	ldr	r1, [sp, #20]
 80215f2:	9a01      	ldr	r2, [sp, #4]
 80215f4:	fb15 1202 	smlabb	r2, r5, r2, r1
 80215f8:	9903      	ldr	r1, [sp, #12]
 80215fa:	588a      	ldr	r2, [r1, r2]
 80215fc:	4543      	cmp	r3, r8
 80215fe:	bf27      	ittee	cs
 8021600:	eba3 0a08 	subcs.w	sl, r3, r8
 8021604:	46c6      	movcs	lr, r8
 8021606:	eba8 0c03 	subcc.w	ip, r8, r3
 802160a:	469e      	movcc	lr, r3
 802160c:	ea4f 6112 	mov.w	r1, r2, lsr #24
 8021610:	bf27      	ittee	cs
 8021612:	fa1f fa8a 	uxthcs.w	sl, sl
 8021616:	46a4      	movcs	ip, r4
 8021618:	fa1f fc8c 	uxthcc.w	ip, ip
 802161c:	46a2      	movcc	sl, r4
 802161e:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8021622:	2900      	cmp	r1, #0
 8021624:	d066      	beq.n	80216f4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x234>
 8021626:	29ff      	cmp	r1, #255	; 0xff
 8021628:	ea4f 2612 	mov.w	r6, r2, lsr #8
 802162c:	d114      	bne.n	8021658 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x198>
 802162e:	9d02      	ldr	r5, [sp, #8]
 8021630:	2dff      	cmp	r5, #255	; 0xff
 8021632:	d111      	bne.n	8021658 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x198>
 8021634:	0951      	lsrs	r1, r2, #5
 8021636:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 802163a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802163e:	f026 0607 	bic.w	r6, r6, #7
 8021642:	430e      	orrs	r6, r1
 8021644:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8021648:	4316      	orrs	r6, r2
 802164a:	b2b6      	uxth	r6, r6
 802164c:	4486      	add	lr, r0
 802164e:	4586      	cmp	lr, r0
 8021650:	d051      	beq.n	80216f6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 8021652:	f820 6b02 	strh.w	r6, [r0], #2
 8021656:	e7fa      	b.n	802164e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 8021658:	9d02      	ldr	r5, [sp, #8]
 802165a:	4369      	muls	r1, r5
 802165c:	1c4d      	adds	r5, r1, #1
 802165e:	eb05 2521 	add.w	r5, r5, r1, asr #8
 8021662:	122d      	asrs	r5, r5, #8
 8021664:	ea6f 0b05 	mvn.w	fp, r5
 8021668:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802166c:	b2ad      	uxth	r5, r5
 802166e:	b2f6      	uxtb	r6, r6
 8021670:	b2d2      	uxtb	r2, r2
 8021672:	fb11 f105 	smulbb	r1, r1, r5
 8021676:	fb16 f605 	smulbb	r6, r6, r5
 802167a:	fb12 f205 	smulbb	r2, r2, r5
 802167e:	b289      	uxth	r1, r1
 8021680:	b2b6      	uxth	r6, r6
 8021682:	b292      	uxth	r2, r2
 8021684:	9106      	str	r1, [sp, #24]
 8021686:	9607      	str	r6, [sp, #28]
 8021688:	9208      	str	r2, [sp, #32]
 802168a:	4486      	add	lr, r0
 802168c:	fa5f fb8b 	uxtb.w	fp, fp
 8021690:	4586      	cmp	lr, r0
 8021692:	d030      	beq.n	80216f6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 8021694:	8802      	ldrh	r2, [r0, #0]
 8021696:	9906      	ldr	r1, [sp, #24]
 8021698:	1216      	asrs	r6, r2, #8
 802169a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802169e:	10d5      	asrs	r5, r2, #3
 80216a0:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80216a4:	fb06 160b 	mla	r6, r6, fp, r1
 80216a8:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80216ac:	9907      	ldr	r1, [sp, #28]
 80216ae:	00d2      	lsls	r2, r2, #3
 80216b0:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80216b4:	fb05 150b 	mla	r5, r5, fp, r1
 80216b8:	b2d2      	uxtb	r2, r2
 80216ba:	9908      	ldr	r1, [sp, #32]
 80216bc:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80216c0:	b2b6      	uxth	r6, r6
 80216c2:	fb02 120b 	mla	r2, r2, fp, r1
 80216c6:	b292      	uxth	r2, r2
 80216c8:	1c71      	adds	r1, r6, #1
 80216ca:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 80216ce:	1c51      	adds	r1, r2, #1
 80216d0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80216d4:	b2ad      	uxth	r5, r5
 80216d6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80216da:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80216de:	4316      	orrs	r6, r2
 80216e0:	1c6a      	adds	r2, r5, #1
 80216e2:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 80216e6:	096d      	lsrs	r5, r5, #5
 80216e8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80216ec:	432e      	orrs	r6, r5
 80216ee:	f820 6b02 	strh.w	r6, [r0], #2
 80216f2:	e7cd      	b.n	8021690 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d0>
 80216f4:	4470      	add	r0, lr
 80216f6:	4543      	cmp	r3, r8
 80216f8:	f4ff af75 	bcc.w	80215e6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x126>
 80216fc:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8021700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021702:	fa1f fc89 	uxth.w	ip, r9
 8021706:	eba4 040c 	sub.w	r4, r4, ip
 802170a:	881b      	ldrh	r3, [r3, #0]
 802170c:	b2a4      	uxth	r4, r4
 802170e:	2c00      	cmp	r4, #0
 8021710:	eba3 0309 	sub.w	r3, r3, r9
 8021714:	bf18      	it	ne
 8021716:	f04f 0c00 	movne.w	ip, #0
 802171a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802171e:	e762      	b.n	80215e6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x126>
 8021720:	4b03      	ldr	r3, [pc, #12]	; (8021730 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x270>)
 8021722:	6818      	ldr	r0, [r3, #0]
 8021724:	6803      	ldr	r3, [r0, #0]
 8021726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021728:	4798      	blx	r3
 802172a:	b00f      	add	sp, #60	; 0x3c
 802172c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021730:	2000af48 	.word	0x2000af48
 8021734:	2000af42 	.word	0x2000af42

08021738 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8021738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802173c:	b093      	sub	sp, #76	; 0x4c
 802173e:	461c      	mov	r4, r3
 8021740:	9205      	str	r2, [sp, #20]
 8021742:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8021746:	9101      	str	r1, [sp, #4]
 8021748:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802174a:	9202      	str	r2, [sp, #8]
 802174c:	2a00      	cmp	r2, #0
 802174e:	f000 812c 	beq.w	80219aa <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x272>
 8021752:	6820      	ldr	r0, [r4, #0]
 8021754:	6861      	ldr	r1, [r4, #4]
 8021756:	aa0e      	add	r2, sp, #56	; 0x38
 8021758:	c203      	stmia	r2!, {r0, r1}
 802175a:	6818      	ldr	r0, [r3, #0]
 802175c:	6859      	ldr	r1, [r3, #4]
 802175e:	aa10      	add	r2, sp, #64	; 0x40
 8021760:	c203      	stmia	r2!, {r0, r1}
 8021762:	a80e      	add	r0, sp, #56	; 0x38
 8021764:	f7f9 fbfc 	bl	801af60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021768:	4621      	mov	r1, r4
 802176a:	a810      	add	r0, sp, #64	; 0x40
 802176c:	f7f9 fc3c 	bl	801afe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021770:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 8021774:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8021778:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 802177c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8021780:	bfde      	ittt	le
 8021782:	b2b3      	uxthle	r3, r6
 8021784:	f44f 6280 	movle.w	r2, #1024	; 0x400
 8021788:	fb92 f3f3 	sdivle	r3, r2, r3
 802178c:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 8021790:	bfc8      	it	gt
 8021792:	2301      	movgt	r3, #1
 8021794:	fb92 f1f3 	sdiv	r1, r2, r3
 8021798:	fa1f fc81 	uxth.w	ip, r1
 802179c:	fb0c 2413 	mls	r4, ip, r3, r2
 80217a0:	fb14 f406 	smulbb	r4, r4, r6
 80217a4:	441d      	add	r5, r3
 80217a6:	4404      	add	r4, r0
 80217a8:	4661      	mov	r1, ip
 80217aa:	3d01      	subs	r5, #1
 80217ac:	b2a4      	uxth	r4, r4
 80217ae:	fb95 f5f3 	sdiv	r5, r5, r3
 80217b2:	b131      	cbz	r1, 80217c2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x8a>
 80217b4:	9b05      	ldr	r3, [sp, #20]
 80217b6:	9901      	ldr	r1, [sp, #4]
 80217b8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80217bc:	ba1b      	rev	r3, r3
 80217be:	4419      	add	r1, r3
 80217c0:	9101      	str	r1, [sp, #4]
 80217c2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80217c6:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 80217ca:	f9bd 6046 	ldrsh.w	r6, [sp, #70]	; 0x46
 80217ce:	4418      	add	r0, r3
 80217d0:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80217d4:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 80217d8:	441a      	add	r2, r3
 80217da:	4b75      	ldr	r3, [pc, #468]	; (80219b0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>)
 80217dc:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 80217e0:	6818      	ldr	r0, [r3, #0]
 80217e2:	6803      	ldr	r3, [r0, #0]
 80217e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80217e6:	4798      	blx	r3
 80217e8:	4972      	ldr	r1, [pc, #456]	; (80219b4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 80217ea:	f9bd c040 	ldrsh.w	ip, [sp, #64]	; 0x40
 80217ee:	880b      	ldrh	r3, [r1, #0]
 80217f0:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 80217f4:	910d      	str	r1, [sp, #52]	; 0x34
 80217f6:	fb03 c202 	mla	r2, r3, r2, ip
 80217fa:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80217fe:	4373      	muls	r3, r6
 8021800:	b2ad      	uxth	r5, r5
 8021802:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8021806:	00ad      	lsls	r5, r5, #2
 8021808:	9308      	str	r3, [sp, #32]
 802180a:	1d2b      	adds	r3, r5, #4
 802180c:	9309      	str	r3, [sp, #36]	; 0x24
 802180e:	9b02      	ldr	r3, [sp, #8]
 8021810:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8021814:	9106      	str	r1, [sp, #24]
 8021816:	43da      	mvns	r2, r3
 8021818:	2c00      	cmp	r4, #0
 802181a:	bf0c      	ite	eq
 802181c:	46dc      	moveq	ip, fp
 802181e:	f04f 0c00 	movne.w	ip, #0
 8021822:	2300      	movs	r3, #0
 8021824:	b2d2      	uxtb	r2, r2
 8021826:	fa1f fc8c 	uxth.w	ip, ip
 802182a:	9303      	str	r3, [sp, #12]
 802182c:	9207      	str	r2, [sp, #28]
 802182e:	9a08      	ldr	r2, [sp, #32]
 8021830:	4282      	cmp	r2, r0
 8021832:	f240 80b5 	bls.w	80219a0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 8021836:	b963      	cbnz	r3, 8021852 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8021838:	9b01      	ldr	r3, [sp, #4]
 802183a:	781a      	ldrb	r2, [r3, #0]
 802183c:	0993      	lsrs	r3, r2, #6
 802183e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8021842:	9203      	str	r2, [sp, #12]
 8021844:	1e5a      	subs	r2, r3, #1
 8021846:	2a02      	cmp	r2, #2
 8021848:	d815      	bhi.n	8021876 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13e>
 802184a:	9a01      	ldr	r2, [sp, #4]
 802184c:	3201      	adds	r2, #1
 802184e:	9201      	str	r2, [sp, #4]
 8021850:	b29b      	uxth	r3, r3
 8021852:	b1b4      	cbz	r4, 8021882 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14a>
 8021854:	429c      	cmp	r4, r3
 8021856:	bf95      	itete	ls
 8021858:	1b1c      	subls	r4, r3, r4
 802185a:	1ae4      	subhi	r4, r4, r3
 802185c:	fa1f f884 	uxthls.w	r8, r4
 8021860:	b2a4      	uxthhi	r4, r4
 8021862:	bf87      	ittee	hi
 8021864:	4666      	movhi	r6, ip
 8021866:	f04f 0800 	movhi.w	r8, #0
 802186a:	fa1f f68b 	uxthls.w	r6, fp
 802186e:	2400      	movls	r4, #0
 8021870:	4643      	mov	r3, r8
 8021872:	46b4      	mov	ip, r6
 8021874:	e7db      	b.n	802182e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 8021876:	9a01      	ldr	r2, [sp, #4]
 8021878:	9b01      	ldr	r3, [sp, #4]
 802187a:	3202      	adds	r2, #2
 802187c:	785b      	ldrb	r3, [r3, #1]
 802187e:	9201      	str	r2, [sp, #4]
 8021880:	e7e7      	b.n	8021852 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8021882:	2203      	movs	r2, #3
 8021884:	4615      	mov	r5, r2
 8021886:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021888:	9a03      	ldr	r2, [sp, #12]
 802188a:	fb15 1202 	smlabb	r2, r5, r2, r1
 802188e:	9905      	ldr	r1, [sp, #20]
 8021890:	4563      	cmp	r3, ip
 8021892:	eb01 0502 	add.w	r5, r1, r2
 8021896:	9902      	ldr	r1, [sp, #8]
 8021898:	bf29      	itett	cs
 802189a:	eba3 080c 	subcs.w	r8, r3, ip
 802189e:	ebac 0603 	subcc.w	r6, ip, r3
 80218a2:	fa1f f888 	uxthcs.w	r8, r8
 80218a6:	46e1      	movcs	r9, ip
 80218a8:	bf2f      	iteee	cs
 80218aa:	4626      	movcs	r6, r4
 80218ac:	b2b6      	uxthcc	r6, r6
 80218ae:	4699      	movcc	r9, r3
 80218b0:	46a0      	movcc	r8, r4
 80218b2:	29ff      	cmp	r1, #255	; 0xff
 80218b4:	d04a      	beq.n	802194c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x214>
 80218b6:	9f06      	ldr	r7, [sp, #24]
 80218b8:	78a9      	ldrb	r1, [r5, #2]
 80218ba:	9004      	str	r0, [sp, #16]
 80218bc:	4379      	muls	r1, r7
 80218be:	910a      	str	r1, [sp, #40]	; 0x28
 80218c0:	7869      	ldrb	r1, [r5, #1]
 80218c2:	4379      	muls	r1, r7
 80218c4:	910b      	str	r1, [sp, #44]	; 0x2c
 80218c6:	9905      	ldr	r1, [sp, #20]
 80218c8:	5c8a      	ldrb	r2, [r1, r2]
 80218ca:	437a      	muls	r2, r7
 80218cc:	920c      	str	r2, [sp, #48]	; 0x30
 80218ce:	46ca      	mov	sl, r9
 80218d0:	f1ba 0f00 	cmp.w	sl, #0
 80218d4:	d03d      	beq.n	8021952 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21a>
 80218d6:	9a04      	ldr	r2, [sp, #16]
 80218d8:	9f07      	ldr	r7, [sp, #28]
 80218da:	8812      	ldrh	r2, [r2, #0]
 80218dc:	1215      	asrs	r5, r2, #8
 80218de:	46be      	mov	lr, r7
 80218e0:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80218e4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80218e6:	10d1      	asrs	r1, r2, #3
 80218e8:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 80218ec:	fb05 750e 	mla	r5, r5, lr, r7
 80218f0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80218f4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80218f6:	00d2      	lsls	r2, r2, #3
 80218f8:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 80218fc:	fb01 710e 	mla	r1, r1, lr, r7
 8021900:	b2d2      	uxtb	r2, r2
 8021902:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8021904:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8021908:	b2ad      	uxth	r5, r5
 802190a:	fb02 720e 	mla	r2, r2, lr, r7
 802190e:	b292      	uxth	r2, r2
 8021910:	f105 0e01 	add.w	lr, r5, #1
 8021914:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8021918:	f102 0e01 	add.w	lr, r2, #1
 802191c:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8021920:	b289      	uxth	r1, r1
 8021922:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8021926:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802192a:	4315      	orrs	r5, r2
 802192c:	1c4a      	adds	r2, r1, #1
 802192e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021932:	0949      	lsrs	r1, r1, #5
 8021934:	9a04      	ldr	r2, [sp, #16]
 8021936:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802193a:	430d      	orrs	r5, r1
 802193c:	f822 5b02 	strh.w	r5, [r2], #2
 8021940:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021944:	9204      	str	r2, [sp, #16]
 8021946:	fa1f fa8a 	uxth.w	sl, sl
 802194a:	e7c1      	b.n	80218d0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 802194c:	4649      	mov	r1, r9
 802194e:	4686      	mov	lr, r0
 8021950:	b999      	cbnz	r1, 802197a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x242>
 8021952:	4563      	cmp	r3, ip
 8021954:	eb00 0049 	add.w	r0, r0, r9, lsl #1
 8021958:	d38a      	bcc.n	8021870 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x138>
 802195a:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
 802195e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021960:	fa1f f68b 	uxth.w	r6, fp
 8021964:	1ba4      	subs	r4, r4, r6
 8021966:	881b      	ldrh	r3, [r3, #0]
 8021968:	b2a4      	uxth	r4, r4
 802196a:	2c00      	cmp	r4, #0
 802196c:	eba3 030b 	sub.w	r3, r3, fp
 8021970:	bf18      	it	ne
 8021972:	2600      	movne	r6, #0
 8021974:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021978:	e77a      	b.n	8021870 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x138>
 802197a:	78aa      	ldrb	r2, [r5, #2]
 802197c:	4f0e      	ldr	r7, [pc, #56]	; (80219b8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x280>)
 802197e:	ea07 2a02 	and.w	sl, r7, r2, lsl #8
 8021982:	786a      	ldrb	r2, [r5, #1]
 8021984:	00d2      	lsls	r2, r2, #3
 8021986:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802198a:	ea4a 0202 	orr.w	r2, sl, r2
 802198e:	f895 a000 	ldrb.w	sl, [r5]
 8021992:	3901      	subs	r1, #1
 8021994:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
 8021998:	f82e 2b02 	strh.w	r2, [lr], #2
 802199c:	b289      	uxth	r1, r1
 802199e:	e7d7      	b.n	8021950 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x218>
 80219a0:	4b03      	ldr	r3, [pc, #12]	; (80219b0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>)
 80219a2:	6818      	ldr	r0, [r3, #0]
 80219a4:	6803      	ldr	r3, [r0, #0]
 80219a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80219a8:	4798      	blx	r3
 80219aa:	b013      	add	sp, #76	; 0x4c
 80219ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80219b0:	2000af48 	.word	0x2000af48
 80219b4:	2000af42 	.word	0x2000af42
 80219b8:	fffff800 	.word	0xfffff800

080219bc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 80219bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80219c0:	b09d      	sub	sp, #116	; 0x74
 80219c2:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
 80219c6:	f89d 209c 	ldrb.w	r2, [sp, #156]	; 0x9c
 80219ca:	920e      	str	r2, [sp, #56]	; 0x38
 80219cc:	461c      	mov	r4, r3
 80219ce:	4683      	mov	fp, r0
 80219d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80219d2:	2a00      	cmp	r2, #0
 80219d4:	f000 81e0 	beq.w	8021d98 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3dc>
 80219d8:	6820      	ldr	r0, [r4, #0]
 80219da:	6861      	ldr	r1, [r4, #4]
 80219dc:	aa18      	add	r2, sp, #96	; 0x60
 80219de:	c203      	stmia	r2!, {r0, r1}
 80219e0:	6818      	ldr	r0, [r3, #0]
 80219e2:	6859      	ldr	r1, [r3, #4]
 80219e4:	aa1a      	add	r2, sp, #104	; 0x68
 80219e6:	c203      	stmia	r2!, {r0, r1}
 80219e8:	a818      	add	r0, sp, #96	; 0x60
 80219ea:	f7f9 fab9 	bl	801af60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80219ee:	4621      	mov	r1, r4
 80219f0:	a81a      	add	r0, sp, #104	; 0x68
 80219f2:	f7f9 faf9 	bl	801afe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80219f6:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 80219fa:	f9bd 4066 	ldrsh.w	r4, [sp, #102]	; 0x66
 80219fe:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	; 0x6e
 8021a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8021a06:	bfd7      	itett	le
 8021a08:	b29a      	uxthle	r2, r3
 8021a0a:	2201      	movgt	r2, #1
 8021a0c:	f44f 6180 	movle.w	r1, #1024	; 0x400
 8021a10:	fb91 f2f2 	sdivle	r2, r1, r2
 8021a14:	9202      	str	r2, [sp, #8]
 8021a16:	9802      	ldr	r0, [sp, #8]
 8021a18:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
 8021a1c:	fb92 f0f0 	sdiv	r0, r2, r0
 8021a20:	b280      	uxth	r0, r0
 8021a22:	900f      	str	r0, [sp, #60]	; 0x3c
 8021a24:	9902      	ldr	r1, [sp, #8]
 8021a26:	9802      	ldr	r0, [sp, #8]
 8021a28:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8021a2a:	440c      	add	r4, r1
 8021a2c:	fb05 2510 	mls	r5, r5, r0, r2
 8021a30:	fb15 f503 	smulbb	r5, r5, r3
 8021a34:	3c01      	subs	r4, #1
 8021a36:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8021a3a:	fb94 f4f1 	sdiv	r4, r4, r1
 8021a3e:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
 8021a42:	440d      	add	r5, r1
 8021a44:	4419      	add	r1, r3
 8021a46:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 8021a4a:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
 8021a4e:	441a      	add	r2, r3
 8021a50:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 8021a54:	9306      	str	r3, [sp, #24]
 8021a56:	4bb3      	ldr	r3, [pc, #716]	; (8021d24 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 8021a58:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
 8021a5c:	6818      	ldr	r0, [r3, #0]
 8021a5e:	6803      	ldr	r3, [r0, #0]
 8021a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021a62:	4798      	blx	r3
 8021a64:	4bb0      	ldr	r3, [pc, #704]	; (8021d28 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 8021a66:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	; 0x6a
 8021a6a:	881a      	ldrh	r2, [r3, #0]
 8021a6c:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	; 0x68
 8021a70:	9316      	str	r3, [sp, #88]	; 0x58
 8021a72:	fb02 7101 	mla	r1, r2, r1, r7
 8021a76:	3401      	adds	r4, #1
 8021a78:	eb00 0841 	add.w	r8, r0, r1, lsl #1
 8021a7c:	b2a4      	uxth	r4, r4
 8021a7e:	4356      	muls	r6, r2
 8021a80:	eb08 0246 	add.w	r2, r8, r6, lsl #1
 8021a84:	00a4      	lsls	r4, r4, #2
 8021a86:	920a      	str	r2, [sp, #40]	; 0x28
 8021a88:	1d22      	adds	r2, r4, #4
 8021a8a:	b2ad      	uxth	r5, r5
 8021a8c:	9213      	str	r2, [sp, #76]	; 0x4c
 8021a8e:	4ba7      	ldr	r3, [pc, #668]	; (8021d2c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>)
 8021a90:	9a06      	ldr	r2, [sp, #24]
 8021a92:	2d00      	cmp	r5, #0
 8021a94:	bf0c      	ite	eq
 8021a96:	4611      	moveq	r1, r2
 8021a98:	2100      	movne	r1, #0
 8021a9a:	2200      	movs	r2, #0
 8021a9c:	eba3 030b 	sub.w	r3, r3, fp
 8021aa0:	b289      	uxth	r1, r1
 8021aa2:	920d      	str	r2, [sp, #52]	; 0x34
 8021aa4:	9317      	str	r3, [sp, #92]	; 0x5c
 8021aa6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021aa8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021aaa:	fa12 f383 	uxtah	r3, r2, r3
 8021aae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021ab0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021ab4:	3304      	adds	r3, #4
 8021ab6:	9308      	str	r3, [sp, #32]
 8021ab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021aba:	4543      	cmp	r3, r8
 8021abc:	f240 8167 	bls.w	8021d8e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d2>
 8021ac0:	9a02      	ldr	r2, [sp, #8]
 8021ac2:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8021ac6:	fbb5 f3f3 	udiv	r3, r5, r3
 8021aca:	1ad3      	subs	r3, r2, r3
 8021acc:	b29b      	uxth	r3, r3
 8021ace:	9314      	str	r3, [sp, #80]	; 0x50
 8021ad0:	9b08      	ldr	r3, [sp, #32]
 8021ad2:	9808      	ldr	r0, [sp, #32]
 8021ad4:	785a      	ldrb	r2, [r3, #1]
 8021ad6:	789b      	ldrb	r3, [r3, #2]
 8021ad8:	7800      	ldrb	r0, [r0, #0]
 8021ada:	9010      	str	r0, [sp, #64]	; 0x40
 8021adc:	021b      	lsls	r3, r3, #8
 8021ade:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021ae2:	9a08      	ldr	r2, [sp, #32]
 8021ae4:	78d2      	ldrb	r2, [r2, #3]
 8021ae6:	4313      	orrs	r3, r2
 8021ae8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021aea:	3001      	adds	r0, #1
 8021aec:	441a      	add	r2, r3
 8021aee:	9007      	str	r0, [sp, #28]
 8021af0:	1c50      	adds	r0, r2, #1
 8021af2:	9005      	str	r0, [sp, #20]
 8021af4:	7852      	ldrb	r2, [r2, #1]
 8021af6:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021af8:	0212      	lsls	r2, r2, #8
 8021afa:	5cc3      	ldrb	r3, [r0, r3]
 8021afc:	f402 72ff 	and.w	r2, r2, #510	; 0x1fe
 8021b00:	431a      	orrs	r2, r3
 8021b02:	b293      	uxth	r3, r2
 8021b04:	930b      	str	r3, [sp, #44]	; 0x2c
 8021b06:	2300      	movs	r3, #0
 8021b08:	9309      	str	r3, [sp, #36]	; 0x24
 8021b0a:	2301      	movs	r3, #1
 8021b0c:	9301      	str	r3, [sp, #4]
 8021b0e:	9304      	str	r3, [sp, #16]
 8021b10:	2300      	movs	r3, #0
 8021b12:	f88b 2804 	strb.w	r2, [fp, #2052]	; 0x804
 8021b16:	9303      	str	r3, [sp, #12]
 8021b18:	f04f 0e01 	mov.w	lr, #1
 8021b1c:	2d00      	cmp	r5, #0
 8021b1e:	d07c      	beq.n	8021c1a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 8021b20:	45ae      	cmp	lr, r5
 8021b22:	d26b      	bcs.n	8021bfc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x240>
 8021b24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021b26:	eba5 050e 	sub.w	r5, r5, lr
 8021b2a:	4543      	cmp	r3, r8
 8021b2c:	b2ad      	uxth	r5, r5
 8021b2e:	460c      	mov	r4, r1
 8021b30:	d802      	bhi.n	8021b38 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>
 8021b32:	e070      	b.n	8021c16 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25a>
 8021b34:	2b00      	cmp	r3, #0
 8021b36:	d15c      	bne.n	8021bf2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 8021b38:	9b05      	ldr	r3, [sp, #20]
 8021b3a:	9a04      	ldr	r2, [sp, #16]
 8021b3c:	785b      	ldrb	r3, [r3, #1]
 8021b3e:	9904      	ldr	r1, [sp, #16]
 8021b40:	f1c2 0207 	rsb	r2, r2, #7
 8021b44:	4093      	lsls	r3, r2
 8021b46:	005b      	lsls	r3, r3, #1
 8021b48:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 8021b4c:	9b05      	ldr	r3, [sp, #20]
 8021b4e:	781b      	ldrb	r3, [r3, #0]
 8021b50:	410b      	asrs	r3, r1
 8021b52:	3101      	adds	r1, #1
 8021b54:	b2c9      	uxtb	r1, r1
 8021b56:	2908      	cmp	r1, #8
 8021b58:	9104      	str	r1, [sp, #16]
 8021b5a:	9905      	ldr	r1, [sp, #20]
 8021b5c:	bf0a      	itet	eq
 8021b5e:	3102      	addeq	r1, #2
 8021b60:	3101      	addne	r1, #1
 8021b62:	9105      	streq	r1, [sp, #20]
 8021b64:	b2db      	uxtb	r3, r3
 8021b66:	bf0a      	itet	eq
 8021b68:	2100      	moveq	r1, #0
 8021b6a:	9105      	strne	r1, [sp, #20]
 8021b6c:	9104      	streq	r1, [sp, #16]
 8021b6e:	4313      	orrs	r3, r2
 8021b70:	9910      	ldr	r1, [sp, #64]	; 0x40
 8021b72:	b29a      	uxth	r2, r3
 8021b74:	4291      	cmp	r1, r2
 8021b76:	d30a      	bcc.n	8021b8e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 8021b78:	f88b 3804 	strb.w	r3, [fp, #2052]	; 0x804
 8021b7c:	2301      	movs	r3, #1
 8021b7e:	9907      	ldr	r1, [sp, #28]
 8021b80:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8021b84:	d30f      	bcc.n	8021ba6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ea>
 8021b86:	2100      	movs	r1, #0
 8021b88:	9301      	str	r3, [sp, #4]
 8021b8a:	9103      	str	r1, [sp, #12]
 8021b8c:	e032      	b.n	8021bf4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x238>
 8021b8e:	9b07      	ldr	r3, [sp, #28]
 8021b90:	429a      	cmp	r2, r3
 8021b92:	d318      	bcc.n	8021bc6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 8021b94:	9b01      	ldr	r3, [sp, #4]
 8021b96:	f89b 1804 	ldrb.w	r1, [fp, #2052]	; 0x804
 8021b9a:	445b      	add	r3, fp
 8021b9c:	f883 1804 	strb.w	r1, [r3, #2052]	; 0x804
 8021ba0:	9b01      	ldr	r3, [sp, #4]
 8021ba2:	3301      	adds	r3, #1
 8021ba4:	b29b      	uxth	r3, r3
 8021ba6:	9907      	ldr	r1, [sp, #28]
 8021ba8:	f89b 0804 	ldrb.w	r0, [fp, #2052]	; 0x804
 8021bac:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 8021bb0:	7108      	strb	r0, [r1, #4]
 8021bb2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8021bb4:	80c8      	strh	r0, [r1, #6]
 8021bb6:	9801      	ldr	r0, [sp, #4]
 8021bb8:	3001      	adds	r0, #1
 8021bba:	7148      	strb	r0, [r1, #5]
 8021bbc:	9907      	ldr	r1, [sp, #28]
 8021bbe:	3101      	adds	r1, #1
 8021bc0:	b289      	uxth	r1, r1
 8021bc2:	9107      	str	r1, [sp, #28]
 8021bc4:	e7df      	b.n	8021b86 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ca>
 8021bc6:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
 8021bca:	4611      	mov	r1, r2
 8021bcc:	795b      	ldrb	r3, [r3, #5]
 8021bce:	f603 0004 	addw	r0, r3, #2052	; 0x804
 8021bd2:	4458      	add	r0, fp
 8021bd4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8021bd6:	4406      	add	r6, r0
 8021bd8:	2e00      	cmp	r6, #0
 8021bda:	dd06      	ble.n	8021bea <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x22e>
 8021bdc:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 8021be0:	790e      	ldrb	r6, [r1, #4]
 8021be2:	f800 6d01 	strb.w	r6, [r0, #-1]!
 8021be6:	88c9      	ldrh	r1, [r1, #6]
 8021be8:	e7f4      	b.n	8021bd4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x218>
 8021bea:	f88b 1804 	strb.w	r1, [fp, #2052]	; 0x804
 8021bee:	b29b      	uxth	r3, r3
 8021bf0:	e7c5      	b.n	8021b7e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c2>
 8021bf2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021bf4:	920b      	str	r2, [sp, #44]	; 0x2c
 8021bf6:	4621      	mov	r1, r4
 8021bf8:	469e      	mov	lr, r3
 8021bfa:	e78f      	b.n	8021b1c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x160>
 8021bfc:	9a03      	ldr	r2, [sp, #12]
 8021bfe:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8021c02:	442a      	add	r2, r5
 8021c04:	ebae 0305 	sub.w	r3, lr, r5
 8021c08:	b292      	uxth	r2, r2
 8021c0a:	b29b      	uxth	r3, r3
 8021c0c:	9203      	str	r2, [sp, #12]
 8021c0e:	2500      	movs	r5, #0
 8021c10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021c12:	4542      	cmp	r2, r8
 8021c14:	d88e      	bhi.n	8021b34 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x178>
 8021c16:	4621      	mov	r1, r4
 8021c18:	e74e      	b.n	8021ab8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 8021c1a:	458e      	cmp	lr, r1
 8021c1c:	bf29      	itett	cs
 8021c1e:	ebae 0301 	subcs.w	r3, lr, r1
 8021c22:	eba1 040e 	subcc.w	r4, r1, lr
 8021c26:	b29b      	uxthcs	r3, r3
 8021c28:	910c      	strcs	r1, [sp, #48]	; 0x30
 8021c2a:	bf2f      	iteee	cs
 8021c2c:	462c      	movcs	r4, r5
 8021c2e:	b2a4      	uxthcc	r4, r4
 8021c30:	f8cd e030 	strcc.w	lr, [sp, #48]	; 0x30
 8021c34:	462b      	movcc	r3, r5
 8021c36:	f04f 0900 	mov.w	r9, #0
 8021c3a:	9a03      	ldr	r2, [sp, #12]
 8021c3c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8021c3e:	444a      	add	r2, r9
 8021c40:	4548      	cmp	r0, r9
 8021c42:	b292      	uxth	r2, r2
 8021c44:	d074      	beq.n	8021d30 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x374>
 8021c46:	445a      	add	r2, fp
 8021c48:	2004      	movs	r0, #4
 8021c4a:	4605      	mov	r5, r0
 8021c4c:	f892 2804 	ldrb.w	r2, [r2, #2052]	; 0x804
 8021c50:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8021c52:	fb15 0202 	smlabb	r2, r5, r2, r0
 8021c56:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021c58:	5880      	ldr	r0, [r0, r2]
 8021c5a:	ea5f 6a10 	movs.w	sl, r0, lsr #24
 8021c5e:	d014      	beq.n	8021c8a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2ce>
 8021c60:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021c64:	ea4f 2510 	mov.w	r5, r0, lsr #8
 8021c68:	d112      	bne.n	8021c90 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d4>
 8021c6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021c6c:	2aff      	cmp	r2, #255	; 0xff
 8021c6e:	d10f      	bne.n	8021c90 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d4>
 8021c70:	0942      	lsrs	r2, r0, #5
 8021c72:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 8021c76:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021c7a:	f025 0507 	bic.w	r5, r5, #7
 8021c7e:	4315      	orrs	r5, r2
 8021c80:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8021c84:	4305      	orrs	r5, r0
 8021c86:	f828 5019 	strh.w	r5, [r8, r9, lsl #1]
 8021c8a:	f109 0901 	add.w	r9, r9, #1
 8021c8e:	e7d4      	b.n	8021c3a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x27e>
 8021c90:	f838 c019 	ldrh.w	ip, [r8, r9, lsl #1]
 8021c94:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8021c98:	f006 02fc 	and.w	r2, r6, #252	; 0xfc
 8021c9c:	9215      	str	r2, [sp, #84]	; 0x54
 8021c9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021ca0:	fb02 fa0a 	mul.w	sl, r2, sl
 8021ca4:	f10a 0201 	add.w	r2, sl, #1
 8021ca8:	eb02 222a 	add.w	r2, r2, sl, asr #8
 8021cac:	ea4f 272c 	mov.w	r7, ip, asr #8
 8021cb0:	1212      	asrs	r2, r2, #8
 8021cb2:	fa1f fa82 	uxth.w	sl, r2
 8021cb6:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8021cba:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8021cbe:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021cc2:	43d2      	mvns	r2, r2
 8021cc4:	b2d2      	uxtb	r2, r2
 8021cc6:	fb16 f60a 	smulbb	r6, r6, sl
 8021cca:	fa5f fc8c 	uxtb.w	ip, ip
 8021cce:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8021cd2:	b2c0      	uxtb	r0, r0
 8021cd4:	fb07 6702 	mla	r7, r7, r2, r6
 8021cd8:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8021cdc:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8021cde:	fb10 f00a 	smulbb	r0, r0, sl
 8021ce2:	fb0c 0002 	mla	r0, ip, r2, r0
 8021ce6:	b2ed      	uxtb	r5, r5
 8021ce8:	b2bf      	uxth	r7, r7
 8021cea:	fb15 f50a 	smulbb	r5, r5, sl
 8021cee:	b280      	uxth	r0, r0
 8021cf0:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8021cf4:	fb06 5602 	mla	r6, r6, r2, r5
 8021cf8:	1c7a      	adds	r2, r7, #1
 8021cfa:	1c45      	adds	r5, r0, #1
 8021cfc:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8021d00:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8021d04:	b2b6      	uxth	r6, r6
 8021d06:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8021d0a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8021d0e:	432f      	orrs	r7, r5
 8021d10:	1c75      	adds	r5, r6, #1
 8021d12:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 8021d16:	096d      	lsrs	r5, r5, #5
 8021d18:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021d1c:	432f      	orrs	r7, r5
 8021d1e:	f828 7019 	strh.w	r7, [r8, r9, lsl #1]
 8021d22:	e7b2      	b.n	8021c8a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2ce>
 8021d24:	2000af48 	.word	0x2000af48
 8021d28:	2000af42 	.word	0x2000af42
 8021d2c:	fffff7fb 	.word	0xfffff7fb
 8021d30:	9203      	str	r2, [sp, #12]
 8021d32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021d34:	458e      	cmp	lr, r1
 8021d36:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 8021d3a:	f4ff af68 	bcc.w	8021c0e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x252>
 8021d3e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8021d40:	9906      	ldr	r1, [sp, #24]
 8021d42:	8812      	ldrh	r2, [r2, #0]
 8021d44:	1a52      	subs	r2, r2, r1
 8021d46:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 8021d4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021d4c:	9914      	ldr	r1, [sp, #80]	; 0x50
 8021d4e:	3201      	adds	r2, #1
 8021d50:	428a      	cmp	r2, r1
 8021d52:	9209      	str	r2, [sp, #36]	; 0x24
 8021d54:	d111      	bne.n	8021d7a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3be>
 8021d56:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 8021d5a:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8021d5e:	9b06      	ldr	r3, [sp, #24]
 8021d60:	eba5 0509 	sub.w	r5, r5, r9
 8021d64:	b2ad      	uxth	r5, r5
 8021d66:	2d00      	cmp	r5, #0
 8021d68:	bf08      	it	eq
 8021d6a:	4619      	moveq	r1, r3
 8021d6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021d6e:	bf18      	it	ne
 8021d70:	2100      	movne	r1, #0
 8021d72:	3301      	adds	r3, #1
 8021d74:	930d      	str	r3, [sp, #52]	; 0x34
 8021d76:	b289      	uxth	r1, r1
 8021d78:	e695      	b.n	8021aa6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 8021d7a:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8021d7e:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8021d82:	1b2d      	subs	r5, r5, r4
 8021d84:	b2ad      	uxth	r5, r5
 8021d86:	2d00      	cmp	r5, #0
 8021d88:	bf18      	it	ne
 8021d8a:	2400      	movne	r4, #0
 8021d8c:	e740      	b.n	8021c10 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x254>
 8021d8e:	4b04      	ldr	r3, [pc, #16]	; (8021da0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e4>)
 8021d90:	6818      	ldr	r0, [r3, #0]
 8021d92:	6803      	ldr	r3, [r0, #0]
 8021d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021d96:	4798      	blx	r3
 8021d98:	b01d      	add	sp, #116	; 0x74
 8021d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d9e:	bf00      	nop
 8021da0:	2000af48 	.word	0x2000af48

08021da4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8021da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021da8:	b09f      	sub	sp, #124	; 0x7c
 8021daa:	e9cd 1213 	strd	r1, r2, [sp, #76]	; 0x4c
 8021dae:	f89d 20a4 	ldrb.w	r2, [sp, #164]	; 0xa4
 8021db2:	920a      	str	r2, [sp, #40]	; 0x28
 8021db4:	461d      	mov	r5, r3
 8021db6:	4604      	mov	r4, r0
 8021db8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021dba:	2a00      	cmp	r2, #0
 8021dbc:	f000 81fa 	beq.w	80221b4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x410>
 8021dc0:	6828      	ldr	r0, [r5, #0]
 8021dc2:	6869      	ldr	r1, [r5, #4]
 8021dc4:	aa1a      	add	r2, sp, #104	; 0x68
 8021dc6:	c203      	stmia	r2!, {r0, r1}
 8021dc8:	6818      	ldr	r0, [r3, #0]
 8021dca:	6859      	ldr	r1, [r3, #4]
 8021dcc:	aa1c      	add	r2, sp, #112	; 0x70
 8021dce:	c203      	stmia	r2!, {r0, r1}
 8021dd0:	a81a      	add	r0, sp, #104	; 0x68
 8021dd2:	f7f9 f8c5 	bl	801af60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021dd6:	4629      	mov	r1, r5
 8021dd8:	a81c      	add	r0, sp, #112	; 0x70
 8021dda:	f7f9 f905 	bl	801afe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021dde:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 8021de2:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	; 0x6e
 8021de6:	f9bd 7076 	ldrsh.w	r7, [sp, #118]	; 0x76
 8021dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8021dee:	bfd7      	itett	le
 8021df0:	b29a      	uxthle	r2, r3
 8021df2:	2201      	movgt	r2, #1
 8021df4:	f44f 6180 	movle.w	r1, #1024	; 0x400
 8021df8:	fb91 f2f2 	sdivle	r2, r1, r2
 8021dfc:	9201      	str	r2, [sp, #4]
 8021dfe:	9801      	ldr	r0, [sp, #4]
 8021e00:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
 8021e04:	fb92 f0f0 	sdiv	r0, r2, r0
 8021e08:	b280      	uxth	r0, r0
 8021e0a:	9010      	str	r0, [sp, #64]	; 0x40
 8021e0c:	9901      	ldr	r1, [sp, #4]
 8021e0e:	9801      	ldr	r0, [sp, #4]
 8021e10:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021e12:	440e      	add	r6, r1
 8021e14:	fb05 2510 	mls	r5, r5, r0, r2
 8021e18:	fb15 f503 	smulbb	r5, r5, r3
 8021e1c:	3e01      	subs	r6, #1
 8021e1e:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8021e22:	fb96 f6f1 	sdiv	r6, r6, r1
 8021e26:	f8bd 1070 	ldrh.w	r1, [sp, #112]	; 0x70
 8021e2a:	440d      	add	r5, r1
 8021e2c:	4419      	add	r1, r3
 8021e2e:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 8021e32:	f8ad 1070 	strh.w	r1, [sp, #112]	; 0x70
 8021e36:	441a      	add	r2, r3
 8021e38:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 8021e3c:	9304      	str	r3, [sp, #16]
 8021e3e:	4b96      	ldr	r3, [pc, #600]	; (8022098 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2f4>)
 8021e40:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
 8021e44:	6818      	ldr	r0, [r3, #0]
 8021e46:	6803      	ldr	r3, [r0, #0]
 8021e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021e4a:	4798      	blx	r3
 8021e4c:	4b93      	ldr	r3, [pc, #588]	; (802209c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2f8>)
 8021e4e:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	; 0x72
 8021e52:	881a      	ldrh	r2, [r3, #0]
 8021e54:	f9bd c070 	ldrsh.w	ip, [sp, #112]	; 0x70
 8021e58:	9318      	str	r3, [sp, #96]	; 0x60
 8021e5a:	fb02 c101 	mla	r1, r2, r1, ip
 8021e5e:	eb00 0b41 	add.w	fp, r0, r1, lsl #1
 8021e62:	4357      	muls	r7, r2
 8021e64:	eb0b 0247 	add.w	r2, fp, r7, lsl #1
 8021e68:	3601      	adds	r6, #1
 8021e6a:	920b      	str	r2, [sp, #44]	; 0x2c
 8021e6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021e6e:	4b8c      	ldr	r3, [pc, #560]	; (80220a0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2fc>)
 8021e70:	b2b6      	uxth	r6, r6
 8021e72:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8021e76:	1d32      	adds	r2, r6, #4
 8021e78:	9206      	str	r2, [sp, #24]
 8021e7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021e7c:	43d2      	mvns	r2, r2
 8021e7e:	b2d2      	uxtb	r2, r2
 8021e80:	b2ad      	uxth	r5, r5
 8021e82:	9215      	str	r2, [sp, #84]	; 0x54
 8021e84:	9a04      	ldr	r2, [sp, #16]
 8021e86:	2d00      	cmp	r5, #0
 8021e88:	bf0c      	ite	eq
 8021e8a:	4611      	moveq	r1, r2
 8021e8c:	2100      	movne	r1, #0
 8021e8e:	2200      	movs	r2, #0
 8021e90:	1b1b      	subs	r3, r3, r4
 8021e92:	b289      	uxth	r1, r1
 8021e94:	920d      	str	r2, [sp, #52]	; 0x34
 8021e96:	9319      	str	r3, [sp, #100]	; 0x64
 8021e98:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021e9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021e9c:	fa12 f383 	uxtah	r3, r2, r3
 8021ea0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021ea2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021ea6:	3304      	adds	r3, #4
 8021ea8:	9307      	str	r3, [sp, #28]
 8021eaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021eac:	455b      	cmp	r3, fp
 8021eae:	f240 817c 	bls.w	80221aa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x406>
 8021eb2:	9a01      	ldr	r2, [sp, #4]
 8021eb4:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8021eb8:	fbb5 f3f3 	udiv	r3, r5, r3
 8021ebc:	1ad3      	subs	r3, r2, r3
 8021ebe:	b29b      	uxth	r3, r3
 8021ec0:	9316      	str	r3, [sp, #88]	; 0x58
 8021ec2:	9b07      	ldr	r3, [sp, #28]
 8021ec4:	9807      	ldr	r0, [sp, #28]
 8021ec6:	785a      	ldrb	r2, [r3, #1]
 8021ec8:	789b      	ldrb	r3, [r3, #2]
 8021eca:	7800      	ldrb	r0, [r0, #0]
 8021ecc:	9011      	str	r0, [sp, #68]	; 0x44
 8021ece:	021b      	lsls	r3, r3, #8
 8021ed0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021ed4:	9a07      	ldr	r2, [sp, #28]
 8021ed6:	78d2      	ldrb	r2, [r2, #3]
 8021ed8:	4313      	orrs	r3, r2
 8021eda:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021edc:	3001      	adds	r0, #1
 8021ede:	441a      	add	r2, r3
 8021ee0:	9005      	str	r0, [sp, #20]
 8021ee2:	1c50      	adds	r0, r2, #1
 8021ee4:	9003      	str	r0, [sp, #12]
 8021ee6:	7852      	ldrb	r2, [r2, #1]
 8021ee8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8021eea:	0212      	lsls	r2, r2, #8
 8021eec:	5cc3      	ldrb	r3, [r0, r3]
 8021eee:	f402 72ff 	and.w	r2, r2, #510	; 0x1fe
 8021ef2:	431a      	orrs	r2, r3
 8021ef4:	b293      	uxth	r3, r2
 8021ef6:	930c      	str	r3, [sp, #48]	; 0x30
 8021ef8:	2300      	movs	r3, #0
 8021efa:	f884 2804 	strb.w	r2, [r4, #2052]	; 0x804
 8021efe:	9308      	str	r3, [sp, #32]
 8021f00:	461a      	mov	r2, r3
 8021f02:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8021f06:	930e      	str	r3, [sp, #56]	; 0x38
 8021f08:	f04f 0801 	mov.w	r8, #1
 8021f0c:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8021f10:	f8cd 8008 	str.w	r8, [sp, #8]
 8021f14:	46c4      	mov	ip, r8
 8021f16:	930f      	str	r3, [sp, #60]	; 0x3c
 8021f18:	2d00      	cmp	r5, #0
 8021f1a:	d07c      	beq.n	8022016 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x272>
 8021f1c:	45ac      	cmp	ip, r5
 8021f1e:	d26c      	bcs.n	8021ffa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x256>
 8021f20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021f22:	eba5 050c 	sub.w	r5, r5, ip
 8021f26:	455b      	cmp	r3, fp
 8021f28:	b2ad      	uxth	r5, r5
 8021f2a:	4608      	mov	r0, r1
 8021f2c:	d802      	bhi.n	8021f34 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x190>
 8021f2e:	e070      	b.n	8022012 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26e>
 8021f30:	2b00      	cmp	r3, #0
 8021f32:	d15c      	bne.n	8021fee <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24a>
 8021f34:	9b03      	ldr	r3, [sp, #12]
 8021f36:	9a02      	ldr	r2, [sp, #8]
 8021f38:	785b      	ldrb	r3, [r3, #1]
 8021f3a:	9902      	ldr	r1, [sp, #8]
 8021f3c:	f1c2 0207 	rsb	r2, r2, #7
 8021f40:	4093      	lsls	r3, r2
 8021f42:	005b      	lsls	r3, r3, #1
 8021f44:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 8021f48:	9b03      	ldr	r3, [sp, #12]
 8021f4a:	781b      	ldrb	r3, [r3, #0]
 8021f4c:	410b      	asrs	r3, r1
 8021f4e:	3101      	adds	r1, #1
 8021f50:	b2c9      	uxtb	r1, r1
 8021f52:	2908      	cmp	r1, #8
 8021f54:	9102      	str	r1, [sp, #8]
 8021f56:	9903      	ldr	r1, [sp, #12]
 8021f58:	bf0a      	itet	eq
 8021f5a:	3102      	addeq	r1, #2
 8021f5c:	3101      	addne	r1, #1
 8021f5e:	9103      	streq	r1, [sp, #12]
 8021f60:	b2db      	uxtb	r3, r3
 8021f62:	bf0a      	itet	eq
 8021f64:	2100      	moveq	r1, #0
 8021f66:	9103      	strne	r1, [sp, #12]
 8021f68:	9102      	streq	r1, [sp, #8]
 8021f6a:	4313      	orrs	r3, r2
 8021f6c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021f6e:	b29a      	uxth	r2, r3
 8021f70:	4291      	cmp	r1, r2
 8021f72:	d30a      	bcc.n	8021f8a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e6>
 8021f74:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
 8021f78:	2301      	movs	r3, #1
 8021f7a:	9905      	ldr	r1, [sp, #20]
 8021f7c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8021f80:	d30f      	bcc.n	8021fa2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1fe>
 8021f82:	2100      	movs	r1, #0
 8021f84:	4698      	mov	r8, r3
 8021f86:	9100      	str	r1, [sp, #0]
 8021f88:	e032      	b.n	8021ff0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24c>
 8021f8a:	9b05      	ldr	r3, [sp, #20]
 8021f8c:	429a      	cmp	r2, r3
 8021f8e:	d318      	bcc.n	8021fc2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21e>
 8021f90:	eb04 0308 	add.w	r3, r4, r8
 8021f94:	f894 1804 	ldrb.w	r1, [r4, #2052]	; 0x804
 8021f98:	f883 1804 	strb.w	r1, [r3, #2052]	; 0x804
 8021f9c:	f108 0301 	add.w	r3, r8, #1
 8021fa0:	b29b      	uxth	r3, r3
 8021fa2:	9905      	ldr	r1, [sp, #20]
 8021fa4:	f894 6804 	ldrb.w	r6, [r4, #2052]	; 0x804
 8021fa8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8021fac:	710e      	strb	r6, [r1, #4]
 8021fae:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8021fb0:	80ce      	strh	r6, [r1, #6]
 8021fb2:	f108 0601 	add.w	r6, r8, #1
 8021fb6:	714e      	strb	r6, [r1, #5]
 8021fb8:	9905      	ldr	r1, [sp, #20]
 8021fba:	3101      	adds	r1, #1
 8021fbc:	b289      	uxth	r1, r1
 8021fbe:	9105      	str	r1, [sp, #20]
 8021fc0:	e7df      	b.n	8021f82 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1de>
 8021fc2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8021fc6:	4611      	mov	r1, r2
 8021fc8:	795b      	ldrb	r3, [r3, #5]
 8021fca:	f603 0604 	addw	r6, r3, #2052	; 0x804
 8021fce:	4426      	add	r6, r4
 8021fd0:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8021fd2:	4437      	add	r7, r6
 8021fd4:	2f00      	cmp	r7, #0
 8021fd6:	dd06      	ble.n	8021fe6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x242>
 8021fd8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8021fdc:	790f      	ldrb	r7, [r1, #4]
 8021fde:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8021fe2:	88c9      	ldrh	r1, [r1, #6]
 8021fe4:	e7f4      	b.n	8021fd0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22c>
 8021fe6:	f884 1804 	strb.w	r1, [r4, #2052]	; 0x804
 8021fea:	b29b      	uxth	r3, r3
 8021fec:	e7c5      	b.n	8021f7a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8021fee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021ff0:	920c      	str	r2, [sp, #48]	; 0x30
 8021ff2:	4601      	mov	r1, r0
 8021ff4:	9a00      	ldr	r2, [sp, #0]
 8021ff6:	469c      	mov	ip, r3
 8021ff8:	e78e      	b.n	8021f18 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 8021ffa:	1957      	adds	r7, r2, r5
 8021ffc:	ebac 0305 	sub.w	r3, ip, r5
 8022000:	b2ba      	uxth	r2, r7
 8022002:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8022006:	9200      	str	r2, [sp, #0]
 8022008:	b29b      	uxth	r3, r3
 802200a:	2500      	movs	r5, #0
 802200c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802200e:	455a      	cmp	r2, fp
 8022010:	d88e      	bhi.n	8021f30 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x18c>
 8022012:	4601      	mov	r1, r0
 8022014:	e749      	b.n	8021eaa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x106>
 8022016:	458c      	cmp	ip, r1
 8022018:	bf2c      	ite	cs
 802201a:	4628      	movcs	r0, r5
 802201c:	462b      	movcc	r3, r5
 802201e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8022020:	bf27      	ittee	cs
 8022022:	9109      	strcs	r1, [sp, #36]	; 0x24
 8022024:	ebac 0301 	subcs.w	r3, ip, r1
 8022028:	eba1 000c 	subcc.w	r0, r1, ip
 802202c:	f8cd c024 	strcc.w	ip, [sp, #36]	; 0x24
 8022030:	bf2c      	ite	cs
 8022032:	b29b      	uxthcs	r3, r3
 8022034:	b280      	uxthcc	r0, r0
 8022036:	2dff      	cmp	r5, #255	; 0xff
 8022038:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802203a:	eb02 0705 	add.w	r7, r2, r5
 802203e:	b2bd      	uxth	r5, r7
 8022040:	9500      	str	r5, [sp, #0]
 8022042:	d12f      	bne.n	80220a4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x300>
 8022044:	465e      	mov	r6, fp
 8022046:	9d00      	ldr	r5, [sp, #0]
 8022048:	42aa      	cmp	r2, r5
 802204a:	f040 8084 	bne.w	8022156 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3b2>
 802204e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022050:	458c      	cmp	ip, r1
 8022052:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 8022056:	d3d8      	bcc.n	802200a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x266>
 8022058:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802205a:	9904      	ldr	r1, [sp, #16]
 802205c:	8812      	ldrh	r2, [r2, #0]
 802205e:	1a52      	subs	r2, r2, r1
 8022060:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 8022064:	9a08      	ldr	r2, [sp, #32]
 8022066:	9916      	ldr	r1, [sp, #88]	; 0x58
 8022068:	3201      	adds	r2, #1
 802206a:	428a      	cmp	r2, r1
 802206c:	9208      	str	r2, [sp, #32]
 802206e:	f040 8092 	bne.w	8022196 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f2>
 8022072:	f8bd 5070 	ldrh.w	r5, [sp, #112]	; 0x70
 8022076:	f8bd c068 	ldrh.w	ip, [sp, #104]	; 0x68
 802207a:	9b04      	ldr	r3, [sp, #16]
 802207c:	eba5 050c 	sub.w	r5, r5, ip
 8022080:	b2ad      	uxth	r5, r5
 8022082:	2d00      	cmp	r5, #0
 8022084:	bf08      	it	eq
 8022086:	4619      	moveq	r1, r3
 8022088:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802208a:	bf18      	it	ne
 802208c:	2100      	movne	r1, #0
 802208e:	3301      	adds	r3, #1
 8022090:	930d      	str	r3, [sp, #52]	; 0x34
 8022092:	b289      	uxth	r1, r1
 8022094:	e700      	b.n	8021e98 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 8022096:	bf00      	nop
 8022098:	2000af48 	.word	0x2000af48
 802209c:	2000af42 	.word	0x2000af42
 80220a0:	fffff7fb 	.word	0xfffff7fb
 80220a4:	46d9      	mov	r9, fp
 80220a6:	9d00      	ldr	r5, [sp, #0]
 80220a8:	42aa      	cmp	r2, r5
 80220aa:	d0d0      	beq.n	802204e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2aa>
 80220ac:	1c55      	adds	r5, r2, #1
 80220ae:	4422      	add	r2, r4
 80220b0:	9517      	str	r5, [sp, #92]	; 0x5c
 80220b2:	f892 e804 	ldrb.w	lr, [r2, #2052]	; 0x804
 80220b6:	9a06      	ldr	r2, [sp, #24]
 80220b8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80220bc:	4472      	add	r2, lr
 80220be:	9212      	str	r2, [sp, #72]	; 0x48
 80220c0:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80220c2:	f8b9 2000 	ldrh.w	r2, [r9]
 80220c6:	f897 a002 	ldrb.w	sl, [r7, #2]
 80220ca:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80220cc:	1216      	asrs	r6, r2, #8
 80220ce:	fb1a fa07 	smulbb	sl, sl, r7
 80220d2:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80220d6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80220d8:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80220dc:	fb06 a607 	mla	r6, r6, r7, sl
 80220e0:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80220e2:	f897 a001 	ldrb.w	sl, [r7, #1]
 80220e6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80220e8:	10d5      	asrs	r5, r2, #3
 80220ea:	fb1a fa07 	smulbb	sl, sl, r7
 80220ee:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80220f2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80220f4:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80220f8:	fb05 a507 	mla	r5, r5, r7, sl
 80220fc:	9f06      	ldr	r7, [sp, #24]
 80220fe:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8022102:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8022104:	00d2      	lsls	r2, r2, #3
 8022106:	fb1e fe07 	smulbb	lr, lr, r7
 802210a:	b2d2      	uxtb	r2, r2
 802210c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 802210e:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8022112:	b2b6      	uxth	r6, r6
 8022114:	fb02 e207 	mla	r2, r2, r7, lr
 8022118:	b292      	uxth	r2, r2
 802211a:	b2ad      	uxth	r5, r5
 802211c:	f106 0a01 	add.w	sl, r6, #1
 8022120:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8022124:	f102 0e01 	add.w	lr, r2, #1
 8022128:	f105 0a01 	add.w	sl, r5, #1
 802212c:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 8022130:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8022134:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8022138:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 802213c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8022140:	ea4e 0606 	orr.w	r6, lr, r6
 8022144:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8022148:	ea46 060a 	orr.w	r6, r6, sl
 802214c:	f829 6b02 	strh.w	r6, [r9], #2
 8022150:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8022154:	e7a7      	b.n	80220a6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x302>
 8022156:	f102 0e01 	add.w	lr, r2, #1
 802215a:	4422      	add	r2, r4
 802215c:	9f06      	ldr	r7, [sp, #24]
 802215e:	f892 5804 	ldrb.w	r5, [r2, #2052]	; 0x804
 8022162:	9a06      	ldr	r2, [sp, #24]
 8022164:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022168:	eb02 0a05 	add.w	sl, r2, r5
 802216c:	4a13      	ldr	r2, [pc, #76]	; (80221bc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x418>)
 802216e:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8022172:	ea02 2909 	and.w	r9, r2, r9, lsl #8
 8022176:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802217a:	00d2      	lsls	r2, r2, #3
 802217c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022180:	ea49 0202 	orr.w	r2, r9, r2
 8022184:	f817 9005 	ldrb.w	r9, [r7, r5]
 8022188:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 802218c:	f826 2b02 	strh.w	r2, [r6], #2
 8022190:	fa1f f28e 	uxth.w	r2, lr
 8022194:	e757      	b.n	8022046 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a2>
 8022196:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 802219a:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 802219e:	1a2d      	subs	r5, r5, r0
 80221a0:	b2ad      	uxth	r5, r5
 80221a2:	2d00      	cmp	r5, #0
 80221a4:	bf18      	it	ne
 80221a6:	2000      	movne	r0, #0
 80221a8:	e730      	b.n	802200c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 80221aa:	4b05      	ldr	r3, [pc, #20]	; (80221c0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x41c>)
 80221ac:	6818      	ldr	r0, [r3, #0]
 80221ae:	6803      	ldr	r3, [r0, #0]
 80221b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80221b2:	4798      	blx	r3
 80221b4:	b01f      	add	sp, #124	; 0x7c
 80221b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80221ba:	bf00      	nop
 80221bc:	fffff800 	.word	0xfffff800
 80221c0:	2000af48 	.word	0x2000af48

080221c4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 80221c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80221c8:	b091      	sub	sp, #68	; 0x44
 80221ca:	469b      	mov	fp, r3
 80221cc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80221d0:	4616      	mov	r6, r2
 80221d2:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 80221d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80221da:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 80221de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80221e2:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80221e6:	4604      	mov	r4, r0
 80221e8:	460d      	mov	r5, r1
 80221ea:	4640      	mov	r0, r8
 80221ec:	4659      	mov	r1, fp
 80221ee:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80221f2:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 80221f6:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 80221fa:	f7f4 fad1 	bl	80167a0 <_ZN8touchgfx4RectaNERKS0_>
 80221fe:	4631      	mov	r1, r6
 8022200:	4640      	mov	r0, r8
 8022202:	f7f4 facd 	bl	80167a0 <_ZN8touchgfx4RectaNERKS0_>
 8022206:	4b74      	ldr	r3, [pc, #464]	; (80223d8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 8022208:	8818      	ldrh	r0, [r3, #0]
 802220a:	4b74      	ldr	r3, [pc, #464]	; (80223dc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 802220c:	8819      	ldrh	r1, [r3, #0]
 802220e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8022212:	2b00      	cmp	r3, #0
 8022214:	b202      	sxth	r2, r0
 8022216:	b20e      	sxth	r6, r1
 8022218:	da07      	bge.n	802222a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 802221a:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 802221e:	4463      	add	r3, ip
 8022220:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8022224:	2300      	movs	r3, #0
 8022226:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 802222a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 802222e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8022232:	1ad2      	subs	r2, r2, r3
 8022234:	4594      	cmp	ip, r2
 8022236:	bfc4      	itt	gt
 8022238:	1ac2      	subgt	r2, r0, r3
 802223a:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 802223e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8022242:	2a00      	cmp	r2, #0
 8022244:	da07      	bge.n	8022256 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 8022246:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 802224a:	4462      	add	r2, ip
 802224c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8022250:	2200      	movs	r2, #0
 8022252:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8022256:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 802225a:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 802225e:	eba6 060a 	sub.w	r6, r6, sl
 8022262:	42b2      	cmp	r2, r6
 8022264:	bfc4      	itt	gt
 8022266:	eba1 020a 	subgt.w	r2, r1, sl
 802226a:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 802226e:	4a5c      	ldr	r2, [pc, #368]	; (80223e0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 8022270:	7812      	ldrb	r2, [r2, #0]
 8022272:	b9a2      	cbnz	r2, 802229e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 8022274:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8022278:	4286      	cmp	r6, r0
 802227a:	4640      	mov	r0, r8
 802227c:	9303      	str	r3, [sp, #12]
 802227e:	bf14      	ite	ne
 8022280:	2600      	movne	r6, #0
 8022282:	2601      	moveq	r6, #1
 8022284:	f7f4 facf 	bl	8016826 <_ZNK8touchgfx4Rect7isEmptyEv>
 8022288:	9b03      	ldr	r3, [sp, #12]
 802228a:	b160      	cbz	r0, 80222a6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 802228c:	2300      	movs	r3, #0
 802228e:	8023      	strh	r3, [r4, #0]
 8022290:	8063      	strh	r3, [r4, #2]
 8022292:	80a3      	strh	r3, [r4, #4]
 8022294:	4620      	mov	r0, r4
 8022296:	80e3      	strh	r3, [r4, #6]
 8022298:	b011      	add	sp, #68	; 0x44
 802229a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802229e:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 80222a2:	428e      	cmp	r6, r1
 80222a4:	e7e9      	b.n	802227a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 80222a6:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80222aa:	9205      	str	r2, [sp, #20]
 80222ac:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 80222b0:	9206      	str	r2, [sp, #24]
 80222b2:	f8bb 2000 	ldrh.w	r2, [fp]
 80222b6:	900e      	str	r0, [sp, #56]	; 0x38
 80222b8:	1a9b      	subs	r3, r3, r2
 80222ba:	b21b      	sxth	r3, r3
 80222bc:	9303      	str	r3, [sp, #12]
 80222be:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80222c2:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 80222c6:	ebaa 0a03 	sub.w	sl, sl, r3
 80222ca:	fa0f f38a 	sxth.w	r3, sl
 80222ce:	9304      	str	r3, [sp, #16]
 80222d0:	9b03      	ldr	r3, [sp, #12]
 80222d2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 80222d6:	9b04      	ldr	r3, [sp, #16]
 80222d8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80222dc:	9b05      	ldr	r3, [sp, #20]
 80222de:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80222e2:	a90e      	add	r1, sp, #56	; 0x38
 80222e4:	9b06      	ldr	r3, [sp, #24]
 80222e6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80222ea:	a80c      	add	r0, sp, #48	; 0x30
 80222ec:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 80222f0:	f7f8 fe7a 	bl	801afe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80222f4:	4640      	mov	r0, r8
 80222f6:	f7f8 fe33 	bl	801af60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80222fa:	a80e      	add	r0, sp, #56	; 0x38
 80222fc:	f7f8 fe30 	bl	801af60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022300:	4b38      	ldr	r3, [pc, #224]	; (80223e4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8022302:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8022306:	881b      	ldrh	r3, [r3, #0]
 8022308:	9307      	str	r3, [sp, #28]
 802230a:	682b      	ldr	r3, [r5, #0]
 802230c:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 80223e8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8022310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022312:	4628      	mov	r0, r5
 8022314:	4798      	blx	r3
 8022316:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 802231a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 802231e:	4681      	mov	r9, r0
 8022320:	fb1a 3305 	smlabb	r3, sl, r5, r3
 8022324:	f8db 0000 	ldr.w	r0, [fp]
 8022328:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 802232a:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 802232e:	6803      	ldr	r3, [r0, #0]
 8022330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022332:	4798      	blx	r3
 8022334:	4607      	mov	r7, r0
 8022336:	f8db 0000 	ldr.w	r0, [fp]
 802233a:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 802233e:	6803      	ldr	r3, [r0, #0]
 8022340:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8022344:	9109      	str	r1, [sp, #36]	; 0x24
 8022346:	9208      	str	r2, [sp, #32]
 8022348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802234a:	4798      	blx	r3
 802234c:	f010 0f01 	tst.w	r0, #1
 8022350:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8022354:	d012      	beq.n	802237c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 8022356:	f8db 0000 	ldr.w	r0, [fp]
 802235a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 802235e:	6803      	ldr	r3, [r0, #0]
 8022360:	9200      	str	r2, [sp, #0]
 8022362:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8022364:	e898 0006 	ldmia.w	r8, {r1, r2}
 8022368:	462b      	mov	r3, r5
 802236a:	47b0      	blx	r6
 802236c:	9b03      	ldr	r3, [sp, #12]
 802236e:	8023      	strh	r3, [r4, #0]
 8022370:	9b04      	ldr	r3, [sp, #16]
 8022372:	8063      	strh	r3, [r4, #2]
 8022374:	9b05      	ldr	r3, [sp, #20]
 8022376:	80a3      	strh	r3, [r4, #4]
 8022378:	9b06      	ldr	r3, [sp, #24]
 802237a:	e78b      	b.n	8022294 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 802237c:	fb09 f202 	mul.w	r2, r9, r2
 8022380:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8022384:	440f      	add	r7, r1
 8022386:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 802238a:	b166      	cbz	r6, 80223a6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 802238c:	9a07      	ldr	r2, [sp, #28]
 802238e:	4592      	cmp	sl, r2
 8022390:	d109      	bne.n	80223a6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8022392:	f8db 0000 	ldr.w	r0, [fp]
 8022396:	6802      	ldr	r2, [r0, #0]
 8022398:	fb09 f303 	mul.w	r3, r9, r3
 802239c:	6b56      	ldr	r6, [r2, #52]	; 0x34
 802239e:	4629      	mov	r1, r5
 80223a0:	463a      	mov	r2, r7
 80223a2:	47b0      	blx	r6
 80223a4:	e7e2      	b.n	802236c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 80223a6:	fb0a f303 	mul.w	r3, sl, r3
 80223aa:	f8df b03c 	ldr.w	fp, [pc, #60]	; 80223e8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 80223ae:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 80223b2:	ea4f 064a 	mov.w	r6, sl, lsl #1
 80223b6:	4545      	cmp	r5, r8
 80223b8:	d2d8      	bcs.n	802236c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 80223ba:	f8db 0000 	ldr.w	r0, [fp]
 80223be:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80223c2:	6802      	ldr	r2, [r0, #0]
 80223c4:	4629      	mov	r1, r5
 80223c6:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 80223ca:	005b      	lsls	r3, r3, #1
 80223cc:	463a      	mov	r2, r7
 80223ce:	47d0      	blx	sl
 80223d0:	444f      	add	r7, r9
 80223d2:	4435      	add	r5, r6
 80223d4:	e7ef      	b.n	80223b6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 80223d6:	bf00      	nop
 80223d8:	2000af3c 	.word	0x2000af3c
 80223dc:	2000af3e 	.word	0x2000af3e
 80223e0:	2000af40 	.word	0x2000af40
 80223e4:	2000af42 	.word	0x2000af42
 80223e8:	2000af48 	.word	0x2000af48

080223ec <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 80223ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80223ee:	4606      	mov	r6, r0
 80223f0:	b087      	sub	sp, #28
 80223f2:	460c      	mov	r4, r1
 80223f4:	4617      	mov	r7, r2
 80223f6:	461d      	mov	r5, r3
 80223f8:	b333      	cbz	r3, 8022448 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80223fa:	4608      	mov	r0, r1
 80223fc:	f7f4 fa13 	bl	8016826 <_ZNK8touchgfx4Rect7isEmptyEv>
 8022400:	bb10      	cbnz	r0, 8022448 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8022402:	6820      	ldr	r0, [r4, #0]
 8022404:	6861      	ldr	r1, [r4, #4]
 8022406:	4c1c      	ldr	r4, [pc, #112]	; (8022478 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8022408:	ab04      	add	r3, sp, #16
 802240a:	c303      	stmia	r3!, {r0, r1}
 802240c:	a804      	add	r0, sp, #16
 802240e:	f7f8 fda7 	bl	801af60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022412:	6820      	ldr	r0, [r4, #0]
 8022414:	6803      	ldr	r3, [r0, #0]
 8022416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022418:	4798      	blx	r3
 802241a:	2dff      	cmp	r5, #255	; 0xff
 802241c:	d016      	beq.n	802244c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 802241e:	f010 0f08 	tst.w	r0, #8
 8022422:	6820      	ldr	r0, [r4, #0]
 8022424:	d015      	beq.n	8022452 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8022426:	2400      	movs	r4, #0
 8022428:	6801      	ldr	r1, [r0, #0]
 802242a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 802242e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8022432:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8022436:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 802243a:	9401      	str	r4, [sp, #4]
 802243c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8022440:	9400      	str	r4, [sp, #0]
 8022442:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8022444:	4639      	mov	r1, r7
 8022446:	47a0      	blx	r4
 8022448:	b007      	add	sp, #28
 802244a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802244c:	f010 0f02 	tst.w	r0, #2
 8022450:	e7e7      	b.n	8022422 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8022452:	6803      	ldr	r3, [r0, #0]
 8022454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022456:	4798      	blx	r3
 8022458:	4b08      	ldr	r3, [pc, #32]	; (802247c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 802245a:	881a      	ldrh	r2, [r3, #0]
 802245c:	6833      	ldr	r3, [r6, #0]
 802245e:	e9cd 7500 	strd	r7, r5, [sp]
 8022462:	4601      	mov	r1, r0
 8022464:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8022466:	4630      	mov	r0, r6
 8022468:	ab04      	add	r3, sp, #16
 802246a:	47a8      	blx	r5
 802246c:	6820      	ldr	r0, [r4, #0]
 802246e:	6803      	ldr	r3, [r0, #0]
 8022470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022472:	4798      	blx	r3
 8022474:	e7e8      	b.n	8022448 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8022476:	bf00      	nop
 8022478:	2000af48 	.word	0x2000af48
 802247c:	2000af42 	.word	0x2000af42

08022480 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8022480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022484:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 8022488:	9e08      	ldr	r6, [sp, #32]
 802248a:	4688      	mov	r8, r1
 802248c:	4614      	mov	r4, r2
 802248e:	461d      	mov	r5, r3
 8022490:	2f00      	cmp	r7, #0
 8022492:	f000 80a9 	beq.w	80225e8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8022496:	4618      	mov	r0, r3
 8022498:	f7f4 f9c5 	bl	8016826 <_ZNK8touchgfx4Rect7isEmptyEv>
 802249c:	2800      	cmp	r0, #0
 802249e:	f040 80a3 	bne.w	80225e8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 80224a2:	f9b5 1000 	ldrsh.w	r1, [r5]
 80224a6:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80224aa:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 80224ae:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 80224b2:	fb04 1303 	mla	r3, r4, r3, r1
 80224b6:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 80224ba:	4365      	muls	r5, r4
 80224bc:	2fff      	cmp	r7, #255	; 0xff
 80224be:	eba4 0200 	sub.w	r2, r4, r0
 80224c2:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 80224c6:	ea4f 2816 	mov.w	r8, r6, lsr #8
 80224ca:	d04a      	beq.n	8022562 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 80224cc:	b2bc      	uxth	r4, r7
 80224ce:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 80224d2:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 80224d6:	fa5f f788 	uxtb.w	r7, r8
 80224da:	b2f3      	uxtb	r3, r6
 80224dc:	0040      	lsls	r0, r0, #1
 80224de:	fb0e fe04 	mul.w	lr, lr, r4
 80224e2:	4367      	muls	r7, r4
 80224e4:	4363      	muls	r3, r4
 80224e6:	ea4f 0842 	mov.w	r8, r2, lsl #1
 80224ea:	fa1f fc8c 	uxth.w	ip, ip
 80224ee:	42a9      	cmp	r1, r5
 80224f0:	d27a      	bcs.n	80225e8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 80224f2:	eb01 0900 	add.w	r9, r1, r0
 80224f6:	4549      	cmp	r1, r9
 80224f8:	d231      	bcs.n	802255e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 80224fa:	880a      	ldrh	r2, [r1, #0]
 80224fc:	1214      	asrs	r4, r2, #8
 80224fe:	10d6      	asrs	r6, r2, #3
 8022500:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8022504:	00d2      	lsls	r2, r2, #3
 8022506:	b2d2      	uxtb	r2, r2
 8022508:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802250c:	fb14 f40c 	smulbb	r4, r4, ip
 8022510:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8022514:	4474      	add	r4, lr
 8022516:	fb12 f20c 	smulbb	r2, r2, ip
 802251a:	b2a4      	uxth	r4, r4
 802251c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022520:	441a      	add	r2, r3
 8022522:	b292      	uxth	r2, r2
 8022524:	f104 0a01 	add.w	sl, r4, #1
 8022528:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 802252c:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8022530:	fb16 f60c 	smulbb	r6, r6, ip
 8022534:	f102 0a01 	add.w	sl, r2, #1
 8022538:	443e      	add	r6, r7
 802253a:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 802253e:	b2b6      	uxth	r6, r6
 8022540:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8022544:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022548:	4322      	orrs	r2, r4
 802254a:	1c74      	adds	r4, r6, #1
 802254c:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8022550:	0976      	lsrs	r6, r6, #5
 8022552:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8022556:	4332      	orrs	r2, r6
 8022558:	f821 2b02 	strh.w	r2, [r1], #2
 802255c:	e7cb      	b.n	80224f6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 802255e:	4441      	add	r1, r8
 8022560:	e7c5      	b.n	80224ee <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 8022562:	4f22      	ldr	r7, [pc, #136]	; (80225ec <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 8022564:	0973      	lsrs	r3, r6, #5
 8022566:	ea08 0707 	and.w	r7, r8, r7
 802256a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802256e:	433b      	orrs	r3, r7
 8022570:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8022574:	4333      	orrs	r3, r6
 8022576:	07e7      	lsls	r7, r4, #31
 8022578:	b29b      	uxth	r3, r3
 802257a:	d50b      	bpl.n	8022594 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 802257c:	0040      	lsls	r0, r0, #1
 802257e:	0052      	lsls	r2, r2, #1
 8022580:	42a9      	cmp	r1, r5
 8022582:	d231      	bcs.n	80225e8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8022584:	180c      	adds	r4, r1, r0
 8022586:	42a1      	cmp	r1, r4
 8022588:	d202      	bcs.n	8022590 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 802258a:	f821 3b02 	strh.w	r3, [r1], #2
 802258e:	e7fa      	b.n	8022586 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 8022590:	4411      	add	r1, r2
 8022592:	e7f5      	b.n	8022580 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 8022594:	078e      	lsls	r6, r1, #30
 8022596:	d008      	beq.n	80225aa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8022598:	0066      	lsls	r6, r4, #1
 802259a:	460a      	mov	r2, r1
 802259c:	42aa      	cmp	r2, r5
 802259e:	d202      	bcs.n	80225a6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 80225a0:	8013      	strh	r3, [r2, #0]
 80225a2:	4432      	add	r2, r6
 80225a4:	e7fa      	b.n	802259c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 80225a6:	3102      	adds	r1, #2
 80225a8:	3801      	subs	r0, #1
 80225aa:	07c2      	lsls	r2, r0, #31
 80225ac:	d50b      	bpl.n	80225c6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 80225ae:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 80225b2:	3a01      	subs	r2, #1
 80225b4:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80225b8:	0066      	lsls	r6, r4, #1
 80225ba:	42aa      	cmp	r2, r5
 80225bc:	d202      	bcs.n	80225c4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 80225be:	8013      	strh	r3, [r2, #0]
 80225c0:	4432      	add	r2, r6
 80225c2:	e7fa      	b.n	80225ba <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 80225c4:	3801      	subs	r0, #1
 80225c6:	b178      	cbz	r0, 80225e8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 80225c8:	1040      	asrs	r0, r0, #1
 80225ca:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 80225ce:	0080      	lsls	r0, r0, #2
 80225d0:	0064      	lsls	r4, r4, #1
 80225d2:	42a9      	cmp	r1, r5
 80225d4:	d208      	bcs.n	80225e8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 80225d6:	180e      	adds	r6, r1, r0
 80225d8:	460a      	mov	r2, r1
 80225da:	42b2      	cmp	r2, r6
 80225dc:	d202      	bcs.n	80225e4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 80225de:	f842 3b04 	str.w	r3, [r2], #4
 80225e2:	e7fa      	b.n	80225da <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 80225e4:	4421      	add	r1, r4
 80225e6:	e7f4      	b.n	80225d2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 80225e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80225ec:	00fff800 	.word	0x00fff800

080225f0 <_ZN8touchgfx8LCD16bppC1Ev>:
 80225f0:	2200      	movs	r2, #0
 80225f2:	4912      	ldr	r1, [pc, #72]	; (802263c <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 80225f4:	6042      	str	r2, [r0, #4]
 80225f6:	6001      	str	r1, [r0, #0]
 80225f8:	e9c0 2202 	strd	r2, r2, [r0, #8]
 80225fc:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8022600:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8022604:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8022608:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 802260c:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8022610:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8022614:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8022618:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 802261c:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8022620:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8022624:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8022628:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 802262c:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8022630:	e9c0 221e 	strd	r2, r2, [r0, #120]	; 0x78
 8022634:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 8022638:	4770      	bx	lr
 802263a:	bf00      	nop
 802263c:	0802fb00 	.word	0x0802fb00

08022640 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8022640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022644:	460d      	mov	r5, r1
 8022646:	b08d      	sub	sp, #52	; 0x34
 8022648:	4604      	mov	r4, r0
 802264a:	6808      	ldr	r0, [r1, #0]
 802264c:	6849      	ldr	r1, [r1, #4]
 802264e:	4699      	mov	r9, r3
 8022650:	ab08      	add	r3, sp, #32
 8022652:	c303      	stmia	r3!, {r0, r1}
 8022654:	6810      	ldr	r0, [r2, #0]
 8022656:	6851      	ldr	r1, [r2, #4]
 8022658:	ab0a      	add	r3, sp, #40	; 0x28
 802265a:	c303      	stmia	r3!, {r0, r1}
 802265c:	a808      	add	r0, sp, #32
 802265e:	f7f8 fc7f 	bl	801af60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022662:	4629      	mov	r1, r5
 8022664:	a80a      	add	r0, sp, #40	; 0x28
 8022666:	f7f8 fcbf 	bl	801afe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802266a:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 802266e:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8022672:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8022676:	4d63      	ldr	r5, [pc, #396]	; (8022804 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8022678:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 802267c:	6828      	ldr	r0, [r5, #0]
 802267e:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8022682:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022686:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 802268a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 802268e:	440a      	add	r2, r1
 8022690:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8022694:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8022698:	4413      	add	r3, r2
 802269a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 802269e:	6803      	ldr	r3, [r0, #0]
 80226a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80226a2:	4798      	blx	r3
 80226a4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80226a8:	d119      	bne.n	80226de <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 80226aa:	f010 0f20 	tst.w	r0, #32
 80226ae:	6828      	ldr	r0, [r5, #0]
 80226b0:	d018      	beq.n	80226e4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 80226b2:	2500      	movs	r5, #0
 80226b4:	6801      	ldr	r1, [r0, #0]
 80226b6:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 80226ba:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80226be:	e9cd 9503 	strd	r9, r5, [sp, #12]
 80226c2:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 80226c6:	9502      	str	r5, [sp, #8]
 80226c8:	b2b6      	uxth	r6, r6
 80226ca:	fa1f f588 	uxth.w	r5, r8
 80226ce:	9601      	str	r6, [sp, #4]
 80226d0:	9500      	str	r5, [sp, #0]
 80226d2:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 80226d4:	4621      	mov	r1, r4
 80226d6:	47a8      	blx	r5
 80226d8:	b00d      	add	sp, #52	; 0x34
 80226da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80226de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80226e2:	e7e4      	b.n	80226ae <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 80226e4:	6803      	ldr	r3, [r0, #0]
 80226e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80226e8:	4798      	blx	r3
 80226ea:	4947      	ldr	r1, [pc, #284]	; (8022808 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 80226ec:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 80226f0:	880b      	ldrh	r3, [r1, #0]
 80226f2:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 80226f6:	fb03 5202 	mla	r2, r3, r2, r5
 80226fa:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80226fe:	4373      	muls	r3, r6
 8022700:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8022704:	9307      	str	r3, [sp, #28]
 8022706:	ea4f 0348 	mov.w	r3, r8, lsl #1
 802270a:	9306      	str	r3, [sp, #24]
 802270c:	468a      	mov	sl, r1
 802270e:	9b07      	ldr	r3, [sp, #28]
 8022710:	4298      	cmp	r0, r3
 8022712:	d270      	bcs.n	80227f6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8022714:	9b06      	ldr	r3, [sp, #24]
 8022716:	4621      	mov	r1, r4
 8022718:	eb00 0b03 	add.w	fp, r0, r3
 802271c:	4558      	cmp	r0, fp
 802271e:	d25d      	bcs.n	80227dc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8022720:	f851 4b04 	ldr.w	r4, [r1], #4
 8022724:	0e23      	lsrs	r3, r4, #24
 8022726:	d014      	beq.n	8022752 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8022728:	2bff      	cmp	r3, #255	; 0xff
 802272a:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 802272e:	d112      	bne.n	8022756 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8022730:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022734:	d10f      	bne.n	8022756 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8022736:	0963      	lsrs	r3, r4, #5
 8022738:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802273c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022740:	f02c 0c07 	bic.w	ip, ip, #7
 8022744:	ea43 0c0c 	orr.w	ip, r3, ip
 8022748:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 802274c:	ea4c 0404 	orr.w	r4, ip, r4
 8022750:	8004      	strh	r4, [r0, #0]
 8022752:	3002      	adds	r0, #2
 8022754:	e7e2      	b.n	802271c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8022756:	fb09 f303 	mul.w	r3, r9, r3
 802275a:	8807      	ldrh	r7, [r0, #0]
 802275c:	1c5a      	adds	r2, r3, #1
 802275e:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8022762:	1212      	asrs	r2, r2, #8
 8022764:	123e      	asrs	r6, r7, #8
 8022766:	b293      	uxth	r3, r2
 8022768:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 802276c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8022770:	43d2      	mvns	r2, r2
 8022772:	b2d2      	uxtb	r2, r2
 8022774:	10fd      	asrs	r5, r7, #3
 8022776:	fb1e fe03 	smulbb	lr, lr, r3
 802277a:	00ff      	lsls	r7, r7, #3
 802277c:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8022780:	fb06 e602 	mla	r6, r6, r2, lr
 8022784:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022788:	b2ff      	uxtb	r7, r7
 802278a:	fa5f fc8c 	uxtb.w	ip, ip
 802278e:	b2e4      	uxtb	r4, r4
 8022790:	b2b6      	uxth	r6, r6
 8022792:	fb1c fc03 	smulbb	ip, ip, r3
 8022796:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 802279a:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 802279e:	fb14 f403 	smulbb	r4, r4, r3
 80227a2:	fb05 c502 	mla	r5, r5, r2, ip
 80227a6:	f106 0e01 	add.w	lr, r6, #1
 80227aa:	fb07 4702 	mla	r7, r7, r2, r4
 80227ae:	b2ad      	uxth	r5, r5
 80227b0:	b2bf      	uxth	r7, r7
 80227b2:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 80227b6:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 80227ba:	f105 0c01 	add.w	ip, r5, #1
 80227be:	1c7e      	adds	r6, r7, #1
 80227c0:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 80227c4:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80227c8:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80227cc:	096d      	lsrs	r5, r5, #5
 80227ce:	ea46 060e 	orr.w	r6, r6, lr
 80227d2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80227d6:	432e      	orrs	r6, r5
 80227d8:	8006      	strh	r6, [r0, #0]
 80227da:	e7ba      	b.n	8022752 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 80227dc:	f8ba 3000 	ldrh.w	r3, [sl]
 80227e0:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 80227e4:	eba3 0308 	sub.w	r3, r3, r8
 80227e8:	eba4 0408 	sub.w	r4, r4, r8
 80227ec:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80227f0:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 80227f4:	e78b      	b.n	802270e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 80227f6:	4b03      	ldr	r3, [pc, #12]	; (8022804 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 80227f8:	6818      	ldr	r0, [r3, #0]
 80227fa:	6803      	ldr	r3, [r0, #0]
 80227fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80227fe:	4798      	blx	r3
 8022800:	e76a      	b.n	80226d8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8022802:	bf00      	nop
 8022804:	2000af48 	.word	0x2000af48
 8022808:	2000af42 	.word	0x2000af42

0802280c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 802280c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022810:	460c      	mov	r4, r1
 8022812:	b085      	sub	sp, #20
 8022814:	6810      	ldr	r0, [r2, #0]
 8022816:	6851      	ldr	r1, [r2, #4]
 8022818:	466d      	mov	r5, sp
 802281a:	c503      	stmia	r5!, {r0, r1}
 802281c:	6818      	ldr	r0, [r3, #0]
 802281e:	6859      	ldr	r1, [r3, #4]
 8022820:	4616      	mov	r6, r2
 8022822:	c503      	stmia	r5!, {r0, r1}
 8022824:	4668      	mov	r0, sp
 8022826:	f7f8 fb9b 	bl	801af60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802282a:	4631      	mov	r1, r6
 802282c:	a802      	add	r0, sp, #8
 802282e:	f7f8 fbdb 	bl	801afe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022832:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8022836:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 802283a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 802283e:	4d28      	ldr	r5, [pc, #160]	; (80228e0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8022840:	4e28      	ldr	r6, [pc, #160]	; (80228e4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8022842:	6828      	ldr	r0, [r5, #0]
 8022844:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8022848:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 802284c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022850:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8022854:	f8bd 1000 	ldrh.w	r1, [sp]
 8022858:	440a      	add	r2, r1
 802285a:	f8ad 2008 	strh.w	r2, [sp, #8]
 802285e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8022862:	4413      	add	r3, r2
 8022864:	f8ad 300a 	strh.w	r3, [sp, #10]
 8022868:	6803      	ldr	r3, [r0, #0]
 802286a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802286c:	4798      	blx	r3
 802286e:	8833      	ldrh	r3, [r6, #0]
 8022870:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8022874:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8022878:	f8df e06c 	ldr.w	lr, [pc, #108]	; 80228e8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 802287c:	fb03 1202 	mla	r2, r3, r2, r1
 8022880:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022884:	fb08 f303 	mul.w	r3, r8, r3
 8022888:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 802288c:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8022890:	4298      	cmp	r0, r3
 8022892:	d21d      	bcs.n	80228d0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8022894:	eb00 080c 	add.w	r8, r0, ip
 8022898:	4540      	cmp	r0, r8
 802289a:	d20f      	bcs.n	80228bc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 802289c:	f854 1b04 	ldr.w	r1, [r4], #4
 80228a0:	ea4f 1951 	mov.w	r9, r1, lsr #5
 80228a4:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 80228a8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80228ac:	ea42 0209 	orr.w	r2, r2, r9
 80228b0:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80228b4:	430a      	orrs	r2, r1
 80228b6:	f820 2b02 	strh.w	r2, [r0], #2
 80228ba:	e7ed      	b.n	8022898 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 80228bc:	8832      	ldrh	r2, [r6, #0]
 80228be:	1bd2      	subs	r2, r2, r7
 80228c0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80228c4:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80228c8:	1bd2      	subs	r2, r2, r7
 80228ca:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80228ce:	e7df      	b.n	8022890 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 80228d0:	6828      	ldr	r0, [r5, #0]
 80228d2:	6803      	ldr	r3, [r0, #0]
 80228d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80228d6:	4798      	blx	r3
 80228d8:	b005      	add	sp, #20
 80228da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80228de:	bf00      	nop
 80228e0:	2000af48 	.word	0x2000af48
 80228e4:	2000af42 	.word	0x2000af42
 80228e8:	fffff800 	.word	0xfffff800

080228ec <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 80228ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80228f0:	460e      	mov	r6, r1
 80228f2:	b08e      	sub	sp, #56	; 0x38
 80228f4:	4604      	mov	r4, r0
 80228f6:	6808      	ldr	r0, [r1, #0]
 80228f8:	6849      	ldr	r1, [r1, #4]
 80228fa:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8022ad4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 80228fe:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 8022ad8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 8022902:	461d      	mov	r5, r3
 8022904:	ab0a      	add	r3, sp, #40	; 0x28
 8022906:	c303      	stmia	r3!, {r0, r1}
 8022908:	6810      	ldr	r0, [r2, #0]
 802290a:	6851      	ldr	r1, [r2, #4]
 802290c:	ab0c      	add	r3, sp, #48	; 0x30
 802290e:	c303      	stmia	r3!, {r0, r1}
 8022910:	a80a      	add	r0, sp, #40	; 0x28
 8022912:	f7f8 fb25 	bl	801af60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022916:	4631      	mov	r1, r6
 8022918:	a80c      	add	r0, sp, #48	; 0x30
 802291a:	f7f8 fb65 	bl	801afe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802291e:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8022922:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8022926:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 802292a:	f8d8 0000 	ldr.w	r0, [r8]
 802292e:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8022932:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 8022936:	fb11 2103 	smlabb	r1, r1, r3, r2
 802293a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802293e:	440c      	add	r4, r1
 8022940:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8022944:	440a      	add	r2, r1
 8022946:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 802294a:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 802294e:	4413      	add	r3, r2
 8022950:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8022954:	6803      	ldr	r3, [r0, #0]
 8022956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022958:	4798      	blx	r3
 802295a:	2dff      	cmp	r5, #255	; 0xff
 802295c:	d124      	bne.n	80229a8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 802295e:	f010 0f01 	tst.w	r0, #1
 8022962:	f8d8 0000 	ldr.w	r0, [r8]
 8022966:	d022      	beq.n	80229ae <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8022968:	2100      	movs	r1, #0
 802296a:	f8d0 c000 	ldr.w	ip, [r0]
 802296e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8022972:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8022976:	e9cd 1107 	strd	r1, r1, [sp, #28]
 802297a:	f04f 0e01 	mov.w	lr, #1
 802297e:	f8cd e018 	str.w	lr, [sp, #24]
 8022982:	f8b9 e000 	ldrh.w	lr, [r9]
 8022986:	9503      	str	r5, [sp, #12]
 8022988:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 802298c:	b2b6      	uxth	r6, r6
 802298e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8022992:	9102      	str	r1, [sp, #8]
 8022994:	b2bf      	uxth	r7, r7
 8022996:	9601      	str	r6, [sp, #4]
 8022998:	9700      	str	r7, [sp, #0]
 802299a:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 802299e:	4621      	mov	r1, r4
 80229a0:	47a8      	blx	r5
 80229a2:	b00e      	add	sp, #56	; 0x38
 80229a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80229a8:	f010 0f04 	tst.w	r0, #4
 80229ac:	e7d9      	b.n	8022962 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 80229ae:	6803      	ldr	r3, [r0, #0]
 80229b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80229b2:	4798      	blx	r3
 80229b4:	f8b9 3000 	ldrh.w	r3, [r9]
 80229b8:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 80229bc:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 80229c0:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 80229c4:	fb03 1202 	mla	r2, r3, r2, r1
 80229c8:	ebac 0c07 	sub.w	ip, ip, r7
 80229cc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80229d0:	435e      	muls	r6, r3
 80229d2:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 80229d6:	2dff      	cmp	r5, #255	; 0xff
 80229d8:	eba3 0707 	sub.w	r7, r3, r7
 80229dc:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80229e0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80229e4:	ea4f 0747 	mov.w	r7, r7, lsl #1
 80229e8:	d049      	beq.n	8022a7e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 80229ea:	43eb      	mvns	r3, r5
 80229ec:	fa1f f985 	uxth.w	r9, r5
 80229f0:	b2db      	uxtb	r3, r3
 80229f2:	42b0      	cmp	r0, r6
 80229f4:	d266      	bcs.n	8022ac4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 80229f6:	eb00 0a0e 	add.w	sl, r0, lr
 80229fa:	4550      	cmp	r0, sl
 80229fc:	4621      	mov	r1, r4
 80229fe:	f104 0403 	add.w	r4, r4, #3
 8022a02:	d25b      	bcs.n	8022abc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 8022a04:	8802      	ldrh	r2, [r0, #0]
 8022a06:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8022a0a:	ea4f 2822 	mov.w	r8, r2, asr #8
 8022a0e:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8022a12:	fb11 f109 	smulbb	r1, r1, r9
 8022a16:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 8022a1a:	10d5      	asrs	r5, r2, #3
 8022a1c:	fb08 1803 	mla	r8, r8, r3, r1
 8022a20:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8022a24:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022a28:	fb11 f109 	smulbb	r1, r1, r9
 8022a2c:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8022a30:	fb05 1503 	mla	r5, r5, r3, r1
 8022a34:	00d2      	lsls	r2, r2, #3
 8022a36:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8022a3a:	b2d2      	uxtb	r2, r2
 8022a3c:	fb11 f109 	smulbb	r1, r1, r9
 8022a40:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8022a44:	fa1f f888 	uxth.w	r8, r8
 8022a48:	fb02 1203 	mla	r2, r2, r3, r1
 8022a4c:	b292      	uxth	r2, r2
 8022a4e:	f108 0101 	add.w	r1, r8, #1
 8022a52:	b2ad      	uxth	r5, r5
 8022a54:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8022a58:	1c51      	adds	r1, r2, #1
 8022a5a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8022a5e:	1c69      	adds	r1, r5, #1
 8022a60:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8022a64:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 8022a68:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022a6c:	096d      	lsrs	r5, r5, #5
 8022a6e:	ea42 0208 	orr.w	r2, r2, r8
 8022a72:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022a76:	432a      	orrs	r2, r5
 8022a78:	f820 2b02 	strh.w	r2, [r0], #2
 8022a7c:	e7bd      	b.n	80229fa <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 8022a7e:	4a14      	ldr	r2, [pc, #80]	; (8022ad0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8022a80:	42b0      	cmp	r0, r6
 8022a82:	d21f      	bcs.n	8022ac4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8022a84:	eb00 050e 	add.w	r5, r0, lr
 8022a88:	42a8      	cmp	r0, r5
 8022a8a:	4621      	mov	r1, r4
 8022a8c:	f104 0403 	add.w	r4, r4, #3
 8022a90:	d210      	bcs.n	8022ab4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 8022a92:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8022a96:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8022a9a:	00db      	lsls	r3, r3, #3
 8022a9c:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8022aa0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022aa4:	430b      	orrs	r3, r1
 8022aa6:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8022aaa:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 8022aae:	f820 3b02 	strh.w	r3, [r0], #2
 8022ab2:	e7e9      	b.n	8022a88 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 8022ab4:	4438      	add	r0, r7
 8022ab6:	eb01 040c 	add.w	r4, r1, ip
 8022aba:	e7e1      	b.n	8022a80 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 8022abc:	4438      	add	r0, r7
 8022abe:	eb01 040c 	add.w	r4, r1, ip
 8022ac2:	e796      	b.n	80229f2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 8022ac4:	4b03      	ldr	r3, [pc, #12]	; (8022ad4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 8022ac6:	6818      	ldr	r0, [r3, #0]
 8022ac8:	6803      	ldr	r3, [r0, #0]
 8022aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022acc:	4798      	blx	r3
 8022ace:	e768      	b.n	80229a2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 8022ad0:	fffff800 	.word	0xfffff800
 8022ad4:	2000af48 	.word	0x2000af48
 8022ad8:	2000af42 	.word	0x2000af42

08022adc <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8022adc:	b4f0      	push	{r4, r5, r6, r7}
 8022ade:	4616      	mov	r6, r2
 8022ae0:	2e01      	cmp	r6, #1
 8022ae2:	461c      	mov	r4, r3
 8022ae4:	460d      	mov	r5, r1
 8022ae6:	9a04      	ldr	r2, [sp, #16]
 8022ae8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8022aec:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8022af0:	d012      	beq.n	8022b18 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 8022af2:	d303      	bcc.n	8022afc <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 8022af4:	2e02      	cmp	r6, #2
 8022af6:	d00a      	beq.n	8022b0e <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 8022af8:	bcf0      	pop	{r4, r5, r6, r7}
 8022afa:	4770      	bx	lr
 8022afc:	6805      	ldr	r5, [r0, #0]
 8022afe:	e9cd 3704 	strd	r3, r7, [sp, #16]
 8022b02:	68ed      	ldr	r5, [r5, #12]
 8022b04:	4613      	mov	r3, r2
 8022b06:	46ac      	mov	ip, r5
 8022b08:	4622      	mov	r2, r4
 8022b0a:	bcf0      	pop	{r4, r5, r6, r7}
 8022b0c:	4760      	bx	ip
 8022b0e:	4621      	mov	r1, r4
 8022b10:	4628      	mov	r0, r5
 8022b12:	bcf0      	pop	{r4, r5, r6, r7}
 8022b14:	f7ff bd94 	b.w	8022640 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022b18:	4621      	mov	r1, r4
 8022b1a:	4628      	mov	r0, r5
 8022b1c:	bcf0      	pop	{r4, r5, r6, r7}
 8022b1e:	f7ff bee5 	b.w	80228ec <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

08022b24 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8022b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b28:	4681      	mov	r9, r0
 8022b2a:	b093      	sub	sp, #76	; 0x4c
 8022b2c:	6810      	ldr	r0, [r2, #0]
 8022b2e:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 8022b32:	4f6d      	ldr	r7, [pc, #436]	; (8022ce8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8022b34:	4688      	mov	r8, r1
 8022b36:	6851      	ldr	r1, [r2, #4]
 8022b38:	ac0e      	add	r4, sp, #56	; 0x38
 8022b3a:	c403      	stmia	r4!, {r0, r1}
 8022b3c:	6818      	ldr	r0, [r3, #0]
 8022b3e:	6859      	ldr	r1, [r3, #4]
 8022b40:	ac10      	add	r4, sp, #64	; 0x40
 8022b42:	4616      	mov	r6, r2
 8022b44:	c403      	stmia	r4!, {r0, r1}
 8022b46:	a80e      	add	r0, sp, #56	; 0x38
 8022b48:	f7f8 fa0a 	bl	801af60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022b4c:	4631      	mov	r1, r6
 8022b4e:	a810      	add	r0, sp, #64	; 0x40
 8022b50:	f7f8 fa4a 	bl	801afe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022b54:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8022b58:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8022b5c:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8022b60:	4e62      	ldr	r6, [pc, #392]	; (8022cec <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8022b62:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 8022b66:	6830      	ldr	r0, [r6, #0]
 8022b68:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 8022b6c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022b70:	4489      	add	r9, r1
 8022b72:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8022b76:	440a      	add	r2, r1
 8022b78:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8022b7c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8022b80:	4413      	add	r3, r2
 8022b82:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8022b86:	6803      	ldr	r3, [r0, #0]
 8022b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022b8a:	4798      	blx	r3
 8022b8c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8022b90:	6830      	ldr	r0, [r6, #0]
 8022b92:	d01d      	beq.n	8022bd0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8022b94:	2200      	movs	r2, #0
 8022b96:	6801      	ldr	r1, [r0, #0]
 8022b98:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8022b9c:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8022ba0:	220b      	movs	r2, #11
 8022ba2:	9207      	str	r2, [sp, #28]
 8022ba4:	883a      	ldrh	r2, [r7, #0]
 8022ba6:	9206      	str	r2, [sp, #24]
 8022ba8:	2201      	movs	r2, #1
 8022baa:	e9cd a204 	strd	sl, r2, [sp, #16]
 8022bae:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8022bb2:	9203      	str	r2, [sp, #12]
 8022bb4:	b2a4      	uxth	r4, r4
 8022bb6:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8022bba:	9200      	str	r2, [sp, #0]
 8022bbc:	b2ad      	uxth	r5, r5
 8022bbe:	9502      	str	r5, [sp, #8]
 8022bc0:	9401      	str	r4, [sp, #4]
 8022bc2:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8022bc4:	4642      	mov	r2, r8
 8022bc6:	4649      	mov	r1, r9
 8022bc8:	47a0      	blx	r4
 8022bca:	b013      	add	sp, #76	; 0x4c
 8022bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022bd0:	6803      	ldr	r3, [r0, #0]
 8022bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022bd4:	4798      	blx	r3
 8022bd6:	883b      	ldrh	r3, [r7, #0]
 8022bd8:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 8022bdc:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 8022be0:	fb03 1202 	mla	r2, r3, r2, r1
 8022be4:	435d      	muls	r5, r3
 8022be6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022bea:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 8022bee:	920c      	str	r2, [sp, #48]	; 0x30
 8022bf0:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8022bf4:	1b12      	subs	r2, r2, r4
 8022bf6:	920d      	str	r2, [sp, #52]	; 0x34
 8022bf8:	0062      	lsls	r2, r4, #1
 8022bfa:	1b1c      	subs	r4, r3, r4
 8022bfc:	0063      	lsls	r3, r4, #1
 8022bfe:	920a      	str	r2, [sp, #40]	; 0x28
 8022c00:	930b      	str	r3, [sp, #44]	; 0x2c
 8022c02:	f04f 0e04 	mov.w	lr, #4
 8022c06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022c08:	4298      	cmp	r0, r3
 8022c0a:	d266      	bcs.n	8022cda <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 8022c0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022c0e:	eb00 0b03 	add.w	fp, r0, r3
 8022c12:	4558      	cmp	r0, fp
 8022c14:	d25c      	bcs.n	8022cd0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8022c16:	f819 3b01 	ldrb.w	r3, [r9], #1
 8022c1a:	fb1e e303 	smlabb	r3, lr, r3, lr
 8022c1e:	f858 2003 	ldr.w	r2, [r8, r3]
 8022c22:	0e11      	lsrs	r1, r2, #24
 8022c24:	d012      	beq.n	8022c4c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8022c26:	29ff      	cmp	r1, #255	; 0xff
 8022c28:	ea4f 2712 	mov.w	r7, r2, lsr #8
 8022c2c:	d110      	bne.n	8022c50 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8022c2e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022c32:	d10d      	bne.n	8022c50 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8022c34:	0953      	lsrs	r3, r2, #5
 8022c36:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 8022c3a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022c3e:	f027 0707 	bic.w	r7, r7, #7
 8022c42:	431f      	orrs	r7, r3
 8022c44:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022c48:	433a      	orrs	r2, r7
 8022c4a:	8002      	strh	r2, [r0, #0]
 8022c4c:	3002      	adds	r0, #2
 8022c4e:	e7e0      	b.n	8022c12 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 8022c50:	fb0a f101 	mul.w	r1, sl, r1
 8022c54:	8806      	ldrh	r6, [r0, #0]
 8022c56:	1c4b      	adds	r3, r1, #1
 8022c58:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8022c5c:	1235      	asrs	r5, r6, #8
 8022c5e:	10f4      	asrs	r4, r6, #3
 8022c60:	121b      	asrs	r3, r3, #8
 8022c62:	00f6      	lsls	r6, r6, #3
 8022c64:	b299      	uxth	r1, r3
 8022c66:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8022c6a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022c6e:	b2f6      	uxtb	r6, r6
 8022c70:	43db      	mvns	r3, r3
 8022c72:	b2d2      	uxtb	r2, r2
 8022c74:	b2db      	uxtb	r3, r3
 8022c76:	fb1c fc01 	smulbb	ip, ip, r1
 8022c7a:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8022c7e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8022c82:	fb12 f201 	smulbb	r2, r2, r1
 8022c86:	fb05 c503 	mla	r5, r5, r3, ip
 8022c8a:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8022c8e:	b2ff      	uxtb	r7, r7
 8022c90:	fb06 2203 	mla	r2, r6, r3, r2
 8022c94:	b2ad      	uxth	r5, r5
 8022c96:	fb17 f701 	smulbb	r7, r7, r1
 8022c9a:	b292      	uxth	r2, r2
 8022c9c:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8022ca0:	fb04 7403 	mla	r4, r4, r3, r7
 8022ca4:	f105 0c01 	add.w	ip, r5, #1
 8022ca8:	1c57      	adds	r7, r2, #1
 8022caa:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8022cae:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8022cb2:	b2a4      	uxth	r4, r4
 8022cb4:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022cb8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8022cbc:	433d      	orrs	r5, r7
 8022cbe:	1c67      	adds	r7, r4, #1
 8022cc0:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 8022cc4:	0964      	lsrs	r4, r4, #5
 8022cc6:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8022cca:	4325      	orrs	r5, r4
 8022ccc:	8005      	strh	r5, [r0, #0]
 8022cce:	e7bd      	b.n	8022c4c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8022cd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022cd2:	4418      	add	r0, r3
 8022cd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022cd6:	4499      	add	r9, r3
 8022cd8:	e795      	b.n	8022c06 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 8022cda:	4b04      	ldr	r3, [pc, #16]	; (8022cec <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8022cdc:	6818      	ldr	r0, [r3, #0]
 8022cde:	6803      	ldr	r3, [r0, #0]
 8022ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022ce2:	4798      	blx	r3
 8022ce4:	e771      	b.n	8022bca <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 8022ce6:	bf00      	nop
 8022ce8:	2000af42 	.word	0x2000af42
 8022cec:	2000af48 	.word	0x2000af48

08022cf0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8022cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022cf4:	b087      	sub	sp, #28
 8022cf6:	4680      	mov	r8, r0
 8022cf8:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 8022cfc:	460d      	mov	r5, r1
 8022cfe:	4614      	mov	r4, r2
 8022d00:	2e00      	cmp	r6, #0
 8022d02:	f000 80b9 	beq.w	8022e78 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 8022d06:	6810      	ldr	r0, [r2, #0]
 8022d08:	6851      	ldr	r1, [r2, #4]
 8022d0a:	af02      	add	r7, sp, #8
 8022d0c:	c703      	stmia	r7!, {r0, r1}
 8022d0e:	6818      	ldr	r0, [r3, #0]
 8022d10:	6859      	ldr	r1, [r3, #4]
 8022d12:	af04      	add	r7, sp, #16
 8022d14:	c703      	stmia	r7!, {r0, r1}
 8022d16:	a802      	add	r0, sp, #8
 8022d18:	f7f8 f922 	bl	801af60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022d1c:	4621      	mov	r1, r4
 8022d1e:	a804      	add	r0, sp, #16
 8022d20:	f7f8 f962 	bl	801afe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022d24:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022d28:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022d2c:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8022d30:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8022d34:	fb14 2103 	smlabb	r1, r4, r3, r2
 8022d38:	eb08 0401 	add.w	r4, r8, r1
 8022d3c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8022d40:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8022d44:	440a      	add	r2, r1
 8022d46:	f8ad 2010 	strh.w	r2, [sp, #16]
 8022d4a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8022d4e:	4413      	add	r3, r2
 8022d50:	f8ad 3012 	strh.w	r3, [sp, #18]
 8022d54:	4b4a      	ldr	r3, [pc, #296]	; (8022e80 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8022d56:	6818      	ldr	r0, [r3, #0]
 8022d58:	6803      	ldr	r3, [r0, #0]
 8022d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022d5c:	4798      	blx	r3
 8022d5e:	4b49      	ldr	r3, [pc, #292]	; (8022e84 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 8022d60:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8022d64:	881a      	ldrh	r2, [r3, #0]
 8022d66:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8022d6a:	2eff      	cmp	r6, #255	; 0xff
 8022d6c:	fb02 c101 	mla	r1, r2, r1, ip
 8022d70:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8022d74:	fb02 f207 	mul.w	r2, r2, r7
 8022d78:	f105 0104 	add.w	r1, r5, #4
 8022d7c:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8022d80:	461d      	mov	r5, r3
 8022d82:	d05a      	beq.n	8022e3a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 8022d84:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 8022d88:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8022d8c:	b2b6      	uxth	r6, r6
 8022d8e:	fa1f fe8e 	uxth.w	lr, lr
 8022d92:	9301      	str	r3, [sp, #4]
 8022d94:	4282      	cmp	r2, r0
 8022d96:	d96a      	bls.n	8022e6e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8022d98:	eb00 0b0a 	add.w	fp, r0, sl
 8022d9c:	4583      	cmp	fp, r0
 8022d9e:	d940      	bls.n	8022e22 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 8022da0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8022da4:	8805      	ldrh	r5, [r0, #0]
 8022da6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8022daa:	122f      	asrs	r7, r5, #8
 8022dac:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8022db0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8022db4:	fb17 f70e 	smulbb	r7, r7, lr
 8022db8:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8022dbc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022dc0:	00ed      	lsls	r5, r5, #3
 8022dc2:	fb0c 7c06 	mla	ip, ip, r6, r7
 8022dc6:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8022dca:	10df      	asrs	r7, r3, #3
 8022dcc:	b2ed      	uxtb	r5, r5
 8022dce:	00db      	lsls	r3, r3, #3
 8022dd0:	fa1f fc8c 	uxth.w	ip, ip
 8022dd4:	fb19 f90e 	smulbb	r9, r9, lr
 8022dd8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022ddc:	b2db      	uxtb	r3, r3
 8022dde:	fb15 f50e 	smulbb	r5, r5, lr
 8022de2:	fb07 9706 	mla	r7, r7, r6, r9
 8022de6:	fb03 5306 	mla	r3, r3, r6, r5
 8022dea:	f10c 0901 	add.w	r9, ip, #1
 8022dee:	b29b      	uxth	r3, r3
 8022df0:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8022df4:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 8022df8:	f103 0c01 	add.w	ip, r3, #1
 8022dfc:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8022e00:	b2bf      	uxth	r7, r7
 8022e02:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8022e06:	ea4c 0c09 	orr.w	ip, ip, r9
 8022e0a:	f107 0901 	add.w	r9, r7, #1
 8022e0e:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8022e12:	097f      	lsrs	r7, r7, #5
 8022e14:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022e18:	ea4c 0c07 	orr.w	ip, ip, r7
 8022e1c:	f820 cb02 	strh.w	ip, [r0], #2
 8022e20:	e7bc      	b.n	8022d9c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 8022e22:	9b01      	ldr	r3, [sp, #4]
 8022e24:	881b      	ldrh	r3, [r3, #0]
 8022e26:	eba3 0308 	sub.w	r3, r3, r8
 8022e2a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022e2e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8022e32:	eba3 0308 	sub.w	r3, r3, r8
 8022e36:	441c      	add	r4, r3
 8022e38:	e7ac      	b.n	8022d94 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 8022e3a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8022e3e:	4282      	cmp	r2, r0
 8022e40:	d915      	bls.n	8022e6e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8022e42:	eb00 060a 	add.w	r6, r0, sl
 8022e46:	4286      	cmp	r6, r0
 8022e48:	d906      	bls.n	8022e58 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 8022e4a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8022e4e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8022e52:	f820 3b02 	strh.w	r3, [r0], #2
 8022e56:	e7f6      	b.n	8022e46 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 8022e58:	882b      	ldrh	r3, [r5, #0]
 8022e5a:	eba3 0308 	sub.w	r3, r3, r8
 8022e5e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022e62:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8022e66:	eba3 0308 	sub.w	r3, r3, r8
 8022e6a:	441c      	add	r4, r3
 8022e6c:	e7e7      	b.n	8022e3e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 8022e6e:	4b04      	ldr	r3, [pc, #16]	; (8022e80 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8022e70:	6818      	ldr	r0, [r3, #0]
 8022e72:	6803      	ldr	r3, [r0, #0]
 8022e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022e76:	4798      	blx	r3
 8022e78:	b007      	add	sp, #28
 8022e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022e7e:	bf00      	nop
 8022e80:	2000af48 	.word	0x2000af48
 8022e84:	2000af42 	.word	0x2000af42

08022e88 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8022e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e8c:	b091      	sub	sp, #68	; 0x44
 8022e8e:	4680      	mov	r8, r0
 8022e90:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 8022e94:	460f      	mov	r7, r1
 8022e96:	4614      	mov	r4, r2
 8022e98:	2d00      	cmp	r5, #0
 8022e9a:	d051      	beq.n	8022f40 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8022e9c:	6810      	ldr	r0, [r2, #0]
 8022e9e:	6851      	ldr	r1, [r2, #4]
 8022ea0:	f8df 9200 	ldr.w	r9, [pc, #512]	; 80230a4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 8022ea4:	ae0c      	add	r6, sp, #48	; 0x30
 8022ea6:	c603      	stmia	r6!, {r0, r1}
 8022ea8:	6818      	ldr	r0, [r3, #0]
 8022eaa:	6859      	ldr	r1, [r3, #4]
 8022eac:	ae0e      	add	r6, sp, #56	; 0x38
 8022eae:	c603      	stmia	r6!, {r0, r1}
 8022eb0:	a80c      	add	r0, sp, #48	; 0x30
 8022eb2:	f7f8 f855 	bl	801af60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022eb6:	4621      	mov	r1, r4
 8022eb8:	a80e      	add	r0, sp, #56	; 0x38
 8022eba:	f7f8 f895 	bl	801afe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022ebe:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8022ec2:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8022ec6:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8022eca:	f8d9 0000 	ldr.w	r0, [r9]
 8022ece:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 8022ed2:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8022ed6:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022eda:	eb08 0401 	add.w	r4, r8, r1
 8022ede:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8022ee2:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 80230a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 8022ee6:	440a      	add	r2, r1
 8022ee8:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8022eec:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8022ef0:	4413      	add	r3, r2
 8022ef2:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8022ef6:	6803      	ldr	r3, [r0, #0]
 8022ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022efa:	4798      	blx	r3
 8022efc:	f010 0f80 	tst.w	r0, #128	; 0x80
 8022f00:	f8d9 0000 	ldr.w	r0, [r9]
 8022f04:	d01f      	beq.n	8022f46 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 8022f06:	2200      	movs	r2, #0
 8022f08:	6801      	ldr	r1, [r0, #0]
 8022f0a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8022f0e:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8022f12:	220b      	movs	r2, #11
 8022f14:	9207      	str	r2, [sp, #28]
 8022f16:	f8b8 2000 	ldrh.w	r2, [r8]
 8022f1a:	9206      	str	r2, [sp, #24]
 8022f1c:	2201      	movs	r2, #1
 8022f1e:	e9cd 5204 	strd	r5, r2, [sp, #16]
 8022f22:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8022f26:	9203      	str	r2, [sp, #12]
 8022f28:	fa1f f28a 	uxth.w	r2, sl
 8022f2c:	9202      	str	r2, [sp, #8]
 8022f2e:	b2b6      	uxth	r6, r6
 8022f30:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8022f34:	9200      	str	r2, [sp, #0]
 8022f36:	9601      	str	r6, [sp, #4]
 8022f38:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8022f3a:	463a      	mov	r2, r7
 8022f3c:	4621      	mov	r1, r4
 8022f3e:	47a8      	blx	r5
 8022f40:	b011      	add	sp, #68	; 0x44
 8022f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022f46:	6803      	ldr	r3, [r0, #0]
 8022f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022f4a:	4798      	blx	r3
 8022f4c:	f8b8 2000 	ldrh.w	r2, [r8]
 8022f50:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8022f54:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8022f58:	2dff      	cmp	r5, #255	; 0xff
 8022f5a:	fb02 1303 	mla	r3, r2, r3, r1
 8022f5e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022f62:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8022f66:	fb0a fa02 	mul.w	sl, sl, r2
 8022f6a:	d062      	beq.n	8023032 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8022f6c:	ea6f 0c05 	mvn.w	ip, r5
 8022f70:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8022f74:	930a      	str	r3, [sp, #40]	; 0x28
 8022f76:	b2ad      	uxth	r5, r5
 8022f78:	fa5f fc8c 	uxtb.w	ip, ip
 8022f7c:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8022f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022f82:	4298      	cmp	r0, r3
 8022f84:	f080 8085 	bcs.w	8023092 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8022f88:	eb00 0b09 	add.w	fp, r0, r9
 8022f8c:	4558      	cmp	r0, fp
 8022f8e:	d246      	bcs.n	802301e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 8022f90:	f814 eb01 	ldrb.w	lr, [r4], #1
 8022f94:	2303      	movs	r3, #3
 8022f96:	2204      	movs	r2, #4
 8022f98:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8022f9c:	eb07 0a0e 	add.w	sl, r7, lr
 8022fa0:	8803      	ldrh	r3, [r0, #0]
 8022fa2:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8022fa6:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8022faa:	1219      	asrs	r1, r3, #8
 8022fac:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022fb0:	fb18 f805 	smulbb	r8, r8, r5
 8022fb4:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8022fb8:	10da      	asrs	r2, r3, #3
 8022fba:	fb01 810c 	mla	r1, r1, ip, r8
 8022fbe:	00db      	lsls	r3, r3, #3
 8022fc0:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8022fc4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022fc8:	b2db      	uxtb	r3, r3
 8022fca:	fb18 f805 	smulbb	r8, r8, r5
 8022fce:	fb1e fe05 	smulbb	lr, lr, r5
 8022fd2:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8022fd6:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8022fda:	b289      	uxth	r1, r1
 8022fdc:	fb02 820c 	mla	r2, r2, ip, r8
 8022fe0:	fb03 e30c 	mla	r3, r3, ip, lr
 8022fe4:	b292      	uxth	r2, r2
 8022fe6:	b29b      	uxth	r3, r3
 8022fe8:	f101 0801 	add.w	r8, r1, #1
 8022fec:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8022ff0:	f103 0e01 	add.w	lr, r3, #1
 8022ff4:	f102 0801 	add.w	r8, r2, #1
 8022ff8:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8022ffc:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 8023000:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8023004:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8023008:	ea4f 1858 	mov.w	r8, r8, lsr #5
 802300c:	ea4e 0101 	orr.w	r1, lr, r1
 8023010:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8023014:	ea41 0108 	orr.w	r1, r1, r8
 8023018:	f820 1b02 	strh.w	r1, [r0], #2
 802301c:	e7b6      	b.n	8022f8c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 802301e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023020:	881b      	ldrh	r3, [r3, #0]
 8023022:	1b9b      	subs	r3, r3, r6
 8023024:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023028:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 802302c:	1b9b      	subs	r3, r3, r6
 802302e:	441c      	add	r4, r3
 8023030:	e7a6      	b.n	8022f80 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 8023032:	491b      	ldr	r1, [pc, #108]	; (80230a0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 8023034:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8023038:	2203      	movs	r2, #3
 802303a:	2504      	movs	r5, #4
 802303c:	4550      	cmp	r0, sl
 802303e:	d228      	bcs.n	8023092 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8023040:	eb00 0c09 	add.w	ip, r0, r9
 8023044:	4560      	cmp	r0, ip
 8023046:	4623      	mov	r3, r4
 8023048:	d219      	bcs.n	802307e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 802304a:	f893 e000 	ldrb.w	lr, [r3]
 802304e:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8023052:	eb07 0b0e 	add.w	fp, r7, lr
 8023056:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802305a:	f89b 3002 	ldrb.w	r3, [fp, #2]
 802305e:	f89b b001 	ldrb.w	fp, [fp, #1]
 8023062:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8023066:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 802306a:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 802306e:	ea43 030b 	orr.w	r3, r3, fp
 8023072:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8023076:	3401      	adds	r4, #1
 8023078:	f820 3b02 	strh.w	r3, [r0], #2
 802307c:	e7e2      	b.n	8023044 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 802307e:	f8b8 3000 	ldrh.w	r3, [r8]
 8023082:	1b9b      	subs	r3, r3, r6
 8023084:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023088:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 802308c:	1b9b      	subs	r3, r3, r6
 802308e:	441c      	add	r4, r3
 8023090:	e7d4      	b.n	802303c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8023092:	4b04      	ldr	r3, [pc, #16]	; (80230a4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 8023094:	6818      	ldr	r0, [r3, #0]
 8023096:	6803      	ldr	r3, [r0, #0]
 8023098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802309a:	4798      	blx	r3
 802309c:	e750      	b.n	8022f40 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 802309e:	bf00      	nop
 80230a0:	fffff800 	.word	0xfffff800
 80230a4:	2000af48 	.word	0x2000af48
 80230a8:	2000af42 	.word	0x2000af42

080230ac <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 80230ac:	b4f0      	push	{r4, r5, r6, r7}
 80230ae:	460c      	mov	r4, r1
 80230b0:	4611      	mov	r1, r2
 80230b2:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80230b6:	780f      	ldrb	r7, [r1, #0]
 80230b8:	784e      	ldrb	r6, [r1, #1]
 80230ba:	2f01      	cmp	r7, #1
 80230bc:	461a      	mov	r2, r3
 80230be:	9b04      	ldr	r3, [sp, #16]
 80230c0:	d036      	beq.n	8023130 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x84>
 80230c2:	d31e      	bcc.n	8023102 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x56>
 80230c4:	2f02      	cmp	r7, #2
 80230c6:	d14a      	bne.n	802315e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 80230c8:	2e03      	cmp	r6, #3
 80230ca:	d848      	bhi.n	802315e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 80230cc:	e8df f006 	tbb	[pc, r6]
 80230d0:	16140702 	.word	0x16140702
 80230d4:	9504      	str	r5, [sp, #16]
 80230d6:	4620      	mov	r0, r4
 80230d8:	bcf0      	pop	{r4, r5, r6, r7}
 80230da:	f7ff be09 	b.w	8022cf0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 80230de:	6f80      	ldr	r0, [r0, #120]	; 0x78
 80230e0:	2800      	cmp	r0, #0
 80230e2:	d03c      	beq.n	802315e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 80230e4:	6806      	ldr	r6, [r0, #0]
 80230e6:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80230ea:	68b5      	ldr	r5, [r6, #8]
 80230ec:	4613      	mov	r3, r2
 80230ee:	46ac      	mov	ip, r5
 80230f0:	460a      	mov	r2, r1
 80230f2:	4621      	mov	r1, r4
 80230f4:	bcf0      	pop	{r4, r5, r6, r7}
 80230f6:	4760      	bx	ip
 80230f8:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 80230fa:	e7f1      	b.n	80230e0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 80230fc:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8023100:	e7ee      	b.n	80230e0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8023102:	2e03      	cmp	r6, #3
 8023104:	d82b      	bhi.n	802315e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 8023106:	e8df f006 	tbb	[pc, r6]
 802310a:	0702      	.short	0x0702
 802310c:	100e      	.short	0x100e
 802310e:	9504      	str	r5, [sp, #16]
 8023110:	4620      	mov	r0, r4
 8023112:	bcf0      	pop	{r4, r5, r6, r7}
 8023114:	f7ff bd06 	b.w	8022b24 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8023118:	6f80      	ldr	r0, [r0, #120]	; 0x78
 802311a:	b300      	cbz	r0, 802315e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 802311c:	6806      	ldr	r6, [r0, #0]
 802311e:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8023122:	68f5      	ldr	r5, [r6, #12]
 8023124:	e7e2      	b.n	80230ec <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8023126:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8023128:	e7f7      	b.n	802311a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6e>
 802312a:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 802312e:	e7f4      	b.n	802311a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6e>
 8023130:	2e03      	cmp	r6, #3
 8023132:	d814      	bhi.n	802315e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 8023134:	e8df f006 	tbb	[pc, r6]
 8023138:	100e0702 	.word	0x100e0702
 802313c:	9504      	str	r5, [sp, #16]
 802313e:	4620      	mov	r0, r4
 8023140:	bcf0      	pop	{r4, r5, r6, r7}
 8023142:	f7ff bea1 	b.w	8022e88 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8023146:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8023148:	b148      	cbz	r0, 802315e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 802314a:	6806      	ldr	r6, [r0, #0]
 802314c:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8023150:	6935      	ldr	r5, [r6, #16]
 8023152:	e7cb      	b.n	80230ec <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8023154:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8023156:	e7f7      	b.n	8023148 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>
 8023158:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 802315c:	e7f4      	b.n	8023148 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>
 802315e:	bcf0      	pop	{r4, r5, r6, r7}
 8023160:	4770      	bx	lr
	...

08023164 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8023164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023168:	4604      	mov	r4, r0
 802316a:	b087      	sub	sp, #28
 802316c:	6810      	ldr	r0, [r2, #0]
 802316e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8023172:	f8df 9238 	ldr.w	r9, [pc, #568]	; 80233ac <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 8023176:	460e      	mov	r6, r1
 8023178:	6851      	ldr	r1, [r2, #4]
 802317a:	ad02      	add	r5, sp, #8
 802317c:	c503      	stmia	r5!, {r0, r1}
 802317e:	6818      	ldr	r0, [r3, #0]
 8023180:	6859      	ldr	r1, [r3, #4]
 8023182:	ad04      	add	r5, sp, #16
 8023184:	4617      	mov	r7, r2
 8023186:	c503      	stmia	r5!, {r0, r1}
 8023188:	a802      	add	r0, sp, #8
 802318a:	f7f7 fee9 	bl	801af60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802318e:	4639      	mov	r1, r7
 8023190:	a804      	add	r0, sp, #16
 8023192:	f7f7 ff29 	bl	801afe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023196:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802319a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802319e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80231a2:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 80231a6:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 80231aa:	fb11 2103 	smlabb	r1, r1, r3, r2
 80231ae:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 80231b2:	440e      	add	r6, r1
 80231b4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80231b8:	440a      	add	r2, r1
 80231ba:	f8ad 2010 	strh.w	r2, [sp, #16]
 80231be:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80231c2:	4413      	add	r3, r2
 80231c4:	f8ad 3012 	strh.w	r3, [sp, #18]
 80231c8:	4b77      	ldr	r3, [pc, #476]	; (80233a8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 80231ca:	6818      	ldr	r0, [r3, #0]
 80231cc:	6803      	ldr	r3, [r0, #0]
 80231ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80231d0:	4798      	blx	r3
 80231d2:	f8b9 b000 	ldrh.w	fp, [r9]
 80231d6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80231da:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80231de:	fb0b 2303 	mla	r3, fp, r3, r2
 80231e2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80231e6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80231ea:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80231ee:	fb05 f50b 	mul.w	r5, r5, fp
 80231f2:	9300      	str	r3, [sp, #0]
 80231f4:	d069      	beq.n	80232ca <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 80231f6:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 80231fa:	4558      	cmp	r0, fp
 80231fc:	f080 80cc 	bcs.w	8023398 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8023200:	9b00      	ldr	r3, [sp, #0]
 8023202:	18c3      	adds	r3, r0, r3
 8023204:	9301      	str	r3, [sp, #4]
 8023206:	4631      	mov	r1, r6
 8023208:	9b01      	ldr	r3, [sp, #4]
 802320a:	4298      	cmp	r0, r3
 802320c:	d24f      	bcs.n	80232ae <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 802320e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023212:	2a00      	cmp	r2, #0
 8023214:	d048      	beq.n	80232a8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8023216:	fb0a f202 	mul.w	r2, sl, r2
 802321a:	1c53      	adds	r3, r2, #1
 802321c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023220:	121b      	asrs	r3, r3, #8
 8023222:	d041      	beq.n	80232a8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8023224:	8802      	ldrh	r2, [r0, #0]
 8023226:	f8b4 c000 	ldrh.w	ip, [r4]
 802322a:	b29e      	uxth	r6, r3
 802322c:	1215      	asrs	r5, r2, #8
 802322e:	43db      	mvns	r3, r3
 8023230:	b2db      	uxtb	r3, r3
 8023232:	ea4f 272c 	mov.w	r7, ip, asr #8
 8023236:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802323a:	fb15 f503 	smulbb	r5, r5, r3
 802323e:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8023242:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8023246:	00d2      	lsls	r2, r2, #3
 8023248:	fb07 5706 	mla	r7, r7, r6, r5
 802324c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8023250:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8023254:	b2d2      	uxtb	r2, r2
 8023256:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802325a:	b2bf      	uxth	r7, r7
 802325c:	fb1e fe03 	smulbb	lr, lr, r3
 8023260:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8023264:	fa5f fc8c 	uxtb.w	ip, ip
 8023268:	fb12 f203 	smulbb	r2, r2, r3
 802326c:	fb05 e506 	mla	r5, r5, r6, lr
 8023270:	fb0c 2c06 	mla	ip, ip, r6, r2
 8023274:	f107 0e01 	add.w	lr, r7, #1
 8023278:	fa1f fc8c 	uxth.w	ip, ip
 802327c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8023280:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 8023284:	f10c 0701 	add.w	r7, ip, #1
 8023288:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802328c:	b2ad      	uxth	r5, r5
 802328e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8023292:	ea47 070e 	orr.w	r7, r7, lr
 8023296:	f105 0e01 	add.w	lr, r5, #1
 802329a:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 802329e:	096d      	lsrs	r5, r5, #5
 80232a0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80232a4:	432f      	orrs	r7, r5
 80232a6:	8007      	strh	r7, [r0, #0]
 80232a8:	3002      	adds	r0, #2
 80232aa:	3402      	adds	r4, #2
 80232ac:	e7ac      	b.n	8023208 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 80232ae:	f8b9 3000 	ldrh.w	r3, [r9]
 80232b2:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 80232b6:	eba3 0308 	sub.w	r3, r3, r8
 80232ba:	eba6 0608 	sub.w	r6, r6, r8
 80232be:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80232c2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80232c6:	440e      	add	r6, r1
 80232c8:	e797      	b.n	80231fa <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 80232ca:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80232ce:	42a8      	cmp	r0, r5
 80232d0:	d262      	bcs.n	8023398 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 80232d2:	9b00      	ldr	r3, [sp, #0]
 80232d4:	4631      	mov	r1, r6
 80232d6:	eb00 0b03 	add.w	fp, r0, r3
 80232da:	4558      	cmp	r0, fp
 80232dc:	d24e      	bcs.n	802337c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 80232de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80232e2:	b12b      	cbz	r3, 80232f0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 80232e4:	2bff      	cmp	r3, #255	; 0xff
 80232e6:	f8b4 e000 	ldrh.w	lr, [r4]
 80232ea:	d104      	bne.n	80232f6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 80232ec:	f8a0 e000 	strh.w	lr, [r0]
 80232f0:	3002      	adds	r0, #2
 80232f2:	3402      	adds	r4, #2
 80232f4:	e7f1      	b.n	80232da <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 80232f6:	8802      	ldrh	r2, [r0, #0]
 80232f8:	b29f      	uxth	r7, r3
 80232fa:	1216      	asrs	r6, r2, #8
 80232fc:	43db      	mvns	r3, r3
 80232fe:	b2db      	uxtb	r3, r3
 8023300:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8023304:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8023308:	fb16 f603 	smulbb	r6, r6, r3
 802330c:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8023310:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8023314:	00d2      	lsls	r2, r2, #3
 8023316:	fb0c 6c07 	mla	ip, ip, r7, r6
 802331a:	b2d2      	uxtb	r2, r2
 802331c:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8023320:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8023324:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8023328:	fb1a fa03 	smulbb	sl, sl, r3
 802332c:	fa1f fc8c 	uxth.w	ip, ip
 8023330:	fb12 f303 	smulbb	r3, r2, r3
 8023334:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8023338:	fa5f fe8e 	uxtb.w	lr, lr
 802333c:	fb06 a607 	mla	r6, r6, r7, sl
 8023340:	f10c 0201 	add.w	r2, ip, #1
 8023344:	fb0e 3307 	mla	r3, lr, r7, r3
 8023348:	b2b6      	uxth	r6, r6
 802334a:	b29b      	uxth	r3, r3
 802334c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8023350:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 8023354:	f106 0a01 	add.w	sl, r6, #1
 8023358:	f103 0c01 	add.w	ip, r3, #1
 802335c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8023360:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8023364:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8023368:	0976      	lsrs	r6, r6, #5
 802336a:	ea4c 0c02 	orr.w	ip, ip, r2
 802336e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8023372:	ea4c 0c06 	orr.w	ip, ip, r6
 8023376:	f8a0 c000 	strh.w	ip, [r0]
 802337a:	e7b9      	b.n	80232f0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 802337c:	f8b9 3000 	ldrh.w	r3, [r9]
 8023380:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8023384:	eba3 0308 	sub.w	r3, r3, r8
 8023388:	eba6 0608 	sub.w	r6, r6, r8
 802338c:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8023390:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023394:	440e      	add	r6, r1
 8023396:	e79a      	b.n	80232ce <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8023398:	4b03      	ldr	r3, [pc, #12]	; (80233a8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 802339a:	6818      	ldr	r0, [r3, #0]
 802339c:	6803      	ldr	r3, [r0, #0]
 802339e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80233a0:	4798      	blx	r3
 80233a2:	b007      	add	sp, #28
 80233a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80233a8:	2000af48 	.word	0x2000af48
 80233ac:	2000af42 	.word	0x2000af42

080233b0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80233b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80233b4:	b089      	sub	sp, #36	; 0x24
 80233b6:	4682      	mov	sl, r0
 80233b8:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 80233bc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80233be:	460f      	mov	r7, r1
 80233c0:	4691      	mov	r9, r2
 80233c2:	4698      	mov	r8, r3
 80233c4:	2e00      	cmp	r6, #0
 80233c6:	d03d      	beq.n	8023444 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80233c8:	4608      	mov	r0, r1
 80233ca:	f7fa fe61 	bl	801e090 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80233ce:	4605      	mov	r5, r0
 80233d0:	4638      	mov	r0, r7
 80233d2:	f7fa fe91 	bl	801e0f8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80233d6:	f8ad 000e 	strh.w	r0, [sp, #14]
 80233da:	4638      	mov	r0, r7
 80233dc:	f8ad 9008 	strh.w	r9, [sp, #8]
 80233e0:	f8ad 500c 	strh.w	r5, [sp, #12]
 80233e4:	f8ad 800a 	strh.w	r8, [sp, #10]
 80233e8:	f7fa ff3e 	bl	801e268 <_ZNK8touchgfx6Bitmap7getDataEv>
 80233ec:	4605      	mov	r5, r0
 80233ee:	4638      	mov	r0, r7
 80233f0:	f7fa ff6a 	bl	801e2c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80233f4:	4681      	mov	r9, r0
 80233f6:	4638      	mov	r0, r7
 80233f8:	f7fa ffba 	bl	801e370 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80233fc:	280b      	cmp	r0, #11
 80233fe:	d821      	bhi.n	8023444 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8023400:	e8df f000 	tbb	[pc, r0]
 8023404:	2006aebe 	.word	0x2006aebe
 8023408:	20202020 	.word	0x20202020
 802340c:	b5202020 	.word	0xb5202020
 8023410:	4bb0      	ldr	r3, [pc, #704]	; (80236d4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 8023412:	6818      	ldr	r0, [r3, #0]
 8023414:	6803      	ldr	r3, [r0, #0]
 8023416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023418:	4798      	blx	r3
 802341a:	2eff      	cmp	r6, #255	; 0xff
 802341c:	d101      	bne.n	8023422 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x72>
 802341e:	0683      	lsls	r3, r0, #26
 8023420:	d506      	bpl.n	8023430 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x80>
 8023422:	4633      	mov	r3, r6
 8023424:	4622      	mov	r2, r4
 8023426:	a902      	add	r1, sp, #8
 8023428:	4628      	mov	r0, r5
 802342a:	f7ff f909 	bl	8022640 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802342e:	e009      	b.n	8023444 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8023430:	4638      	mov	r0, r7
 8023432:	f7fa fee1 	bl	801e1f8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8023436:	b940      	cbnz	r0, 802344a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 8023438:	4623      	mov	r3, r4
 802343a:	aa02      	add	r2, sp, #8
 802343c:	4629      	mov	r1, r5
 802343e:	4650      	mov	r0, sl
 8023440:	f7ff f9e4 	bl	802280c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8023444:	b009      	add	sp, #36	; 0x24
 8023446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802344a:	f10d 0818 	add.w	r8, sp, #24
 802344e:	4639      	mov	r1, r7
 8023450:	4640      	mov	r0, r8
 8023452:	f7fa fe85 	bl	801e160 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8023456:	e898 0003 	ldmia.w	r8, {r0, r1}
 802345a:	af04      	add	r7, sp, #16
 802345c:	e887 0003 	stmia.w	r7, {r0, r1}
 8023460:	4638      	mov	r0, r7
 8023462:	4621      	mov	r1, r4
 8023464:	f7f3 f99c 	bl	80167a0 <_ZN8touchgfx4RectaNERKS0_>
 8023468:	4638      	mov	r0, r7
 802346a:	f7f3 f9dc 	bl	8016826 <_ZNK8touchgfx4Rect7isEmptyEv>
 802346e:	2800      	cmp	r0, #0
 8023470:	d1d7      	bne.n	8023422 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x72>
 8023472:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023476:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 802347a:	4293      	cmp	r3, r2
 802347c:	dd12      	ble.n	80234a4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf4>
 802347e:	1a9b      	subs	r3, r3, r2
 8023480:	f9b4 0000 	ldrsh.w	r0, [r4]
 8023484:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023488:	f8ad 0018 	strh.w	r0, [sp, #24]
 802348c:	f8ad 201a 	strh.w	r2, [sp, #26]
 8023490:	f8ad 101c 	strh.w	r1, [sp, #28]
 8023494:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023498:	4642      	mov	r2, r8
 802349a:	4633      	mov	r3, r6
 802349c:	a902      	add	r1, sp, #8
 802349e:	4628      	mov	r0, r5
 80234a0:	f7ff f8ce 	bl	8022640 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80234a4:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80234a8:	f9b4 2000 	ldrsh.w	r2, [r4]
 80234ac:	4293      	cmp	r3, r2
 80234ae:	dd12      	ble.n	80234d6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x126>
 80234b0:	1a9b      	subs	r3, r3, r2
 80234b2:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80234b6:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80234ba:	f8ad 2018 	strh.w	r2, [sp, #24]
 80234be:	f8ad 001a 	strh.w	r0, [sp, #26]
 80234c2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80234c6:	f8ad 101e 	strh.w	r1, [sp, #30]
 80234ca:	23ff      	movs	r3, #255	; 0xff
 80234cc:	4642      	mov	r2, r8
 80234ce:	a902      	add	r1, sp, #8
 80234d0:	4628      	mov	r0, r5
 80234d2:	f7ff f8b5 	bl	8022640 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80234d6:	463b      	mov	r3, r7
 80234d8:	aa02      	add	r2, sp, #8
 80234da:	4629      	mov	r1, r5
 80234dc:	4650      	mov	r0, sl
 80234de:	f7ff f995 	bl	802280c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 80234e2:	88a2      	ldrh	r2, [r4, #4]
 80234e4:	8823      	ldrh	r3, [r4, #0]
 80234e6:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80234ea:	4413      	add	r3, r2
 80234ec:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80234f0:	440a      	add	r2, r1
 80234f2:	b29b      	uxth	r3, r3
 80234f4:	b292      	uxth	r2, r2
 80234f6:	b211      	sxth	r1, r2
 80234f8:	b218      	sxth	r0, r3
 80234fa:	4288      	cmp	r0, r1
 80234fc:	dd12      	ble.n	8023524 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 80234fe:	1a9b      	subs	r3, r3, r2
 8023500:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8023504:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8023508:	f8ad 1018 	strh.w	r1, [sp, #24]
 802350c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023510:	f8ad 001e 	strh.w	r0, [sp, #30]
 8023514:	23ff      	movs	r3, #255	; 0xff
 8023516:	4642      	mov	r2, r8
 8023518:	a902      	add	r1, sp, #8
 802351a:	4628      	mov	r0, r5
 802351c:	f8ad 601a 	strh.w	r6, [sp, #26]
 8023520:	f7ff f88e 	bl	8022640 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023524:	88e2      	ldrh	r2, [r4, #6]
 8023526:	8863      	ldrh	r3, [r4, #2]
 8023528:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 802352c:	4413      	add	r3, r2
 802352e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8023532:	440a      	add	r2, r1
 8023534:	b29b      	uxth	r3, r3
 8023536:	b292      	uxth	r2, r2
 8023538:	b211      	sxth	r1, r2
 802353a:	b218      	sxth	r0, r3
 802353c:	4288      	cmp	r0, r1
 802353e:	dd81      	ble.n	8023444 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8023540:	1a9b      	subs	r3, r3, r2
 8023542:	f9b4 6000 	ldrsh.w	r6, [r4]
 8023546:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802354a:	f8ad 301e 	strh.w	r3, [sp, #30]
 802354e:	f8ad 6018 	strh.w	r6, [sp, #24]
 8023552:	f8ad 101a 	strh.w	r1, [sp, #26]
 8023556:	f8ad 001c 	strh.w	r0, [sp, #28]
 802355a:	23ff      	movs	r3, #255	; 0xff
 802355c:	4642      	mov	r2, r8
 802355e:	e762      	b.n	8023426 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 8023560:	4633      	mov	r3, r6
 8023562:	4622      	mov	r2, r4
 8023564:	a902      	add	r1, sp, #8
 8023566:	4628      	mov	r0, r5
 8023568:	f7ff f9c0 	bl	80228ec <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 802356c:	e76a      	b.n	8023444 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 802356e:	e9cd 4600 	strd	r4, r6, [sp]
 8023572:	ab02      	add	r3, sp, #8
 8023574:	464a      	mov	r2, r9
 8023576:	4629      	mov	r1, r5
 8023578:	4650      	mov	r0, sl
 802357a:	f7ff fd97 	bl	80230ac <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 802357e:	e761      	b.n	8023444 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8023580:	4638      	mov	r0, r7
 8023582:	f7fa fe39 	bl	801e1f8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8023586:	b950      	cbnz	r0, 802359e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ee>
 8023588:	e9cd 6000 	strd	r6, r0, [sp]
 802358c:	f8da 3000 	ldr.w	r3, [sl]
 8023590:	aa02      	add	r2, sp, #8
 8023592:	68de      	ldr	r6, [r3, #12]
 8023594:	4629      	mov	r1, r5
 8023596:	4623      	mov	r3, r4
 8023598:	4650      	mov	r0, sl
 802359a:	47b0      	blx	r6
 802359c:	e752      	b.n	8023444 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 802359e:	f10d 0818 	add.w	r8, sp, #24
 80235a2:	4639      	mov	r1, r7
 80235a4:	4640      	mov	r0, r8
 80235a6:	f7fa fddb 	bl	801e160 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80235aa:	e898 0003 	ldmia.w	r8, {r0, r1}
 80235ae:	af04      	add	r7, sp, #16
 80235b0:	e887 0003 	stmia.w	r7, {r0, r1}
 80235b4:	4638      	mov	r0, r7
 80235b6:	4621      	mov	r1, r4
 80235b8:	f7f3 f8f2 	bl	80167a0 <_ZN8touchgfx4RectaNERKS0_>
 80235bc:	4638      	mov	r0, r7
 80235be:	f7f3 f932 	bl	8016826 <_ZNK8touchgfx4Rect7isEmptyEv>
 80235c2:	b138      	cbz	r0, 80235d4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 80235c4:	9600      	str	r6, [sp, #0]
 80235c6:	4623      	mov	r3, r4
 80235c8:	aa02      	add	r2, sp, #8
 80235ca:	4649      	mov	r1, r9
 80235cc:	4628      	mov	r0, r5
 80235ce:	f7ff fdc9 	bl	8023164 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80235d2:	e737      	b.n	8023444 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80235d4:	e9cd 6000 	strd	r6, r0, [sp]
 80235d8:	f8da 3000 	ldr.w	r3, [sl]
 80235dc:	aa02      	add	r2, sp, #8
 80235de:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 80235e2:	4629      	mov	r1, r5
 80235e4:	463b      	mov	r3, r7
 80235e6:	4650      	mov	r0, sl
 80235e8:	47d8      	blx	fp
 80235ea:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80235ee:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80235f2:	4293      	cmp	r3, r2
 80235f4:	dd13      	ble.n	802361e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26e>
 80235f6:	f9b4 0000 	ldrsh.w	r0, [r4]
 80235fa:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80235fe:	f8ad 0018 	strh.w	r0, [sp, #24]
 8023602:	1a9b      	subs	r3, r3, r2
 8023604:	f8ad 201a 	strh.w	r2, [sp, #26]
 8023608:	f8ad 101c 	strh.w	r1, [sp, #28]
 802360c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023610:	9600      	str	r6, [sp, #0]
 8023612:	4643      	mov	r3, r8
 8023614:	aa02      	add	r2, sp, #8
 8023616:	4649      	mov	r1, r9
 8023618:	4628      	mov	r0, r5
 802361a:	f7ff fda3 	bl	8023164 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 802361e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8023622:	f9b4 2000 	ldrsh.w	r2, [r4]
 8023626:	4293      	cmp	r3, r2
 8023628:	dd13      	ble.n	8023652 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a2>
 802362a:	1a9b      	subs	r3, r3, r2
 802362c:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8023630:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8023634:	f8ad 2018 	strh.w	r2, [sp, #24]
 8023638:	f8ad 001a 	strh.w	r0, [sp, #26]
 802363c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023640:	f8ad 101e 	strh.w	r1, [sp, #30]
 8023644:	9600      	str	r6, [sp, #0]
 8023646:	4643      	mov	r3, r8
 8023648:	aa02      	add	r2, sp, #8
 802364a:	4649      	mov	r1, r9
 802364c:	4628      	mov	r0, r5
 802364e:	f7ff fd89 	bl	8023164 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8023652:	88a2      	ldrh	r2, [r4, #4]
 8023654:	8823      	ldrh	r3, [r4, #0]
 8023656:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 802365a:	4413      	add	r3, r2
 802365c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8023660:	440a      	add	r2, r1
 8023662:	b29b      	uxth	r3, r3
 8023664:	b292      	uxth	r2, r2
 8023666:	b211      	sxth	r1, r2
 8023668:	b218      	sxth	r0, r3
 802366a:	4288      	cmp	r0, r1
 802366c:	dd13      	ble.n	8023696 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e6>
 802366e:	1a9b      	subs	r3, r3, r2
 8023670:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8023674:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8023678:	f8ad 1018 	strh.w	r1, [sp, #24]
 802367c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023680:	f8ad 001e 	strh.w	r0, [sp, #30]
 8023684:	9600      	str	r6, [sp, #0]
 8023686:	4643      	mov	r3, r8
 8023688:	aa02      	add	r2, sp, #8
 802368a:	4649      	mov	r1, r9
 802368c:	4628      	mov	r0, r5
 802368e:	f8ad 701a 	strh.w	r7, [sp, #26]
 8023692:	f7ff fd67 	bl	8023164 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8023696:	88e2      	ldrh	r2, [r4, #6]
 8023698:	8863      	ldrh	r3, [r4, #2]
 802369a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 802369e:	4413      	add	r3, r2
 80236a0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80236a4:	440a      	add	r2, r1
 80236a6:	b29b      	uxth	r3, r3
 80236a8:	b292      	uxth	r2, r2
 80236aa:	b211      	sxth	r1, r2
 80236ac:	b218      	sxth	r0, r3
 80236ae:	4288      	cmp	r0, r1
 80236b0:	f77f aec8 	ble.w	8023444 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80236b4:	f9b4 7000 	ldrsh.w	r7, [r4]
 80236b8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80236bc:	f8ad 7018 	strh.w	r7, [sp, #24]
 80236c0:	1a9b      	subs	r3, r3, r2
 80236c2:	f8ad 301e 	strh.w	r3, [sp, #30]
 80236c6:	f8ad 101a 	strh.w	r1, [sp, #26]
 80236ca:	f8ad 001c 	strh.w	r0, [sp, #28]
 80236ce:	9600      	str	r6, [sp, #0]
 80236d0:	4643      	mov	r3, r8
 80236d2:	e779      	b.n	80235c8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x218>
 80236d4:	2000af48 	.word	0x2000af48

080236d8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 80236d8:	b180      	cbz	r0, 80236fc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 80236da:	2903      	cmp	r1, #3
 80236dc:	d81c      	bhi.n	8023718 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 80236de:	e8df f001 	tbb	[pc, r1]
 80236e2:	1d02      	.short	0x1d02
 80236e4:	1f08      	.short	0x1f08
 80236e6:	4b10      	ldr	r3, [pc, #64]	; (8023728 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 80236e8:	8818      	ldrh	r0, [r3, #0]
 80236ea:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80236ee:	4240      	negs	r0, r0
 80236f0:	4770      	bx	lr
 80236f2:	4b0d      	ldr	r3, [pc, #52]	; (8023728 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 80236f4:	8818      	ldrh	r0, [r3, #0]
 80236f6:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80236fa:	4770      	bx	lr
 80236fc:	2903      	cmp	r1, #3
 80236fe:	d80b      	bhi.n	8023718 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8023700:	a301      	add	r3, pc, #4	; (adr r3, 8023708 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 8023702:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8023706:	bf00      	nop
 8023708:	0802371d 	.word	0x0802371d
 802370c:	080236f3 	.word	0x080236f3
 8023710:	08023721 	.word	0x08023721
 8023714:	080236e7 	.word	0x080236e7
 8023718:	2000      	movs	r0, #0
 802371a:	4770      	bx	lr
 802371c:	2001      	movs	r0, #1
 802371e:	4770      	bx	lr
 8023720:	f04f 30ff 	mov.w	r0, #4294967295
 8023724:	4770      	bx	lr
 8023726:	bf00      	nop
 8023728:	2000af42 	.word	0x2000af42

0802372c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 802372c:	b180      	cbz	r0, 8023750 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 802372e:	2903      	cmp	r1, #3
 8023730:	d81c      	bhi.n	802376c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8023732:	e8df f001 	tbb	[pc, r1]
 8023736:	021d      	.short	0x021d
 8023738:	071f      	.short	0x071f
 802373a:	4b10      	ldr	r3, [pc, #64]	; (802377c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 802373c:	8818      	ldrh	r0, [r3, #0]
 802373e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8023742:	4770      	bx	lr
 8023744:	4b0d      	ldr	r3, [pc, #52]	; (802377c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8023746:	8818      	ldrh	r0, [r3, #0]
 8023748:	f3c0 000e 	ubfx	r0, r0, #0, #15
 802374c:	4240      	negs	r0, r0
 802374e:	4770      	bx	lr
 8023750:	2903      	cmp	r1, #3
 8023752:	d80b      	bhi.n	802376c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8023754:	a301      	add	r3, pc, #4	; (adr r3, 802375c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 8023756:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 802375a:	bf00      	nop
 802375c:	0802373b 	.word	0x0802373b
 8023760:	08023775 	.word	0x08023775
 8023764:	08023745 	.word	0x08023745
 8023768:	08023771 	.word	0x08023771
 802376c:	2000      	movs	r0, #0
 802376e:	4770      	bx	lr
 8023770:	2001      	movs	r0, #1
 8023772:	4770      	bx	lr
 8023774:	f04f 30ff 	mov.w	r0, #4294967295
 8023778:	4770      	bx	lr
 802377a:	bf00      	nop
 802377c:	2000af42 	.word	0x2000af42

08023780 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8023780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023784:	b099      	sub	sp, #100	; 0x64
 8023786:	910b      	str	r1, [sp, #44]	; 0x2c
 8023788:	a914      	add	r1, sp, #80	; 0x50
 802378a:	e881 000c 	stmia.w	r1, {r2, r3}
 802378e:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 8023792:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 8023796:	f891 900d 	ldrb.w	r9, [r1, #13]
 802379a:	9309      	str	r3, [sp, #36]	; 0x24
 802379c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 80237a0:	9310      	str	r3, [sp, #64]	; 0x40
 80237a2:	ea4f 1749 	mov.w	r7, r9, lsl #5
 80237a6:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 80237aa:	930c      	str	r3, [sp, #48]	; 0x30
 80237ac:	f407 7380 	and.w	r3, r7, #256	; 0x100
 80237b0:	798f      	ldrb	r7, [r1, #6]
 80237b2:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 80237b6:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 80237ba:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 80237be:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 80237c2:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 80237c6:	431f      	orrs	r7, r3
 80237c8:	f000 8195 	beq.w	8023af6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80237cc:	ea4f 1909 	mov.w	r9, r9, lsl #4
 80237d0:	f409 7380 	and.w	r3, r9, #256	; 0x100
 80237d4:	f891 9007 	ldrb.w	r9, [r1, #7]
 80237d8:	ea59 0903 	orrs.w	r9, r9, r3
 80237dc:	f000 818b 	beq.w	8023af6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80237e0:	f991 3009 	ldrsb.w	r3, [r1, #9]
 80237e4:	b29b      	uxth	r3, r3
 80237e6:	2d00      	cmp	r5, #0
 80237e8:	f000 812e 	beq.w	8023a48 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 80237ec:	1aed      	subs	r5, r5, r3
 80237ee:	b2ad      	uxth	r5, r5
 80237f0:	042b      	lsls	r3, r5, #16
 80237f2:	d502      	bpl.n	80237fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 80237f4:	1b64      	subs	r4, r4, r5
 80237f6:	b224      	sxth	r4, r4
 80237f8:	2500      	movs	r5, #0
 80237fa:	f9b2 1000 	ldrsh.w	r1, [r2]
 80237fe:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8023802:	428c      	cmp	r4, r1
 8023804:	b28b      	uxth	r3, r1
 8023806:	bfbf      	itttt	lt
 8023808:	18ed      	addlt	r5, r5, r3
 802380a:	1b2c      	sublt	r4, r5, r4
 802380c:	b2a5      	uxthlt	r5, r4
 802380e:	460c      	movlt	r4, r1
 8023810:	8891      	ldrh	r1, [r2, #4]
 8023812:	440b      	add	r3, r1
 8023814:	b21b      	sxth	r3, r3
 8023816:	930f      	str	r3, [sp, #60]	; 0x3c
 8023818:	88d3      	ldrh	r3, [r2, #6]
 802381a:	8852      	ldrh	r2, [r2, #2]
 802381c:	4413      	add	r3, r2
 802381e:	b21b      	sxth	r3, r3
 8023820:	930d      	str	r3, [sp, #52]	; 0x34
 8023822:	4bbe      	ldr	r3, [pc, #760]	; (8023b1c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 8023824:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023826:	f893 b000 	ldrb.w	fp, [r3]
 802382a:	f10b 3cff 	add.w	ip, fp, #4294967295
 802382e:	f1dc 0300 	rsbs	r3, ip, #0
 8023832:	eb43 030c 	adc.w	r3, r3, ip
 8023836:	930e      	str	r3, [sp, #56]	; 0x38
 8023838:	4621      	mov	r1, r4
 802383a:	4653      	mov	r3, sl
 802383c:	a814      	add	r0, sp, #80	; 0x50
 802383e:	f7f7 fa03 	bl	801ac48 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8023842:	4621      	mov	r1, r4
 8023844:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8023848:	4653      	mov	r3, sl
 802384a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802384c:	a814      	add	r0, sp, #80	; 0x50
 802384e:	f7f7 fa18 	bl	801ac82 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8023852:	a918      	add	r1, sp, #96	; 0x60
 8023854:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8023858:	a817      	add	r0, sp, #92	; 0x5c
 802385a:	f7f7 fb3f 	bl	801aedc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 802385e:	f1ba 0f00 	cmp.w	sl, #0
 8023862:	f040 80f4 	bne.w	8023a4e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8023866:	f1bb 0f01 	cmp.w	fp, #1
 802386a:	f040 80f8 	bne.w	8023a5e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 802386e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023870:	2b00      	cmp	r3, #0
 8023872:	f040 8145 	bne.w	8023b00 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 8023876:	b2ba      	uxth	r2, r7
 8023878:	b905      	cbnz	r5, 802387c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 802387a:	b16e      	cbz	r6, 8023898 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 802387c:	fb06 5302 	mla	r3, r6, r2, r5
 8023880:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8023882:	fb08 f303 	mul.w	r3, r8, r3
 8023886:	4631      	mov	r1, r6
 8023888:	f003 0607 	and.w	r6, r3, #7
 802388c:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 8023890:	9328      	str	r3, [sp, #160]	; 0xa0
 8023892:	eba9 0301 	sub.w	r3, r9, r1
 8023896:	930a      	str	r3, [sp, #40]	; 0x28
 8023898:	4651      	mov	r1, sl
 802389a:	980e      	ldr	r0, [sp, #56]	; 0x38
 802389c:	f7ff ff1c 	bl	80236d8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 80238a0:	4681      	mov	r9, r0
 80238a2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80238a4:	f7ff ff42 	bl	802372c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 80238a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80238aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80238ac:	eba3 0a01 	sub.w	sl, r3, r1
 80238b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80238b2:	459a      	cmp	sl, r3
 80238b4:	bfa8      	it	ge
 80238b6:	469a      	movge	sl, r3
 80238b8:	f1ba 0f00 	cmp.w	sl, #0
 80238bc:	4683      	mov	fp, r0
 80238be:	f340 811a 	ble.w	8023af6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80238c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80238c4:	1b64      	subs	r4, r4, r5
 80238c6:	1b1c      	subs	r4, r3, r4
 80238c8:	42bc      	cmp	r4, r7
 80238ca:	bfd4      	ite	le
 80238cc:	ebc5 0504 	rsble	r5, r5, r4
 80238d0:	ebc5 0507 	rsbgt	r5, r5, r7
 80238d4:	2d00      	cmp	r5, #0
 80238d6:	f340 810e 	ble.w	8023af6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80238da:	1b52      	subs	r2, r2, r5
 80238dc:	fb08 f302 	mul.w	r3, r8, r2
 80238e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80238e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80238e4:	2b00      	cmp	r3, #0
 80238e6:	f040 8116 	bne.w	8023b16 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 80238ea:	4b8d      	ldr	r3, [pc, #564]	; (8023b20 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 80238ec:	6818      	ldr	r0, [r3, #0]
 80238ee:	6803      	ldr	r3, [r0, #0]
 80238f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80238f2:	4798      	blx	r3
 80238f4:	2301      	movs	r3, #1
 80238f6:	fa03 f308 	lsl.w	r3, r3, r8
 80238fa:	4a8a      	ldr	r2, [pc, #552]	; (8023b24 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 80238fc:	3b01      	subs	r3, #1
 80238fe:	b2db      	uxtb	r3, r3
 8023900:	8811      	ldrh	r1, [r2, #0]
 8023902:	930e      	str	r3, [sp, #56]	; 0x38
 8023904:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8023908:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 802390c:	fb01 2303 	mla	r3, r1, r3, r2
 8023910:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8023914:	930a      	str	r3, [sp, #40]	; 0x28
 8023916:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023918:	f3c3 4307 	ubfx	r3, r3, #16, #8
 802391c:	9313      	str	r3, [sp, #76]	; 0x4c
 802391e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023920:	0a19      	lsrs	r1, r3, #8
 8023922:	b2cb      	uxtb	r3, r1
 8023924:	9312      	str	r3, [sp, #72]	; 0x48
 8023926:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023928:	b2db      	uxtb	r3, r3
 802392a:	9311      	str	r3, [sp, #68]	; 0x44
 802392c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802392e:	095a      	lsrs	r2, r3, #5
 8023930:	4b7d      	ldr	r3, [pc, #500]	; (8023b28 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 8023932:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023936:	400b      	ands	r3, r1
 8023938:	4313      	orrs	r3, r2
 802393a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802393c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8023940:	4313      	orrs	r3, r2
 8023942:	b29b      	uxth	r3, r3
 8023944:	9310      	str	r3, [sp, #64]	; 0x40
 8023946:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023948:	781a      	ldrb	r2, [r3, #0]
 802394a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 802394e:	4132      	asrs	r2, r6
 8023950:	fb05 b919 	mls	r9, r5, r9, fp
 8023954:	fb03 fb05 	mul.w	fp, r3, r5
 8023958:	b2d2      	uxtb	r2, r2
 802395a:	930d      	str	r3, [sp, #52]	; 0x34
 802395c:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 8023960:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8023964:	f0c0 80f5 	bcc.w	8023b52 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 8023968:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 802396c:	46ae      	mov	lr, r5
 802396e:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8023972:	f0c0 80dd 	bcc.w	8023b30 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 8023976:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023978:	4013      	ands	r3, r2
 802397a:	d055      	beq.n	8023a28 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 802397c:	20ff      	movs	r0, #255	; 0xff
 802397e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023980:	fb90 f1f1 	sdiv	r1, r0, r1
 8023984:	434b      	muls	r3, r1
 8023986:	2bfe      	cmp	r3, #254	; 0xfe
 8023988:	dd03      	ble.n	8023992 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 802398a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802398c:	4281      	cmp	r1, r0
 802398e:	f000 80cd 	beq.w	8023b2c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 8023992:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023994:	f8bc 4000 	ldrh.w	r4, [ip]
 8023998:	fb11 f303 	smulbb	r3, r1, r3
 802399c:	b29b      	uxth	r3, r3
 802399e:	1c59      	adds	r1, r3, #1
 80239a0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80239a4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80239a8:	b29f      	uxth	r7, r3
 80239aa:	43db      	mvns	r3, r3
 80239ac:	b2db      	uxtb	r3, r3
 80239ae:	9309      	str	r3, [sp, #36]	; 0x24
 80239b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80239b2:	1220      	asrs	r0, r4, #8
 80239b4:	fb13 f907 	smulbb	r9, r3, r7
 80239b8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80239bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80239be:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80239c2:	fb00 9003 	mla	r0, r0, r3, r9
 80239c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80239c8:	10e1      	asrs	r1, r4, #3
 80239ca:	fb13 f907 	smulbb	r9, r3, r7
 80239ce:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80239d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80239d4:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 80239d8:	fb01 9103 	mla	r1, r1, r3, r9
 80239dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80239de:	00e4      	lsls	r4, r4, #3
 80239e0:	fb13 f707 	smulbb	r7, r3, r7
 80239e4:	b2e4      	uxtb	r4, r4
 80239e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80239e8:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80239ec:	fb04 7403 	mla	r4, r4, r3, r7
 80239f0:	b280      	uxth	r0, r0
 80239f2:	b2a4      	uxth	r4, r4
 80239f4:	1c43      	adds	r3, r0, #1
 80239f6:	f104 0901 	add.w	r9, r4, #1
 80239fa:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80239fe:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 8023a02:	b289      	uxth	r1, r1
 8023a04:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8023a08:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8023a0c:	ea49 0000 	orr.w	r0, r9, r0
 8023a10:	f101 0901 	add.w	r9, r1, #1
 8023a14:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 8023a18:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8023a1c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8023a20:	ea40 0009 	orr.w	r0, r0, r9
 8023a24:	f8ac 0000 	strh.w	r0, [ip]
 8023a28:	4446      	add	r6, r8
 8023a2a:	b2b6      	uxth	r6, r6
 8023a2c:	2e07      	cmp	r6, #7
 8023a2e:	bf81      	itttt	hi
 8023a30:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 8023a32:	785a      	ldrbhi	r2, [r3, #1]
 8023a34:	3301      	addhi	r3, #1
 8023a36:	9328      	strhi	r3, [sp, #160]	; 0xa0
 8023a38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023a3a:	bf9a      	itte	ls
 8023a3c:	fa42 f208 	asrls.w	r2, r2, r8
 8023a40:	b2d2      	uxtbls	r2, r2
 8023a42:	2600      	movhi	r6, #0
 8023a44:	449c      	add	ip, r3
 8023a46:	e792      	b.n	802396e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 8023a48:	441c      	add	r4, r3
 8023a4a:	b224      	sxth	r4, r4
 8023a4c:	e6d5      	b.n	80237fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8023a4e:	f1ba 0f01 	cmp.w	sl, #1
 8023a52:	f47f af0c 	bne.w	802386e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8023a56:	f1bb 0f01 	cmp.w	fp, #1
 8023a5a:	f47f af08 	bne.w	802386e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8023a5e:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 8023b20 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 8023a62:	f8db 0000 	ldr.w	r0, [fp]
 8023a66:	6803      	ldr	r3, [r0, #0]
 8023a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023a6a:	4798      	blx	r3
 8023a6c:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 8023a70:	465a      	mov	r2, fp
 8023a72:	d006      	beq.n	8023a82 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 8023a74:	f1b8 0f04 	cmp.w	r8, #4
 8023a78:	d140      	bne.n	8023afc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 8023a7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023a7c:	3300      	adds	r3, #0
 8023a7e:	bf18      	it	ne
 8023a80:	2301      	movne	r3, #1
 8023a82:	0580      	lsls	r0, r0, #22
 8023a84:	d56e      	bpl.n	8023b64 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 8023a86:	f1b8 0f08 	cmp.w	r8, #8
 8023a8a:	d16b      	bne.n	8023b64 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 8023a8c:	2b00      	cmp	r3, #0
 8023a8e:	bf0c      	ite	eq
 8023a90:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8023a94:	f44f 7180 	movne.w	r1, #256	; 0x100
 8023a98:	2d00      	cmp	r5, #0
 8023a9a:	f47f aee8 	bne.w	802386e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8023a9e:	2e00      	cmp	r6, #0
 8023aa0:	f47f aee5 	bne.w	802386e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8023aa4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8023aa6:	19e3      	adds	r3, r4, r7
 8023aa8:	4283      	cmp	r3, r0
 8023aaa:	f73f aee0 	bgt.w	802386e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8023aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023ab0:	980d      	ldr	r0, [sp, #52]	; 0x34
 8023ab2:	444b      	add	r3, r9
 8023ab4:	4283      	cmp	r3, r0
 8023ab6:	f73f aeda 	bgt.w	802386e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8023aba:	6810      	ldr	r0, [r2, #0]
 8023abc:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 8023ac0:	6804      	ldr	r4, [r0, #0]
 8023ac2:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8023ac6:	b2bf      	uxth	r7, r7
 8023ac8:	f1b8 0f08 	cmp.w	r8, #8
 8023acc:	f04f 0500 	mov.w	r5, #0
 8023ad0:	bf18      	it	ne
 8023ad2:	3701      	addne	r7, #1
 8023ad4:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8023ad8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023ada:	9104      	str	r1, [sp, #16]
 8023adc:	bf18      	it	ne
 8023ade:	f027 0701 	bicne.w	r7, r7, #1
 8023ae2:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8023ae4:	bf18      	it	ne
 8023ae6:	b2bf      	uxthne	r7, r7
 8023ae8:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8023aec:	e9cd 7900 	strd	r7, r9, [sp]
 8023af0:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8023af2:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8023af4:	47a0      	blx	r4
 8023af6:	b019      	add	sp, #100	; 0x64
 8023af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023afc:	2300      	movs	r3, #0
 8023afe:	e7c0      	b.n	8023a82 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 8023b00:	2208      	movs	r2, #8
 8023b02:	fb92 f3f8 	sdiv	r3, r2, r8
 8023b06:	1e5a      	subs	r2, r3, #1
 8023b08:	443a      	add	r2, r7
 8023b0a:	fb92 f2f3 	sdiv	r2, r2, r3
 8023b0e:	fb12 f203 	smulbb	r2, r2, r3
 8023b12:	b292      	uxth	r2, r2
 8023b14:	e6b0      	b.n	8023878 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 8023b16:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8023b18:	e6ec      	b.n	80238f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 8023b1a:	bf00      	nop
 8023b1c:	2000af40 	.word	0x2000af40
 8023b20:	2000af48 	.word	0x2000af48
 8023b24:	2000af42 	.word	0x2000af42
 8023b28:	00fff800 	.word	0x00fff800
 8023b2c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8023b2e:	e779      	b.n	8023a24 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 8023b30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023b32:	b153      	cbz	r3, 8023b4a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 8023b34:	441e      	add	r6, r3
 8023b36:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023b38:	b2b6      	uxth	r6, r6
 8023b3a:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 8023b3e:	f006 0607 	and.w	r6, r6, #7
 8023b42:	781a      	ldrb	r2, [r3, #0]
 8023b44:	9328      	str	r3, [sp, #160]	; 0xa0
 8023b46:	4132      	asrs	r2, r6
 8023b48:	b2d2      	uxtb	r2, r2
 8023b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023b4c:	445b      	add	r3, fp
 8023b4e:	930a      	str	r3, [sp, #40]	; 0x28
 8023b50:	e706      	b.n	8023960 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 8023b52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023b54:	2b00      	cmp	r3, #0
 8023b56:	d1ce      	bne.n	8023af6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8023b58:	4b05      	ldr	r3, [pc, #20]	; (8023b70 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 8023b5a:	6818      	ldr	r0, [r3, #0]
 8023b5c:	6803      	ldr	r3, [r0, #0]
 8023b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023b60:	4798      	blx	r3
 8023b62:	e7c8      	b.n	8023af6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8023b64:	2b00      	cmp	r3, #0
 8023b66:	f43f ae82 	beq.w	802386e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8023b6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8023b6e:	e793      	b.n	8023a98 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 8023b70:	2000af48 	.word	0x2000af48

08023b74 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8023b74:	b538      	push	{r3, r4, r5, lr}
 8023b76:	4c15      	ldr	r4, [pc, #84]	; (8023bcc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8023b78:	7823      	ldrb	r3, [r4, #0]
 8023b7a:	f3bf 8f5b 	dmb	ish
 8023b7e:	07da      	lsls	r2, r3, #31
 8023b80:	4605      	mov	r5, r0
 8023b82:	d40b      	bmi.n	8023b9c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8023b84:	4620      	mov	r0, r4
 8023b86:	f008 f9e0 	bl	802bf4a <__cxa_guard_acquire>
 8023b8a:	b138      	cbz	r0, 8023b9c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8023b8c:	4620      	mov	r0, r4
 8023b8e:	f008 f9e8 	bl	802bf62 <__cxa_guard_release>
 8023b92:	4a0f      	ldr	r2, [pc, #60]	; (8023bd0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8023b94:	490f      	ldr	r1, [pc, #60]	; (8023bd4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8023b96:	4810      	ldr	r0, [pc, #64]	; (8023bd8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8023b98:	f008 f9d0 	bl	802bf3c <__aeabi_atexit>
 8023b9c:	4c0f      	ldr	r4, [pc, #60]	; (8023bdc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 8023b9e:	7823      	ldrb	r3, [r4, #0]
 8023ba0:	f3bf 8f5b 	dmb	ish
 8023ba4:	07db      	lsls	r3, r3, #31
 8023ba6:	d40b      	bmi.n	8023bc0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8023ba8:	4620      	mov	r0, r4
 8023baa:	f008 f9ce 	bl	802bf4a <__cxa_guard_acquire>
 8023bae:	b138      	cbz	r0, 8023bc0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8023bb0:	4620      	mov	r0, r4
 8023bb2:	f008 f9d6 	bl	802bf62 <__cxa_guard_release>
 8023bb6:	4a06      	ldr	r2, [pc, #24]	; (8023bd0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8023bb8:	4909      	ldr	r1, [pc, #36]	; (8023be0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8023bba:	480a      	ldr	r0, [pc, #40]	; (8023be4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8023bbc:	f008 f9be 	bl	802bf3c <__aeabi_atexit>
 8023bc0:	4b05      	ldr	r3, [pc, #20]	; (8023bd8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8023bc2:	612b      	str	r3, [r5, #16]
 8023bc4:	4b07      	ldr	r3, [pc, #28]	; (8023be4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8023bc6:	616b      	str	r3, [r5, #20]
 8023bc8:	bd38      	pop	{r3, r4, r5, pc}
 8023bca:	bf00      	nop
 8023bcc:	2000b028 	.word	0x2000b028
 8023bd0:	20000000 	.word	0x20000000
 8023bd4:	08020985 	.word	0x08020985
 8023bd8:	20000084 	.word	0x20000084
 8023bdc:	2000b02c 	.word	0x2000b02c
 8023be0:	08020983 	.word	0x08020983
 8023be4:	20000088 	.word	0x20000088

08023be8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8023be8:	b538      	push	{r3, r4, r5, lr}
 8023bea:	4c15      	ldr	r4, [pc, #84]	; (8023c40 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8023bec:	7823      	ldrb	r3, [r4, #0]
 8023bee:	f3bf 8f5b 	dmb	ish
 8023bf2:	07da      	lsls	r2, r3, #31
 8023bf4:	4605      	mov	r5, r0
 8023bf6:	d40b      	bmi.n	8023c10 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8023bf8:	4620      	mov	r0, r4
 8023bfa:	f008 f9a6 	bl	802bf4a <__cxa_guard_acquire>
 8023bfe:	b138      	cbz	r0, 8023c10 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8023c00:	4620      	mov	r0, r4
 8023c02:	f008 f9ae 	bl	802bf62 <__cxa_guard_release>
 8023c06:	4a0f      	ldr	r2, [pc, #60]	; (8023c44 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8023c08:	490f      	ldr	r1, [pc, #60]	; (8023c48 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8023c0a:	4810      	ldr	r0, [pc, #64]	; (8023c4c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8023c0c:	f008 f996 	bl	802bf3c <__aeabi_atexit>
 8023c10:	4c0f      	ldr	r4, [pc, #60]	; (8023c50 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 8023c12:	7823      	ldrb	r3, [r4, #0]
 8023c14:	f3bf 8f5b 	dmb	ish
 8023c18:	07db      	lsls	r3, r3, #31
 8023c1a:	d40b      	bmi.n	8023c34 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8023c1c:	4620      	mov	r0, r4
 8023c1e:	f008 f994 	bl	802bf4a <__cxa_guard_acquire>
 8023c22:	b138      	cbz	r0, 8023c34 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8023c24:	4620      	mov	r0, r4
 8023c26:	f008 f99c 	bl	802bf62 <__cxa_guard_release>
 8023c2a:	4a06      	ldr	r2, [pc, #24]	; (8023c44 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8023c2c:	4909      	ldr	r1, [pc, #36]	; (8023c54 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8023c2e:	480a      	ldr	r0, [pc, #40]	; (8023c58 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8023c30:	f008 f984 	bl	802bf3c <__aeabi_atexit>
 8023c34:	4b05      	ldr	r3, [pc, #20]	; (8023c4c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8023c36:	60ab      	str	r3, [r5, #8]
 8023c38:	4b07      	ldr	r3, [pc, #28]	; (8023c58 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8023c3a:	60eb      	str	r3, [r5, #12]
 8023c3c:	bd38      	pop	{r3, r4, r5, pc}
 8023c3e:	bf00      	nop
 8023c40:	2000b000 	.word	0x2000b000
 8023c44:	20000000 	.word	0x20000000
 8023c48:	08020989 	.word	0x08020989
 8023c4c:	2000005c 	.word	0x2000005c
 8023c50:	2000b004 	.word	0x2000b004
 8023c54:	08020987 	.word	0x08020987
 8023c58:	20000060 	.word	0x20000060

08023c5c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 8023c5c:	b510      	push	{r4, lr}
 8023c5e:	4604      	mov	r4, r0
 8023c60:	f7ff ff88 	bl	8023b74 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8023c64:	4620      	mov	r0, r4
 8023c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023c6a:	f7ff bfbd 	b.w	8023be8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08023c70 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8023c70:	b538      	push	{r3, r4, r5, lr}
 8023c72:	4c15      	ldr	r4, [pc, #84]	; (8023cc8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8023c74:	7823      	ldrb	r3, [r4, #0]
 8023c76:	f3bf 8f5b 	dmb	ish
 8023c7a:	07da      	lsls	r2, r3, #31
 8023c7c:	4605      	mov	r5, r0
 8023c7e:	d40b      	bmi.n	8023c98 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8023c80:	4620      	mov	r0, r4
 8023c82:	f008 f962 	bl	802bf4a <__cxa_guard_acquire>
 8023c86:	b138      	cbz	r0, 8023c98 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8023c88:	4620      	mov	r0, r4
 8023c8a:	f008 f96a 	bl	802bf62 <__cxa_guard_release>
 8023c8e:	4a0f      	ldr	r2, [pc, #60]	; (8023ccc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8023c90:	490f      	ldr	r1, [pc, #60]	; (8023cd0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8023c92:	4810      	ldr	r0, [pc, #64]	; (8023cd4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8023c94:	f008 f952 	bl	802bf3c <__aeabi_atexit>
 8023c98:	4c0f      	ldr	r4, [pc, #60]	; (8023cd8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8023c9a:	7823      	ldrb	r3, [r4, #0]
 8023c9c:	f3bf 8f5b 	dmb	ish
 8023ca0:	07db      	lsls	r3, r3, #31
 8023ca2:	d40b      	bmi.n	8023cbc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8023ca4:	4620      	mov	r0, r4
 8023ca6:	f008 f950 	bl	802bf4a <__cxa_guard_acquire>
 8023caa:	b138      	cbz	r0, 8023cbc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8023cac:	4620      	mov	r0, r4
 8023cae:	f008 f958 	bl	802bf62 <__cxa_guard_release>
 8023cb2:	4a06      	ldr	r2, [pc, #24]	; (8023ccc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8023cb4:	4909      	ldr	r1, [pc, #36]	; (8023cdc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8023cb6:	480a      	ldr	r0, [pc, #40]	; (8023ce0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8023cb8:	f008 f940 	bl	802bf3c <__aeabi_atexit>
 8023cbc:	4b05      	ldr	r3, [pc, #20]	; (8023cd4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8023cbe:	622b      	str	r3, [r5, #32]
 8023cc0:	4b07      	ldr	r3, [pc, #28]	; (8023ce0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8023cc2:	626b      	str	r3, [r5, #36]	; 0x24
 8023cc4:	bd38      	pop	{r3, r4, r5, pc}
 8023cc6:	bf00      	nop
 8023cc8:	2000b030 	.word	0x2000b030
 8023ccc:	20000000 	.word	0x20000000
 8023cd0:	0802097d 	.word	0x0802097d
 8023cd4:	2000008c 	.word	0x2000008c
 8023cd8:	2000b034 	.word	0x2000b034
 8023cdc:	0802097b 	.word	0x0802097b
 8023ce0:	20000090 	.word	0x20000090

08023ce4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8023ce4:	b538      	push	{r3, r4, r5, lr}
 8023ce6:	4c15      	ldr	r4, [pc, #84]	; (8023d3c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8023ce8:	7823      	ldrb	r3, [r4, #0]
 8023cea:	f3bf 8f5b 	dmb	ish
 8023cee:	07da      	lsls	r2, r3, #31
 8023cf0:	4605      	mov	r5, r0
 8023cf2:	d40b      	bmi.n	8023d0c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8023cf4:	4620      	mov	r0, r4
 8023cf6:	f008 f928 	bl	802bf4a <__cxa_guard_acquire>
 8023cfa:	b138      	cbz	r0, 8023d0c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8023cfc:	4620      	mov	r0, r4
 8023cfe:	f008 f930 	bl	802bf62 <__cxa_guard_release>
 8023d02:	4a0f      	ldr	r2, [pc, #60]	; (8023d40 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8023d04:	490f      	ldr	r1, [pc, #60]	; (8023d44 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8023d06:	4810      	ldr	r0, [pc, #64]	; (8023d48 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8023d08:	f008 f918 	bl	802bf3c <__aeabi_atexit>
 8023d0c:	4c0f      	ldr	r4, [pc, #60]	; (8023d4c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8023d0e:	7823      	ldrb	r3, [r4, #0]
 8023d10:	f3bf 8f5b 	dmb	ish
 8023d14:	07db      	lsls	r3, r3, #31
 8023d16:	d40b      	bmi.n	8023d30 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8023d18:	4620      	mov	r0, r4
 8023d1a:	f008 f916 	bl	802bf4a <__cxa_guard_acquire>
 8023d1e:	b138      	cbz	r0, 8023d30 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8023d20:	4620      	mov	r0, r4
 8023d22:	f008 f91e 	bl	802bf62 <__cxa_guard_release>
 8023d26:	4a06      	ldr	r2, [pc, #24]	; (8023d40 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8023d28:	4909      	ldr	r1, [pc, #36]	; (8023d50 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8023d2a:	480a      	ldr	r0, [pc, #40]	; (8023d54 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8023d2c:	f008 f906 	bl	802bf3c <__aeabi_atexit>
 8023d30:	4b05      	ldr	r3, [pc, #20]	; (8023d48 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8023d32:	61ab      	str	r3, [r5, #24]
 8023d34:	4b07      	ldr	r3, [pc, #28]	; (8023d54 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8023d36:	61eb      	str	r3, [r5, #28]
 8023d38:	bd38      	pop	{r3, r4, r5, pc}
 8023d3a:	bf00      	nop
 8023d3c:	2000b008 	.word	0x2000b008
 8023d40:	20000000 	.word	0x20000000
 8023d44:	08020981 	.word	0x08020981
 8023d48:	20000064 	.word	0x20000064
 8023d4c:	2000b00c 	.word	0x2000b00c
 8023d50:	0802097f 	.word	0x0802097f
 8023d54:	20000068 	.word	0x20000068

08023d58 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8023d58:	b510      	push	{r4, lr}
 8023d5a:	4604      	mov	r4, r0
 8023d5c:	f7ff ff88 	bl	8023c70 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8023d60:	4620      	mov	r0, r4
 8023d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023d66:	f7ff bfbd 	b.w	8023ce4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08023d6c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8023d6c:	b538      	push	{r3, r4, r5, lr}
 8023d6e:	4c15      	ldr	r4, [pc, #84]	; (8023dc4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8023d70:	7823      	ldrb	r3, [r4, #0]
 8023d72:	f3bf 8f5b 	dmb	ish
 8023d76:	07da      	lsls	r2, r3, #31
 8023d78:	4605      	mov	r5, r0
 8023d7a:	d40b      	bmi.n	8023d94 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8023d7c:	4620      	mov	r0, r4
 8023d7e:	f008 f8e4 	bl	802bf4a <__cxa_guard_acquire>
 8023d82:	b138      	cbz	r0, 8023d94 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8023d84:	4620      	mov	r0, r4
 8023d86:	f008 f8ec 	bl	802bf62 <__cxa_guard_release>
 8023d8a:	4a0f      	ldr	r2, [pc, #60]	; (8023dc8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8023d8c:	490f      	ldr	r1, [pc, #60]	; (8023dcc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8023d8e:	4810      	ldr	r0, [pc, #64]	; (8023dd0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8023d90:	f008 f8d4 	bl	802bf3c <__aeabi_atexit>
 8023d94:	4c0f      	ldr	r4, [pc, #60]	; (8023dd4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8023d96:	7823      	ldrb	r3, [r4, #0]
 8023d98:	f3bf 8f5b 	dmb	ish
 8023d9c:	07db      	lsls	r3, r3, #31
 8023d9e:	d40b      	bmi.n	8023db8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8023da0:	4620      	mov	r0, r4
 8023da2:	f008 f8d2 	bl	802bf4a <__cxa_guard_acquire>
 8023da6:	b138      	cbz	r0, 8023db8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8023da8:	4620      	mov	r0, r4
 8023daa:	f008 f8da 	bl	802bf62 <__cxa_guard_release>
 8023dae:	4a06      	ldr	r2, [pc, #24]	; (8023dc8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8023db0:	4909      	ldr	r1, [pc, #36]	; (8023dd8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8023db2:	480a      	ldr	r0, [pc, #40]	; (8023ddc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8023db4:	f008 f8c2 	bl	802bf3c <__aeabi_atexit>
 8023db8:	4b05      	ldr	r3, [pc, #20]	; (8023dd0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8023dba:	632b      	str	r3, [r5, #48]	; 0x30
 8023dbc:	4b07      	ldr	r3, [pc, #28]	; (8023ddc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8023dbe:	636b      	str	r3, [r5, #52]	; 0x34
 8023dc0:	bd38      	pop	{r3, r4, r5, pc}
 8023dc2:	bf00      	nop
 8023dc4:	2000b040 	.word	0x2000b040
 8023dc8:	20000000 	.word	0x20000000
 8023dcc:	08020975 	.word	0x08020975
 8023dd0:	2000009c 	.word	0x2000009c
 8023dd4:	2000b044 	.word	0x2000b044
 8023dd8:	08020973 	.word	0x08020973
 8023ddc:	200000a0 	.word	0x200000a0

08023de0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8023de0:	b538      	push	{r3, r4, r5, lr}
 8023de2:	4c15      	ldr	r4, [pc, #84]	; (8023e38 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8023de4:	7823      	ldrb	r3, [r4, #0]
 8023de6:	f3bf 8f5b 	dmb	ish
 8023dea:	07da      	lsls	r2, r3, #31
 8023dec:	4605      	mov	r5, r0
 8023dee:	d40b      	bmi.n	8023e08 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8023df0:	4620      	mov	r0, r4
 8023df2:	f008 f8aa 	bl	802bf4a <__cxa_guard_acquire>
 8023df6:	b138      	cbz	r0, 8023e08 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8023df8:	4620      	mov	r0, r4
 8023dfa:	f008 f8b2 	bl	802bf62 <__cxa_guard_release>
 8023dfe:	4a0f      	ldr	r2, [pc, #60]	; (8023e3c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8023e00:	490f      	ldr	r1, [pc, #60]	; (8023e40 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8023e02:	4810      	ldr	r0, [pc, #64]	; (8023e44 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8023e04:	f008 f89a 	bl	802bf3c <__aeabi_atexit>
 8023e08:	4c0f      	ldr	r4, [pc, #60]	; (8023e48 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8023e0a:	7823      	ldrb	r3, [r4, #0]
 8023e0c:	f3bf 8f5b 	dmb	ish
 8023e10:	07db      	lsls	r3, r3, #31
 8023e12:	d40b      	bmi.n	8023e2c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8023e14:	4620      	mov	r0, r4
 8023e16:	f008 f898 	bl	802bf4a <__cxa_guard_acquire>
 8023e1a:	b138      	cbz	r0, 8023e2c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8023e1c:	4620      	mov	r0, r4
 8023e1e:	f008 f8a0 	bl	802bf62 <__cxa_guard_release>
 8023e22:	4a06      	ldr	r2, [pc, #24]	; (8023e3c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8023e24:	4909      	ldr	r1, [pc, #36]	; (8023e4c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8023e26:	480a      	ldr	r0, [pc, #40]	; (8023e50 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8023e28:	f008 f888 	bl	802bf3c <__aeabi_atexit>
 8023e2c:	4b05      	ldr	r3, [pc, #20]	; (8023e44 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8023e2e:	62ab      	str	r3, [r5, #40]	; 0x28
 8023e30:	4b07      	ldr	r3, [pc, #28]	; (8023e50 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8023e32:	62eb      	str	r3, [r5, #44]	; 0x2c
 8023e34:	bd38      	pop	{r3, r4, r5, pc}
 8023e36:	bf00      	nop
 8023e38:	2000b010 	.word	0x2000b010
 8023e3c:	20000000 	.word	0x20000000
 8023e40:	08020979 	.word	0x08020979
 8023e44:	2000006c 	.word	0x2000006c
 8023e48:	2000b014 	.word	0x2000b014
 8023e4c:	08020977 	.word	0x08020977
 8023e50:	20000070 	.word	0x20000070

08023e54 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8023e54:	b510      	push	{r4, lr}
 8023e56:	4604      	mov	r4, r0
 8023e58:	f7ff ff88 	bl	8023d6c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8023e5c:	4620      	mov	r0, r4
 8023e5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023e62:	f7ff bfbd 	b.w	8023de0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08023e68 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8023e68:	b538      	push	{r3, r4, r5, lr}
 8023e6a:	4c15      	ldr	r4, [pc, #84]	; (8023ec0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8023e6c:	7823      	ldrb	r3, [r4, #0]
 8023e6e:	f3bf 8f5b 	dmb	ish
 8023e72:	07da      	lsls	r2, r3, #31
 8023e74:	4605      	mov	r5, r0
 8023e76:	d40b      	bmi.n	8023e90 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8023e78:	4620      	mov	r0, r4
 8023e7a:	f008 f866 	bl	802bf4a <__cxa_guard_acquire>
 8023e7e:	b138      	cbz	r0, 8023e90 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8023e80:	4620      	mov	r0, r4
 8023e82:	f008 f86e 	bl	802bf62 <__cxa_guard_release>
 8023e86:	4a0f      	ldr	r2, [pc, #60]	; (8023ec4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8023e88:	490f      	ldr	r1, [pc, #60]	; (8023ec8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8023e8a:	4810      	ldr	r0, [pc, #64]	; (8023ecc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8023e8c:	f008 f856 	bl	802bf3c <__aeabi_atexit>
 8023e90:	4c0f      	ldr	r4, [pc, #60]	; (8023ed0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8023e92:	7823      	ldrb	r3, [r4, #0]
 8023e94:	f3bf 8f5b 	dmb	ish
 8023e98:	07db      	lsls	r3, r3, #31
 8023e9a:	d40b      	bmi.n	8023eb4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8023e9c:	4620      	mov	r0, r4
 8023e9e:	f008 f854 	bl	802bf4a <__cxa_guard_acquire>
 8023ea2:	b138      	cbz	r0, 8023eb4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8023ea4:	4620      	mov	r0, r4
 8023ea6:	f008 f85c 	bl	802bf62 <__cxa_guard_release>
 8023eaa:	4a06      	ldr	r2, [pc, #24]	; (8023ec4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8023eac:	4909      	ldr	r1, [pc, #36]	; (8023ed4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 8023eae:	480a      	ldr	r0, [pc, #40]	; (8023ed8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8023eb0:	f008 f844 	bl	802bf3c <__aeabi_atexit>
 8023eb4:	4b05      	ldr	r3, [pc, #20]	; (8023ecc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8023eb6:	652b      	str	r3, [r5, #80]	; 0x50
 8023eb8:	4b07      	ldr	r3, [pc, #28]	; (8023ed8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8023eba:	656b      	str	r3, [r5, #84]	; 0x54
 8023ebc:	bd38      	pop	{r3, r4, r5, pc}
 8023ebe:	bf00      	nop
 8023ec0:	2000b048 	.word	0x2000b048
 8023ec4:	20000000 	.word	0x20000000
 8023ec8:	08020965 	.word	0x08020965
 8023ecc:	200000a4 	.word	0x200000a4
 8023ed0:	2000b04c 	.word	0x2000b04c
 8023ed4:	08020963 	.word	0x08020963
 8023ed8:	200000a8 	.word	0x200000a8

08023edc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8023edc:	b538      	push	{r3, r4, r5, lr}
 8023ede:	4c15      	ldr	r4, [pc, #84]	; (8023f34 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8023ee0:	7823      	ldrb	r3, [r4, #0]
 8023ee2:	f3bf 8f5b 	dmb	ish
 8023ee6:	07da      	lsls	r2, r3, #31
 8023ee8:	4605      	mov	r5, r0
 8023eea:	d40b      	bmi.n	8023f04 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8023eec:	4620      	mov	r0, r4
 8023eee:	f008 f82c 	bl	802bf4a <__cxa_guard_acquire>
 8023ef2:	b138      	cbz	r0, 8023f04 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8023ef4:	4620      	mov	r0, r4
 8023ef6:	f008 f834 	bl	802bf62 <__cxa_guard_release>
 8023efa:	4a0f      	ldr	r2, [pc, #60]	; (8023f38 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8023efc:	490f      	ldr	r1, [pc, #60]	; (8023f3c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 8023efe:	4810      	ldr	r0, [pc, #64]	; (8023f40 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8023f00:	f008 f81c 	bl	802bf3c <__aeabi_atexit>
 8023f04:	4c0f      	ldr	r4, [pc, #60]	; (8023f44 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 8023f06:	7823      	ldrb	r3, [r4, #0]
 8023f08:	f3bf 8f5b 	dmb	ish
 8023f0c:	07db      	lsls	r3, r3, #31
 8023f0e:	d40b      	bmi.n	8023f28 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8023f10:	4620      	mov	r0, r4
 8023f12:	f008 f81a 	bl	802bf4a <__cxa_guard_acquire>
 8023f16:	b138      	cbz	r0, 8023f28 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8023f18:	4620      	mov	r0, r4
 8023f1a:	f008 f822 	bl	802bf62 <__cxa_guard_release>
 8023f1e:	4a06      	ldr	r2, [pc, #24]	; (8023f38 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8023f20:	4909      	ldr	r1, [pc, #36]	; (8023f48 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8023f22:	480a      	ldr	r0, [pc, #40]	; (8023f4c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8023f24:	f008 f80a 	bl	802bf3c <__aeabi_atexit>
 8023f28:	4b05      	ldr	r3, [pc, #20]	; (8023f40 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8023f2a:	64ab      	str	r3, [r5, #72]	; 0x48
 8023f2c:	4b07      	ldr	r3, [pc, #28]	; (8023f4c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8023f2e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8023f30:	bd38      	pop	{r3, r4, r5, pc}
 8023f32:	bf00      	nop
 8023f34:	2000b050 	.word	0x2000b050
 8023f38:	20000000 	.word	0x20000000
 8023f3c:	08020969 	.word	0x08020969
 8023f40:	200000ac 	.word	0x200000ac
 8023f44:	2000b054 	.word	0x2000b054
 8023f48:	08020967 	.word	0x08020967
 8023f4c:	200000b0 	.word	0x200000b0

08023f50 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8023f50:	b538      	push	{r3, r4, r5, lr}
 8023f52:	4c15      	ldr	r4, [pc, #84]	; (8023fa8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8023f54:	7823      	ldrb	r3, [r4, #0]
 8023f56:	f3bf 8f5b 	dmb	ish
 8023f5a:	07da      	lsls	r2, r3, #31
 8023f5c:	4605      	mov	r5, r0
 8023f5e:	d40b      	bmi.n	8023f78 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8023f60:	4620      	mov	r0, r4
 8023f62:	f007 fff2 	bl	802bf4a <__cxa_guard_acquire>
 8023f66:	b138      	cbz	r0, 8023f78 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8023f68:	4620      	mov	r0, r4
 8023f6a:	f007 fffa 	bl	802bf62 <__cxa_guard_release>
 8023f6e:	4a0f      	ldr	r2, [pc, #60]	; (8023fac <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8023f70:	490f      	ldr	r1, [pc, #60]	; (8023fb0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8023f72:	4810      	ldr	r0, [pc, #64]	; (8023fb4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8023f74:	f007 ffe2 	bl	802bf3c <__aeabi_atexit>
 8023f78:	4c0f      	ldr	r4, [pc, #60]	; (8023fb8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 8023f7a:	7823      	ldrb	r3, [r4, #0]
 8023f7c:	f3bf 8f5b 	dmb	ish
 8023f80:	07db      	lsls	r3, r3, #31
 8023f82:	d40b      	bmi.n	8023f9c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8023f84:	4620      	mov	r0, r4
 8023f86:	f007 ffe0 	bl	802bf4a <__cxa_guard_acquire>
 8023f8a:	b138      	cbz	r0, 8023f9c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8023f8c:	4620      	mov	r0, r4
 8023f8e:	f007 ffe8 	bl	802bf62 <__cxa_guard_release>
 8023f92:	4a06      	ldr	r2, [pc, #24]	; (8023fac <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8023f94:	4909      	ldr	r1, [pc, #36]	; (8023fbc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8023f96:	480a      	ldr	r0, [pc, #40]	; (8023fc0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8023f98:	f007 ffd0 	bl	802bf3c <__aeabi_atexit>
 8023f9c:	4b05      	ldr	r3, [pc, #20]	; (8023fb4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8023f9e:	642b      	str	r3, [r5, #64]	; 0x40
 8023fa0:	4b07      	ldr	r3, [pc, #28]	; (8023fc0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8023fa2:	646b      	str	r3, [r5, #68]	; 0x44
 8023fa4:	bd38      	pop	{r3, r4, r5, pc}
 8023fa6:	bf00      	nop
 8023fa8:	2000b018 	.word	0x2000b018
 8023fac:	20000000 	.word	0x20000000
 8023fb0:	0802096d 	.word	0x0802096d
 8023fb4:	20000074 	.word	0x20000074
 8023fb8:	2000b01c 	.word	0x2000b01c
 8023fbc:	0802096b 	.word	0x0802096b
 8023fc0:	20000078 	.word	0x20000078

08023fc4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8023fc4:	b538      	push	{r3, r4, r5, lr}
 8023fc6:	4c15      	ldr	r4, [pc, #84]	; (802401c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8023fc8:	7823      	ldrb	r3, [r4, #0]
 8023fca:	f3bf 8f5b 	dmb	ish
 8023fce:	07da      	lsls	r2, r3, #31
 8023fd0:	4605      	mov	r5, r0
 8023fd2:	d40b      	bmi.n	8023fec <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8023fd4:	4620      	mov	r0, r4
 8023fd6:	f007 ffb8 	bl	802bf4a <__cxa_guard_acquire>
 8023fda:	b138      	cbz	r0, 8023fec <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8023fdc:	4620      	mov	r0, r4
 8023fde:	f007 ffc0 	bl	802bf62 <__cxa_guard_release>
 8023fe2:	4a0f      	ldr	r2, [pc, #60]	; (8024020 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8023fe4:	490f      	ldr	r1, [pc, #60]	; (8024024 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8023fe6:	4810      	ldr	r0, [pc, #64]	; (8024028 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8023fe8:	f007 ffa8 	bl	802bf3c <__aeabi_atexit>
 8023fec:	4c0f      	ldr	r4, [pc, #60]	; (802402c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 8023fee:	7823      	ldrb	r3, [r4, #0]
 8023ff0:	f3bf 8f5b 	dmb	ish
 8023ff4:	07db      	lsls	r3, r3, #31
 8023ff6:	d40b      	bmi.n	8024010 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8023ff8:	4620      	mov	r0, r4
 8023ffa:	f007 ffa6 	bl	802bf4a <__cxa_guard_acquire>
 8023ffe:	b138      	cbz	r0, 8024010 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8024000:	4620      	mov	r0, r4
 8024002:	f007 ffae 	bl	802bf62 <__cxa_guard_release>
 8024006:	4a06      	ldr	r2, [pc, #24]	; (8024020 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8024008:	4909      	ldr	r1, [pc, #36]	; (8024030 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 802400a:	480a      	ldr	r0, [pc, #40]	; (8024034 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 802400c:	f007 ff96 	bl	802bf3c <__aeabi_atexit>
 8024010:	4b05      	ldr	r3, [pc, #20]	; (8024028 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8024012:	63ab      	str	r3, [r5, #56]	; 0x38
 8024014:	4b07      	ldr	r3, [pc, #28]	; (8024034 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8024016:	63eb      	str	r3, [r5, #60]	; 0x3c
 8024018:	bd38      	pop	{r3, r4, r5, pc}
 802401a:	bf00      	nop
 802401c:	2000b038 	.word	0x2000b038
 8024020:	20000000 	.word	0x20000000
 8024024:	08020971 	.word	0x08020971
 8024028:	20000094 	.word	0x20000094
 802402c:	2000b03c 	.word	0x2000b03c
 8024030:	0802096f 	.word	0x0802096f
 8024034:	20000098 	.word	0x20000098

08024038 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8024038:	b510      	push	{r4, lr}
 802403a:	4604      	mov	r4, r0
 802403c:	f7ff ff14 	bl	8023e68 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8024040:	4620      	mov	r0, r4
 8024042:	f7ff ff85 	bl	8023f50 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8024046:	4620      	mov	r0, r4
 8024048:	f7ff ff48 	bl	8023edc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 802404c:	4620      	mov	r0, r4
 802404e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024052:	f7ff bfb7 	b.w	8023fc4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08024058 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8024058:	b538      	push	{r3, r4, r5, lr}
 802405a:	4c15      	ldr	r4, [pc, #84]	; (80240b0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 802405c:	7823      	ldrb	r3, [r4, #0]
 802405e:	f3bf 8f5b 	dmb	ish
 8024062:	07da      	lsls	r2, r3, #31
 8024064:	4605      	mov	r5, r0
 8024066:	d40b      	bmi.n	8024080 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8024068:	4620      	mov	r0, r4
 802406a:	f007 ff6e 	bl	802bf4a <__cxa_guard_acquire>
 802406e:	b138      	cbz	r0, 8024080 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8024070:	4620      	mov	r0, r4
 8024072:	f007 ff76 	bl	802bf62 <__cxa_guard_release>
 8024076:	4a0f      	ldr	r2, [pc, #60]	; (80240b4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8024078:	490f      	ldr	r1, [pc, #60]	; (80240b8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 802407a:	4810      	ldr	r0, [pc, #64]	; (80240bc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 802407c:	f007 ff5e 	bl	802bf3c <__aeabi_atexit>
 8024080:	4c0f      	ldr	r4, [pc, #60]	; (80240c0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8024082:	7823      	ldrb	r3, [r4, #0]
 8024084:	f3bf 8f5b 	dmb	ish
 8024088:	07db      	lsls	r3, r3, #31
 802408a:	d40b      	bmi.n	80240a4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 802408c:	4620      	mov	r0, r4
 802408e:	f007 ff5c 	bl	802bf4a <__cxa_guard_acquire>
 8024092:	b138      	cbz	r0, 80240a4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8024094:	4620      	mov	r0, r4
 8024096:	f007 ff64 	bl	802bf62 <__cxa_guard_release>
 802409a:	4a06      	ldr	r2, [pc, #24]	; (80240b4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 802409c:	4909      	ldr	r1, [pc, #36]	; (80240c4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 802409e:	480a      	ldr	r0, [pc, #40]	; (80240c8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80240a0:	f007 ff4c 	bl	802bf3c <__aeabi_atexit>
 80240a4:	4b05      	ldr	r3, [pc, #20]	; (80240bc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80240a6:	662b      	str	r3, [r5, #96]	; 0x60
 80240a8:	4b07      	ldr	r3, [pc, #28]	; (80240c8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80240aa:	666b      	str	r3, [r5, #100]	; 0x64
 80240ac:	bd38      	pop	{r3, r4, r5, pc}
 80240ae:	bf00      	nop
 80240b0:	2000b020 	.word	0x2000b020
 80240b4:	20000000 	.word	0x20000000
 80240b8:	0802095d 	.word	0x0802095d
 80240bc:	2000007c 	.word	0x2000007c
 80240c0:	2000b024 	.word	0x2000b024
 80240c4:	0802095b 	.word	0x0802095b
 80240c8:	20000080 	.word	0x20000080

080240cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 80240cc:	b538      	push	{r3, r4, r5, lr}
 80240ce:	4c15      	ldr	r4, [pc, #84]	; (8024124 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 80240d0:	7823      	ldrb	r3, [r4, #0]
 80240d2:	f3bf 8f5b 	dmb	ish
 80240d6:	07da      	lsls	r2, r3, #31
 80240d8:	4605      	mov	r5, r0
 80240da:	d40b      	bmi.n	80240f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80240dc:	4620      	mov	r0, r4
 80240de:	f007 ff34 	bl	802bf4a <__cxa_guard_acquire>
 80240e2:	b138      	cbz	r0, 80240f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80240e4:	4620      	mov	r0, r4
 80240e6:	f007 ff3c 	bl	802bf62 <__cxa_guard_release>
 80240ea:	4a0f      	ldr	r2, [pc, #60]	; (8024128 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80240ec:	490f      	ldr	r1, [pc, #60]	; (802412c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 80240ee:	4810      	ldr	r0, [pc, #64]	; (8024130 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80240f0:	f007 ff24 	bl	802bf3c <__aeabi_atexit>
 80240f4:	4c0f      	ldr	r4, [pc, #60]	; (8024134 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 80240f6:	7823      	ldrb	r3, [r4, #0]
 80240f8:	f3bf 8f5b 	dmb	ish
 80240fc:	07db      	lsls	r3, r3, #31
 80240fe:	d40b      	bmi.n	8024118 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8024100:	4620      	mov	r0, r4
 8024102:	f007 ff22 	bl	802bf4a <__cxa_guard_acquire>
 8024106:	b138      	cbz	r0, 8024118 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8024108:	4620      	mov	r0, r4
 802410a:	f007 ff2a 	bl	802bf62 <__cxa_guard_release>
 802410e:	4a06      	ldr	r2, [pc, #24]	; (8024128 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8024110:	4909      	ldr	r1, [pc, #36]	; (8024138 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8024112:	480a      	ldr	r0, [pc, #40]	; (802413c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8024114:	f007 ff12 	bl	802bf3c <__aeabi_atexit>
 8024118:	4b05      	ldr	r3, [pc, #20]	; (8024130 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 802411a:	65ab      	str	r3, [r5, #88]	; 0x58
 802411c:	4b07      	ldr	r3, [pc, #28]	; (802413c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 802411e:	65eb      	str	r3, [r5, #92]	; 0x5c
 8024120:	bd38      	pop	{r3, r4, r5, pc}
 8024122:	bf00      	nop
 8024124:	2000aff8 	.word	0x2000aff8
 8024128:	20000000 	.word	0x20000000
 802412c:	08020961 	.word	0x08020961
 8024130:	20000054 	.word	0x20000054
 8024134:	2000affc 	.word	0x2000affc
 8024138:	0802095f 	.word	0x0802095f
 802413c:	20000058 	.word	0x20000058

08024140 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8024140:	b510      	push	{r4, lr}
 8024142:	4604      	mov	r4, r0
 8024144:	f7ff ff88 	bl	8024058 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8024148:	4620      	mov	r0, r4
 802414a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802414e:	f7ff bfbd 	b.w	80240cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08024154 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8024154:	b538      	push	{r3, r4, r5, lr}
 8024156:	4c15      	ldr	r4, [pc, #84]	; (80241ac <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8024158:	7823      	ldrb	r3, [r4, #0]
 802415a:	f3bf 8f5b 	dmb	ish
 802415e:	07da      	lsls	r2, r3, #31
 8024160:	4605      	mov	r5, r0
 8024162:	d40b      	bmi.n	802417c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8024164:	4620      	mov	r0, r4
 8024166:	f007 fef0 	bl	802bf4a <__cxa_guard_acquire>
 802416a:	b138      	cbz	r0, 802417c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 802416c:	4620      	mov	r0, r4
 802416e:	f007 fef8 	bl	802bf62 <__cxa_guard_release>
 8024172:	4a0f      	ldr	r2, [pc, #60]	; (80241b0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8024174:	490f      	ldr	r1, [pc, #60]	; (80241b4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8024176:	4810      	ldr	r0, [pc, #64]	; (80241b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8024178:	f007 fee0 	bl	802bf3c <__aeabi_atexit>
 802417c:	4c0f      	ldr	r4, [pc, #60]	; (80241bc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 802417e:	7823      	ldrb	r3, [r4, #0]
 8024180:	f3bf 8f5b 	dmb	ish
 8024184:	07db      	lsls	r3, r3, #31
 8024186:	d40b      	bmi.n	80241a0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8024188:	4620      	mov	r0, r4
 802418a:	f007 fede 	bl	802bf4a <__cxa_guard_acquire>
 802418e:	b138      	cbz	r0, 80241a0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8024190:	4620      	mov	r0, r4
 8024192:	f007 fee6 	bl	802bf62 <__cxa_guard_release>
 8024196:	4a06      	ldr	r2, [pc, #24]	; (80241b0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8024198:	4909      	ldr	r1, [pc, #36]	; (80241c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 802419a:	480a      	ldr	r0, [pc, #40]	; (80241c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 802419c:	f007 fece 	bl	802bf3c <__aeabi_atexit>
 80241a0:	4b05      	ldr	r3, [pc, #20]	; (80241b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80241a2:	672b      	str	r3, [r5, #112]	; 0x70
 80241a4:	4b07      	ldr	r3, [pc, #28]	; (80241c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80241a6:	676b      	str	r3, [r5, #116]	; 0x74
 80241a8:	bd38      	pop	{r3, r4, r5, pc}
 80241aa:	bf00      	nop
 80241ac:	2000aff0 	.word	0x2000aff0
 80241b0:	20000000 	.word	0x20000000
 80241b4:	08020955 	.word	0x08020955
 80241b8:	2000004c 	.word	0x2000004c
 80241bc:	2000aff4 	.word	0x2000aff4
 80241c0:	08020953 	.word	0x08020953
 80241c4:	20000050 	.word	0x20000050

080241c8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 80241c8:	b538      	push	{r3, r4, r5, lr}
 80241ca:	4c15      	ldr	r4, [pc, #84]	; (8024220 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 80241cc:	7823      	ldrb	r3, [r4, #0]
 80241ce:	f3bf 8f5b 	dmb	ish
 80241d2:	07da      	lsls	r2, r3, #31
 80241d4:	4605      	mov	r5, r0
 80241d6:	d40b      	bmi.n	80241f0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80241d8:	4620      	mov	r0, r4
 80241da:	f007 feb6 	bl	802bf4a <__cxa_guard_acquire>
 80241de:	b138      	cbz	r0, 80241f0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80241e0:	4620      	mov	r0, r4
 80241e2:	f007 febe 	bl	802bf62 <__cxa_guard_release>
 80241e6:	4a0f      	ldr	r2, [pc, #60]	; (8024224 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80241e8:	490f      	ldr	r1, [pc, #60]	; (8024228 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 80241ea:	4810      	ldr	r0, [pc, #64]	; (802422c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80241ec:	f007 fea6 	bl	802bf3c <__aeabi_atexit>
 80241f0:	4c0f      	ldr	r4, [pc, #60]	; (8024230 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 80241f2:	7823      	ldrb	r3, [r4, #0]
 80241f4:	f3bf 8f5b 	dmb	ish
 80241f8:	07db      	lsls	r3, r3, #31
 80241fa:	d40b      	bmi.n	8024214 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80241fc:	4620      	mov	r0, r4
 80241fe:	f007 fea4 	bl	802bf4a <__cxa_guard_acquire>
 8024202:	b138      	cbz	r0, 8024214 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8024204:	4620      	mov	r0, r4
 8024206:	f007 feac 	bl	802bf62 <__cxa_guard_release>
 802420a:	4a06      	ldr	r2, [pc, #24]	; (8024224 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 802420c:	4909      	ldr	r1, [pc, #36]	; (8024234 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 802420e:	480a      	ldr	r0, [pc, #40]	; (8024238 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8024210:	f007 fe94 	bl	802bf3c <__aeabi_atexit>
 8024214:	4b05      	ldr	r3, [pc, #20]	; (802422c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8024216:	66ab      	str	r3, [r5, #104]	; 0x68
 8024218:	4b07      	ldr	r3, [pc, #28]	; (8024238 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 802421a:	66eb      	str	r3, [r5, #108]	; 0x6c
 802421c:	bd38      	pop	{r3, r4, r5, pc}
 802421e:	bf00      	nop
 8024220:	2000afe8 	.word	0x2000afe8
 8024224:	20000000 	.word	0x20000000
 8024228:	08020959 	.word	0x08020959
 802422c:	20000044 	.word	0x20000044
 8024230:	2000afec 	.word	0x2000afec
 8024234:	08020957 	.word	0x08020957
 8024238:	20000048 	.word	0x20000048

0802423c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 802423c:	b510      	push	{r4, lr}
 802423e:	4604      	mov	r4, r0
 8024240:	f7ff ff88 	bl	8024154 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8024244:	4620      	mov	r0, r4
 8024246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802424a:	f7ff bfbd 	b.w	80241c8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0802424e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 802424e:	b510      	push	{r4, lr}
 8024250:	4604      	mov	r4, r0
 8024252:	f7ff fff3 	bl	802423c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8024256:	4620      	mov	r0, r4
 8024258:	f7ff ff72 	bl	8024140 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 802425c:	4620      	mov	r0, r4
 802425e:	f7ff fdf9 	bl	8023e54 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8024262:	4620      	mov	r0, r4
 8024264:	f7ff fcfa 	bl	8023c5c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8024268:	4620      	mov	r0, r4
 802426a:	f7ff fd75 	bl	8023d58 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 802426e:	4620      	mov	r0, r4
 8024270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024274:	f7ff bee0 	b.w	8024038 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08024278 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 8024278:	b538      	push	{r3, r4, r5, lr}
 802427a:	4c0b      	ldr	r4, [pc, #44]	; (80242a8 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 802427c:	7823      	ldrb	r3, [r4, #0]
 802427e:	f3bf 8f5b 	dmb	ish
 8024282:	07db      	lsls	r3, r3, #31
 8024284:	4605      	mov	r5, r0
 8024286:	d40b      	bmi.n	80242a0 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 8024288:	4620      	mov	r0, r4
 802428a:	f007 fe5e 	bl	802bf4a <__cxa_guard_acquire>
 802428e:	b138      	cbz	r0, 80242a0 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 8024290:	4620      	mov	r0, r4
 8024292:	f007 fe66 	bl	802bf62 <__cxa_guard_release>
 8024296:	4a05      	ldr	r2, [pc, #20]	; (80242ac <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 8024298:	4905      	ldr	r1, [pc, #20]	; (80242b0 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 802429a:	4806      	ldr	r0, [pc, #24]	; (80242b4 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 802429c:	f007 fe4e 	bl	802bf3c <__aeabi_atexit>
 80242a0:	4b04      	ldr	r3, [pc, #16]	; (80242b4 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 80242a2:	67ab      	str	r3, [r5, #120]	; 0x78
 80242a4:	bd38      	pop	{r3, r4, r5, pc}
 80242a6:	bf00      	nop
 80242a8:	2000afdc 	.word	0x2000afdc
 80242ac:	20000000 	.word	0x20000000
 80242b0:	08020951 	.word	0x08020951
 80242b4:	2000003c 	.word	0x2000003c

080242b8 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>:
 80242b8:	b538      	push	{r3, r4, r5, lr}
 80242ba:	4c0b      	ldr	r4, [pc, #44]	; (80242e8 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x30>)
 80242bc:	7823      	ldrb	r3, [r4, #0]
 80242be:	f3bf 8f5b 	dmb	ish
 80242c2:	07db      	lsls	r3, r3, #31
 80242c4:	4605      	mov	r5, r0
 80242c6:	d40b      	bmi.n	80242e0 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x28>
 80242c8:	4620      	mov	r0, r4
 80242ca:	f007 fe3e 	bl	802bf4a <__cxa_guard_acquire>
 80242ce:	b138      	cbz	r0, 80242e0 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x28>
 80242d0:	4620      	mov	r0, r4
 80242d2:	f007 fe46 	bl	802bf62 <__cxa_guard_release>
 80242d6:	4a05      	ldr	r2, [pc, #20]	; (80242ec <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x34>)
 80242d8:	4905      	ldr	r1, [pc, #20]	; (80242f0 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x38>)
 80242da:	4806      	ldr	r0, [pc, #24]	; (80242f4 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 80242dc:	f007 fe2e 	bl	802bf3c <__aeabi_atexit>
 80242e0:	4b04      	ldr	r3, [pc, #16]	; (80242f4 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 80242e2:	67eb      	str	r3, [r5, #124]	; 0x7c
 80242e4:	bd38      	pop	{r3, r4, r5, pc}
 80242e6:	bf00      	nop
 80242e8:	2000afe0 	.word	0x2000afe0
 80242ec:	20000000 	.word	0x20000000
 80242f0:	0802094f 	.word	0x0802094f
 80242f4:	20000040 	.word	0x20000040

080242f8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>:
 80242f8:	b570      	push	{r4, r5, r6, lr}
 80242fa:	4d0d      	ldr	r5, [pc, #52]	; (8024330 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x38>)
 80242fc:	4c0d      	ldr	r4, [pc, #52]	; (8024334 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 80242fe:	782b      	ldrb	r3, [r5, #0]
 8024300:	f3bf 8f5b 	dmb	ish
 8024304:	f013 0f01 	tst.w	r3, #1
 8024308:	4606      	mov	r6, r0
 802430a:	d10d      	bne.n	8024328 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x30>
 802430c:	4628      	mov	r0, r5
 802430e:	f007 fe1c 	bl	802bf4a <__cxa_guard_acquire>
 8024312:	b148      	cbz	r0, 8024328 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x30>
 8024314:	4b08      	ldr	r3, [pc, #32]	; (8024338 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x40>)
 8024316:	6023      	str	r3, [r4, #0]
 8024318:	4628      	mov	r0, r5
 802431a:	f007 fe22 	bl	802bf62 <__cxa_guard_release>
 802431e:	4a07      	ldr	r2, [pc, #28]	; (802433c <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x44>)
 8024320:	4907      	ldr	r1, [pc, #28]	; (8024340 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x48>)
 8024322:	4620      	mov	r0, r4
 8024324:	f007 fe0a 	bl	802bf3c <__aeabi_atexit>
 8024328:	f8c6 4080 	str.w	r4, [r6, #128]	; 0x80
 802432c:	bd70      	pop	{r4, r5, r6, pc}
 802432e:	bf00      	nop
 8024330:	2000afe4 	.word	0x2000afe4
 8024334:	2000b058 	.word	0x2000b058
 8024338:	0802f8b4 	.word	0x0802f8b4
 802433c:	20000000 	.word	0x20000000
 8024340:	0802094d 	.word	0x0802094d

08024344 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>:
 8024344:	b510      	push	{r4, lr}
 8024346:	4604      	mov	r4, r0
 8024348:	f7ff ff96 	bl	8024278 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
 802434c:	4620      	mov	r0, r4
 802434e:	f7ff ffb3 	bl	80242b8 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>
 8024352:	4620      	mov	r0, r4
 8024354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024358:	f7ff bfce 	b.w	80242f8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>

0802435c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 802435c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024360:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 8024364:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 8024368:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 802436c:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 8024370:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8024374:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 8024378:	8808      	ldrh	r0, [r1, #0]
 802437a:	fb05 4c0e 	mla	ip, r5, lr, r4
 802437e:	2d00      	cmp	r5, #0
 8024380:	eb02 0a0c 	add.w	sl, r2, ip
 8024384:	f2c0 80b0 	blt.w	80244e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8024388:	45ab      	cmp	fp, r5
 802438a:	f340 80ad 	ble.w	80244e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 802438e:	2c00      	cmp	r4, #0
 8024390:	f2c0 80a8 	blt.w	80244e4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8024394:	45a6      	cmp	lr, r4
 8024396:	f340 80a5 	ble.w	80244e4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 802439a:	f812 200c 	ldrb.w	r2, [r2, ip]
 802439e:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 80243a2:	1c62      	adds	r2, r4, #1
 80243a4:	f100 80a3 	bmi.w	80244ee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 80243a8:	4596      	cmp	lr, r2
 80243aa:	f340 80a0 	ble.w	80244ee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 80243ae:	f1b9 0f00 	cmp.w	r9, #0
 80243b2:	f000 809c 	beq.w	80244ee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 80243b6:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80243ba:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 80243be:	3501      	adds	r5, #1
 80243c0:	f100 8099 	bmi.w	80244f6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 80243c4:	45ab      	cmp	fp, r5
 80243c6:	f340 8096 	ble.w	80244f6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 80243ca:	2f00      	cmp	r7, #0
 80243cc:	f000 8093 	beq.w	80244f6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 80243d0:	2c00      	cmp	r4, #0
 80243d2:	f2c0 808e 	blt.w	80244f2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 80243d6:	45a6      	cmp	lr, r4
 80243d8:	f340 808b 	ble.w	80244f2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 80243dc:	f81a 200e 	ldrb.w	r2, [sl, lr]
 80243e0:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 80243e4:	3401      	adds	r4, #1
 80243e6:	f100 8089 	bmi.w	80244fc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 80243ea:	45a6      	cmp	lr, r4
 80243ec:	f340 8086 	ble.w	80244fc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 80243f0:	f1b9 0f00 	cmp.w	r9, #0
 80243f4:	f000 8082 	beq.w	80244fc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 80243f8:	44d6      	add	lr, sl
 80243fa:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80243fe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8024402:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8024406:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802440a:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 802440e:	fb19 fe07 	smulbb	lr, r9, r7
 8024412:	ea44 0808 	orr.w	r8, r4, r8
 8024416:	ea4f 440c 	mov.w	r4, ip, lsl #16
 802441a:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 802441e:	f1c7 0210 	rsb	r2, r7, #16
 8024422:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8024426:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802442a:	ea44 0c0c 	orr.w	ip, r4, ip
 802442e:	eba2 0209 	sub.w	r2, r2, r9
 8024432:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8024436:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 802443a:	fb04 f40c 	mul.w	r4, r4, ip
 802443e:	fb02 4808 	mla	r8, r2, r8, r4
 8024442:	041a      	lsls	r2, r3, #16
 8024444:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8024448:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802444c:	4313      	orrs	r3, r2
 802444e:	042a      	lsls	r2, r5, #16
 8024450:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8024454:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8024458:	fb0e 8303 	mla	r3, lr, r3, r8
 802445c:	432a      	orrs	r2, r5
 802445e:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8024462:	fb07 3202 	mla	r2, r7, r2, r3
 8024466:	0d53      	lsrs	r3, r2, #21
 8024468:	0952      	lsrs	r2, r2, #5
 802446a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802446e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024472:	431a      	orrs	r2, r3
 8024474:	b293      	uxth	r3, r2
 8024476:	b2b4      	uxth	r4, r6
 8024478:	1202      	asrs	r2, r0, #8
 802447a:	43f6      	mvns	r6, r6
 802447c:	b2f6      	uxtb	r6, r6
 802447e:	121d      	asrs	r5, r3, #8
 8024480:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8024484:	fb12 f206 	smulbb	r2, r2, r6
 8024488:	10c7      	asrs	r7, r0, #3
 802448a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802448e:	00c0      	lsls	r0, r0, #3
 8024490:	fb05 2504 	mla	r5, r5, r4, r2
 8024494:	b2c0      	uxtb	r0, r0
 8024496:	10da      	asrs	r2, r3, #3
 8024498:	00db      	lsls	r3, r3, #3
 802449a:	b2db      	uxtb	r3, r3
 802449c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80244a0:	fb10 f006 	smulbb	r0, r0, r6
 80244a4:	b2ad      	uxth	r5, r5
 80244a6:	fb03 0004 	mla	r0, r3, r4, r0
 80244aa:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80244ae:	fb17 f706 	smulbb	r7, r7, r6
 80244b2:	b280      	uxth	r0, r0
 80244b4:	1c6b      	adds	r3, r5, #1
 80244b6:	fb02 7204 	mla	r2, r2, r4, r7
 80244ba:	b292      	uxth	r2, r2
 80244bc:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80244c0:	1c43      	adds	r3, r0, #1
 80244c2:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80244c6:	1c50      	adds	r0, r2, #1
 80244c8:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80244cc:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80244d0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80244d4:	0952      	lsrs	r2, r2, #5
 80244d6:	432b      	orrs	r3, r5
 80244d8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80244dc:	4313      	orrs	r3, r2
 80244de:	800b      	strh	r3, [r1, #0]
 80244e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80244e4:	4680      	mov	r8, r0
 80244e6:	e75c      	b.n	80243a2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 80244e8:	4684      	mov	ip, r0
 80244ea:	4680      	mov	r8, r0
 80244ec:	e767      	b.n	80243be <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 80244ee:	4684      	mov	ip, r0
 80244f0:	e765      	b.n	80243be <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 80244f2:	4605      	mov	r5, r0
 80244f4:	e776      	b.n	80243e4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 80244f6:	4603      	mov	r3, r0
 80244f8:	4605      	mov	r5, r0
 80244fa:	e782      	b.n	8024402 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 80244fc:	4603      	mov	r3, r0
 80244fe:	e780      	b.n	8024402 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

08024500 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024504:	b099      	sub	sp, #100	; 0x64
 8024506:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 802450a:	9215      	str	r2, [sp, #84]	; 0x54
 802450c:	9309      	str	r3, [sp, #36]	; 0x24
 802450e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8024510:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 8024514:	930d      	str	r3, [sp, #52]	; 0x34
 8024516:	910c      	str	r1, [sp, #48]	; 0x30
 8024518:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 802451c:	9016      	str	r0, [sp, #88]	; 0x58
 802451e:	6850      	ldr	r0, [r2, #4]
 8024520:	6812      	ldr	r2, [r2, #0]
 8024522:	fb00 1303 	mla	r3, r0, r3, r1
 8024526:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 802452a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802452c:	681b      	ldr	r3, [r3, #0]
 802452e:	930b      	str	r3, [sp, #44]	; 0x2c
 8024530:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024532:	685e      	ldr	r6, [r3, #4]
 8024534:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024536:	43db      	mvns	r3, r3
 8024538:	b2db      	uxtb	r3, r3
 802453a:	3604      	adds	r6, #4
 802453c:	930a      	str	r3, [sp, #40]	; 0x28
 802453e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024540:	2b00      	cmp	r3, #0
 8024542:	dc03      	bgt.n	802454c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8024544:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8024546:	2b00      	cmp	r3, #0
 8024548:	f340 8225 	ble.w	8024996 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 802454c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802454e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024552:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024556:	1e48      	subs	r0, r1, #1
 8024558:	1e57      	subs	r7, r2, #1
 802455a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802455c:	2b00      	cmp	r3, #0
 802455e:	f340 80e3 	ble.w	8024728 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8024562:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8024566:	ea4f 4325 	mov.w	r3, r5, asr #16
 802456a:	d406      	bmi.n	802457a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802456c:	4584      	cmp	ip, r0
 802456e:	da04      	bge.n	802457a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024570:	2b00      	cmp	r3, #0
 8024572:	db02      	blt.n	802457a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024574:	42bb      	cmp	r3, r7
 8024576:	f2c0 80d8 	blt.w	802472a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802457a:	f11c 0c01 	adds.w	ip, ip, #1
 802457e:	f100 80c9 	bmi.w	8024714 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8024582:	4561      	cmp	r1, ip
 8024584:	f2c0 80c6 	blt.w	8024714 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8024588:	3301      	adds	r3, #1
 802458a:	f100 80c3 	bmi.w	8024714 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 802458e:	429a      	cmp	r2, r3
 8024590:	f2c0 80c0 	blt.w	8024714 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8024594:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8024598:	4647      	mov	r7, r8
 802459a:	f1bb 0f00 	cmp.w	fp, #0
 802459e:	f340 80e3 	ble.w	8024768 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 80245a2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80245a4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80245a6:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80245aa:	689b      	ldr	r3, [r3, #8]
 80245ac:	ea5f 422a 	movs.w	r2, sl, asr #16
 80245b0:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80245b4:	f3ca 3003 	ubfx	r0, sl, #12, #4
 80245b8:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80245bc:	f100 8121 	bmi.w	8024802 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 80245c0:	f103 39ff 	add.w	r9, r3, #4294967295
 80245c4:	454a      	cmp	r2, r9
 80245c6:	f280 811c 	bge.w	8024802 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 80245ca:	f1bc 0f00 	cmp.w	ip, #0
 80245ce:	f2c0 8118 	blt.w	8024802 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 80245d2:	f10e 39ff 	add.w	r9, lr, #4294967295
 80245d6:	45cc      	cmp	ip, r9
 80245d8:	f280 8113 	bge.w	8024802 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 80245dc:	b21b      	sxth	r3, r3
 80245de:	fb0c 2203 	mla	r2, ip, r3, r2
 80245e2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80245e4:	eb04 0902 	add.w	r9, r4, r2
 80245e8:	5ca2      	ldrb	r2, [r4, r2]
 80245ea:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 80245ee:	2800      	cmp	r0, #0
 80245f0:	f000 80fe 	beq.w	80247f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 80245f4:	f899 2001 	ldrb.w	r2, [r9, #1]
 80245f8:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 80245fc:	9211      	str	r2, [sp, #68]	; 0x44
 80245fe:	b151      	cbz	r1, 8024616 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8024600:	eb09 0203 	add.w	r2, r9, r3
 8024604:	f819 3003 	ldrb.w	r3, [r9, r3]
 8024608:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802460c:	930f      	str	r3, [sp, #60]	; 0x3c
 802460e:	7853      	ldrb	r3, [r2, #1]
 8024610:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024614:	9312      	str	r3, [sp, #72]	; 0x48
 8024616:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024618:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802461a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802461e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024622:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024626:	ea4c 0c03 	orr.w	ip, ip, r3
 802462a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802462c:	041b      	lsls	r3, r3, #16
 802462e:	fb10 f201 	smulbb	r2, r0, r1
 8024632:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8024636:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802463a:	10d2      	asrs	r2, r2, #3
 802463c:	4323      	orrs	r3, r4
 802463e:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8024642:	4353      	muls	r3, r2
 8024644:	fb09 330c 	mla	r3, r9, ip, r3
 8024648:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 802464c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024650:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8024654:	ea4c 0e0e 	orr.w	lr, ip, lr
 8024658:	f1c1 0c10 	rsb	ip, r1, #16
 802465c:	ebac 0c00 	sub.w	ip, ip, r0
 8024660:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8024664:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8024668:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802466a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802466c:	0418      	lsls	r0, r3, #16
 802466e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8024672:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024676:	4318      	orrs	r0, r3
 8024678:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 802467c:	fb02 c200 	mla	r2, r2, r0, ip
 8024680:	0d53      	lsrs	r3, r2, #21
 8024682:	0952      	lsrs	r2, r2, #5
 8024684:	8838      	ldrh	r0, [r7, #0]
 8024686:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802468a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802468e:	431a      	orrs	r2, r3
 8024690:	b292      	uxth	r2, r2
 8024692:	1201      	asrs	r1, r0, #8
 8024694:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8024698:	ea4f 2c22 	mov.w	ip, r2, asr #8
 802469c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80246a0:	fb11 f104 	smulbb	r1, r1, r4
 80246a4:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 80246a8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80246ac:	00c0      	lsls	r0, r0, #3
 80246ae:	fb0c 1c03 	mla	ip, ip, r3, r1
 80246b2:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80246b6:	10d1      	asrs	r1, r2, #3
 80246b8:	b2c0      	uxtb	r0, r0
 80246ba:	00d2      	lsls	r2, r2, #3
 80246bc:	b2d2      	uxtb	r2, r2
 80246be:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80246c2:	fb1e fe04 	smulbb	lr, lr, r4
 80246c6:	fb10 f004 	smulbb	r0, r0, r4
 80246ca:	fa1f fc8c 	uxth.w	ip, ip
 80246ce:	fb01 e103 	mla	r1, r1, r3, lr
 80246d2:	fb02 0303 	mla	r3, r2, r3, r0
 80246d6:	b29a      	uxth	r2, r3
 80246d8:	f10c 0301 	add.w	r3, ip, #1
 80246dc:	b289      	uxth	r1, r1
 80246de:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80246e2:	1c53      	adds	r3, r2, #1
 80246e4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80246e8:	1c4a      	adds	r2, r1, #1
 80246ea:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80246ee:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80246f2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80246f6:	0949      	lsrs	r1, r1, #5
 80246f8:	ea43 030c 	orr.w	r3, r3, ip
 80246fc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024700:	430b      	orrs	r3, r1
 8024702:	803b      	strh	r3, [r7, #0]
 8024704:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8024706:	449a      	add	sl, r3
 8024708:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802470a:	3702      	adds	r7, #2
 802470c:	441d      	add	r5, r3
 802470e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024712:	e742      	b.n	802459a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8024714:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8024716:	449a      	add	sl, r3
 8024718:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802471a:	441d      	add	r5, r3
 802471c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802471e:	3b01      	subs	r3, #1
 8024720:	9309      	str	r3, [sp, #36]	; 0x24
 8024722:	f108 0802 	add.w	r8, r8, #2
 8024726:	e718      	b.n	802455a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8024728:	d023      	beq.n	8024772 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 802472a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802472c:	9825      	ldr	r0, [sp, #148]	; 0x94
 802472e:	3b01      	subs	r3, #1
 8024730:	fb00 a003 	mla	r0, r0, r3, sl
 8024734:	1400      	asrs	r0, r0, #16
 8024736:	f53f af2d 	bmi.w	8024594 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802473a:	3901      	subs	r1, #1
 802473c:	4288      	cmp	r0, r1
 802473e:	f6bf af29 	bge.w	8024594 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024742:	9926      	ldr	r1, [sp, #152]	; 0x98
 8024744:	fb01 5303 	mla	r3, r1, r3, r5
 8024748:	141b      	asrs	r3, r3, #16
 802474a:	f53f af23 	bmi.w	8024594 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802474e:	3a01      	subs	r2, #1
 8024750:	4293      	cmp	r3, r2
 8024752:	f6bf af1f 	bge.w	8024594 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024756:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 802475a:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 802475e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8024762:	f1be 0f00 	cmp.w	lr, #0
 8024766:	dc6c      	bgt.n	8024842 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8024768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802476a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802476e:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8024772:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024774:	2b00      	cmp	r3, #0
 8024776:	f340 810e 	ble.w	8024996 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 802477a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802477e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024782:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024786:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8024788:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802478c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024790:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024794:	eef0 6a62 	vmov.f32	s13, s5
 8024798:	ee61 7a27 	vmul.f32	s15, s2, s15
 802479c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80247a0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80247a4:	ee16 aa90 	vmov	sl, s13
 80247a8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80247ac:	eef0 6a43 	vmov.f32	s13, s6
 80247b0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80247b4:	ee12 2a90 	vmov	r2, s5
 80247b8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80247bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80247c0:	ee13 2a10 	vmov	r2, s6
 80247c4:	9325      	str	r3, [sp, #148]	; 0x94
 80247c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80247c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80247cc:	9326      	str	r3, [sp, #152]	; 0x98
 80247ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80247d0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80247d2:	3b01      	subs	r3, #1
 80247d4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80247d8:	930c      	str	r3, [sp, #48]	; 0x30
 80247da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80247dc:	bf08      	it	eq
 80247de:	4613      	moveq	r3, r2
 80247e0:	ee16 5a90 	vmov	r5, s13
 80247e4:	9309      	str	r3, [sp, #36]	; 0x24
 80247e6:	eeb0 3a67 	vmov.f32	s6, s15
 80247ea:	eef0 2a47 	vmov.f32	s5, s14
 80247ee:	e6a6      	b.n	802453e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80247f0:	2900      	cmp	r1, #0
 80247f2:	f43f af10 	beq.w	8024616 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 80247f6:	f819 3003 	ldrb.w	r3, [r9, r3]
 80247fa:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80247fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8024800:	e709      	b.n	8024616 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8024802:	f112 0901 	adds.w	r9, r2, #1
 8024806:	f53f af7d 	bmi.w	8024704 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802480a:	454b      	cmp	r3, r9
 802480c:	f6ff af7a 	blt.w	8024704 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8024810:	f11c 0901 	adds.w	r9, ip, #1
 8024814:	f53f af76 	bmi.w	8024704 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8024818:	45ce      	cmp	lr, r9
 802481a:	f6ff af73 	blt.w	8024704 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802481e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024820:	9202      	str	r2, [sp, #8]
 8024822:	b21b      	sxth	r3, r3
 8024824:	fa0f f28e 	sxth.w	r2, lr
 8024828:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802482c:	e9cd c003 	strd	ip, r0, [sp, #12]
 8024830:	9201      	str	r2, [sp, #4]
 8024832:	9300      	str	r3, [sp, #0]
 8024834:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024836:	9816      	ldr	r0, [sp, #88]	; 0x58
 8024838:	4633      	mov	r3, r6
 802483a:	4639      	mov	r1, r7
 802483c:	f7ff fd8e 	bl	802435c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8024840:	e760      	b.n	8024704 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8024842:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024844:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024846:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802484a:	ea4f 422a 	mov.w	r2, sl, asr #16
 802484e:	1429      	asrs	r1, r5, #16
 8024850:	fb03 2101 	mla	r1, r3, r1, r2
 8024854:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024856:	440a      	add	r2, r1
 8024858:	5c61      	ldrb	r1, [r4, r1]
 802485a:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 802485e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024862:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8024866:	f1bc 0f00 	cmp.w	ip, #0
 802486a:	f000 808c 	beq.w	8024986 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 802486e:	7857      	ldrb	r7, [r2, #1]
 8024870:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8024874:	9413      	str	r4, [sp, #76]	; 0x4c
 8024876:	b140      	cbz	r0, 802488a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8024878:	18d7      	adds	r7, r2, r3
 802487a:	5cd3      	ldrb	r3, [r2, r3]
 802487c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024880:	9310      	str	r3, [sp, #64]	; 0x40
 8024882:	787b      	ldrb	r3, [r7, #1]
 8024884:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024888:	9314      	str	r3, [sp, #80]	; 0x50
 802488a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802488c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802488e:	fb1c f200 	smulbb	r2, ip, r0
 8024892:	041f      	lsls	r7, r3, #16
 8024894:	10d2      	asrs	r2, r2, #3
 8024896:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802489a:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 802489e:	431f      	orrs	r7, r3
 80248a0:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 80248a4:	9317      	str	r3, [sp, #92]	; 0x5c
 80248a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80248a8:	041b      	lsls	r3, r3, #16
 80248aa:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 80248ae:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80248b2:	ea43 030b 	orr.w	r3, r3, fp
 80248b6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80248b8:	4353      	muls	r3, r2
 80248ba:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80248be:	fb04 3707 	mla	r7, r4, r7, r3
 80248c2:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80248c6:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 80248ca:	ea43 0b01 	orr.w	fp, r3, r1
 80248ce:	f1c0 0110 	rsb	r1, r0, #16
 80248d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80248d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80248d6:	eba1 0c0c 	sub.w	ip, r1, ip
 80248da:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80248de:	fb0c 770b 	mla	r7, ip, fp, r7
 80248e2:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80248e6:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 80248ea:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80248ee:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80248f2:	ea4c 0c0b 	orr.w	ip, ip, fp
 80248f6:	fb02 770c 	mla	r7, r2, ip, r7
 80248fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80248fc:	0d79      	lsrs	r1, r7, #21
 80248fe:	097f      	lsrs	r7, r7, #5
 8024900:	8812      	ldrh	r2, [r2, #0]
 8024902:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024906:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 802490a:	430f      	orrs	r7, r1
 802490c:	b2bb      	uxth	r3, r7
 802490e:	1211      	asrs	r1, r2, #8
 8024910:	1218      	asrs	r0, r3, #8
 8024912:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024916:	fb11 f104 	smulbb	r1, r1, r4
 802491a:	10d7      	asrs	r7, r2, #3
 802491c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024920:	00d2      	lsls	r2, r2, #3
 8024922:	fb00 1009 	mla	r0, r0, r9, r1
 8024926:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802492a:	10d9      	asrs	r1, r3, #3
 802492c:	b2d2      	uxtb	r2, r2
 802492e:	00db      	lsls	r3, r3, #3
 8024930:	fb17 f704 	smulbb	r7, r7, r4
 8024934:	fb12 f204 	smulbb	r2, r2, r4
 8024938:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802493c:	b2db      	uxtb	r3, r3
 802493e:	b280      	uxth	r0, r0
 8024940:	fb01 7109 	mla	r1, r1, r9, r7
 8024944:	fb03 2309 	mla	r3, r3, r9, r2
 8024948:	b29b      	uxth	r3, r3
 802494a:	b289      	uxth	r1, r1
 802494c:	1c42      	adds	r2, r0, #1
 802494e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024952:	1c4f      	adds	r7, r1, #1
 8024954:	1c5a      	adds	r2, r3, #1
 8024956:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802495a:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 802495e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8024962:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8024966:	0949      	lsrs	r1, r1, #5
 8024968:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802496a:	4310      	orrs	r0, r2
 802496c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024970:	4308      	orrs	r0, r1
 8024972:	f823 0b02 	strh.w	r0, [r3], #2
 8024976:	930e      	str	r3, [sp, #56]	; 0x38
 8024978:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802497a:	449a      	add	sl, r3
 802497c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802497e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8024982:	441d      	add	r5, r3
 8024984:	e6ed      	b.n	8024762 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 8024986:	2800      	cmp	r0, #0
 8024988:	f43f af7f 	beq.w	802488a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 802498c:	5cd3      	ldrb	r3, [r2, r3]
 802498e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024992:	9310      	str	r3, [sp, #64]	; 0x40
 8024994:	e779      	b.n	802488a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8024996:	b019      	add	sp, #100	; 0x64
 8024998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802499c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 802499c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80249a0:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 80249a4:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 80249a8:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 80249ac:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 80249b0:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 80249b4:	8808      	ldrh	r0, [r1, #0]
 80249b6:	fb08 470e 	mla	r7, r8, lr, r4
 80249ba:	f1b8 0f00 	cmp.w	r8, #0
 80249be:	eb02 0907 	add.w	r9, r2, r7
 80249c2:	db67      	blt.n	8024a94 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 80249c4:	45c2      	cmp	sl, r8
 80249c6:	dd65      	ble.n	8024a94 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 80249c8:	2c00      	cmp	r4, #0
 80249ca:	db61      	blt.n	8024a90 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 80249cc:	45a6      	cmp	lr, r4
 80249ce:	dd5f      	ble.n	8024a90 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 80249d0:	5dd2      	ldrb	r2, [r2, r7]
 80249d2:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 80249d6:	1c62      	adds	r2, r4, #1
 80249d8:	d45f      	bmi.n	8024a9a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 80249da:	4596      	cmp	lr, r2
 80249dc:	dd5d      	ble.n	8024a9a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 80249de:	2d00      	cmp	r5, #0
 80249e0:	d05b      	beq.n	8024a9a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 80249e2:	f899 2001 	ldrb.w	r2, [r9, #1]
 80249e6:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 80249ea:	f118 0801 	adds.w	r8, r8, #1
 80249ee:	d458      	bmi.n	8024aa2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 80249f0:	45c2      	cmp	sl, r8
 80249f2:	dd56      	ble.n	8024aa2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 80249f4:	2e00      	cmp	r6, #0
 80249f6:	d054      	beq.n	8024aa2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 80249f8:	2c00      	cmp	r4, #0
 80249fa:	db50      	blt.n	8024a9e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 80249fc:	45a6      	cmp	lr, r4
 80249fe:	dd4e      	ble.n	8024a9e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8024a00:	f819 200e 	ldrb.w	r2, [r9, lr]
 8024a04:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8024a08:	3401      	adds	r4, #1
 8024a0a:	d407      	bmi.n	8024a1c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8024a0c:	45a6      	cmp	lr, r4
 8024a0e:	dd05      	ble.n	8024a1c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8024a10:	b125      	cbz	r5, 8024a1c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8024a12:	44ce      	add	lr, r9
 8024a14:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8024a18:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8024a1c:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8024a20:	fb15 f406 	smulbb	r4, r5, r6
 8024a24:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8024a28:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8024a2c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8024a30:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8024a34:	ea43 0c0c 	orr.w	ip, r3, ip
 8024a38:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8024a3c:	f1c6 0310 	rsb	r3, r6, #16
 8024a40:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8024a44:	1b5b      	subs	r3, r3, r5
 8024a46:	ea4e 0707 	orr.w	r7, lr, r7
 8024a4a:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8024a4e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8024a52:	437d      	muls	r5, r7
 8024a54:	fb03 5c0c 	mla	ip, r3, ip, r5
 8024a58:	0403      	lsls	r3, r0, #16
 8024a5a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8024a5e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024a62:	4318      	orrs	r0, r3
 8024a64:	0413      	lsls	r3, r2, #16
 8024a66:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8024a6a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024a6e:	4313      	orrs	r3, r2
 8024a70:	fb04 c000 	mla	r0, r4, r0, ip
 8024a74:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8024a78:	fb06 0003 	mla	r0, r6, r3, r0
 8024a7c:	0d43      	lsrs	r3, r0, #21
 8024a7e:	0940      	lsrs	r0, r0, #5
 8024a80:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024a84:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024a88:	4318      	orrs	r0, r3
 8024a8a:	8008      	strh	r0, [r1, #0]
 8024a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024a90:	4684      	mov	ip, r0
 8024a92:	e7a0      	b.n	80249d6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 8024a94:	4607      	mov	r7, r0
 8024a96:	4684      	mov	ip, r0
 8024a98:	e7a7      	b.n	80249ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 8024a9a:	4607      	mov	r7, r0
 8024a9c:	e7a5      	b.n	80249ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 8024a9e:	4602      	mov	r2, r0
 8024aa0:	e7b2      	b.n	8024a08 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 8024aa2:	4602      	mov	r2, r0
 8024aa4:	e7ba      	b.n	8024a1c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

08024aa6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024aa6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024aaa:	b093      	sub	sp, #76	; 0x4c
 8024aac:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8024ab0:	920f      	str	r2, [sp, #60]	; 0x3c
 8024ab2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8024ab4:	9108      	str	r1, [sp, #32]
 8024ab6:	9306      	str	r3, [sp, #24]
 8024ab8:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8024abc:	9010      	str	r0, [sp, #64]	; 0x40
 8024abe:	6850      	ldr	r0, [r2, #4]
 8024ac0:	6812      	ldr	r2, [r2, #0]
 8024ac2:	fb00 1303 	mla	r3, r0, r3, r1
 8024ac6:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8024aca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024acc:	681b      	ldr	r3, [r3, #0]
 8024ace:	9307      	str	r3, [sp, #28]
 8024ad0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024ad2:	685f      	ldr	r7, [r3, #4]
 8024ad4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8024ad8:	3704      	adds	r7, #4
 8024ada:	9b08      	ldr	r3, [sp, #32]
 8024adc:	2b00      	cmp	r3, #0
 8024ade:	dc03      	bgt.n	8024ae8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8024ae0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024ae2:	2b00      	cmp	r3, #0
 8024ae4:	f340 81b2 	ble.w	8024e4c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8024ae8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024aea:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024aee:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024af2:	1e48      	subs	r0, r1, #1
 8024af4:	f102 3cff 	add.w	ip, r2, #4294967295
 8024af8:	9b06      	ldr	r3, [sp, #24]
 8024afa:	2b00      	cmp	r3, #0
 8024afc:	f340 80a9 	ble.w	8024c52 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8024b00:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8024b04:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024b08:	d406      	bmi.n	8024b18 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024b0a:	4586      	cmp	lr, r0
 8024b0c:	da04      	bge.n	8024b18 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024b0e:	2b00      	cmp	r3, #0
 8024b10:	db02      	blt.n	8024b18 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024b12:	4563      	cmp	r3, ip
 8024b14:	f2c0 809e 	blt.w	8024c54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8024b18:	f11e 0e01 	adds.w	lr, lr, #1
 8024b1c:	f100 808f 	bmi.w	8024c3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8024b20:	4571      	cmp	r1, lr
 8024b22:	f2c0 808c 	blt.w	8024c3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8024b26:	3301      	adds	r3, #1
 8024b28:	f100 8089 	bmi.w	8024c3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8024b2c:	429a      	cmp	r2, r3
 8024b2e:	f2c0 8086 	blt.w	8024c3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8024b32:	f8dd b018 	ldr.w	fp, [sp, #24]
 8024b36:	46c8      	mov	r8, r9
 8024b38:	f1bb 0f00 	cmp.w	fp, #0
 8024b3c:	f340 80a6 	ble.w	8024c8c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8024b40:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8024b42:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024b44:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8024b48:	689b      	ldr	r3, [r3, #8]
 8024b4a:	1422      	asrs	r2, r4, #16
 8024b4c:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8024b50:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8024b54:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024b58:	f100 80e3 	bmi.w	8024d22 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8024b5c:	f103 3aff 	add.w	sl, r3, #4294967295
 8024b60:	4552      	cmp	r2, sl
 8024b62:	f280 80de 	bge.w	8024d22 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8024b66:	f1bc 0f00 	cmp.w	ip, #0
 8024b6a:	f2c0 80da 	blt.w	8024d22 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8024b6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8024b72:	45d4      	cmp	ip, sl
 8024b74:	f280 80d5 	bge.w	8024d22 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8024b78:	b21b      	sxth	r3, r3
 8024b7a:	fb0c 2203 	mla	r2, ip, r3, r2
 8024b7e:	9d07      	ldr	r5, [sp, #28]
 8024b80:	eb05 0a02 	add.w	sl, r5, r2
 8024b84:	5caa      	ldrb	r2, [r5, r2]
 8024b86:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8024b8a:	2800      	cmp	r0, #0
 8024b8c:	f000 80c0 	beq.w	8024d10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8024b90:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8024b94:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8024b98:	920b      	str	r2, [sp, #44]	; 0x2c
 8024b9a:	b151      	cbz	r1, 8024bb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8024b9c:	eb0a 0203 	add.w	r2, sl, r3
 8024ba0:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8024ba4:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8024baa:	7853      	ldrb	r3, [r2, #1]
 8024bac:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024bb0:	930c      	str	r3, [sp, #48]	; 0x30
 8024bb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024bb4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024bb6:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8024bba:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024bbe:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024bc2:	ea4c 0c03 	orr.w	ip, ip, r3
 8024bc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024bc8:	041b      	lsls	r3, r3, #16
 8024bca:	fb10 f201 	smulbb	r2, r0, r1
 8024bce:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8024bd2:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8024bd6:	10d2      	asrs	r2, r2, #3
 8024bd8:	432b      	orrs	r3, r5
 8024bda:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8024bde:	4353      	muls	r3, r2
 8024be0:	fb0a 330c 	mla	r3, sl, ip, r3
 8024be4:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8024be8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024bec:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8024bf0:	ea4c 0e0e 	orr.w	lr, ip, lr
 8024bf4:	f1c1 0c10 	rsb	ip, r1, #16
 8024bf8:	ebac 0c00 	sub.w	ip, ip, r0
 8024bfc:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8024c00:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8024c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024c06:	0418      	lsls	r0, r3, #16
 8024c08:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8024c0c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024c10:	4318      	orrs	r0, r3
 8024c12:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8024c16:	fb02 c200 	mla	r2, r2, r0, ip
 8024c1a:	0d53      	lsrs	r3, r2, #21
 8024c1c:	0952      	lsrs	r2, r2, #5
 8024c1e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024c22:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024c26:	431a      	orrs	r2, r3
 8024c28:	f8a8 2000 	strh.w	r2, [r8]
 8024c2c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024c2e:	441c      	add	r4, r3
 8024c30:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024c32:	f108 0802 	add.w	r8, r8, #2
 8024c36:	441e      	add	r6, r3
 8024c38:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024c3c:	e77c      	b.n	8024b38 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024c3e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024c40:	441c      	add	r4, r3
 8024c42:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024c44:	441e      	add	r6, r3
 8024c46:	9b06      	ldr	r3, [sp, #24]
 8024c48:	3b01      	subs	r3, #1
 8024c4a:	9306      	str	r3, [sp, #24]
 8024c4c:	f109 0902 	add.w	r9, r9, #2
 8024c50:	e752      	b.n	8024af8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8024c52:	d020      	beq.n	8024c96 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8024c54:	9b06      	ldr	r3, [sp, #24]
 8024c56:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8024c58:	3b01      	subs	r3, #1
 8024c5a:	fb00 4003 	mla	r0, r0, r3, r4
 8024c5e:	1400      	asrs	r0, r0, #16
 8024c60:	f53f af67 	bmi.w	8024b32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8024c64:	3901      	subs	r1, #1
 8024c66:	4288      	cmp	r0, r1
 8024c68:	f6bf af63 	bge.w	8024b32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8024c6c:	9920      	ldr	r1, [sp, #128]	; 0x80
 8024c6e:	fb01 6303 	mla	r3, r1, r3, r6
 8024c72:	141b      	asrs	r3, r3, #16
 8024c74:	f53f af5d 	bmi.w	8024b32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8024c78:	3a01      	subs	r2, #1
 8024c7a:	4293      	cmp	r3, r2
 8024c7c:	f6bf af59 	bge.w	8024b32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8024c80:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8024c84:	46ca      	mov	sl, r9
 8024c86:	f1b8 0f00 	cmp.w	r8, #0
 8024c8a:	dc67      	bgt.n	8024d5c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8024c8c:	9b06      	ldr	r3, [sp, #24]
 8024c8e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8024c92:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8024c96:	9b08      	ldr	r3, [sp, #32]
 8024c98:	2b00      	cmp	r3, #0
 8024c9a:	f340 80d7 	ble.w	8024e4c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8024c9e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024ca2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024ca6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8024caa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024cac:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024cb0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024cb4:	eeb0 6a62 	vmov.f32	s12, s5
 8024cb8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024cbc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8024cc0:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024cc4:	ee16 4a10 	vmov	r4, s12
 8024cc8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024ccc:	eeb0 6a43 	vmov.f32	s12, s6
 8024cd0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024cd4:	ee12 2a90 	vmov	r2, s5
 8024cd8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024cdc:	fb92 f3f3 	sdiv	r3, r2, r3
 8024ce0:	ee13 2a10 	vmov	r2, s6
 8024ce4:	931f      	str	r3, [sp, #124]	; 0x7c
 8024ce6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024ce8:	fb92 f3f3 	sdiv	r3, r2, r3
 8024cec:	9320      	str	r3, [sp, #128]	; 0x80
 8024cee:	9b08      	ldr	r3, [sp, #32]
 8024cf0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024cf2:	3b01      	subs	r3, #1
 8024cf4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8024cf8:	9308      	str	r3, [sp, #32]
 8024cfa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024cfc:	bf08      	it	eq
 8024cfe:	4613      	moveq	r3, r2
 8024d00:	ee16 6a10 	vmov	r6, s12
 8024d04:	9306      	str	r3, [sp, #24]
 8024d06:	eeb0 3a67 	vmov.f32	s6, s15
 8024d0a:	eef0 2a47 	vmov.f32	s5, s14
 8024d0e:	e6e4      	b.n	8024ada <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8024d10:	2900      	cmp	r1, #0
 8024d12:	f43f af4e 	beq.w	8024bb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8024d16:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8024d1a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8024d20:	e747      	b.n	8024bb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8024d22:	f112 0a01 	adds.w	sl, r2, #1
 8024d26:	d481      	bmi.n	8024c2c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8024d28:	4553      	cmp	r3, sl
 8024d2a:	f6ff af7f 	blt.w	8024c2c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8024d2e:	f11c 0a01 	adds.w	sl, ip, #1
 8024d32:	f53f af7b 	bmi.w	8024c2c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8024d36:	45d6      	cmp	lr, sl
 8024d38:	f6ff af78 	blt.w	8024c2c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8024d3c:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 8024d40:	b21b      	sxth	r3, r3
 8024d42:	fa0f f28e 	sxth.w	r2, lr
 8024d46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8024d4a:	9201      	str	r2, [sp, #4]
 8024d4c:	9300      	str	r3, [sp, #0]
 8024d4e:	9a07      	ldr	r2, [sp, #28]
 8024d50:	9810      	ldr	r0, [sp, #64]	; 0x40
 8024d52:	463b      	mov	r3, r7
 8024d54:	4641      	mov	r1, r8
 8024d56:	f7ff fe21 	bl	802499c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8024d5a:	e767      	b.n	8024c2c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8024d5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024d5e:	9d07      	ldr	r5, [sp, #28]
 8024d60:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8024d64:	1422      	asrs	r2, r4, #16
 8024d66:	1431      	asrs	r1, r6, #16
 8024d68:	fb03 2101 	mla	r1, r3, r1, r2
 8024d6c:	9a07      	ldr	r2, [sp, #28]
 8024d6e:	440a      	add	r2, r1
 8024d70:	5c69      	ldrb	r1, [r5, r1]
 8024d72:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 8024d76:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8024d7a:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8024d7e:	f1be 0f00 	cmp.w	lr, #0
 8024d82:	d05c      	beq.n	8024e3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 8024d84:	f892 c001 	ldrb.w	ip, [r2, #1]
 8024d88:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 8024d8c:	950d      	str	r5, [sp, #52]	; 0x34
 8024d8e:	b150      	cbz	r0, 8024da6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8024d90:	eb02 0c03 	add.w	ip, r2, r3
 8024d94:	5cd3      	ldrb	r3, [r2, r3]
 8024d96:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024d9a:	930a      	str	r3, [sp, #40]	; 0x28
 8024d9c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8024da0:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024da4:	930e      	str	r3, [sp, #56]	; 0x38
 8024da6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024da8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024daa:	fb1e f200 	smulbb	r2, lr, r0
 8024dae:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8024db2:	10d2      	asrs	r2, r2, #3
 8024db4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024db8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024dbc:	ea4c 0c03 	orr.w	ip, ip, r3
 8024dc0:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 8024dc4:	9311      	str	r3, [sp, #68]	; 0x44
 8024dc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024dc8:	041b      	lsls	r3, r3, #16
 8024dca:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8024dce:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8024dd2:	ea43 030b 	orr.w	r3, r3, fp
 8024dd6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024dd8:	4353      	muls	r3, r2
 8024dda:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8024dde:	fb05 3c0c 	mla	ip, r5, ip, r3
 8024de2:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8024de6:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8024dea:	ea43 0b01 	orr.w	fp, r3, r1
 8024dee:	f1c0 0110 	rsb	r1, r0, #16
 8024df2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024df4:	eba1 0e0e 	sub.w	lr, r1, lr
 8024df8:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8024dfc:	fb0e cc0b 	mla	ip, lr, fp, ip
 8024e00:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8024e04:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 8024e08:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024e0c:	ea4b 0e0e 	orr.w	lr, fp, lr
 8024e10:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8024e14:	fb02 cc0e 	mla	ip, r2, lr, ip
 8024e18:	ea4f 535c 	mov.w	r3, ip, lsr #21
 8024e1c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8024e20:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024e24:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8024e28:	ea43 0c0c 	orr.w	ip, r3, ip
 8024e2c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024e2e:	f82a cb02 	strh.w	ip, [sl], #2
 8024e32:	441c      	add	r4, r3
 8024e34:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024e36:	f108 38ff 	add.w	r8, r8, #4294967295
 8024e3a:	441e      	add	r6, r3
 8024e3c:	e723      	b.n	8024c86 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8024e3e:	2800      	cmp	r0, #0
 8024e40:	d0b1      	beq.n	8024da6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8024e42:	5cd3      	ldrb	r3, [r2, r3]
 8024e44:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024e48:	930a      	str	r3, [sp, #40]	; 0x28
 8024e4a:	e7ac      	b.n	8024da6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8024e4c:	b013      	add	sp, #76	; 0x4c
 8024e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024e52 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 8024e52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024e56:	880d      	ldrh	r5, [r1, #0]
 8024e58:	b087      	sub	sp, #28
 8024e5a:	10ef      	asrs	r7, r5, #3
 8024e5c:	ea4f 2a25 	mov.w	sl, r5, asr #8
 8024e60:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8024e64:	00ed      	lsls	r5, r5, #3
 8024e66:	9701      	str	r7, [sp, #4]
 8024e68:	b2ed      	uxtb	r5, r5
 8024e6a:	9502      	str	r5, [sp, #8]
 8024e6c:	9d01      	ldr	r5, [sp, #4]
 8024e6e:	9103      	str	r1, [sp, #12]
 8024e70:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 8024e74:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 8024e78:	9902      	ldr	r1, [sp, #8]
 8024e7a:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8024e7e:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8024e82:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 8024e86:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 8024e8a:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 8024e8e:	022d      	lsls	r5, r5, #8
 8024e90:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8024e94:	fb06 0709 	mla	r7, r6, r9, r0
 8024e98:	430d      	orrs	r5, r1
 8024e9a:	2e00      	cmp	r6, #0
 8024e9c:	eb02 0c07 	add.w	ip, r2, r7
 8024ea0:	9505      	str	r5, [sp, #20]
 8024ea2:	f2c0 80b6 	blt.w	8025012 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 8024ea6:	45b3      	cmp	fp, r6
 8024ea8:	f340 80b3 	ble.w	8025012 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 8024eac:	2800      	cmp	r0, #0
 8024eae:	f2c0 80ae 	blt.w	802500e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 8024eb2:	4581      	cmp	r9, r0
 8024eb4:	f340 80ab 	ble.w	802500e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 8024eb8:	5dd7      	ldrb	r7, [r2, r7]
 8024eba:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024ebe:	441f      	add	r7, r3
 8024ec0:	1c42      	adds	r2, r0, #1
 8024ec2:	f100 80a9 	bmi.w	8025018 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8024ec6:	4591      	cmp	r9, r2
 8024ec8:	f340 80a6 	ble.w	8025018 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8024ecc:	2c00      	cmp	r4, #0
 8024ece:	f000 80a3 	beq.w	8025018 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8024ed2:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8024ed6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024eda:	441d      	add	r5, r3
 8024edc:	3601      	adds	r6, #1
 8024ede:	f100 809f 	bmi.w	8025020 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8024ee2:	45b3      	cmp	fp, r6
 8024ee4:	f340 809c 	ble.w	8025020 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8024ee8:	f1be 0f00 	cmp.w	lr, #0
 8024eec:	f000 8098 	beq.w	8025020 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8024ef0:	2800      	cmp	r0, #0
 8024ef2:	f2c0 8093 	blt.w	802501c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 8024ef6:	4581      	cmp	r9, r0
 8024ef8:	f340 8090 	ble.w	802501c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 8024efc:	f81c 6009 	ldrb.w	r6, [ip, r9]
 8024f00:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024f04:	441e      	add	r6, r3
 8024f06:	3001      	adds	r0, #1
 8024f08:	f100 808d 	bmi.w	8025026 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8024f0c:	4581      	cmp	r9, r0
 8024f0e:	f340 808a 	ble.w	8025026 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8024f12:	2c00      	cmp	r4, #0
 8024f14:	f000 8087 	beq.w	8025026 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8024f18:	44e1      	add	r9, ip
 8024f1a:	f899 2001 	ldrb.w	r2, [r9, #1]
 8024f1e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024f22:	4413      	add	r3, r2
 8024f24:	b2a4      	uxth	r4, r4
 8024f26:	fa1f fe8e 	uxth.w	lr, lr
 8024f2a:	fb04 fb0e 	mul.w	fp, r4, lr
 8024f2e:	0124      	lsls	r4, r4, #4
 8024f30:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 8024f34:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 8024f38:	eba4 040b 	sub.w	r4, r4, fp
 8024f3c:	fa1f f08e 	uxth.w	r0, lr
 8024f40:	b2a2      	uxth	r2, r4
 8024f42:	78ac      	ldrb	r4, [r5, #2]
 8024f44:	f897 c002 	ldrb.w	ip, [r7, #2]
 8024f48:	9901      	ldr	r1, [sp, #4]
 8024f4a:	eba9 0900 	sub.w	r9, r9, r0
 8024f4e:	fa1f f989 	uxth.w	r9, r9
 8024f52:	4354      	muls	r4, r2
 8024f54:	fb09 440c 	mla	r4, r9, ip, r4
 8024f58:	f896 c002 	ldrb.w	ip, [r6, #2]
 8024f5c:	fb00 440c 	mla	r4, r0, ip, r4
 8024f60:	f893 c002 	ldrb.w	ip, [r3, #2]
 8024f64:	fa1f fe88 	uxth.w	lr, r8
 8024f68:	ea6f 0808 	mvn.w	r8, r8
 8024f6c:	fa5f f888 	uxtb.w	r8, r8
 8024f70:	fb0b 4c0c 	mla	ip, fp, ip, r4
 8024f74:	fb1a fa08 	smulbb	sl, sl, r8
 8024f78:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8024f7c:	fb0c ac0e 	mla	ip, ip, lr, sl
 8024f80:	f895 a001 	ldrb.w	sl, [r5, #1]
 8024f84:	787c      	ldrb	r4, [r7, #1]
 8024f86:	782d      	ldrb	r5, [r5, #0]
 8024f88:	783f      	ldrb	r7, [r7, #0]
 8024f8a:	fb02 fa0a 	mul.w	sl, r2, sl
 8024f8e:	fb09 aa04 	mla	sl, r9, r4, sl
 8024f92:	7874      	ldrb	r4, [r6, #1]
 8024f94:	436a      	muls	r2, r5
 8024f96:	7835      	ldrb	r5, [r6, #0]
 8024f98:	fb00 aa04 	mla	sl, r0, r4, sl
 8024f9c:	fb09 2207 	mla	r2, r9, r7, r2
 8024fa0:	785c      	ldrb	r4, [r3, #1]
 8024fa2:	781b      	ldrb	r3, [r3, #0]
 8024fa4:	fb00 2005 	mla	r0, r0, r5, r2
 8024fa8:	fb0b a404 	mla	r4, fp, r4, sl
 8024fac:	fb0b 0b03 	mla	fp, fp, r3, r0
 8024fb0:	9b02      	ldr	r3, [sp, #8]
 8024fb2:	fb11 fa08 	smulbb	sl, r1, r8
 8024fb6:	fa1f fc8c 	uxth.w	ip, ip
 8024fba:	fb13 f808 	smulbb	r8, r3, r8
 8024fbe:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8024fc2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8024fc6:	fb04 a40e 	mla	r4, r4, lr, sl
 8024fca:	f10c 0301 	add.w	r3, ip, #1
 8024fce:	fb0b 8e0e 	mla	lr, fp, lr, r8
 8024fd2:	fa1f fe8e 	uxth.w	lr, lr
 8024fd6:	b2a4      	uxth	r4, r4
 8024fd8:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8024fdc:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 8024fe0:	f104 0a01 	add.w	sl, r4, #1
 8024fe4:	f10e 0c01 	add.w	ip, lr, #1
 8024fe8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8024fec:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8024ff0:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8024ff4:	0964      	lsrs	r4, r4, #5
 8024ff6:	ea4c 0c03 	orr.w	ip, ip, r3
 8024ffa:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8024ffe:	9b03      	ldr	r3, [sp, #12]
 8025000:	ea4c 0c04 	orr.w	ip, ip, r4
 8025004:	f8a3 c000 	strh.w	ip, [r3]
 8025008:	b007      	add	sp, #28
 802500a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802500e:	af05      	add	r7, sp, #20
 8025010:	e756      	b.n	8024ec0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 8025012:	ad05      	add	r5, sp, #20
 8025014:	462f      	mov	r7, r5
 8025016:	e761      	b.n	8024edc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8025018:	ad05      	add	r5, sp, #20
 802501a:	e75f      	b.n	8024edc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 802501c:	ae05      	add	r6, sp, #20
 802501e:	e772      	b.n	8024f06 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 8025020:	ab05      	add	r3, sp, #20
 8025022:	461e      	mov	r6, r3
 8025024:	e77e      	b.n	8024f24 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 8025026:	ab05      	add	r3, sp, #20
 8025028:	e77c      	b.n	8024f24 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

0802502a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802502a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802502e:	b095      	sub	sp, #84	; 0x54
 8025030:	9212      	str	r2, [sp, #72]	; 0x48
 8025032:	9309      	str	r3, [sp, #36]	; 0x24
 8025034:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8025036:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 802503a:	930f      	str	r3, [sp, #60]	; 0x3c
 802503c:	910e      	str	r1, [sp, #56]	; 0x38
 802503e:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 8025042:	9013      	str	r0, [sp, #76]	; 0x4c
 8025044:	6850      	ldr	r0, [r2, #4]
 8025046:	6812      	ldr	r2, [r2, #0]
 8025048:	fb00 1303 	mla	r3, r0, r3, r1
 802504c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025050:	930a      	str	r3, [sp, #40]	; 0x28
 8025052:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025054:	681b      	ldr	r3, [r3, #0]
 8025056:	930d      	str	r3, [sp, #52]	; 0x34
 8025058:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802505a:	685c      	ldr	r4, [r3, #4]
 802505c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802505e:	43db      	mvns	r3, r3
 8025060:	b2db      	uxtb	r3, r3
 8025062:	3404      	adds	r4, #4
 8025064:	930b      	str	r3, [sp, #44]	; 0x2c
 8025066:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025068:	2b00      	cmp	r3, #0
 802506a:	dc03      	bgt.n	8025074 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802506c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802506e:	2b00      	cmp	r3, #0
 8025070:	f340 8255 	ble.w	802551e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8025074:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025076:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802507a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802507e:	1e48      	subs	r0, r1, #1
 8025080:	1e55      	subs	r5, r2, #1
 8025082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025084:	2b00      	cmp	r3, #0
 8025086:	f340 80f9 	ble.w	802527c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 802508a:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 802508c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802508e:	1436      	asrs	r6, r6, #16
 8025090:	ea4f 4323 	mov.w	r3, r3, asr #16
 8025094:	d406      	bmi.n	80250a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8025096:	4286      	cmp	r6, r0
 8025098:	da04      	bge.n	80250a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802509a:	2b00      	cmp	r3, #0
 802509c:	db02      	blt.n	80250a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802509e:	42ab      	cmp	r3, r5
 80250a0:	f2c0 80ed 	blt.w	802527e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80250a4:	3601      	adds	r6, #1
 80250a6:	f100 80da 	bmi.w	802525e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80250aa:	42b1      	cmp	r1, r6
 80250ac:	f2c0 80d7 	blt.w	802525e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80250b0:	3301      	adds	r3, #1
 80250b2:	f100 80d4 	bmi.w	802525e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80250b6:	429a      	cmp	r2, r3
 80250b8:	f2c0 80d1 	blt.w	802525e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80250bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80250be:	9311      	str	r3, [sp, #68]	; 0x44
 80250c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80250c2:	930c      	str	r3, [sp, #48]	; 0x30
 80250c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80250c6:	2b00      	cmp	r3, #0
 80250c8:	f340 80fa 	ble.w	80252c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80250cc:	9826      	ldr	r0, [sp, #152]	; 0x98
 80250ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80250d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80250d2:	68c6      	ldr	r6, [r0, #12]
 80250d4:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80250d6:	141d      	asrs	r5, r3, #16
 80250d8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80250dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80250de:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80250e0:	1400      	asrs	r0, r0, #16
 80250e2:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80250e6:	6892      	ldr	r2, [r2, #8]
 80250e8:	f100 813e 	bmi.w	8025368 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80250ec:	1e57      	subs	r7, r2, #1
 80250ee:	42b8      	cmp	r0, r7
 80250f0:	f280 813a 	bge.w	8025368 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80250f4:	2d00      	cmp	r5, #0
 80250f6:	f2c0 8137 	blt.w	8025368 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80250fa:	1e77      	subs	r7, r6, #1
 80250fc:	42bd      	cmp	r5, r7
 80250fe:	f280 8133 	bge.w	8025368 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8025102:	b212      	sxth	r2, r2
 8025104:	fb05 0002 	mla	r0, r5, r2, r0
 8025108:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802510a:	f815 a000 	ldrb.w	sl, [r5, r0]
 802510e:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8025112:	182e      	adds	r6, r5, r0
 8025114:	eb04 050a 	add.w	r5, r4, sl
 8025118:	2b00      	cmp	r3, #0
 802511a:	f000 8117 	beq.w	802534c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802511e:	f896 c001 	ldrb.w	ip, [r6, #1]
 8025122:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8025126:	44a4      	add	ip, r4
 8025128:	2900      	cmp	r1, #0
 802512a:	f000 8117 	beq.w	802535c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 802512e:	18b0      	adds	r0, r6, r2
 8025130:	5cb2      	ldrb	r2, [r6, r2]
 8025132:	7840      	ldrb	r0, [r0, #1]
 8025134:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025138:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802513c:	4422      	add	r2, r4
 802513e:	4420      	add	r0, r4
 8025140:	b29b      	uxth	r3, r3
 8025142:	b289      	uxth	r1, r1
 8025144:	fb03 f901 	mul.w	r9, r3, r1
 8025148:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802514c:	011b      	lsls	r3, r3, #4
 802514e:	b289      	uxth	r1, r1
 8025150:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8025154:	f895 b002 	ldrb.w	fp, [r5, #2]
 8025158:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802515a:	f814 a00a 	ldrb.w	sl, [r4, sl]
 802515e:	f8b6 e000 	ldrh.w	lr, [r6]
 8025162:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8025166:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 802516a:	eba3 0309 	sub.w	r3, r3, r9
 802516e:	b29b      	uxth	r3, r3
 8025170:	eba8 0801 	sub.w	r8, r8, r1
 8025174:	fa1f f888 	uxth.w	r8, r8
 8025178:	435f      	muls	r7, r3
 802517a:	fb08 770b 	mla	r7, r8, fp, r7
 802517e:	f892 b002 	ldrb.w	fp, [r2, #2]
 8025182:	9310      	str	r3, [sp, #64]	; 0x40
 8025184:	fb01 770b 	mla	r7, r1, fp, r7
 8025188:	f890 b002 	ldrb.w	fp, [r0, #2]
 802518c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802518e:	fb09 770b 	mla	r7, r9, fp, r7
 8025192:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8025196:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 802519a:	fb1b fb03 	smulbb	fp, fp, r3
 802519e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80251a2:	fb07 b706 	mla	r7, r7, r6, fp
 80251a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80251a8:	f895 b001 	ldrb.w	fp, [r5, #1]
 80251ac:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80251b0:	f89c c000 	ldrb.w	ip, [ip]
 80251b4:	435d      	muls	r5, r3
 80251b6:	fb08 550b 	mla	r5, r8, fp, r5
 80251ba:	f892 b001 	ldrb.w	fp, [r2, #1]
 80251be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80251c0:	fb01 550b 	mla	r5, r1, fp, r5
 80251c4:	f890 b001 	ldrb.w	fp, [r0, #1]
 80251c8:	fb09 550b 	mla	r5, r9, fp, r5
 80251cc:	ea4f 0bee 	mov.w	fp, lr, asr #3
 80251d0:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 80251d4:	fb1b fb03 	smulbb	fp, fp, r3
 80251d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80251da:	fb03 f30c 	mul.w	r3, r3, ip
 80251de:	f892 c000 	ldrb.w	ip, [r2]
 80251e2:	fb08 330a 	mla	r3, r8, sl, r3
 80251e6:	fb01 330c 	mla	r3, r1, ip, r3
 80251ea:	f890 c000 	ldrb.w	ip, [r0]
 80251ee:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80251f2:	fb09 3c0c 	mla	ip, r9, ip, r3
 80251f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80251f8:	fa5f fe8e 	uxtb.w	lr, lr
 80251fc:	b2bf      	uxth	r7, r7
 80251fe:	fb1e fe03 	smulbb	lr, lr, r3
 8025202:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8025206:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 802520a:	fb05 b506 	mla	r5, r5, r6, fp
 802520e:	1c7b      	adds	r3, r7, #1
 8025210:	fb0c e606 	mla	r6, ip, r6, lr
 8025214:	b2ad      	uxth	r5, r5
 8025216:	b2b6      	uxth	r6, r6
 8025218:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 802521c:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 8025220:	f105 0b01 	add.w	fp, r5, #1
 8025224:	1c77      	adds	r7, r6, #1
 8025226:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 802522a:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 802522e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8025232:	096d      	lsrs	r5, r5, #5
 8025234:	431f      	orrs	r7, r3
 8025236:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802523a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802523c:	433d      	orrs	r5, r7
 802523e:	801d      	strh	r5, [r3, #0]
 8025240:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025242:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8025244:	3302      	adds	r3, #2
 8025246:	930c      	str	r3, [sp, #48]	; 0x30
 8025248:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802524a:	4413      	add	r3, r2
 802524c:	931f      	str	r3, [sp, #124]	; 0x7c
 802524e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8025250:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025252:	4413      	add	r3, r2
 8025254:	9320      	str	r3, [sp, #128]	; 0x80
 8025256:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025258:	3b01      	subs	r3, #1
 802525a:	9311      	str	r3, [sp, #68]	; 0x44
 802525c:	e732      	b.n	80250c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802525e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8025260:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8025262:	4433      	add	r3, r6
 8025264:	931f      	str	r3, [sp, #124]	; 0x7c
 8025266:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8025268:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802526a:	4433      	add	r3, r6
 802526c:	9320      	str	r3, [sp, #128]	; 0x80
 802526e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025270:	3b01      	subs	r3, #1
 8025272:	9309      	str	r3, [sp, #36]	; 0x24
 8025274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025276:	3302      	adds	r3, #2
 8025278:	930a      	str	r3, [sp, #40]	; 0x28
 802527a:	e702      	b.n	8025082 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802527c:	d027      	beq.n	80252ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 802527e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025280:	9821      	ldr	r0, [sp, #132]	; 0x84
 8025282:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8025284:	3b01      	subs	r3, #1
 8025286:	fb00 5003 	mla	r0, r0, r3, r5
 802528a:	1400      	asrs	r0, r0, #16
 802528c:	f53f af16 	bmi.w	80250bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025290:	3901      	subs	r1, #1
 8025292:	4288      	cmp	r0, r1
 8025294:	f6bf af12 	bge.w	80250bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025298:	9922      	ldr	r1, [sp, #136]	; 0x88
 802529a:	9820      	ldr	r0, [sp, #128]	; 0x80
 802529c:	fb01 0303 	mla	r3, r1, r3, r0
 80252a0:	141b      	asrs	r3, r3, #16
 80252a2:	f53f af0b 	bmi.w	80250bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80252a6:	3a01      	subs	r2, #1
 80252a8:	4293      	cmp	r3, r2
 80252aa:	f6bf af07 	bge.w	80250bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80252ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80252b0:	9311      	str	r3, [sp, #68]	; 0x44
 80252b2:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 80252b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80252b8:	930c      	str	r3, [sp, #48]	; 0x30
 80252ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80252bc:	2b00      	cmp	r3, #0
 80252be:	dc70      	bgt.n	80253a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 80252c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80252c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80252c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80252c8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80252cc:	930a      	str	r3, [sp, #40]	; 0x28
 80252ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80252d0:	2b00      	cmp	r3, #0
 80252d2:	f340 8124 	ble.w	802551e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 80252d6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80252da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80252de:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80252e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80252e4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80252e8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80252ec:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80252f0:	eef0 6a62 	vmov.f32	s13, s5
 80252f4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80252f8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80252fc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025300:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 8025304:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025308:	eef0 6a43 	vmov.f32	s13, s6
 802530c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025310:	ee12 2a90 	vmov	r2, s5
 8025314:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025318:	fb92 f3f3 	sdiv	r3, r2, r3
 802531c:	ee13 2a10 	vmov	r2, s6
 8025320:	9321      	str	r3, [sp, #132]	; 0x84
 8025322:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8025324:	fb92 f3f3 	sdiv	r3, r2, r3
 8025328:	9322      	str	r3, [sp, #136]	; 0x88
 802532a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802532c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802532e:	3b01      	subs	r3, #1
 8025330:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025334:	930e      	str	r3, [sp, #56]	; 0x38
 8025336:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8025338:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 802533c:	bf08      	it	eq
 802533e:	4613      	moveq	r3, r2
 8025340:	9309      	str	r3, [sp, #36]	; 0x24
 8025342:	eeb0 3a67 	vmov.f32	s6, s15
 8025346:	eef0 2a47 	vmov.f32	s5, s14
 802534a:	e68c      	b.n	8025066 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802534c:	b149      	cbz	r1, 8025362 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 802534e:	5cb2      	ldrb	r2, [r6, r2]
 8025350:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025354:	4422      	add	r2, r4
 8025356:	4628      	mov	r0, r5
 8025358:	46ac      	mov	ip, r5
 802535a:	e6f1      	b.n	8025140 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802535c:	4628      	mov	r0, r5
 802535e:	462a      	mov	r2, r5
 8025360:	e6ee      	b.n	8025140 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8025362:	4628      	mov	r0, r5
 8025364:	462a      	mov	r2, r5
 8025366:	e7f7      	b.n	8025358 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8025368:	1c47      	adds	r7, r0, #1
 802536a:	f53f af69 	bmi.w	8025240 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 802536e:	42ba      	cmp	r2, r7
 8025370:	f6ff af66 	blt.w	8025240 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8025374:	1c6f      	adds	r7, r5, #1
 8025376:	f53f af63 	bmi.w	8025240 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 802537a:	42be      	cmp	r6, r7
 802537c:	f6ff af60 	blt.w	8025240 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8025380:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8025382:	9002      	str	r0, [sp, #8]
 8025384:	b236      	sxth	r6, r6
 8025386:	b212      	sxth	r2, r2
 8025388:	e9cd 1705 	strd	r1, r7, [sp, #20]
 802538c:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8025390:	9200      	str	r2, [sp, #0]
 8025392:	9601      	str	r6, [sp, #4]
 8025394:	4623      	mov	r3, r4
 8025396:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 802539a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802539c:	f7ff fd59 	bl	8024e52 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 80253a0:	e74e      	b.n	8025240 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 80253a2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80253a4:	9820      	ldr	r0, [sp, #128]	; 0x80
 80253a6:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 80253a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80253aa:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80253ae:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80253b0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80253b4:	142d      	asrs	r5, r5, #16
 80253b6:	1400      	asrs	r0, r0, #16
 80253b8:	fb02 5000 	mla	r0, r2, r0, r5
 80253bc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80253be:	f815 9000 	ldrb.w	r9, [r5, r0]
 80253c2:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80253c6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80253ca:	182e      	adds	r6, r5, r0
 80253cc:	eb04 0509 	add.w	r5, r4, r9
 80253d0:	2b00      	cmp	r3, #0
 80253d2:	f000 8096 	beq.w	8025502 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80253d6:	7877      	ldrb	r7, [r6, #1]
 80253d8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80253dc:	4427      	add	r7, r4
 80253de:	2900      	cmp	r1, #0
 80253e0:	f000 8097 	beq.w	8025512 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 80253e4:	18b0      	adds	r0, r6, r2
 80253e6:	5cb2      	ldrb	r2, [r6, r2]
 80253e8:	7840      	ldrb	r0, [r0, #1]
 80253ea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80253ee:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80253f2:	4422      	add	r2, r4
 80253f4:	4420      	add	r0, r4
 80253f6:	b29b      	uxth	r3, r3
 80253f8:	b289      	uxth	r1, r1
 80253fa:	fb03 f801 	mul.w	r8, r3, r1
 80253fe:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8025400:	f895 b002 	ldrb.w	fp, [r5, #2]
 8025404:	f8b6 c000 	ldrh.w	ip, [r6]
 8025408:	78be      	ldrb	r6, [r7, #2]
 802540a:	f814 9009 	ldrb.w	r9, [r4, r9]
 802540e:	011b      	lsls	r3, r3, #4
 8025410:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8025414:	b289      	uxth	r1, r1
 8025416:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802541a:	eba3 0308 	sub.w	r3, r3, r8
 802541e:	b29b      	uxth	r3, r3
 8025420:	ebae 0e01 	sub.w	lr, lr, r1
 8025424:	fa1f fe8e 	uxth.w	lr, lr
 8025428:	435e      	muls	r6, r3
 802542a:	fb0e 660b 	mla	r6, lr, fp, r6
 802542e:	f892 b002 	ldrb.w	fp, [r2, #2]
 8025432:	9310      	str	r3, [sp, #64]	; 0x40
 8025434:	fb01 660b 	mla	r6, r1, fp, r6
 8025438:	f890 b002 	ldrb.w	fp, [r0, #2]
 802543c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802543e:	fb08 660b 	mla	r6, r8, fp, r6
 8025442:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8025446:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 802544a:	fb1b fb03 	smulbb	fp, fp, r3
 802544e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8025452:	fb06 b60a 	mla	r6, r6, sl, fp
 8025456:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025458:	f895 b001 	ldrb.w	fp, [r5, #1]
 802545c:	787d      	ldrb	r5, [r7, #1]
 802545e:	783f      	ldrb	r7, [r7, #0]
 8025460:	435d      	muls	r5, r3
 8025462:	fb0e 550b 	mla	r5, lr, fp, r5
 8025466:	f892 b001 	ldrb.w	fp, [r2, #1]
 802546a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802546c:	fb01 550b 	mla	r5, r1, fp, r5
 8025470:	f890 b001 	ldrb.w	fp, [r0, #1]
 8025474:	fb08 550b 	mla	r5, r8, fp, r5
 8025478:	ea4f 0bec 	mov.w	fp, ip, asr #3
 802547c:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8025480:	fb1b fb03 	smulbb	fp, fp, r3
 8025484:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025486:	437b      	muls	r3, r7
 8025488:	7817      	ldrb	r7, [r2, #0]
 802548a:	fb0e 3309 	mla	r3, lr, r9, r3
 802548e:	fb01 3307 	mla	r3, r1, r7, r3
 8025492:	7807      	ldrb	r7, [r0, #0]
 8025494:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8025498:	fb08 3707 	mla	r7, r8, r7, r3
 802549c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802549e:	fa5f fc8c 	uxtb.w	ip, ip
 80254a2:	fb1c fc03 	smulbb	ip, ip, r3
 80254a6:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80254aa:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80254ae:	fb05 b50a 	mla	r5, r5, sl, fp
 80254b2:	fb07 c70a 	mla	r7, r7, sl, ip
 80254b6:	b2b6      	uxth	r6, r6
 80254b8:	b2ad      	uxth	r5, r5
 80254ba:	b2bf      	uxth	r7, r7
 80254bc:	1c73      	adds	r3, r6, #1
 80254be:	1c7a      	adds	r2, r7, #1
 80254c0:	f105 0b01 	add.w	fp, r5, #1
 80254c4:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80254c8:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 80254cc:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 80254d0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80254d4:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80254d8:	096d      	lsrs	r5, r5, #5
 80254da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80254dc:	4316      	orrs	r6, r2
 80254de:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80254e2:	432e      	orrs	r6, r5
 80254e4:	f823 6b02 	strh.w	r6, [r3], #2
 80254e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80254ea:	930c      	str	r3, [sp, #48]	; 0x30
 80254ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80254ee:	4413      	add	r3, r2
 80254f0:	931f      	str	r3, [sp, #124]	; 0x7c
 80254f2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80254f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80254f6:	4413      	add	r3, r2
 80254f8:	9320      	str	r3, [sp, #128]	; 0x80
 80254fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80254fc:	3b01      	subs	r3, #1
 80254fe:	9311      	str	r3, [sp, #68]	; 0x44
 8025500:	e6db      	b.n	80252ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8025502:	b149      	cbz	r1, 8025518 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8025504:	5cb2      	ldrb	r2, [r6, r2]
 8025506:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802550a:	4422      	add	r2, r4
 802550c:	4628      	mov	r0, r5
 802550e:	462f      	mov	r7, r5
 8025510:	e771      	b.n	80253f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8025512:	4628      	mov	r0, r5
 8025514:	462a      	mov	r2, r5
 8025516:	e76e      	b.n	80253f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8025518:	4628      	mov	r0, r5
 802551a:	462a      	mov	r2, r5
 802551c:	e7f7      	b.n	802550e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802551e:	b015      	add	sp, #84	; 0x54
 8025520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025524 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8025524:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025528:	880f      	ldrh	r7, [r1, #0]
 802552a:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 802552e:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8025532:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8025536:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 802553a:	023c      	lsls	r4, r7, #8
 802553c:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 8025540:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 8025544:	017c      	lsls	r4, r7, #5
 8025546:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 802554a:	00ff      	lsls	r7, r7, #3
 802554c:	ea4b 0404 	orr.w	r4, fp, r4
 8025550:	b2ff      	uxtb	r7, r7
 8025552:	fb05 ca0e 	mla	sl, r5, lr, ip
 8025556:	4327      	orrs	r7, r4
 8025558:	2d00      	cmp	r5, #0
 802555a:	eb02 080a 	add.w	r8, r2, sl
 802555e:	9701      	str	r7, [sp, #4]
 8025560:	db7e      	blt.n	8025660 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8025562:	45a9      	cmp	r9, r5
 8025564:	dd7c      	ble.n	8025660 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8025566:	f1bc 0f00 	cmp.w	ip, #0
 802556a:	db77      	blt.n	802565c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 802556c:	45e6      	cmp	lr, ip
 802556e:	dd75      	ble.n	802565c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8025570:	f812 700a 	ldrb.w	r7, [r2, sl]
 8025574:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8025578:	441f      	add	r7, r3
 802557a:	f11c 0201 	adds.w	r2, ip, #1
 802557e:	d472      	bmi.n	8025666 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8025580:	4596      	cmp	lr, r2
 8025582:	dd70      	ble.n	8025666 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8025584:	2800      	cmp	r0, #0
 8025586:	d06e      	beq.n	8025666 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8025588:	f898 4001 	ldrb.w	r4, [r8, #1]
 802558c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025590:	441c      	add	r4, r3
 8025592:	3501      	adds	r5, #1
 8025594:	d46b      	bmi.n	802566e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8025596:	45a9      	cmp	r9, r5
 8025598:	dd69      	ble.n	802566e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 802559a:	2e00      	cmp	r6, #0
 802559c:	d067      	beq.n	802566e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 802559e:	f1bc 0f00 	cmp.w	ip, #0
 80255a2:	db62      	blt.n	802566a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 80255a4:	45e6      	cmp	lr, ip
 80255a6:	dd60      	ble.n	802566a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 80255a8:	f818 500e 	ldrb.w	r5, [r8, lr]
 80255ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80255b0:	441d      	add	r5, r3
 80255b2:	f11c 0201 	adds.w	r2, ip, #1
 80255b6:	d45d      	bmi.n	8025674 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 80255b8:	4596      	cmp	lr, r2
 80255ba:	dd5b      	ble.n	8025674 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 80255bc:	2800      	cmp	r0, #0
 80255be:	d059      	beq.n	8025674 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 80255c0:	44c6      	add	lr, r8
 80255c2:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80255c6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80255ca:	4413      	add	r3, r2
 80255cc:	b280      	uxth	r0, r0
 80255ce:	b2b2      	uxth	r2, r6
 80255d0:	fb00 f602 	mul.w	r6, r0, r2
 80255d4:	0100      	lsls	r0, r0, #4
 80255d6:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 80255da:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 80255de:	1b80      	subs	r0, r0, r6
 80255e0:	fa1f fc82 	uxth.w	ip, r2
 80255e4:	b282      	uxth	r2, r0
 80255e6:	78a0      	ldrb	r0, [r4, #2]
 80255e8:	f897 e002 	ldrb.w	lr, [r7, #2]
 80255ec:	f897 9000 	ldrb.w	r9, [r7]
 80255f0:	787f      	ldrb	r7, [r7, #1]
 80255f2:	eba8 080c 	sub.w	r8, r8, ip
 80255f6:	fa1f f888 	uxth.w	r8, r8
 80255fa:	4350      	muls	r0, r2
 80255fc:	fb08 0e0e 	mla	lr, r8, lr, r0
 8025600:	78a8      	ldrb	r0, [r5, #2]
 8025602:	fb0c e000 	mla	r0, ip, r0, lr
 8025606:	f893 e002 	ldrb.w	lr, [r3, #2]
 802560a:	fb06 0e0e 	mla	lr, r6, lr, r0
 802560e:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 8025612:	f894 e000 	ldrb.w	lr, [r4]
 8025616:	fb02 fe0e 	mul.w	lr, r2, lr
 802561a:	fb08 e909 	mla	r9, r8, r9, lr
 802561e:	f895 e000 	ldrb.w	lr, [r5]
 8025622:	fb0c 990e 	mla	r9, ip, lr, r9
 8025626:	f893 e000 	ldrb.w	lr, [r3]
 802562a:	785b      	ldrb	r3, [r3, #1]
 802562c:	fb06 9e0e 	mla	lr, r6, lr, r9
 8025630:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8025634:	ea4e 0e00 	orr.w	lr, lr, r0
 8025638:	7860      	ldrb	r0, [r4, #1]
 802563a:	4350      	muls	r0, r2
 802563c:	786a      	ldrb	r2, [r5, #1]
 802563e:	fb08 0007 	mla	r0, r8, r7, r0
 8025642:	fb0c 0202 	mla	r2, ip, r2, r0
 8025646:	fb06 2303 	mla	r3, r6, r3, r2
 802564a:	095b      	lsrs	r3, r3, #5
 802564c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025650:	ea4e 0303 	orr.w	r3, lr, r3
 8025654:	800b      	strh	r3, [r1, #0]
 8025656:	b003      	add	sp, #12
 8025658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802565c:	af01      	add	r7, sp, #4
 802565e:	e78c      	b.n	802557a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 8025660:	ac01      	add	r4, sp, #4
 8025662:	4627      	mov	r7, r4
 8025664:	e795      	b.n	8025592 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8025666:	ac01      	add	r4, sp, #4
 8025668:	e793      	b.n	8025592 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 802566a:	ad01      	add	r5, sp, #4
 802566c:	e7a1      	b.n	80255b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 802566e:	ab01      	add	r3, sp, #4
 8025670:	461d      	mov	r5, r3
 8025672:	e7ab      	b.n	80255cc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 8025674:	ab01      	add	r3, sp, #4
 8025676:	e7a9      	b.n	80255cc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

08025678 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802567c:	b08f      	sub	sp, #60	; 0x3c
 802567e:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 8025682:	920c      	str	r2, [sp, #48]	; 0x30
 8025684:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8025686:	910a      	str	r1, [sp, #40]	; 0x28
 8025688:	9306      	str	r3, [sp, #24]
 802568a:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 802568e:	900d      	str	r0, [sp, #52]	; 0x34
 8025690:	6850      	ldr	r0, [r2, #4]
 8025692:	6812      	ldr	r2, [r2, #0]
 8025694:	fb00 1303 	mla	r3, r0, r3, r1
 8025698:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802569c:	9307      	str	r3, [sp, #28]
 802569e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80256a0:	681b      	ldr	r3, [r3, #0]
 80256a2:	9308      	str	r3, [sp, #32]
 80256a4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80256a6:	685c      	ldr	r4, [r3, #4]
 80256a8:	3404      	adds	r4, #4
 80256aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80256ac:	2b00      	cmp	r3, #0
 80256ae:	dc03      	bgt.n	80256b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80256b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80256b2:	2b00      	cmp	r3, #0
 80256b4:	f340 81d6 	ble.w	8025a64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 80256b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80256ba:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80256be:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80256c2:	1e48      	subs	r0, r1, #1
 80256c4:	1e56      	subs	r6, r2, #1
 80256c6:	9b06      	ldr	r3, [sp, #24]
 80256c8:	2b00      	cmp	r3, #0
 80256ca:	f340 80b7 	ble.w	802583c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 80256ce:	ea5f 472b 	movs.w	r7, fp, asr #16
 80256d2:	ea4f 4325 	mov.w	r3, r5, asr #16
 80256d6:	d406      	bmi.n	80256e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80256d8:	4287      	cmp	r7, r0
 80256da:	da04      	bge.n	80256e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80256dc:	2b00      	cmp	r3, #0
 80256de:	db02      	blt.n	80256e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80256e0:	42b3      	cmp	r3, r6
 80256e2:	f2c0 80ac 	blt.w	802583e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80256e6:	3701      	adds	r7, #1
 80256e8:	f100 809d 	bmi.w	8025826 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80256ec:	42b9      	cmp	r1, r7
 80256ee:	f2c0 809a 	blt.w	8025826 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80256f2:	3301      	adds	r3, #1
 80256f4:	f100 8097 	bmi.w	8025826 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80256f8:	429a      	cmp	r2, r3
 80256fa:	f2c0 8094 	blt.w	8025826 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80256fe:	9b06      	ldr	r3, [sp, #24]
 8025700:	930b      	str	r3, [sp, #44]	; 0x2c
 8025702:	9b07      	ldr	r3, [sp, #28]
 8025704:	9309      	str	r3, [sp, #36]	; 0x24
 8025706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025708:	2b00      	cmp	r3, #0
 802570a:	f340 80b5 	ble.w	8025878 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802570e:	9820      	ldr	r0, [sp, #128]	; 0x80
 8025710:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8025712:	68c7      	ldr	r7, [r0, #12]
 8025714:	6892      	ldr	r2, [r2, #8]
 8025716:	ea5f 402b 	movs.w	r0, fp, asr #16
 802571a:	ea4f 4625 	mov.w	r6, r5, asr #16
 802571e:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8025722:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025726:	f100 80fb 	bmi.w	8025920 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 802572a:	f102 3cff 	add.w	ip, r2, #4294967295
 802572e:	4560      	cmp	r0, ip
 8025730:	f280 80f6 	bge.w	8025920 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8025734:	2e00      	cmp	r6, #0
 8025736:	f2c0 80f3 	blt.w	8025920 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 802573a:	f107 3cff 	add.w	ip, r7, #4294967295
 802573e:	4566      	cmp	r6, ip
 8025740:	f280 80ee 	bge.w	8025920 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8025744:	b212      	sxth	r2, r2
 8025746:	fb06 0002 	mla	r0, r6, r2, r0
 802574a:	9e08      	ldr	r6, [sp, #32]
 802574c:	1837      	adds	r7, r6, r0
 802574e:	5c30      	ldrb	r0, [r6, r0]
 8025750:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8025754:	eb04 0c08 	add.w	ip, r4, r8
 8025758:	2b00      	cmp	r3, #0
 802575a:	f000 80d3 	beq.w	8025904 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 802575e:	787e      	ldrb	r6, [r7, #1]
 8025760:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8025764:	4426      	add	r6, r4
 8025766:	2900      	cmp	r1, #0
 8025768:	f000 80d4 	beq.w	8025914 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 802576c:	18b8      	adds	r0, r7, r2
 802576e:	5cba      	ldrb	r2, [r7, r2]
 8025770:	7840      	ldrb	r0, [r0, #1]
 8025772:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025776:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802577a:	4422      	add	r2, r4
 802577c:	4420      	add	r0, r4
 802577e:	b29b      	uxth	r3, r3
 8025780:	b289      	uxth	r1, r1
 8025782:	fb03 f901 	mul.w	r9, r3, r1
 8025786:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802578a:	011b      	lsls	r3, r3, #4
 802578c:	b289      	uxth	r1, r1
 802578e:	78b7      	ldrb	r7, [r6, #2]
 8025790:	f89c a002 	ldrb.w	sl, [ip, #2]
 8025794:	f89c c001 	ldrb.w	ip, [ip, #1]
 8025798:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802579c:	eba3 0309 	sub.w	r3, r3, r9
 80257a0:	b29b      	uxth	r3, r3
 80257a2:	ebae 0e01 	sub.w	lr, lr, r1
 80257a6:	fa1f fe8e 	uxth.w	lr, lr
 80257aa:	435f      	muls	r7, r3
 80257ac:	fb0e 770a 	mla	r7, lr, sl, r7
 80257b0:	f892 a002 	ldrb.w	sl, [r2, #2]
 80257b4:	fb01 770a 	mla	r7, r1, sl, r7
 80257b8:	f890 a002 	ldrb.w	sl, [r0, #2]
 80257bc:	fb09 7a0a 	mla	sl, r9, sl, r7
 80257c0:	f814 7008 	ldrb.w	r7, [r4, r8]
 80257c4:	f896 8000 	ldrb.w	r8, [r6]
 80257c8:	7876      	ldrb	r6, [r6, #1]
 80257ca:	fb03 f808 	mul.w	r8, r3, r8
 80257ce:	fb0e 8807 	mla	r8, lr, r7, r8
 80257d2:	7817      	ldrb	r7, [r2, #0]
 80257d4:	fb01 8807 	mla	r8, r1, r7, r8
 80257d8:	7807      	ldrb	r7, [r0, #0]
 80257da:	fb09 8707 	mla	r7, r9, r7, r8
 80257de:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 80257e2:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80257e6:	ea47 070a 	orr.w	r7, r7, sl
 80257ea:	4373      	muls	r3, r6
 80257ec:	f892 a001 	ldrb.w	sl, [r2, #1]
 80257f0:	fb0e 330c 	mla	r3, lr, ip, r3
 80257f4:	fb01 310a 	mla	r1, r1, sl, r3
 80257f8:	f890 a001 	ldrb.w	sl, [r0, #1]
 80257fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80257fe:	fb09 1a0a 	mla	sl, r9, sl, r1
 8025802:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8025806:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802580a:	ea47 070a 	orr.w	r7, r7, sl
 802580e:	801f      	strh	r7, [r3, #0]
 8025810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025812:	3302      	adds	r3, #2
 8025814:	9309      	str	r3, [sp, #36]	; 0x24
 8025816:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8025818:	449b      	add	fp, r3
 802581a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802581c:	441d      	add	r5, r3
 802581e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025820:	3b01      	subs	r3, #1
 8025822:	930b      	str	r3, [sp, #44]	; 0x2c
 8025824:	e76f      	b.n	8025706 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8025826:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8025828:	449b      	add	fp, r3
 802582a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802582c:	441d      	add	r5, r3
 802582e:	9b06      	ldr	r3, [sp, #24]
 8025830:	3b01      	subs	r3, #1
 8025832:	9306      	str	r3, [sp, #24]
 8025834:	9b07      	ldr	r3, [sp, #28]
 8025836:	3302      	adds	r3, #2
 8025838:	9307      	str	r3, [sp, #28]
 802583a:	e744      	b.n	80256c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 802583c:	d023      	beq.n	8025886 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 802583e:	9b06      	ldr	r3, [sp, #24]
 8025840:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8025842:	3b01      	subs	r3, #1
 8025844:	fb00 b003 	mla	r0, r0, r3, fp
 8025848:	1400      	asrs	r0, r0, #16
 802584a:	f53f af58 	bmi.w	80256fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802584e:	3901      	subs	r1, #1
 8025850:	4288      	cmp	r0, r1
 8025852:	f6bf af54 	bge.w	80256fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8025856:	991c      	ldr	r1, [sp, #112]	; 0x70
 8025858:	fb01 5303 	mla	r3, r1, r3, r5
 802585c:	141b      	asrs	r3, r3, #16
 802585e:	f53f af4e 	bmi.w	80256fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8025862:	3a01      	subs	r2, #1
 8025864:	4293      	cmp	r3, r2
 8025866:	f6bf af4a 	bge.w	80256fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802586a:	9b06      	ldr	r3, [sp, #24]
 802586c:	9309      	str	r3, [sp, #36]	; 0x24
 802586e:	9b07      	ldr	r3, [sp, #28]
 8025870:	930b      	str	r3, [sp, #44]	; 0x2c
 8025872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025874:	2b00      	cmp	r3, #0
 8025876:	dc70      	bgt.n	802595a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 8025878:	9b06      	ldr	r3, [sp, #24]
 802587a:	9a07      	ldr	r2, [sp, #28]
 802587c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025880:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025884:	9307      	str	r3, [sp, #28]
 8025886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025888:	2b00      	cmp	r3, #0
 802588a:	f340 80eb 	ble.w	8025a64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 802588e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025892:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025896:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802589a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802589c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80258a0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80258a4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80258a8:	eef0 6a62 	vmov.f32	s13, s5
 80258ac:	ee61 7a27 	vmul.f32	s15, s2, s15
 80258b0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80258b4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80258b8:	ee16 ba90 	vmov	fp, s13
 80258bc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80258c0:	eef0 6a43 	vmov.f32	s13, s6
 80258c4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80258c8:	ee12 2a90 	vmov	r2, s5
 80258cc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80258d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80258d4:	ee13 2a10 	vmov	r2, s6
 80258d8:	931b      	str	r3, [sp, #108]	; 0x6c
 80258da:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80258dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80258e0:	931c      	str	r3, [sp, #112]	; 0x70
 80258e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80258e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80258e6:	3b01      	subs	r3, #1
 80258e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80258ec:	930a      	str	r3, [sp, #40]	; 0x28
 80258ee:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80258f0:	bf08      	it	eq
 80258f2:	4613      	moveq	r3, r2
 80258f4:	ee16 5a90 	vmov	r5, s13
 80258f8:	9306      	str	r3, [sp, #24]
 80258fa:	eeb0 3a67 	vmov.f32	s6, s15
 80258fe:	eef0 2a47 	vmov.f32	s5, s14
 8025902:	e6d2      	b.n	80256aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8025904:	b149      	cbz	r1, 802591a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8025906:	5cba      	ldrb	r2, [r7, r2]
 8025908:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802590c:	4422      	add	r2, r4
 802590e:	4660      	mov	r0, ip
 8025910:	4666      	mov	r6, ip
 8025912:	e734      	b.n	802577e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8025914:	4660      	mov	r0, ip
 8025916:	4662      	mov	r2, ip
 8025918:	e731      	b.n	802577e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 802591a:	4660      	mov	r0, ip
 802591c:	4662      	mov	r2, ip
 802591e:	e7f7      	b.n	8025910 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 8025920:	f110 0c01 	adds.w	ip, r0, #1
 8025924:	f53f af74 	bmi.w	8025810 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8025928:	4562      	cmp	r2, ip
 802592a:	f6ff af71 	blt.w	8025810 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802592e:	f116 0c01 	adds.w	ip, r6, #1
 8025932:	f53f af6d 	bmi.w	8025810 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8025936:	4567      	cmp	r7, ip
 8025938:	f6ff af6a 	blt.w	8025810 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802593c:	b23f      	sxth	r7, r7
 802593e:	b212      	sxth	r2, r2
 8025940:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8025944:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8025948:	9200      	str	r2, [sp, #0]
 802594a:	9701      	str	r7, [sp, #4]
 802594c:	4623      	mov	r3, r4
 802594e:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8025952:	980d      	ldr	r0, [sp, #52]	; 0x34
 8025954:	f7ff fde6 	bl	8025524 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8025958:	e75a      	b.n	8025810 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802595a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802595c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8025960:	ea4f 462b 	mov.w	r6, fp, asr #16
 8025964:	1428      	asrs	r0, r5, #16
 8025966:	fb02 6000 	mla	r0, r2, r0, r6
 802596a:	9e08      	ldr	r6, [sp, #32]
 802596c:	f816 8000 	ldrb.w	r8, [r6, r0]
 8025970:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8025974:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8025978:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802597c:	1837      	adds	r7, r6, r0
 802597e:	eb04 0c08 	add.w	ip, r4, r8
 8025982:	2b00      	cmp	r3, #0
 8025984:	d060      	beq.n	8025a48 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d0>
 8025986:	787e      	ldrb	r6, [r7, #1]
 8025988:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802598c:	4426      	add	r6, r4
 802598e:	2900      	cmp	r1, #0
 8025990:	d062      	beq.n	8025a58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e0>
 8025992:	18b8      	adds	r0, r7, r2
 8025994:	5cba      	ldrb	r2, [r7, r2]
 8025996:	7840      	ldrb	r0, [r0, #1]
 8025998:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802599c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80259a0:	4422      	add	r2, r4
 80259a2:	4420      	add	r0, r4
 80259a4:	b29b      	uxth	r3, r3
 80259a6:	b289      	uxth	r1, r1
 80259a8:	fb03 f901 	mul.w	r9, r3, r1
 80259ac:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80259b0:	011b      	lsls	r3, r3, #4
 80259b2:	b289      	uxth	r1, r1
 80259b4:	78b7      	ldrb	r7, [r6, #2]
 80259b6:	f89c a002 	ldrb.w	sl, [ip, #2]
 80259ba:	f89c c001 	ldrb.w	ip, [ip, #1]
 80259be:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80259c2:	eba3 0309 	sub.w	r3, r3, r9
 80259c6:	b29b      	uxth	r3, r3
 80259c8:	ebae 0e01 	sub.w	lr, lr, r1
 80259cc:	fa1f fe8e 	uxth.w	lr, lr
 80259d0:	435f      	muls	r7, r3
 80259d2:	fb0e 770a 	mla	r7, lr, sl, r7
 80259d6:	f892 a002 	ldrb.w	sl, [r2, #2]
 80259da:	fb01 770a 	mla	r7, r1, sl, r7
 80259de:	f890 a002 	ldrb.w	sl, [r0, #2]
 80259e2:	fb09 7a0a 	mla	sl, r9, sl, r7
 80259e6:	f814 7008 	ldrb.w	r7, [r4, r8]
 80259ea:	f896 8000 	ldrb.w	r8, [r6]
 80259ee:	7876      	ldrb	r6, [r6, #1]
 80259f0:	fb03 f808 	mul.w	r8, r3, r8
 80259f4:	fb0e 8807 	mla	r8, lr, r7, r8
 80259f8:	7817      	ldrb	r7, [r2, #0]
 80259fa:	fb01 8807 	mla	r8, r1, r7, r8
 80259fe:	7807      	ldrb	r7, [r0, #0]
 8025a00:	fb09 8707 	mla	r7, r9, r7, r8
 8025a04:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8025a08:	4373      	muls	r3, r6
 8025a0a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8025a0e:	7856      	ldrb	r6, [r2, #1]
 8025a10:	ea47 070a 	orr.w	r7, r7, sl
 8025a14:	fb0e 330c 	mla	r3, lr, ip, r3
 8025a18:	f890 a001 	ldrb.w	sl, [r0, #1]
 8025a1c:	fb01 3306 	mla	r3, r1, r6, r3
 8025a20:	fb09 3a0a 	mla	sl, r9, sl, r3
 8025a24:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8025a28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025a2a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8025a2e:	ea47 070a 	orr.w	r7, r7, sl
 8025a32:	f823 7b02 	strh.w	r7, [r3], #2
 8025a36:	930b      	str	r3, [sp, #44]	; 0x2c
 8025a38:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8025a3a:	449b      	add	fp, r3
 8025a3c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025a3e:	441d      	add	r5, r3
 8025a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025a42:	3b01      	subs	r3, #1
 8025a44:	9309      	str	r3, [sp, #36]	; 0x24
 8025a46:	e714      	b.n	8025872 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8025a48:	b149      	cbz	r1, 8025a5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8025a4a:	5cba      	ldrb	r2, [r7, r2]
 8025a4c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025a50:	4422      	add	r2, r4
 8025a52:	4660      	mov	r0, ip
 8025a54:	4666      	mov	r6, ip
 8025a56:	e7a5      	b.n	80259a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8025a58:	4660      	mov	r0, ip
 8025a5a:	4662      	mov	r2, ip
 8025a5c:	e7a2      	b.n	80259a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8025a5e:	4660      	mov	r0, ip
 8025a60:	4662      	mov	r2, ip
 8025a62:	e7f7      	b.n	8025a54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3dc>
 8025a64:	b00f      	add	sp, #60	; 0x3c
 8025a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025a6a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8025a6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025a6e:	b085      	sub	sp, #20
 8025a70:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 8025a74:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8025a78:	9102      	str	r1, [sp, #8]
 8025a7a:	2c00      	cmp	r4, #0
 8025a7c:	fb04 710c 	mla	r1, r4, ip, r7
 8025a80:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8025a84:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 8025a88:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8025a8c:	eb02 0e01 	add.w	lr, r2, r1
 8025a90:	f2c0 8122 	blt.w	8025cd8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8025a94:	45a0      	cmp	r8, r4
 8025a96:	f340 811f 	ble.w	8025cd8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8025a9a:	2f00      	cmp	r7, #0
 8025a9c:	f2c0 811a 	blt.w	8025cd4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8025aa0:	45bc      	cmp	ip, r7
 8025aa2:	f340 8117 	ble.w	8025cd4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8025aa6:	5c52      	ldrb	r2, [r2, r1]
 8025aa8:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8025aac:	1c7a      	adds	r2, r7, #1
 8025aae:	f100 8116 	bmi.w	8025cde <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8025ab2:	4594      	cmp	ip, r2
 8025ab4:	f340 8113 	ble.w	8025cde <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8025ab8:	2e00      	cmp	r6, #0
 8025aba:	f000 8112 	beq.w	8025ce2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 8025abe:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8025ac2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8025ac6:	3401      	adds	r4, #1
 8025ac8:	f100 810f 	bmi.w	8025cea <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8025acc:	45a0      	cmp	r8, r4
 8025ace:	f340 810c 	ble.w	8025cea <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8025ad2:	2800      	cmp	r0, #0
 8025ad4:	f000 810c 	beq.w	8025cf0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 8025ad8:	2f00      	cmp	r7, #0
 8025ada:	f2c0 8104 	blt.w	8025ce6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8025ade:	45bc      	cmp	ip, r7
 8025ae0:	f340 8101 	ble.w	8025ce6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8025ae4:	f81e 200c 	ldrb.w	r2, [lr, ip]
 8025ae8:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8025aec:	3701      	adds	r7, #1
 8025aee:	f100 8102 	bmi.w	8025cf6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8025af2:	45bc      	cmp	ip, r7
 8025af4:	f340 80ff 	ble.w	8025cf6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8025af8:	2e00      	cmp	r6, #0
 8025afa:	f000 80fe 	beq.w	8025cfa <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 8025afe:	44f4      	add	ip, lr
 8025b00:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8025b04:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8025b08:	b2b6      	uxth	r6, r6
 8025b0a:	b280      	uxth	r0, r0
 8025b0c:	fb00 fe06 	mul.w	lr, r0, r6
 8025b10:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8025b14:	0136      	lsls	r6, r6, #4
 8025b16:	eba6 070e 	sub.w	r7, r6, lr
 8025b1a:	b280      	uxth	r0, r0
 8025b1c:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8025b20:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8025b24:	b2bf      	uxth	r7, r7
 8025b26:	1a1b      	subs	r3, r3, r0
 8025b28:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8025b2c:	b29b      	uxth	r3, r3
 8025b2e:	fb0a f607 	mul.w	r6, sl, r7
 8025b32:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8025b36:	fb0b 6603 	mla	r6, fp, r3, r6
 8025b3a:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8025b3e:	fb00 6609 	mla	r6, r0, r9, r6
 8025b42:	fb0e 6608 	mla	r6, lr, r8, r6
 8025b46:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8025b4a:	9600      	str	r6, [sp, #0]
 8025b4c:	2e00      	cmp	r6, #0
 8025b4e:	f000 80be 	beq.w	8025cce <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 8025b52:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8025b56:	fb0b fc0c 	mul.w	ip, fp, ip
 8025b5a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8025b5e:	fb0b f505 	mul.w	r5, fp, r5
 8025b62:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8025b66:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8025b6a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025b6e:	44dc      	add	ip, fp
 8025b70:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025b74:	9501      	str	r5, [sp, #4]
 8025b76:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8025b7a:	9503      	str	r5, [sp, #12]
 8025b7c:	9d01      	ldr	r5, [sp, #4]
 8025b7e:	9e02      	ldr	r6, [sp, #8]
 8025b80:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8025b84:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8025b88:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8025b8c:	fb0a fc0c 	mul.w	ip, sl, ip
 8025b90:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8025b94:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8025b98:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8025b9c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025ba0:	4465      	add	r5, ip
 8025ba2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025ba6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8025baa:	fb09 fc0c 	mul.w	ip, r9, ip
 8025bae:	fb09 f904 	mul.w	r9, r9, r4
 8025bb2:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8025bb6:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8025bba:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8025bbe:	fb08 f404 	mul.w	r4, r8, r4
 8025bc2:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8025bc6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025bca:	fb08 f802 	mul.w	r8, r8, r2
 8025bce:	fb0a fa01 	mul.w	sl, sl, r1
 8025bd2:	0a22      	lsrs	r2, r4, #8
 8025bd4:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8025bd8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025bdc:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8025be0:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8025be4:	4414      	add	r4, r2
 8025be6:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8025bea:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8025bee:	0a2d      	lsrs	r5, r5, #8
 8025bf0:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8025bf4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8025bf8:	9a03      	ldr	r2, [sp, #12]
 8025bfa:	8836      	ldrh	r6, [r6, #0]
 8025bfc:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8025c00:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025c04:	437d      	muls	r5, r7
 8025c06:	4461      	add	r1, ip
 8025c08:	0a24      	lsrs	r4, r4, #8
 8025c0a:	fb02 5503 	mla	r5, r2, r3, r5
 8025c0e:	0a09      	lsrs	r1, r1, #8
 8025c10:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8025c14:	fb04 540e 	mla	r4, r4, lr, r5
 8025c18:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8025c1c:	fb01 4100 	mla	r1, r1, r0, r4
 8025c20:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025c24:	0a09      	lsrs	r1, r1, #8
 8025c26:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025c2a:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8025c2e:	fb07 f70a 	mul.w	r7, r7, sl
 8025c32:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8025c36:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8025c3a:	fb03 7101 	mla	r1, r3, r1, r7
 8025c3e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025c42:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8025c46:	fb0e 1e08 	mla	lr, lr, r8, r1
 8025c4a:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8025c4e:	fb00 e101 	mla	r1, r0, r1, lr
 8025c52:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8025c56:	9a00      	ldr	r2, [sp, #0]
 8025c58:	b287      	uxth	r7, r0
 8025c5a:	437a      	muls	r2, r7
 8025c5c:	0a09      	lsrs	r1, r1, #8
 8025c5e:	1c53      	adds	r3, r2, #1
 8025c60:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8025c64:	4321      	orrs	r1, r4
 8025c66:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025c6a:	1235      	asrs	r5, r6, #8
 8025c6c:	0c0a      	lsrs	r2, r1, #16
 8025c6e:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8025c72:	b2db      	uxtb	r3, r3
 8025c74:	fb12 f207 	smulbb	r2, r2, r7
 8025c78:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8025c7c:	fb05 2503 	mla	r5, r5, r3, r2
 8025c80:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8025c84:	10f2      	asrs	r2, r6, #3
 8025c86:	b2c8      	uxtb	r0, r1
 8025c88:	00f6      	lsls	r6, r6, #3
 8025c8a:	fb14 f407 	smulbb	r4, r4, r7
 8025c8e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8025c92:	b2f6      	uxtb	r6, r6
 8025c94:	fb10 f007 	smulbb	r0, r0, r7
 8025c98:	fb02 4203 	mla	r2, r2, r3, r4
 8025c9c:	b2ad      	uxth	r5, r5
 8025c9e:	fb06 0303 	mla	r3, r6, r3, r0
 8025ca2:	b299      	uxth	r1, r3
 8025ca4:	b294      	uxth	r4, r2
 8025ca6:	1c6b      	adds	r3, r5, #1
 8025ca8:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8025cac:	1c62      	adds	r2, r4, #1
 8025cae:	1c4b      	adds	r3, r1, #1
 8025cb0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8025cb4:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8025cb8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8025cbc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025cc0:	0952      	lsrs	r2, r2, #5
 8025cc2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025cc6:	432b      	orrs	r3, r5
 8025cc8:	4313      	orrs	r3, r2
 8025cca:	9a02      	ldr	r2, [sp, #8]
 8025ccc:	8013      	strh	r3, [r2, #0]
 8025cce:	b005      	add	sp, #20
 8025cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025cd4:	2500      	movs	r5, #0
 8025cd6:	e6e9      	b.n	8025aac <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 8025cd8:	2100      	movs	r1, #0
 8025cda:	460d      	mov	r5, r1
 8025cdc:	e6f3      	b.n	8025ac6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8025cde:	2100      	movs	r1, #0
 8025ce0:	e6f1      	b.n	8025ac6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8025ce2:	4631      	mov	r1, r6
 8025ce4:	e6ef      	b.n	8025ac6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8025ce6:	2400      	movs	r4, #0
 8025ce8:	e700      	b.n	8025aec <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 8025cea:	2200      	movs	r2, #0
 8025cec:	4614      	mov	r4, r2
 8025cee:	e70b      	b.n	8025b08 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8025cf0:	4602      	mov	r2, r0
 8025cf2:	4604      	mov	r4, r0
 8025cf4:	e708      	b.n	8025b08 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8025cf6:	2200      	movs	r2, #0
 8025cf8:	e706      	b.n	8025b08 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8025cfa:	4632      	mov	r2, r6
 8025cfc:	e704      	b.n	8025b08 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

08025cfe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025cfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025d02:	b09f      	sub	sp, #124	; 0x7c
 8025d04:	921b      	str	r2, [sp, #108]	; 0x6c
 8025d06:	9309      	str	r3, [sp, #36]	; 0x24
 8025d08:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8025d0a:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8025d0e:	931c      	str	r3, [sp, #112]	; 0x70
 8025d10:	9119      	str	r1, [sp, #100]	; 0x64
 8025d12:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8025d16:	901d      	str	r0, [sp, #116]	; 0x74
 8025d18:	6850      	ldr	r0, [r2, #4]
 8025d1a:	6812      	ldr	r2, [r2, #0]
 8025d1c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8025d1e:	fb00 1303 	mla	r3, r0, r3, r1
 8025d22:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025d26:	930c      	str	r3, [sp, #48]	; 0x30
 8025d28:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025d2a:	681b      	ldr	r3, [r3, #0]
 8025d2c:	9312      	str	r3, [sp, #72]	; 0x48
 8025d2e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025d30:	685e      	ldr	r6, [r3, #4]
 8025d32:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8025d36:	930d      	str	r3, [sp, #52]	; 0x34
 8025d38:	3604      	adds	r6, #4
 8025d3a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8025d3c:	2b00      	cmp	r3, #0
 8025d3e:	dc03      	bgt.n	8025d48 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8025d40:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8025d42:	2b00      	cmp	r3, #0
 8025d44:	f340 8388 	ble.w	8026458 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75a>
 8025d48:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025d4a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025d4e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025d52:	1e48      	subs	r0, r1, #1
 8025d54:	1e57      	subs	r7, r2, #1
 8025d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025d58:	2b00      	cmp	r3, #0
 8025d5a:	f340 8195 	ble.w	8026088 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8025d5e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8025d60:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8025d64:	ea4f 4325 	mov.w	r3, r5, asr #16
 8025d68:	d406      	bmi.n	8025d78 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8025d6a:	4584      	cmp	ip, r0
 8025d6c:	da04      	bge.n	8025d78 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8025d6e:	2b00      	cmp	r3, #0
 8025d70:	db02      	blt.n	8025d78 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8025d72:	42bb      	cmp	r3, r7
 8025d74:	f2c0 8189 	blt.w	802608a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8025d78:	f11c 0c01 	adds.w	ip, ip, #1
 8025d7c:	f100 8177 	bmi.w	802606e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025d80:	4561      	cmp	r1, ip
 8025d82:	f2c0 8174 	blt.w	802606e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025d86:	3301      	adds	r3, #1
 8025d88:	f100 8171 	bmi.w	802606e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025d8c:	429a      	cmp	r2, r3
 8025d8e:	f2c0 816e 	blt.w	802606e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025d94:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8025d96:	931a      	str	r3, [sp, #104]	; 0x68
 8025d98:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8025d9a:	2b00      	cmp	r3, #0
 8025d9c:	f340 8193 	ble.w	80260c6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 8025da0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025da2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025da6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025da8:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8025dac:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025dae:	141b      	asrs	r3, r3, #16
 8025db0:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8025db4:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025db8:	f100 81d6 	bmi.w	8026168 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8025dbc:	f100 38ff 	add.w	r8, r0, #4294967295
 8025dc0:	4543      	cmp	r3, r8
 8025dc2:	f280 81d1 	bge.w	8026168 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8025dc6:	f1bc 0f00 	cmp.w	ip, #0
 8025dca:	f2c0 81cd 	blt.w	8026168 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8025dce:	f10e 38ff 	add.w	r8, lr, #4294967295
 8025dd2:	45c4      	cmp	ip, r8
 8025dd4:	f280 81c8 	bge.w	8026168 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8025dd8:	b200      	sxth	r0, r0
 8025dda:	fb0c 3300 	mla	r3, ip, r0, r3
 8025dde:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025de0:	eb04 0803 	add.w	r8, r4, r3
 8025de4:	5ce3      	ldrb	r3, [r4, r3]
 8025de6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025dea:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8025dee:	2a00      	cmp	r2, #0
 8025df0:	f000 81af 	beq.w	8026152 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 8025df4:	f898 c001 	ldrb.w	ip, [r8, #1]
 8025df8:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8025dfc:	940e      	str	r4, [sp, #56]	; 0x38
 8025dfe:	0e24      	lsrs	r4, r4, #24
 8025e00:	9415      	str	r4, [sp, #84]	; 0x54
 8025e02:	b179      	cbz	r1, 8025e24 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8025e04:	eb08 0c00 	add.w	ip, r8, r0
 8025e08:	f818 0000 	ldrb.w	r0, [r8, r0]
 8025e0c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8025e10:	900a      	str	r0, [sp, #40]	; 0x28
 8025e12:	0e00      	lsrs	r0, r0, #24
 8025e14:	9013      	str	r0, [sp, #76]	; 0x4c
 8025e16:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8025e1a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8025e1e:	900f      	str	r0, [sp, #60]	; 0x3c
 8025e20:	0e00      	lsrs	r0, r0, #24
 8025e22:	9016      	str	r0, [sp, #88]	; 0x58
 8025e24:	b292      	uxth	r2, r2
 8025e26:	b289      	uxth	r1, r1
 8025e28:	fb02 f901 	mul.w	r9, r2, r1
 8025e2c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025e30:	0112      	lsls	r2, r2, #4
 8025e32:	eba2 0809 	sub.w	r8, r2, r9
 8025e36:	b289      	uxth	r1, r1
 8025e38:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8025e3c:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025e3e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025e40:	fa1f f888 	uxth.w	r8, r8
 8025e44:	1a52      	subs	r2, r2, r1
 8025e46:	b292      	uxth	r2, r2
 8025e48:	fb08 f000 	mul.w	r0, r8, r0
 8025e4c:	fb02 000e 	mla	r0, r2, lr, r0
 8025e50:	fb01 0004 	mla	r0, r1, r4, r0
 8025e54:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025e56:	fb09 0004 	mla	r0, r9, r4, r0
 8025e5a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8025e5e:	2800      	cmp	r0, #0
 8025e60:	f000 80fa 	beq.w	8026058 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8025e64:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8025e68:	d01b      	beq.n	8025ea2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8025e6a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8025e6e:	fb0e fa0a 	mul.w	sl, lr, sl
 8025e72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025e76:	fb0e fe03 	mul.w	lr, lr, r3
 8025e7a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025e7e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025e82:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025e86:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8025e8a:	4453      	add	r3, sl
 8025e8c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8025e90:	0a1b      	lsrs	r3, r3, #8
 8025e92:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025e96:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025e9a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025e9e:	ea43 030c 	orr.w	r3, r3, ip
 8025ea2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025ea4:	2cff      	cmp	r4, #255	; 0xff
 8025ea6:	d021      	beq.n	8025eec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8025ea8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025eaa:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025eae:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025eb0:	fb04 fb0b 	mul.w	fp, r4, fp
 8025eb4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025eb6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025eba:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025ebc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025ec0:	fb04 fa0a 	mul.w	sl, r4, sl
 8025ec4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025ec8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025ecc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025ed0:	44de      	add	lr, fp
 8025ed2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025ed6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025eda:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025ede:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025ee2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025ee6:	ea4e 040a 	orr.w	r4, lr, sl
 8025eea:	940e      	str	r4, [sp, #56]	; 0x38
 8025eec:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025eee:	2cff      	cmp	r4, #255	; 0xff
 8025ef0:	d021      	beq.n	8025f36 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8025ef2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025ef4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025ef8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025efa:	fb04 fb0b 	mul.w	fp, r4, fp
 8025efe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025f00:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025f04:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025f06:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025f0a:	fb04 fa0a 	mul.w	sl, r4, sl
 8025f0e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025f12:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025f16:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025f1a:	44de      	add	lr, fp
 8025f1c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025f20:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025f24:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025f28:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025f2c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025f30:	ea4e 040a 	orr.w	r4, lr, sl
 8025f34:	940a      	str	r4, [sp, #40]	; 0x28
 8025f36:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025f38:	2cff      	cmp	r4, #255	; 0xff
 8025f3a:	d021      	beq.n	8025f80 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8025f3c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025f3e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025f42:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025f44:	fb04 fb0b 	mul.w	fp, r4, fp
 8025f48:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025f4a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025f4e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025f50:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025f54:	fb04 fa0a 	mul.w	sl, r4, sl
 8025f58:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025f5c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025f60:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025f64:	44de      	add	lr, fp
 8025f66:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025f6a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025f6e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025f72:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025f76:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025f7a:	ea4e 040a 	orr.w	r4, lr, sl
 8025f7e:	940f      	str	r4, [sp, #60]	; 0x3c
 8025f80:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025f82:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025f86:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025f88:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8025f8c:	fb08 fc0c 	mul.w	ip, r8, ip
 8025f90:	fb02 cc0e 	mla	ip, r2, lr, ip
 8025f94:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8025f98:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025f9a:	fb01 cc0e 	mla	ip, r1, lr, ip
 8025f9e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8025fa2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025fa4:	fb09 cc0e 	mla	ip, r9, lr, ip
 8025fa8:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8025fac:	fb08 f80e 	mul.w	r8, r8, lr
 8025fb0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025fb4:	fb02 8303 	mla	r3, r2, r3, r8
 8025fb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025fba:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025fbc:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8025fc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025fc2:	fb01 330a 	mla	r3, r1, sl, r3
 8025fc6:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8025fca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8025fcc:	fb09 3901 	mla	r9, r9, r1, r3
 8025fd0:	4342      	muls	r2, r0
 8025fd2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025fd6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025fda:	883b      	ldrh	r3, [r7, #0]
 8025fdc:	1c50      	adds	r0, r2, #1
 8025fde:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025fe2:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025fe6:	ea4c 0c09 	orr.w	ip, ip, r9
 8025fea:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8025fee:	1219      	asrs	r1, r3, #8
 8025ff0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8025ff4:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8025ff8:	b2c0      	uxtb	r0, r0
 8025ffa:	fb12 f204 	smulbb	r2, r2, r4
 8025ffe:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8026002:	fb01 2100 	mla	r1, r1, r0, r2
 8026006:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 802600a:	10da      	asrs	r2, r3, #3
 802600c:	fa5f fc8c 	uxtb.w	ip, ip
 8026010:	00db      	lsls	r3, r3, #3
 8026012:	fb1c fc04 	smulbb	ip, ip, r4
 8026016:	b2db      	uxtb	r3, r3
 8026018:	b289      	uxth	r1, r1
 802601a:	fb03 c300 	mla	r3, r3, r0, ip
 802601e:	fa1f fc83 	uxth.w	ip, r3
 8026022:	1c4b      	adds	r3, r1, #1
 8026024:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8026028:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802602c:	fb1e fe04 	smulbb	lr, lr, r4
 8026030:	f10c 0301 	add.w	r3, ip, #1
 8026034:	fb02 e200 	mla	r2, r2, r0, lr
 8026038:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 802603c:	b292      	uxth	r2, r2
 802603e:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8026042:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026046:	430b      	orrs	r3, r1
 8026048:	1c51      	adds	r1, r2, #1
 802604a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802604e:	0952      	lsrs	r2, r2, #5
 8026050:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026054:	4313      	orrs	r3, r2
 8026056:	803b      	strh	r3, [r7, #0]
 8026058:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802605a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802605c:	441a      	add	r2, r3
 802605e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026060:	9229      	str	r2, [sp, #164]	; 0xa4
 8026062:	441d      	add	r5, r3
 8026064:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8026066:	3b01      	subs	r3, #1
 8026068:	3702      	adds	r7, #2
 802606a:	931a      	str	r3, [sp, #104]	; 0x68
 802606c:	e694      	b.n	8025d98 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802606e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8026070:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8026072:	441c      	add	r4, r3
 8026074:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026076:	9429      	str	r4, [sp, #164]	; 0xa4
 8026078:	441d      	add	r5, r3
 802607a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802607c:	3b01      	subs	r3, #1
 802607e:	9309      	str	r3, [sp, #36]	; 0x24
 8026080:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026082:	3302      	adds	r3, #2
 8026084:	930c      	str	r3, [sp, #48]	; 0x30
 8026086:	e666      	b.n	8025d56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8026088:	d024      	beq.n	80260d4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d6>
 802608a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802608c:	982b      	ldr	r0, [sp, #172]	; 0xac
 802608e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8026090:	3b01      	subs	r3, #1
 8026092:	fb00 4003 	mla	r0, r0, r3, r4
 8026096:	1400      	asrs	r0, r0, #16
 8026098:	f53f ae7b 	bmi.w	8025d92 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802609c:	3901      	subs	r1, #1
 802609e:	4288      	cmp	r0, r1
 80260a0:	f6bf ae77 	bge.w	8025d92 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80260a4:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80260a6:	fb01 5303 	mla	r3, r1, r3, r5
 80260aa:	141b      	asrs	r3, r3, #16
 80260ac:	f53f ae71 	bmi.w	8025d92 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80260b0:	3a01      	subs	r2, #1
 80260b2:	4293      	cmp	r3, r2
 80260b4:	f6bf ae6d 	bge.w	8025d92 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80260b8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80260bc:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80260c0:	f1bb 0f00 	cmp.w	fp, #0
 80260c4:	dc70      	bgt.n	80261a8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4aa>
 80260c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80260c8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80260cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80260ce:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80260d2:	930c      	str	r3, [sp, #48]	; 0x30
 80260d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80260d6:	2b00      	cmp	r3, #0
 80260d8:	f340 81be 	ble.w	8026458 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75a>
 80260dc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80260e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80260e4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80260e8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80260ea:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80260ee:	ee31 1a05 	vadd.f32	s2, s2, s10
 80260f2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80260f6:	eef0 6a62 	vmov.f32	s13, s5
 80260fa:	ee61 7a27 	vmul.f32	s15, s2, s15
 80260fe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026102:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026106:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 802610a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802610e:	eef0 6a43 	vmov.f32	s13, s6
 8026112:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026116:	ee12 2a90 	vmov	r2, s5
 802611a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802611e:	fb92 f3f3 	sdiv	r3, r2, r3
 8026122:	ee13 2a10 	vmov	r2, s6
 8026126:	932b      	str	r3, [sp, #172]	; 0xac
 8026128:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802612a:	fb92 f3f3 	sdiv	r3, r2, r3
 802612e:	932c      	str	r3, [sp, #176]	; 0xb0
 8026130:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8026132:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8026134:	3b01      	subs	r3, #1
 8026136:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802613a:	9319      	str	r3, [sp, #100]	; 0x64
 802613c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802613e:	bf08      	it	eq
 8026140:	4613      	moveq	r3, r2
 8026142:	ee16 5a90 	vmov	r5, s13
 8026146:	9309      	str	r3, [sp, #36]	; 0x24
 8026148:	eeb0 3a67 	vmov.f32	s6, s15
 802614c:	eef0 2a47 	vmov.f32	s5, s14
 8026150:	e5f3      	b.n	8025d3a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8026152:	2900      	cmp	r1, #0
 8026154:	f43f ae66 	beq.w	8025e24 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8026158:	f818 0000 	ldrb.w	r0, [r8, r0]
 802615c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8026160:	900a      	str	r0, [sp, #40]	; 0x28
 8026162:	0e00      	lsrs	r0, r0, #24
 8026164:	9013      	str	r0, [sp, #76]	; 0x4c
 8026166:	e65d      	b.n	8025e24 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8026168:	f113 0801 	adds.w	r8, r3, #1
 802616c:	f53f af74 	bmi.w	8026058 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8026170:	4540      	cmp	r0, r8
 8026172:	f6ff af71 	blt.w	8026058 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8026176:	f11c 0801 	adds.w	r8, ip, #1
 802617a:	f53f af6d 	bmi.w	8026058 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 802617e:	45c6      	cmp	lr, r8
 8026180:	f6ff af6a 	blt.w	8026058 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8026184:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8026186:	9302      	str	r3, [sp, #8]
 8026188:	b200      	sxth	r0, r0
 802618a:	fa0f f38e 	sxth.w	r3, lr
 802618e:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8026192:	e9cd c203 	strd	ip, r2, [sp, #12]
 8026196:	9301      	str	r3, [sp, #4]
 8026198:	9000      	str	r0, [sp, #0]
 802619a:	4633      	mov	r3, r6
 802619c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802619e:	981d      	ldr	r0, [sp, #116]	; 0x74
 80261a0:	4639      	mov	r1, r7
 80261a2:	f7ff fc62 	bl	8025a6a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 80261a6:	e757      	b.n	8026058 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80261a8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80261aa:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80261ac:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80261b0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80261b2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80261b6:	1427      	asrs	r7, r4, #16
 80261b8:	142b      	asrs	r3, r5, #16
 80261ba:	fb01 7303 	mla	r3, r1, r3, r7
 80261be:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80261c0:	18e7      	adds	r7, r4, r3
 80261c2:	5ce3      	ldrb	r3, [r4, r3]
 80261c4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80261c8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80261cc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80261d0:	2a00      	cmp	r2, #0
 80261d2:	f000 8137 	beq.w	8026444 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 80261d6:	f897 e001 	ldrb.w	lr, [r7, #1]
 80261da:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80261de:	9410      	str	r4, [sp, #64]	; 0x40
 80261e0:	0e24      	lsrs	r4, r4, #24
 80261e2:	9417      	str	r4, [sp, #92]	; 0x5c
 80261e4:	b170      	cbz	r0, 8026204 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 80261e6:	eb07 0e01 	add.w	lr, r7, r1
 80261ea:	5c79      	ldrb	r1, [r7, r1]
 80261ec:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80261f0:	910b      	str	r1, [sp, #44]	; 0x2c
 80261f2:	0e09      	lsrs	r1, r1, #24
 80261f4:	9114      	str	r1, [sp, #80]	; 0x50
 80261f6:	f89e 1001 	ldrb.w	r1, [lr, #1]
 80261fa:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80261fe:	9111      	str	r1, [sp, #68]	; 0x44
 8026200:	0e09      	lsrs	r1, r1, #24
 8026202:	9118      	str	r1, [sp, #96]	; 0x60
 8026204:	b292      	uxth	r2, r2
 8026206:	b280      	uxth	r0, r0
 8026208:	fb02 f800 	mul.w	r8, r2, r0
 802620c:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8026210:	0112      	lsls	r2, r2, #4
 8026212:	eba2 0e08 	sub.w	lr, r2, r8
 8026216:	b280      	uxth	r0, r0
 8026218:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802621c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 802621e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026220:	fa1f fe8e 	uxth.w	lr, lr
 8026224:	1a12      	subs	r2, r2, r0
 8026226:	b292      	uxth	r2, r2
 8026228:	fb0e f101 	mul.w	r1, lr, r1
 802622c:	fb02 110c 	mla	r1, r2, ip, r1
 8026230:	fb00 1104 	mla	r1, r0, r4, r1
 8026234:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8026236:	fb08 1104 	mla	r1, r8, r4, r1
 802623a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802623e:	2900      	cmp	r1, #0
 8026240:	f000 80f5 	beq.w	802642e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8026244:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8026248:	d019      	beq.n	802627e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x580>
 802624a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802624e:	fb0c fa0a 	mul.w	sl, ip, sl
 8026252:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026256:	fb0c fc03 	mul.w	ip, ip, r3
 802625a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802625e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026262:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026266:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802626a:	4453      	add	r3, sl
 802626c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8026270:	0a1b      	lsrs	r3, r3, #8
 8026272:	0a3f      	lsrs	r7, r7, #8
 8026274:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026278:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802627c:	433b      	orrs	r3, r7
 802627e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8026280:	2cff      	cmp	r4, #255	; 0xff
 8026282:	d020      	beq.n	80262c6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c8>
 8026284:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026286:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802628a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 802628c:	4367      	muls	r7, r4
 802628e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026290:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026294:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8026296:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802629a:	fb04 fa0a 	mul.w	sl, r4, sl
 802629e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80262a2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80262a6:	44bc      	add	ip, r7
 80262a8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80262ac:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80262b0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80262b4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80262b8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80262bc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80262c0:	ea4c 040a 	orr.w	r4, ip, sl
 80262c4:	9410      	str	r4, [sp, #64]	; 0x40
 80262c6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80262c8:	2cff      	cmp	r4, #255	; 0xff
 80262ca:	d020      	beq.n	802630e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 80262cc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80262ce:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80262d2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80262d4:	4367      	muls	r7, r4
 80262d6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80262d8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80262dc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80262de:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80262e2:	fb04 fa0a 	mul.w	sl, r4, sl
 80262e6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80262ea:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80262ee:	44bc      	add	ip, r7
 80262f0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80262f4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80262f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80262fc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026300:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026304:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026308:	ea4c 040a 	orr.w	r4, ip, sl
 802630c:	940b      	str	r4, [sp, #44]	; 0x2c
 802630e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8026310:	2cff      	cmp	r4, #255	; 0xff
 8026312:	d020      	beq.n	8026356 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x658>
 8026314:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026316:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802631a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 802631c:	4367      	muls	r7, r4
 802631e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026320:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026324:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8026326:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802632a:	fb04 fa0a 	mul.w	sl, r4, sl
 802632e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026332:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026336:	44bc      	add	ip, r7
 8026338:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802633c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026340:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026344:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026348:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802634c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026350:	ea4c 040a 	orr.w	r4, ip, sl
 8026354:	9411      	str	r4, [sp, #68]	; 0x44
 8026356:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026358:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802635c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802635e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8026362:	fb0e f707 	mul.w	r7, lr, r7
 8026366:	fb02 770c 	mla	r7, r2, ip, r7
 802636a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802636e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026370:	fb00 770c 	mla	r7, r0, ip, r7
 8026374:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026378:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802637a:	fb08 770c 	mla	r7, r8, ip, r7
 802637e:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8026382:	fb0e fe0c 	mul.w	lr, lr, ip
 8026386:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802638a:	fb02 e303 	mla	r3, r2, r3, lr
 802638e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8026390:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026392:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8026396:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8026398:	fb00 330a 	mla	r3, r0, sl, r3
 802639c:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80263a0:	fb08 3c0c 	mla	ip, r8, ip, r3
 80263a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80263a6:	f8b9 0000 	ldrh.w	r0, [r9]
 80263aa:	434b      	muls	r3, r1
 80263ac:	0a3f      	lsrs	r7, r7, #8
 80263ae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80263b2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80263b6:	1c59      	adds	r1, r3, #1
 80263b8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80263bc:	ea47 070c 	orr.w	r7, r7, ip
 80263c0:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80263c4:	1202      	asrs	r2, r0, #8
 80263c6:	0c3b      	lsrs	r3, r7, #16
 80263c8:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80263cc:	b2c9      	uxtb	r1, r1
 80263ce:	fb13 f304 	smulbb	r3, r3, r4
 80263d2:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80263d6:	fb02 3201 	mla	r2, r2, r1, r3
 80263da:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80263de:	10c3      	asrs	r3, r0, #3
 80263e0:	b2ff      	uxtb	r7, r7
 80263e2:	00c0      	lsls	r0, r0, #3
 80263e4:	b292      	uxth	r2, r2
 80263e6:	fb1c fc04 	smulbb	ip, ip, r4
 80263ea:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80263ee:	b2c0      	uxtb	r0, r0
 80263f0:	fb17 f704 	smulbb	r7, r7, r4
 80263f4:	fb03 c301 	mla	r3, r3, r1, ip
 80263f8:	fb00 7001 	mla	r0, r0, r1, r7
 80263fc:	f102 0c01 	add.w	ip, r2, #1
 8026400:	b280      	uxth	r0, r0
 8026402:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8026406:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 802640a:	1c42      	adds	r2, r0, #1
 802640c:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8026410:	b29b      	uxth	r3, r3
 8026412:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8026416:	ea42 020c 	orr.w	r2, r2, ip
 802641a:	f103 0c01 	add.w	ip, r3, #1
 802641e:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8026422:	095b      	lsrs	r3, r3, #5
 8026424:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026428:	431a      	orrs	r2, r3
 802642a:	f8a9 2000 	strh.w	r2, [r9]
 802642e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8026430:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8026432:	441a      	add	r2, r3
 8026434:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026436:	9229      	str	r2, [sp, #164]	; 0xa4
 8026438:	f109 0902 	add.w	r9, r9, #2
 802643c:	441d      	add	r5, r3
 802643e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026442:	e63d      	b.n	80260c0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8026444:	2800      	cmp	r0, #0
 8026446:	f43f aedd 	beq.w	8026204 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 802644a:	5c79      	ldrb	r1, [r7, r1]
 802644c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026450:	910b      	str	r1, [sp, #44]	; 0x2c
 8026452:	0e09      	lsrs	r1, r1, #24
 8026454:	9114      	str	r1, [sp, #80]	; 0x50
 8026456:	e6d5      	b.n	8026204 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8026458:	b01f      	add	sp, #124	; 0x7c
 802645a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802645e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 802645e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026462:	b089      	sub	sp, #36	; 0x24
 8026464:	9101      	str	r1, [sp, #4]
 8026466:	9801      	ldr	r0, [sp, #4]
 8026468:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 802646c:	8800      	ldrh	r0, [r0, #0]
 802646e:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 8026472:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8026476:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 802647a:	1206      	asrs	r6, r0, #8
 802647c:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 8026480:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8026484:	9602      	str	r6, [sp, #8]
 8026486:	10c6      	asrs	r6, r0, #3
 8026488:	00c0      	lsls	r0, r0, #3
 802648a:	b2c0      	uxtb	r0, r0
 802648c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8026490:	9004      	str	r0, [sp, #16]
 8026492:	2f00      	cmp	r7, #0
 8026494:	fb07 100c 	mla	r0, r7, ip, r1
 8026498:	9603      	str	r6, [sp, #12]
 802649a:	eb02 0e00 	add.w	lr, r2, r0
 802649e:	f2c0 810a 	blt.w	80266b6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 80264a2:	45b8      	cmp	r8, r7
 80264a4:	f340 8107 	ble.w	80266b6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 80264a8:	2900      	cmp	r1, #0
 80264aa:	f2c0 8102 	blt.w	80266b2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 80264ae:	458c      	cmp	ip, r1
 80264b0:	f340 80ff 	ble.w	80266b2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 80264b4:	5c12      	ldrb	r2, [r2, r0]
 80264b6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80264ba:	1c4a      	adds	r2, r1, #1
 80264bc:	f100 80fe 	bmi.w	80266bc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 80264c0:	4594      	cmp	ip, r2
 80264c2:	f340 80fb 	ble.w	80266bc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 80264c6:	2d00      	cmp	r5, #0
 80264c8:	f000 80fa 	beq.w	80266c0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 80264cc:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80264d0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80264d4:	3701      	adds	r7, #1
 80264d6:	f100 80f7 	bmi.w	80266c8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 80264da:	45b8      	cmp	r8, r7
 80264dc:	f340 80f4 	ble.w	80266c8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 80264e0:	2c00      	cmp	r4, #0
 80264e2:	f000 80f4 	beq.w	80266ce <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 80264e6:	2900      	cmp	r1, #0
 80264e8:	eb0e 020c 	add.w	r2, lr, ip
 80264ec:	f2c0 80ea 	blt.w	80266c4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 80264f0:	458c      	cmp	ip, r1
 80264f2:	f340 80e7 	ble.w	80266c4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 80264f6:	f81e 700c 	ldrb.w	r7, [lr, ip]
 80264fa:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 80264fe:	3101      	adds	r1, #1
 8026500:	f100 80e8 	bmi.w	80266d4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8026504:	458c      	cmp	ip, r1
 8026506:	f340 80e5 	ble.w	80266d4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 802650a:	2d00      	cmp	r5, #0
 802650c:	f000 80e4 	beq.w	80266d8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 8026510:	7852      	ldrb	r2, [r2, #1]
 8026512:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8026516:	0e0b      	lsrs	r3, r1, #24
 8026518:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 802651c:	9300      	str	r3, [sp, #0]
 802651e:	b2a4      	uxth	r4, r4
 8026520:	b2ab      	uxth	r3, r5
 8026522:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8026526:	fb03 f904 	mul.w	r9, r3, r4
 802652a:	fb0a f505 	mul.w	r5, sl, r5
 802652e:	011b      	lsls	r3, r3, #4
 8026530:	eba3 0e09 	sub.w	lr, r3, r9
 8026534:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 8026538:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 802653c:	0a28      	lsrs	r0, r5, #8
 802653e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8026542:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8026546:	4405      	add	r5, r0
 8026548:	0a2d      	lsrs	r5, r5, #8
 802654a:	fb0a f303 	mul.w	r3, sl, r3
 802654e:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 8026552:	9005      	str	r0, [sp, #20]
 8026554:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8026558:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802655c:	0a1b      	lsrs	r3, r3, #8
 802655e:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8026562:	9306      	str	r3, [sp, #24]
 8026564:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 8026568:	fb0b f303 	mul.w	r3, fp, r3
 802656c:	0a1d      	lsrs	r5, r3, #8
 802656e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026572:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8026576:	fb0b f606 	mul.w	r6, fp, r6
 802657a:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 802657e:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8026582:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8026586:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802658a:	fb08 f707 	mul.w	r7, r8, r7
 802658e:	441d      	add	r5, r3
 8026590:	f506 7380 	add.w	r3, r6, #256	; 0x100
 8026594:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8026598:	f507 7380 	add.w	r3, r7, #256	; 0x100
 802659c:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 80265a0:	fb08 fc0c 	mul.w	ip, r8, ip
 80265a4:	0a1b      	lsrs	r3, r3, #8
 80265a6:	9307      	str	r3, [sp, #28]
 80265a8:	ea4f 201c 	mov.w	r0, ip, lsr #8
 80265ac:	0e0b      	lsrs	r3, r1, #24
 80265ae:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 80265b2:	435f      	muls	r7, r3
 80265b4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80265b8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80265bc:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 80265c0:	4460      	add	r0, ip
 80265c2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80265c6:	b2a4      	uxth	r4, r4
 80265c8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80265cc:	0a2d      	lsrs	r5, r5, #8
 80265ce:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80265d2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80265d6:	fa1f fe8e 	uxth.w	lr, lr
 80265da:	4359      	muls	r1, r3
 80265dc:	1b12      	subs	r2, r2, r4
 80265de:	9b05      	ldr	r3, [sp, #20]
 80265e0:	44bc      	add	ip, r7
 80265e2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80265e6:	b292      	uxth	r2, r2
 80265e8:	fb05 f50e 	mul.w	r5, r5, lr
 80265ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80265f0:	fb03 5502 	mla	r5, r3, r2, r5
 80265f4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80265f8:	9b06      	ldr	r3, [sp, #24]
 80265fa:	f501 7780 	add.w	r7, r1, #256	; 0x100
 80265fe:	0a36      	lsrs	r6, r6, #8
 8026600:	0a00      	lsrs	r0, r0, #8
 8026602:	fb0c 5509 	mla	r5, ip, r9, r5
 8026606:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802660a:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 802660e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026612:	fb00 5504 	mla	r5, r0, r4, r5
 8026616:	fb0e f606 	mul.w	r6, lr, r6
 802661a:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 802661e:	0a09      	lsrs	r1, r1, #8
 8026620:	9b07      	ldr	r3, [sp, #28]
 8026622:	fb02 6000 	mla	r0, r2, r0, r6
 8026626:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802662a:	fb09 0001 	mla	r0, r9, r1, r0
 802662e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026632:	fb0e fe0b 	mul.w	lr, lr, fp
 8026636:	fb04 0003 	mla	r0, r4, r3, r0
 802663a:	fb02 e20a 	mla	r2, r2, sl, lr
 802663e:	9b00      	ldr	r3, [sp, #0]
 8026640:	fb04 2408 	mla	r4, r4, r8, r2
 8026644:	fb09 4903 	mla	r9, r9, r3, r4
 8026648:	ea6f 2929 	mvn.w	r9, r9, asr #8
 802664c:	9b02      	ldr	r3, [sp, #8]
 802664e:	9a04      	ldr	r2, [sp, #16]
 8026650:	fa5f f989 	uxtb.w	r9, r9
 8026654:	fb03 f109 	mul.w	r1, r3, r9
 8026658:	9b03      	ldr	r3, [sp, #12]
 802665a:	0a2d      	lsrs	r5, r5, #8
 802665c:	0a00      	lsrs	r0, r0, #8
 802665e:	fb03 f309 	mul.w	r3, r3, r9
 8026662:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026666:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802666a:	4305      	orrs	r5, r0
 802666c:	fb02 f909 	mul.w	r9, r2, r9
 8026670:	1c58      	adds	r0, r3, #1
 8026672:	1c4a      	adds	r2, r1, #1
 8026674:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8026678:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802667c:	0a2b      	lsrs	r3, r5, #8
 802667e:	0c2a      	lsrs	r2, r5, #16
 8026680:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8026684:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8026688:	00db      	lsls	r3, r3, #3
 802668a:	0212      	lsls	r2, r2, #8
 802668c:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8026690:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026694:	4313      	orrs	r3, r2
 8026696:	f109 0201 	add.w	r2, r9, #1
 802669a:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 802669e:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 80266a2:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80266a6:	431d      	orrs	r5, r3
 80266a8:	9b01      	ldr	r3, [sp, #4]
 80266aa:	801d      	strh	r5, [r3, #0]
 80266ac:	b009      	add	sp, #36	; 0x24
 80266ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80266b2:	2000      	movs	r0, #0
 80266b4:	e701      	b.n	80264ba <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 80266b6:	2600      	movs	r6, #0
 80266b8:	4630      	mov	r0, r6
 80266ba:	e70b      	b.n	80264d4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 80266bc:	2600      	movs	r6, #0
 80266be:	e709      	b.n	80264d4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 80266c0:	462e      	mov	r6, r5
 80266c2:	e707      	b.n	80264d4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 80266c4:	2700      	movs	r7, #0
 80266c6:	e71a      	b.n	80264fe <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 80266c8:	2100      	movs	r1, #0
 80266ca:	460f      	mov	r7, r1
 80266cc:	e723      	b.n	8026516 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 80266ce:	4621      	mov	r1, r4
 80266d0:	4627      	mov	r7, r4
 80266d2:	e720      	b.n	8026516 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 80266d4:	2100      	movs	r1, #0
 80266d6:	e71e      	b.n	8026516 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 80266d8:	4629      	mov	r1, r5
 80266da:	e71c      	b.n	8026516 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

080266dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80266dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80266e0:	b09b      	sub	sp, #108	; 0x6c
 80266e2:	9218      	str	r2, [sp, #96]	; 0x60
 80266e4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80266e6:	9116      	str	r1, [sp, #88]	; 0x58
 80266e8:	9307      	str	r3, [sp, #28]
 80266ea:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80266ee:	9019      	str	r0, [sp, #100]	; 0x64
 80266f0:	6850      	ldr	r0, [r2, #4]
 80266f2:	6812      	ldr	r2, [r2, #0]
 80266f4:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80266f6:	fb00 1303 	mla	r3, r0, r3, r1
 80266fa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80266fe:	930a      	str	r3, [sp, #40]	; 0x28
 8026700:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026702:	681b      	ldr	r3, [r3, #0]
 8026704:	930f      	str	r3, [sp, #60]	; 0x3c
 8026706:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026708:	685e      	ldr	r6, [r3, #4]
 802670a:	3604      	adds	r6, #4
 802670c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802670e:	2b00      	cmp	r3, #0
 8026710:	dc03      	bgt.n	802671a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8026712:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026714:	2b00      	cmp	r3, #0
 8026716:	f340 8373 	ble.w	8026e00 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 802671a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802671c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026720:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026724:	1e48      	subs	r0, r1, #1
 8026726:	1e57      	subs	r7, r2, #1
 8026728:	9b07      	ldr	r3, [sp, #28]
 802672a:	2b00      	cmp	r3, #0
 802672c:	f340 8190 	ble.w	8026a50 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8026730:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8026732:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8026736:	ea4f 4325 	mov.w	r3, r5, asr #16
 802673a:	d406      	bmi.n	802674a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802673c:	4584      	cmp	ip, r0
 802673e:	da04      	bge.n	802674a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8026740:	2b00      	cmp	r3, #0
 8026742:	db02      	blt.n	802674a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8026744:	42bb      	cmp	r3, r7
 8026746:	f2c0 8184 	blt.w	8026a52 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 802674a:	f11c 0c01 	adds.w	ip, ip, #1
 802674e:	f100 8172 	bmi.w	8026a36 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8026752:	4561      	cmp	r1, ip
 8026754:	f2c0 816f 	blt.w	8026a36 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8026758:	3301      	adds	r3, #1
 802675a:	f100 816c 	bmi.w	8026a36 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 802675e:	429a      	cmp	r2, r3
 8026760:	f2c0 8169 	blt.w	8026a36 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8026764:	9b07      	ldr	r3, [sp, #28]
 8026766:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8026768:	9317      	str	r3, [sp, #92]	; 0x5c
 802676a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802676c:	2b00      	cmp	r3, #0
 802676e:	f340 818e 	ble.w	8026a8e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b2>
 8026772:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026774:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026778:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802677a:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 802677e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026780:	141b      	asrs	r3, r3, #16
 8026782:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8026786:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802678a:	f100 81d1 	bmi.w	8026b30 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 802678e:	f101 38ff 	add.w	r8, r1, #4294967295
 8026792:	4543      	cmp	r3, r8
 8026794:	f280 81cc 	bge.w	8026b30 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 8026798:	f1bc 0f00 	cmp.w	ip, #0
 802679c:	f2c0 81c8 	blt.w	8026b30 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 80267a0:	f10e 38ff 	add.w	r8, lr, #4294967295
 80267a4:	45c4      	cmp	ip, r8
 80267a6:	f280 81c3 	bge.w	8026b30 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 80267aa:	b209      	sxth	r1, r1
 80267ac:	fb0c 3301 	mla	r3, ip, r1, r3
 80267b0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80267b2:	eb04 0803 	add.w	r8, r4, r3
 80267b6:	5ce3      	ldrb	r3, [r4, r3]
 80267b8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80267bc:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80267c0:	2a00      	cmp	r2, #0
 80267c2:	f000 81aa 	beq.w	8026b1a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43e>
 80267c6:	f898 c001 	ldrb.w	ip, [r8, #1]
 80267ca:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80267ce:	940b      	str	r4, [sp, #44]	; 0x2c
 80267d0:	0e24      	lsrs	r4, r4, #24
 80267d2:	9412      	str	r4, [sp, #72]	; 0x48
 80267d4:	b178      	cbz	r0, 80267f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 80267d6:	eb08 0c01 	add.w	ip, r8, r1
 80267da:	f818 1001 	ldrb.w	r1, [r8, r1]
 80267de:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80267e2:	9108      	str	r1, [sp, #32]
 80267e4:	0e09      	lsrs	r1, r1, #24
 80267e6:	9110      	str	r1, [sp, #64]	; 0x40
 80267e8:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80267ec:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80267f0:	910c      	str	r1, [sp, #48]	; 0x30
 80267f2:	0e09      	lsrs	r1, r1, #24
 80267f4:	9113      	str	r1, [sp, #76]	; 0x4c
 80267f6:	b292      	uxth	r2, r2
 80267f8:	b280      	uxth	r0, r0
 80267fa:	fb02 f900 	mul.w	r9, r2, r0
 80267fe:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8026802:	0112      	lsls	r2, r2, #4
 8026804:	eba2 0809 	sub.w	r8, r2, r9
 8026808:	b280      	uxth	r0, r0
 802680a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802680e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8026810:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026812:	fa1f f888 	uxth.w	r8, r8
 8026816:	1a12      	subs	r2, r2, r0
 8026818:	b292      	uxth	r2, r2
 802681a:	fb08 f101 	mul.w	r1, r8, r1
 802681e:	fb02 110e 	mla	r1, r2, lr, r1
 8026822:	fb00 1104 	mla	r1, r0, r4, r1
 8026826:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026828:	fb09 1104 	mla	r1, r9, r4, r1
 802682c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026830:	2900      	cmp	r1, #0
 8026832:	f000 80f5 	beq.w	8026a20 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8026836:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802683a:	d01b      	beq.n	8026874 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802683c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8026840:	fb0e fa0a 	mul.w	sl, lr, sl
 8026844:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026848:	fb0e fe03 	mul.w	lr, lr, r3
 802684c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026850:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026854:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026858:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802685c:	4453      	add	r3, sl
 802685e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026862:	0a1b      	lsrs	r3, r3, #8
 8026864:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026868:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802686c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026870:	ea43 030c 	orr.w	r3, r3, ip
 8026874:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026876:	2cff      	cmp	r4, #255	; 0xff
 8026878:	d021      	beq.n	80268be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 802687a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802687c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8026880:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026882:	fb04 fb0b 	mul.w	fp, r4, fp
 8026886:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026888:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802688c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802688e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026892:	fb04 fa0a 	mul.w	sl, r4, sl
 8026896:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802689a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802689e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80268a2:	44de      	add	lr, fp
 80268a4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80268a8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80268ac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80268b0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80268b4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80268b8:	ea4e 040a 	orr.w	r4, lr, sl
 80268bc:	940b      	str	r4, [sp, #44]	; 0x2c
 80268be:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80268c0:	2cff      	cmp	r4, #255	; 0xff
 80268c2:	d021      	beq.n	8026908 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 80268c4:	9c08      	ldr	r4, [sp, #32]
 80268c6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80268ca:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80268cc:	fb04 fb0b 	mul.w	fp, r4, fp
 80268d0:	9c08      	ldr	r4, [sp, #32]
 80268d2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80268d6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80268d8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80268dc:	fb04 fa0a 	mul.w	sl, r4, sl
 80268e0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80268e4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80268e8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80268ec:	44de      	add	lr, fp
 80268ee:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80268f2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80268f6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80268fa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80268fe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026902:	ea4e 040a 	orr.w	r4, lr, sl
 8026906:	9408      	str	r4, [sp, #32]
 8026908:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802690a:	2cff      	cmp	r4, #255	; 0xff
 802690c:	d021      	beq.n	8026952 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 802690e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026910:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8026914:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026916:	fb04 fb0b 	mul.w	fp, r4, fp
 802691a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802691c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026920:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026922:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026926:	fb04 fa0a 	mul.w	sl, r4, sl
 802692a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802692e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026932:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026936:	44de      	add	lr, fp
 8026938:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802693c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026940:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026944:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026948:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802694c:	ea4e 040a 	orr.w	r4, lr, sl
 8026950:	940c      	str	r4, [sp, #48]	; 0x30
 8026952:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026954:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026958:	9c08      	ldr	r4, [sp, #32]
 802695a:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802695e:	fb08 fc0c 	mul.w	ip, r8, ip
 8026962:	fb02 cc0e 	mla	ip, r2, lr, ip
 8026966:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802696a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802696c:	fb00 cc0e 	mla	ip, r0, lr, ip
 8026970:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8026974:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026976:	fb09 cc0e 	mla	ip, r9, lr, ip
 802697a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802697e:	fb08 f80e 	mul.w	r8, r8, lr
 8026982:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026986:	fb02 8303 	mla	r3, r2, r3, r8
 802698a:	9a08      	ldr	r2, [sp, #32]
 802698c:	f8b7 8000 	ldrh.w	r8, [r7]
 8026990:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8026994:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026996:	fb00 330a 	mla	r3, r0, sl, r3
 802699a:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 802699e:	fb09 3900 	mla	r9, r9, r0, r3
 80269a2:	43c9      	mvns	r1, r1
 80269a4:	ea4f 2228 	mov.w	r2, r8, asr #8
 80269a8:	fa5f fe81 	uxtb.w	lr, r1
 80269ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80269b0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80269b4:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80269b8:	fb02 f20e 	mul.w	r2, r2, lr
 80269bc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80269c0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80269c4:	ea4c 0c09 	orr.w	ip, ip, r9
 80269c8:	1c53      	adds	r3, r2, #1
 80269ca:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80269ce:	ea4f 00e8 	mov.w	r0, r8, asr #3
 80269d2:	ea4f 431c 	mov.w	r3, ip, lsr #16
 80269d6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80269da:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80269de:	4a63      	ldr	r2, [pc, #396]	; (8026b6c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 80269e0:	fb00 f00e 	mul.w	r0, r0, lr
 80269e4:	b2db      	uxtb	r3, r3
 80269e6:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 80269ea:	1c43      	adds	r3, r0, #1
 80269ec:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80269f0:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80269f4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80269f8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80269fc:	b2c9      	uxtb	r1, r1
 80269fe:	00db      	lsls	r3, r3, #3
 8026a00:	fb01 f10e 	mul.w	r1, r1, lr
 8026a04:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026a08:	4313      	orrs	r3, r2
 8026a0a:	1c4a      	adds	r2, r1, #1
 8026a0c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026a10:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8026a14:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8026a18:	ea4c 0c03 	orr.w	ip, ip, r3
 8026a1c:	f8a7 c000 	strh.w	ip, [r7]
 8026a20:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8026a22:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8026a24:	441a      	add	r2, r3
 8026a26:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026a28:	9225      	str	r2, [sp, #148]	; 0x94
 8026a2a:	441d      	add	r5, r3
 8026a2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026a2e:	3b01      	subs	r3, #1
 8026a30:	3702      	adds	r7, #2
 8026a32:	9317      	str	r3, [sp, #92]	; 0x5c
 8026a34:	e699      	b.n	802676a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8026a36:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8026a38:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8026a3a:	441c      	add	r4, r3
 8026a3c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026a3e:	9425      	str	r4, [sp, #148]	; 0x94
 8026a40:	441d      	add	r5, r3
 8026a42:	9b07      	ldr	r3, [sp, #28]
 8026a44:	3b01      	subs	r3, #1
 8026a46:	9307      	str	r3, [sp, #28]
 8026a48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026a4a:	3302      	adds	r3, #2
 8026a4c:	930a      	str	r3, [sp, #40]	; 0x28
 8026a4e:	e66b      	b.n	8026728 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8026a50:	d024      	beq.n	8026a9c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8026a52:	9b07      	ldr	r3, [sp, #28]
 8026a54:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8026a56:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8026a58:	3b01      	subs	r3, #1
 8026a5a:	fb00 4003 	mla	r0, r0, r3, r4
 8026a5e:	1400      	asrs	r0, r0, #16
 8026a60:	f53f ae80 	bmi.w	8026764 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8026a64:	3901      	subs	r1, #1
 8026a66:	4288      	cmp	r0, r1
 8026a68:	f6bf ae7c 	bge.w	8026764 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8026a6c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8026a6e:	fb01 5303 	mla	r3, r1, r3, r5
 8026a72:	141b      	asrs	r3, r3, #16
 8026a74:	f53f ae76 	bmi.w	8026764 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8026a78:	3a01      	subs	r2, #1
 8026a7a:	4293      	cmp	r3, r2
 8026a7c:	f6bf ae72 	bge.w	8026764 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8026a80:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8026a84:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8026a88:	f1bb 0f00 	cmp.w	fp, #0
 8026a8c:	dc70      	bgt.n	8026b70 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8026a8e:	9b07      	ldr	r3, [sp, #28]
 8026a90:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026a96:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8026a9a:	930a      	str	r3, [sp, #40]	; 0x28
 8026a9c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8026a9e:	2b00      	cmp	r3, #0
 8026aa0:	f340 81ae 	ble.w	8026e00 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8026aa4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026aa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026aac:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026ab0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026ab2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026ab6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026aba:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026abe:	eef0 6a62 	vmov.f32	s13, s5
 8026ac2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026ac6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026aca:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026ace:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8026ad2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026ad6:	eef0 6a43 	vmov.f32	s13, s6
 8026ada:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026ade:	ee12 2a90 	vmov	r2, s5
 8026ae2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026ae6:	fb92 f3f3 	sdiv	r3, r2, r3
 8026aea:	ee13 2a10 	vmov	r2, s6
 8026aee:	9327      	str	r3, [sp, #156]	; 0x9c
 8026af0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026af2:	fb92 f3f3 	sdiv	r3, r2, r3
 8026af6:	9328      	str	r3, [sp, #160]	; 0xa0
 8026af8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8026afa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8026afc:	3b01      	subs	r3, #1
 8026afe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026b02:	9316      	str	r3, [sp, #88]	; 0x58
 8026b04:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026b06:	bf08      	it	eq
 8026b08:	4613      	moveq	r3, r2
 8026b0a:	ee16 5a90 	vmov	r5, s13
 8026b0e:	9307      	str	r3, [sp, #28]
 8026b10:	eeb0 3a67 	vmov.f32	s6, s15
 8026b14:	eef0 2a47 	vmov.f32	s5, s14
 8026b18:	e5f8      	b.n	802670c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8026b1a:	2800      	cmp	r0, #0
 8026b1c:	f43f ae6b 	beq.w	80267f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 8026b20:	f818 1001 	ldrb.w	r1, [r8, r1]
 8026b24:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026b28:	9108      	str	r1, [sp, #32]
 8026b2a:	0e09      	lsrs	r1, r1, #24
 8026b2c:	9110      	str	r1, [sp, #64]	; 0x40
 8026b2e:	e662      	b.n	80267f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 8026b30:	f113 0801 	adds.w	r8, r3, #1
 8026b34:	f53f af74 	bmi.w	8026a20 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8026b38:	4541      	cmp	r1, r8
 8026b3a:	f6ff af71 	blt.w	8026a20 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8026b3e:	f11c 0801 	adds.w	r8, ip, #1
 8026b42:	f53f af6d 	bmi.w	8026a20 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8026b46:	45c6      	cmp	lr, r8
 8026b48:	f6ff af6a 	blt.w	8026a20 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8026b4c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8026b50:	b209      	sxth	r1, r1
 8026b52:	fa0f f38e 	sxth.w	r3, lr
 8026b56:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8026b5a:	9301      	str	r3, [sp, #4]
 8026b5c:	9100      	str	r1, [sp, #0]
 8026b5e:	4633      	mov	r3, r6
 8026b60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026b62:	9819      	ldr	r0, [sp, #100]	; 0x64
 8026b64:	4639      	mov	r1, r7
 8026b66:	f7ff fc7a 	bl	802645e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8026b6a:	e759      	b.n	8026a20 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8026b6c:	fffff800 	.word	0xfffff800
 8026b70:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026b72:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8026b74:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026b78:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026b7a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026b7e:	1427      	asrs	r7, r4, #16
 8026b80:	142b      	asrs	r3, r5, #16
 8026b82:	fb01 7303 	mla	r3, r1, r3, r7
 8026b86:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026b88:	18e7      	adds	r7, r4, r3
 8026b8a:	5ce3      	ldrb	r3, [r4, r3]
 8026b8c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026b90:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8026b94:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8026b98:	2a00      	cmp	r2, #0
 8026b9a:	f000 8127 	beq.w	8026dec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8026b9e:	f897 e001 	ldrb.w	lr, [r7, #1]
 8026ba2:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8026ba6:	940d      	str	r4, [sp, #52]	; 0x34
 8026ba8:	0e24      	lsrs	r4, r4, #24
 8026baa:	9414      	str	r4, [sp, #80]	; 0x50
 8026bac:	b170      	cbz	r0, 8026bcc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8026bae:	eb07 0e01 	add.w	lr, r7, r1
 8026bb2:	5c79      	ldrb	r1, [r7, r1]
 8026bb4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026bb8:	9109      	str	r1, [sp, #36]	; 0x24
 8026bba:	0e09      	lsrs	r1, r1, #24
 8026bbc:	9111      	str	r1, [sp, #68]	; 0x44
 8026bbe:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8026bc2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026bc6:	910e      	str	r1, [sp, #56]	; 0x38
 8026bc8:	0e09      	lsrs	r1, r1, #24
 8026bca:	9115      	str	r1, [sp, #84]	; 0x54
 8026bcc:	b292      	uxth	r2, r2
 8026bce:	b280      	uxth	r0, r0
 8026bd0:	fb02 f800 	mul.w	r8, r2, r0
 8026bd4:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8026bd8:	0112      	lsls	r2, r2, #4
 8026bda:	eba2 0e08 	sub.w	lr, r2, r8
 8026bde:	b280      	uxth	r0, r0
 8026be0:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8026be4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8026be6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026be8:	fa1f fe8e 	uxth.w	lr, lr
 8026bec:	1a09      	subs	r1, r1, r0
 8026bee:	b289      	uxth	r1, r1
 8026bf0:	fb0e f202 	mul.w	r2, lr, r2
 8026bf4:	fb01 220c 	mla	r2, r1, ip, r2
 8026bf8:	fb00 2204 	mla	r2, r0, r4, r2
 8026bfc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026bfe:	fb08 2204 	mla	r2, r8, r4, r2
 8026c02:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8026c06:	2a00      	cmp	r2, #0
 8026c08:	f000 80e5 	beq.w	8026dd6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 8026c0c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8026c10:	d019      	beq.n	8026c46 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 8026c12:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8026c16:	fb0c fa0a 	mul.w	sl, ip, sl
 8026c1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026c1e:	fb0c fc03 	mul.w	ip, ip, r3
 8026c22:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026c26:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026c2a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026c2e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8026c32:	4453      	add	r3, sl
 8026c34:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8026c38:	0a1b      	lsrs	r3, r3, #8
 8026c3a:	0a3f      	lsrs	r7, r7, #8
 8026c3c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026c40:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8026c44:	433b      	orrs	r3, r7
 8026c46:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026c48:	2cff      	cmp	r4, #255	; 0xff
 8026c4a:	d020      	beq.n	8026c8e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 8026c4c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026c4e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026c52:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026c54:	4367      	muls	r7, r4
 8026c56:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026c58:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026c5c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026c5e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026c62:	fb04 fa0a 	mul.w	sl, r4, sl
 8026c66:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026c6a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026c6e:	44bc      	add	ip, r7
 8026c70:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026c74:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026c78:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026c7c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026c80:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026c84:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026c88:	ea4c 040a 	orr.w	r4, ip, sl
 8026c8c:	940d      	str	r4, [sp, #52]	; 0x34
 8026c8e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026c90:	2cff      	cmp	r4, #255	; 0xff
 8026c92:	d020      	beq.n	8026cd6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 8026c94:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8026c96:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026c9a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026c9c:	4367      	muls	r7, r4
 8026c9e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8026ca0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026ca4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026ca6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026caa:	fb04 fa0a 	mul.w	sl, r4, sl
 8026cae:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026cb2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026cb6:	44bc      	add	ip, r7
 8026cb8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026cbc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026cc0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026cc4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026cc8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026ccc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026cd0:	ea4c 040a 	orr.w	r4, ip, sl
 8026cd4:	9409      	str	r4, [sp, #36]	; 0x24
 8026cd6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026cd8:	2cff      	cmp	r4, #255	; 0xff
 8026cda:	d020      	beq.n	8026d1e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 8026cdc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026cde:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026ce2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026ce4:	4367      	muls	r7, r4
 8026ce6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026ce8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026cec:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026cee:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026cf2:	fb04 fa0a 	mul.w	sl, r4, sl
 8026cf6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026cfa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026cfe:	44bc      	add	ip, r7
 8026d00:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026d04:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026d08:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026d0c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026d10:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026d14:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026d18:	ea4c 040a 	orr.w	r4, ip, sl
 8026d1c:	940e      	str	r4, [sp, #56]	; 0x38
 8026d1e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026d20:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026d24:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8026d26:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8026d2a:	fb0e f707 	mul.w	r7, lr, r7
 8026d2e:	fb01 770c 	mla	r7, r1, ip, r7
 8026d32:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026d36:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026d38:	fb00 770c 	mla	r7, r0, ip, r7
 8026d3c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026d40:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026d42:	fb08 770c 	mla	r7, r8, ip, r7
 8026d46:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8026d4a:	fb0e fe0c 	mul.w	lr, lr, ip
 8026d4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026d52:	fb01 e303 	mla	r3, r1, r3, lr
 8026d56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8026d58:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8026d5c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8026d5e:	fb00 330a 	mla	r3, r0, sl, r3
 8026d62:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8026d66:	fb08 3c0c 	mla	ip, r8, ip, r3
 8026d6a:	f8b9 3000 	ldrh.w	r3, [r9]
 8026d6e:	43d2      	mvns	r2, r2
 8026d70:	1218      	asrs	r0, r3, #8
 8026d72:	b2d2      	uxtb	r2, r2
 8026d74:	10d9      	asrs	r1, r3, #3
 8026d76:	0a3f      	lsrs	r7, r7, #8
 8026d78:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026d7c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026d80:	00db      	lsls	r3, r3, #3
 8026d82:	4350      	muls	r0, r2
 8026d84:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8026d88:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026d8c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8026d90:	b2db      	uxtb	r3, r3
 8026d92:	ea47 070c 	orr.w	r7, r7, ip
 8026d96:	4351      	muls	r1, r2
 8026d98:	4353      	muls	r3, r2
 8026d9a:	1c42      	adds	r2, r0, #1
 8026d9c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026da0:	0c3a      	lsrs	r2, r7, #16
 8026da2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026da6:	4a18      	ldr	r2, [pc, #96]	; (8026e08 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 8026da8:	b2c0      	uxtb	r0, r0
 8026daa:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8026dae:	1c4a      	adds	r2, r1, #1
 8026db0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026db4:	0a3a      	lsrs	r2, r7, #8
 8026db6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026dba:	00c9      	lsls	r1, r1, #3
 8026dbc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026dc0:	4301      	orrs	r1, r0
 8026dc2:	1c58      	adds	r0, r3, #1
 8026dc4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8026dc8:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8026dcc:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8026dd0:	4308      	orrs	r0, r1
 8026dd2:	f8a9 0000 	strh.w	r0, [r9]
 8026dd6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8026dd8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8026dda:	441a      	add	r2, r3
 8026ddc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026dde:	9225      	str	r2, [sp, #148]	; 0x94
 8026de0:	f109 0902 	add.w	r9, r9, #2
 8026de4:	441d      	add	r5, r3
 8026de6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026dea:	e64d      	b.n	8026a88 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
 8026dec:	2800      	cmp	r0, #0
 8026dee:	f43f aeed 	beq.w	8026bcc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8026df2:	5c79      	ldrb	r1, [r7, r1]
 8026df4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026df8:	9109      	str	r1, [sp, #36]	; 0x24
 8026dfa:	0e09      	lsrs	r1, r1, #24
 8026dfc:	9111      	str	r1, [sp, #68]	; 0x44
 8026dfe:	e6e5      	b.n	8026bcc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8026e00:	b01b      	add	sp, #108	; 0x6c
 8026e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026e06:	bf00      	nop
 8026e08:	fffff800 	.word	0xfffff800

08026e0c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8026e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026e10:	b085      	sub	sp, #20
 8026e12:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8026e16:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8026e1a:	9103      	str	r1, [sp, #12]
 8026e1c:	fb00 7406 	mla	r4, r0, r6, r7
 8026e20:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 8026e24:	2800      	cmp	r0, #0
 8026e26:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8026e2a:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8026e2e:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8026e32:	9501      	str	r5, [sp, #4]
 8026e34:	eb03 0904 	add.w	r9, r3, r4
 8026e38:	f2c0 8150 	blt.w	80270dc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8026e3c:	4583      	cmp	fp, r0
 8026e3e:	f340 814d 	ble.w	80270dc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8026e42:	2f00      	cmp	r7, #0
 8026e44:	f2c0 8146 	blt.w	80270d4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8026e48:	42be      	cmp	r6, r7
 8026e4a:	f340 8143 	ble.w	80270d4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8026e4e:	f813 c004 	ldrb.w	ip, [r3, r4]
 8026e52:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8026e56:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8026e5a:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 8026e5e:	4355      	muls	r5, r2
 8026e60:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026e64:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8026e68:	fb0c f203 	mul.w	r2, ip, r3
 8026e6c:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8026e70:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8026e74:	441d      	add	r5, r3
 8026e76:	f102 0320 	add.w	r3, r2, #32
 8026e7a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026e7e:	0a1b      	lsrs	r3, r3, #8
 8026e80:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8026e84:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026e88:	431c      	orrs	r4, r3
 8026e8a:	1c7b      	adds	r3, r7, #1
 8026e8c:	f100 812b 	bmi.w	80270e6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8026e90:	429e      	cmp	r6, r3
 8026e92:	f340 8128 	ble.w	80270e6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8026e96:	2900      	cmp	r1, #0
 8026e98:	f000 8128 	beq.w	80270ec <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 8026e9c:	9a01      	ldr	r2, [sp, #4]
 8026e9e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8026ea2:	8855      	ldrh	r5, [r2, #2]
 8026ea4:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8026ea8:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8026eac:	fb08 f802 	mul.w	r8, r8, r2
 8026eb0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8026eb4:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8026eb8:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8026ebc:	435d      	muls	r5, r3
 8026ebe:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026ec2:	44d0      	add	r8, sl
 8026ec4:	f105 0a20 	add.w	sl, r5, #32
 8026ec8:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8026ecc:	0a2d      	lsrs	r5, r5, #8
 8026ece:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8026ed2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8026ed6:	432a      	orrs	r2, r5
 8026ed8:	3001      	adds	r0, #1
 8026eda:	f100 810d 	bmi.w	80270f8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8026ede:	4583      	cmp	fp, r0
 8026ee0:	f340 810a 	ble.w	80270f8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8026ee4:	f1be 0f00 	cmp.w	lr, #0
 8026ee8:	f000 810b 	beq.w	8027102 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 8026eec:	2f00      	cmp	r7, #0
 8026eee:	f2c0 8100 	blt.w	80270f2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8026ef2:	42be      	cmp	r6, r7
 8026ef4:	f340 80fd 	ble.w	80270f2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8026ef8:	9801      	ldr	r0, [sp, #4]
 8026efa:	f819 5006 	ldrb.w	r5, [r9, r6]
 8026efe:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8026f02:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8026f06:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 8026f0a:	fb0a fa00 	mul.w	sl, sl, r0
 8026f0e:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8026f12:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8026f16:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8026f1a:	fb05 f808 	mul.w	r8, r5, r8
 8026f1e:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8026f22:	4482      	add	sl, r0
 8026f24:	f108 0020 	add.w	r0, r8, #32
 8026f28:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8026f2c:	0a00      	lsrs	r0, r0, #8
 8026f2e:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8026f32:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026f36:	ea4b 0b00 	orr.w	fp, fp, r0
 8026f3a:	3701      	adds	r7, #1
 8026f3c:	f100 80e6 	bmi.w	802710c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8026f40:	42be      	cmp	r6, r7
 8026f42:	f340 80e3 	ble.w	802710c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8026f46:	2900      	cmp	r1, #0
 8026f48:	f000 80e3 	beq.w	8027112 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 8026f4c:	3601      	adds	r6, #1
 8026f4e:	9801      	ldr	r0, [sp, #4]
 8026f50:	f819 7006 	ldrb.w	r7, [r9, r6]
 8026f54:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8026f58:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8026f5c:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 8026f60:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026f64:	fb09 f906 	mul.w	r9, r9, r6
 8026f68:	fb07 f800 	mul.w	r8, r7, r0
 8026f6c:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8026f70:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8026f74:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8026f78:	44d1      	add	r9, sl
 8026f7a:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8026f7e:	f108 0020 	add.w	r0, r8, #32
 8026f82:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8026f86:	0a00      	lsrs	r0, r0, #8
 8026f88:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026f8c:	4330      	orrs	r0, r6
 8026f8e:	b28e      	uxth	r6, r1
 8026f90:	fa1f f98e 	uxth.w	r9, lr
 8026f94:	fb06 f809 	mul.w	r8, r6, r9
 8026f98:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8026f9c:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8026fa0:	0136      	lsls	r6, r6, #4
 8026fa2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026fa6:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8026faa:	9601      	str	r6, [sp, #4]
 8026fac:	ea4a 0404 	orr.w	r4, sl, r4
 8026fb0:	fa1f f689 	uxth.w	r6, r9
 8026fb4:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8026fb8:	fb11 f90e 	smulbb	r9, r1, lr
 8026fbc:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8026fc0:	9602      	str	r6, [sp, #8]
 8026fc2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026fc6:	4626      	mov	r6, r4
 8026fc8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026fcc:	f1ce 0410 	rsb	r4, lr, #16
 8026fd0:	1a64      	subs	r4, r4, r1
 8026fd2:	ea4a 0202 	orr.w	r2, sl, r2
 8026fd6:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8026fda:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8026fde:	434a      	muls	r2, r1
 8026fe0:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8026fe4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026fe8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026fec:	fb04 2406 	mla	r4, r4, r6, r2
 8026ff0:	ea4a 0000 	orr.w	r0, sl, r0
 8026ff4:	fb09 4200 	mla	r2, r9, r0, r4
 8026ff8:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8026ffc:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8027000:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8027004:	ea44 0b0b 	orr.w	fp, r4, fp
 8027008:	9c01      	ldr	r4, [sp, #4]
 802700a:	9e02      	ldr	r6, [sp, #8]
 802700c:	9903      	ldr	r1, [sp, #12]
 802700e:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 8027012:	1ba4      	subs	r4, r4, r6
 8027014:	9e01      	ldr	r6, [sp, #4]
 8027016:	8808      	ldrh	r0, [r1, #0]
 8027018:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 802701c:	eba6 0608 	sub.w	r6, r6, r8
 8027020:	b2b6      	uxth	r6, r6
 8027022:	b2a4      	uxth	r4, r4
 8027024:	4373      	muls	r3, r6
 8027026:	fb0c 3304 	mla	r3, ip, r4, r3
 802702a:	9c02      	ldr	r4, [sp, #8]
 802702c:	fb04 3505 	mla	r5, r4, r5, r3
 8027030:	fb08 5707 	mla	r7, r8, r7, r5
 8027034:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8027038:	b289      	uxth	r1, r1
 802703a:	fb0e 2e0b 	mla	lr, lr, fp, r2
 802703e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8027042:	434f      	muls	r7, r1
 8027044:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8027048:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802704c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027050:	1c7b      	adds	r3, r7, #1
 8027052:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8027056:	ea42 0e0e 	orr.w	lr, r2, lr
 802705a:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 802705e:	fa1f f28e 	uxth.w	r2, lr
 8027062:	1203      	asrs	r3, r0, #8
 8027064:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8027068:	b2ff      	uxtb	r7, r7
 802706a:	1215      	asrs	r5, r2, #8
 802706c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8027070:	fb13 f307 	smulbb	r3, r3, r7
 8027074:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8027078:	fb05 3501 	mla	r5, r5, r1, r3
 802707c:	10c3      	asrs	r3, r0, #3
 802707e:	10d4      	asrs	r4, r2, #3
 8027080:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8027084:	fb13 f307 	smulbb	r3, r3, r7
 8027088:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 802708c:	fb04 3401 	mla	r4, r4, r1, r3
 8027090:	00c3      	lsls	r3, r0, #3
 8027092:	00d2      	lsls	r2, r2, #3
 8027094:	b2db      	uxtb	r3, r3
 8027096:	fb13 f307 	smulbb	r3, r3, r7
 802709a:	b2d2      	uxtb	r2, r2
 802709c:	fb02 3101 	mla	r1, r2, r1, r3
 80270a0:	b2ad      	uxth	r5, r5
 80270a2:	b289      	uxth	r1, r1
 80270a4:	b2a4      	uxth	r4, r4
 80270a6:	1c6b      	adds	r3, r5, #1
 80270a8:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80270ac:	1c62      	adds	r2, r4, #1
 80270ae:	1c4b      	adds	r3, r1, #1
 80270b0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80270b4:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80270b8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80270bc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80270c0:	0964      	lsrs	r4, r4, #5
 80270c2:	432b      	orrs	r3, r5
 80270c4:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 80270c8:	9a03      	ldr	r2, [sp, #12]
 80270ca:	4323      	orrs	r3, r4
 80270cc:	8013      	strh	r3, [r2, #0]
 80270ce:	b005      	add	sp, #20
 80270d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80270d4:	f04f 0c00 	mov.w	ip, #0
 80270d8:	4664      	mov	r4, ip
 80270da:	e6d6      	b.n	8026e8a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 80270dc:	2300      	movs	r3, #0
 80270de:	469c      	mov	ip, r3
 80270e0:	461a      	mov	r2, r3
 80270e2:	461c      	mov	r4, r3
 80270e4:	e6f8      	b.n	8026ed8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 80270e6:	2300      	movs	r3, #0
 80270e8:	461a      	mov	r2, r3
 80270ea:	e6f5      	b.n	8026ed8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 80270ec:	460b      	mov	r3, r1
 80270ee:	460a      	mov	r2, r1
 80270f0:	e6f2      	b.n	8026ed8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 80270f2:	2500      	movs	r5, #0
 80270f4:	46ab      	mov	fp, r5
 80270f6:	e720      	b.n	8026f3a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 80270f8:	2700      	movs	r7, #0
 80270fa:	463d      	mov	r5, r7
 80270fc:	4638      	mov	r0, r7
 80270fe:	46bb      	mov	fp, r7
 8027100:	e745      	b.n	8026f8e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8027102:	4677      	mov	r7, lr
 8027104:	4675      	mov	r5, lr
 8027106:	4670      	mov	r0, lr
 8027108:	46f3      	mov	fp, lr
 802710a:	e740      	b.n	8026f8e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 802710c:	2700      	movs	r7, #0
 802710e:	4638      	mov	r0, r7
 8027110:	e73d      	b.n	8026f8e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8027112:	460f      	mov	r7, r1
 8027114:	4608      	mov	r0, r1
 8027116:	e73a      	b.n	8026f8e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

08027118 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802711c:	b097      	sub	sp, #92	; 0x5c
 802711e:	9214      	str	r2, [sp, #80]	; 0x50
 8027120:	9308      	str	r3, [sp, #32]
 8027122:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8027124:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8027128:	9312      	str	r3, [sp, #72]	; 0x48
 802712a:	9111      	str	r1, [sp, #68]	; 0x44
 802712c:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8027130:	9015      	str	r0, [sp, #84]	; 0x54
 8027132:	6850      	ldr	r0, [r2, #4]
 8027134:	6812      	ldr	r2, [r2, #0]
 8027136:	fb00 1303 	mla	r3, r0, r3, r1
 802713a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802713e:	9309      	str	r3, [sp, #36]	; 0x24
 8027140:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027142:	681b      	ldr	r3, [r3, #0]
 8027144:	930b      	str	r3, [sp, #44]	; 0x2c
 8027146:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027148:	685b      	ldr	r3, [r3, #4]
 802714a:	930c      	str	r3, [sp, #48]	; 0x30
 802714c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8027150:	930a      	str	r3, [sp, #40]	; 0x28
 8027152:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8027154:	2b00      	cmp	r3, #0
 8027156:	dc03      	bgt.n	8027160 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8027158:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802715a:	2b00      	cmp	r3, #0
 802715c:	f340 83cb 	ble.w	80278f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8027160:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027162:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027166:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802716a:	1e48      	subs	r0, r1, #1
 802716c:	1e55      	subs	r5, r2, #1
 802716e:	9b08      	ldr	r3, [sp, #32]
 8027170:	2b00      	cmp	r3, #0
 8027172:	f340 81a3 	ble.w	80274bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8027176:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8027178:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802717a:	1436      	asrs	r6, r6, #16
 802717c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8027180:	d406      	bmi.n	8027190 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8027182:	4286      	cmp	r6, r0
 8027184:	da04      	bge.n	8027190 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8027186:	2b00      	cmp	r3, #0
 8027188:	db02      	blt.n	8027190 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802718a:	42ab      	cmp	r3, r5
 802718c:	f2c0 8197 	blt.w	80274be <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8027190:	3601      	adds	r6, #1
 8027192:	f100 8184 	bmi.w	802749e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8027196:	42b1      	cmp	r1, r6
 8027198:	f2c0 8181 	blt.w	802749e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802719c:	3301      	adds	r3, #1
 802719e:	f100 817e 	bmi.w	802749e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80271a2:	429a      	cmp	r2, r3
 80271a4:	f2c0 817b 	blt.w	802749e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80271a8:	9b08      	ldr	r3, [sp, #32]
 80271aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80271ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80271ae:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80271b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80271b4:	2b00      	cmp	r3, #0
 80271b6:	f340 81a4 	ble.w	8027502 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80271ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80271bc:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80271be:	1418      	asrs	r0, r3, #16
 80271c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80271c2:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80271c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80271c8:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80271cc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80271ce:	142d      	asrs	r5, r5, #16
 80271d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80271d4:	f100 81f8 	bmi.w	80275c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 80271d8:	f102 3eff 	add.w	lr, r2, #4294967295
 80271dc:	4575      	cmp	r5, lr
 80271de:	f280 81f3 	bge.w	80275c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 80271e2:	2800      	cmp	r0, #0
 80271e4:	f2c0 81f0 	blt.w	80275c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 80271e8:	f103 3eff 	add.w	lr, r3, #4294967295
 80271ec:	4570      	cmp	r0, lr
 80271ee:	f280 81eb 	bge.w	80275c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 80271f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80271f4:	b212      	sxth	r2, r2
 80271f6:	fb00 5002 	mla	r0, r0, r2, r5
 80271fa:	fa1f fe81 	uxth.w	lr, r1
 80271fe:	eb03 0a00 	add.w	sl, r3, r0
 8027202:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8027206:	f813 9000 	ldrb.w	r9, [r3, r0]
 802720a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802720e:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8027212:	b29b      	uxth	r3, r3
 8027214:	f1bc 0f00 	cmp.w	ip, #0
 8027218:	f000 81b9 	beq.w	802758e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 802721c:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8027220:	940d      	str	r4, [sp, #52]	; 0x34
 8027222:	eb0a 0b02 	add.w	fp, sl, r2
 8027226:	fa1f fa8c 	uxth.w	sl, ip
 802722a:	fb0a fe0e 	mul.w	lr, sl, lr
 802722e:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8027232:	fa1f fa8a 	uxth.w	sl, sl
 8027236:	eba5 050e 	sub.w	r5, r5, lr
 802723a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802723e:	940e      	str	r4, [sp, #56]	; 0x38
 8027240:	eba3 030a 	sub.w	r3, r3, sl
 8027244:	b2ad      	uxth	r5, r5
 8027246:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027248:	b29b      	uxth	r3, r3
 802724a:	fb08 f505 	mul.w	r5, r8, r5
 802724e:	fb09 5303 	mla	r3, r9, r3, r5
 8027252:	fb0a 3304 	mla	r3, sl, r4, r3
 8027256:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8027258:	fb0e 3304 	mla	r3, lr, r4, r3
 802725c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027260:	2b00      	cmp	r3, #0
 8027262:	f000 810f 	beq.w	8027484 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8027266:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8027268:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802726c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8027270:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8027274:	f000 8190 	beq.w	8027598 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8027278:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 802727c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8027280:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027284:	fb09 f000 	mul.w	r0, r9, r0
 8027288:	fb0a fe0e 	mul.w	lr, sl, lr
 802728c:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8027290:	f100 0b20 	add.w	fp, r0, #32
 8027294:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8027298:	44ce      	add	lr, r9
 802729a:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 802729e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80272a2:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80272a6:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80272aa:	ea4e 0909 	orr.w	r9, lr, r9
 80272ae:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80272b2:	8868      	ldrh	r0, [r5, #2]
 80272b4:	d019      	beq.n	80272ea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 80272b6:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80272ba:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80272be:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80272c2:	fb08 f800 	mul.w	r8, r8, r0
 80272c6:	fb0a fe0e 	mul.w	lr, sl, lr
 80272ca:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 80272ce:	f108 0b20 	add.w	fp, r8, #32
 80272d2:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80272d6:	4486      	add	lr, r0
 80272d8:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 80272dc:	0a00      	lsrs	r0, r0, #8
 80272de:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80272e2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80272e6:	ea4e 0000 	orr.w	r0, lr, r0
 80272ea:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80272ee:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80272f2:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80272f6:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80272fa:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80272fe:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027302:	ea4e 0909 	orr.w	r9, lr, r9
 8027306:	ea4a 0000 	orr.w	r0, sl, r0
 802730a:	f1bc 0f00 	cmp.w	ip, #0
 802730e:	f000 8145 	beq.w	802759c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 8027312:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8027316:	3a01      	subs	r2, #1
 8027318:	0052      	lsls	r2, r2, #1
 802731a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802731c:	3202      	adds	r2, #2
 802731e:	2cff      	cmp	r4, #255	; 0xff
 8027320:	eb05 0e02 	add.w	lr, r5, r2
 8027324:	5aaa      	ldrh	r2, [r5, r2]
 8027326:	d018      	beq.n	802735a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8027328:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 802732c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027330:	fb04 fa02 	mul.w	sl, r4, r2
 8027334:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027338:	fb08 f805 	mul.w	r8, r8, r5
 802733c:	f10a 0520 	add.w	r5, sl, #32
 8027340:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8027344:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8027348:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802734c:	4442      	add	r2, r8
 802734e:	0a2d      	lsrs	r5, r5, #8
 8027350:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8027354:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8027358:	432a      	orrs	r2, r5
 802735a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802735c:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8027360:	2cff      	cmp	r4, #255	; 0xff
 8027362:	d01a      	beq.n	802739a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8027364:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8027368:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802736c:	fb04 fa05 	mul.w	sl, r4, r5
 8027370:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027374:	fb08 f80e 	mul.w	r8, r8, lr
 8027378:	f10a 0e20 	add.w	lr, sl, #32
 802737c:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8027380:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8027384:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027388:	4445      	add	r5, r8
 802738a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802738e:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8027392:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8027396:	ea45 050e 	orr.w	r5, r5, lr
 802739a:	fb1c fe01 	smulbb	lr, ip, r1
 802739e:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80273a2:	f1cc 0810 	rsb	r8, ip, #16
 80273a6:	eba8 0801 	sub.w	r8, r8, r1
 80273aa:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80273ae:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80273b2:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80273b6:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 80273ba:	4341      	muls	r1, r0
 80273bc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80273c0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80273c4:	ea4a 0202 	orr.w	r2, sl, r2
 80273c8:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 80273cc:	fb09 1108 	mla	r1, r9, r8, r1
 80273d0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80273d4:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80273d8:	fb0c 1102 	mla	r1, ip, r2, r1
 80273dc:	ea4b 0505 	orr.w	r5, fp, r5
 80273e0:	fb0e 1e05 	mla	lr, lr, r5, r1
 80273e4:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80273e8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80273ec:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80273f0:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80273f4:	ea42 0e0e 	orr.w	lr, r2, lr
 80273f8:	fa1f f28e 	uxth.w	r2, lr
 80273fc:	2bff      	cmp	r3, #255	; 0xff
 80273fe:	d103      	bne.n	8027408 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8027400:	9912      	ldr	r1, [sp, #72]	; 0x48
 8027402:	29ff      	cmp	r1, #255	; 0xff
 8027404:	f000 80de 	beq.w	80275c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8027408:	990a      	ldr	r1, [sp, #40]	; 0x28
 802740a:	8838      	ldrh	r0, [r7, #0]
 802740c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802740e:	434b      	muls	r3, r1
 8027410:	f103 0c01 	add.w	ip, r3, #1
 8027414:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8027418:	ea6f 2323 	mvn.w	r3, r3, asr #8
 802741c:	fa5f fc83 	uxtb.w	ip, r3
 8027420:	1203      	asrs	r3, r0, #8
 8027422:	1215      	asrs	r5, r2, #8
 8027424:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8027428:	fb13 f30c 	smulbb	r3, r3, ip
 802742c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8027430:	fb05 3501 	mla	r5, r5, r1, r3
 8027434:	10c3      	asrs	r3, r0, #3
 8027436:	10d1      	asrs	r1, r2, #3
 8027438:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802743c:	fb13 f30c 	smulbb	r3, r3, ip
 8027440:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8027444:	fb01 3104 	mla	r1, r1, r4, r3
 8027448:	00c3      	lsls	r3, r0, #3
 802744a:	00d2      	lsls	r2, r2, #3
 802744c:	b2db      	uxtb	r3, r3
 802744e:	b2d2      	uxtb	r2, r2
 8027450:	fb13 f30c 	smulbb	r3, r3, ip
 8027454:	b2ad      	uxth	r5, r5
 8027456:	fb02 3304 	mla	r3, r2, r4, r3
 802745a:	b29a      	uxth	r2, r3
 802745c:	1c6b      	adds	r3, r5, #1
 802745e:	b289      	uxth	r1, r1
 8027460:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027464:	1c53      	adds	r3, r2, #1
 8027466:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802746a:	1c4a      	adds	r2, r1, #1
 802746c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8027470:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8027474:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027478:	0949      	lsrs	r1, r1, #5
 802747a:	432b      	orrs	r3, r5
 802747c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027480:	430b      	orrs	r3, r1
 8027482:	803b      	strh	r3, [r7, #0]
 8027484:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8027486:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8027488:	4413      	add	r3, r2
 802748a:	9321      	str	r3, [sp, #132]	; 0x84
 802748c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 802748e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027490:	441a      	add	r2, r3
 8027492:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027494:	9222      	str	r2, [sp, #136]	; 0x88
 8027496:	3b01      	subs	r3, #1
 8027498:	3702      	adds	r7, #2
 802749a:	9313      	str	r3, [sp, #76]	; 0x4c
 802749c:	e689      	b.n	80271b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802749e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80274a0:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 80274a2:	9c22      	ldr	r4, [sp, #136]	; 0x88
 80274a4:	4433      	add	r3, r6
 80274a6:	9321      	str	r3, [sp, #132]	; 0x84
 80274a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80274aa:	441c      	add	r4, r3
 80274ac:	9b08      	ldr	r3, [sp, #32]
 80274ae:	9422      	str	r4, [sp, #136]	; 0x88
 80274b0:	3b01      	subs	r3, #1
 80274b2:	9308      	str	r3, [sp, #32]
 80274b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80274b6:	3302      	adds	r3, #2
 80274b8:	9309      	str	r3, [sp, #36]	; 0x24
 80274ba:	e658      	b.n	802716e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80274bc:	d028      	beq.n	8027510 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 80274be:	9b08      	ldr	r3, [sp, #32]
 80274c0:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80274c2:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80274c4:	3b01      	subs	r3, #1
 80274c6:	fb00 5003 	mla	r0, r0, r3, r5
 80274ca:	1400      	asrs	r0, r0, #16
 80274cc:	f53f ae6c 	bmi.w	80271a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80274d0:	3901      	subs	r1, #1
 80274d2:	4288      	cmp	r0, r1
 80274d4:	f6bf ae68 	bge.w	80271a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80274d8:	9924      	ldr	r1, [sp, #144]	; 0x90
 80274da:	9822      	ldr	r0, [sp, #136]	; 0x88
 80274dc:	fb01 0303 	mla	r3, r1, r3, r0
 80274e0:	141b      	asrs	r3, r3, #16
 80274e2:	f53f ae61 	bmi.w	80271a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80274e6:	3a01      	subs	r2, #1
 80274e8:	4293      	cmp	r3, r2
 80274ea:	f6bf ae5d 	bge.w	80271a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80274ee:	9b08      	ldr	r3, [sp, #32]
 80274f0:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 80274f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80274f6:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80274fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80274fc:	2b00      	cmp	r3, #0
 80274fe:	f300 8082 	bgt.w	8027606 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8027502:	9b08      	ldr	r3, [sp, #32]
 8027504:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802750a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802750e:	9309      	str	r3, [sp, #36]	; 0x24
 8027510:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8027512:	2b00      	cmp	r3, #0
 8027514:	f340 81ef 	ble.w	80278f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8027518:	ee30 0a04 	vadd.f32	s0, s0, s8
 802751c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027520:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027524:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027526:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802752a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802752e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027532:	eef0 6a62 	vmov.f32	s13, s5
 8027536:	ee61 7a27 	vmul.f32	s15, s2, s15
 802753a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802753e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027542:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 8027546:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802754a:	eef0 6a43 	vmov.f32	s13, s6
 802754e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027552:	ee12 2a90 	vmov	r2, s5
 8027556:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802755a:	fb92 f3f3 	sdiv	r3, r2, r3
 802755e:	ee13 2a10 	vmov	r2, s6
 8027562:	9323      	str	r3, [sp, #140]	; 0x8c
 8027564:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027566:	fb92 f3f3 	sdiv	r3, r2, r3
 802756a:	9324      	str	r3, [sp, #144]	; 0x90
 802756c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802756e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8027570:	3b01      	subs	r3, #1
 8027572:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027576:	9311      	str	r3, [sp, #68]	; 0x44
 8027578:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802757a:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 802757e:	bf08      	it	eq
 8027580:	4613      	moveq	r3, r2
 8027582:	9308      	str	r3, [sp, #32]
 8027584:	eeb0 3a67 	vmov.f32	s6, s15
 8027588:	eef0 2a47 	vmov.f32	s5, s14
 802758c:	e5e1      	b.n	8027152 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802758e:	fb08 f505 	mul.w	r5, r8, r5
 8027592:	fb09 5303 	mla	r3, r9, r3, r5
 8027596:	e661      	b.n	802725c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8027598:	4681      	mov	r9, r0
 802759a:	e688      	b.n	80272ae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 802759c:	f1c1 0210 	rsb	r2, r1, #16
 80275a0:	4341      	muls	r1, r0
 80275a2:	fb09 1902 	mla	r9, r9, r2, r1
 80275a6:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80275aa:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80275ae:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80275b2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80275b6:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80275ba:	ea42 0909 	orr.w	r9, r2, r9
 80275be:	fa1f f289 	uxth.w	r2, r9
 80275c2:	e71b      	b.n	80273fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80275c4:	803a      	strh	r2, [r7, #0]
 80275c6:	e75d      	b.n	8027484 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80275c8:	f115 0e01 	adds.w	lr, r5, #1
 80275cc:	f53f af5a 	bmi.w	8027484 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80275d0:	4572      	cmp	r2, lr
 80275d2:	f6ff af57 	blt.w	8027484 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80275d6:	f110 0e01 	adds.w	lr, r0, #1
 80275da:	f53f af53 	bmi.w	8027484 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80275de:	4573      	cmp	r3, lr
 80275e0:	f6ff af50 	blt.w	8027484 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80275e4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80275e6:	9502      	str	r5, [sp, #8]
 80275e8:	b21b      	sxth	r3, r3
 80275ea:	b212      	sxth	r2, r2
 80275ec:	e9cd 0103 	strd	r0, r1, [sp, #12]
 80275f0:	9301      	str	r3, [sp, #4]
 80275f2:	9200      	str	r2, [sp, #0]
 80275f4:	e9cd c405 	strd	ip, r4, [sp, #20]
 80275f8:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 80275fc:	4639      	mov	r1, r7
 80275fe:	9815      	ldr	r0, [sp, #84]	; 0x54
 8027600:	f7ff fc04 	bl	8026e0c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8027604:	e73e      	b.n	8027484 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8027606:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8027608:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802760c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802760e:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8027612:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027614:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027618:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802761a:	141f      	asrs	r7, r3, #16
 802761c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802761e:	141b      	asrs	r3, r3, #16
 8027620:	fb01 3707 	mla	r7, r1, r7, r3
 8027624:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027626:	fa1f fc82 	uxth.w	ip, r2
 802762a:	eb03 0a07 	add.w	sl, r3, r7
 802762e:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8027632:	f813 9007 	ldrb.w	r9, [r3, r7]
 8027636:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802763a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802763e:	b29b      	uxth	r3, r3
 8027640:	2d00      	cmp	r5, #0
 8027642:	f000 813d 	beq.w	80278c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8027646:	f81a 4001 	ldrb.w	r4, [sl, r1]
 802764a:	940f      	str	r4, [sp, #60]	; 0x3c
 802764c:	eb0a 0b01 	add.w	fp, sl, r1
 8027650:	fa1f fa85 	uxth.w	sl, r5
 8027654:	fb0a fc0c 	mul.w	ip, sl, ip
 8027658:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 802765c:	fa1f fa8a 	uxth.w	sl, sl
 8027660:	eba0 000c 	sub.w	r0, r0, ip
 8027664:	eba3 030a 	sub.w	r3, r3, sl
 8027668:	b280      	uxth	r0, r0
 802766a:	fb08 f000 	mul.w	r0, r8, r0
 802766e:	b29b      	uxth	r3, r3
 8027670:	fb09 0303 	mla	r3, r9, r3, r0
 8027674:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8027676:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802767a:	9410      	str	r4, [sp, #64]	; 0x40
 802767c:	fb0a 3300 	mla	r3, sl, r0, r3
 8027680:	fb0c 3304 	mla	r3, ip, r4, r3
 8027684:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027688:	2b00      	cmp	r3, #0
 802768a:	f000 810b 	beq.w	80278a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 802768e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8027690:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8027692:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027696:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 802769a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802769e:	f000 8114 	beq.w	80278ca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b2>
 80276a2:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80276a6:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80276aa:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80276ae:	fb09 f707 	mul.w	r7, r9, r7
 80276b2:	fb0a fc0c 	mul.w	ip, sl, ip
 80276b6:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80276ba:	f107 0b20 	add.w	fp, r7, #32
 80276be:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80276c2:	44cc      	add	ip, r9
 80276c4:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80276c8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80276cc:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80276d0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80276d4:	ea4c 0909 	orr.w	r9, ip, r9
 80276d8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80276dc:	8847      	ldrh	r7, [r0, #2]
 80276de:	d019      	beq.n	8027714 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fc>
 80276e0:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80276e4:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80276e8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80276ec:	fb08 f807 	mul.w	r8, r8, r7
 80276f0:	fb0a fc0c 	mul.w	ip, sl, ip
 80276f4:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80276f8:	f108 0b20 	add.w	fp, r8, #32
 80276fc:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8027700:	44bc      	add	ip, r7
 8027702:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8027706:	0a3f      	lsrs	r7, r7, #8
 8027708:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802770c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027710:	ea4c 0707 	orr.w	r7, ip, r7
 8027714:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8027718:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 802771c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8027720:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8027724:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027728:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 802772c:	ea4c 0909 	orr.w	r9, ip, r9
 8027730:	ea4a 0707 	orr.w	r7, sl, r7
 8027734:	2d00      	cmp	r5, #0
 8027736:	f000 80ca 	beq.w	80278ce <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 802773a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 802773e:	3901      	subs	r1, #1
 8027740:	0049      	lsls	r1, r1, #1
 8027742:	3102      	adds	r1, #2
 8027744:	eb00 0c01 	add.w	ip, r0, r1
 8027748:	5a41      	ldrh	r1, [r0, r1]
 802774a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802774c:	28ff      	cmp	r0, #255	; 0xff
 802774e:	d019      	beq.n	8027784 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66c>
 8027750:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8027752:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8027756:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802775a:	fb04 fa01 	mul.w	sl, r4, r1
 802775e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027762:	fb08 f800 	mul.w	r8, r8, r0
 8027766:	f10a 0020 	add.w	r0, sl, #32
 802776a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 802776e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8027772:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027776:	4441      	add	r1, r8
 8027778:	0a00      	lsrs	r0, r0, #8
 802777a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802777e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027782:	4301      	orrs	r1, r0
 8027784:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8027786:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 802778a:	2cff      	cmp	r4, #255	; 0xff
 802778c:	d01a      	beq.n	80277c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ac>
 802778e:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8027792:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027796:	fb04 fa00 	mul.w	sl, r4, r0
 802779a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802779e:	fb08 f80c 	mul.w	r8, r8, ip
 80277a2:	f10a 0c20 	add.w	ip, sl, #32
 80277a6:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 80277aa:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80277ae:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80277b2:	4440      	add	r0, r8
 80277b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80277b8:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80277bc:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80277c0:	ea40 000c 	orr.w	r0, r0, ip
 80277c4:	fb15 fc02 	smulbb	ip, r5, r2
 80277c8:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80277cc:	f1c5 0810 	rsb	r8, r5, #16
 80277d0:	eba8 0802 	sub.w	r8, r8, r2
 80277d4:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80277d8:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80277dc:	437a      	muls	r2, r7
 80277de:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80277e2:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 80277e6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80277ea:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80277ee:	fb09 2208 	mla	r2, r9, r8, r2
 80277f2:	ea4a 0101 	orr.w	r1, sl, r1
 80277f6:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80277fa:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80277fe:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027802:	fb05 2201 	mla	r2, r5, r1, r2
 8027806:	ea4b 0000 	orr.w	r0, fp, r0
 802780a:	fb0c 2200 	mla	r2, ip, r0, r2
 802780e:	0d57      	lsrs	r7, r2, #21
 8027810:	0952      	lsrs	r2, r2, #5
 8027812:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027816:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802781a:	433a      	orrs	r2, r7
 802781c:	2bff      	cmp	r3, #255	; 0xff
 802781e:	b292      	uxth	r2, r2
 8027820:	d102      	bne.n	8027828 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8027822:	9912      	ldr	r1, [sp, #72]	; 0x48
 8027824:	29ff      	cmp	r1, #255	; 0xff
 8027826:	d063      	beq.n	80278f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>
 8027828:	980a      	ldr	r0, [sp, #40]	; 0x28
 802782a:	f8be 1000 	ldrh.w	r1, [lr]
 802782e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8027830:	4343      	muls	r3, r0
 8027832:	1c58      	adds	r0, r3, #1
 8027834:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8027838:	ea6f 2323 	mvn.w	r3, r3, asr #8
 802783c:	1208      	asrs	r0, r1, #8
 802783e:	b2db      	uxtb	r3, r3
 8027840:	1215      	asrs	r5, r2, #8
 8027842:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8027846:	fb10 f003 	smulbb	r0, r0, r3
 802784a:	10cf      	asrs	r7, r1, #3
 802784c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8027850:	00c9      	lsls	r1, r1, #3
 8027852:	fb05 0504 	mla	r5, r5, r4, r0
 8027856:	b2c9      	uxtb	r1, r1
 8027858:	10d0      	asrs	r0, r2, #3
 802785a:	00d2      	lsls	r2, r2, #3
 802785c:	fb11 f103 	smulbb	r1, r1, r3
 8027860:	b2d2      	uxtb	r2, r2
 8027862:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8027866:	fb02 1204 	mla	r2, r2, r4, r1
 802786a:	fb17 f703 	smulbb	r7, r7, r3
 802786e:	b2ad      	uxth	r5, r5
 8027870:	b292      	uxth	r2, r2
 8027872:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8027876:	fb00 7004 	mla	r0, r0, r4, r7
 802787a:	1c6b      	adds	r3, r5, #1
 802787c:	1c57      	adds	r7, r2, #1
 802787e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027882:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8027886:	b280      	uxth	r0, r0
 8027888:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802788c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8027890:	433d      	orrs	r5, r7
 8027892:	1c47      	adds	r7, r0, #1
 8027894:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8027898:	097f      	lsrs	r7, r7, #5
 802789a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802789e:	433d      	orrs	r5, r7
 80278a0:	f8ae 5000 	strh.w	r5, [lr]
 80278a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80278a6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80278a8:	4413      	add	r3, r2
 80278aa:	9321      	str	r3, [sp, #132]	; 0x84
 80278ac:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80278ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80278b0:	441a      	add	r2, r3
 80278b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80278b4:	9222      	str	r2, [sp, #136]	; 0x88
 80278b6:	3b01      	subs	r3, #1
 80278b8:	f10e 0e02 	add.w	lr, lr, #2
 80278bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80278be:	e61c      	b.n	80274fa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 80278c0:	fb08 f000 	mul.w	r0, r8, r0
 80278c4:	fb09 0303 	mla	r3, r9, r3, r0
 80278c8:	e6dc      	b.n	8027684 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56c>
 80278ca:	46b9      	mov	r9, r7
 80278cc:	e704      	b.n	80276d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c0>
 80278ce:	f1c2 0110 	rsb	r1, r2, #16
 80278d2:	437a      	muls	r2, r7
 80278d4:	fb09 2901 	mla	r9, r9, r1, r2
 80278d8:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80278dc:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80278e0:	ea4f 1259 	mov.w	r2, r9, lsr #5
 80278e4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80278e8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80278ec:	4302      	orrs	r2, r0
 80278ee:	e795      	b.n	802781c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 80278f0:	f8ae 2000 	strh.w	r2, [lr]
 80278f4:	e7d6      	b.n	80278a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 80278f6:	b017      	add	sp, #92	; 0x5c
 80278f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080278fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 80278fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027900:	b085      	sub	sp, #20
 8027902:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8027906:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 802790a:	9103      	str	r1, [sp, #12]
 802790c:	fb00 7406 	mla	r4, r0, r6, r7
 8027910:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 8027914:	2800      	cmp	r0, #0
 8027916:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 802791a:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 802791e:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8027922:	9501      	str	r5, [sp, #4]
 8027924:	eb02 0904 	add.w	r9, r2, r4
 8027928:	f2c0 8141 	blt.w	8027bae <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 802792c:	4583      	cmp	fp, r0
 802792e:	f340 813e 	ble.w	8027bae <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8027932:	2f00      	cmp	r7, #0
 8027934:	f2c0 8137 	blt.w	8027ba6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8027938:	42be      	cmp	r6, r7
 802793a:	f340 8134 	ble.w	8027ba6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 802793e:	f812 c004 	ldrb.w	ip, [r2, r4]
 8027942:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8027946:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802794a:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 802794e:	4355      	muls	r5, r2
 8027950:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027954:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8027958:	fb0c f203 	mul.w	r2, ip, r3
 802795c:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8027960:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8027964:	441d      	add	r5, r3
 8027966:	f102 0320 	add.w	r3, r2, #32
 802796a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802796e:	0a1b      	lsrs	r3, r3, #8
 8027970:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8027974:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027978:	431c      	orrs	r4, r3
 802797a:	1c7b      	adds	r3, r7, #1
 802797c:	f100 811c 	bmi.w	8027bb8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8027980:	429e      	cmp	r6, r3
 8027982:	f340 8119 	ble.w	8027bb8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8027986:	2900      	cmp	r1, #0
 8027988:	f000 8119 	beq.w	8027bbe <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 802798c:	9a01      	ldr	r2, [sp, #4]
 802798e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8027992:	8855      	ldrh	r5, [r2, #2]
 8027994:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8027998:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 802799c:	fb08 f802 	mul.w	r8, r8, r2
 80279a0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80279a4:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80279a8:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 80279ac:	435d      	muls	r5, r3
 80279ae:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80279b2:	44d0      	add	r8, sl
 80279b4:	f105 0a20 	add.w	sl, r5, #32
 80279b8:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 80279bc:	0a2d      	lsrs	r5, r5, #8
 80279be:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 80279c2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80279c6:	432a      	orrs	r2, r5
 80279c8:	3001      	adds	r0, #1
 80279ca:	f100 80fe 	bmi.w	8027bca <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 80279ce:	4583      	cmp	fp, r0
 80279d0:	f340 80fb 	ble.w	8027bca <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 80279d4:	f1be 0f00 	cmp.w	lr, #0
 80279d8:	f000 80fc 	beq.w	8027bd4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 80279dc:	2f00      	cmp	r7, #0
 80279de:	f2c0 80f1 	blt.w	8027bc4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 80279e2:	42be      	cmp	r6, r7
 80279e4:	f340 80ee 	ble.w	8027bc4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 80279e8:	9801      	ldr	r0, [sp, #4]
 80279ea:	f819 5006 	ldrb.w	r5, [r9, r6]
 80279ee:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 80279f2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80279f6:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 80279fa:	fb0a fa00 	mul.w	sl, sl, r0
 80279fe:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8027a02:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8027a06:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8027a0a:	fb05 f808 	mul.w	r8, r5, r8
 8027a0e:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8027a12:	4482      	add	sl, r0
 8027a14:	f108 0020 	add.w	r0, r8, #32
 8027a18:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8027a1c:	0a00      	lsrs	r0, r0, #8
 8027a1e:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8027a22:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027a26:	ea4b 0b00 	orr.w	fp, fp, r0
 8027a2a:	3701      	adds	r7, #1
 8027a2c:	f100 80d7 	bmi.w	8027bde <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8027a30:	42be      	cmp	r6, r7
 8027a32:	f340 80d4 	ble.w	8027bde <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8027a36:	2900      	cmp	r1, #0
 8027a38:	f000 80d4 	beq.w	8027be4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 8027a3c:	3601      	adds	r6, #1
 8027a3e:	9801      	ldr	r0, [sp, #4]
 8027a40:	f819 7006 	ldrb.w	r7, [r9, r6]
 8027a44:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8027a48:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8027a4c:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 8027a50:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027a54:	fb09 f906 	mul.w	r9, r9, r6
 8027a58:	fb07 f800 	mul.w	r8, r7, r0
 8027a5c:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8027a60:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8027a64:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8027a68:	44d1      	add	r9, sl
 8027a6a:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8027a6e:	f108 0020 	add.w	r0, r8, #32
 8027a72:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8027a76:	0a00      	lsrs	r0, r0, #8
 8027a78:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027a7c:	4330      	orrs	r0, r6
 8027a7e:	b28e      	uxth	r6, r1
 8027a80:	fa1f f98e 	uxth.w	r9, lr
 8027a84:	fb06 f809 	mul.w	r8, r6, r9
 8027a88:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8027a8c:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8027a90:	0136      	lsls	r6, r6, #4
 8027a92:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027a96:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8027a9a:	9601      	str	r6, [sp, #4]
 8027a9c:	ea4a 0404 	orr.w	r4, sl, r4
 8027aa0:	fa1f f689 	uxth.w	r6, r9
 8027aa4:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8027aa8:	fb11 f90e 	smulbb	r9, r1, lr
 8027aac:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8027ab0:	9602      	str	r6, [sp, #8]
 8027ab2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027ab6:	4626      	mov	r6, r4
 8027ab8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027abc:	f1ce 0410 	rsb	r4, lr, #16
 8027ac0:	1a64      	subs	r4, r4, r1
 8027ac2:	ea4a 0202 	orr.w	r2, sl, r2
 8027ac6:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8027aca:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8027ace:	434a      	muls	r2, r1
 8027ad0:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8027ad4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027ad8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027adc:	fb04 2406 	mla	r4, r4, r6, r2
 8027ae0:	ea4a 0000 	orr.w	r0, sl, r0
 8027ae4:	fb09 4200 	mla	r2, r9, r0, r4
 8027ae8:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8027aec:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8027af0:	9801      	ldr	r0, [sp, #4]
 8027af2:	9903      	ldr	r1, [sp, #12]
 8027af4:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8027af8:	ea44 0b0b 	orr.w	fp, r4, fp
 8027afc:	9c02      	ldr	r4, [sp, #8]
 8027afe:	8809      	ldrh	r1, [r1, #0]
 8027b00:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8027b04:	1b00      	subs	r0, r0, r4
 8027b06:	9c01      	ldr	r4, [sp, #4]
 8027b08:	eba4 0608 	sub.w	r6, r4, r8
 8027b0c:	b2b6      	uxth	r6, r6
 8027b0e:	b280      	uxth	r0, r0
 8027b10:	4373      	muls	r3, r6
 8027b12:	fb0c 3300 	mla	r3, ip, r0, r3
 8027b16:	9802      	ldr	r0, [sp, #8]
 8027b18:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8027b1c:	fb00 3505 	mla	r5, r0, r5, r3
 8027b20:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8027b24:	fb08 5707 	mla	r7, r8, r7, r5
 8027b28:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8027b2c:	120b      	asrs	r3, r1, #8
 8027b2e:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8027b32:	ea6f 2727 	mvn.w	r7, r7, asr #8
 8027b36:	b2ff      	uxtb	r7, r7
 8027b38:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027b3c:	10c8      	asrs	r0, r1, #3
 8027b3e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8027b42:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8027b46:	00c9      	lsls	r1, r1, #3
 8027b48:	437b      	muls	r3, r7
 8027b4a:	ea42 0e0e 	orr.w	lr, r2, lr
 8027b4e:	b2c9      	uxtb	r1, r1
 8027b50:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8027b54:	fa1f f28e 	uxth.w	r2, lr
 8027b58:	4378      	muls	r0, r7
 8027b5a:	434f      	muls	r7, r1
 8027b5c:	1c59      	adds	r1, r3, #1
 8027b5e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8027b62:	1213      	asrs	r3, r2, #8
 8027b64:	f023 0307 	bic.w	r3, r3, #7
 8027b68:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8027b6c:	1c41      	adds	r1, r0, #1
 8027b6e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8027b72:	10d1      	asrs	r1, r2, #3
 8027b74:	f021 0103 	bic.w	r1, r1, #3
 8027b78:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8027b7c:	021b      	lsls	r3, r3, #8
 8027b7e:	00c9      	lsls	r1, r1, #3
 8027b80:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027b84:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8027b88:	430b      	orrs	r3, r1
 8027b8a:	1c79      	adds	r1, r7, #1
 8027b8c:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8027b90:	00d2      	lsls	r2, r2, #3
 8027b92:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8027b96:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8027b9a:	431a      	orrs	r2, r3
 8027b9c:	9b03      	ldr	r3, [sp, #12]
 8027b9e:	801a      	strh	r2, [r3, #0]
 8027ba0:	b005      	add	sp, #20
 8027ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027ba6:	f04f 0c00 	mov.w	ip, #0
 8027baa:	4664      	mov	r4, ip
 8027bac:	e6e5      	b.n	802797a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 8027bae:	2300      	movs	r3, #0
 8027bb0:	469c      	mov	ip, r3
 8027bb2:	461a      	mov	r2, r3
 8027bb4:	461c      	mov	r4, r3
 8027bb6:	e707      	b.n	80279c8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8027bb8:	2300      	movs	r3, #0
 8027bba:	461a      	mov	r2, r3
 8027bbc:	e704      	b.n	80279c8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8027bbe:	460b      	mov	r3, r1
 8027bc0:	460a      	mov	r2, r1
 8027bc2:	e701      	b.n	80279c8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8027bc4:	2500      	movs	r5, #0
 8027bc6:	46ab      	mov	fp, r5
 8027bc8:	e72f      	b.n	8027a2a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 8027bca:	2700      	movs	r7, #0
 8027bcc:	463d      	mov	r5, r7
 8027bce:	4638      	mov	r0, r7
 8027bd0:	46bb      	mov	fp, r7
 8027bd2:	e754      	b.n	8027a7e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8027bd4:	4677      	mov	r7, lr
 8027bd6:	4675      	mov	r5, lr
 8027bd8:	4670      	mov	r0, lr
 8027bda:	46f3      	mov	fp, lr
 8027bdc:	e74f      	b.n	8027a7e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8027bde:	2700      	movs	r7, #0
 8027be0:	4638      	mov	r0, r7
 8027be2:	e74c      	b.n	8027a7e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8027be4:	460f      	mov	r7, r1
 8027be6:	4608      	mov	r0, r1
 8027be8:	e749      	b.n	8027a7e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

08027bec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027bf0:	b093      	sub	sp, #76	; 0x4c
 8027bf2:	9210      	str	r2, [sp, #64]	; 0x40
 8027bf4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8027bf6:	910e      	str	r1, [sp, #56]	; 0x38
 8027bf8:	9306      	str	r3, [sp, #24]
 8027bfa:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8027bfe:	9011      	str	r0, [sp, #68]	; 0x44
 8027c00:	6850      	ldr	r0, [r2, #4]
 8027c02:	6812      	ldr	r2, [r2, #0]
 8027c04:	fb00 1303 	mla	r3, r0, r3, r1
 8027c08:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8027c0c:	9307      	str	r3, [sp, #28]
 8027c0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027c10:	681b      	ldr	r3, [r3, #0]
 8027c12:	9308      	str	r3, [sp, #32]
 8027c14:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027c16:	685b      	ldr	r3, [r3, #4]
 8027c18:	9309      	str	r3, [sp, #36]	; 0x24
 8027c1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027c1c:	2b00      	cmp	r3, #0
 8027c1e:	dc03      	bgt.n	8027c28 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8027c20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8027c22:	2b00      	cmp	r3, #0
 8027c24:	f340 83b4 	ble.w	8028390 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 8027c28:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027c2a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027c2e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027c32:	1e48      	subs	r0, r1, #1
 8027c34:	1e55      	subs	r5, r2, #1
 8027c36:	9b06      	ldr	r3, [sp, #24]
 8027c38:	2b00      	cmp	r3, #0
 8027c3a:	f340 8163 	ble.w	8027f04 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8027c3e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8027c40:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8027c42:	1436      	asrs	r6, r6, #16
 8027c44:	ea4f 4323 	mov.w	r3, r3, asr #16
 8027c48:	d406      	bmi.n	8027c58 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8027c4a:	4286      	cmp	r6, r0
 8027c4c:	da04      	bge.n	8027c58 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8027c4e:	2b00      	cmp	r3, #0
 8027c50:	db02      	blt.n	8027c58 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8027c52:	42ab      	cmp	r3, r5
 8027c54:	f2c0 8157 	blt.w	8027f06 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8027c58:	3601      	adds	r6, #1
 8027c5a:	f100 8144 	bmi.w	8027ee6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8027c5e:	42b1      	cmp	r1, r6
 8027c60:	f2c0 8141 	blt.w	8027ee6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8027c64:	3301      	adds	r3, #1
 8027c66:	f100 813e 	bmi.w	8027ee6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8027c6a:	429a      	cmp	r2, r3
 8027c6c:	f2c0 813b 	blt.w	8027ee6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8027c70:	9b06      	ldr	r3, [sp, #24]
 8027c72:	9f07      	ldr	r7, [sp, #28]
 8027c74:	930f      	str	r3, [sp, #60]	; 0x3c
 8027c76:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8027c7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027c7c:	2b00      	cmp	r3, #0
 8027c7e:	f340 8164 	ble.w	8027f4a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8027c82:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8027c84:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8027c86:	1418      	asrs	r0, r3, #16
 8027c88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027c8a:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8027c8e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8027c90:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8027c94:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027c96:	142d      	asrs	r5, r5, #16
 8027c98:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8027c9c:	f100 81ee 	bmi.w	802807c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8027ca0:	f102 3eff 	add.w	lr, r2, #4294967295
 8027ca4:	4575      	cmp	r5, lr
 8027ca6:	f280 81e9 	bge.w	802807c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8027caa:	2800      	cmp	r0, #0
 8027cac:	f2c0 81e6 	blt.w	802807c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8027cb0:	f103 3eff 	add.w	lr, r3, #4294967295
 8027cb4:	4570      	cmp	r0, lr
 8027cb6:	f280 81e1 	bge.w	802807c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8027cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027cbc:	b212      	sxth	r2, r2
 8027cbe:	fb00 5002 	mla	r0, r0, r2, r5
 8027cc2:	fa1f fe81 	uxth.w	lr, r1
 8027cc6:	eb03 0a00 	add.w	sl, r3, r0
 8027cca:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8027cce:	f813 9000 	ldrb.w	r9, [r3, r0]
 8027cd2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8027cd6:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8027cda:	b29b      	uxth	r3, r3
 8027cdc:	f1bc 0f00 	cmp.w	ip, #0
 8027ce0:	f000 8179 	beq.w	8027fd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8027ce4:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8027ce8:	940a      	str	r4, [sp, #40]	; 0x28
 8027cea:	eb0a 0b02 	add.w	fp, sl, r2
 8027cee:	fa1f fa8c 	uxth.w	sl, ip
 8027cf2:	fb0a fe0e 	mul.w	lr, sl, lr
 8027cf6:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8027cfa:	fa1f fa8a 	uxth.w	sl, sl
 8027cfe:	eba5 050e 	sub.w	r5, r5, lr
 8027d02:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8027d06:	940b      	str	r4, [sp, #44]	; 0x2c
 8027d08:	eba3 030a 	sub.w	r3, r3, sl
 8027d0c:	b2ad      	uxth	r5, r5
 8027d0e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8027d10:	b29b      	uxth	r3, r3
 8027d12:	fb08 f505 	mul.w	r5, r8, r5
 8027d16:	fb09 5303 	mla	r3, r9, r3, r5
 8027d1a:	fb0a 3304 	mla	r3, sl, r4, r3
 8027d1e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8027d20:	fb0e 3304 	mla	r3, lr, r4, r3
 8027d24:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027d28:	2b00      	cmp	r3, #0
 8027d2a:	f000 80cf 	beq.w	8027ecc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8027d2e:	9c08      	ldr	r4, [sp, #32]
 8027d30:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027d34:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8027d38:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8027d3c:	f000 8150 	beq.w	8027fe0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8027d40:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8027d44:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8027d48:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027d4c:	fb09 f000 	mul.w	r0, r9, r0
 8027d50:	fb0a fe0e 	mul.w	lr, sl, lr
 8027d54:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8027d58:	f100 0b20 	add.w	fp, r0, #32
 8027d5c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8027d60:	44ce      	add	lr, r9
 8027d62:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8027d66:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027d6a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8027d6e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8027d72:	ea4e 0909 	orr.w	r9, lr, r9
 8027d76:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8027d7a:	8868      	ldrh	r0, [r5, #2]
 8027d7c:	d019      	beq.n	8027db2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8027d7e:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8027d82:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8027d86:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027d8a:	fb08 f800 	mul.w	r8, r8, r0
 8027d8e:	fb0a fe0e 	mul.w	lr, sl, lr
 8027d92:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8027d96:	f108 0b20 	add.w	fp, r8, #32
 8027d9a:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8027d9e:	4486      	add	lr, r0
 8027da0:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8027da4:	0a00      	lsrs	r0, r0, #8
 8027da6:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8027daa:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027dae:	ea4e 0000 	orr.w	r0, lr, r0
 8027db2:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8027db6:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8027dba:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8027dbe:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8027dc2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027dc6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027dca:	ea4e 0909 	orr.w	r9, lr, r9
 8027dce:	ea4a 0000 	orr.w	r0, sl, r0
 8027dd2:	f1bc 0f00 	cmp.w	ip, #0
 8027dd6:	f000 8105 	beq.w	8027fe4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8027dda:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8027dde:	3a01      	subs	r2, #1
 8027de0:	0052      	lsls	r2, r2, #1
 8027de2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8027de4:	3202      	adds	r2, #2
 8027de6:	2cff      	cmp	r4, #255	; 0xff
 8027de8:	eb05 0e02 	add.w	lr, r5, r2
 8027dec:	5aaa      	ldrh	r2, [r5, r2]
 8027dee:	d018      	beq.n	8027e22 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8027df0:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8027df4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027df8:	fb04 fa02 	mul.w	sl, r4, r2
 8027dfc:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027e00:	fb08 f805 	mul.w	r8, r8, r5
 8027e04:	f10a 0520 	add.w	r5, sl, #32
 8027e08:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8027e0c:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8027e10:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027e14:	4442      	add	r2, r8
 8027e16:	0a2d      	lsrs	r5, r5, #8
 8027e18:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8027e1c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8027e20:	432a      	orrs	r2, r5
 8027e22:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8027e24:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8027e28:	2cff      	cmp	r4, #255	; 0xff
 8027e2a:	d01a      	beq.n	8027e62 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8027e2c:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8027e30:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8027e34:	fb04 fa05 	mul.w	sl, r4, r5
 8027e38:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027e3c:	fb08 f80e 	mul.w	r8, r8, lr
 8027e40:	f10a 0e20 	add.w	lr, sl, #32
 8027e44:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8027e48:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8027e4c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027e50:	4445      	add	r5, r8
 8027e52:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027e56:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8027e5a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8027e5e:	ea45 050e 	orr.w	r5, r5, lr
 8027e62:	fb1c fe01 	smulbb	lr, ip, r1
 8027e66:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8027e6a:	f1cc 0810 	rsb	r8, ip, #16
 8027e6e:	eba8 0801 	sub.w	r8, r8, r1
 8027e72:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8027e76:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8027e7a:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8027e7e:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8027e82:	4341      	muls	r1, r0
 8027e84:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027e88:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027e8c:	ea4a 0202 	orr.w	r2, sl, r2
 8027e90:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8027e94:	fb09 1108 	mla	r1, r9, r8, r1
 8027e98:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027e9c:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8027ea0:	fb0c 1102 	mla	r1, ip, r2, r1
 8027ea4:	ea4b 0505 	orr.w	r5, fp, r5
 8027ea8:	fb0e 1e05 	mla	lr, lr, r5, r1
 8027eac:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8027eb0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8027eb4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027eb8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8027ebc:	ea42 0e0e 	orr.w	lr, r2, lr
 8027ec0:	fa1f f28e 	uxth.w	r2, lr
 8027ec4:	2bff      	cmp	r3, #255	; 0xff
 8027ec6:	f040 80a1 	bne.w	802800c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8027eca:	803a      	strh	r2, [r7, #0]
 8027ecc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027ece:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8027ed0:	4413      	add	r3, r2
 8027ed2:	931d      	str	r3, [sp, #116]	; 0x74
 8027ed4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8027ed6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027ed8:	441a      	add	r2, r3
 8027eda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027edc:	921e      	str	r2, [sp, #120]	; 0x78
 8027ede:	3b01      	subs	r3, #1
 8027ee0:	3702      	adds	r7, #2
 8027ee2:	930f      	str	r3, [sp, #60]	; 0x3c
 8027ee4:	e6c9      	b.n	8027c7a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027ee6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027ee8:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8027eea:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8027eec:	4433      	add	r3, r6
 8027eee:	931d      	str	r3, [sp, #116]	; 0x74
 8027ef0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027ef2:	441c      	add	r4, r3
 8027ef4:	9b06      	ldr	r3, [sp, #24]
 8027ef6:	941e      	str	r4, [sp, #120]	; 0x78
 8027ef8:	3b01      	subs	r3, #1
 8027efa:	9306      	str	r3, [sp, #24]
 8027efc:	9b07      	ldr	r3, [sp, #28]
 8027efe:	3302      	adds	r3, #2
 8027f00:	9307      	str	r3, [sp, #28]
 8027f02:	e698      	b.n	8027c36 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8027f04:	d028      	beq.n	8027f58 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8027f06:	9b06      	ldr	r3, [sp, #24]
 8027f08:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8027f0a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8027f0c:	3b01      	subs	r3, #1
 8027f0e:	fb00 5003 	mla	r0, r0, r3, r5
 8027f12:	1400      	asrs	r0, r0, #16
 8027f14:	f53f aeac 	bmi.w	8027c70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8027f18:	3901      	subs	r1, #1
 8027f1a:	4288      	cmp	r0, r1
 8027f1c:	f6bf aea8 	bge.w	8027c70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8027f20:	9920      	ldr	r1, [sp, #128]	; 0x80
 8027f22:	981e      	ldr	r0, [sp, #120]	; 0x78
 8027f24:	fb01 0303 	mla	r3, r1, r3, r0
 8027f28:	141b      	asrs	r3, r3, #16
 8027f2a:	f53f aea1 	bmi.w	8027c70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8027f2e:	3a01      	subs	r2, #1
 8027f30:	4293      	cmp	r3, r2
 8027f32:	f6bf ae9d 	bge.w	8027c70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8027f36:	9b06      	ldr	r3, [sp, #24]
 8027f38:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8027f3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8027f3e:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8027f42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027f44:	2b00      	cmp	r3, #0
 8027f46:	f300 80b6 	bgt.w	80280b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ca>
 8027f4a:	9b06      	ldr	r3, [sp, #24]
 8027f4c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027f50:	9b07      	ldr	r3, [sp, #28]
 8027f52:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8027f56:	9307      	str	r3, [sp, #28]
 8027f58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027f5a:	2b00      	cmp	r3, #0
 8027f5c:	f340 8218 	ble.w	8028390 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 8027f60:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027f64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027f68:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027f6c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8027f6e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027f72:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027f76:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027f7a:	eef0 6a62 	vmov.f32	s13, s5
 8027f7e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027f82:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027f86:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027f8a:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8027f8e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027f92:	eef0 6a43 	vmov.f32	s13, s6
 8027f96:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027f9a:	ee12 2a90 	vmov	r2, s5
 8027f9e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027fa2:	fb92 f3f3 	sdiv	r3, r2, r3
 8027fa6:	ee13 2a10 	vmov	r2, s6
 8027faa:	931f      	str	r3, [sp, #124]	; 0x7c
 8027fac:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8027fae:	fb92 f3f3 	sdiv	r3, r2, r3
 8027fb2:	9320      	str	r3, [sp, #128]	; 0x80
 8027fb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027fb6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027fb8:	3b01      	subs	r3, #1
 8027fba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027fbe:	930e      	str	r3, [sp, #56]	; 0x38
 8027fc0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8027fc2:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 8027fc6:	bf08      	it	eq
 8027fc8:	4613      	moveq	r3, r2
 8027fca:	9306      	str	r3, [sp, #24]
 8027fcc:	eeb0 3a67 	vmov.f32	s6, s15
 8027fd0:	eef0 2a47 	vmov.f32	s5, s14
 8027fd4:	e621      	b.n	8027c1a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8027fd6:	fb08 f505 	mul.w	r5, r8, r5
 8027fda:	fb09 5303 	mla	r3, r9, r3, r5
 8027fde:	e6a1      	b.n	8027d24 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8027fe0:	4681      	mov	r9, r0
 8027fe2:	e6c8      	b.n	8027d76 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8027fe4:	f1c1 0210 	rsb	r2, r1, #16
 8027fe8:	4341      	muls	r1, r0
 8027fea:	fb09 1902 	mla	r9, r9, r2, r1
 8027fee:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027ff2:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8027ff6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8027ffa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027ffe:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8028002:	ea42 0909 	orr.w	r9, r2, r9
 8028006:	fa1f f289 	uxth.w	r2, r9
 802800a:	e75b      	b.n	8027ec4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 802800c:	f8b7 c000 	ldrh.w	ip, [r7]
 8028010:	43db      	mvns	r3, r3
 8028012:	ea4f 202c 	mov.w	r0, ip, asr #8
 8028016:	fa5f fe83 	uxtb.w	lr, r3
 802801a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802801e:	fb00 f00e 	mul.w	r0, r0, lr
 8028022:	1c41      	adds	r1, r0, #1
 8028024:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8028028:	1211      	asrs	r1, r2, #8
 802802a:	ea4f 05ec 	mov.w	r5, ip, asr #3
 802802e:	f021 0107 	bic.w	r1, r1, #7
 8028032:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8028036:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802803a:	48d7      	ldr	r0, [pc, #860]	; (8028398 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 802803c:	fb05 f50e 	mul.w	r5, r5, lr
 8028040:	b2c9      	uxtb	r1, r1
 8028042:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8028046:	1c69      	adds	r1, r5, #1
 8028048:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 802804c:	10d1      	asrs	r1, r2, #3
 802804e:	f021 0103 	bic.w	r1, r1, #3
 8028052:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8028056:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 802805a:	b2db      	uxtb	r3, r3
 802805c:	00c9      	lsls	r1, r1, #3
 802805e:	fb03 f30e 	mul.w	r3, r3, lr
 8028062:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8028066:	4301      	orrs	r1, r0
 8028068:	1c58      	adds	r0, r3, #1
 802806a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802806e:	00d2      	lsls	r2, r2, #3
 8028070:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8028074:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8028078:	430a      	orrs	r2, r1
 802807a:	e726      	b.n	8027eca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2de>
 802807c:	f115 0e01 	adds.w	lr, r5, #1
 8028080:	f53f af24 	bmi.w	8027ecc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8028084:	4572      	cmp	r2, lr
 8028086:	f6ff af21 	blt.w	8027ecc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802808a:	f110 0e01 	adds.w	lr, r0, #1
 802808e:	f53f af1d 	bmi.w	8027ecc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8028092:	4573      	cmp	r3, lr
 8028094:	f6ff af1a 	blt.w	8027ecc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8028098:	b21b      	sxth	r3, r3
 802809a:	b212      	sxth	r2, r2
 802809c:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 80280a0:	e9cd 5002 	strd	r5, r0, [sp, #8]
 80280a4:	9301      	str	r3, [sp, #4]
 80280a6:	9200      	str	r2, [sp, #0]
 80280a8:	4639      	mov	r1, r7
 80280aa:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80280ae:	9811      	ldr	r0, [sp, #68]	; 0x44
 80280b0:	f7ff fc24 	bl	80278fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80280b4:	e70a      	b.n	8027ecc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80280b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80280b8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80280bc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80280be:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80280c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80280c4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80280c8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80280ca:	141f      	asrs	r7, r3, #16
 80280cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80280ce:	141b      	asrs	r3, r3, #16
 80280d0:	fb01 3707 	mla	r7, r1, r7, r3
 80280d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80280d6:	fa1f fc82 	uxth.w	ip, r2
 80280da:	eb03 0a07 	add.w	sl, r3, r7
 80280de:	ea4f 100c 	mov.w	r0, ip, lsl #4
 80280e2:	f813 9007 	ldrb.w	r9, [r3, r7]
 80280e6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80280ea:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80280ee:	b29b      	uxth	r3, r3
 80280f0:	2d00      	cmp	r5, #0
 80280f2:	f000 80fe 	beq.w	80282f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 80280f6:	f81a 4001 	ldrb.w	r4, [sl, r1]
 80280fa:	940c      	str	r4, [sp, #48]	; 0x30
 80280fc:	eb0a 0b01 	add.w	fp, sl, r1
 8028100:	fa1f fa85 	uxth.w	sl, r5
 8028104:	fb0a fc0c 	mul.w	ip, sl, ip
 8028108:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 802810c:	fa1f fa8a 	uxth.w	sl, sl
 8028110:	eba0 000c 	sub.w	r0, r0, ip
 8028114:	eba3 030a 	sub.w	r3, r3, sl
 8028118:	b280      	uxth	r0, r0
 802811a:	fb08 f000 	mul.w	r0, r8, r0
 802811e:	b29b      	uxth	r3, r3
 8028120:	fb09 0303 	mla	r3, r9, r3, r0
 8028124:	980c      	ldr	r0, [sp, #48]	; 0x30
 8028126:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802812a:	940d      	str	r4, [sp, #52]	; 0x34
 802812c:	fb0a 3300 	mla	r3, sl, r0, r3
 8028130:	fb0c 3304 	mla	r3, ip, r4, r3
 8028134:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028138:	2b00      	cmp	r3, #0
 802813a:	f000 80cc 	beq.w	80282d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 802813e:	9808      	ldr	r0, [sp, #32]
 8028140:	9c08      	ldr	r4, [sp, #32]
 8028142:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8028146:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 802814a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802814e:	f000 80d5 	beq.w	80282fc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8028152:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8028156:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802815a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802815e:	fb09 f707 	mul.w	r7, r9, r7
 8028162:	fb0a fc0c 	mul.w	ip, sl, ip
 8028166:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 802816a:	f107 0b20 	add.w	fp, r7, #32
 802816e:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8028172:	44cc      	add	ip, r9
 8028174:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8028178:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802817c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8028180:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8028184:	ea4c 0909 	orr.w	r9, ip, r9
 8028188:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802818c:	8847      	ldrh	r7, [r0, #2]
 802818e:	d019      	beq.n	80281c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d8>
 8028190:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8028194:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8028198:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802819c:	fb08 f807 	mul.w	r8, r8, r7
 80281a0:	fb0a fc0c 	mul.w	ip, sl, ip
 80281a4:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80281a8:	f108 0b20 	add.w	fp, r8, #32
 80281ac:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80281b0:	44bc      	add	ip, r7
 80281b2:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80281b6:	0a3f      	lsrs	r7, r7, #8
 80281b8:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80281bc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80281c0:	ea4c 0707 	orr.w	r7, ip, r7
 80281c4:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80281c8:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80281cc:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80281d0:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80281d4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80281d8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80281dc:	ea4c 0909 	orr.w	r9, ip, r9
 80281e0:	ea4a 0707 	orr.w	r7, sl, r7
 80281e4:	2d00      	cmp	r5, #0
 80281e6:	f000 808b 	beq.w	8028300 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 80281ea:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80281ee:	3901      	subs	r1, #1
 80281f0:	0049      	lsls	r1, r1, #1
 80281f2:	3102      	adds	r1, #2
 80281f4:	eb00 0c01 	add.w	ip, r0, r1
 80281f8:	5a41      	ldrh	r1, [r0, r1]
 80281fa:	980c      	ldr	r0, [sp, #48]	; 0x30
 80281fc:	28ff      	cmp	r0, #255	; 0xff
 80281fe:	d019      	beq.n	8028234 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x648>
 8028200:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8028202:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8028206:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802820a:	fb04 fa01 	mul.w	sl, r4, r1
 802820e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8028212:	fb08 f800 	mul.w	r8, r8, r0
 8028216:	f10a 0020 	add.w	r0, sl, #32
 802821a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 802821e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8028222:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8028226:	4441      	add	r1, r8
 8028228:	0a00      	lsrs	r0, r0, #8
 802822a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802822e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028232:	4301      	orrs	r1, r0
 8028234:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8028236:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 802823a:	2cff      	cmp	r4, #255	; 0xff
 802823c:	d01a      	beq.n	8028274 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x688>
 802823e:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8028242:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028246:	fb04 fa00 	mul.w	sl, r4, r0
 802824a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802824e:	fb08 f80c 	mul.w	r8, r8, ip
 8028252:	f10a 0c20 	add.w	ip, sl, #32
 8028256:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 802825a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 802825e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8028262:	4440      	add	r0, r8
 8028264:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028268:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 802826c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8028270:	ea40 000c 	orr.w	r0, r0, ip
 8028274:	fb15 fc02 	smulbb	ip, r5, r2
 8028278:	ea4f 0cec 	mov.w	ip, ip, asr #3
 802827c:	f1c5 0810 	rsb	r8, r5, #16
 8028280:	eba8 0802 	sub.w	r8, r8, r2
 8028284:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8028288:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 802828c:	437a      	muls	r2, r7
 802828e:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8028292:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8028296:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802829a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802829e:	fb09 2208 	mla	r2, r9, r8, r2
 80282a2:	ea4a 0101 	orr.w	r1, sl, r1
 80282a6:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80282aa:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80282ae:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80282b2:	fb05 2201 	mla	r2, r5, r1, r2
 80282b6:	ea4b 0000 	orr.w	r0, fp, r0
 80282ba:	fb0c 2200 	mla	r2, ip, r0, r2
 80282be:	0d57      	lsrs	r7, r2, #21
 80282c0:	0952      	lsrs	r2, r2, #5
 80282c2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80282c6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80282ca:	433a      	orrs	r2, r7
 80282cc:	2bff      	cmp	r3, #255	; 0xff
 80282ce:	b292      	uxth	r2, r2
 80282d0:	d127      	bne.n	8028322 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 80282d2:	f8ae 2000 	strh.w	r2, [lr]
 80282d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80282d8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80282da:	4413      	add	r3, r2
 80282dc:	931d      	str	r3, [sp, #116]	; 0x74
 80282de:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80282e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80282e2:	441a      	add	r2, r3
 80282e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80282e6:	921e      	str	r2, [sp, #120]	; 0x78
 80282e8:	3b01      	subs	r3, #1
 80282ea:	f10e 0e02 	add.w	lr, lr, #2
 80282ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80282f0:	e627      	b.n	8027f42 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80282f2:	fb08 f000 	mul.w	r0, r8, r0
 80282f6:	fb09 0303 	mla	r3, r9, r3, r0
 80282fa:	e71b      	b.n	8028134 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x548>
 80282fc:	46b9      	mov	r9, r7
 80282fe:	e743      	b.n	8028188 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59c>
 8028300:	f1c2 0110 	rsb	r1, r2, #16
 8028304:	437a      	muls	r2, r7
 8028306:	fb09 2901 	mla	r9, r9, r1, r2
 802830a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802830e:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8028312:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8028316:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802831a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802831e:	4302      	orrs	r2, r0
 8028320:	e7d4      	b.n	80282cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8028322:	f8be 7000 	ldrh.w	r7, [lr]
 8028326:	4c1c      	ldr	r4, [pc, #112]	; (8028398 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 8028328:	43db      	mvns	r3, r3
 802832a:	1238      	asrs	r0, r7, #8
 802832c:	fa5f fc83 	uxtb.w	ip, r3
 8028330:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028334:	10fd      	asrs	r5, r7, #3
 8028336:	fb00 f00c 	mul.w	r0, r0, ip
 802833a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802833e:	fb05 f10c 	mul.w	r1, r5, ip
 8028342:	1c45      	adds	r5, r0, #1
 8028344:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8028348:	1215      	asrs	r5, r2, #8
 802834a:	f025 0507 	bic.w	r5, r5, #7
 802834e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8028352:	1c4d      	adds	r5, r1, #1
 8028354:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8028358:	10d1      	asrs	r1, r2, #3
 802835a:	f021 0103 	bic.w	r1, r1, #3
 802835e:	00fb      	lsls	r3, r7, #3
 8028360:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8028364:	b2db      	uxtb	r3, r3
 8028366:	b2c0      	uxtb	r0, r0
 8028368:	00c9      	lsls	r1, r1, #3
 802836a:	fb03 f30c 	mul.w	r3, r3, ip
 802836e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8028372:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8028376:	4308      	orrs	r0, r1
 8028378:	1c59      	adds	r1, r3, #1
 802837a:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802837e:	00d2      	lsls	r2, r2, #3
 8028380:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028384:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8028388:	4318      	orrs	r0, r3
 802838a:	f8ae 0000 	strh.w	r0, [lr]
 802838e:	e7a2      	b.n	80282d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 8028390:	b013      	add	sp, #76	; 0x4c
 8028392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028396:	bf00      	nop
 8028398:	fffff800 	.word	0xfffff800

0802839c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 802839c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80283a0:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 80283a4:	fb05 4c03 	mla	ip, r5, r3, r4
 80283a8:	2d00      	cmp	r5, #0
 80283aa:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 80283ae:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 80283b2:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 80283b6:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 80283ba:	8808      	ldrh	r0, [r1, #0]
 80283bc:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 80283c0:	f2c0 80a7 	blt.w	8028512 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 80283c4:	45aa      	cmp	sl, r5
 80283c6:	f340 80a4 	ble.w	8028512 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 80283ca:	2c00      	cmp	r4, #0
 80283cc:	f2c0 809f 	blt.w	802850e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 80283d0:	42a3      	cmp	r3, r4
 80283d2:	f340 809c 	ble.w	802850e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 80283d6:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 80283da:	1c62      	adds	r2, r4, #1
 80283dc:	f100 809c 	bmi.w	8028518 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 80283e0:	4293      	cmp	r3, r2
 80283e2:	f340 8099 	ble.w	8028518 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 80283e6:	f1b9 0f00 	cmp.w	r9, #0
 80283ea:	f000 8095 	beq.w	8028518 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 80283ee:	f8be c002 	ldrh.w	ip, [lr, #2]
 80283f2:	3501      	adds	r5, #1
 80283f4:	f100 8094 	bmi.w	8028520 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 80283f8:	45aa      	cmp	sl, r5
 80283fa:	f340 8091 	ble.w	8028520 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 80283fe:	2f00      	cmp	r7, #0
 8028400:	f000 808e 	beq.w	8028520 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8028404:	2c00      	cmp	r4, #0
 8028406:	f2c0 8089 	blt.w	802851c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 802840a:	42a3      	cmp	r3, r4
 802840c:	f340 8086 	ble.w	802851c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8028410:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 8028414:	3401      	adds	r4, #1
 8028416:	f100 8086 	bmi.w	8028526 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 802841a:	42a3      	cmp	r3, r4
 802841c:	f340 8083 	ble.w	8028526 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8028420:	f1b9 0f00 	cmp.w	r9, #0
 8028424:	d07f      	beq.n	8028526 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8028426:	3301      	adds	r3, #1
 8028428:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 802842c:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8028430:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8028434:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8028438:	fb19 fe07 	smulbb	lr, r9, r7
 802843c:	ea44 0808 	orr.w	r8, r4, r8
 8028440:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8028444:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8028448:	f1c7 0210 	rsb	r2, r7, #16
 802844c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8028450:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8028454:	ea44 0c0c 	orr.w	ip, r4, ip
 8028458:	eba2 0209 	sub.w	r2, r2, r9
 802845c:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8028460:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8028464:	fb04 f40c 	mul.w	r4, r4, ip
 8028468:	fb02 4808 	mla	r8, r2, r8, r4
 802846c:	041a      	lsls	r2, r3, #16
 802846e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8028472:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8028476:	4313      	orrs	r3, r2
 8028478:	042a      	lsls	r2, r5, #16
 802847a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802847e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8028482:	fb0e 8303 	mla	r3, lr, r3, r8
 8028486:	432a      	orrs	r2, r5
 8028488:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 802848c:	fb07 3202 	mla	r2, r7, r2, r3
 8028490:	0d53      	lsrs	r3, r2, #21
 8028492:	0952      	lsrs	r2, r2, #5
 8028494:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028498:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802849c:	431a      	orrs	r2, r3
 802849e:	b293      	uxth	r3, r2
 80284a0:	b2b4      	uxth	r4, r6
 80284a2:	1202      	asrs	r2, r0, #8
 80284a4:	43f6      	mvns	r6, r6
 80284a6:	b2f6      	uxtb	r6, r6
 80284a8:	121d      	asrs	r5, r3, #8
 80284aa:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80284ae:	fb12 f206 	smulbb	r2, r2, r6
 80284b2:	10c7      	asrs	r7, r0, #3
 80284b4:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80284b8:	00c0      	lsls	r0, r0, #3
 80284ba:	fb05 2504 	mla	r5, r5, r4, r2
 80284be:	b2c0      	uxtb	r0, r0
 80284c0:	10da      	asrs	r2, r3, #3
 80284c2:	00db      	lsls	r3, r3, #3
 80284c4:	b2db      	uxtb	r3, r3
 80284c6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80284ca:	fb10 f006 	smulbb	r0, r0, r6
 80284ce:	b2ad      	uxth	r5, r5
 80284d0:	fb03 0004 	mla	r0, r3, r4, r0
 80284d4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80284d8:	fb17 f706 	smulbb	r7, r7, r6
 80284dc:	b280      	uxth	r0, r0
 80284de:	1c6b      	adds	r3, r5, #1
 80284e0:	fb02 7204 	mla	r2, r2, r4, r7
 80284e4:	b292      	uxth	r2, r2
 80284e6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80284ea:	1c43      	adds	r3, r0, #1
 80284ec:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80284f0:	1c50      	adds	r0, r2, #1
 80284f2:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80284f6:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80284fa:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80284fe:	0952      	lsrs	r2, r2, #5
 8028500:	432b      	orrs	r3, r5
 8028502:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028506:	4313      	orrs	r3, r2
 8028508:	800b      	strh	r3, [r1, #0]
 802850a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802850e:	4680      	mov	r8, r0
 8028510:	e763      	b.n	80283da <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 8028512:	4684      	mov	ip, r0
 8028514:	4680      	mov	r8, r0
 8028516:	e76c      	b.n	80283f2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8028518:	4684      	mov	ip, r0
 802851a:	e76a      	b.n	80283f2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 802851c:	4605      	mov	r5, r0
 802851e:	e779      	b.n	8028414 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 8028520:	4603      	mov	r3, r0
 8028522:	4605      	mov	r5, r0
 8028524:	e782      	b.n	802842c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 8028526:	4603      	mov	r3, r0
 8028528:	e780      	b.n	802842c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

0802852a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802852a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802852e:	b093      	sub	sp, #76	; 0x4c
 8028530:	461d      	mov	r5, r3
 8028532:	9210      	str	r2, [sp, #64]	; 0x40
 8028534:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8028536:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 802853a:	920b      	str	r2, [sp, #44]	; 0x2c
 802853c:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 8028540:	910a      	str	r1, [sp, #40]	; 0x28
 8028542:	6859      	ldr	r1, [r3, #4]
 8028544:	681b      	ldr	r3, [r3, #0]
 8028546:	9011      	str	r0, [sp, #68]	; 0x44
 8028548:	fb01 2707 	mla	r7, r1, r7, r2
 802854c:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8028550:	9307      	str	r3, [sp, #28]
 8028552:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028554:	681b      	ldr	r3, [r3, #0]
 8028556:	9309      	str	r3, [sp, #36]	; 0x24
 8028558:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802855a:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 802855e:	43db      	mvns	r3, r3
 8028560:	b2db      	uxtb	r3, r3
 8028562:	9308      	str	r3, [sp, #32]
 8028564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028566:	2b00      	cmp	r3, #0
 8028568:	dc03      	bgt.n	8028572 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802856a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802856c:	2b00      	cmp	r3, #0
 802856e:	f340 8203 	ble.w	8028978 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8028572:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028574:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028578:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802857c:	1e48      	subs	r0, r1, #1
 802857e:	f102 3cff 	add.w	ip, r2, #4294967295
 8028582:	2d00      	cmp	r5, #0
 8028584:	f340 80da 	ble.w	802873c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8028588:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802858c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028590:	d406      	bmi.n	80285a0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8028592:	4586      	cmp	lr, r0
 8028594:	da04      	bge.n	80285a0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8028596:	2b00      	cmp	r3, #0
 8028598:	db02      	blt.n	80285a0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802859a:	4563      	cmp	r3, ip
 802859c:	f2c0 80cf 	blt.w	802873e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80285a0:	f11e 0e01 	adds.w	lr, lr, #1
 80285a4:	f100 80c1 	bmi.w	802872a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80285a8:	4571      	cmp	r1, lr
 80285aa:	f2c0 80be 	blt.w	802872a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80285ae:	3301      	adds	r3, #1
 80285b0:	f100 80bb 	bmi.w	802872a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80285b4:	429a      	cmp	r2, r3
 80285b6:	f2c0 80b8 	blt.w	802872a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80285ba:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80285be:	46a9      	mov	r9, r5
 80285c0:	f1b9 0f00 	cmp.w	r9, #0
 80285c4:	f340 80d8 	ble.w	8028778 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 80285c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80285ca:	1421      	asrs	r1, r4, #16
 80285cc:	ea4f 4026 	mov.w	r0, r6, asr #16
 80285d0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80285d4:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80285d8:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80285dc:	f100 8111 	bmi.w	8028802 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80285e0:	f10e 3aff 	add.w	sl, lr, #4294967295
 80285e4:	4551      	cmp	r1, sl
 80285e6:	f280 810c 	bge.w	8028802 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80285ea:	2800      	cmp	r0, #0
 80285ec:	f2c0 8109 	blt.w	8028802 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80285f0:	f103 3aff 	add.w	sl, r3, #4294967295
 80285f4:	4550      	cmp	r0, sl
 80285f6:	f280 8104 	bge.w	8028802 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80285fa:	fa0f f38e 	sxth.w	r3, lr
 80285fe:	fb00 1103 	mla	r1, r0, r3, r1
 8028602:	9809      	ldr	r0, [sp, #36]	; 0x24
 8028604:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8028608:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 802860c:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8028610:	f1bc 0f00 	cmp.w	ip, #0
 8028614:	d007      	beq.n	8028626 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 8028616:	005b      	lsls	r3, r3, #1
 8028618:	eb0a 0003 	add.w	r0, sl, r3
 802861c:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8028620:	930c      	str	r3, [sp, #48]	; 0x30
 8028622:	8843      	ldrh	r3, [r0, #2]
 8028624:	930d      	str	r3, [sp, #52]	; 0x34
 8028626:	ea4f 400e 	mov.w	r0, lr, lsl #16
 802862a:	fb12 f30c 	smulbb	r3, r2, ip
 802862e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8028632:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8028636:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802863a:	10db      	asrs	r3, r3, #3
 802863c:	ea40 000e 	orr.w	r0, r0, lr
 8028640:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028644:	f1cc 0e10 	rsb	lr, ip, #16
 8028648:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802864c:	ebae 0e02 	sub.w	lr, lr, r2
 8028650:	ea4a 0101 	orr.w	r1, sl, r1
 8028654:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8028658:	4351      	muls	r1, r2
 802865a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802865c:	9f08      	ldr	r7, [sp, #32]
 802865e:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8028662:	fb0e 1e00 	mla	lr, lr, r0, r1
 8028666:	0410      	lsls	r0, r2, #16
 8028668:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802866c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028670:	4310      	orrs	r0, r2
 8028672:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8028674:	990c      	ldr	r1, [sp, #48]	; 0x30
 8028676:	0412      	lsls	r2, r2, #16
 8028678:	fb03 e000 	mla	r0, r3, r0, lr
 802867c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8028680:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8028684:	ea42 020e 	orr.w	r2, r2, lr
 8028688:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 802868c:	fb03 0302 	mla	r3, r3, r2, r0
 8028690:	0d5a      	lsrs	r2, r3, #21
 8028692:	095b      	lsrs	r3, r3, #5
 8028694:	f8b8 0000 	ldrh.w	r0, [r8]
 8028698:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802869c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80286a0:	4313      	orrs	r3, r2
 80286a2:	b29b      	uxth	r3, r3
 80286a4:	1201      	asrs	r1, r0, #8
 80286a6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80286aa:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80286ae:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80286b2:	fb11 f107 	smulbb	r1, r1, r7
 80286b6:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 80286ba:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80286be:	00c0      	lsls	r0, r0, #3
 80286c0:	fb0c 1c02 	mla	ip, ip, r2, r1
 80286c4:	b2c0      	uxtb	r0, r0
 80286c6:	10d9      	asrs	r1, r3, #3
 80286c8:	00db      	lsls	r3, r3, #3
 80286ca:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80286ce:	b2db      	uxtb	r3, r3
 80286d0:	fb10 f007 	smulbb	r0, r0, r7
 80286d4:	fa1f fc8c 	uxth.w	ip, ip
 80286d8:	fb03 0302 	mla	r3, r3, r2, r0
 80286dc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80286e0:	fb1e fe07 	smulbb	lr, lr, r7
 80286e4:	fb01 e102 	mla	r1, r1, r2, lr
 80286e8:	b29a      	uxth	r2, r3
 80286ea:	f10c 0301 	add.w	r3, ip, #1
 80286ee:	b289      	uxth	r1, r1
 80286f0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80286f4:	1c53      	adds	r3, r2, #1
 80286f6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80286fa:	1c4a      	adds	r2, r1, #1
 80286fc:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8028700:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8028704:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028708:	0949      	lsrs	r1, r1, #5
 802870a:	ea43 030c 	orr.w	r3, r3, ip
 802870e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8028712:	430b      	orrs	r3, r1
 8028714:	f8a8 3000 	strh.w	r3, [r8]
 8028718:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802871a:	441c      	add	r4, r3
 802871c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802871e:	f108 0802 	add.w	r8, r8, #2
 8028722:	441e      	add	r6, r3
 8028724:	f109 39ff 	add.w	r9, r9, #4294967295
 8028728:	e74a      	b.n	80285c0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802872a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802872c:	441c      	add	r4, r3
 802872e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028730:	441e      	add	r6, r3
 8028732:	9b07      	ldr	r3, [sp, #28]
 8028734:	3302      	adds	r3, #2
 8028736:	3d01      	subs	r5, #1
 8028738:	9307      	str	r3, [sp, #28]
 802873a:	e722      	b.n	8028582 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802873c:	d022      	beq.n	8028784 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 802873e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8028740:	1e6b      	subs	r3, r5, #1
 8028742:	fb00 4003 	mla	r0, r0, r3, r4
 8028746:	1400      	asrs	r0, r0, #16
 8028748:	f53f af37 	bmi.w	80285ba <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802874c:	3901      	subs	r1, #1
 802874e:	4288      	cmp	r0, r1
 8028750:	f6bf af33 	bge.w	80285ba <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8028754:	9920      	ldr	r1, [sp, #128]	; 0x80
 8028756:	fb01 6303 	mla	r3, r1, r3, r6
 802875a:	141b      	asrs	r3, r3, #16
 802875c:	f53f af2d 	bmi.w	80285ba <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8028760:	3a01      	subs	r2, #1
 8028762:	4293      	cmp	r3, r2
 8028764:	f6bf af29 	bge.w	80285ba <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8028768:	f8dd 901c 	ldr.w	r9, [sp, #28]
 802876c:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8028770:	46a8      	mov	r8, r5
 8028772:	f1b8 0f00 	cmp.w	r8, #0
 8028776:	dc5e      	bgt.n	8028836 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8028778:	9b07      	ldr	r3, [sp, #28]
 802877a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802877e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8028782:	9307      	str	r3, [sp, #28]
 8028784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028786:	2b00      	cmp	r3, #0
 8028788:	f340 80f6 	ble.w	8028978 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 802878c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028790:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028794:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028798:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802879a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802879e:	ee31 1a05 	vadd.f32	s2, s2, s10
 80287a2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80287a6:	eef0 6a62 	vmov.f32	s13, s5
 80287aa:	ee61 7a27 	vmul.f32	s15, s2, s15
 80287ae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80287b2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80287b6:	ee16 4a90 	vmov	r4, s13
 80287ba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80287be:	eef0 6a43 	vmov.f32	s13, s6
 80287c2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80287c6:	ee12 2a90 	vmov	r2, s5
 80287ca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80287ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80287d2:	ee13 2a10 	vmov	r2, s6
 80287d6:	931f      	str	r3, [sp, #124]	; 0x7c
 80287d8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80287da:	fb92 f3f3 	sdiv	r3, r2, r3
 80287de:	9320      	str	r3, [sp, #128]	; 0x80
 80287e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80287e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80287e4:	3b01      	subs	r3, #1
 80287e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80287ea:	930a      	str	r3, [sp, #40]	; 0x28
 80287ec:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80287ee:	ee16 6a90 	vmov	r6, s13
 80287f2:	bf14      	ite	ne
 80287f4:	461d      	movne	r5, r3
 80287f6:	4615      	moveq	r5, r2
 80287f8:	eeb0 3a67 	vmov.f32	s6, s15
 80287fc:	eef0 2a47 	vmov.f32	s5, s14
 8028800:	e6b0      	b.n	8028564 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8028802:	f111 0a01 	adds.w	sl, r1, #1
 8028806:	d487      	bmi.n	8028718 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8028808:	45d6      	cmp	lr, sl
 802880a:	db85      	blt.n	8028718 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802880c:	f110 0a01 	adds.w	sl, r0, #1
 8028810:	d482      	bmi.n	8028718 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8028812:	4553      	cmp	r3, sl
 8028814:	db80      	blt.n	8028718 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8028816:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8028818:	9101      	str	r1, [sp, #4]
 802881a:	b21b      	sxth	r3, r3
 802881c:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8028820:	9300      	str	r3, [sp, #0]
 8028822:	e9cd c704 	strd	ip, r7, [sp, #16]
 8028826:	fa0f f38e 	sxth.w	r3, lr
 802882a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802882c:	9811      	ldr	r0, [sp, #68]	; 0x44
 802882e:	4641      	mov	r1, r8
 8028830:	f7ff fdb4 	bl	802839c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8028834:	e770      	b.n	8028718 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8028836:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028838:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802883a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802883e:	1430      	asrs	r0, r6, #16
 8028840:	1423      	asrs	r3, r4, #16
 8028842:	fb01 3000 	mla	r0, r1, r0, r3
 8028846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028848:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 802884c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8028850:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8028854:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028858:	8858      	ldrh	r0, [r3, #2]
 802885a:	f1be 0f00 	cmp.w	lr, #0
 802885e:	d00b      	beq.n	8028878 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8028860:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8028864:	3901      	subs	r1, #1
 8028866:	0049      	lsls	r1, r1, #1
 8028868:	3102      	adds	r1, #2
 802886a:	eb03 0b01 	add.w	fp, r3, r1
 802886e:	5a5b      	ldrh	r3, [r3, r1]
 8028870:	930e      	str	r3, [sp, #56]	; 0x38
 8028872:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8028876:	930f      	str	r3, [sp, #60]	; 0x3c
 8028878:	ea4f 410c 	mov.w	r1, ip, lsl #16
 802887c:	fb12 f30e 	smulbb	r3, r2, lr
 8028880:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8028884:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8028888:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 802888c:	10db      	asrs	r3, r3, #3
 802888e:	ea41 010c 	orr.w	r1, r1, ip
 8028892:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8028896:	f1ce 0c10 	rsb	ip, lr, #16
 802889a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802889e:	ebac 0c02 	sub.w	ip, ip, r2
 80288a2:	ea4b 0000 	orr.w	r0, fp, r0
 80288a6:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80288aa:	4350      	muls	r0, r2
 80288ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80288ae:	9f08      	ldr	r7, [sp, #32]
 80288b0:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80288b4:	fb0c 0c01 	mla	ip, ip, r1, r0
 80288b8:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80288bc:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 80288c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80288c2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80288c4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80288c8:	0412      	lsls	r2, r2, #16
 80288ca:	ea4b 0101 	orr.w	r1, fp, r1
 80288ce:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80288d2:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80288d6:	fb03 c101 	mla	r1, r3, r1, ip
 80288da:	4302      	orrs	r2, r0
 80288dc:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80288e0:	fb03 1202 	mla	r2, r3, r2, r1
 80288e4:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 80288e8:	0952      	lsrs	r2, r2, #5
 80288ea:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 80288ee:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80288f2:	f8b9 2000 	ldrh.w	r2, [r9]
 80288f6:	ea4b 0303 	orr.w	r3, fp, r3
 80288fa:	b29b      	uxth	r3, r3
 80288fc:	1211      	asrs	r1, r2, #8
 80288fe:	1218      	asrs	r0, r3, #8
 8028900:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8028904:	fb11 f107 	smulbb	r1, r1, r7
 8028908:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 802890c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028910:	00d2      	lsls	r2, r2, #3
 8028912:	fb00 100a 	mla	r0, r0, sl, r1
 8028916:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 802891a:	10d9      	asrs	r1, r3, #3
 802891c:	b2d2      	uxtb	r2, r2
 802891e:	00db      	lsls	r3, r3, #3
 8028920:	fb1c fc07 	smulbb	ip, ip, r7
 8028924:	fb12 f207 	smulbb	r2, r2, r7
 8028928:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802892c:	b2db      	uxtb	r3, r3
 802892e:	b280      	uxth	r0, r0
 8028930:	fb01 c10a 	mla	r1, r1, sl, ip
 8028934:	fb03 230a 	mla	r3, r3, sl, r2
 8028938:	b29b      	uxth	r3, r3
 802893a:	b289      	uxth	r1, r1
 802893c:	1c42      	adds	r2, r0, #1
 802893e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028942:	f101 0c01 	add.w	ip, r1, #1
 8028946:	1c5a      	adds	r2, r3, #1
 8028948:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802894c:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8028950:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8028952:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8028956:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802895a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802895e:	4310      	orrs	r0, r2
 8028960:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8028964:	441c      	add	r4, r3
 8028966:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028968:	ea40 000c 	orr.w	r0, r0, ip
 802896c:	f829 0b02 	strh.w	r0, [r9], #2
 8028970:	441e      	add	r6, r3
 8028972:	f108 38ff 	add.w	r8, r8, #4294967295
 8028976:	e6fc      	b.n	8028772 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8028978:	b013      	add	sp, #76	; 0x4c
 802897a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802897e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 802897e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8028982:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 8028986:	fb0e 4703 	mla	r7, lr, r3, r4
 802898a:	f1be 0f00 	cmp.w	lr, #0
 802898e:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 8028992:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8028996:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 802899a:	8808      	ldrh	r0, [r1, #0]
 802899c:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 80289a0:	db60      	blt.n	8028a64 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 80289a2:	45f1      	cmp	r9, lr
 80289a4:	dd5e      	ble.n	8028a64 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 80289a6:	2c00      	cmp	r4, #0
 80289a8:	db5a      	blt.n	8028a60 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 80289aa:	42a3      	cmp	r3, r4
 80289ac:	dd58      	ble.n	8028a60 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 80289ae:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 80289b2:	1c62      	adds	r2, r4, #1
 80289b4:	d459      	bmi.n	8028a6a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 80289b6:	4293      	cmp	r3, r2
 80289b8:	dd57      	ble.n	8028a6a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 80289ba:	2d00      	cmp	r5, #0
 80289bc:	d055      	beq.n	8028a6a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 80289be:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 80289c2:	f11e 0e01 	adds.w	lr, lr, #1
 80289c6:	d454      	bmi.n	8028a72 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 80289c8:	45f1      	cmp	r9, lr
 80289ca:	dd52      	ble.n	8028a72 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 80289cc:	2e00      	cmp	r6, #0
 80289ce:	d050      	beq.n	8028a72 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 80289d0:	2c00      	cmp	r4, #0
 80289d2:	db4c      	blt.n	8028a6e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 80289d4:	42a3      	cmp	r3, r4
 80289d6:	dd4a      	ble.n	8028a6e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 80289d8:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 80289dc:	3401      	adds	r4, #1
 80289de:	d405      	bmi.n	80289ec <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80289e0:	42a3      	cmp	r3, r4
 80289e2:	dd03      	ble.n	80289ec <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80289e4:	b115      	cbz	r5, 80289ec <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80289e6:	3301      	adds	r3, #1
 80289e8:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 80289ec:	ea4f 430c 	mov.w	r3, ip, lsl #16
 80289f0:	fb15 f406 	smulbb	r4, r5, r6
 80289f4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80289f8:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 80289fc:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8028a00:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8028a04:	ea43 0c0c 	orr.w	ip, r3, ip
 8028a08:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8028a0c:	f1c6 0310 	rsb	r3, r6, #16
 8028a10:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8028a14:	1b5b      	subs	r3, r3, r5
 8028a16:	ea4e 0707 	orr.w	r7, lr, r7
 8028a1a:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8028a1e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8028a22:	437d      	muls	r5, r7
 8028a24:	fb03 5c0c 	mla	ip, r3, ip, r5
 8028a28:	0403      	lsls	r3, r0, #16
 8028a2a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8028a2e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8028a32:	4318      	orrs	r0, r3
 8028a34:	0413      	lsls	r3, r2, #16
 8028a36:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8028a3a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028a3e:	4313      	orrs	r3, r2
 8028a40:	fb04 c000 	mla	r0, r4, r0, ip
 8028a44:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8028a48:	fb06 0003 	mla	r0, r6, r3, r0
 8028a4c:	0d43      	lsrs	r3, r0, #21
 8028a4e:	0940      	lsrs	r0, r0, #5
 8028a50:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028a54:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8028a58:	4318      	orrs	r0, r3
 8028a5a:	8008      	strh	r0, [r1, #0]
 8028a5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8028a60:	4684      	mov	ip, r0
 8028a62:	e7a6      	b.n	80289b2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 8028a64:	4607      	mov	r7, r0
 8028a66:	4684      	mov	ip, r0
 8028a68:	e7ab      	b.n	80289c2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8028a6a:	4607      	mov	r7, r0
 8028a6c:	e7a9      	b.n	80289c2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8028a6e:	4602      	mov	r2, r0
 8028a70:	e7b4      	b.n	80289dc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 8028a72:	4602      	mov	r2, r0
 8028a74:	e7ba      	b.n	80289ec <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

08028a76 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028a76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028a7a:	b08f      	sub	sp, #60	; 0x3c
 8028a7c:	461d      	mov	r5, r3
 8028a7e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8028a80:	920c      	str	r2, [sp, #48]	; 0x30
 8028a82:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 8028a86:	9107      	str	r1, [sp, #28]
 8028a88:	6859      	ldr	r1, [r3, #4]
 8028a8a:	681b      	ldr	r3, [r3, #0]
 8028a8c:	900d      	str	r0, [sp, #52]	; 0x34
 8028a8e:	fb01 2707 	mla	r7, r1, r7, r2
 8028a92:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8028a96:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028a98:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 8028a9c:	f8d3 8000 	ldr.w	r8, [r3]
 8028aa0:	9b07      	ldr	r3, [sp, #28]
 8028aa2:	2b00      	cmp	r3, #0
 8028aa4:	dc03      	bgt.n	8028aae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8028aa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028aa8:	2b00      	cmp	r3, #0
 8028aaa:	f340 8181 	ble.w	8028db0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8028aae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028ab0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028ab4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028ab8:	1e48      	subs	r0, r1, #1
 8028aba:	f102 3cff 	add.w	ip, r2, #4294967295
 8028abe:	2d00      	cmp	r5, #0
 8028ac0:	f340 809b 	ble.w	8028bfa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 8028ac4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8028ac8:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028acc:	d406      	bmi.n	8028adc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8028ace:	4586      	cmp	lr, r0
 8028ad0:	da04      	bge.n	8028adc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8028ad2:	2b00      	cmp	r3, #0
 8028ad4:	db02      	blt.n	8028adc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8028ad6:	4563      	cmp	r3, ip
 8028ad8:	f2c0 8090 	blt.w	8028bfc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8028adc:	f11e 0e01 	adds.w	lr, lr, #1
 8028ae0:	f100 8084 	bmi.w	8028bec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8028ae4:	4571      	cmp	r1, lr
 8028ae6:	f2c0 8081 	blt.w	8028bec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8028aea:	3301      	adds	r3, #1
 8028aec:	d47e      	bmi.n	8028bec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8028aee:	429a      	cmp	r2, r3
 8028af0:	db7c      	blt.n	8028bec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8028af2:	46aa      	mov	sl, r5
 8028af4:	46b9      	mov	r9, r7
 8028af6:	f1ba 0f00 	cmp.w	sl, #0
 8028afa:	f340 8099 	ble.w	8028c30 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8028afe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028b00:	1421      	asrs	r1, r4, #16
 8028b02:	ea4f 4026 	mov.w	r0, r6, asr #16
 8028b06:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028b0a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8028b0e:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8028b12:	f100 80d0 	bmi.w	8028cb6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8028b16:	f10e 3bff 	add.w	fp, lr, #4294967295
 8028b1a:	4559      	cmp	r1, fp
 8028b1c:	f280 80cb 	bge.w	8028cb6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8028b20:	2800      	cmp	r0, #0
 8028b22:	f2c0 80c8 	blt.w	8028cb6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8028b26:	f103 3bff 	add.w	fp, r3, #4294967295
 8028b2a:	4558      	cmp	r0, fp
 8028b2c:	f280 80c3 	bge.w	8028cb6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8028b30:	fa0f fe8e 	sxth.w	lr, lr
 8028b34:	fb00 110e 	mla	r1, r0, lr, r1
 8028b38:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8028b3c:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8028b40:	8841      	ldrh	r1, [r0, #2]
 8028b42:	f1bc 0f00 	cmp.w	ip, #0
 8028b46:	d00b      	beq.n	8028b60 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 8028b48:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8028b4c:	3b01      	subs	r3, #1
 8028b4e:	005b      	lsls	r3, r3, #1
 8028b50:	3302      	adds	r3, #2
 8028b52:	eb00 0e03 	add.w	lr, r0, r3
 8028b56:	5ac3      	ldrh	r3, [r0, r3]
 8028b58:	9308      	str	r3, [sp, #32]
 8028b5a:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8028b5e:	9309      	str	r3, [sp, #36]	; 0x24
 8028b60:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8028b64:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8028b68:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8028b6c:	ea40 000b 	orr.w	r0, r0, fp
 8028b70:	fb12 f30c 	smulbb	r3, r2, ip
 8028b74:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8028b78:	10db      	asrs	r3, r3, #3
 8028b7a:	f1cc 0e10 	rsb	lr, ip, #16
 8028b7e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8028b82:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8028b86:	ebae 0e02 	sub.w	lr, lr, r2
 8028b8a:	ea4b 0101 	orr.w	r1, fp, r1
 8028b8e:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8028b92:	4351      	muls	r1, r2
 8028b94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028b96:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8028b9a:	fb0e 1e00 	mla	lr, lr, r0, r1
 8028b9e:	0410      	lsls	r0, r2, #16
 8028ba0:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8028ba4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028ba8:	4310      	orrs	r0, r2
 8028baa:	9a08      	ldr	r2, [sp, #32]
 8028bac:	9908      	ldr	r1, [sp, #32]
 8028bae:	0412      	lsls	r2, r2, #16
 8028bb0:	fb03 e000 	mla	r0, r3, r0, lr
 8028bb4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8028bb8:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8028bbc:	ea42 020e 	orr.w	r2, r2, lr
 8028bc0:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8028bc4:	fb03 0302 	mla	r3, r3, r2, r0
 8028bc8:	0d5a      	lsrs	r2, r3, #21
 8028bca:	095b      	lsrs	r3, r3, #5
 8028bcc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028bd0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8028bd4:	4313      	orrs	r3, r2
 8028bd6:	f8a9 3000 	strh.w	r3, [r9]
 8028bda:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8028bdc:	441c      	add	r4, r3
 8028bde:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8028be0:	f109 0902 	add.w	r9, r9, #2
 8028be4:	441e      	add	r6, r3
 8028be6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8028bea:	e784      	b.n	8028af6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8028bec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8028bee:	441c      	add	r4, r3
 8028bf0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8028bf2:	3d01      	subs	r5, #1
 8028bf4:	441e      	add	r6, r3
 8028bf6:	3702      	adds	r7, #2
 8028bf8:	e761      	b.n	8028abe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8028bfa:	d01d      	beq.n	8028c38 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028bfc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8028bfe:	1e6b      	subs	r3, r5, #1
 8028c00:	fb00 4003 	mla	r0, r0, r3, r4
 8028c04:	1400      	asrs	r0, r0, #16
 8028c06:	f53f af74 	bmi.w	8028af2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8028c0a:	3901      	subs	r1, #1
 8028c0c:	4288      	cmp	r0, r1
 8028c0e:	f6bf af70 	bge.w	8028af2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8028c12:	991c      	ldr	r1, [sp, #112]	; 0x70
 8028c14:	fb01 6303 	mla	r3, r1, r3, r6
 8028c18:	141b      	asrs	r3, r3, #16
 8028c1a:	f53f af6a 	bmi.w	8028af2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8028c1e:	3a01      	subs	r2, #1
 8028c20:	4293      	cmp	r3, r2
 8028c22:	f6bf af66 	bge.w	8028af2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8028c26:	46a9      	mov	r9, r5
 8028c28:	46ba      	mov	sl, r7
 8028c2a:	f1b9 0f00 	cmp.w	r9, #0
 8028c2e:	dc5a      	bgt.n	8028ce6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x270>
 8028c30:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8028c34:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8028c38:	9b07      	ldr	r3, [sp, #28]
 8028c3a:	2b00      	cmp	r3, #0
 8028c3c:	f340 80b8 	ble.w	8028db0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8028c40:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028c44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028c48:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028c4c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8028c4e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028c52:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028c56:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028c5a:	eef0 6a62 	vmov.f32	s13, s5
 8028c5e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028c62:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028c66:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028c6a:	ee16 4a90 	vmov	r4, s13
 8028c6e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028c72:	eef0 6a43 	vmov.f32	s13, s6
 8028c76:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028c7a:	ee12 2a90 	vmov	r2, s5
 8028c7e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028c82:	fb92 f3f3 	sdiv	r3, r2, r3
 8028c86:	ee13 2a10 	vmov	r2, s6
 8028c8a:	931b      	str	r3, [sp, #108]	; 0x6c
 8028c8c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8028c8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8028c92:	931c      	str	r3, [sp, #112]	; 0x70
 8028c94:	9b07      	ldr	r3, [sp, #28]
 8028c96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8028c98:	3b01      	subs	r3, #1
 8028c9a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028c9e:	9307      	str	r3, [sp, #28]
 8028ca0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8028ca2:	ee16 6a90 	vmov	r6, s13
 8028ca6:	bf14      	ite	ne
 8028ca8:	461d      	movne	r5, r3
 8028caa:	4615      	moveq	r5, r2
 8028cac:	eeb0 3a67 	vmov.f32	s6, s15
 8028cb0:	eef0 2a47 	vmov.f32	s5, s14
 8028cb4:	e6f4      	b.n	8028aa0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8028cb6:	f111 0b01 	adds.w	fp, r1, #1
 8028cba:	d48e      	bmi.n	8028bda <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8028cbc:	45de      	cmp	lr, fp
 8028cbe:	db8c      	blt.n	8028bda <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8028cc0:	f110 0b01 	adds.w	fp, r0, #1
 8028cc4:	d489      	bmi.n	8028bda <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8028cc6:	455b      	cmp	r3, fp
 8028cc8:	db87      	blt.n	8028bda <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8028cca:	b21b      	sxth	r3, r3
 8028ccc:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8028cd0:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8028cd4:	9300      	str	r3, [sp, #0]
 8028cd6:	4642      	mov	r2, r8
 8028cd8:	fa0f f38e 	sxth.w	r3, lr
 8028cdc:	4649      	mov	r1, r9
 8028cde:	980d      	ldr	r0, [sp, #52]	; 0x34
 8028ce0:	f7ff fe4d 	bl	802897e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8028ce4:	e779      	b.n	8028bda <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8028ce6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028ce8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8028cec:	1420      	asrs	r0, r4, #16
 8028cee:	1431      	asrs	r1, r6, #16
 8028cf0:	fb03 0101 	mla	r1, r3, r1, r0
 8028cf4:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8028cf8:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8028cfc:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8028d00:	8841      	ldrh	r1, [r0, #2]
 8028d02:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028d06:	f1be 0f00 	cmp.w	lr, #0
 8028d0a:	d00b      	beq.n	8028d24 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8028d0c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8028d10:	3b01      	subs	r3, #1
 8028d12:	005b      	lsls	r3, r3, #1
 8028d14:	3302      	adds	r3, #2
 8028d16:	eb00 0b03 	add.w	fp, r0, r3
 8028d1a:	5ac3      	ldrh	r3, [r0, r3]
 8028d1c:	930a      	str	r3, [sp, #40]	; 0x28
 8028d1e:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8028d22:	930b      	str	r3, [sp, #44]	; 0x2c
 8028d24:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8028d28:	fb12 f30e 	smulbb	r3, r2, lr
 8028d2c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8028d30:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8028d34:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8028d38:	10db      	asrs	r3, r3, #3
 8028d3a:	ea40 000c 	orr.w	r0, r0, ip
 8028d3e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8028d42:	f1ce 0c10 	rsb	ip, lr, #16
 8028d46:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8028d4a:	ebac 0c02 	sub.w	ip, ip, r2
 8028d4e:	ea4b 0101 	orr.w	r1, fp, r1
 8028d52:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8028d56:	4351      	muls	r1, r2
 8028d58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8028d5a:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8028d5e:	fb0c 1c00 	mla	ip, ip, r0, r1
 8028d62:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8028d66:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8028d6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8028d6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8028d6e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8028d72:	0412      	lsls	r2, r2, #16
 8028d74:	ea4b 0000 	orr.w	r0, fp, r0
 8028d78:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8028d7c:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8028d80:	fb03 c000 	mla	r0, r3, r0, ip
 8028d84:	ea42 0b0b 	orr.w	fp, r2, fp
 8028d88:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8028d8c:	fb03 000b 	mla	r0, r3, fp, r0
 8028d90:	0d43      	lsrs	r3, r0, #21
 8028d92:	0940      	lsrs	r0, r0, #5
 8028d94:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028d98:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8028d9c:	4318      	orrs	r0, r3
 8028d9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8028da0:	f82a 0b02 	strh.w	r0, [sl], #2
 8028da4:	441c      	add	r4, r3
 8028da6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8028da8:	f109 39ff 	add.w	r9, r9, #4294967295
 8028dac:	441e      	add	r6, r3
 8028dae:	e73c      	b.n	8028c2a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8028db0:	b00f      	add	sp, #60	; 0x3c
 8028db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028db6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8028db6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028dba:	b085      	sub	sp, #20
 8028dbc:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8028dc0:	9102      	str	r1, [sp, #8]
 8028dc2:	2c00      	cmp	r4, #0
 8028dc4:	fb04 7103 	mla	r1, r4, r3, r7
 8028dc8:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8028dcc:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8028dd0:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8028dd4:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8028dd8:	f2c0 811b 	blt.w	8029012 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8028ddc:	45a6      	cmp	lr, r4
 8028dde:	f340 8118 	ble.w	8029012 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8028de2:	2f00      	cmp	r7, #0
 8028de4:	f2c0 8113 	blt.w	802900e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8028de8:	42bb      	cmp	r3, r7
 8028dea:	f340 8110 	ble.w	802900e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8028dee:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8028df2:	1c7a      	adds	r2, r7, #1
 8028df4:	f100 8110 	bmi.w	8029018 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8028df8:	4293      	cmp	r3, r2
 8028dfa:	f340 810d 	ble.w	8029018 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8028dfe:	2e00      	cmp	r6, #0
 8028e00:	f000 810c 	beq.w	802901c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 8028e04:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8028e08:	3401      	adds	r4, #1
 8028e0a:	f100 810b 	bmi.w	8029024 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8028e0e:	45a6      	cmp	lr, r4
 8028e10:	f340 8108 	ble.w	8029024 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8028e14:	2800      	cmp	r0, #0
 8028e16:	f000 8108 	beq.w	802902a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 8028e1a:	2f00      	cmp	r7, #0
 8028e1c:	f2c0 8100 	blt.w	8029020 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8028e20:	42bb      	cmp	r3, r7
 8028e22:	f340 80fd 	ble.w	8029020 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8028e26:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8028e2a:	3701      	adds	r7, #1
 8028e2c:	f100 8100 	bmi.w	8029030 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8028e30:	42bb      	cmp	r3, r7
 8028e32:	f340 80fd 	ble.w	8029030 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8028e36:	2e00      	cmp	r6, #0
 8028e38:	f000 80fc 	beq.w	8029034 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 8028e3c:	3301      	adds	r3, #1
 8028e3e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8028e42:	b2b6      	uxth	r6, r6
 8028e44:	b280      	uxth	r0, r0
 8028e46:	fb00 fe06 	mul.w	lr, r0, r6
 8028e4a:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8028e4e:	0136      	lsls	r6, r6, #4
 8028e50:	eba6 070e 	sub.w	r7, r6, lr
 8028e54:	b280      	uxth	r0, r0
 8028e56:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8028e5a:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8028e5e:	b2bf      	uxth	r7, r7
 8028e60:	1a1b      	subs	r3, r3, r0
 8028e62:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8028e66:	b29b      	uxth	r3, r3
 8028e68:	fb0a f607 	mul.w	r6, sl, r7
 8028e6c:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8028e70:	fb0b 6603 	mla	r6, fp, r3, r6
 8028e74:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8028e78:	fb00 6609 	mla	r6, r0, r9, r6
 8028e7c:	fb0e 6608 	mla	r6, lr, r8, r6
 8028e80:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8028e84:	9600      	str	r6, [sp, #0]
 8028e86:	2e00      	cmp	r6, #0
 8028e88:	f000 80be 	beq.w	8029008 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 8028e8c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028e90:	fb0b fc0c 	mul.w	ip, fp, ip
 8028e94:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8028e98:	fb0b f505 	mul.w	r5, fp, r5
 8028e9c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8028ea0:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8028ea4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8028ea8:	44dc      	add	ip, fp
 8028eaa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028eae:	9501      	str	r5, [sp, #4]
 8028eb0:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8028eb4:	9503      	str	r5, [sp, #12]
 8028eb6:	9d01      	ldr	r5, [sp, #4]
 8028eb8:	9e02      	ldr	r6, [sp, #8]
 8028eba:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8028ebe:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8028ec2:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8028ec6:	fb0a fc0c 	mul.w	ip, sl, ip
 8028eca:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8028ece:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8028ed2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8028ed6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8028eda:	4465      	add	r5, ip
 8028edc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8028ee0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8028ee4:	fb09 fc0c 	mul.w	ip, r9, ip
 8028ee8:	fb09 f904 	mul.w	r9, r9, r4
 8028eec:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8028ef0:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8028ef4:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8028ef8:	fb08 f404 	mul.w	r4, r8, r4
 8028efc:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8028f00:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028f04:	fb08 f802 	mul.w	r8, r8, r2
 8028f08:	fb0a fa01 	mul.w	sl, sl, r1
 8028f0c:	0a22      	lsrs	r2, r4, #8
 8028f0e:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8028f12:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028f16:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8028f1a:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8028f1e:	4414      	add	r4, r2
 8028f20:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8028f24:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8028f28:	0a2d      	lsrs	r5, r5, #8
 8028f2a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8028f2e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8028f32:	9a03      	ldr	r2, [sp, #12]
 8028f34:	8836      	ldrh	r6, [r6, #0]
 8028f36:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8028f3a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8028f3e:	437d      	muls	r5, r7
 8028f40:	4461      	add	r1, ip
 8028f42:	0a24      	lsrs	r4, r4, #8
 8028f44:	fb02 5503 	mla	r5, r2, r3, r5
 8028f48:	0a09      	lsrs	r1, r1, #8
 8028f4a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8028f4e:	fb04 540e 	mla	r4, r4, lr, r5
 8028f52:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8028f56:	fb01 4100 	mla	r1, r1, r0, r4
 8028f5a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028f5e:	0a09      	lsrs	r1, r1, #8
 8028f60:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028f64:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8028f68:	fb07 f70a 	mul.w	r7, r7, sl
 8028f6c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8028f70:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8028f74:	fb03 7101 	mla	r1, r3, r1, r7
 8028f78:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028f7c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8028f80:	fb0e 1e08 	mla	lr, lr, r8, r1
 8028f84:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8028f88:	fb00 e101 	mla	r1, r0, r1, lr
 8028f8c:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8028f90:	9a00      	ldr	r2, [sp, #0]
 8028f92:	b287      	uxth	r7, r0
 8028f94:	437a      	muls	r2, r7
 8028f96:	0a09      	lsrs	r1, r1, #8
 8028f98:	1c53      	adds	r3, r2, #1
 8028f9a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8028f9e:	4321      	orrs	r1, r4
 8028fa0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028fa4:	1235      	asrs	r5, r6, #8
 8028fa6:	0c0a      	lsrs	r2, r1, #16
 8028fa8:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8028fac:	b2db      	uxtb	r3, r3
 8028fae:	fb12 f207 	smulbb	r2, r2, r7
 8028fb2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8028fb6:	fb05 2503 	mla	r5, r5, r3, r2
 8028fba:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8028fbe:	10f2      	asrs	r2, r6, #3
 8028fc0:	b2c8      	uxtb	r0, r1
 8028fc2:	00f6      	lsls	r6, r6, #3
 8028fc4:	fb14 f407 	smulbb	r4, r4, r7
 8028fc8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8028fcc:	b2f6      	uxtb	r6, r6
 8028fce:	fb10 f007 	smulbb	r0, r0, r7
 8028fd2:	fb02 4203 	mla	r2, r2, r3, r4
 8028fd6:	b2ad      	uxth	r5, r5
 8028fd8:	fb06 0303 	mla	r3, r6, r3, r0
 8028fdc:	b299      	uxth	r1, r3
 8028fde:	b294      	uxth	r4, r2
 8028fe0:	1c6b      	adds	r3, r5, #1
 8028fe2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8028fe6:	1c62      	adds	r2, r4, #1
 8028fe8:	1c4b      	adds	r3, r1, #1
 8028fea:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8028fee:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8028ff2:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8028ff6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028ffa:	0952      	lsrs	r2, r2, #5
 8028ffc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029000:	432b      	orrs	r3, r5
 8029002:	4313      	orrs	r3, r2
 8029004:	9a02      	ldr	r2, [sp, #8]
 8029006:	8013      	strh	r3, [r2, #0]
 8029008:	b005      	add	sp, #20
 802900a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802900e:	2500      	movs	r5, #0
 8029010:	e6ef      	b.n	8028df2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 8029012:	2100      	movs	r1, #0
 8029014:	460d      	mov	r5, r1
 8029016:	e6f7      	b.n	8028e08 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8029018:	2100      	movs	r1, #0
 802901a:	e6f5      	b.n	8028e08 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 802901c:	4631      	mov	r1, r6
 802901e:	e6f3      	b.n	8028e08 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8029020:	2400      	movs	r4, #0
 8029022:	e702      	b.n	8028e2a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 8029024:	2200      	movs	r2, #0
 8029026:	4614      	mov	r4, r2
 8029028:	e70b      	b.n	8028e42 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 802902a:	4602      	mov	r2, r0
 802902c:	4604      	mov	r4, r0
 802902e:	e708      	b.n	8028e42 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8029030:	2200      	movs	r2, #0
 8029032:	e706      	b.n	8028e42 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8029034:	4632      	mov	r2, r6
 8029036:	e704      	b.n	8028e42 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

08029038 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802903c:	b09d      	sub	sp, #116	; 0x74
 802903e:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8029042:	9219      	str	r2, [sp, #100]	; 0x64
 8029044:	9307      	str	r3, [sp, #28]
 8029046:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8029048:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 802904c:	931a      	str	r3, [sp, #104]	; 0x68
 802904e:	9117      	str	r1, [sp, #92]	; 0x5c
 8029050:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8029054:	901b      	str	r0, [sp, #108]	; 0x6c
 8029056:	6850      	ldr	r0, [r2, #4]
 8029058:	6812      	ldr	r2, [r2, #0]
 802905a:	fb00 1303 	mla	r3, r0, r3, r1
 802905e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8029062:	930a      	str	r3, [sp, #40]	; 0x28
 8029064:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8029066:	681b      	ldr	r3, [r3, #0]
 8029068:	9310      	str	r3, [sp, #64]	; 0x40
 802906a:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 802906e:	930b      	str	r3, [sp, #44]	; 0x2c
 8029070:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8029072:	2b00      	cmp	r3, #0
 8029074:	dc03      	bgt.n	802907e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8029076:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8029078:	2b00      	cmp	r3, #0
 802907a:	f340 8375 	ble.w	8029768 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 802907e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8029080:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029084:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029088:	1e48      	subs	r0, r1, #1
 802908a:	1e57      	subs	r7, r2, #1
 802908c:	9b07      	ldr	r3, [sp, #28]
 802908e:	2b00      	cmp	r3, #0
 8029090:	f340 818e 	ble.w	80293b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8029094:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8029098:	ea4f 4326 	mov.w	r3, r6, asr #16
 802909c:	d406      	bmi.n	80290ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802909e:	4584      	cmp	ip, r0
 80290a0:	da04      	bge.n	80290ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80290a2:	2b00      	cmp	r3, #0
 80290a4:	db02      	blt.n	80290ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80290a6:	42bb      	cmp	r3, r7
 80290a8:	f2c0 8183 	blt.w	80293b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 80290ac:	f11c 0c01 	adds.w	ip, ip, #1
 80290b0:	f100 8173 	bmi.w	802939a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80290b4:	4561      	cmp	r1, ip
 80290b6:	f2c0 8170 	blt.w	802939a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80290ba:	3301      	adds	r3, #1
 80290bc:	f100 816d 	bmi.w	802939a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80290c0:	429a      	cmp	r2, r3
 80290c2:	f2c0 816a 	blt.w	802939a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80290c6:	9b07      	ldr	r3, [sp, #28]
 80290c8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80290ca:	9318      	str	r3, [sp, #96]	; 0x60
 80290cc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80290ce:	2b00      	cmp	r3, #0
 80290d0:	f340 818c 	ble.w	80293ec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 80290d4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80290d6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80290d8:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80290dc:	689b      	ldr	r3, [r3, #8]
 80290de:	1422      	asrs	r2, r4, #16
 80290e0:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80290e4:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80290e8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80290ec:	f100 81cd 	bmi.w	802948a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80290f0:	f103 38ff 	add.w	r8, r3, #4294967295
 80290f4:	4542      	cmp	r2, r8
 80290f6:	f280 81c8 	bge.w	802948a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80290fa:	f1bc 0f00 	cmp.w	ip, #0
 80290fe:	f2c0 81c4 	blt.w	802948a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8029102:	f10e 38ff 	add.w	r8, lr, #4294967295
 8029106:	45c4      	cmp	ip, r8
 8029108:	f280 81bf 	bge.w	802948a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802910c:	b21b      	sxth	r3, r3
 802910e:	fb0c 2203 	mla	r2, ip, r3, r2
 8029112:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8029114:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8029118:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802911c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8029120:	2800      	cmp	r0, #0
 8029122:	f000 81a9 	beq.w	8029478 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8029126:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802912a:	950c      	str	r5, [sp, #48]	; 0x30
 802912c:	0e2d      	lsrs	r5, r5, #24
 802912e:	9513      	str	r5, [sp, #76]	; 0x4c
 8029130:	b181      	cbz	r1, 8029154 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8029132:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8029136:	3b01      	subs	r3, #1
 8029138:	009b      	lsls	r3, r3, #2
 802913a:	3304      	adds	r3, #4
 802913c:	eb08 0c03 	add.w	ip, r8, r3
 8029140:	f858 3003 	ldr.w	r3, [r8, r3]
 8029144:	9308      	str	r3, [sp, #32]
 8029146:	0e1b      	lsrs	r3, r3, #24
 8029148:	9311      	str	r3, [sp, #68]	; 0x44
 802914a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802914e:	930d      	str	r3, [sp, #52]	; 0x34
 8029150:	0e1b      	lsrs	r3, r3, #24
 8029152:	9314      	str	r3, [sp, #80]	; 0x50
 8029154:	b280      	uxth	r0, r0
 8029156:	b289      	uxth	r1, r1
 8029158:	fb00 f901 	mul.w	r9, r0, r1
 802915c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8029160:	0100      	lsls	r0, r0, #4
 8029162:	eba0 0809 	sub.w	r8, r0, r9
 8029166:	b289      	uxth	r1, r1
 8029168:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802916c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802916e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029170:	fa1f f888 	uxth.w	r8, r8
 8029174:	1a5b      	subs	r3, r3, r1
 8029176:	b29b      	uxth	r3, r3
 8029178:	fb08 f000 	mul.w	r0, r8, r0
 802917c:	fb03 000e 	mla	r0, r3, lr, r0
 8029180:	fb01 0005 	mla	r0, r1, r5, r0
 8029184:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8029186:	fb09 0005 	mla	r0, r9, r5, r0
 802918a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802918e:	2800      	cmp	r0, #0
 8029190:	f000 80fa 	beq.w	8029388 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8029194:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8029198:	d01b      	beq.n	80291d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802919a:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 802919e:	fb0e fa0a 	mul.w	sl, lr, sl
 80291a2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80291a6:	fb0e fe02 	mul.w	lr, lr, r2
 80291aa:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80291ae:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80291b2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80291b6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80291ba:	4452      	add	r2, sl
 80291bc:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80291c0:	0a12      	lsrs	r2, r2, #8
 80291c2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80291c6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80291ca:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80291ce:	ea42 020c 	orr.w	r2, r2, ip
 80291d2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80291d4:	2dff      	cmp	r5, #255	; 0xff
 80291d6:	d021      	beq.n	802921c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 80291d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80291da:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80291de:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80291e0:	fb05 fb0b 	mul.w	fp, r5, fp
 80291e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80291e6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80291ea:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80291ec:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80291f0:	fb05 fa0a 	mul.w	sl, r5, sl
 80291f4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80291f8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80291fc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8029200:	44de      	add	lr, fp
 8029202:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029206:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802920a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802920e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029212:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029216:	ea4e 050a 	orr.w	r5, lr, sl
 802921a:	950c      	str	r5, [sp, #48]	; 0x30
 802921c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802921e:	2dff      	cmp	r5, #255	; 0xff
 8029220:	d021      	beq.n	8029266 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8029222:	9d08      	ldr	r5, [sp, #32]
 8029224:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8029228:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802922a:	fb05 fb0b 	mul.w	fp, r5, fp
 802922e:	9d08      	ldr	r5, [sp, #32]
 8029230:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029234:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029236:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802923a:	fb05 fa0a 	mul.w	sl, r5, sl
 802923e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029242:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8029246:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802924a:	44de      	add	lr, fp
 802924c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029250:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029254:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029258:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802925c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029260:	ea4e 050a 	orr.w	r5, lr, sl
 8029264:	9508      	str	r5, [sp, #32]
 8029266:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8029268:	2dff      	cmp	r5, #255	; 0xff
 802926a:	d021      	beq.n	80292b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 802926c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802926e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8029272:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8029274:	fb05 fb0b 	mul.w	fp, r5, fp
 8029278:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802927a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802927e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8029280:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029284:	fb05 fa0a 	mul.w	sl, r5, sl
 8029288:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802928c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8029290:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8029294:	44de      	add	lr, fp
 8029296:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802929a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802929e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80292a2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80292a6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80292aa:	ea4e 050a 	orr.w	r5, lr, sl
 80292ae:	950d      	str	r5, [sp, #52]	; 0x34
 80292b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80292b2:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80292b6:	9d08      	ldr	r5, [sp, #32]
 80292b8:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80292bc:	fb08 fc0c 	mul.w	ip, r8, ip
 80292c0:	fb03 cc0e 	mla	ip, r3, lr, ip
 80292c4:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80292c8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80292ca:	fb01 cc0e 	mla	ip, r1, lr, ip
 80292ce:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80292d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80292d4:	fb09 cc0e 	mla	ip, r9, lr, ip
 80292d8:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80292dc:	fb08 f80e 	mul.w	r8, r8, lr
 80292e0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80292e4:	fb03 8202 	mla	r2, r3, r2, r8
 80292e8:	9b08      	ldr	r3, [sp, #32]
 80292ea:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80292ec:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 80292f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80292f2:	fb01 220a 	mla	r2, r1, sl, r2
 80292f6:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 80292fa:	fb09 2901 	mla	r9, r9, r1, r2
 80292fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8029300:	883b      	ldrh	r3, [r7, #0]
 8029302:	4342      	muls	r2, r0
 8029304:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029308:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802930c:	1c50      	adds	r0, r2, #1
 802930e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029312:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8029316:	ea4c 0c09 	orr.w	ip, ip, r9
 802931a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802931e:	1219      	asrs	r1, r3, #8
 8029320:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8029324:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8029328:	b2c0      	uxtb	r0, r0
 802932a:	fb12 f205 	smulbb	r2, r2, r5
 802932e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8029332:	fb01 2100 	mla	r1, r1, r0, r2
 8029336:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 802933a:	10da      	asrs	r2, r3, #3
 802933c:	fa5f fc8c 	uxtb.w	ip, ip
 8029340:	00db      	lsls	r3, r3, #3
 8029342:	fb1c fc05 	smulbb	ip, ip, r5
 8029346:	b2db      	uxtb	r3, r3
 8029348:	b289      	uxth	r1, r1
 802934a:	fb03 c300 	mla	r3, r3, r0, ip
 802934e:	fa1f fc83 	uxth.w	ip, r3
 8029352:	1c4b      	adds	r3, r1, #1
 8029354:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8029358:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802935c:	fb1e fe05 	smulbb	lr, lr, r5
 8029360:	f10c 0301 	add.w	r3, ip, #1
 8029364:	fb02 e200 	mla	r2, r2, r0, lr
 8029368:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 802936c:	b292      	uxth	r2, r2
 802936e:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8029372:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029376:	430b      	orrs	r3, r1
 8029378:	1c51      	adds	r1, r2, #1
 802937a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802937e:	0952      	lsrs	r2, r2, #5
 8029380:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029384:	4313      	orrs	r3, r2
 8029386:	803b      	strh	r3, [r7, #0]
 8029388:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802938a:	441c      	add	r4, r3
 802938c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802938e:	441e      	add	r6, r3
 8029390:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8029392:	3b01      	subs	r3, #1
 8029394:	3702      	adds	r7, #2
 8029396:	9318      	str	r3, [sp, #96]	; 0x60
 8029398:	e698      	b.n	80290cc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802939a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802939c:	441c      	add	r4, r3
 802939e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80293a0:	441e      	add	r6, r3
 80293a2:	9b07      	ldr	r3, [sp, #28]
 80293a4:	3b01      	subs	r3, #1
 80293a6:	9307      	str	r3, [sp, #28]
 80293a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80293aa:	3302      	adds	r3, #2
 80293ac:	930a      	str	r3, [sp, #40]	; 0x28
 80293ae:	e66d      	b.n	802908c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80293b0:	d023      	beq.n	80293fa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 80293b2:	9b07      	ldr	r3, [sp, #28]
 80293b4:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80293b6:	3b01      	subs	r3, #1
 80293b8:	fb00 4003 	mla	r0, r0, r3, r4
 80293bc:	1400      	asrs	r0, r0, #16
 80293be:	f53f ae82 	bmi.w	80290c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80293c2:	3901      	subs	r1, #1
 80293c4:	4288      	cmp	r0, r1
 80293c6:	f6bf ae7e 	bge.w	80290c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80293ca:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80293cc:	fb01 6303 	mla	r3, r1, r3, r6
 80293d0:	141b      	asrs	r3, r3, #16
 80293d2:	f53f ae78 	bmi.w	80290c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80293d6:	3a01      	subs	r2, #1
 80293d8:	4293      	cmp	r3, r2
 80293da:	f6bf ae74 	bge.w	80290c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80293de:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80293e2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80293e6:	f1bb 0f00 	cmp.w	fp, #0
 80293ea:	dc6c      	bgt.n	80294c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 80293ec:	9b07      	ldr	r3, [sp, #28]
 80293ee:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80293f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80293f4:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80293f8:	930a      	str	r3, [sp, #40]	; 0x28
 80293fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80293fc:	2b00      	cmp	r3, #0
 80293fe:	f340 81b3 	ble.w	8029768 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8029402:	ee30 0a04 	vadd.f32	s0, s0, s8
 8029406:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802940a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802940e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8029410:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8029414:	ee31 1a05 	vadd.f32	s2, s2, s10
 8029418:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802941c:	eef0 6a62 	vmov.f32	s13, s5
 8029420:	ee61 7a27 	vmul.f32	s15, s2, s15
 8029424:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029428:	ee77 2a62 	vsub.f32	s5, s14, s5
 802942c:	ee16 4a90 	vmov	r4, s13
 8029430:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8029434:	eef0 6a43 	vmov.f32	s13, s6
 8029438:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802943c:	ee12 2a90 	vmov	r2, s5
 8029440:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8029444:	fb92 f3f3 	sdiv	r3, r2, r3
 8029448:	ee13 2a10 	vmov	r2, s6
 802944c:	9329      	str	r3, [sp, #164]	; 0xa4
 802944e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8029450:	fb92 f3f3 	sdiv	r3, r2, r3
 8029454:	932a      	str	r3, [sp, #168]	; 0xa8
 8029456:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8029458:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802945a:	3b01      	subs	r3, #1
 802945c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029460:	9317      	str	r3, [sp, #92]	; 0x5c
 8029462:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8029464:	bf08      	it	eq
 8029466:	4613      	moveq	r3, r2
 8029468:	ee16 6a90 	vmov	r6, s13
 802946c:	9307      	str	r3, [sp, #28]
 802946e:	eeb0 3a67 	vmov.f32	s6, s15
 8029472:	eef0 2a47 	vmov.f32	s5, s14
 8029476:	e5fb      	b.n	8029070 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8029478:	2900      	cmp	r1, #0
 802947a:	f43f ae6b 	beq.w	8029154 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802947e:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8029482:	9308      	str	r3, [sp, #32]
 8029484:	0e1b      	lsrs	r3, r3, #24
 8029486:	9311      	str	r3, [sp, #68]	; 0x44
 8029488:	e664      	b.n	8029154 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802948a:	f112 0801 	adds.w	r8, r2, #1
 802948e:	f53f af7b 	bmi.w	8029388 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8029492:	4543      	cmp	r3, r8
 8029494:	f6ff af78 	blt.w	8029388 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8029498:	f11c 0801 	adds.w	r8, ip, #1
 802949c:	f53f af74 	bmi.w	8029388 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80294a0:	45c6      	cmp	lr, r8
 80294a2:	f6ff af71 	blt.w	8029388 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80294a6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80294a8:	9201      	str	r2, [sp, #4]
 80294aa:	fa0f f28e 	sxth.w	r2, lr
 80294ae:	e9cd 1504 	strd	r1, r5, [sp, #16]
 80294b2:	e9cd c002 	strd	ip, r0, [sp, #8]
 80294b6:	9200      	str	r2, [sp, #0]
 80294b8:	b21b      	sxth	r3, r3
 80294ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80294bc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80294be:	4639      	mov	r1, r7
 80294c0:	f7ff fc79 	bl	8028db6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 80294c4:	e760      	b.n	8029388 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80294c6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80294c8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80294ca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80294ce:	1427      	asrs	r7, r4, #16
 80294d0:	1433      	asrs	r3, r6, #16
 80294d2:	fb01 7303 	mla	r3, r1, r3, r7
 80294d6:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 80294da:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80294de:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80294e2:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80294e6:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80294ea:	2a00      	cmp	r2, #0
 80294ec:	f000 8133 	beq.w	8029756 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 80294f0:	687d      	ldr	r5, [r7, #4]
 80294f2:	950e      	str	r5, [sp, #56]	; 0x38
 80294f4:	0e2d      	lsrs	r5, r5, #24
 80294f6:	9515      	str	r5, [sp, #84]	; 0x54
 80294f8:	b178      	cbz	r0, 802951a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80294fa:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80294fe:	3901      	subs	r1, #1
 8029500:	0089      	lsls	r1, r1, #2
 8029502:	3104      	adds	r1, #4
 8029504:	eb07 0e01 	add.w	lr, r7, r1
 8029508:	5879      	ldr	r1, [r7, r1]
 802950a:	9109      	str	r1, [sp, #36]	; 0x24
 802950c:	0e09      	lsrs	r1, r1, #24
 802950e:	9112      	str	r1, [sp, #72]	; 0x48
 8029510:	f8de 1004 	ldr.w	r1, [lr, #4]
 8029514:	910f      	str	r1, [sp, #60]	; 0x3c
 8029516:	0e09      	lsrs	r1, r1, #24
 8029518:	9116      	str	r1, [sp, #88]	; 0x58
 802951a:	b292      	uxth	r2, r2
 802951c:	b280      	uxth	r0, r0
 802951e:	fb02 f800 	mul.w	r8, r2, r0
 8029522:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8029526:	0112      	lsls	r2, r2, #4
 8029528:	eba2 0e08 	sub.w	lr, r2, r8
 802952c:	b280      	uxth	r0, r0
 802952e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8029532:	9915      	ldr	r1, [sp, #84]	; 0x54
 8029534:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029536:	fa1f fe8e 	uxth.w	lr, lr
 802953a:	1a12      	subs	r2, r2, r0
 802953c:	b292      	uxth	r2, r2
 802953e:	fb0e f101 	mul.w	r1, lr, r1
 8029542:	fb02 110c 	mla	r1, r2, ip, r1
 8029546:	fb00 1105 	mla	r1, r0, r5, r1
 802954a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802954c:	fb08 1105 	mla	r1, r8, r5, r1
 8029550:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8029554:	2900      	cmp	r1, #0
 8029556:	f000 80f5 	beq.w	8029744 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 802955a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802955e:	d019      	beq.n	8029594 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 8029560:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8029564:	fb0c fa0a 	mul.w	sl, ip, sl
 8029568:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802956c:	fb0c fc03 	mul.w	ip, ip, r3
 8029570:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8029574:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8029578:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802957c:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8029580:	4453      	add	r3, sl
 8029582:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8029586:	0a1b      	lsrs	r3, r3, #8
 8029588:	0a3f      	lsrs	r7, r7, #8
 802958a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802958e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8029592:	433b      	orrs	r3, r7
 8029594:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029596:	2dff      	cmp	r5, #255	; 0xff
 8029598:	d020      	beq.n	80295dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 802959a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802959c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80295a0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80295a2:	436f      	muls	r7, r5
 80295a4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80295a6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80295aa:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80295ac:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80295b0:	fb05 fa0a 	mul.w	sl, r5, sl
 80295b4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80295b8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80295bc:	44bc      	add	ip, r7
 80295be:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80295c2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80295c6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80295ca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80295ce:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80295d2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80295d6:	ea4c 050a 	orr.w	r5, ip, sl
 80295da:	950e      	str	r5, [sp, #56]	; 0x38
 80295dc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80295de:	2dff      	cmp	r5, #255	; 0xff
 80295e0:	d020      	beq.n	8029624 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 80295e2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80295e4:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80295e8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80295ea:	436f      	muls	r7, r5
 80295ec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80295ee:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80295f2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80295f4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80295f8:	fb05 fa0a 	mul.w	sl, r5, sl
 80295fc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8029600:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029604:	44bc      	add	ip, r7
 8029606:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802960a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802960e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029612:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029616:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802961a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802961e:	ea4c 050a 	orr.w	r5, ip, sl
 8029622:	9509      	str	r5, [sp, #36]	; 0x24
 8029624:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8029626:	2dff      	cmp	r5, #255	; 0xff
 8029628:	d020      	beq.n	802966c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 802962a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802962c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029630:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8029632:	436f      	muls	r7, r5
 8029634:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8029636:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802963a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802963c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029640:	fb05 fa0a 	mul.w	sl, r5, sl
 8029644:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8029648:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802964c:	44bc      	add	ip, r7
 802964e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8029652:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029656:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802965a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802965e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029662:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029666:	ea4c 050a 	orr.w	r5, ip, sl
 802966a:	950f      	str	r5, [sp, #60]	; 0x3c
 802966c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802966e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029672:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8029674:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8029678:	fb0e f707 	mul.w	r7, lr, r7
 802967c:	fb02 770c 	mla	r7, r2, ip, r7
 8029680:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8029684:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8029686:	fb00 770c 	mla	r7, r0, ip, r7
 802968a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802968e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029690:	fb08 770c 	mla	r7, r8, ip, r7
 8029694:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8029698:	fb0e fe0c 	mul.w	lr, lr, ip
 802969c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80296a0:	fb02 e303 	mla	r3, r2, r3, lr
 80296a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80296a6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80296a8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80296ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80296ae:	fb00 330a 	mla	r3, r0, sl, r3
 80296b2:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80296b6:	fb08 3c0c 	mla	ip, r8, ip, r3
 80296ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80296bc:	f8b9 0000 	ldrh.w	r0, [r9]
 80296c0:	4359      	muls	r1, r3
 80296c2:	0a3f      	lsrs	r7, r7, #8
 80296c4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80296c8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80296cc:	1c4b      	adds	r3, r1, #1
 80296ce:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80296d2:	ea47 070c 	orr.w	r7, r7, ip
 80296d6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80296da:	1202      	asrs	r2, r0, #8
 80296dc:	0c3b      	lsrs	r3, r7, #16
 80296de:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80296e2:	b2c9      	uxtb	r1, r1
 80296e4:	fb13 f305 	smulbb	r3, r3, r5
 80296e8:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80296ec:	fb02 3201 	mla	r2, r2, r1, r3
 80296f0:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80296f4:	10c3      	asrs	r3, r0, #3
 80296f6:	b2ff      	uxtb	r7, r7
 80296f8:	00c0      	lsls	r0, r0, #3
 80296fa:	b2c0      	uxtb	r0, r0
 80296fc:	fb17 f705 	smulbb	r7, r7, r5
 8029700:	fb00 7001 	mla	r0, r0, r1, r7
 8029704:	b292      	uxth	r2, r2
 8029706:	fb1c fc05 	smulbb	ip, ip, r5
 802970a:	b280      	uxth	r0, r0
 802970c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8029710:	fb03 c301 	mla	r3, r3, r1, ip
 8029714:	1c51      	adds	r1, r2, #1
 8029716:	f100 0c01 	add.w	ip, r0, #1
 802971a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802971e:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8029722:	b29b      	uxth	r3, r3
 8029724:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8029728:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 802972c:	ea4c 0202 	orr.w	r2, ip, r2
 8029730:	f103 0c01 	add.w	ip, r3, #1
 8029734:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8029738:	095b      	lsrs	r3, r3, #5
 802973a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802973e:	431a      	orrs	r2, r3
 8029740:	f8a9 2000 	strh.w	r2, [r9]
 8029744:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8029746:	441c      	add	r4, r3
 8029748:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802974a:	f109 0902 	add.w	r9, r9, #2
 802974e:	441e      	add	r6, r3
 8029750:	f10b 3bff 	add.w	fp, fp, #4294967295
 8029754:	e647      	b.n	80293e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8029756:	2800      	cmp	r0, #0
 8029758:	f43f aedf 	beq.w	802951a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 802975c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8029760:	9109      	str	r1, [sp, #36]	; 0x24
 8029762:	0e09      	lsrs	r1, r1, #24
 8029764:	9112      	str	r1, [sp, #72]	; 0x48
 8029766:	e6d8      	b.n	802951a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8029768:	b01d      	add	sp, #116	; 0x74
 802976a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802976e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 802976e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029772:	b085      	sub	sp, #20
 8029774:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8029778:	9102      	str	r1, [sp, #8]
 802977a:	2c00      	cmp	r4, #0
 802977c:	fb04 7103 	mla	r1, r4, r3, r7
 8029780:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8029784:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8029788:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 802978c:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8029790:	f2c0 810c 	blt.w	80299ac <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8029794:	45a6      	cmp	lr, r4
 8029796:	f340 8109 	ble.w	80299ac <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 802979a:	2f00      	cmp	r7, #0
 802979c:	f2c0 8104 	blt.w	80299a8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 80297a0:	42bb      	cmp	r3, r7
 80297a2:	f340 8101 	ble.w	80299a8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 80297a6:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 80297aa:	1c7a      	adds	r2, r7, #1
 80297ac:	f100 8101 	bmi.w	80299b2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 80297b0:	4293      	cmp	r3, r2
 80297b2:	f340 80fe 	ble.w	80299b2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 80297b6:	2e00      	cmp	r6, #0
 80297b8:	f000 80fd 	beq.w	80299b6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 80297bc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80297c0:	3401      	adds	r4, #1
 80297c2:	f100 80fc 	bmi.w	80299be <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 80297c6:	45a6      	cmp	lr, r4
 80297c8:	f340 80f9 	ble.w	80299be <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 80297cc:	2800      	cmp	r0, #0
 80297ce:	f000 80f9 	beq.w	80299c4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 80297d2:	2f00      	cmp	r7, #0
 80297d4:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 80297d8:	f2c0 80ef 	blt.w	80299ba <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 80297dc:	42bb      	cmp	r3, r7
 80297de:	f340 80ec 	ble.w	80299ba <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 80297e2:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80297e6:	3701      	adds	r7, #1
 80297e8:	f100 80ef 	bmi.w	80299ca <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 80297ec:	42bb      	cmp	r3, r7
 80297ee:	f340 80ec 	ble.w	80299ca <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 80297f2:	2e00      	cmp	r6, #0
 80297f4:	f000 80eb 	beq.w	80299ce <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 80297f8:	6852      	ldr	r2, [r2, #4]
 80297fa:	b2b6      	uxth	r6, r6
 80297fc:	b280      	uxth	r0, r0
 80297fe:	fb00 fe06 	mul.w	lr, r0, r6
 8029802:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8029806:	0136      	lsls	r6, r6, #4
 8029808:	eba6 070e 	sub.w	r7, r6, lr
 802980c:	b280      	uxth	r0, r0
 802980e:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8029812:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8029816:	b2bf      	uxth	r7, r7
 8029818:	1a1b      	subs	r3, r3, r0
 802981a:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 802981e:	b29b      	uxth	r3, r3
 8029820:	fb07 f60a 	mul.w	r6, r7, sl
 8029824:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8029828:	fb0b 6603 	mla	r6, fp, r3, r6
 802982c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8029830:	fb00 6609 	mla	r6, r0, r9, r6
 8029834:	fb0e 6608 	mla	r6, lr, r8, r6
 8029838:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802983c:	9600      	str	r6, [sp, #0]
 802983e:	2e00      	cmp	r6, #0
 8029840:	f000 80af 	beq.w	80299a2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 8029844:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8029848:	fb0b fc0c 	mul.w	ip, fp, ip
 802984c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8029850:	fb0b f505 	mul.w	r5, fp, r5
 8029854:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8029858:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 802985c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8029860:	44dc      	add	ip, fp
 8029862:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029866:	9501      	str	r5, [sp, #4]
 8029868:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 802986c:	9503      	str	r5, [sp, #12]
 802986e:	9d01      	ldr	r5, [sp, #4]
 8029870:	9e02      	ldr	r6, [sp, #8]
 8029872:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8029876:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802987a:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 802987e:	fb0a fc0c 	mul.w	ip, sl, ip
 8029882:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8029886:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802988a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802988e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8029892:	4465      	add	r5, ip
 8029894:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8029898:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802989c:	fb09 fc0c 	mul.w	ip, r9, ip
 80298a0:	fb09 f904 	mul.w	r9, r9, r4
 80298a4:	f509 7480 	add.w	r4, r9, #256	; 0x100
 80298a8:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80298ac:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 80298b0:	fb08 f404 	mul.w	r4, r8, r4
 80298b4:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80298b8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80298bc:	fb08 f802 	mul.w	r8, r8, r2
 80298c0:	fb0a fa01 	mul.w	sl, sl, r1
 80298c4:	0a22      	lsrs	r2, r4, #8
 80298c6:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 80298ca:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80298ce:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 80298d2:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80298d6:	4414      	add	r4, r2
 80298d8:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80298dc:	f508 7280 	add.w	r2, r8, #256	; 0x100
 80298e0:	0a2d      	lsrs	r5, r5, #8
 80298e2:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80298e6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80298ea:	9a03      	ldr	r2, [sp, #12]
 80298ec:	8836      	ldrh	r6, [r6, #0]
 80298ee:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80298f2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80298f6:	437d      	muls	r5, r7
 80298f8:	4461      	add	r1, ip
 80298fa:	0a24      	lsrs	r4, r4, #8
 80298fc:	fb02 5503 	mla	r5, r2, r3, r5
 8029900:	0a09      	lsrs	r1, r1, #8
 8029902:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8029906:	fb04 540e 	mla	r4, r4, lr, r5
 802990a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802990e:	fb01 4100 	mla	r1, r1, r0, r4
 8029912:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029916:	0a09      	lsrs	r1, r1, #8
 8029918:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802991c:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8029920:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8029924:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8029928:	fb07 f70a 	mul.w	r7, r7, sl
 802992c:	fb03 7101 	mla	r1, r3, r1, r7
 8029930:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8029934:	9b00      	ldr	r3, [sp, #0]
 8029936:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802993a:	fb0e 1e08 	mla	lr, lr, r8, r1
 802993e:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8029942:	fb00 e101 	mla	r1, r0, r1, lr
 8029946:	43da      	mvns	r2, r3
 8029948:	1233      	asrs	r3, r6, #8
 802994a:	b2d2      	uxtb	r2, r2
 802994c:	10f0      	asrs	r0, r6, #3
 802994e:	0a09      	lsrs	r1, r1, #8
 8029950:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8029954:	00f6      	lsls	r6, r6, #3
 8029956:	4353      	muls	r3, r2
 8029958:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802995c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8029960:	b2f6      	uxtb	r6, r6
 8029962:	4321      	orrs	r1, r4
 8029964:	4350      	muls	r0, r2
 8029966:	4356      	muls	r6, r2
 8029968:	1c5a      	adds	r2, r3, #1
 802996a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802996e:	0c0b      	lsrs	r3, r1, #16
 8029970:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029974:	1c42      	adds	r2, r0, #1
 8029976:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802997a:	0a0a      	lsrs	r2, r1, #8
 802997c:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8029980:	021b      	lsls	r3, r3, #8
 8029982:	00d2      	lsls	r2, r2, #3
 8029984:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029988:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802998c:	4313      	orrs	r3, r2
 802998e:	1c72      	adds	r2, r6, #1
 8029990:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8029994:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8029998:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 802999c:	4319      	orrs	r1, r3
 802999e:	9b02      	ldr	r3, [sp, #8]
 80299a0:	8019      	strh	r1, [r3, #0]
 80299a2:	b005      	add	sp, #20
 80299a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80299a8:	2500      	movs	r5, #0
 80299aa:	e6fe      	b.n	80297aa <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 80299ac:	2100      	movs	r1, #0
 80299ae:	460d      	mov	r5, r1
 80299b0:	e706      	b.n	80297c0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 80299b2:	2100      	movs	r1, #0
 80299b4:	e704      	b.n	80297c0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 80299b6:	4631      	mov	r1, r6
 80299b8:	e702      	b.n	80297c0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 80299ba:	2400      	movs	r4, #0
 80299bc:	e713      	b.n	80297e6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 80299be:	2200      	movs	r2, #0
 80299c0:	4614      	mov	r4, r2
 80299c2:	e71a      	b.n	80297fa <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 80299c4:	4602      	mov	r2, r0
 80299c6:	4604      	mov	r4, r0
 80299c8:	e717      	b.n	80297fa <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 80299ca:	2200      	movs	r2, #0
 80299cc:	e715      	b.n	80297fa <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 80299ce:	4632      	mov	r2, r6
 80299d0:	e713      	b.n	80297fa <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
	...

080299d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80299d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80299d8:	b09b      	sub	sp, #108	; 0x6c
 80299da:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 80299de:	9218      	str	r2, [sp, #96]	; 0x60
 80299e0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80299e2:	9116      	str	r1, [sp, #88]	; 0x58
 80299e4:	9307      	str	r3, [sp, #28]
 80299e6:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80299ea:	9019      	str	r0, [sp, #100]	; 0x64
 80299ec:	6850      	ldr	r0, [r2, #4]
 80299ee:	6812      	ldr	r2, [r2, #0]
 80299f0:	fb00 1303 	mla	r3, r0, r3, r1
 80299f4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80299f8:	930a      	str	r3, [sp, #40]	; 0x28
 80299fa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80299fc:	681b      	ldr	r3, [r3, #0]
 80299fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8029a00:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8029a02:	2b00      	cmp	r3, #0
 8029a04:	dc03      	bgt.n	8029a0e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8029a06:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8029a08:	2b00      	cmp	r3, #0
 8029a0a:	f340 8386 	ble.w	802a11a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 8029a0e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029a10:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029a14:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029a18:	1e48      	subs	r0, r1, #1
 8029a1a:	1e57      	subs	r7, r2, #1
 8029a1c:	9b07      	ldr	r3, [sp, #28]
 8029a1e:	2b00      	cmp	r3, #0
 8029a20:	f340 8166 	ble.w	8029cf0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8029a24:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8029a28:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029a2c:	d406      	bmi.n	8029a3c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8029a2e:	4584      	cmp	ip, r0
 8029a30:	da04      	bge.n	8029a3c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8029a32:	2b00      	cmp	r3, #0
 8029a34:	db02      	blt.n	8029a3c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8029a36:	42bb      	cmp	r3, r7
 8029a38:	f2c0 815b 	blt.w	8029cf2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8029a3c:	f11c 0c01 	adds.w	ip, ip, #1
 8029a40:	f100 814b 	bmi.w	8029cda <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8029a44:	4561      	cmp	r1, ip
 8029a46:	f2c0 8148 	blt.w	8029cda <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8029a4a:	3301      	adds	r3, #1
 8029a4c:	f100 8145 	bmi.w	8029cda <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8029a50:	429a      	cmp	r2, r3
 8029a52:	f2c0 8142 	blt.w	8029cda <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8029a56:	9b07      	ldr	r3, [sp, #28]
 8029a58:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8029a5a:	9317      	str	r3, [sp, #92]	; 0x5c
 8029a5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8029a5e:	2b00      	cmp	r3, #0
 8029a60:	f340 8165 	ble.w	8029d2e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8029a64:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8029a66:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029a68:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8029a6c:	689b      	ldr	r3, [r3, #8]
 8029a6e:	1422      	asrs	r2, r4, #16
 8029a70:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8029a74:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8029a78:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8029a7c:	f100 81d5 	bmi.w	8029e2a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8029a80:	f103 38ff 	add.w	r8, r3, #4294967295
 8029a84:	4542      	cmp	r2, r8
 8029a86:	f280 81d0 	bge.w	8029e2a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8029a8a:	f1bc 0f00 	cmp.w	ip, #0
 8029a8e:	f2c0 81cc 	blt.w	8029e2a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8029a92:	f10e 38ff 	add.w	r8, lr, #4294967295
 8029a96:	45c4      	cmp	ip, r8
 8029a98:	f280 81c7 	bge.w	8029e2a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8029a9c:	b21b      	sxth	r3, r3
 8029a9e:	fb0c 2203 	mla	r2, ip, r3, r2
 8029aa2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8029aa4:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8029aa8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8029aac:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8029ab0:	2900      	cmp	r1, #0
 8029ab2:	f000 8182 	beq.w	8029dba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8029ab6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8029aba:	950b      	str	r5, [sp, #44]	; 0x2c
 8029abc:	0e2d      	lsrs	r5, r5, #24
 8029abe:	9512      	str	r5, [sp, #72]	; 0x48
 8029ac0:	b180      	cbz	r0, 8029ae4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8029ac2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8029ac6:	3b01      	subs	r3, #1
 8029ac8:	009b      	lsls	r3, r3, #2
 8029aca:	3304      	adds	r3, #4
 8029acc:	eb08 0c03 	add.w	ip, r8, r3
 8029ad0:	f858 3003 	ldr.w	r3, [r8, r3]
 8029ad4:	9308      	str	r3, [sp, #32]
 8029ad6:	0e1b      	lsrs	r3, r3, #24
 8029ad8:	9310      	str	r3, [sp, #64]	; 0x40
 8029ada:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8029ade:	930c      	str	r3, [sp, #48]	; 0x30
 8029ae0:	0e1b      	lsrs	r3, r3, #24
 8029ae2:	9313      	str	r3, [sp, #76]	; 0x4c
 8029ae4:	b289      	uxth	r1, r1
 8029ae6:	b280      	uxth	r0, r0
 8029ae8:	fb01 f900 	mul.w	r9, r1, r0
 8029aec:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8029af0:	0109      	lsls	r1, r1, #4
 8029af2:	eba1 0809 	sub.w	r8, r1, r9
 8029af6:	b280      	uxth	r0, r0
 8029af8:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8029afc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8029afe:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8029b00:	fa1f f888 	uxth.w	r8, r8
 8029b04:	1a09      	subs	r1, r1, r0
 8029b06:	b289      	uxth	r1, r1
 8029b08:	fb08 f303 	mul.w	r3, r8, r3
 8029b0c:	fb01 330e 	mla	r3, r1, lr, r3
 8029b10:	fb00 3305 	mla	r3, r0, r5, r3
 8029b14:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8029b16:	fb09 3305 	mla	r3, r9, r5, r3
 8029b1a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029b1e:	2b00      	cmp	r3, #0
 8029b20:	f000 80d2 	beq.w	8029cc8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8029b24:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8029b28:	d01b      	beq.n	8029b62 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8029b2a:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8029b2e:	fb0e fa0a 	mul.w	sl, lr, sl
 8029b32:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8029b36:	fb0e fe02 	mul.w	lr, lr, r2
 8029b3a:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8029b3e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8029b42:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8029b46:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8029b4a:	4452      	add	r2, sl
 8029b4c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8029b50:	0a12      	lsrs	r2, r2, #8
 8029b52:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029b56:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8029b5a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8029b5e:	ea42 020c 	orr.w	r2, r2, ip
 8029b62:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029b64:	2dff      	cmp	r5, #255	; 0xff
 8029b66:	d021      	beq.n	8029bac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8029b68:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8029b6a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8029b6e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029b70:	fb05 fb0b 	mul.w	fp, r5, fp
 8029b74:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8029b76:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029b7a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029b7c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029b80:	fb05 fa0a 	mul.w	sl, r5, sl
 8029b84:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029b88:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8029b8c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8029b90:	44de      	add	lr, fp
 8029b92:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029b96:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029b9a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029b9e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029ba2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029ba6:	ea4e 050a 	orr.w	r5, lr, sl
 8029baa:	950b      	str	r5, [sp, #44]	; 0x2c
 8029bac:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8029bae:	2dff      	cmp	r5, #255	; 0xff
 8029bb0:	d021      	beq.n	8029bf6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8029bb2:	9d08      	ldr	r5, [sp, #32]
 8029bb4:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8029bb8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8029bba:	fb05 fb0b 	mul.w	fp, r5, fp
 8029bbe:	9d08      	ldr	r5, [sp, #32]
 8029bc0:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8029bc4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8029bc6:	fb05 fa0e 	mul.w	sl, r5, lr
 8029bca:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029bce:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029bd2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8029bd6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8029bda:	44de      	add	lr, fp
 8029bdc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029be0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029be4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029be8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029bec:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029bf0:	ea4e 050a 	orr.w	r5, lr, sl
 8029bf4:	9508      	str	r5, [sp, #32]
 8029bf6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8029bf8:	2dff      	cmp	r5, #255	; 0xff
 8029bfa:	d021      	beq.n	8029c40 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8029bfc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8029bfe:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8029c02:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8029c04:	fb05 fb0b 	mul.w	fp, r5, fp
 8029c08:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8029c0a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029c0e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8029c10:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029c14:	fb05 fa0a 	mul.w	sl, r5, sl
 8029c18:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029c1c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8029c20:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8029c24:	44de      	add	lr, fp
 8029c26:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029c2a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029c2e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029c32:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029c36:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029c3a:	ea4e 050a 	orr.w	r5, lr, sl
 8029c3e:	950c      	str	r5, [sp, #48]	; 0x30
 8029c40:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8029c42:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8029c46:	9d08      	ldr	r5, [sp, #32]
 8029c48:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8029c4c:	fb08 fc0c 	mul.w	ip, r8, ip
 8029c50:	fb01 cc0e 	mla	ip, r1, lr, ip
 8029c54:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8029c58:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8029c5a:	fb00 cc0e 	mla	ip, r0, lr, ip
 8029c5e:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8029c62:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8029c64:	fb09 cc0e 	mla	ip, r9, lr, ip
 8029c68:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8029c6c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8029c70:	fb08 f80e 	mul.w	r8, r8, lr
 8029c74:	fb01 8202 	mla	r2, r1, r2, r8
 8029c78:	9908      	ldr	r1, [sp, #32]
 8029c7a:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8029c7e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8029c80:	fb00 220a 	mla	r2, r0, sl, r2
 8029c84:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8029c88:	fb09 2900 	mla	r9, r9, r0, r2
 8029c8c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029c90:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8029c94:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029c98:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8029c9c:	ea4c 0c09 	orr.w	ip, ip, r9
 8029ca0:	2bff      	cmp	r3, #255	; 0xff
 8029ca2:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8029ca6:	f040 8091 	bne.w	8029dcc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8029caa:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8029cae:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8029cb2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8029cb6:	f022 0207 	bic.w	r2, r2, #7
 8029cba:	431a      	orrs	r2, r3
 8029cbc:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8029cc0:	ea4c 0c02 	orr.w	ip, ip, r2
 8029cc4:	f8a7 c000 	strh.w	ip, [r7]
 8029cc8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029cca:	441c      	add	r4, r3
 8029ccc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029cce:	441e      	add	r6, r3
 8029cd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8029cd2:	3b01      	subs	r3, #1
 8029cd4:	3702      	adds	r7, #2
 8029cd6:	9317      	str	r3, [sp, #92]	; 0x5c
 8029cd8:	e6c0      	b.n	8029a5c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8029cda:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029cdc:	441c      	add	r4, r3
 8029cde:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029ce0:	441e      	add	r6, r3
 8029ce2:	9b07      	ldr	r3, [sp, #28]
 8029ce4:	3b01      	subs	r3, #1
 8029ce6:	9307      	str	r3, [sp, #28]
 8029ce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029cea:	3302      	adds	r3, #2
 8029cec:	930a      	str	r3, [sp, #40]	; 0x28
 8029cee:	e695      	b.n	8029a1c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8029cf0:	d024      	beq.n	8029d3c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8029cf2:	9b07      	ldr	r3, [sp, #28]
 8029cf4:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8029cf6:	3b01      	subs	r3, #1
 8029cf8:	fb00 4003 	mla	r0, r0, r3, r4
 8029cfc:	1400      	asrs	r0, r0, #16
 8029cfe:	f53f aeaa 	bmi.w	8029a56 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8029d02:	3901      	subs	r1, #1
 8029d04:	4288      	cmp	r0, r1
 8029d06:	f6bf aea6 	bge.w	8029a56 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8029d0a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8029d0c:	fb01 6303 	mla	r3, r1, r3, r6
 8029d10:	141b      	asrs	r3, r3, #16
 8029d12:	f53f aea0 	bmi.w	8029a56 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8029d16:	3a01      	subs	r2, #1
 8029d18:	4293      	cmp	r3, r2
 8029d1a:	f6bf ae9c 	bge.w	8029a56 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8029d1e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8029d22:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8029d26:	f1bb 0f00 	cmp.w	fp, #0
 8029d2a:	f300 809a 	bgt.w	8029e62 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8029d2e:	9b07      	ldr	r3, [sp, #28]
 8029d30:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8029d34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029d36:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8029d3a:	930a      	str	r3, [sp, #40]	; 0x28
 8029d3c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8029d3e:	2b00      	cmp	r3, #0
 8029d40:	f340 81eb 	ble.w	802a11a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 8029d44:	ee30 0a04 	vadd.f32	s0, s0, s8
 8029d48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029d4c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8029d50:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029d52:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8029d56:	ee31 1a05 	vadd.f32	s2, s2, s10
 8029d5a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8029d5e:	eef0 6a62 	vmov.f32	s13, s5
 8029d62:	ee61 7a27 	vmul.f32	s15, s2, s15
 8029d66:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029d6a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8029d6e:	ee16 4a90 	vmov	r4, s13
 8029d72:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8029d76:	eef0 6a43 	vmov.f32	s13, s6
 8029d7a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8029d7e:	ee12 2a90 	vmov	r2, s5
 8029d82:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8029d86:	fb92 f3f3 	sdiv	r3, r2, r3
 8029d8a:	ee13 2a10 	vmov	r2, s6
 8029d8e:	9327      	str	r3, [sp, #156]	; 0x9c
 8029d90:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029d92:	fb92 f3f3 	sdiv	r3, r2, r3
 8029d96:	9328      	str	r3, [sp, #160]	; 0xa0
 8029d98:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8029d9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8029d9c:	3b01      	subs	r3, #1
 8029d9e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029da2:	9316      	str	r3, [sp, #88]	; 0x58
 8029da4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029da6:	bf08      	it	eq
 8029da8:	4613      	moveq	r3, r2
 8029daa:	ee16 6a90 	vmov	r6, s13
 8029dae:	9307      	str	r3, [sp, #28]
 8029db0:	eeb0 3a67 	vmov.f32	s6, s15
 8029db4:	eef0 2a47 	vmov.f32	s5, s14
 8029db8:	e622      	b.n	8029a00 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 8029dba:	2800      	cmp	r0, #0
 8029dbc:	f43f ae92 	beq.w	8029ae4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8029dc0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8029dc4:	9308      	str	r3, [sp, #32]
 8029dc6:	0e1b      	lsrs	r3, r3, #24
 8029dc8:	9310      	str	r3, [sp, #64]	; 0x40
 8029dca:	e68b      	b.n	8029ae4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8029dcc:	8839      	ldrh	r1, [r7, #0]
 8029dce:	4dd4      	ldr	r5, [pc, #848]	; (802a120 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>)
 8029dd0:	43db      	mvns	r3, r3
 8029dd2:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8029dd6:	fa5f f883 	uxtb.w	r8, r3
 8029dda:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8029dde:	fb0e fe08 	mul.w	lr, lr, r8
 8029de2:	10c8      	asrs	r0, r1, #3
 8029de4:	00cb      	lsls	r3, r1, #3
 8029de6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8029dea:	f10e 0101 	add.w	r1, lr, #1
 8029dee:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8029df2:	fb00 f008 	mul.w	r0, r0, r8
 8029df6:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8029dfa:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8029dfe:	f100 0e01 	add.w	lr, r0, #1
 8029e02:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8029e06:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8029e0a:	b2db      	uxtb	r3, r3
 8029e0c:	b2c9      	uxtb	r1, r1
 8029e0e:	00d2      	lsls	r2, r2, #3
 8029e10:	fb03 f308 	mul.w	r3, r3, r8
 8029e14:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 8029e18:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029e1c:	430a      	orrs	r2, r1
 8029e1e:	1c59      	adds	r1, r3, #1
 8029e20:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8029e24:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8029e28:	e748      	b.n	8029cbc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8029e2a:	f112 0801 	adds.w	r8, r2, #1
 8029e2e:	f53f af4b 	bmi.w	8029cc8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8029e32:	4543      	cmp	r3, r8
 8029e34:	f6ff af48 	blt.w	8029cc8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8029e38:	f11c 0801 	adds.w	r8, ip, #1
 8029e3c:	f53f af44 	bmi.w	8029cc8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8029e40:	45c6      	cmp	lr, r8
 8029e42:	f6ff af41 	blt.w	8029cc8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8029e46:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8029e4a:	fa0f f28e 	sxth.w	r2, lr
 8029e4e:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8029e52:	9200      	str	r2, [sp, #0]
 8029e54:	b21b      	sxth	r3, r3
 8029e56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8029e58:	9819      	ldr	r0, [sp, #100]	; 0x64
 8029e5a:	4639      	mov	r1, r7
 8029e5c:	f7ff fc87 	bl	802976e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8029e60:	e732      	b.n	8029cc8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8029e62:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029e64:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8029e66:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8029e6a:	1421      	asrs	r1, r4, #16
 8029e6c:	1433      	asrs	r3, r6, #16
 8029e6e:	fb07 1303 	mla	r3, r7, r3, r1
 8029e72:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8029e74:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8029e78:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8029e7c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029e80:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8029e84:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8029e88:	2a00      	cmp	r2, #0
 8029e8a:	f000 8107 	beq.w	802a09c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c8>
 8029e8e:	684d      	ldr	r5, [r1, #4]
 8029e90:	950d      	str	r5, [sp, #52]	; 0x34
 8029e92:	0e2d      	lsrs	r5, r5, #24
 8029e94:	9514      	str	r5, [sp, #80]	; 0x50
 8029e96:	b178      	cbz	r0, 8029eb8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8029e98:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8029e9c:	3f01      	subs	r7, #1
 8029e9e:	00bf      	lsls	r7, r7, #2
 8029ea0:	3704      	adds	r7, #4
 8029ea2:	eb01 0e07 	add.w	lr, r1, r7
 8029ea6:	59c9      	ldr	r1, [r1, r7]
 8029ea8:	9109      	str	r1, [sp, #36]	; 0x24
 8029eaa:	0e09      	lsrs	r1, r1, #24
 8029eac:	9111      	str	r1, [sp, #68]	; 0x44
 8029eae:	f8de 1004 	ldr.w	r1, [lr, #4]
 8029eb2:	910e      	str	r1, [sp, #56]	; 0x38
 8029eb4:	0e09      	lsrs	r1, r1, #24
 8029eb6:	9115      	str	r1, [sp, #84]	; 0x54
 8029eb8:	b292      	uxth	r2, r2
 8029eba:	b280      	uxth	r0, r0
 8029ebc:	fb02 f900 	mul.w	r9, r2, r0
 8029ec0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8029ec4:	0112      	lsls	r2, r2, #4
 8029ec6:	eba2 0e09 	sub.w	lr, r2, r9
 8029eca:	b280      	uxth	r0, r0
 8029ecc:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8029ed0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8029ed2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029ed4:	fa1f fe8e 	uxth.w	lr, lr
 8029ed8:	1a09      	subs	r1, r1, r0
 8029eda:	b289      	uxth	r1, r1
 8029edc:	fb0e f202 	mul.w	r2, lr, r2
 8029ee0:	fb01 220c 	mla	r2, r1, ip, r2
 8029ee4:	fb00 2205 	mla	r2, r0, r5, r2
 8029ee8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029eea:	fb09 2205 	mla	r2, r9, r5, r2
 8029eee:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8029ef2:	2a00      	cmp	r2, #0
 8029ef4:	f000 80c9 	beq.w	802a08a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b6>
 8029ef8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8029efc:	d019      	beq.n	8029f32 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 8029efe:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8029f02:	fb0c fa0a 	mul.w	sl, ip, sl
 8029f06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8029f0a:	fb0c fc03 	mul.w	ip, ip, r3
 8029f0e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8029f12:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8029f16:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8029f1a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8029f1e:	4453      	add	r3, sl
 8029f20:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8029f24:	0a1b      	lsrs	r3, r3, #8
 8029f26:	0a3f      	lsrs	r7, r7, #8
 8029f28:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8029f2c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8029f30:	433b      	orrs	r3, r7
 8029f32:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8029f34:	2dff      	cmp	r5, #255	; 0xff
 8029f36:	d020      	beq.n	8029f7a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 8029f38:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8029f3a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029f3e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8029f40:	436f      	muls	r7, r5
 8029f42:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8029f44:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029f48:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8029f4a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029f4e:	fb05 fa0a 	mul.w	sl, r5, sl
 8029f52:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8029f56:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029f5a:	44bc      	add	ip, r7
 8029f5c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8029f60:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029f64:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029f68:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029f6c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029f70:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029f74:	ea4c 050a 	orr.w	r5, ip, sl
 8029f78:	950d      	str	r5, [sp, #52]	; 0x34
 8029f7a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029f7c:	2dff      	cmp	r5, #255	; 0xff
 8029f7e:	d020      	beq.n	8029fc2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 8029f80:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8029f82:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029f86:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029f88:	436f      	muls	r7, r5
 8029f8a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8029f8c:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8029f90:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029f92:	fb05 fa0c 	mul.w	sl, r5, ip
 8029f96:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029f9a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029f9e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8029fa2:	44bc      	add	ip, r7
 8029fa4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8029fa8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029fac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029fb0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029fb4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029fb8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029fbc:	ea4c 050a 	orr.w	r5, ip, sl
 8029fc0:	9509      	str	r5, [sp, #36]	; 0x24
 8029fc2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029fc4:	2dff      	cmp	r5, #255	; 0xff
 8029fc6:	d020      	beq.n	802a00a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 8029fc8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029fca:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029fce:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029fd0:	436f      	muls	r7, r5
 8029fd2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029fd4:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029fd8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029fda:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029fde:	fb05 fa0a 	mul.w	sl, r5, sl
 8029fe2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8029fe6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029fea:	44bc      	add	ip, r7
 8029fec:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8029ff0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029ff4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029ff8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029ffc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a000:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a004:	ea4c 050a 	orr.w	r5, ip, sl
 802a008:	950e      	str	r5, [sp, #56]	; 0x38
 802a00a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802a00c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802a010:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802a012:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802a016:	fb0e f707 	mul.w	r7, lr, r7
 802a01a:	fb01 770c 	mla	r7, r1, ip, r7
 802a01e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802a022:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802a024:	fb00 770c 	mla	r7, r0, ip, r7
 802a028:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802a02c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802a02e:	fb09 770c 	mla	r7, r9, ip, r7
 802a032:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 802a036:	fb0e fe0c 	mul.w	lr, lr, ip
 802a03a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802a03e:	fb01 e303 	mla	r3, r1, r3, lr
 802a042:	9909      	ldr	r1, [sp, #36]	; 0x24
 802a044:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802a048:	990e      	ldr	r1, [sp, #56]	; 0x38
 802a04a:	fb00 330a 	mla	r3, r0, sl, r3
 802a04e:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802a052:	fb09 3c0c 	mla	ip, r9, ip, r3
 802a056:	0a3f      	lsrs	r7, r7, #8
 802a058:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a05c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802a060:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802a064:	ea47 070c 	orr.w	r7, r7, ip
 802a068:	2aff      	cmp	r2, #255	; 0xff
 802a06a:	ea4f 2317 	mov.w	r3, r7, lsr #8
 802a06e:	d11e      	bne.n	802a0ae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6da>
 802a070:	097a      	lsrs	r2, r7, #5
 802a072:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802a076:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802a07a:	f023 0307 	bic.w	r3, r3, #7
 802a07e:	4313      	orrs	r3, r2
 802a080:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802a084:	431f      	orrs	r7, r3
 802a086:	f8a8 7000 	strh.w	r7, [r8]
 802a08a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802a08c:	441c      	add	r4, r3
 802a08e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802a090:	f108 0802 	add.w	r8, r8, #2
 802a094:	441e      	add	r6, r3
 802a096:	f10b 3bff 	add.w	fp, fp, #4294967295
 802a09a:	e644      	b.n	8029d26 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 802a09c:	2800      	cmp	r0, #0
 802a09e:	f43f af0b 	beq.w	8029eb8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802a0a2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 802a0a6:	9109      	str	r1, [sp, #36]	; 0x24
 802a0a8:	0e09      	lsrs	r1, r1, #24
 802a0aa:	9111      	str	r1, [sp, #68]	; 0x44
 802a0ac:	e704      	b.n	8029eb8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802a0ae:	f8b8 1000 	ldrh.w	r1, [r8]
 802a0b2:	43d2      	mvns	r2, r2
 802a0b4:	ea4f 2c21 	mov.w	ip, r1, asr #8
 802a0b8:	fa5f fe82 	uxtb.w	lr, r2
 802a0bc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802a0c0:	fb0c fc0e 	mul.w	ip, ip, lr
 802a0c4:	10c8      	asrs	r0, r1, #3
 802a0c6:	00ca      	lsls	r2, r1, #3
 802a0c8:	f10c 0101 	add.w	r1, ip, #1
 802a0cc:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802a0d0:	0c39      	lsrs	r1, r7, #16
 802a0d2:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802a0d6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802a0da:	4911      	ldr	r1, [pc, #68]	; (802a120 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>)
 802a0dc:	fb00 f00e 	mul.w	r0, r0, lr
 802a0e0:	fa5f fc8c 	uxtb.w	ip, ip
 802a0e4:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 802a0e8:	b2d2      	uxtb	r2, r2
 802a0ea:	1c41      	adds	r1, r0, #1
 802a0ec:	fb02 f20e 	mul.w	r2, r2, lr
 802a0f0:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802a0f4:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802a0f8:	1c51      	adds	r1, r2, #1
 802a0fa:	00c0      	lsls	r0, r0, #3
 802a0fc:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802a100:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802a104:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802a108:	ea4c 0c00 	orr.w	ip, ip, r0
 802a10c:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802a110:	ea47 0c0c 	orr.w	ip, r7, ip
 802a114:	f8a8 c000 	strh.w	ip, [r8]
 802a118:	e7b7      	b.n	802a08a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b6>
 802a11a:	b01b      	add	sp, #108	; 0x6c
 802a11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a120:	fffff800 	.word	0xfffff800

0802a124 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 802a124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a128:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 802a12c:	2d00      	cmp	r5, #0
 802a12e:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802a132:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802a136:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 802a13a:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 802a13e:	fb05 0e03 	mla	lr, r5, r3, r0
 802a142:	f2c0 808c 	blt.w	802a25e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 802a146:	45a9      	cmp	r9, r5
 802a148:	f340 8089 	ble.w	802a25e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 802a14c:	2800      	cmp	r0, #0
 802a14e:	f2c0 8084 	blt.w	802a25a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 802a152:	4580      	cmp	r8, r0
 802a154:	f340 8081 	ble.w	802a25a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 802a158:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802a15c:	f01e 0f01 	tst.w	lr, #1
 802a160:	5d16      	ldrb	r6, [r2, r4]
 802a162:	bf0c      	ite	eq
 802a164:	f006 060f 	andeq.w	r6, r6, #15
 802a168:	1136      	asrne	r6, r6, #4
 802a16a:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802a16e:	b2f6      	uxtb	r6, r6
 802a170:	1c44      	adds	r4, r0, #1
 802a172:	d477      	bmi.n	802a264 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 802a174:	45a0      	cmp	r8, r4
 802a176:	dd75      	ble.n	802a264 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 802a178:	2f00      	cmp	r7, #0
 802a17a:	d075      	beq.n	802a268 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 802a17c:	f10e 0a01 	add.w	sl, lr, #1
 802a180:	ea4f 045a 	mov.w	r4, sl, lsr #1
 802a184:	f01a 0f01 	tst.w	sl, #1
 802a188:	5d14      	ldrb	r4, [r2, r4]
 802a18a:	bf0c      	ite	eq
 802a18c:	f004 040f 	andeq.w	r4, r4, #15
 802a190:	1124      	asrne	r4, r4, #4
 802a192:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802a196:	b2e4      	uxtb	r4, r4
 802a198:	3501      	adds	r5, #1
 802a19a:	d469      	bmi.n	802a270 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 802a19c:	45a9      	cmp	r9, r5
 802a19e:	dd67      	ble.n	802a270 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 802a1a0:	f1bc 0f00 	cmp.w	ip, #0
 802a1a4:	d067      	beq.n	802a276 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 802a1a6:	2800      	cmp	r0, #0
 802a1a8:	db60      	blt.n	802a26c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 802a1aa:	4580      	cmp	r8, r0
 802a1ac:	dd5e      	ble.n	802a26c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 802a1ae:	eb03 090e 	add.w	r9, r3, lr
 802a1b2:	ea4f 0559 	mov.w	r5, r9, lsr #1
 802a1b6:	f019 0f01 	tst.w	r9, #1
 802a1ba:	5d55      	ldrb	r5, [r2, r5]
 802a1bc:	bf0c      	ite	eq
 802a1be:	f005 050f 	andeq.w	r5, r5, #15
 802a1c2:	112d      	asrne	r5, r5, #4
 802a1c4:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802a1c8:	b2ed      	uxtb	r5, r5
 802a1ca:	3001      	adds	r0, #1
 802a1cc:	d456      	bmi.n	802a27c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 802a1ce:	4580      	cmp	r8, r0
 802a1d0:	dd54      	ble.n	802a27c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 802a1d2:	2f00      	cmp	r7, #0
 802a1d4:	d054      	beq.n	802a280 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 802a1d6:	3301      	adds	r3, #1
 802a1d8:	449e      	add	lr, r3
 802a1da:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802a1de:	f01e 0f01 	tst.w	lr, #1
 802a1e2:	5cd0      	ldrb	r0, [r2, r3]
 802a1e4:	bf0c      	ite	eq
 802a1e6:	f000 000f 	andeq.w	r0, r0, #15
 802a1ea:	1100      	asrne	r0, r0, #4
 802a1ec:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802a1f0:	b2c3      	uxtb	r3, r0
 802a1f2:	b2ba      	uxth	r2, r7
 802a1f4:	fa1f fc8c 	uxth.w	ip, ip
 802a1f8:	fb02 f00c 	mul.w	r0, r2, ip
 802a1fc:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802a200:	0112      	lsls	r2, r2, #4
 802a202:	fa1f fc8c 	uxth.w	ip, ip
 802a206:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 802a20a:	1a12      	subs	r2, r2, r0
 802a20c:	eba7 070c 	sub.w	r7, r7, ip
 802a210:	b292      	uxth	r2, r2
 802a212:	b2bf      	uxth	r7, r7
 802a214:	4362      	muls	r2, r4
 802a216:	fb06 2207 	mla	r2, r6, r7, r2
 802a21a:	fb0c 2505 	mla	r5, ip, r5, r2
 802a21e:	fb00 5303 	mla	r3, r0, r3, r5
 802a222:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a226:	b1b3      	cbz	r3, 802a256 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 802a228:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 802a22c:	435a      	muls	r2, r3
 802a22e:	1c53      	adds	r3, r2, #1
 802a230:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802a234:	4a2d      	ldr	r2, [pc, #180]	; (802a2ec <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 802a236:	121b      	asrs	r3, r3, #8
 802a238:	6812      	ldr	r2, [r2, #0]
 802a23a:	2bff      	cmp	r3, #255	; 0xff
 802a23c:	ea4f 2612 	mov.w	r6, r2, lsr #8
 802a240:	d120      	bne.n	802a284 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 802a242:	4b2b      	ldr	r3, [pc, #172]	; (802a2f0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 802a244:	0950      	lsrs	r0, r2, #5
 802a246:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802a24a:	4033      	ands	r3, r6
 802a24c:	4318      	orrs	r0, r3
 802a24e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a252:	4302      	orrs	r2, r0
 802a254:	800a      	strh	r2, [r1, #0]
 802a256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a25a:	2600      	movs	r6, #0
 802a25c:	e788      	b.n	802a170 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 802a25e:	2400      	movs	r4, #0
 802a260:	4626      	mov	r6, r4
 802a262:	e799      	b.n	802a198 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 802a264:	2400      	movs	r4, #0
 802a266:	e797      	b.n	802a198 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 802a268:	463c      	mov	r4, r7
 802a26a:	e795      	b.n	802a198 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 802a26c:	2500      	movs	r5, #0
 802a26e:	e7ac      	b.n	802a1ca <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 802a270:	2300      	movs	r3, #0
 802a272:	461d      	mov	r5, r3
 802a274:	e7bd      	b.n	802a1f2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802a276:	4663      	mov	r3, ip
 802a278:	4665      	mov	r5, ip
 802a27a:	e7ba      	b.n	802a1f2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802a27c:	2300      	movs	r3, #0
 802a27e:	e7b8      	b.n	802a1f2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802a280:	463b      	mov	r3, r7
 802a282:	e7b6      	b.n	802a1f2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802a284:	880d      	ldrh	r5, [r1, #0]
 802a286:	b29f      	uxth	r7, r3
 802a288:	122c      	asrs	r4, r5, #8
 802a28a:	f3c2 4007 	ubfx	r0, r2, #16, #8
 802a28e:	43db      	mvns	r3, r3
 802a290:	b2db      	uxtb	r3, r3
 802a292:	fb10 f007 	smulbb	r0, r0, r7
 802a296:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802a29a:	fb04 0403 	mla	r4, r4, r3, r0
 802a29e:	b2f6      	uxtb	r6, r6
 802a2a0:	10e8      	asrs	r0, r5, #3
 802a2a2:	b2d2      	uxtb	r2, r2
 802a2a4:	00ed      	lsls	r5, r5, #3
 802a2a6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802a2aa:	fb12 f207 	smulbb	r2, r2, r7
 802a2ae:	fb16 f607 	smulbb	r6, r6, r7
 802a2b2:	b2ed      	uxtb	r5, r5
 802a2b4:	b2a4      	uxth	r4, r4
 802a2b6:	fb00 6603 	mla	r6, r0, r3, r6
 802a2ba:	fb05 2303 	mla	r3, r5, r3, r2
 802a2be:	b29a      	uxth	r2, r3
 802a2c0:	1c63      	adds	r3, r4, #1
 802a2c2:	b2b0      	uxth	r0, r6
 802a2c4:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802a2c8:	1c53      	adds	r3, r2, #1
 802a2ca:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802a2ce:	1c42      	adds	r2, r0, #1
 802a2d0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802a2d4:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802a2d8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802a2dc:	0940      	lsrs	r0, r0, #5
 802a2de:	4323      	orrs	r3, r4
 802a2e0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802a2e4:	4303      	orrs	r3, r0
 802a2e6:	800b      	strh	r3, [r1, #0]
 802a2e8:	e7b5      	b.n	802a256 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 802a2ea:	bf00      	nop
 802a2ec:	2000af58 	.word	0x2000af58
 802a2f0:	00fff800 	.word	0x00fff800

0802a2f4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802a2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a2f8:	b097      	sub	sp, #92	; 0x5c
 802a2fa:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 802a2fe:	9214      	str	r2, [sp, #80]	; 0x50
 802a300:	9309      	str	r3, [sp, #36]	; 0x24
 802a302:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802a304:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 802a308:	910d      	str	r1, [sp, #52]	; 0x34
 802a30a:	930f      	str	r3, [sp, #60]	; 0x3c
 802a30c:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 802a310:	9015      	str	r0, [sp, #84]	; 0x54
 802a312:	6850      	ldr	r0, [r2, #4]
 802a314:	6812      	ldr	r2, [r2, #0]
 802a316:	fb00 1303 	mla	r3, r0, r3, r1
 802a31a:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802a31e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802a320:	689b      	ldr	r3, [r3, #8]
 802a322:	3301      	adds	r3, #1
 802a324:	f023 0301 	bic.w	r3, r3, #1
 802a328:	930a      	str	r3, [sp, #40]	; 0x28
 802a32a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802a32c:	681f      	ldr	r7, [r3, #0]
 802a32e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802a330:	2b00      	cmp	r3, #0
 802a332:	dc03      	bgt.n	802a33c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802a334:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802a336:	2b00      	cmp	r3, #0
 802a338:	f340 8287 	ble.w	802a84a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 802a33c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802a33e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a342:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802a346:	1e48      	subs	r0, r1, #1
 802a348:	f102 3cff 	add.w	ip, r2, #4294967295
 802a34c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a34e:	2b00      	cmp	r3, #0
 802a350:	f340 80c4 	ble.w	802a4dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 802a354:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802a358:	ea4f 4326 	mov.w	r3, r6, asr #16
 802a35c:	d406      	bmi.n	802a36c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802a35e:	4586      	cmp	lr, r0
 802a360:	da04      	bge.n	802a36c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802a362:	2b00      	cmp	r3, #0
 802a364:	db02      	blt.n	802a36c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802a366:	4563      	cmp	r3, ip
 802a368:	f2c0 80b9 	blt.w	802a4de <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802a36c:	f11e 0e01 	adds.w	lr, lr, #1
 802a370:	f100 80aa 	bmi.w	802a4c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 802a374:	4571      	cmp	r1, lr
 802a376:	f2c0 80a7 	blt.w	802a4c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 802a37a:	3301      	adds	r3, #1
 802a37c:	f100 80a4 	bmi.w	802a4c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 802a380:	429a      	cmp	r2, r3
 802a382:	f2c0 80a1 	blt.w	802a4c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 802a386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a388:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 802a38c:	930e      	str	r3, [sp, #56]	; 0x38
 802a38e:	46c8      	mov	r8, r9
 802a390:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802a392:	2b00      	cmp	r3, #0
 802a394:	f340 80c3 	ble.w	802a51e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802a398:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802a39a:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802a39e:	1423      	asrs	r3, r4, #16
 802a3a0:	ea4f 4026 	mov.w	r0, r6, asr #16
 802a3a4:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802a3a8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802a3ac:	f100 814d 	bmi.w	802a64a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802a3b0:	f10c 3bff 	add.w	fp, ip, #4294967295
 802a3b4:	455b      	cmp	r3, fp
 802a3b6:	f280 8148 	bge.w	802a64a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802a3ba:	2800      	cmp	r0, #0
 802a3bc:	f2c0 8145 	blt.w	802a64a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802a3c0:	f10e 3bff 	add.w	fp, lr, #4294967295
 802a3c4:	4558      	cmp	r0, fp
 802a3c6:	f280 8140 	bge.w	802a64a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802a3ca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802a3cc:	fb00 3305 	mla	r3, r0, r5, r3
 802a3d0:	0858      	lsrs	r0, r3, #1
 802a3d2:	07dd      	lsls	r5, r3, #31
 802a3d4:	f817 c000 	ldrb.w	ip, [r7, r0]
 802a3d8:	bf54      	ite	pl
 802a3da:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a3de:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a3e2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a3e6:	fa5f fc8c 	uxtb.w	ip, ip
 802a3ea:	2a00      	cmp	r2, #0
 802a3ec:	f000 80db 	beq.w	802a5a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b2>
 802a3f0:	1c58      	adds	r0, r3, #1
 802a3f2:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802a3f6:	07c0      	lsls	r0, r0, #31
 802a3f8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802a3fc:	bf54      	ite	pl
 802a3fe:	f00e 0e0f 	andpl.w	lr, lr, #15
 802a402:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802a406:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802a40a:	fa5f f08e 	uxtb.w	r0, lr
 802a40e:	9010      	str	r0, [sp, #64]	; 0x40
 802a410:	b1c9      	cbz	r1, 802a446 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802a412:	4453      	add	r3, sl
 802a414:	0858      	lsrs	r0, r3, #1
 802a416:	07dd      	lsls	r5, r3, #31
 802a418:	5c38      	ldrb	r0, [r7, r0]
 802a41a:	bf54      	ite	pl
 802a41c:	f000 000f 	andpl.w	r0, r0, #15
 802a420:	1100      	asrmi	r0, r0, #4
 802a422:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802a426:	3301      	adds	r3, #1
 802a428:	b2c0      	uxtb	r0, r0
 802a42a:	900b      	str	r0, [sp, #44]	; 0x2c
 802a42c:	0858      	lsrs	r0, r3, #1
 802a42e:	07dd      	lsls	r5, r3, #31
 802a430:	f817 e000 	ldrb.w	lr, [r7, r0]
 802a434:	bf54      	ite	pl
 802a436:	f00e 030f 	andpl.w	r3, lr, #15
 802a43a:	ea4f 132e 	movmi.w	r3, lr, asr #4
 802a43e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802a442:	b2db      	uxtb	r3, r3
 802a444:	9311      	str	r3, [sp, #68]	; 0x44
 802a446:	b292      	uxth	r2, r2
 802a448:	b289      	uxth	r1, r1
 802a44a:	fb02 f301 	mul.w	r3, r2, r1
 802a44e:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802a452:	0112      	lsls	r2, r2, #4
 802a454:	b289      	uxth	r1, r1
 802a456:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802a45a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802a45c:	1ad2      	subs	r2, r2, r3
 802a45e:	1a40      	subs	r0, r0, r1
 802a460:	b292      	uxth	r2, r2
 802a462:	436a      	muls	r2, r5
 802a464:	b280      	uxth	r0, r0
 802a466:	fb0c 2c00 	mla	ip, ip, r0, r2
 802a46a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802a46c:	fb01 c102 	mla	r1, r1, r2, ip
 802a470:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802a472:	fb03 1302 	mla	r3, r3, r2, r1
 802a476:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a47a:	b1db      	cbz	r3, 802a4b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802a47c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802a47e:	4353      	muls	r3, r2
 802a480:	1c5a      	adds	r2, r3, #1
 802a482:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802a486:	4ac6      	ldr	r2, [pc, #792]	; (802a7a0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802a488:	121b      	asrs	r3, r3, #8
 802a48a:	6812      	ldr	r2, [r2, #0]
 802a48c:	2bff      	cmp	r3, #255	; 0xff
 802a48e:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802a492:	f040 8099 	bne.w	802a5c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 802a496:	0953      	lsrs	r3, r2, #5
 802a498:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802a49c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802a4a0:	f02c 0c07 	bic.w	ip, ip, #7
 802a4a4:	ea43 0c0c 	orr.w	ip, r3, ip
 802a4a8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a4ac:	ea4c 0202 	orr.w	r2, ip, r2
 802a4b0:	f8a8 2000 	strh.w	r2, [r8]
 802a4b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802a4b6:	441c      	add	r4, r3
 802a4b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a4ba:	441e      	add	r6, r3
 802a4bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802a4be:	3b01      	subs	r3, #1
 802a4c0:	f108 0802 	add.w	r8, r8, #2
 802a4c4:	930e      	str	r3, [sp, #56]	; 0x38
 802a4c6:	e763      	b.n	802a390 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802a4c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802a4ca:	441c      	add	r4, r3
 802a4cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a4ce:	441e      	add	r6, r3
 802a4d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a4d2:	3b01      	subs	r3, #1
 802a4d4:	9309      	str	r3, [sp, #36]	; 0x24
 802a4d6:	f109 0902 	add.w	r9, r9, #2
 802a4da:	e737      	b.n	802a34c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802a4dc:	d024      	beq.n	802a528 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 802a4de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a4e0:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802a4e2:	3b01      	subs	r3, #1
 802a4e4:	fb00 4003 	mla	r0, r0, r3, r4
 802a4e8:	1400      	asrs	r0, r0, #16
 802a4ea:	f53f af4c 	bmi.w	802a386 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802a4ee:	3901      	subs	r1, #1
 802a4f0:	4288      	cmp	r0, r1
 802a4f2:	f6bf af48 	bge.w	802a386 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802a4f6:	9924      	ldr	r1, [sp, #144]	; 0x90
 802a4f8:	fb01 6303 	mla	r3, r1, r3, r6
 802a4fc:	141b      	asrs	r3, r3, #16
 802a4fe:	f53f af42 	bmi.w	802a386 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802a502:	3a01      	subs	r2, #1
 802a504:	4293      	cmp	r3, r2
 802a506:	f6bf af3e 	bge.w	802a386 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802a50a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 802a50e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 802a512:	930e      	str	r3, [sp, #56]	; 0x38
 802a514:	46c8      	mov	r8, r9
 802a516:	f1bb 0f00 	cmp.w	fp, #0
 802a51a:	f300 80b7 	bgt.w	802a68c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 802a51e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a520:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802a524:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802a528:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802a52a:	2b00      	cmp	r3, #0
 802a52c:	f340 818d 	ble.w	802a84a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 802a530:	ee30 0a04 	vadd.f32	s0, s0, s8
 802a534:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802a538:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802a53c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802a53e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802a542:	ee31 1a05 	vadd.f32	s2, s2, s10
 802a546:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802a54a:	eef0 6a62 	vmov.f32	s13, s5
 802a54e:	ee61 7a27 	vmul.f32	s15, s2, s15
 802a552:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a556:	ee77 2a62 	vsub.f32	s5, s14, s5
 802a55a:	ee16 4a90 	vmov	r4, s13
 802a55e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802a562:	eef0 6a43 	vmov.f32	s13, s6
 802a566:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802a56a:	ee12 2a90 	vmov	r2, s5
 802a56e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802a572:	fb92 f3f3 	sdiv	r3, r2, r3
 802a576:	ee13 2a10 	vmov	r2, s6
 802a57a:	9323      	str	r3, [sp, #140]	; 0x8c
 802a57c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802a57e:	fb92 f3f3 	sdiv	r3, r2, r3
 802a582:	9324      	str	r3, [sp, #144]	; 0x90
 802a584:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802a586:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802a588:	3b01      	subs	r3, #1
 802a58a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a58e:	930d      	str	r3, [sp, #52]	; 0x34
 802a590:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802a592:	bf08      	it	eq
 802a594:	4613      	moveq	r3, r2
 802a596:	ee16 6a90 	vmov	r6, s13
 802a59a:	9309      	str	r3, [sp, #36]	; 0x24
 802a59c:	eeb0 3a67 	vmov.f32	s6, s15
 802a5a0:	eef0 2a47 	vmov.f32	s5, s14
 802a5a4:	e6c3      	b.n	802a32e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802a5a6:	2900      	cmp	r1, #0
 802a5a8:	f43f af4d 	beq.w	802a446 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802a5ac:	eb0a 0003 	add.w	r0, sl, r3
 802a5b0:	0843      	lsrs	r3, r0, #1
 802a5b2:	07c0      	lsls	r0, r0, #31
 802a5b4:	5cfb      	ldrb	r3, [r7, r3]
 802a5b6:	bf54      	ite	pl
 802a5b8:	f003 030f 	andpl.w	r3, r3, #15
 802a5bc:	111b      	asrmi	r3, r3, #4
 802a5be:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802a5c2:	b2db      	uxtb	r3, r3
 802a5c4:	930b      	str	r3, [sp, #44]	; 0x2c
 802a5c6:	e73e      	b.n	802a446 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802a5c8:	f8b8 e000 	ldrh.w	lr, [r8]
 802a5cc:	fa1f fb83 	uxth.w	fp, r3
 802a5d0:	ea4f 202e 	mov.w	r0, lr, asr #8
 802a5d4:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802a5d8:	43db      	mvns	r3, r3
 802a5da:	b2db      	uxtb	r3, r3
 802a5dc:	fb11 f10b 	smulbb	r1, r1, fp
 802a5e0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802a5e4:	fb00 1003 	mla	r0, r0, r3, r1
 802a5e8:	fa5f fc8c 	uxtb.w	ip, ip
 802a5ec:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802a5f0:	b2d2      	uxtb	r2, r2
 802a5f2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802a5f6:	b280      	uxth	r0, r0
 802a5f8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802a5fc:	fb1c fc0b 	smulbb	ip, ip, fp
 802a600:	fa5f fe8e 	uxtb.w	lr, lr
 802a604:	fb12 fb0b 	smulbb	fp, r2, fp
 802a608:	fb01 cc03 	mla	ip, r1, r3, ip
 802a60c:	fb0e bb03 	mla	fp, lr, r3, fp
 802a610:	1c43      	adds	r3, r0, #1
 802a612:	fa1f fc8c 	uxth.w	ip, ip
 802a616:	fa1f fb8b 	uxth.w	fp, fp
 802a61a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802a61e:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 802a622:	f10c 0101 	add.w	r1, ip, #1
 802a626:	f10b 0001 	add.w	r0, fp, #1
 802a62a:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802a62e:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802a632:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802a636:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802a63a:	4318      	orrs	r0, r3
 802a63c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802a640:	ea40 000c 	orr.w	r0, r0, ip
 802a644:	f8a8 0000 	strh.w	r0, [r8]
 802a648:	e734      	b.n	802a4b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802a64a:	f113 0b01 	adds.w	fp, r3, #1
 802a64e:	f53f af31 	bmi.w	802a4b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802a652:	45dc      	cmp	ip, fp
 802a654:	f6ff af2e 	blt.w	802a4b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802a658:	f110 0b01 	adds.w	fp, r0, #1
 802a65c:	f53f af2a 	bmi.w	802a4b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802a660:	45de      	cmp	lr, fp
 802a662:	f6ff af27 	blt.w	802a4b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802a666:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802a668:	9302      	str	r3, [sp, #8]
 802a66a:	fa0f f38e 	sxth.w	r3, lr
 802a66e:	9301      	str	r3, [sp, #4]
 802a670:	fa0f f38c 	sxth.w	r3, ip
 802a674:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802a678:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802a67c:	9300      	str	r3, [sp, #0]
 802a67e:	463a      	mov	r2, r7
 802a680:	4653      	mov	r3, sl
 802a682:	4641      	mov	r1, r8
 802a684:	9815      	ldr	r0, [sp, #84]	; 0x54
 802a686:	f7ff fd4d 	bl	802a124 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 802a68a:	e713      	b.n	802a4b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802a68c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802a68e:	1422      	asrs	r2, r4, #16
 802a690:	1433      	asrs	r3, r6, #16
 802a692:	fb05 2303 	mla	r3, r5, r3, r2
 802a696:	085a      	lsrs	r2, r3, #1
 802a698:	07dd      	lsls	r5, r3, #31
 802a69a:	5cba      	ldrb	r2, [r7, r2]
 802a69c:	bf54      	ite	pl
 802a69e:	f002 020f 	andpl.w	r2, r2, #15
 802a6a2:	1112      	asrmi	r2, r2, #4
 802a6a4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802a6a8:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802a6ac:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802a6b0:	b2d2      	uxtb	r2, r2
 802a6b2:	2900      	cmp	r1, #0
 802a6b4:	d076      	beq.n	802a7a4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802a6b6:	f103 0e01 	add.w	lr, r3, #1
 802a6ba:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802a6be:	f01e 0f01 	tst.w	lr, #1
 802a6c2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802a6c6:	bf0c      	ite	eq
 802a6c8:	f00c 0c0f 	andeq.w	ip, ip, #15
 802a6cc:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802a6d0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a6d4:	fa5f f58c 	uxtb.w	r5, ip
 802a6d8:	9512      	str	r5, [sp, #72]	; 0x48
 802a6da:	b300      	cbz	r0, 802a71e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802a6dc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802a6de:	442b      	add	r3, r5
 802a6e0:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802a6e4:	07dd      	lsls	r5, r3, #31
 802a6e6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802a6ea:	bf54      	ite	pl
 802a6ec:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a6f0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a6f4:	3301      	adds	r3, #1
 802a6f6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a6fa:	fa5f f58c 	uxtb.w	r5, ip
 802a6fe:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802a702:	950c      	str	r5, [sp, #48]	; 0x30
 802a704:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802a708:	07dd      	lsls	r5, r3, #31
 802a70a:	bf54      	ite	pl
 802a70c:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a710:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a714:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a718:	fa5f f38c 	uxtb.w	r3, ip
 802a71c:	9313      	str	r3, [sp, #76]	; 0x4c
 802a71e:	b289      	uxth	r1, r1
 802a720:	b280      	uxth	r0, r0
 802a722:	fb01 f300 	mul.w	r3, r1, r0
 802a726:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802a72a:	0109      	lsls	r1, r1, #4
 802a72c:	b280      	uxth	r0, r0
 802a72e:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 802a732:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802a734:	1ac9      	subs	r1, r1, r3
 802a736:	ebac 0c00 	sub.w	ip, ip, r0
 802a73a:	b289      	uxth	r1, r1
 802a73c:	4369      	muls	r1, r5
 802a73e:	fa1f fc8c 	uxth.w	ip, ip
 802a742:	fb02 120c 	mla	r2, r2, ip, r1
 802a746:	990c      	ldr	r1, [sp, #48]	; 0x30
 802a748:	fb00 2001 	mla	r0, r0, r1, r2
 802a74c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802a74e:	fb03 0302 	mla	r3, r3, r2, r0
 802a752:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a756:	b1d3      	cbz	r3, 802a78e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 802a758:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802a75a:	4353      	muls	r3, r2
 802a75c:	1c5a      	adds	r2, r3, #1
 802a75e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802a762:	4a0f      	ldr	r2, [pc, #60]	; (802a7a0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802a764:	121b      	asrs	r3, r3, #8
 802a766:	6812      	ldr	r2, [r2, #0]
 802a768:	2bff      	cmp	r3, #255	; 0xff
 802a76a:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802a76e:	d12d      	bne.n	802a7cc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802a770:	0953      	lsrs	r3, r2, #5
 802a772:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802a776:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802a77a:	f02c 0c07 	bic.w	ip, ip, #7
 802a77e:	ea43 0c0c 	orr.w	ip, r3, ip
 802a782:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a786:	ea4c 0202 	orr.w	r2, ip, r2
 802a78a:	f8a8 2000 	strh.w	r2, [r8]
 802a78e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802a790:	441c      	add	r4, r3
 802a792:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a794:	f108 0802 	add.w	r8, r8, #2
 802a798:	441e      	add	r6, r3
 802a79a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802a79e:	e6ba      	b.n	802a516 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 802a7a0:	2000af58 	.word	0x2000af58
 802a7a4:	2800      	cmp	r0, #0
 802a7a6:	d0ba      	beq.n	802a71e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802a7a8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802a7aa:	442b      	add	r3, r5
 802a7ac:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802a7b0:	07db      	lsls	r3, r3, #31
 802a7b2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802a7b6:	bf54      	ite	pl
 802a7b8:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a7bc:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a7c0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a7c4:	fa5f f38c 	uxtb.w	r3, ip
 802a7c8:	930c      	str	r3, [sp, #48]	; 0x30
 802a7ca:	e7a8      	b.n	802a71e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802a7cc:	f8b8 e000 	ldrh.w	lr, [r8]
 802a7d0:	fa1f fa83 	uxth.w	sl, r3
 802a7d4:	ea4f 202e 	mov.w	r0, lr, asr #8
 802a7d8:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802a7dc:	43db      	mvns	r3, r3
 802a7de:	b2db      	uxtb	r3, r3
 802a7e0:	fb11 f10a 	smulbb	r1, r1, sl
 802a7e4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802a7e8:	fb00 1003 	mla	r0, r0, r3, r1
 802a7ec:	b2d2      	uxtb	r2, r2
 802a7ee:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802a7f2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802a7f6:	fa5f fe8e 	uxtb.w	lr, lr
 802a7fa:	fb12 f20a 	smulbb	r2, r2, sl
 802a7fe:	fb0e 2203 	mla	r2, lr, r3, r2
 802a802:	fa5f fc8c 	uxtb.w	ip, ip
 802a806:	b280      	uxth	r0, r0
 802a808:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802a80c:	b292      	uxth	r2, r2
 802a80e:	fb1c fc0a 	smulbb	ip, ip, sl
 802a812:	fb01 cc03 	mla	ip, r1, r3, ip
 802a816:	1c43      	adds	r3, r0, #1
 802a818:	1c51      	adds	r1, r2, #1
 802a81a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802a81e:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 802a822:	fa1f fc8c 	uxth.w	ip, ip
 802a826:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802a82a:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802a82e:	4308      	orrs	r0, r1
 802a830:	f10c 0101 	add.w	r1, ip, #1
 802a834:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802a838:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802a83c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802a840:	ea40 000c 	orr.w	r0, r0, ip
 802a844:	f8a8 0000 	strh.w	r0, [r8]
 802a848:	e7a1      	b.n	802a78e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 802a84a:	b017      	add	sp, #92	; 0x5c
 802a84c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802a850 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 802a850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a854:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 802a858:	2d00      	cmp	r5, #0
 802a85a:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802a85e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802a862:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 802a866:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 802a86a:	fb05 0e03 	mla	lr, r5, r3, r0
 802a86e:	f2c0 80b0 	blt.w	802a9d2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802a872:	45a9      	cmp	r9, r5
 802a874:	f340 80ad 	ble.w	802a9d2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802a878:	2800      	cmp	r0, #0
 802a87a:	f2c0 80a8 	blt.w	802a9ce <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 802a87e:	4580      	cmp	r8, r0
 802a880:	f340 80a5 	ble.w	802a9ce <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 802a884:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802a888:	f01e 0f01 	tst.w	lr, #1
 802a88c:	5d16      	ldrb	r6, [r2, r4]
 802a88e:	bf0c      	ite	eq
 802a890:	f006 060f 	andeq.w	r6, r6, #15
 802a894:	1136      	asrne	r6, r6, #4
 802a896:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802a89a:	b2f6      	uxtb	r6, r6
 802a89c:	1c44      	adds	r4, r0, #1
 802a89e:	f100 809b 	bmi.w	802a9d8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802a8a2:	45a0      	cmp	r8, r4
 802a8a4:	f340 8098 	ble.w	802a9d8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802a8a8:	2f00      	cmp	r7, #0
 802a8aa:	f000 8097 	beq.w	802a9dc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 802a8ae:	f10e 0a01 	add.w	sl, lr, #1
 802a8b2:	ea4f 045a 	mov.w	r4, sl, lsr #1
 802a8b6:	f01a 0f01 	tst.w	sl, #1
 802a8ba:	5d14      	ldrb	r4, [r2, r4]
 802a8bc:	bf0c      	ite	eq
 802a8be:	f004 040f 	andeq.w	r4, r4, #15
 802a8c2:	1124      	asrne	r4, r4, #4
 802a8c4:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802a8c8:	b2e4      	uxtb	r4, r4
 802a8ca:	3501      	adds	r5, #1
 802a8cc:	f100 808a 	bmi.w	802a9e4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802a8d0:	45a9      	cmp	r9, r5
 802a8d2:	f340 8087 	ble.w	802a9e4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802a8d6:	f1bc 0f00 	cmp.w	ip, #0
 802a8da:	f000 8086 	beq.w	802a9ea <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 802a8de:	2800      	cmp	r0, #0
 802a8e0:	db7e      	blt.n	802a9e0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802a8e2:	4580      	cmp	r8, r0
 802a8e4:	dd7c      	ble.n	802a9e0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802a8e6:	eb03 090e 	add.w	r9, r3, lr
 802a8ea:	ea4f 0559 	mov.w	r5, r9, lsr #1
 802a8ee:	f019 0f01 	tst.w	r9, #1
 802a8f2:	5d55      	ldrb	r5, [r2, r5]
 802a8f4:	bf0c      	ite	eq
 802a8f6:	f005 050f 	andeq.w	r5, r5, #15
 802a8fa:	112d      	asrne	r5, r5, #4
 802a8fc:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802a900:	b2ed      	uxtb	r5, r5
 802a902:	3001      	adds	r0, #1
 802a904:	d474      	bmi.n	802a9f0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802a906:	4580      	cmp	r8, r0
 802a908:	dd72      	ble.n	802a9f0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802a90a:	2f00      	cmp	r7, #0
 802a90c:	d072      	beq.n	802a9f4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 802a90e:	3301      	adds	r3, #1
 802a910:	449e      	add	lr, r3
 802a912:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802a916:	f01e 0f01 	tst.w	lr, #1
 802a91a:	5cd0      	ldrb	r0, [r2, r3]
 802a91c:	bf0c      	ite	eq
 802a91e:	f000 000f 	andeq.w	r0, r0, #15
 802a922:	1100      	asrne	r0, r0, #4
 802a924:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802a928:	b2c3      	uxtb	r3, r0
 802a92a:	b2ba      	uxth	r2, r7
 802a92c:	fa1f fc8c 	uxth.w	ip, ip
 802a930:	fb02 f00c 	mul.w	r0, r2, ip
 802a934:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802a938:	0112      	lsls	r2, r2, #4
 802a93a:	fa1f fc8c 	uxth.w	ip, ip
 802a93e:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 802a942:	1a12      	subs	r2, r2, r0
 802a944:	eba7 070c 	sub.w	r7, r7, ip
 802a948:	b292      	uxth	r2, r2
 802a94a:	b2bf      	uxth	r7, r7
 802a94c:	4362      	muls	r2, r4
 802a94e:	fb06 2207 	mla	r2, r6, r7, r2
 802a952:	fb0c 2505 	mla	r5, ip, r5, r2
 802a956:	fb00 5303 	mla	r3, r0, r3, r5
 802a95a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a95e:	b3a3      	cbz	r3, 802a9ca <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 802a960:	4a25      	ldr	r2, [pc, #148]	; (802a9f8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 802a962:	880e      	ldrh	r6, [r1, #0]
 802a964:	6815      	ldr	r5, [r2, #0]
 802a966:	1234      	asrs	r4, r6, #8
 802a968:	b29a      	uxth	r2, r3
 802a96a:	f3c5 4007 	ubfx	r0, r5, #16, #8
 802a96e:	43db      	mvns	r3, r3
 802a970:	b2db      	uxtb	r3, r3
 802a972:	fb10 f002 	smulbb	r0, r0, r2
 802a976:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802a97a:	fb04 0403 	mla	r4, r4, r3, r0
 802a97e:	f3c5 2707 	ubfx	r7, r5, #8, #8
 802a982:	10f0      	asrs	r0, r6, #3
 802a984:	b2ed      	uxtb	r5, r5
 802a986:	00f6      	lsls	r6, r6, #3
 802a988:	fb17 f702 	smulbb	r7, r7, r2
 802a98c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802a990:	fb15 f202 	smulbb	r2, r5, r2
 802a994:	b2f6      	uxtb	r6, r6
 802a996:	b2a4      	uxth	r4, r4
 802a998:	fb00 7003 	mla	r0, r0, r3, r7
 802a99c:	fb06 2303 	mla	r3, r6, r3, r2
 802a9a0:	b29a      	uxth	r2, r3
 802a9a2:	1c63      	adds	r3, r4, #1
 802a9a4:	b280      	uxth	r0, r0
 802a9a6:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802a9aa:	1c53      	adds	r3, r2, #1
 802a9ac:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802a9b0:	1c42      	adds	r2, r0, #1
 802a9b2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802a9b6:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802a9ba:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802a9be:	0940      	lsrs	r0, r0, #5
 802a9c0:	4323      	orrs	r3, r4
 802a9c2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802a9c6:	4303      	orrs	r3, r0
 802a9c8:	800b      	strh	r3, [r1, #0]
 802a9ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a9ce:	2600      	movs	r6, #0
 802a9d0:	e764      	b.n	802a89c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 802a9d2:	2400      	movs	r4, #0
 802a9d4:	4626      	mov	r6, r4
 802a9d6:	e778      	b.n	802a8ca <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802a9d8:	2400      	movs	r4, #0
 802a9da:	e776      	b.n	802a8ca <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802a9dc:	463c      	mov	r4, r7
 802a9de:	e774      	b.n	802a8ca <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802a9e0:	2500      	movs	r5, #0
 802a9e2:	e78e      	b.n	802a902 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 802a9e4:	2300      	movs	r3, #0
 802a9e6:	461d      	mov	r5, r3
 802a9e8:	e79f      	b.n	802a92a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802a9ea:	4663      	mov	r3, ip
 802a9ec:	4665      	mov	r5, ip
 802a9ee:	e79c      	b.n	802a92a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802a9f0:	2300      	movs	r3, #0
 802a9f2:	e79a      	b.n	802a92a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802a9f4:	463b      	mov	r3, r7
 802a9f6:	e798      	b.n	802a92a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802a9f8:	2000af58 	.word	0x2000af58

0802a9fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802a9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802aa00:	b093      	sub	sp, #76	; 0x4c
 802aa02:	461d      	mov	r5, r3
 802aa04:	920c      	str	r2, [sp, #48]	; 0x30
 802aa06:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802aa08:	9107      	str	r1, [sp, #28]
 802aa0a:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 802aa0e:	9011      	str	r0, [sp, #68]	; 0x44
 802aa10:	6850      	ldr	r0, [r2, #4]
 802aa12:	6812      	ldr	r2, [r2, #0]
 802aa14:	fb00 1303 	mla	r3, r0, r3, r1
 802aa18:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802aa1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802aa1e:	689b      	ldr	r3, [r3, #8]
 802aa20:	3301      	adds	r3, #1
 802aa22:	f023 0301 	bic.w	r3, r3, #1
 802aa26:	9306      	str	r3, [sp, #24]
 802aa28:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802aa2a:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 802aa2e:	681f      	ldr	r7, [r3, #0]
 802aa30:	9b07      	ldr	r3, [sp, #28]
 802aa32:	2b00      	cmp	r3, #0
 802aa34:	dc03      	bgt.n	802aa3e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 802aa36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802aa38:	2b00      	cmp	r3, #0
 802aa3a:	f340 8267 	ble.w	802af0c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 802aa3e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802aa40:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802aa44:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802aa48:	1e48      	subs	r0, r1, #1
 802aa4a:	f102 3cff 	add.w	ip, r2, #4294967295
 802aa4e:	2d00      	cmp	r5, #0
 802aa50:	f340 80b8 	ble.w	802abc4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802aa54:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802aa58:	ea4f 4326 	mov.w	r3, r6, asr #16
 802aa5c:	d406      	bmi.n	802aa6c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802aa5e:	4586      	cmp	lr, r0
 802aa60:	da04      	bge.n	802aa6c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802aa62:	2b00      	cmp	r3, #0
 802aa64:	db02      	blt.n	802aa6c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802aa66:	4563      	cmp	r3, ip
 802aa68:	f2c0 80ad 	blt.w	802abc6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 802aa6c:	f11e 0e01 	adds.w	lr, lr, #1
 802aa70:	f100 80a0 	bmi.w	802abb4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 802aa74:	4571      	cmp	r1, lr
 802aa76:	f2c0 809d 	blt.w	802abb4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 802aa7a:	3301      	adds	r3, #1
 802aa7c:	f100 809a 	bmi.w	802abb4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 802aa80:	429a      	cmp	r2, r3
 802aa82:	f2c0 8097 	blt.w	802abb4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 802aa86:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 802aa8a:	9509      	str	r5, [sp, #36]	; 0x24
 802aa8c:	46c8      	mov	r8, r9
 802aa8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802aa90:	2b00      	cmp	r3, #0
 802aa92:	f340 80b6 	ble.w	802ac02 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802aa96:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802aa9a:	9308      	str	r3, [sp, #32]
 802aa9c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802aa9e:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802aaa2:	1423      	asrs	r3, r4, #16
 802aaa4:	ea4f 4026 	mov.w	r0, r6, asr #16
 802aaa8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802aaac:	f100 813e 	bmi.w	802ad2c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802aab0:	f10c 3bff 	add.w	fp, ip, #4294967295
 802aab4:	455b      	cmp	r3, fp
 802aab6:	f280 8139 	bge.w	802ad2c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802aaba:	2800      	cmp	r0, #0
 802aabc:	f2c0 8136 	blt.w	802ad2c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802aac0:	f10e 3bff 	add.w	fp, lr, #4294967295
 802aac4:	4558      	cmp	r0, fp
 802aac6:	f280 8131 	bge.w	802ad2c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802aaca:	9a06      	ldr	r2, [sp, #24]
 802aacc:	fb00 3302 	mla	r3, r0, r2, r3
 802aad0:	0858      	lsrs	r0, r3, #1
 802aad2:	07da      	lsls	r2, r3, #31
 802aad4:	f817 c000 	ldrb.w	ip, [r7, r0]
 802aad8:	9a08      	ldr	r2, [sp, #32]
 802aada:	bf54      	ite	pl
 802aadc:	f00c 0c0f 	andpl.w	ip, ip, #15
 802aae0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802aae4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802aae8:	fa5f fc8c 	uxtb.w	ip, ip
 802aaec:	2a00      	cmp	r2, #0
 802aaee:	f000 80cb 	beq.w	802ac88 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 802aaf2:	1c58      	adds	r0, r3, #1
 802aaf4:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802aaf8:	07c0      	lsls	r0, r0, #31
 802aafa:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802aafe:	bf54      	ite	pl
 802ab00:	f00e 0e0f 	andpl.w	lr, lr, #15
 802ab04:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802ab08:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802ab0c:	fa5f fe8e 	uxtb.w	lr, lr
 802ab10:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 802ab14:	b1b9      	cbz	r1, 802ab46 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802ab16:	4453      	add	r3, sl
 802ab18:	0858      	lsrs	r0, r3, #1
 802ab1a:	07da      	lsls	r2, r3, #31
 802ab1c:	5c38      	ldrb	r0, [r7, r0]
 802ab1e:	bf54      	ite	pl
 802ab20:	f000 000f 	andpl.w	r0, r0, #15
 802ab24:	1100      	asrmi	r0, r0, #4
 802ab26:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802ab2a:	b2c0      	uxtb	r0, r0
 802ab2c:	900a      	str	r0, [sp, #40]	; 0x28
 802ab2e:	1c58      	adds	r0, r3, #1
 802ab30:	0843      	lsrs	r3, r0, #1
 802ab32:	07c2      	lsls	r2, r0, #31
 802ab34:	5cfb      	ldrb	r3, [r7, r3]
 802ab36:	bf54      	ite	pl
 802ab38:	f003 030f 	andpl.w	r3, r3, #15
 802ab3c:	111b      	asrmi	r3, r3, #4
 802ab3e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802ab42:	b2db      	uxtb	r3, r3
 802ab44:	930e      	str	r3, [sp, #56]	; 0x38
 802ab46:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802ab4a:	b289      	uxth	r1, r1
 802ab4c:	fb02 f301 	mul.w	r3, r2, r1
 802ab50:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802ab54:	0112      	lsls	r2, r2, #4
 802ab56:	b289      	uxth	r1, r1
 802ab58:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802ab5c:	1a40      	subs	r0, r0, r1
 802ab5e:	fa1f fe80 	uxth.w	lr, r0
 802ab62:	1ad2      	subs	r2, r2, r3
 802ab64:	980d      	ldr	r0, [sp, #52]	; 0x34
 802ab66:	b292      	uxth	r2, r2
 802ab68:	4342      	muls	r2, r0
 802ab6a:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802ab6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802ab70:	fb01 c102 	mla	r1, r1, r2, ip
 802ab74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802ab76:	fb03 1302 	mla	r3, r3, r2, r1
 802ab7a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802ab7e:	2bff      	cmp	r3, #255	; 0xff
 802ab80:	f040 8093 	bne.w	802acaa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 802ab84:	4bbe      	ldr	r3, [pc, #760]	; (802ae80 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802ab86:	681a      	ldr	r2, [r3, #0]
 802ab88:	4bbe      	ldr	r3, [pc, #760]	; (802ae84 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 802ab8a:	0951      	lsrs	r1, r2, #5
 802ab8c:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802ab90:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802ab94:	430b      	orrs	r3, r1
 802ab96:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802ab9a:	4313      	orrs	r3, r2
 802ab9c:	f8a8 3000 	strh.w	r3, [r8]
 802aba0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802aba2:	441c      	add	r4, r3
 802aba4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802aba6:	441e      	add	r6, r3
 802aba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802abaa:	3b01      	subs	r3, #1
 802abac:	f108 0802 	add.w	r8, r8, #2
 802abb0:	9309      	str	r3, [sp, #36]	; 0x24
 802abb2:	e76c      	b.n	802aa8e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802abb4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802abb6:	441c      	add	r4, r3
 802abb8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802abba:	3d01      	subs	r5, #1
 802abbc:	441e      	add	r6, r3
 802abbe:	f109 0902 	add.w	r9, r9, #2
 802abc2:	e744      	b.n	802aa4e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802abc4:	d021      	beq.n	802ac0a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 802abc6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802abc8:	1e6b      	subs	r3, r5, #1
 802abca:	fb00 4003 	mla	r0, r0, r3, r4
 802abce:	1400      	asrs	r0, r0, #16
 802abd0:	f53f af59 	bmi.w	802aa86 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802abd4:	3901      	subs	r1, #1
 802abd6:	4288      	cmp	r0, r1
 802abd8:	f6bf af55 	bge.w	802aa86 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802abdc:	9920      	ldr	r1, [sp, #128]	; 0x80
 802abde:	fb01 6303 	mla	r3, r1, r3, r6
 802abe2:	141b      	asrs	r3, r3, #16
 802abe4:	f53f af4f 	bmi.w	802aa86 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802abe8:	3a01      	subs	r2, #1
 802abea:	4293      	cmp	r3, r2
 802abec:	f6bf af4b 	bge.w	802aa86 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802abf0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802abf4:	9308      	str	r3, [sp, #32]
 802abf6:	46a8      	mov	r8, r5
 802abf8:	46ce      	mov	lr, r9
 802abfa:	f1b8 0f00 	cmp.w	r8, #0
 802abfe:	f300 80b5 	bgt.w	802ad6c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802ac02:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802ac06:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802ac0a:	9b07      	ldr	r3, [sp, #28]
 802ac0c:	2b00      	cmp	r3, #0
 802ac0e:	f340 817d 	ble.w	802af0c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 802ac12:	ee30 0a04 	vadd.f32	s0, s0, s8
 802ac16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802ac1a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802ac1e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802ac20:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802ac24:	ee31 1a05 	vadd.f32	s2, s2, s10
 802ac28:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802ac2c:	eef0 6a62 	vmov.f32	s13, s5
 802ac30:	ee61 7a27 	vmul.f32	s15, s2, s15
 802ac34:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802ac38:	ee77 2a62 	vsub.f32	s5, s14, s5
 802ac3c:	ee16 4a90 	vmov	r4, s13
 802ac40:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802ac44:	eef0 6a43 	vmov.f32	s13, s6
 802ac48:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802ac4c:	ee12 2a90 	vmov	r2, s5
 802ac50:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802ac54:	fb92 f3f3 	sdiv	r3, r2, r3
 802ac58:	ee13 2a10 	vmov	r2, s6
 802ac5c:	931f      	str	r3, [sp, #124]	; 0x7c
 802ac5e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802ac60:	fb92 f3f3 	sdiv	r3, r2, r3
 802ac64:	9320      	str	r3, [sp, #128]	; 0x80
 802ac66:	9b07      	ldr	r3, [sp, #28]
 802ac68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802ac6a:	3b01      	subs	r3, #1
 802ac6c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802ac70:	9307      	str	r3, [sp, #28]
 802ac72:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802ac74:	ee16 6a90 	vmov	r6, s13
 802ac78:	bf14      	ite	ne
 802ac7a:	461d      	movne	r5, r3
 802ac7c:	4615      	moveq	r5, r2
 802ac7e:	eeb0 3a67 	vmov.f32	s6, s15
 802ac82:	eef0 2a47 	vmov.f32	s5, s14
 802ac86:	e6d3      	b.n	802aa30 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 802ac88:	2900      	cmp	r1, #0
 802ac8a:	f43f af5c 	beq.w	802ab46 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802ac8e:	eb0a 0003 	add.w	r0, sl, r3
 802ac92:	0843      	lsrs	r3, r0, #1
 802ac94:	07c0      	lsls	r0, r0, #31
 802ac96:	5cfb      	ldrb	r3, [r7, r3]
 802ac98:	bf54      	ite	pl
 802ac9a:	f003 030f 	andpl.w	r3, r3, #15
 802ac9e:	111b      	asrmi	r3, r3, #4
 802aca0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802aca4:	b2db      	uxtb	r3, r3
 802aca6:	930a      	str	r3, [sp, #40]	; 0x28
 802aca8:	e74d      	b.n	802ab46 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802acaa:	2b00      	cmp	r3, #0
 802acac:	f43f af78 	beq.w	802aba0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 802acb0:	4a73      	ldr	r2, [pc, #460]	; (802ae80 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802acb2:	f8b8 c000 	ldrh.w	ip, [r8]
 802acb6:	6810      	ldr	r0, [r2, #0]
 802acb8:	fa1f fe83 	uxth.w	lr, r3
 802acbc:	ea4f 212c 	mov.w	r1, ip, asr #8
 802acc0:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802acc4:	43db      	mvns	r3, r3
 802acc6:	b2db      	uxtb	r3, r3
 802acc8:	fb12 f20e 	smulbb	r2, r2, lr
 802accc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802acd0:	fb01 2103 	mla	r1, r1, r3, r2
 802acd4:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802acd8:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802acdc:	b2c0      	uxtb	r0, r0
 802acde:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802ace2:	fb1b fb0e 	smulbb	fp, fp, lr
 802ace6:	b289      	uxth	r1, r1
 802ace8:	fb10 fe0e 	smulbb	lr, r0, lr
 802acec:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802acf0:	fa5f fc8c 	uxtb.w	ip, ip
 802acf4:	fb02 b203 	mla	r2, r2, r3, fp
 802acf8:	1c48      	adds	r0, r1, #1
 802acfa:	fb0c e303 	mla	r3, ip, r3, lr
 802acfe:	b292      	uxth	r2, r2
 802ad00:	b29b      	uxth	r3, r3
 802ad02:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802ad06:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 802ad0a:	f102 0b01 	add.w	fp, r2, #1
 802ad0e:	1c59      	adds	r1, r3, #1
 802ad10:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802ad14:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802ad18:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802ad1c:	0952      	lsrs	r2, r2, #5
 802ad1e:	4301      	orrs	r1, r0
 802ad20:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802ad24:	4311      	orrs	r1, r2
 802ad26:	f8a8 1000 	strh.w	r1, [r8]
 802ad2a:	e739      	b.n	802aba0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 802ad2c:	f113 0b01 	adds.w	fp, r3, #1
 802ad30:	f53f af36 	bmi.w	802aba0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 802ad34:	45dc      	cmp	ip, fp
 802ad36:	f6ff af33 	blt.w	802aba0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 802ad3a:	f110 0b01 	adds.w	fp, r0, #1
 802ad3e:	f53f af2f 	bmi.w	802aba0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 802ad42:	45de      	cmp	lr, fp
 802ad44:	f6ff af2c 	blt.w	802aba0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 802ad48:	9a08      	ldr	r2, [sp, #32]
 802ad4a:	9302      	str	r3, [sp, #8]
 802ad4c:	fa0f f38e 	sxth.w	r3, lr
 802ad50:	9301      	str	r3, [sp, #4]
 802ad52:	fa0f f38c 	sxth.w	r3, ip
 802ad56:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802ad5a:	9105      	str	r1, [sp, #20]
 802ad5c:	9300      	str	r3, [sp, #0]
 802ad5e:	463a      	mov	r2, r7
 802ad60:	4653      	mov	r3, sl
 802ad62:	4641      	mov	r1, r8
 802ad64:	9811      	ldr	r0, [sp, #68]	; 0x44
 802ad66:	f7ff fd73 	bl	802a850 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802ad6a:	e719      	b.n	802aba0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 802ad6c:	9906      	ldr	r1, [sp, #24]
 802ad6e:	1422      	asrs	r2, r4, #16
 802ad70:	1433      	asrs	r3, r6, #16
 802ad72:	fb01 2303 	mla	r3, r1, r3, r2
 802ad76:	085a      	lsrs	r2, r3, #1
 802ad78:	07d9      	lsls	r1, r3, #31
 802ad7a:	5cba      	ldrb	r2, [r7, r2]
 802ad7c:	bf54      	ite	pl
 802ad7e:	f002 020f 	andpl.w	r2, r2, #15
 802ad82:	1112      	asrmi	r2, r2, #4
 802ad84:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802ad88:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802ad8c:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802ad90:	b2d2      	uxtb	r2, r2
 802ad92:	2800      	cmp	r0, #0
 802ad94:	d062      	beq.n	802ae5c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 802ad96:	f103 0a01 	add.w	sl, r3, #1
 802ad9a:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802ad9e:	f01a 0f01 	tst.w	sl, #1
 802ada2:	5c79      	ldrb	r1, [r7, r1]
 802ada4:	bf0c      	ite	eq
 802ada6:	f001 010f 	andeq.w	r1, r1, #15
 802adaa:	1109      	asrne	r1, r1, #4
 802adac:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802adb0:	b2c9      	uxtb	r1, r1
 802adb2:	910f      	str	r1, [sp, #60]	; 0x3c
 802adb4:	f1bc 0f00 	cmp.w	ip, #0
 802adb8:	d019      	beq.n	802adee <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 802adba:	9908      	ldr	r1, [sp, #32]
 802adbc:	440b      	add	r3, r1
 802adbe:	0859      	lsrs	r1, r3, #1
 802adc0:	f013 0f01 	tst.w	r3, #1
 802adc4:	5c79      	ldrb	r1, [r7, r1]
 802adc6:	bf0c      	ite	eq
 802adc8:	f001 010f 	andeq.w	r1, r1, #15
 802adcc:	1109      	asrne	r1, r1, #4
 802adce:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802add2:	b2c9      	uxtb	r1, r1
 802add4:	3301      	adds	r3, #1
 802add6:	910b      	str	r1, [sp, #44]	; 0x2c
 802add8:	0859      	lsrs	r1, r3, #1
 802adda:	07db      	lsls	r3, r3, #31
 802addc:	5c79      	ldrb	r1, [r7, r1]
 802adde:	bf54      	ite	pl
 802ade0:	f001 010f 	andpl.w	r1, r1, #15
 802ade4:	1109      	asrmi	r1, r1, #4
 802ade6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802adea:	b2c9      	uxtb	r1, r1
 802adec:	9110      	str	r1, [sp, #64]	; 0x40
 802adee:	b280      	uxth	r0, r0
 802adf0:	fa1f fc8c 	uxth.w	ip, ip
 802adf4:	fb00 f30c 	mul.w	r3, r0, ip
 802adf8:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802adfc:	0100      	lsls	r0, r0, #4
 802adfe:	fa1f fc8c 	uxth.w	ip, ip
 802ae02:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 802ae06:	eba1 010c 	sub.w	r1, r1, ip
 802ae0a:	fa1f fa81 	uxth.w	sl, r1
 802ae0e:	1ac0      	subs	r0, r0, r3
 802ae10:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802ae12:	b280      	uxth	r0, r0
 802ae14:	4348      	muls	r0, r1
 802ae16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802ae18:	fb02 020a 	mla	r2, r2, sl, r0
 802ae1c:	fb0c 2c01 	mla	ip, ip, r1, r2
 802ae20:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802ae22:	fb03 c302 	mla	r3, r3, r2, ip
 802ae26:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802ae2a:	2bff      	cmp	r3, #255	; 0xff
 802ae2c:	d12c      	bne.n	802ae88 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 802ae2e:	4b14      	ldr	r3, [pc, #80]	; (802ae80 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802ae30:	681a      	ldr	r2, [r3, #0]
 802ae32:	4b14      	ldr	r3, [pc, #80]	; (802ae84 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 802ae34:	0951      	lsrs	r1, r2, #5
 802ae36:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802ae3a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802ae3e:	430b      	orrs	r3, r1
 802ae40:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802ae44:	4313      	orrs	r3, r2
 802ae46:	f8ae 3000 	strh.w	r3, [lr]
 802ae4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802ae4c:	441c      	add	r4, r3
 802ae4e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802ae50:	f10e 0e02 	add.w	lr, lr, #2
 802ae54:	441e      	add	r6, r3
 802ae56:	f108 38ff 	add.w	r8, r8, #4294967295
 802ae5a:	e6ce      	b.n	802abfa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 802ae5c:	f1bc 0f00 	cmp.w	ip, #0
 802ae60:	d0c5      	beq.n	802adee <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 802ae62:	9908      	ldr	r1, [sp, #32]
 802ae64:	440b      	add	r3, r1
 802ae66:	0859      	lsrs	r1, r3, #1
 802ae68:	07db      	lsls	r3, r3, #31
 802ae6a:	5c79      	ldrb	r1, [r7, r1]
 802ae6c:	bf54      	ite	pl
 802ae6e:	f001 010f 	andpl.w	r1, r1, #15
 802ae72:	1109      	asrmi	r1, r1, #4
 802ae74:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802ae78:	b2c9      	uxtb	r1, r1
 802ae7a:	910b      	str	r1, [sp, #44]	; 0x2c
 802ae7c:	e7b7      	b.n	802adee <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 802ae7e:	bf00      	nop
 802ae80:	2000af58 	.word	0x2000af58
 802ae84:	fffff800 	.word	0xfffff800
 802ae88:	2b00      	cmp	r3, #0
 802ae8a:	d0de      	beq.n	802ae4a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 802ae8c:	4a21      	ldr	r2, [pc, #132]	; (802af14 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 802ae8e:	f8be c000 	ldrh.w	ip, [lr]
 802ae92:	6810      	ldr	r0, [r2, #0]
 802ae94:	fa1f fa83 	uxth.w	sl, r3
 802ae98:	ea4f 212c 	mov.w	r1, ip, asr #8
 802ae9c:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802aea0:	43db      	mvns	r3, r3
 802aea2:	b2db      	uxtb	r3, r3
 802aea4:	fb12 f20a 	smulbb	r2, r2, sl
 802aea8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802aeac:	fb01 2103 	mla	r1, r1, r3, r2
 802aeb0:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802aeb4:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802aeb8:	b2c0      	uxtb	r0, r0
 802aeba:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802aebe:	fa5f fc8c 	uxtb.w	ip, ip
 802aec2:	fb10 f00a 	smulbb	r0, r0, sl
 802aec6:	fb0c 0003 	mla	r0, ip, r3, r0
 802aeca:	b289      	uxth	r1, r1
 802aecc:	fb1b fb0a 	smulbb	fp, fp, sl
 802aed0:	b280      	uxth	r0, r0
 802aed2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802aed6:	fb02 b203 	mla	r2, r2, r3, fp
 802aeda:	1c4b      	adds	r3, r1, #1
 802aedc:	f100 0b01 	add.w	fp, r0, #1
 802aee0:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802aee4:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 802aee8:	b292      	uxth	r2, r2
 802aeea:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802aeee:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802aef2:	ea4b 0101 	orr.w	r1, fp, r1
 802aef6:	f102 0b01 	add.w	fp, r2, #1
 802aefa:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802aefe:	0952      	lsrs	r2, r2, #5
 802af00:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802af04:	4311      	orrs	r1, r2
 802af06:	f8ae 1000 	strh.w	r1, [lr]
 802af0a:	e79e      	b.n	802ae4a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 802af0c:	b013      	add	sp, #76	; 0x4c
 802af0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802af12:	bf00      	nop
 802af14:	2000af58 	.word	0x2000af58

0802af18 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 802af18:	b570      	push	{r4, r5, r6, lr}
 802af1a:	1208      	asrs	r0, r1, #8
 802af1c:	b29e      	uxth	r6, r3
 802af1e:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 802af22:	1213      	asrs	r3, r2, #8
 802af24:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802af28:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802af2c:	fb13 f305 	smulbb	r3, r3, r5
 802af30:	fb10 f006 	smulbb	r0, r0, r6
 802af34:	4418      	add	r0, r3
 802af36:	10cc      	asrs	r4, r1, #3
 802af38:	10d3      	asrs	r3, r2, #3
 802af3a:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 802af3e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802af42:	fb13 f305 	smulbb	r3, r3, r5
 802af46:	fb14 f406 	smulbb	r4, r4, r6
 802af4a:	00c9      	lsls	r1, r1, #3
 802af4c:	00d2      	lsls	r2, r2, #3
 802af4e:	441c      	add	r4, r3
 802af50:	b2d2      	uxtb	r2, r2
 802af52:	b2cb      	uxtb	r3, r1
 802af54:	fb12 f205 	smulbb	r2, r2, r5
 802af58:	b280      	uxth	r0, r0
 802af5a:	fb13 f306 	smulbb	r3, r3, r6
 802af5e:	4413      	add	r3, r2
 802af60:	1c42      	adds	r2, r0, #1
 802af62:	b29b      	uxth	r3, r3
 802af64:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802af68:	f400 4278 	and.w	r2, r0, #63488	; 0xf800
 802af6c:	1c58      	adds	r0, r3, #1
 802af6e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802af72:	b2a4      	uxth	r4, r4
 802af74:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802af78:	4310      	orrs	r0, r2
 802af7a:	1c62      	adds	r2, r4, #1
 802af7c:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802af80:	0964      	lsrs	r4, r4, #5
 802af82:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 802af86:	4320      	orrs	r0, r4
 802af88:	bd70      	pop	{r4, r5, r6, pc}
	...

0802af8c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 802af8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802af90:	b08f      	sub	sp, #60	; 0x3c
 802af92:	461c      	mov	r4, r3
 802af94:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
 802af98:	9004      	str	r0, [sp, #16]
 802af9a:	460d      	mov	r5, r1
 802af9c:	4616      	mov	r6, r2
 802af9e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802afa0:	2f00      	cmp	r7, #0
 802afa2:	f000 80f6 	beq.w	802b192 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 802afa6:	6820      	ldr	r0, [r4, #0]
 802afa8:	6861      	ldr	r1, [r4, #4]
 802afaa:	aa0a      	add	r2, sp, #40	; 0x28
 802afac:	c203      	stmia	r2!, {r0, r1}
 802afae:	6818      	ldr	r0, [r3, #0]
 802afb0:	6859      	ldr	r1, [r3, #4]
 802afb2:	aa0c      	add	r2, sp, #48	; 0x30
 802afb4:	c203      	stmia	r2!, {r0, r1}
 802afb6:	a80a      	add	r0, sp, #40	; 0x28
 802afb8:	f7ef ffd2 	bl	801af60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802afbc:	4621      	mov	r1, r4
 802afbe:	a80c      	add	r0, sp, #48	; 0x30
 802afc0:	f7f0 f812 	bl	801afe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802afc4:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 802afc8:	f9bd b036 	ldrsh.w	fp, [sp, #54]	; 0x36
 802afcc:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 802afd0:	f002 0301 	and.w	r3, r2, #1
 802afd4:	9306      	str	r3, [sp, #24]
 802afd6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 802afda:	f003 0101 	and.w	r1, r3, #1
 802afde:	9105      	str	r1, [sp, #20]
 802afe0:	9805      	ldr	r0, [sp, #20]
 802afe2:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 802afe6:	4403      	add	r3, r0
 802afe8:	fb01 2303 	mla	r3, r1, r3, r2
 802afec:	f04f 0802 	mov.w	r8, #2
 802aff0:	fb93 f3f8 	sdiv	r3, r3, r8
 802aff4:	441d      	add	r5, r3
 802aff6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 802affa:	441a      	add	r2, r3
 802affc:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 802b000:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 802b004:	4419      	add	r1, r3
 802b006:	4b64      	ldr	r3, [pc, #400]	; (802b198 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 802b008:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 802b00c:	6818      	ldr	r0, [r3, #0]
 802b00e:	6803      	ldr	r3, [r0, #0]
 802b010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802b012:	4798      	blx	r3
 802b014:	4a61      	ldr	r2, [pc, #388]	; (802b19c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 802b016:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 802b01a:	8813      	ldrh	r3, [r2, #0]
 802b01c:	f9bd a030 	ldrsh.w	sl, [sp, #48]	; 0x30
 802b020:	2fff      	cmp	r7, #255	; 0xff
 802b022:	fb03 a404 	mla	r4, r3, r4, sl
 802b026:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802b02a:	f106 0604 	add.w	r6, r6, #4
 802b02e:	4611      	mov	r1, r2
 802b030:	fb03 fb0b 	mul.w	fp, r3, fp
 802b034:	d06b      	beq.n	802b10e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x182>
 802b036:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 802b03a:	9303      	str	r3, [sp, #12]
 802b03c:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 802b040:	e9cd 3207 	strd	r3, r2, [sp, #28]
 802b044:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 802b048:	9b07      	ldr	r3, [sp, #28]
 802b04a:	42a3      	cmp	r3, r4
 802b04c:	f240 809c 	bls.w	802b188 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 802b050:	9b06      	ldr	r3, [sp, #24]
 802b052:	2b00      	cmp	r3, #0
 802b054:	d039      	beq.n	802b0ca <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 802b056:	782b      	ldrb	r3, [r5, #0]
 802b058:	8822      	ldrh	r2, [r4, #0]
 802b05a:	9804      	ldr	r0, [sp, #16]
 802b05c:	f003 030f 	and.w	r3, r3, #15
 802b060:	f105 0801 	add.w	r8, r5, #1
 802b064:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802b068:	9b03      	ldr	r3, [sp, #12]
 802b06a:	9300      	str	r3, [sp, #0]
 802b06c:	463b      	mov	r3, r7
 802b06e:	f7ff ff53 	bl	802af18 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802b072:	f824 0b02 	strh.w	r0, [r4], #2
 802b076:	f109 3bff 	add.w	fp, r9, #4294967295
 802b07a:	f1bb 0f01 	cmp.w	fp, #1
 802b07e:	46a2      	mov	sl, r4
 802b080:	f104 0404 	add.w	r4, r4, #4
 802b084:	dd24      	ble.n	802b0d0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x144>
 802b086:	f898 3000 	ldrb.w	r3, [r8]
 802b08a:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 802b08e:	9804      	ldr	r0, [sp, #16]
 802b090:	091b      	lsrs	r3, r3, #4
 802b092:	f1ab 0b02 	sub.w	fp, fp, #2
 802b096:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802b09a:	9b03      	ldr	r3, [sp, #12]
 802b09c:	9300      	str	r3, [sp, #0]
 802b09e:	463b      	mov	r3, r7
 802b0a0:	f7ff ff3a 	bl	802af18 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802b0a4:	f824 0c04 	strh.w	r0, [r4, #-4]
 802b0a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 802b0ac:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 802b0b0:	9804      	ldr	r0, [sp, #16]
 802b0b2:	f003 030f 	and.w	r3, r3, #15
 802b0b6:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802b0ba:	9b03      	ldr	r3, [sp, #12]
 802b0bc:	9300      	str	r3, [sp, #0]
 802b0be:	463b      	mov	r3, r7
 802b0c0:	f7ff ff2a 	bl	802af18 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802b0c4:	f824 0c02 	strh.w	r0, [r4, #-2]
 802b0c8:	e7d7      	b.n	802b07a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xee>
 802b0ca:	46a8      	mov	r8, r5
 802b0cc:	46cb      	mov	fp, r9
 802b0ce:	e7d4      	b.n	802b07a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xee>
 802b0d0:	d10e      	bne.n	802b0f0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x164>
 802b0d2:	f898 3000 	ldrb.w	r3, [r8]
 802b0d6:	f8ba 2000 	ldrh.w	r2, [sl]
 802b0da:	9804      	ldr	r0, [sp, #16]
 802b0dc:	091b      	lsrs	r3, r3, #4
 802b0de:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802b0e2:	9b03      	ldr	r3, [sp, #12]
 802b0e4:	9300      	str	r3, [sp, #0]
 802b0e6:	463b      	mov	r3, r7
 802b0e8:	f7ff ff16 	bl	802af18 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802b0ec:	f82a 0b02 	strh.w	r0, [sl], #2
 802b0f0:	9b08      	ldr	r3, [sp, #32]
 802b0f2:	9a05      	ldr	r2, [sp, #20]
 802b0f4:	881c      	ldrh	r4, [r3, #0]
 802b0f6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 802b0fa:	eba4 0409 	sub.w	r4, r4, r9
 802b0fe:	4413      	add	r3, r2
 802b100:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 802b104:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802b106:	fb93 f3f2 	sdiv	r3, r3, r2
 802b10a:	441d      	add	r5, r3
 802b10c:	e79c      	b.n	802b048 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xbc>
 802b10e:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 802b112:	45a3      	cmp	fp, r4
 802b114:	d938      	bls.n	802b188 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 802b116:	9b06      	ldr	r3, [sp, #24]
 802b118:	b1f3      	cbz	r3, 802b158 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1cc>
 802b11a:	782b      	ldrb	r3, [r5, #0]
 802b11c:	f003 030f 	and.w	r3, r3, #15
 802b120:	1c6a      	adds	r2, r5, #1
 802b122:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802b126:	8023      	strh	r3, [r4, #0]
 802b128:	f109 30ff 	add.w	r0, r9, #4294967295
 802b12c:	3402      	adds	r4, #2
 802b12e:	2801      	cmp	r0, #1
 802b130:	4623      	mov	r3, r4
 802b132:	f104 0404 	add.w	r4, r4, #4
 802b136:	dd12      	ble.n	802b15e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d2>
 802b138:	7813      	ldrb	r3, [r2, #0]
 802b13a:	091b      	lsrs	r3, r3, #4
 802b13c:	3802      	subs	r0, #2
 802b13e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802b142:	f824 3c04 	strh.w	r3, [r4, #-4]
 802b146:	f812 3b01 	ldrb.w	r3, [r2], #1
 802b14a:	f003 030f 	and.w	r3, r3, #15
 802b14e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802b152:	f824 3c02 	strh.w	r3, [r4, #-2]
 802b156:	e7ea      	b.n	802b12e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 802b158:	462a      	mov	r2, r5
 802b15a:	4648      	mov	r0, r9
 802b15c:	e7e7      	b.n	802b12e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 802b15e:	d106      	bne.n	802b16e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e2>
 802b160:	7812      	ldrb	r2, [r2, #0]
 802b162:	0912      	lsrs	r2, r2, #4
 802b164:	3302      	adds	r3, #2
 802b166:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 802b16a:	f823 2c02 	strh.w	r2, [r3, #-2]
 802b16e:	880c      	ldrh	r4, [r1, #0]
 802b170:	9a05      	ldr	r2, [sp, #20]
 802b172:	eba4 0409 	sub.w	r4, r4, r9
 802b176:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 802b17a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 802b17e:	4413      	add	r3, r2
 802b180:	fb93 f3f8 	sdiv	r3, r3, r8
 802b184:	441d      	add	r5, r3
 802b186:	e7c4      	b.n	802b112 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x186>
 802b188:	4b03      	ldr	r3, [pc, #12]	; (802b198 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 802b18a:	6818      	ldr	r0, [r3, #0]
 802b18c:	6803      	ldr	r3, [r0, #0]
 802b18e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b190:	4798      	blx	r3
 802b192:	b00f      	add	sp, #60	; 0x3c
 802b194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b198:	2000af48 	.word	0x2000af48
 802b19c:	2000af42 	.word	0x2000af42

0802b1a0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 802b1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 802b1a2:	f89d 5014 	ldrb.w	r5, [sp, #20]
 802b1a6:	2dff      	cmp	r5, #255	; 0xff
 802b1a8:	ea4f 2711 	mov.w	r7, r1, lsr #8
 802b1ac:	d10c      	bne.n	802b1c8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x28>
 802b1ae:	2bff      	cmp	r3, #255	; 0xff
 802b1b0:	d10a      	bne.n	802b1c8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x28>
 802b1b2:	4b25      	ldr	r3, [pc, #148]	; (802b248 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 802b1b4:	0948      	lsrs	r0, r1, #5
 802b1b6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802b1ba:	403b      	ands	r3, r7
 802b1bc:	4318      	orrs	r0, r3
 802b1be:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 802b1c2:	4308      	orrs	r0, r1
 802b1c4:	b280      	uxth	r0, r0
 802b1c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802b1c8:	fb15 f503 	smulbb	r5, r5, r3
 802b1cc:	b2ab      	uxth	r3, r5
 802b1ce:	1c5d      	adds	r5, r3, #1
 802b1d0:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 802b1d4:	1214      	asrs	r4, r2, #8
 802b1d6:	f3c5 2507 	ubfx	r5, r5, #8, #8
 802b1da:	fa1f fc85 	uxth.w	ip, r5
 802b1de:	10d6      	asrs	r6, r2, #3
 802b1e0:	00d0      	lsls	r0, r2, #3
 802b1e2:	43ed      	mvns	r5, r5
 802b1e4:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802b1e8:	f3c1 4207 	ubfx	r2, r1, #16, #8
 802b1ec:	b2eb      	uxtb	r3, r5
 802b1ee:	b2c0      	uxtb	r0, r0
 802b1f0:	fb12 f20c 	smulbb	r2, r2, ip
 802b1f4:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802b1f8:	fb04 2403 	mla	r4, r4, r3, r2
 802b1fc:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 802b200:	b2c8      	uxtb	r0, r1
 802b202:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802b206:	b2fd      	uxtb	r5, r7
 802b208:	fb10 f00c 	smulbb	r0, r0, ip
 802b20c:	b2a4      	uxth	r4, r4
 802b20e:	fb02 0003 	mla	r0, r2, r3, r0
 802b212:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 802b216:	fb15 f50c 	smulbb	r5, r5, ip
 802b21a:	fb06 5503 	mla	r5, r6, r3, r5
 802b21e:	b283      	uxth	r3, r0
 802b220:	1c60      	adds	r0, r4, #1
 802b222:	b2ad      	uxth	r5, r5
 802b224:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 802b228:	1c58      	adds	r0, r3, #1
 802b22a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802b22e:	1c6b      	adds	r3, r5, #1
 802b230:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802b234:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802b238:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802b23c:	096d      	lsrs	r5, r5, #5
 802b23e:	4320      	orrs	r0, r4
 802b240:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802b244:	4328      	orrs	r0, r5
 802b246:	e7be      	b.n	802b1c6 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 802b248:	00fff800 	.word	0x00fff800

0802b24c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 802b24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b250:	461c      	mov	r4, r3
 802b252:	b08d      	sub	sp, #52	; 0x34
 802b254:	460d      	mov	r5, r1
 802b256:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802b258:	6861      	ldr	r1, [r4, #4]
 802b25a:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 802b25e:	4680      	mov	r8, r0
 802b260:	6820      	ldr	r0, [r4, #0]
 802b262:	4616      	mov	r6, r2
 802b264:	aa08      	add	r2, sp, #32
 802b266:	c203      	stmia	r2!, {r0, r1}
 802b268:	6818      	ldr	r0, [r3, #0]
 802b26a:	6859      	ldr	r1, [r3, #4]
 802b26c:	aa0a      	add	r2, sp, #40	; 0x28
 802b26e:	c203      	stmia	r2!, {r0, r1}
 802b270:	a808      	add	r0, sp, #32
 802b272:	f7ef fe75 	bl	801af60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802b276:	4621      	mov	r1, r4
 802b278:	a80a      	add	r0, sp, #40	; 0x28
 802b27a:	f7ef feb5 	bl	801afe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802b27e:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 802b282:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	; 0x2e
 802b286:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 802b28a:	f002 0301 	and.w	r3, r2, #1
 802b28e:	9303      	str	r3, [sp, #12]
 802b290:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 802b294:	f003 0101 	and.w	r1, r3, #1
 802b298:	9102      	str	r1, [sp, #8]
 802b29a:	9802      	ldr	r0, [sp, #8]
 802b29c:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 802b2a0:	4403      	add	r3, r0
 802b2a2:	fb01 2303 	mla	r3, r1, r3, r2
 802b2a6:	f04f 0a02 	mov.w	sl, #2
 802b2aa:	fb93 f3fa 	sdiv	r3, r3, sl
 802b2ae:	441d      	add	r5, r3
 802b2b0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802b2b4:	441a      	add	r2, r3
 802b2b6:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 802b2ba:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 802b2be:	4a3f      	ldr	r2, [pc, #252]	; (802b3bc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 802b2c0:	9205      	str	r2, [sp, #20]
 802b2c2:	4419      	add	r1, r3
 802b2c4:	6810      	ldr	r0, [r2, #0]
 802b2c6:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
 802b2ca:	6803      	ldr	r3, [r0, #0]
 802b2cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802b2ce:	4798      	blx	r3
 802b2d0:	4b3b      	ldr	r3, [pc, #236]	; (802b3c0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 802b2d2:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	; 0x2a
 802b2d6:	8819      	ldrh	r1, [r3, #0]
 802b2d8:	f9bd c028 	ldrsh.w	ip, [sp, #40]	; 0x28
 802b2dc:	fb01 c404 	mla	r4, r1, r4, ip
 802b2e0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802b2e4:	434f      	muls	r7, r1
 802b2e6:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 802b2ea:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 802b2ee:	3604      	adds	r6, #4
 802b2f0:	9204      	str	r2, [sp, #16]
 802b2f2:	9b04      	ldr	r3, [sp, #16]
 802b2f4:	429c      	cmp	r4, r3
 802b2f6:	d258      	bcs.n	802b3aa <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 802b2f8:	9b03      	ldr	r3, [sp, #12]
 802b2fa:	2b00      	cmp	r3, #0
 802b2fc:	d034      	beq.n	802b368 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 802b2fe:	782b      	ldrb	r3, [r5, #0]
 802b300:	f003 030f 	and.w	r3, r3, #15
 802b304:	1c6f      	adds	r7, r5, #1
 802b306:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802b30a:	0e0b      	lsrs	r3, r1, #24
 802b30c:	d006      	beq.n	802b31c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 802b30e:	8822      	ldrh	r2, [r4, #0]
 802b310:	9300      	str	r3, [sp, #0]
 802b312:	4640      	mov	r0, r8
 802b314:	464b      	mov	r3, r9
 802b316:	f7ff ff43 	bl	802b1a0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802b31a:	8020      	strh	r0, [r4, #0]
 802b31c:	3402      	adds	r4, #2
 802b31e:	f10b 3aff 	add.w	sl, fp, #4294967295
 802b322:	f1ba 0f01 	cmp.w	sl, #1
 802b326:	dd22      	ble.n	802b36e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 802b328:	783b      	ldrb	r3, [r7, #0]
 802b32a:	091b      	lsrs	r3, r3, #4
 802b32c:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802b330:	0e0b      	lsrs	r3, r1, #24
 802b332:	d006      	beq.n	802b342 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 802b334:	8822      	ldrh	r2, [r4, #0]
 802b336:	9300      	str	r3, [sp, #0]
 802b338:	4640      	mov	r0, r8
 802b33a:	464b      	mov	r3, r9
 802b33c:	f7ff ff30 	bl	802b1a0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802b340:	8020      	strh	r0, [r4, #0]
 802b342:	f817 3b01 	ldrb.w	r3, [r7], #1
 802b346:	f003 030f 	and.w	r3, r3, #15
 802b34a:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802b34e:	0e0b      	lsrs	r3, r1, #24
 802b350:	d006      	beq.n	802b360 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 802b352:	8862      	ldrh	r2, [r4, #2]
 802b354:	9300      	str	r3, [sp, #0]
 802b356:	4640      	mov	r0, r8
 802b358:	464b      	mov	r3, r9
 802b35a:	f7ff ff21 	bl	802b1a0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802b35e:	8060      	strh	r0, [r4, #2]
 802b360:	3404      	adds	r4, #4
 802b362:	f1aa 0a02 	sub.w	sl, sl, #2
 802b366:	e7dc      	b.n	802b322 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 802b368:	462f      	mov	r7, r5
 802b36a:	46da      	mov	sl, fp
 802b36c:	e7d9      	b.n	802b322 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 802b36e:	d10d      	bne.n	802b38c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 802b370:	783b      	ldrb	r3, [r7, #0]
 802b372:	091b      	lsrs	r3, r3, #4
 802b374:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802b378:	0e0b      	lsrs	r3, r1, #24
 802b37a:	d006      	beq.n	802b38a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 802b37c:	8822      	ldrh	r2, [r4, #0]
 802b37e:	9300      	str	r3, [sp, #0]
 802b380:	4640      	mov	r0, r8
 802b382:	464b      	mov	r3, r9
 802b384:	f7ff ff0c 	bl	802b1a0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802b388:	8020      	strh	r0, [r4, #0]
 802b38a:	3402      	adds	r4, #2
 802b38c:	9b06      	ldr	r3, [sp, #24]
 802b38e:	9a02      	ldr	r2, [sp, #8]
 802b390:	881b      	ldrh	r3, [r3, #0]
 802b392:	eba3 030b 	sub.w	r3, r3, fp
 802b396:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802b39a:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 802b39e:	4413      	add	r3, r2
 802b3a0:	9a07      	ldr	r2, [sp, #28]
 802b3a2:	fb93 f3f2 	sdiv	r3, r3, r2
 802b3a6:	441d      	add	r5, r3
 802b3a8:	e7a3      	b.n	802b2f2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 802b3aa:	9b05      	ldr	r3, [sp, #20]
 802b3ac:	6818      	ldr	r0, [r3, #0]
 802b3ae:	6803      	ldr	r3, [r0, #0]
 802b3b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b3b2:	4798      	blx	r3
 802b3b4:	b00d      	add	sp, #52	; 0x34
 802b3b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b3ba:	bf00      	nop
 802b3bc:	2000af48 	.word	0x2000af48
 802b3c0:	2000af42 	.word	0x2000af42

0802b3c4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 802b3c4:	b570      	push	{r4, r5, r6, lr}
 802b3c6:	1214      	asrs	r4, r2, #8
 802b3c8:	788d      	ldrb	r5, [r1, #2]
 802b3ca:	f89d 6010 	ldrb.w	r6, [sp, #16]
 802b3ce:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802b3d2:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802b3d6:	fb15 f503 	smulbb	r5, r5, r3
 802b3da:	fb04 5506 	mla	r5, r4, r6, r5
 802b3de:	10d0      	asrs	r0, r2, #3
 802b3e0:	784c      	ldrb	r4, [r1, #1]
 802b3e2:	7809      	ldrb	r1, [r1, #0]
 802b3e4:	00d2      	lsls	r2, r2, #3
 802b3e6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802b3ea:	b2d2      	uxtb	r2, r2
 802b3ec:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 802b3f0:	fb14 f403 	smulbb	r4, r4, r3
 802b3f4:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802b3f8:	fb11 f303 	smulbb	r3, r1, r3
 802b3fc:	fb00 4406 	mla	r4, r0, r6, r4
 802b400:	fb02 3306 	mla	r3, r2, r6, r3
 802b404:	b2ad      	uxth	r5, r5
 802b406:	b29b      	uxth	r3, r3
 802b408:	b2a4      	uxth	r4, r4
 802b40a:	1c68      	adds	r0, r5, #1
 802b40c:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 802b410:	1c62      	adds	r2, r4, #1
 802b412:	1c58      	adds	r0, r3, #1
 802b414:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802b418:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802b41c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802b420:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802b424:	0964      	lsrs	r4, r4, #5
 802b426:	4328      	orrs	r0, r5
 802b428:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 802b42c:	4320      	orrs	r0, r4
 802b42e:	bd70      	pop	{r4, r5, r6, pc}

0802b430 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 802b430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b434:	b08f      	sub	sp, #60	; 0x3c
 802b436:	461c      	mov	r4, r3
 802b438:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
 802b43c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802b43e:	4682      	mov	sl, r0
 802b440:	460e      	mov	r6, r1
 802b442:	4615      	mov	r5, r2
 802b444:	2f00      	cmp	r7, #0
 802b446:	f000 8142 	beq.w	802b6ce <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29e>
 802b44a:	6820      	ldr	r0, [r4, #0]
 802b44c:	6861      	ldr	r1, [r4, #4]
 802b44e:	aa0a      	add	r2, sp, #40	; 0x28
 802b450:	c203      	stmia	r2!, {r0, r1}
 802b452:	6818      	ldr	r0, [r3, #0]
 802b454:	6859      	ldr	r1, [r3, #4]
 802b456:	aa0c      	add	r2, sp, #48	; 0x30
 802b458:	c203      	stmia	r2!, {r0, r1}
 802b45a:	a80a      	add	r0, sp, #40	; 0x28
 802b45c:	f7ef fd80 	bl	801af60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802b460:	4621      	mov	r1, r4
 802b462:	a80c      	add	r0, sp, #48	; 0x30
 802b464:	f7ef fdc0 	bl	801afe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802b468:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 802b46c:	f9bd b036 	ldrsh.w	fp, [sp, #54]	; 0x36
 802b470:	f002 0301 	and.w	r3, r2, #1
 802b474:	9306      	str	r3, [sp, #24]
 802b476:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 802b47a:	f003 0101 	and.w	r1, r3, #1
 802b47e:	9105      	str	r1, [sp, #20]
 802b480:	9805      	ldr	r0, [sp, #20]
 802b482:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 802b486:	4403      	add	r3, r0
 802b488:	fb01 2303 	mla	r3, r1, r3, r2
 802b48c:	f04f 0802 	mov.w	r8, #2
 802b490:	fb93 f3f8 	sdiv	r3, r3, r8
 802b494:	441e      	add	r6, r3
 802b496:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 802b49a:	441a      	add	r2, r3
 802b49c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 802b4a0:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 802b4a4:	4419      	add	r1, r3
 802b4a6:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 802b4aa:	9303      	str	r3, [sp, #12]
 802b4ac:	4b89      	ldr	r3, [pc, #548]	; (802b6d4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 802b4ae:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 802b4b2:	6818      	ldr	r0, [r3, #0]
 802b4b4:	6803      	ldr	r3, [r0, #0]
 802b4b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802b4b8:	4798      	blx	r3
 802b4ba:	4a87      	ldr	r2, [pc, #540]	; (802b6d8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 802b4bc:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 802b4c0:	8813      	ldrh	r3, [r2, #0]
 802b4c2:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	; 0x30
 802b4c6:	2fff      	cmp	r7, #255	; 0xff
 802b4c8:	fb03 9404 	mla	r4, r3, r4, r9
 802b4cc:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802b4d0:	f105 0504 	add.w	r5, r5, #4
 802b4d4:	4694      	mov	ip, r2
 802b4d6:	fb03 f30b 	mul.w	r3, r3, fp
 802b4da:	d071      	beq.n	802b5c0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x190>
 802b4dc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802b4e0:	43f9      	mvns	r1, r7
 802b4e2:	e9cd 3207 	strd	r3, r2, [sp, #28]
 802b4e6:	b2c9      	uxtb	r1, r1
 802b4e8:	9104      	str	r1, [sp, #16]
 802b4ea:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 802b4ee:	9b07      	ldr	r3, [sp, #28]
 802b4f0:	42a3      	cmp	r3, r4
 802b4f2:	f240 80e7 	bls.w	802b6c4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x294>
 802b4f6:	9b06      	ldr	r3, [sp, #24]
 802b4f8:	2b00      	cmp	r3, #0
 802b4fa:	d03d      	beq.n	802b578 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x148>
 802b4fc:	7831      	ldrb	r1, [r6, #0]
 802b4fe:	9b04      	ldr	r3, [sp, #16]
 802b500:	8822      	ldrh	r2, [r4, #0]
 802b502:	9300      	str	r3, [sp, #0]
 802b504:	f001 010f 	and.w	r1, r1, #15
 802b508:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802b50c:	463b      	mov	r3, r7
 802b50e:	4429      	add	r1, r5
 802b510:	4650      	mov	r0, sl
 802b512:	f7ff ff57 	bl	802b3c4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802b516:	9b03      	ldr	r3, [sp, #12]
 802b518:	f824 0b02 	strh.w	r0, [r4], #2
 802b51c:	f106 0801 	add.w	r8, r6, #1
 802b520:	f103 3bff 	add.w	fp, r3, #4294967295
 802b524:	f1bb 0f01 	cmp.w	fp, #1
 802b528:	46a1      	mov	r9, r4
 802b52a:	f104 0404 	add.w	r4, r4, #4
 802b52e:	dd27      	ble.n	802b580 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x150>
 802b530:	f898 1000 	ldrb.w	r1, [r8]
 802b534:	9b04      	ldr	r3, [sp, #16]
 802b536:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 802b53a:	9300      	str	r3, [sp, #0]
 802b53c:	0909      	lsrs	r1, r1, #4
 802b53e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802b542:	463b      	mov	r3, r7
 802b544:	4429      	add	r1, r5
 802b546:	4650      	mov	r0, sl
 802b548:	f7ff ff3c 	bl	802b3c4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802b54c:	f824 0c04 	strh.w	r0, [r4, #-4]
 802b550:	f818 1b01 	ldrb.w	r1, [r8], #1
 802b554:	9b04      	ldr	r3, [sp, #16]
 802b556:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 802b55a:	9300      	str	r3, [sp, #0]
 802b55c:	f001 010f 	and.w	r1, r1, #15
 802b560:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802b564:	463b      	mov	r3, r7
 802b566:	4429      	add	r1, r5
 802b568:	4650      	mov	r0, sl
 802b56a:	f7ff ff2b 	bl	802b3c4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802b56e:	f1ab 0b02 	sub.w	fp, fp, #2
 802b572:	f824 0c02 	strh.w	r0, [r4, #-2]
 802b576:	e7d5      	b.n	802b524 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 802b578:	46b0      	mov	r8, r6
 802b57a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802b57e:	e7d1      	b.n	802b524 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 802b580:	d10f      	bne.n	802b5a2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x172>
 802b582:	f898 1000 	ldrb.w	r1, [r8]
 802b586:	9b04      	ldr	r3, [sp, #16]
 802b588:	f8b9 2000 	ldrh.w	r2, [r9]
 802b58c:	9300      	str	r3, [sp, #0]
 802b58e:	0909      	lsrs	r1, r1, #4
 802b590:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802b594:	463b      	mov	r3, r7
 802b596:	4429      	add	r1, r5
 802b598:	4650      	mov	r0, sl
 802b59a:	f7ff ff13 	bl	802b3c4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802b59e:	f829 0b02 	strh.w	r0, [r9], #2
 802b5a2:	9b08      	ldr	r3, [sp, #32]
 802b5a4:	9a05      	ldr	r2, [sp, #20]
 802b5a6:	881c      	ldrh	r4, [r3, #0]
 802b5a8:	9b03      	ldr	r3, [sp, #12]
 802b5aa:	1ae4      	subs	r4, r4, r3
 802b5ac:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 802b5b0:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 802b5b4:	4413      	add	r3, r2
 802b5b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802b5b8:	fb93 f3f2 	sdiv	r3, r3, r2
 802b5bc:	441e      	add	r6, r3
 802b5be:	e796      	b.n	802b4ee <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbe>
 802b5c0:	4f46      	ldr	r7, [pc, #280]	; (802b6dc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 802b5c2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802b5c6:	42a3      	cmp	r3, r4
 802b5c8:	d97c      	bls.n	802b6c4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x294>
 802b5ca:	9a06      	ldr	r2, [sp, #24]
 802b5cc:	2a00      	cmp	r2, #0
 802b5ce:	d054      	beq.n	802b67a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24a>
 802b5d0:	7830      	ldrb	r0, [r6, #0]
 802b5d2:	f000 000f 	and.w	r0, r0, #15
 802b5d6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802b5da:	eb05 0e00 	add.w	lr, r5, r0
 802b5de:	5c28      	ldrb	r0, [r5, r0]
 802b5e0:	f89e 2002 	ldrb.w	r2, [lr, #2]
 802b5e4:	f89e e001 	ldrb.w	lr, [lr, #1]
 802b5e8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802b5ec:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 802b5f0:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 802b5f4:	ea42 020e 	orr.w	r2, r2, lr
 802b5f8:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 802b5fc:	f824 2b02 	strh.w	r2, [r4], #2
 802b600:	9a03      	ldr	r2, [sp, #12]
 802b602:	1c71      	adds	r1, r6, #1
 802b604:	f102 3eff 	add.w	lr, r2, #4294967295
 802b608:	f1be 0f01 	cmp.w	lr, #1
 802b60c:	4620      	mov	r0, r4
 802b60e:	f104 0404 	add.w	r4, r4, #4
 802b612:	dd36      	ble.n	802b682 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x252>
 802b614:	7808      	ldrb	r0, [r1, #0]
 802b616:	0900      	lsrs	r0, r0, #4
 802b618:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802b61c:	eb05 0a00 	add.w	sl, r5, r0
 802b620:	f1ae 0e02 	sub.w	lr, lr, #2
 802b624:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802b628:	f89a 9002 	ldrb.w	r9, [sl, #2]
 802b62c:	00d2      	lsls	r2, r2, #3
 802b62e:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 802b632:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802b636:	ea49 0202 	orr.w	r2, r9, r2
 802b63a:	f815 9000 	ldrb.w	r9, [r5, r0]
 802b63e:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 802b642:	f824 2c04 	strh.w	r2, [r4, #-4]
 802b646:	f811 0b01 	ldrb.w	r0, [r1], #1
 802b64a:	f000 000f 	and.w	r0, r0, #15
 802b64e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802b652:	eb05 0a00 	add.w	sl, r5, r0
 802b656:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802b65a:	f89a 9002 	ldrb.w	r9, [sl, #2]
 802b65e:	00d2      	lsls	r2, r2, #3
 802b660:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 802b664:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802b668:	ea49 0202 	orr.w	r2, r9, r2
 802b66c:	f815 9000 	ldrb.w	r9, [r5, r0]
 802b670:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 802b674:	f824 2c02 	strh.w	r2, [r4, #-2]
 802b678:	e7c6      	b.n	802b608 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d8>
 802b67a:	4631      	mov	r1, r6
 802b67c:	f8dd e00c 	ldr.w	lr, [sp, #12]
 802b680:	e7c2      	b.n	802b608 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d8>
 802b682:	d111      	bne.n	802b6a8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 802b684:	7809      	ldrb	r1, [r1, #0]
 802b686:	0909      	lsrs	r1, r1, #4
 802b688:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802b68c:	186c      	adds	r4, r5, r1
 802b68e:	5c69      	ldrb	r1, [r5, r1]
 802b690:	78a2      	ldrb	r2, [r4, #2]
 802b692:	7864      	ldrb	r4, [r4, #1]
 802b694:	00e4      	lsls	r4, r4, #3
 802b696:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 802b69a:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 802b69e:	4322      	orrs	r2, r4
 802b6a0:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 802b6a4:	f820 2b02 	strh.w	r2, [r0], #2
 802b6a8:	9a03      	ldr	r2, [sp, #12]
 802b6aa:	f8bc 4000 	ldrh.w	r4, [ip]
 802b6ae:	9905      	ldr	r1, [sp, #20]
 802b6b0:	1aa4      	subs	r4, r4, r2
 802b6b2:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 802b6b6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802b6ba:	440a      	add	r2, r1
 802b6bc:	fb92 f2f8 	sdiv	r2, r2, r8
 802b6c0:	4416      	add	r6, r2
 802b6c2:	e780      	b.n	802b5c6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 802b6c4:	4b03      	ldr	r3, [pc, #12]	; (802b6d4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 802b6c6:	6818      	ldr	r0, [r3, #0]
 802b6c8:	6803      	ldr	r3, [r0, #0]
 802b6ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b6cc:	4798      	blx	r3
 802b6ce:	b00f      	add	sp, #60	; 0x3c
 802b6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b6d4:	2000af48 	.word	0x2000af48
 802b6d8:	2000af42 	.word	0x2000af42
 802b6dc:	fffff800 	.word	0xfffff800

0802b6e0 <CRC_Lock>:
 802b6e0:	b530      	push	{r4, r5, lr}
 802b6e2:	4a20      	ldr	r2, [pc, #128]	; (802b764 <CRC_Lock+0x84>)
 802b6e4:	6813      	ldr	r3, [r2, #0]
 802b6e6:	f023 0301 	bic.w	r3, r3, #1
 802b6ea:	6013      	str	r3, [r2, #0]
 802b6ec:	4b1e      	ldr	r3, [pc, #120]	; (802b768 <CRC_Lock+0x88>)
 802b6ee:	681a      	ldr	r2, [r3, #0]
 802b6f0:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802b6f4:	4022      	ands	r2, r4
 802b6f6:	f24c 2540 	movw	r5, #49728	; 0xc240
 802b6fa:	42aa      	cmp	r2, r5
 802b6fc:	d005      	beq.n	802b70a <CRC_Lock+0x2a>
 802b6fe:	681b      	ldr	r3, [r3, #0]
 802b700:	f24c 2270 	movw	r2, #49776	; 0xc270
 802b704:	4023      	ands	r3, r4
 802b706:	4293      	cmp	r3, r2
 802b708:	d124      	bne.n	802b754 <CRC_Lock+0x74>
 802b70a:	4b18      	ldr	r3, [pc, #96]	; (802b76c <CRC_Lock+0x8c>)
 802b70c:	681b      	ldr	r3, [r3, #0]
 802b70e:	bb0b      	cbnz	r3, 802b754 <CRC_Lock+0x74>
 802b710:	4b17      	ldr	r3, [pc, #92]	; (802b770 <CRC_Lock+0x90>)
 802b712:	681a      	ldr	r2, [r3, #0]
 802b714:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802b718:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 802b71c:	d00d      	beq.n	802b73a <CRC_Lock+0x5a>
 802b71e:	681a      	ldr	r2, [r3, #0]
 802b720:	f240 4483 	movw	r4, #1155	; 0x483
 802b724:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802b728:	42a2      	cmp	r2, r4
 802b72a:	d006      	beq.n	802b73a <CRC_Lock+0x5a>
 802b72c:	681b      	ldr	r3, [r3, #0]
 802b72e:	f240 4285 	movw	r2, #1157	; 0x485
 802b732:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802b736:	4293      	cmp	r3, r2
 802b738:	d10c      	bne.n	802b754 <CRC_Lock+0x74>
 802b73a:	4b0e      	ldr	r3, [pc, #56]	; (802b774 <CRC_Lock+0x94>)
 802b73c:	2201      	movs	r2, #1
 802b73e:	601a      	str	r2, [r3, #0]
 802b740:	681a      	ldr	r2, [r3, #0]
 802b742:	2a00      	cmp	r2, #0
 802b744:	d1fc      	bne.n	802b740 <CRC_Lock+0x60>
 802b746:	4b0c      	ldr	r3, [pc, #48]	; (802b778 <CRC_Lock+0x98>)
 802b748:	6018      	str	r0, [r3, #0]
 802b74a:	6818      	ldr	r0, [r3, #0]
 802b74c:	1a43      	subs	r3, r0, r1
 802b74e:	4258      	negs	r0, r3
 802b750:	4158      	adcs	r0, r3
 802b752:	bd30      	pop	{r4, r5, pc}
 802b754:	4b09      	ldr	r3, [pc, #36]	; (802b77c <CRC_Lock+0x9c>)
 802b756:	2201      	movs	r2, #1
 802b758:	601a      	str	r2, [r3, #0]
 802b75a:	681a      	ldr	r2, [r3, #0]
 802b75c:	2a00      	cmp	r2, #0
 802b75e:	d1fc      	bne.n	802b75a <CRC_Lock+0x7a>
 802b760:	4b07      	ldr	r3, [pc, #28]	; (802b780 <CRC_Lock+0xa0>)
 802b762:	e7f1      	b.n	802b748 <CRC_Lock+0x68>
 802b764:	e0002000 	.word	0xe0002000
 802b768:	e000ed00 	.word	0xe000ed00
 802b76c:	e0042000 	.word	0xe0042000
 802b770:	5c001000 	.word	0x5c001000
 802b774:	58024c08 	.word	0x58024c08
 802b778:	58024c00 	.word	0x58024c00
 802b77c:	40023008 	.word	0x40023008
 802b780:	40023000 	.word	0x40023000

0802b784 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802b784:	6101      	str	r1, [r0, #16]
 802b786:	4770      	bx	lr

0802b788 <_ZN8touchgfx8Gestures4tickEv>:
 802b788:	7b83      	ldrb	r3, [r0, #14]
 802b78a:	b14b      	cbz	r3, 802b7a0 <_ZN8touchgfx8Gestures4tickEv+0x18>
 802b78c:	8903      	ldrh	r3, [r0, #8]
 802b78e:	3301      	adds	r3, #1
 802b790:	b29b      	uxth	r3, r3
 802b792:	2b07      	cmp	r3, #7
 802b794:	8103      	strh	r3, [r0, #8]
 802b796:	bf81      	itttt	hi
 802b798:	2300      	movhi	r3, #0
 802b79a:	8143      	strhhi	r3, [r0, #10]
 802b79c:	8183      	strhhi	r3, [r0, #12]
 802b79e:	7383      	strbhi	r3, [r0, #14]
 802b7a0:	4770      	bx	lr
	...

0802b7a4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802b7a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802b7a8:	4698      	mov	r8, r3
 802b7aa:	8883      	ldrh	r3, [r0, #4]
 802b7ac:	f8ad 3006 	strh.w	r3, [sp, #6]
 802b7b0:	eba8 0303 	sub.w	r3, r8, r3
 802b7b4:	b21b      	sxth	r3, r3
 802b7b6:	4604      	mov	r4, r0
 802b7b8:	2b00      	cmp	r3, #0
 802b7ba:	4617      	mov	r7, r2
 802b7bc:	4a18      	ldr	r2, [pc, #96]	; (802b820 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802b7be:	9200      	str	r2, [sp, #0]
 802b7c0:	bfb8      	it	lt
 802b7c2:	425b      	neglt	r3, r3
 802b7c4:	8aa2      	ldrh	r2, [r4, #20]
 802b7c6:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802b7ca:	f8ad 800a 	strh.w	r8, [sp, #10]
 802b7ce:	b21b      	sxth	r3, r3
 802b7d0:	460e      	mov	r6, r1
 802b7d2:	4293      	cmp	r3, r2
 802b7d4:	88c1      	ldrh	r1, [r0, #6]
 802b7d6:	f8ad 1008 	strh.w	r1, [sp, #8]
 802b7da:	f04f 0000 	mov.w	r0, #0
 802b7de:	f88d 0004 	strb.w	r0, [sp, #4]
 802b7e2:	f8ad 500c 	strh.w	r5, [sp, #12]
 802b7e6:	dc07      	bgt.n	802b7f8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x54>
 802b7e8:	1a69      	subs	r1, r5, r1
 802b7ea:	b209      	sxth	r1, r1
 802b7ec:	2900      	cmp	r1, #0
 802b7ee:	bfb8      	it	lt
 802b7f0:	4249      	neglt	r1, r1
 802b7f2:	b209      	sxth	r1, r1
 802b7f4:	428a      	cmp	r2, r1
 802b7f6:	da10      	bge.n	802b81a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x76>
 802b7f8:	6920      	ldr	r0, [r4, #16]
 802b7fa:	6803      	ldr	r3, [r0, #0]
 802b7fc:	4669      	mov	r1, sp
 802b7fe:	685b      	ldr	r3, [r3, #4]
 802b800:	4798      	blx	r3
 802b802:	eba8 0606 	sub.w	r6, r8, r6
 802b806:	2300      	movs	r3, #0
 802b808:	1bef      	subs	r7, r5, r7
 802b80a:	2001      	movs	r0, #1
 802b80c:	8123      	strh	r3, [r4, #8]
 802b80e:	8166      	strh	r6, [r4, #10]
 802b810:	81a7      	strh	r7, [r4, #12]
 802b812:	f8a4 8004 	strh.w	r8, [r4, #4]
 802b816:	80e5      	strh	r5, [r4, #6]
 802b818:	73a0      	strb	r0, [r4, #14]
 802b81a:	b004      	add	sp, #16
 802b81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b820:	0802f820 	.word	0x0802f820

0802b824 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802b824:	b5f0      	push	{r4, r5, r6, r7, lr}
 802b826:	461e      	mov	r6, r3
 802b828:	1e4b      	subs	r3, r1, #1
 802b82a:	2b01      	cmp	r3, #1
 802b82c:	b085      	sub	sp, #20
 802b82e:	4604      	mov	r4, r0
 802b830:	460d      	mov	r5, r1
 802b832:	4617      	mov	r7, r2
 802b834:	d84b      	bhi.n	802b8ce <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802b836:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802b83a:	1cd3      	adds	r3, r2, #3
 802b83c:	b29b      	uxth	r3, r3
 802b83e:	2b06      	cmp	r3, #6
 802b840:	d916      	bls.n	802b870 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802b842:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 802b8e4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802b846:	f8cd c004 	str.w	ip, [sp, #4]
 802b84a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802b84e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802b852:	6900      	ldr	r0, [r0, #16]
 802b854:	f8ad 100c 	strh.w	r1, [sp, #12]
 802b858:	f04f 0c00 	mov.w	ip, #0
 802b85c:	f88d c008 	strb.w	ip, [sp, #8]
 802b860:	f8ad 200a 	strh.w	r2, [sp, #10]
 802b864:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b868:	6803      	ldr	r3, [r0, #0]
 802b86a:	a901      	add	r1, sp, #4
 802b86c:	689b      	ldr	r3, [r3, #8]
 802b86e:	4798      	blx	r3
 802b870:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b874:	1cd3      	adds	r3, r2, #3
 802b876:	b29b      	uxth	r3, r3
 802b878:	2b06      	cmp	r3, #6
 802b87a:	d916      	bls.n	802b8aa <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802b87c:	f8df c064 	ldr.w	ip, [pc, #100]	; 802b8e4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802b880:	f8cd c004 	str.w	ip, [sp, #4]
 802b884:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802b888:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802b88c:	6920      	ldr	r0, [r4, #16]
 802b88e:	f8ad 100c 	strh.w	r1, [sp, #12]
 802b892:	f04f 0c01 	mov.w	ip, #1
 802b896:	f88d c008 	strb.w	ip, [sp, #8]
 802b89a:	f8ad 200a 	strh.w	r2, [sp, #10]
 802b89e:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b8a2:	6803      	ldr	r3, [r0, #0]
 802b8a4:	a901      	add	r1, sp, #4
 802b8a6:	689b      	ldr	r3, [r3, #8]
 802b8a8:	4798      	blx	r3
 802b8aa:	4b0d      	ldr	r3, [pc, #52]	; (802b8e0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802b8ac:	9301      	str	r3, [sp, #4]
 802b8ae:	6920      	ldr	r0, [r4, #16]
 802b8b0:	f88d 5008 	strb.w	r5, [sp, #8]
 802b8b4:	2300      	movs	r3, #0
 802b8b6:	f8ad 700a 	strh.w	r7, [sp, #10]
 802b8ba:	f8ad 600c 	strh.w	r6, [sp, #12]
 802b8be:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b8c2:	6803      	ldr	r3, [r0, #0]
 802b8c4:	a901      	add	r1, sp, #4
 802b8c6:	681b      	ldr	r3, [r3, #0]
 802b8c8:	4798      	blx	r3
 802b8ca:	b005      	add	sp, #20
 802b8cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802b8ce:	2900      	cmp	r1, #0
 802b8d0:	d1eb      	bne.n	802b8aa <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802b8d2:	80a2      	strh	r2, [r4, #4]
 802b8d4:	80c6      	strh	r6, [r0, #6]
 802b8d6:	60a1      	str	r1, [r4, #8]
 802b8d8:	81a1      	strh	r1, [r4, #12]
 802b8da:	73a1      	strb	r1, [r4, #14]
 802b8dc:	e7e5      	b.n	802b8aa <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802b8de:	bf00      	nop
 802b8e0:	0802f80c 	.word	0x0802f80c
 802b8e4:	0802f834 	.word	0x0802f834

0802b8e8 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>:
 802b8e8:	10c9      	asrs	r1, r1, #3
 802b8ea:	2900      	cmp	r1, #0
 802b8ec:	bfb8      	it	lt
 802b8ee:	4249      	neglt	r1, r1
 802b8f0:	2801      	cmp	r0, #1
 802b8f2:	d108      	bne.n	802b906 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 802b8f4:	f3c1 0008 	ubfx	r0, r1, #0, #9
 802b8f8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 802b8fc:	4601      	mov	r1, r0
 802b8fe:	dd02      	ble.n	802b906 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 802b900:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 802b904:	4770      	bx	lr
 802b906:	29ff      	cmp	r1, #255	; 0xff
 802b908:	bfa8      	it	ge
 802b90a:	21ff      	movge	r1, #255	; 0xff
 802b90c:	4608      	mov	r0, r1
 802b90e:	4770      	bx	lr

0802b910 <_ZN8touchgfx10Rasterizer6lineToEii>:
 802b910:	b410      	push	{r4}
 802b912:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 802b916:	429c      	cmp	r4, r3
 802b918:	d803      	bhi.n	802b922 <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 802b91a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b91e:	f7ee bacd 	b.w	8019ebc <_ZN8touchgfx7Outline6lineToEii>
 802b922:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b926:	4770      	bx	lr

0802b928 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 802b928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b92c:	b08b      	sub	sp, #44	; 0x2c
 802b92e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802b932:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 802b936:	9308      	str	r3, [sp, #32]
 802b938:	4606      	mov	r6, r0
 802b93a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 802b93e:	9309      	str	r3, [sp, #36]	; 0x24
 802b940:	468a      	mov	sl, r1
 802b942:	f7ee fc28 	bl	801a196 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 802b946:	68b5      	ldr	r5, [r6, #8]
 802b948:	4604      	mov	r4, r0
 802b94a:	2d00      	cmp	r5, #0
 802b94c:	d044      	beq.n	802b9d8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802b94e:	6873      	ldr	r3, [r6, #4]
 802b950:	42ab      	cmp	r3, r5
 802b952:	d33d      	bcc.n	802b9d0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 802b954:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802b958:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 802b95c:	eb02 0b03 	add.w	fp, r2, r3
 802b960:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 802b964:	fb02 1203 	mla	r2, r2, r3, r1
 802b968:	9205      	str	r2, [sp, #20]
 802b96a:	1e6a      	subs	r2, r5, #1
 802b96c:	9204      	str	r2, [sp, #16]
 802b96e:	f04f 0800 	mov.w	r8, #0
 802b972:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 802b976:	f9b4 7000 	ldrsh.w	r7, [r4]
 802b97a:	454b      	cmp	r3, r9
 802b97c:	463a      	mov	r2, r7
 802b97e:	d008      	beq.n	802b992 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 802b980:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	; 0x34
 802b984:	eb03 0b09 	add.w	fp, r3, r9
 802b988:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 802b98c:	fb03 1309 	mla	r3, r3, r9, r1
 802b990:	9305      	str	r3, [sp, #20]
 802b992:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 802b996:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 802b99a:	4498      	add	r8, r3
 802b99c:	9b04      	ldr	r3, [sp, #16]
 802b99e:	3b01      	subs	r3, #1
 802b9a0:	9304      	str	r3, [sp, #16]
 802b9a2:	9b04      	ldr	r3, [sp, #16]
 802b9a4:	3301      	adds	r3, #1
 802b9a6:	d015      	beq.n	802b9d4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 802b9a8:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 802b9ac:	42bb      	cmp	r3, r7
 802b9ae:	d117      	bne.n	802b9e0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 802b9b0:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 802b9b4:	9b04      	ldr	r3, [sp, #16]
 802b9b6:	4548      	cmp	r0, r9
 802b9b8:	f103 33ff 	add.w	r3, r3, #4294967295
 802b9bc:	d17f      	bne.n	802babe <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x196>
 802b9be:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 802b9c2:	4401      	add	r1, r0
 802b9c4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802b9c8:	4480      	add	r8, r0
 802b9ca:	e7e9      	b.n	802b9a0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 802b9cc:	461f      	mov	r7, r3
 802b9ce:	e044      	b.n	802ba5a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x132>
 802b9d0:	2000      	movs	r0, #0
 802b9d2:	e002      	b.n	802b9da <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 802b9d4:	2900      	cmp	r1, #0
 802b9d6:	d16f      	bne.n	802bab8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x190>
 802b9d8:	2001      	movs	r0, #1
 802b9da:	b00b      	add	sp, #44	; 0x2c
 802b9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b9e0:	2900      	cmp	r1, #0
 802b9e2:	d030      	beq.n	802ba46 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11e>
 802b9e4:	2f00      	cmp	r7, #0
 802b9e6:	db29      	blt.n	802ba3c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x114>
 802b9e8:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 802b9ec:	42bb      	cmp	r3, r7
 802b9ee:	dd25      	ble.n	802ba3c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x114>
 802b9f0:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 802b9f4:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 802b9f8:	f7ff ff76 	bl	802b8e8 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 802b9fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b9fe:	fb10 f003 	smulbb	r0, r0, r3
 802ba02:	b280      	uxth	r0, r0
 802ba04:	1c41      	adds	r1, r0, #1
 802ba06:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802ba0a:	1209      	asrs	r1, r1, #8
 802ba0c:	f011 0fff 	tst.w	r1, #255	; 0xff
 802ba10:	d014      	beq.n	802ba3c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x114>
 802ba12:	9808      	ldr	r0, [sp, #32]
 802ba14:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 802ba16:	b2c9      	uxtb	r1, r1
 802ba18:	b2ba      	uxth	r2, r7
 802ba1a:	9102      	str	r1, [sp, #8]
 802ba1c:	2101      	movs	r1, #1
 802ba1e:	4413      	add	r3, r2
 802ba20:	9101      	str	r1, [sp, #4]
 802ba22:	4402      	add	r2, r0
 802ba24:	fa0f f18b 	sxth.w	r1, fp
 802ba28:	f8da 0000 	ldr.w	r0, [sl]
 802ba2c:	9100      	str	r1, [sp, #0]
 802ba2e:	6941      	ldr	r1, [r0, #20]
 802ba30:	b21b      	sxth	r3, r3
 802ba32:	460d      	mov	r5, r1
 802ba34:	b212      	sxth	r2, r2
 802ba36:	9905      	ldr	r1, [sp, #20]
 802ba38:	4650      	mov	r0, sl
 802ba3a:	47a8      	blx	r5
 802ba3c:	9b04      	ldr	r3, [sp, #16]
 802ba3e:	3301      	adds	r3, #1
 802ba40:	f107 0201 	add.w	r2, r7, #1
 802ba44:	d0c8      	beq.n	802b9d8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802ba46:	f9b4 7000 	ldrsh.w	r7, [r4]
 802ba4a:	1abb      	subs	r3, r7, r2
 802ba4c:	2b00      	cmp	r3, #0
 802ba4e:	dd31      	ble.n	802bab4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 802ba50:	2a00      	cmp	r2, #0
 802ba52:	dabb      	bge.n	802b9cc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 802ba54:	2f00      	cmp	r7, #0
 802ba56:	dd2d      	ble.n	802bab4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 802ba58:	2200      	movs	r2, #0
 802ba5a:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 802ba5e:	19d1      	adds	r1, r2, r7
 802ba60:	4299      	cmp	r1, r3
 802ba62:	db02      	blt.n	802ba6a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x142>
 802ba64:	1a9f      	subs	r7, r3, r2
 802ba66:	2f00      	cmp	r7, #0
 802ba68:	dd24      	ble.n	802bab4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 802ba6a:	ea4f 1188 	mov.w	r1, r8, lsl #6
 802ba6e:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 802ba72:	f7ff ff39 	bl	802b8e8 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 802ba76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ba78:	fb10 f003 	smulbb	r0, r0, r3
 802ba7c:	b280      	uxth	r0, r0
 802ba7e:	1c41      	adds	r1, r0, #1
 802ba80:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802ba84:	1209      	asrs	r1, r1, #8
 802ba86:	f011 0fff 	tst.w	r1, #255	; 0xff
 802ba8a:	d013      	beq.n	802bab4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 802ba8c:	9808      	ldr	r0, [sp, #32]
 802ba8e:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 802ba90:	b292      	uxth	r2, r2
 802ba92:	b2c9      	uxtb	r1, r1
 802ba94:	4413      	add	r3, r2
 802ba96:	9102      	str	r1, [sp, #8]
 802ba98:	4402      	add	r2, r0
 802ba9a:	b23f      	sxth	r7, r7
 802ba9c:	f8da 0000 	ldr.w	r0, [sl]
 802baa0:	9701      	str	r7, [sp, #4]
 802baa2:	fa0f f18b 	sxth.w	r1, fp
 802baa6:	9100      	str	r1, [sp, #0]
 802baa8:	6947      	ldr	r7, [r0, #20]
 802baaa:	9905      	ldr	r1, [sp, #20]
 802baac:	b21b      	sxth	r3, r3
 802baae:	b212      	sxth	r2, r2
 802bab0:	4650      	mov	r0, sl
 802bab2:	47b8      	blx	r7
 802bab4:	464b      	mov	r3, r9
 802bab6:	e75c      	b.n	802b972 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 802bab8:	2f00      	cmp	r7, #0
 802baba:	da95      	bge.n	802b9e8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xc0>
 802babc:	e78c      	b.n	802b9d8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802babe:	2900      	cmp	r1, #0
 802bac0:	d0f8      	beq.n	802bab4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 802bac2:	e78f      	b.n	802b9e4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbc>

0802bac4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 802bac4:	4b4b      	ldr	r3, [pc, #300]	; (802bbf4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x130>)
 802bac6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 802baca:	2500      	movs	r5, #0
 802bacc:	f100 0620 	add.w	r6, r0, #32
 802bad0:	4604      	mov	r4, r0
 802bad2:	e9c0 3100 	strd	r3, r1, [r0]
 802bad6:	e9c0 5502 	strd	r5, r5, [r0, #8]
 802bada:	e9c0 5504 	strd	r5, r5, [r0, #16]
 802bade:	e9c0 5506 	strd	r5, r5, [r0, #24]
 802bae2:	f100 0718 	add.w	r7, r0, #24
 802bae6:	4630      	mov	r0, r6
 802bae8:	4690      	mov	r8, r2
 802baea:	f7ed fd1f 	bl	801952c <_ZN8touchgfx7OutlineC1Ev>
 802baee:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
 802baf2:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 802baf6:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 802bafa:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 802bafe:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 802bb02:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 802bb06:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 802bb0a:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 802bb0e:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 802bb12:	f9b8 2000 	ldrsh.w	r2, [r8]
 802bb16:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 802bb1a:	f8d4 c004 	ldr.w	ip, [r4, #4]
 802bb1e:	9500      	str	r5, [sp, #0]
 802bb20:	4410      	add	r0, r2
 802bb22:	b280      	uxth	r0, r0
 802bb24:	fa0f fa80 	sxth.w	sl, r0
 802bb28:	45aa      	cmp	sl, r5
 802bb2a:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 802bb2e:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 802bb32:	dd5c      	ble.n	802bbee <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 802bb34:	4591      	cmp	r9, r2
 802bb36:	dd5a      	ble.n	802bbee <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 802bb38:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 802bb3c:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 802bb40:	440b      	add	r3, r1
 802bb42:	b29b      	uxth	r3, r3
 802bb44:	b21d      	sxth	r5, r3
 802bb46:	2d00      	cmp	r5, #0
 802bb48:	dd51      	ble.n	802bbee <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 802bb4a:	458e      	cmp	lr, r1
 802bb4c:	dd4f      	ble.n	802bbee <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 802bb4e:	45d1      	cmp	r9, sl
 802bb50:	bfb8      	it	lt
 802bb52:	fa1f f089 	uxthlt.w	r0, r9
 802bb56:	45ae      	cmp	lr, r5
 802bb58:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 802bb5c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 802bb60:	bfb8      	it	lt
 802bb62:	fa1f f38e 	uxthlt.w	r3, lr
 802bb66:	1a80      	subs	r0, r0, r2
 802bb68:	1a5b      	subs	r3, r3, r1
 802bb6a:	f8ad 0004 	strh.w	r0, [sp, #4]
 802bb6e:	f8ad 3006 	strh.w	r3, [sp, #6]
 802bb72:	f8ad 2000 	strh.w	r2, [sp]
 802bb76:	f8ad 1002 	strh.w	r1, [sp, #2]
 802bb7a:	466d      	mov	r5, sp
 802bb7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 802bb80:	e887 0003 	stmia.w	r7, {r0, r1}
 802bb84:	f8dc 3000 	ldr.w	r3, [ip]
 802bb88:	4660      	mov	r0, ip
 802bb8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802bb8c:	4639      	mov	r1, r7
 802bb8e:	4798      	blx	r3
 802bb90:	6861      	ldr	r1, [r4, #4]
 802bb92:	4628      	mov	r0, r5
 802bb94:	3104      	adds	r1, #4
 802bb96:	f7ef fa27 	bl	801afe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802bb9a:	4638      	mov	r0, r7
 802bb9c:	f7ef f9e0 	bl	801af60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802bba0:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802bba4:	f8bd 2000 	ldrh.w	r2, [sp]
 802bba8:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 802bbac:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 802bbb0:	4630      	mov	r0, r6
 802bbb2:	f7ed fc9f 	bl	80194f4 <_ZN8touchgfx7Outline5resetEv>
 802bbb6:	f9bd 3000 	ldrsh.w	r3, [sp]
 802bbba:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
 802bbbe:	015b      	lsls	r3, r3, #5
 802bbc0:	60a3      	str	r3, [r4, #8]
 802bbc2:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802bbc6:	015b      	lsls	r3, r3, #5
 802bbc8:	60e3      	str	r3, [r4, #12]
 802bbca:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 802bbce:	015b      	lsls	r3, r3, #5
 802bbd0:	6123      	str	r3, [r4, #16]
 802bbd2:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 802bbd6:	015b      	lsls	r3, r3, #5
 802bbd8:	6163      	str	r3, [r4, #20]
 802bbda:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 802bbde:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 802bbe2:	4620      	mov	r0, r4
 802bbe4:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
 802bbe8:	b002      	add	sp, #8
 802bbea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802bbee:	2300      	movs	r3, #0
 802bbf0:	9301      	str	r3, [sp, #4]
 802bbf2:	e7c2      	b.n	802bb7a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xb6>
 802bbf4:	0802fb58 	.word	0x0802fb58

0802bbf8 <_ZN8touchgfx6Canvas5closeEv>:
 802bbf8:	b538      	push	{r3, r4, r5, lr}
 802bbfa:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 802bbfe:	4604      	mov	r4, r0
 802bc00:	b193      	cbz	r3, 802bc28 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802bc02:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 802bc06:	f890 2065 	ldrb.w	r2, [r0, #101]	; 0x65
 802bc0a:	4213      	tst	r3, r2
 802bc0c:	d10c      	bne.n	802bc28 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802bc0e:	f100 0520 	add.w	r5, r0, #32
 802bc12:	b123      	cbz	r3, 802bc1e <_ZN8touchgfx6Canvas5closeEv+0x26>
 802bc14:	e9d0 1217 	ldrd	r1, r2, [r0, #92]	; 0x5c
 802bc18:	4628      	mov	r0, r5
 802bc1a:	f7ff fe79 	bl	802b910 <_ZN8touchgfx10Rasterizer6lineToEii>
 802bc1e:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
 802bc22:	4628      	mov	r0, r5
 802bc24:	f7ff fe74 	bl	802b910 <_ZN8touchgfx10Rasterizer6lineToEii>
 802bc28:	2300      	movs	r3, #0
 802bc2a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 802bc2e:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
 802bc32:	4298      	cmp	r0, r3
 802bc34:	bf34      	ite	cc
 802bc36:	2000      	movcc	r0, #0
 802bc38:	2001      	movcs	r0, #1
 802bc3a:	bd38      	pop	{r3, r4, r5, pc}

0802bc3c <_ZN8touchgfx6Canvas6renderEh>:
 802bc3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802bc40:	4604      	mov	r4, r0
 802bc42:	6840      	ldr	r0, [r0, #4]
 802bc44:	6803      	ldr	r3, [r0, #0]
 802bc46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802bc48:	460d      	mov	r5, r1
 802bc4a:	4798      	blx	r3
 802bc4c:	fb10 f105 	smulbb	r1, r0, r5
 802bc50:	b289      	uxth	r1, r1
 802bc52:	1c4d      	adds	r5, r1, #1
 802bc54:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802bc58:	122d      	asrs	r5, r5, #8
 802bc5a:	f000 809d 	beq.w	802bd98 <_ZN8touchgfx6Canvas6renderEh+0x15c>
 802bc5e:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 802bc62:	2b00      	cmp	r3, #0
 802bc64:	f000 8098 	beq.w	802bd98 <_ZN8touchgfx6Canvas6renderEh+0x15c>
 802bc68:	4620      	mov	r0, r4
 802bc6a:	f7ff ffc5 	bl	802bbf8 <_ZN8touchgfx6Canvas5closeEv>
 802bc6e:	4607      	mov	r7, r0
 802bc70:	2800      	cmp	r0, #0
 802bc72:	d048      	beq.n	802bd06 <_ZN8touchgfx6Canvas6renderEh+0xca>
 802bc74:	6863      	ldr	r3, [r4, #4]
 802bc76:	4e49      	ldr	r6, [pc, #292]	; (802bd9c <_ZN8touchgfx6Canvas6renderEh+0x160>)
 802bc78:	6a98      	ldr	r0, [r3, #40]	; 0x28
 802bc7a:	6837      	ldr	r7, [r6, #0]
 802bc7c:	6803      	ldr	r3, [r0, #0]
 802bc7e:	689b      	ldr	r3, [r3, #8]
 802bc80:	4798      	blx	r3
 802bc82:	4601      	mov	r1, r0
 802bc84:	4638      	mov	r0, r7
 802bc86:	f7eb fc87 	bl	8017598 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 802bc8a:	4607      	mov	r7, r0
 802bc8c:	f7e6 fb52 	bl	8012334 <_ZN8touchgfx3HAL3lcdEv>
 802bc90:	6803      	ldr	r3, [r0, #0]
 802bc92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802bc94:	4798      	blx	r3
 802bc96:	4680      	mov	r8, r0
 802bc98:	f7e6 fb4c 	bl	8012334 <_ZN8touchgfx3HAL3lcdEv>
 802bc9c:	6803      	ldr	r3, [r0, #0]
 802bc9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802bca0:	4798      	blx	r3
 802bca2:	280b      	cmp	r0, #11
 802bca4:	d85d      	bhi.n	802bd62 <_ZN8touchgfx6Canvas6renderEh+0x126>
 802bca6:	e8df f000 	tbb	[pc, r0]
 802bcaa:	5e53      	.short	0x5e53
 802bcac:	325c066e 	.word	0x325c066e
 802bcb0:	67676742 	.word	0x67676742
 802bcb4:	6767      	.short	0x6767
 802bcb6:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802bcba:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 802bcbe:	2208      	movs	r2, #8
 802bcc0:	fb91 f2f2 	sdiv	r2, r1, r2
 802bcc4:	fb08 2303 	mla	r3, r8, r3, r2
 802bcc8:	441f      	add	r7, r3
 802bcca:	424b      	negs	r3, r1
 802bccc:	f003 0307 	and.w	r3, r3, #7
 802bcd0:	f001 0107 	and.w	r1, r1, #7
 802bcd4:	bf58      	it	pl
 802bcd6:	4259      	negpl	r1, r3
 802bcd8:	b2c9      	uxtb	r1, r1
 802bcda:	b2ed      	uxtb	r5, r5
 802bcdc:	e9cd 1500 	strd	r1, r5, [sp]
 802bce0:	6860      	ldr	r0, [r4, #4]
 802bce2:	463a      	mov	r2, r7
 802bce4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 802bce6:	fa0f f388 	sxth.w	r3, r8
 802bcea:	f104 0020 	add.w	r0, r4, #32
 802bcee:	f7ff fe1b 	bl	802b928 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 802bcf2:	6863      	ldr	r3, [r4, #4]
 802bcf4:	4607      	mov	r7, r0
 802bcf6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 802bcf8:	6803      	ldr	r3, [r0, #0]
 802bcfa:	691b      	ldr	r3, [r3, #16]
 802bcfc:	4798      	blx	r3
 802bcfe:	6830      	ldr	r0, [r6, #0]
 802bd00:	6803      	ldr	r3, [r0, #0]
 802bd02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802bd04:	4798      	blx	r3
 802bd06:	4638      	mov	r0, r7
 802bd08:	b002      	add	sp, #8
 802bd0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bd0e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802bd12:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 802bd16:	2204      	movs	r2, #4
 802bd18:	fb91 f2f2 	sdiv	r2, r1, r2
 802bd1c:	fb08 2303 	mla	r3, r8, r3, r2
 802bd20:	441f      	add	r7, r3
 802bd22:	424b      	negs	r3, r1
 802bd24:	f003 0303 	and.w	r3, r3, #3
 802bd28:	f001 0103 	and.w	r1, r1, #3
 802bd2c:	e7d2      	b.n	802bcd4 <_ZN8touchgfx6Canvas6renderEh+0x98>
 802bd2e:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 802bd32:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802bd36:	2900      	cmp	r1, #0
 802bd38:	f04f 0202 	mov.w	r2, #2
 802bd3c:	fb91 f2f2 	sdiv	r2, r1, r2
 802bd40:	f001 0101 	and.w	r1, r1, #1
 802bd44:	fb08 2303 	mla	r3, r8, r3, r2
 802bd48:	441f      	add	r7, r3
 802bd4a:	bfb8      	it	lt
 802bd4c:	4249      	neglt	r1, r1
 802bd4e:	e7c3      	b.n	802bcd8 <_ZN8touchgfx6Canvas6renderEh+0x9c>
 802bd50:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802bd54:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 802bd58:	fb08 f303 	mul.w	r3, r8, r3
 802bd5c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802bd60:	441f      	add	r7, r3
 802bd62:	2100      	movs	r1, #0
 802bd64:	e7b9      	b.n	802bcda <_ZN8touchgfx6Canvas6renderEh+0x9e>
 802bd66:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802bd6a:	fb08 f203 	mul.w	r2, r8, r3
 802bd6e:	8b23      	ldrh	r3, [r4, #24]
 802bd70:	2103      	movs	r1, #3
 802bd72:	fb13 2301 	smlabb	r3, r3, r1, r2
 802bd76:	e7f3      	b.n	802bd60 <_ZN8touchgfx6Canvas6renderEh+0x124>
 802bd78:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802bd7c:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 802bd80:	fb08 2303 	mla	r3, r8, r3, r2
 802bd84:	e7ec      	b.n	802bd60 <_ZN8touchgfx6Canvas6renderEh+0x124>
 802bd86:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802bd8a:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 802bd8e:	fb08 f303 	mul.w	r3, r8, r3
 802bd92:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802bd96:	e7e3      	b.n	802bd60 <_ZN8touchgfx6Canvas6renderEh+0x124>
 802bd98:	2701      	movs	r7, #1
 802bd9a:	e7b4      	b.n	802bd06 <_ZN8touchgfx6Canvas6renderEh+0xca>
 802bd9c:	2000af48 	.word	0x2000af48

0802bda0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802bda0:	b510      	push	{r4, lr}
 802bda2:	4b07      	ldr	r3, [pc, #28]	; (802bdc0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 802bda4:	781b      	ldrb	r3, [r3, #0]
 802bda6:	2b01      	cmp	r3, #1
 802bda8:	d108      	bne.n	802bdbc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 802bdaa:	6843      	ldr	r3, [r0, #4]
 802bdac:	6814      	ldr	r4, [r2, #0]
 802bdae:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802bdb2:	680b      	ldr	r3, [r1, #0]
 802bdb4:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 802bdb8:	6013      	str	r3, [r2, #0]
 802bdba:	600c      	str	r4, [r1, #0]
 802bdbc:	bd10      	pop	{r4, pc}
 802bdbe:	bf00      	nop
 802bdc0:	2000af40 	.word	0x2000af40

0802bdc4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 802bdc4:	b513      	push	{r0, r1, r4, lr}
 802bdc6:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 802bdca:	4604      	mov	r4, r0
 802bdcc:	e9cd 2100 	strd	r2, r1, [sp]
 802bdd0:	b9a3      	cbnz	r3, 802bdfc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 802bdd2:	466a      	mov	r2, sp
 802bdd4:	a901      	add	r1, sp, #4
 802bdd6:	4620      	mov	r0, r4
 802bdd8:	f7ff ffe2 	bl	802bda0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802bddc:	68a3      	ldr	r3, [r4, #8]
 802bdde:	9901      	ldr	r1, [sp, #4]
 802bde0:	9a00      	ldr	r2, [sp, #0]
 802bde2:	1ac9      	subs	r1, r1, r3
 802bde4:	68e3      	ldr	r3, [r4, #12]
 802bde6:	9101      	str	r1, [sp, #4]
 802bde8:	1ad2      	subs	r2, r2, r3
 802bdea:	2a00      	cmp	r2, #0
 802bdec:	9200      	str	r2, [sp, #0]
 802bdee:	da0b      	bge.n	802be08 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 802bdf0:	2301      	movs	r3, #1
 802bdf2:	2900      	cmp	r1, #0
 802bdf4:	da0e      	bge.n	802be14 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 802bdf6:	f043 0304 	orr.w	r3, r3, #4
 802bdfa:	e013      	b.n	802be24 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 802bdfc:	f7ff fefc 	bl	802bbf8 <_ZN8touchgfx6Canvas5closeEv>
 802be00:	2800      	cmp	r0, #0
 802be02:	d1e6      	bne.n	802bdd2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 802be04:	b002      	add	sp, #8
 802be06:	bd10      	pop	{r4, pc}
 802be08:	6963      	ldr	r3, [r4, #20]
 802be0a:	429a      	cmp	r2, r3
 802be0c:	bfac      	ite	ge
 802be0e:	2302      	movge	r3, #2
 802be10:	2300      	movlt	r3, #0
 802be12:	e7ee      	b.n	802bdf2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 802be14:	6920      	ldr	r0, [r4, #16]
 802be16:	4281      	cmp	r1, r0
 802be18:	bfac      	ite	ge
 802be1a:	2008      	movge	r0, #8
 802be1c:	2000      	movlt	r0, #0
 802be1e:	4318      	orrs	r0, r3
 802be20:	b2c3      	uxtb	r3, r0
 802be22:	b158      	cbz	r0, 802be3c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 802be24:	2200      	movs	r2, #0
 802be26:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 802be2a:	9901      	ldr	r1, [sp, #4]
 802be2c:	9a00      	ldr	r2, [sp, #0]
 802be2e:	66a1      	str	r1, [r4, #104]	; 0x68
 802be30:	66e2      	str	r2, [r4, #108]	; 0x6c
 802be32:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
 802be36:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 802be3a:	e7e3      	b.n	802be04 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 802be3c:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 802be40:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 802be44:	4298      	cmp	r0, r3
 802be46:	d803      	bhi.n	802be50 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 802be48:	f104 0020 	add.w	r0, r4, #32
 802be4c:	f7ee f850 	bl	8019ef0 <_ZN8touchgfx7Outline6moveToEii>
 802be50:	2301      	movs	r3, #1
 802be52:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 802be56:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 802be5a:	2300      	movs	r3, #0
 802be5c:	e7e5      	b.n	802be2a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

0802be5e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 802be5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802be60:	ab02      	add	r3, sp, #8
 802be62:	4604      	mov	r4, r0
 802be64:	f843 2d08 	str.w	r2, [r3, #-8]!
 802be68:	9101      	str	r1, [sp, #4]
 802be6a:	461a      	mov	r2, r3
 802be6c:	a901      	add	r1, sp, #4
 802be6e:	f7ff ff97 	bl	802bda0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802be72:	68a3      	ldr	r3, [r4, #8]
 802be74:	9901      	ldr	r1, [sp, #4]
 802be76:	9a00      	ldr	r2, [sp, #0]
 802be78:	1ac9      	subs	r1, r1, r3
 802be7a:	68e3      	ldr	r3, [r4, #12]
 802be7c:	9101      	str	r1, [sp, #4]
 802be7e:	1ad2      	subs	r2, r2, r3
 802be80:	2a00      	cmp	r2, #0
 802be82:	9200      	str	r2, [sp, #0]
 802be84:	db1c      	blt.n	802bec0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 802be86:	6963      	ldr	r3, [r4, #20]
 802be88:	429a      	cmp	r2, r3
 802be8a:	bfac      	ite	ge
 802be8c:	2002      	movge	r0, #2
 802be8e:	2000      	movlt	r0, #0
 802be90:	2900      	cmp	r1, #0
 802be92:	db17      	blt.n	802bec4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 802be94:	6923      	ldr	r3, [r4, #16]
 802be96:	4299      	cmp	r1, r3
 802be98:	bfac      	ite	ge
 802be9a:	2308      	movge	r3, #8
 802be9c:	2300      	movlt	r3, #0
 802be9e:	4303      	orrs	r3, r0
 802bea0:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 802bea4:	b2dd      	uxtb	r5, r3
 802bea6:	b978      	cbnz	r0, 802bec8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 802bea8:	f104 0020 	add.w	r0, r4, #32
 802beac:	f7ff fd30 	bl	802b910 <_ZN8touchgfx10Rasterizer6lineToEii>
 802beb0:	9b01      	ldr	r3, [sp, #4]
 802beb2:	65e3      	str	r3, [r4, #92]	; 0x5c
 802beb4:	9b00      	ldr	r3, [sp, #0]
 802beb6:	6623      	str	r3, [r4, #96]	; 0x60
 802beb8:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 802bebc:	b002      	add	sp, #8
 802bebe:	bd70      	pop	{r4, r5, r6, pc}
 802bec0:	2001      	movs	r0, #1
 802bec2:	e7e5      	b.n	802be90 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 802bec4:	2304      	movs	r3, #4
 802bec6:	e7ea      	b.n	802be9e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 802bec8:	b113      	cbz	r3, 802bed0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 802beca:	ea10 0305 	ands.w	r3, r0, r5
 802bece:	d11c      	bne.n	802bf0a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 802bed0:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 802bed4:	f104 0620 	add.w	r6, r4, #32
 802bed8:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
 802bedc:	b98b      	cbnz	r3, 802bf02 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 802bede:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 802bee2:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 802bee6:	4298      	cmp	r0, r3
 802bee8:	d802      	bhi.n	802bef0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 802beea:	4630      	mov	r0, r6
 802beec:	f7ee f800 	bl	8019ef0 <_ZN8touchgfx7Outline6moveToEii>
 802bef0:	2301      	movs	r3, #1
 802bef2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 802bef6:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 802befa:	e9dd 2100 	ldrd	r2, r1, [sp]
 802befe:	4630      	mov	r0, r6
 802bf00:	e7d4      	b.n	802beac <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 802bf02:	4630      	mov	r0, r6
 802bf04:	f7ff fd04 	bl	802b910 <_ZN8touchgfx10Rasterizer6lineToEii>
 802bf08:	e7f7      	b.n	802befa <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 802bf0a:	461d      	mov	r5, r3
 802bf0c:	e7d0      	b.n	802beb0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

0802bf10 <_ZN8touchgfx6CanvasD1Ev>:
 802bf10:	b510      	push	{r4, lr}
 802bf12:	4b04      	ldr	r3, [pc, #16]	; (802bf24 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 802bf14:	4604      	mov	r4, r0
 802bf16:	f840 3b20 	str.w	r3, [r0], #32
 802bf1a:	f7ed fae3 	bl	80194e4 <_ZN8touchgfx7OutlineD1Ev>
 802bf1e:	4620      	mov	r0, r4
 802bf20:	bd10      	pop	{r4, pc}
 802bf22:	bf00      	nop
 802bf24:	0802fb58 	.word	0x0802fb58

0802bf28 <_ZN8touchgfx6CanvasD0Ev>:
 802bf28:	b510      	push	{r4, lr}
 802bf2a:	4604      	mov	r4, r0
 802bf2c:	f7ff fff0 	bl	802bf10 <_ZN8touchgfx6CanvasD1Ev>
 802bf30:	4620      	mov	r0, r4
 802bf32:	2170      	movs	r1, #112	; 0x70
 802bf34:	f000 f807 	bl	802bf46 <_ZdlPvj>
 802bf38:	4620      	mov	r0, r4
 802bf3a:	bd10      	pop	{r4, pc}

0802bf3c <__aeabi_atexit>:
 802bf3c:	460b      	mov	r3, r1
 802bf3e:	4601      	mov	r1, r0
 802bf40:	4618      	mov	r0, r3
 802bf42:	f000 bed1 	b.w	802cce8 <__cxa_atexit>

0802bf46 <_ZdlPvj>:
 802bf46:	f000 b812 	b.w	802bf6e <_ZdlPv>

0802bf4a <__cxa_guard_acquire>:
 802bf4a:	6803      	ldr	r3, [r0, #0]
 802bf4c:	07db      	lsls	r3, r3, #31
 802bf4e:	d406      	bmi.n	802bf5e <__cxa_guard_acquire+0x14>
 802bf50:	7843      	ldrb	r3, [r0, #1]
 802bf52:	b103      	cbz	r3, 802bf56 <__cxa_guard_acquire+0xc>
 802bf54:	deff      	udf	#255	; 0xff
 802bf56:	2301      	movs	r3, #1
 802bf58:	7043      	strb	r3, [r0, #1]
 802bf5a:	4618      	mov	r0, r3
 802bf5c:	4770      	bx	lr
 802bf5e:	2000      	movs	r0, #0
 802bf60:	4770      	bx	lr

0802bf62 <__cxa_guard_release>:
 802bf62:	2301      	movs	r3, #1
 802bf64:	6003      	str	r3, [r0, #0]
 802bf66:	4770      	bx	lr

0802bf68 <__cxa_pure_virtual>:
 802bf68:	b508      	push	{r3, lr}
 802bf6a:	f000 f80f 	bl	802bf8c <_ZSt9terminatev>

0802bf6e <_ZdlPv>:
 802bf6e:	f000 be07 	b.w	802cb80 <free>

0802bf72 <_ZN10__cxxabiv111__terminateEPFvvE>:
 802bf72:	b508      	push	{r3, lr}
 802bf74:	4780      	blx	r0
 802bf76:	f000 fdcf 	bl	802cb18 <abort>
	...

0802bf7c <_ZSt13get_terminatev>:
 802bf7c:	4b02      	ldr	r3, [pc, #8]	; (802bf88 <_ZSt13get_terminatev+0xc>)
 802bf7e:	6818      	ldr	r0, [r3, #0]
 802bf80:	f3bf 8f5b 	dmb	ish
 802bf84:	4770      	bx	lr
 802bf86:	bf00      	nop
 802bf88:	200000b4 	.word	0x200000b4

0802bf8c <_ZSt9terminatev>:
 802bf8c:	b508      	push	{r3, lr}
 802bf8e:	f7ff fff5 	bl	802bf7c <_ZSt13get_terminatev>
 802bf92:	f7ff ffee 	bl	802bf72 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0802bf98 <cosf>:
 802bf98:	ee10 3a10 	vmov	r3, s0
 802bf9c:	b507      	push	{r0, r1, r2, lr}
 802bf9e:	4a1e      	ldr	r2, [pc, #120]	; (802c018 <cosf+0x80>)
 802bfa0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802bfa4:	4293      	cmp	r3, r2
 802bfa6:	dc06      	bgt.n	802bfb6 <cosf+0x1e>
 802bfa8:	eddf 0a1c 	vldr	s1, [pc, #112]	; 802c01c <cosf+0x84>
 802bfac:	b003      	add	sp, #12
 802bfae:	f85d eb04 	ldr.w	lr, [sp], #4
 802bfb2:	f000 b8ff 	b.w	802c1b4 <__kernel_cosf>
 802bfb6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802bfba:	db04      	blt.n	802bfc6 <cosf+0x2e>
 802bfbc:	ee30 0a40 	vsub.f32	s0, s0, s0
 802bfc0:	b003      	add	sp, #12
 802bfc2:	f85d fb04 	ldr.w	pc, [sp], #4
 802bfc6:	4668      	mov	r0, sp
 802bfc8:	f000 f99a 	bl	802c300 <__ieee754_rem_pio2f>
 802bfcc:	f000 0003 	and.w	r0, r0, #3
 802bfd0:	2801      	cmp	r0, #1
 802bfd2:	d009      	beq.n	802bfe8 <cosf+0x50>
 802bfd4:	2802      	cmp	r0, #2
 802bfd6:	d010      	beq.n	802bffa <cosf+0x62>
 802bfd8:	b9b0      	cbnz	r0, 802c008 <cosf+0x70>
 802bfda:	eddd 0a01 	vldr	s1, [sp, #4]
 802bfde:	ed9d 0a00 	vldr	s0, [sp]
 802bfe2:	f000 f8e7 	bl	802c1b4 <__kernel_cosf>
 802bfe6:	e7eb      	b.n	802bfc0 <cosf+0x28>
 802bfe8:	eddd 0a01 	vldr	s1, [sp, #4]
 802bfec:	ed9d 0a00 	vldr	s0, [sp]
 802bff0:	f000 f93e 	bl	802c270 <__kernel_sinf>
 802bff4:	eeb1 0a40 	vneg.f32	s0, s0
 802bff8:	e7e2      	b.n	802bfc0 <cosf+0x28>
 802bffa:	eddd 0a01 	vldr	s1, [sp, #4]
 802bffe:	ed9d 0a00 	vldr	s0, [sp]
 802c002:	f000 f8d7 	bl	802c1b4 <__kernel_cosf>
 802c006:	e7f5      	b.n	802bff4 <cosf+0x5c>
 802c008:	eddd 0a01 	vldr	s1, [sp, #4]
 802c00c:	ed9d 0a00 	vldr	s0, [sp]
 802c010:	2001      	movs	r0, #1
 802c012:	f000 f92d 	bl	802c270 <__kernel_sinf>
 802c016:	e7d3      	b.n	802bfc0 <cosf+0x28>
 802c018:	3f490fd8 	.word	0x3f490fd8
 802c01c:	00000000 	.word	0x00000000

0802c020 <sinf>:
 802c020:	ee10 3a10 	vmov	r3, s0
 802c024:	b507      	push	{r0, r1, r2, lr}
 802c026:	4a1f      	ldr	r2, [pc, #124]	; (802c0a4 <sinf+0x84>)
 802c028:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802c02c:	4293      	cmp	r3, r2
 802c02e:	dc07      	bgt.n	802c040 <sinf+0x20>
 802c030:	eddf 0a1d 	vldr	s1, [pc, #116]	; 802c0a8 <sinf+0x88>
 802c034:	2000      	movs	r0, #0
 802c036:	b003      	add	sp, #12
 802c038:	f85d eb04 	ldr.w	lr, [sp], #4
 802c03c:	f000 b918 	b.w	802c270 <__kernel_sinf>
 802c040:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802c044:	db04      	blt.n	802c050 <sinf+0x30>
 802c046:	ee30 0a40 	vsub.f32	s0, s0, s0
 802c04a:	b003      	add	sp, #12
 802c04c:	f85d fb04 	ldr.w	pc, [sp], #4
 802c050:	4668      	mov	r0, sp
 802c052:	f000 f955 	bl	802c300 <__ieee754_rem_pio2f>
 802c056:	f000 0003 	and.w	r0, r0, #3
 802c05a:	2801      	cmp	r0, #1
 802c05c:	d00a      	beq.n	802c074 <sinf+0x54>
 802c05e:	2802      	cmp	r0, #2
 802c060:	d00f      	beq.n	802c082 <sinf+0x62>
 802c062:	b9c0      	cbnz	r0, 802c096 <sinf+0x76>
 802c064:	eddd 0a01 	vldr	s1, [sp, #4]
 802c068:	ed9d 0a00 	vldr	s0, [sp]
 802c06c:	2001      	movs	r0, #1
 802c06e:	f000 f8ff 	bl	802c270 <__kernel_sinf>
 802c072:	e7ea      	b.n	802c04a <sinf+0x2a>
 802c074:	eddd 0a01 	vldr	s1, [sp, #4]
 802c078:	ed9d 0a00 	vldr	s0, [sp]
 802c07c:	f000 f89a 	bl	802c1b4 <__kernel_cosf>
 802c080:	e7e3      	b.n	802c04a <sinf+0x2a>
 802c082:	eddd 0a01 	vldr	s1, [sp, #4]
 802c086:	ed9d 0a00 	vldr	s0, [sp]
 802c08a:	2001      	movs	r0, #1
 802c08c:	f000 f8f0 	bl	802c270 <__kernel_sinf>
 802c090:	eeb1 0a40 	vneg.f32	s0, s0
 802c094:	e7d9      	b.n	802c04a <sinf+0x2a>
 802c096:	eddd 0a01 	vldr	s1, [sp, #4]
 802c09a:	ed9d 0a00 	vldr	s0, [sp]
 802c09e:	f000 f889 	bl	802c1b4 <__kernel_cosf>
 802c0a2:	e7f5      	b.n	802c090 <sinf+0x70>
 802c0a4:	3f490fd8 	.word	0x3f490fd8
 802c0a8:	00000000 	.word	0x00000000

0802c0ac <ceilf>:
 802c0ac:	ee10 3a10 	vmov	r3, s0
 802c0b0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802c0b4:	3a7f      	subs	r2, #127	; 0x7f
 802c0b6:	2a16      	cmp	r2, #22
 802c0b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802c0bc:	dc2a      	bgt.n	802c114 <ceilf+0x68>
 802c0be:	2a00      	cmp	r2, #0
 802c0c0:	da11      	bge.n	802c0e6 <ceilf+0x3a>
 802c0c2:	eddf 7a19 	vldr	s15, [pc, #100]	; 802c128 <ceilf+0x7c>
 802c0c6:	ee30 0a27 	vadd.f32	s0, s0, s15
 802c0ca:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802c0ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c0d2:	dd05      	ble.n	802c0e0 <ceilf+0x34>
 802c0d4:	2b00      	cmp	r3, #0
 802c0d6:	db23      	blt.n	802c120 <ceilf+0x74>
 802c0d8:	2900      	cmp	r1, #0
 802c0da:	bf18      	it	ne
 802c0dc:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 802c0e0:	ee00 3a10 	vmov	s0, r3
 802c0e4:	4770      	bx	lr
 802c0e6:	4911      	ldr	r1, [pc, #68]	; (802c12c <ceilf+0x80>)
 802c0e8:	4111      	asrs	r1, r2
 802c0ea:	420b      	tst	r3, r1
 802c0ec:	d0fa      	beq.n	802c0e4 <ceilf+0x38>
 802c0ee:	eddf 7a0e 	vldr	s15, [pc, #56]	; 802c128 <ceilf+0x7c>
 802c0f2:	ee30 0a27 	vadd.f32	s0, s0, s15
 802c0f6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802c0fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c0fe:	ddef      	ble.n	802c0e0 <ceilf+0x34>
 802c100:	2b00      	cmp	r3, #0
 802c102:	bfc2      	ittt	gt
 802c104:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 802c108:	fa40 f202 	asrgt.w	r2, r0, r2
 802c10c:	189b      	addgt	r3, r3, r2
 802c10e:	ea23 0301 	bic.w	r3, r3, r1
 802c112:	e7e5      	b.n	802c0e0 <ceilf+0x34>
 802c114:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802c118:	d3e4      	bcc.n	802c0e4 <ceilf+0x38>
 802c11a:	ee30 0a00 	vadd.f32	s0, s0, s0
 802c11e:	4770      	bx	lr
 802c120:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802c124:	e7dc      	b.n	802c0e0 <ceilf+0x34>
 802c126:	bf00      	nop
 802c128:	7149f2ca 	.word	0x7149f2ca
 802c12c:	007fffff 	.word	0x007fffff

0802c130 <floorf>:
 802c130:	ee10 3a10 	vmov	r3, s0
 802c134:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802c138:	3a7f      	subs	r2, #127	; 0x7f
 802c13a:	2a16      	cmp	r2, #22
 802c13c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802c140:	dc2a      	bgt.n	802c198 <floorf+0x68>
 802c142:	2a00      	cmp	r2, #0
 802c144:	da11      	bge.n	802c16a <floorf+0x3a>
 802c146:	eddf 7a18 	vldr	s15, [pc, #96]	; 802c1a8 <floorf+0x78>
 802c14a:	ee30 0a27 	vadd.f32	s0, s0, s15
 802c14e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802c152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c156:	dd05      	ble.n	802c164 <floorf+0x34>
 802c158:	2b00      	cmp	r3, #0
 802c15a:	da23      	bge.n	802c1a4 <floorf+0x74>
 802c15c:	4a13      	ldr	r2, [pc, #76]	; (802c1ac <floorf+0x7c>)
 802c15e:	2900      	cmp	r1, #0
 802c160:	bf18      	it	ne
 802c162:	4613      	movne	r3, r2
 802c164:	ee00 3a10 	vmov	s0, r3
 802c168:	4770      	bx	lr
 802c16a:	4911      	ldr	r1, [pc, #68]	; (802c1b0 <floorf+0x80>)
 802c16c:	4111      	asrs	r1, r2
 802c16e:	420b      	tst	r3, r1
 802c170:	d0fa      	beq.n	802c168 <floorf+0x38>
 802c172:	eddf 7a0d 	vldr	s15, [pc, #52]	; 802c1a8 <floorf+0x78>
 802c176:	ee30 0a27 	vadd.f32	s0, s0, s15
 802c17a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802c17e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c182:	ddef      	ble.n	802c164 <floorf+0x34>
 802c184:	2b00      	cmp	r3, #0
 802c186:	bfbe      	ittt	lt
 802c188:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 802c18c:	fa40 f202 	asrlt.w	r2, r0, r2
 802c190:	189b      	addlt	r3, r3, r2
 802c192:	ea23 0301 	bic.w	r3, r3, r1
 802c196:	e7e5      	b.n	802c164 <floorf+0x34>
 802c198:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802c19c:	d3e4      	bcc.n	802c168 <floorf+0x38>
 802c19e:	ee30 0a00 	vadd.f32	s0, s0, s0
 802c1a2:	4770      	bx	lr
 802c1a4:	2300      	movs	r3, #0
 802c1a6:	e7dd      	b.n	802c164 <floorf+0x34>
 802c1a8:	7149f2ca 	.word	0x7149f2ca
 802c1ac:	bf800000 	.word	0xbf800000
 802c1b0:	007fffff 	.word	0x007fffff

0802c1b4 <__kernel_cosf>:
 802c1b4:	ee10 3a10 	vmov	r3, s0
 802c1b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802c1bc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 802c1c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802c1c4:	da05      	bge.n	802c1d2 <__kernel_cosf+0x1e>
 802c1c6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802c1ca:	ee17 2a90 	vmov	r2, s15
 802c1ce:	2a00      	cmp	r2, #0
 802c1d0:	d03b      	beq.n	802c24a <__kernel_cosf+0x96>
 802c1d2:	ee20 7a00 	vmul.f32	s14, s0, s0
 802c1d6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 802c250 <__kernel_cosf+0x9c>
 802c1da:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 802c254 <__kernel_cosf+0xa0>
 802c1de:	4a1e      	ldr	r2, [pc, #120]	; (802c258 <__kernel_cosf+0xa4>)
 802c1e0:	eea7 6a27 	vfma.f32	s12, s14, s15
 802c1e4:	4293      	cmp	r3, r2
 802c1e6:	eddf 7a1d 	vldr	s15, [pc, #116]	; 802c25c <__kernel_cosf+0xa8>
 802c1ea:	eee6 7a07 	vfma.f32	s15, s12, s14
 802c1ee:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 802c260 <__kernel_cosf+0xac>
 802c1f2:	eea7 6a87 	vfma.f32	s12, s15, s14
 802c1f6:	eddf 7a1b 	vldr	s15, [pc, #108]	; 802c264 <__kernel_cosf+0xb0>
 802c1fa:	eee6 7a07 	vfma.f32	s15, s12, s14
 802c1fe:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 802c268 <__kernel_cosf+0xb4>
 802c202:	eea7 6a87 	vfma.f32	s12, s15, s14
 802c206:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 802c20a:	ee26 6a07 	vmul.f32	s12, s12, s14
 802c20e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802c212:	eee7 0a06 	vfma.f32	s1, s14, s12
 802c216:	ee67 7a27 	vmul.f32	s15, s14, s15
 802c21a:	dc04      	bgt.n	802c226 <__kernel_cosf+0x72>
 802c21c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 802c220:	ee36 0ae7 	vsub.f32	s0, s13, s15
 802c224:	4770      	bx	lr
 802c226:	4a11      	ldr	r2, [pc, #68]	; (802c26c <__kernel_cosf+0xb8>)
 802c228:	4293      	cmp	r3, r2
 802c22a:	bfda      	itte	le
 802c22c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 802c230:	ee07 3a10 	vmovle	s14, r3
 802c234:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 802c238:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c23c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 802c240:	ee77 7ae0 	vsub.f32	s15, s15, s1
 802c244:	ee30 0a67 	vsub.f32	s0, s0, s15
 802c248:	4770      	bx	lr
 802c24a:	eeb0 0a66 	vmov.f32	s0, s13
 802c24e:	4770      	bx	lr
 802c250:	ad47d74e 	.word	0xad47d74e
 802c254:	310f74f6 	.word	0x310f74f6
 802c258:	3e999999 	.word	0x3e999999
 802c25c:	b493f27c 	.word	0xb493f27c
 802c260:	37d00d01 	.word	0x37d00d01
 802c264:	bab60b61 	.word	0xbab60b61
 802c268:	3d2aaaab 	.word	0x3d2aaaab
 802c26c:	3f480000 	.word	0x3f480000

0802c270 <__kernel_sinf>:
 802c270:	ee10 3a10 	vmov	r3, s0
 802c274:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802c278:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 802c27c:	da04      	bge.n	802c288 <__kernel_sinf+0x18>
 802c27e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802c282:	ee17 3a90 	vmov	r3, s15
 802c286:	b35b      	cbz	r3, 802c2e0 <__kernel_sinf+0x70>
 802c288:	ee20 7a00 	vmul.f32	s14, s0, s0
 802c28c:	eddf 7a15 	vldr	s15, [pc, #84]	; 802c2e4 <__kernel_sinf+0x74>
 802c290:	ed9f 6a15 	vldr	s12, [pc, #84]	; 802c2e8 <__kernel_sinf+0x78>
 802c294:	eea7 6a27 	vfma.f32	s12, s14, s15
 802c298:	eddf 7a14 	vldr	s15, [pc, #80]	; 802c2ec <__kernel_sinf+0x7c>
 802c29c:	eee6 7a07 	vfma.f32	s15, s12, s14
 802c2a0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 802c2f0 <__kernel_sinf+0x80>
 802c2a4:	eea7 6a87 	vfma.f32	s12, s15, s14
 802c2a8:	eddf 7a12 	vldr	s15, [pc, #72]	; 802c2f4 <__kernel_sinf+0x84>
 802c2ac:	ee60 6a07 	vmul.f32	s13, s0, s14
 802c2b0:	eee6 7a07 	vfma.f32	s15, s12, s14
 802c2b4:	b930      	cbnz	r0, 802c2c4 <__kernel_sinf+0x54>
 802c2b6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 802c2f8 <__kernel_sinf+0x88>
 802c2ba:	eea7 6a27 	vfma.f32	s12, s14, s15
 802c2be:	eea6 0a26 	vfma.f32	s0, s12, s13
 802c2c2:	4770      	bx	lr
 802c2c4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 802c2c8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 802c2cc:	eee0 7a86 	vfma.f32	s15, s1, s12
 802c2d0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 802c2d4:	eddf 7a09 	vldr	s15, [pc, #36]	; 802c2fc <__kernel_sinf+0x8c>
 802c2d8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 802c2dc:	ee30 0a60 	vsub.f32	s0, s0, s1
 802c2e0:	4770      	bx	lr
 802c2e2:	bf00      	nop
 802c2e4:	2f2ec9d3 	.word	0x2f2ec9d3
 802c2e8:	b2d72f34 	.word	0xb2d72f34
 802c2ec:	3638ef1b 	.word	0x3638ef1b
 802c2f0:	b9500d01 	.word	0xb9500d01
 802c2f4:	3c088889 	.word	0x3c088889
 802c2f8:	be2aaaab 	.word	0xbe2aaaab
 802c2fc:	3e2aaaab 	.word	0x3e2aaaab

0802c300 <__ieee754_rem_pio2f>:
 802c300:	b5f0      	push	{r4, r5, r6, r7, lr}
 802c302:	ee10 6a10 	vmov	r6, s0
 802c306:	4b86      	ldr	r3, [pc, #536]	; (802c520 <__ieee754_rem_pio2f+0x220>)
 802c308:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 802c30c:	429d      	cmp	r5, r3
 802c30e:	b087      	sub	sp, #28
 802c310:	4604      	mov	r4, r0
 802c312:	dc05      	bgt.n	802c320 <__ieee754_rem_pio2f+0x20>
 802c314:	2300      	movs	r3, #0
 802c316:	ed80 0a00 	vstr	s0, [r0]
 802c31a:	6043      	str	r3, [r0, #4]
 802c31c:	2000      	movs	r0, #0
 802c31e:	e020      	b.n	802c362 <__ieee754_rem_pio2f+0x62>
 802c320:	4b80      	ldr	r3, [pc, #512]	; (802c524 <__ieee754_rem_pio2f+0x224>)
 802c322:	429d      	cmp	r5, r3
 802c324:	dc38      	bgt.n	802c398 <__ieee754_rem_pio2f+0x98>
 802c326:	2e00      	cmp	r6, #0
 802c328:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 802c528 <__ieee754_rem_pio2f+0x228>
 802c32c:	4b7f      	ldr	r3, [pc, #508]	; (802c52c <__ieee754_rem_pio2f+0x22c>)
 802c32e:	f025 050f 	bic.w	r5, r5, #15
 802c332:	dd18      	ble.n	802c366 <__ieee754_rem_pio2f+0x66>
 802c334:	429d      	cmp	r5, r3
 802c336:	ee70 7a47 	vsub.f32	s15, s0, s14
 802c33a:	bf09      	itett	eq
 802c33c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 802c530 <__ieee754_rem_pio2f+0x230>
 802c340:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 802c534 <__ieee754_rem_pio2f+0x234>
 802c344:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 802c348:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 802c538 <__ieee754_rem_pio2f+0x238>
 802c34c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 802c350:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802c354:	edc0 6a00 	vstr	s13, [r0]
 802c358:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c35c:	edc0 7a01 	vstr	s15, [r0, #4]
 802c360:	2001      	movs	r0, #1
 802c362:	b007      	add	sp, #28
 802c364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802c366:	429d      	cmp	r5, r3
 802c368:	ee70 7a07 	vadd.f32	s15, s0, s14
 802c36c:	bf09      	itett	eq
 802c36e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 802c530 <__ieee754_rem_pio2f+0x230>
 802c372:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 802c534 <__ieee754_rem_pio2f+0x234>
 802c376:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 802c37a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 802c538 <__ieee754_rem_pio2f+0x238>
 802c37e:	ee77 6a87 	vadd.f32	s13, s15, s14
 802c382:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802c386:	edc0 6a00 	vstr	s13, [r0]
 802c38a:	ee77 7a87 	vadd.f32	s15, s15, s14
 802c38e:	edc0 7a01 	vstr	s15, [r0, #4]
 802c392:	f04f 30ff 	mov.w	r0, #4294967295
 802c396:	e7e4      	b.n	802c362 <__ieee754_rem_pio2f+0x62>
 802c398:	4b68      	ldr	r3, [pc, #416]	; (802c53c <__ieee754_rem_pio2f+0x23c>)
 802c39a:	429d      	cmp	r5, r3
 802c39c:	dc71      	bgt.n	802c482 <__ieee754_rem_pio2f+0x182>
 802c39e:	f000 f8db 	bl	802c558 <fabsf>
 802c3a2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 802c540 <__ieee754_rem_pio2f+0x240>
 802c3a6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802c3aa:	eee0 7a07 	vfma.f32	s15, s0, s14
 802c3ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802c3b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802c3b6:	ee17 0a90 	vmov	r0, s15
 802c3ba:	eddf 7a5b 	vldr	s15, [pc, #364]	; 802c528 <__ieee754_rem_pio2f+0x228>
 802c3be:	eea7 0a67 	vfms.f32	s0, s14, s15
 802c3c2:	281f      	cmp	r0, #31
 802c3c4:	eddf 7a5b 	vldr	s15, [pc, #364]	; 802c534 <__ieee754_rem_pio2f+0x234>
 802c3c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 802c3cc:	eeb1 6a47 	vneg.f32	s12, s14
 802c3d0:	ee70 6a67 	vsub.f32	s13, s0, s15
 802c3d4:	ee16 2a90 	vmov	r2, s13
 802c3d8:	dc1c      	bgt.n	802c414 <__ieee754_rem_pio2f+0x114>
 802c3da:	495a      	ldr	r1, [pc, #360]	; (802c544 <__ieee754_rem_pio2f+0x244>)
 802c3dc:	1e47      	subs	r7, r0, #1
 802c3de:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 802c3e2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 802c3e6:	428b      	cmp	r3, r1
 802c3e8:	d014      	beq.n	802c414 <__ieee754_rem_pio2f+0x114>
 802c3ea:	6022      	str	r2, [r4, #0]
 802c3ec:	ed94 7a00 	vldr	s14, [r4]
 802c3f0:	ee30 0a47 	vsub.f32	s0, s0, s14
 802c3f4:	2e00      	cmp	r6, #0
 802c3f6:	ee30 0a67 	vsub.f32	s0, s0, s15
 802c3fa:	ed84 0a01 	vstr	s0, [r4, #4]
 802c3fe:	dab0      	bge.n	802c362 <__ieee754_rem_pio2f+0x62>
 802c400:	eeb1 7a47 	vneg.f32	s14, s14
 802c404:	eeb1 0a40 	vneg.f32	s0, s0
 802c408:	ed84 7a00 	vstr	s14, [r4]
 802c40c:	ed84 0a01 	vstr	s0, [r4, #4]
 802c410:	4240      	negs	r0, r0
 802c412:	e7a6      	b.n	802c362 <__ieee754_rem_pio2f+0x62>
 802c414:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 802c418:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 802c41c:	2908      	cmp	r1, #8
 802c41e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 802c422:	dde2      	ble.n	802c3ea <__ieee754_rem_pio2f+0xea>
 802c424:	eddf 5a42 	vldr	s11, [pc, #264]	; 802c530 <__ieee754_rem_pio2f+0x230>
 802c428:	eef0 6a40 	vmov.f32	s13, s0
 802c42c:	eee6 6a25 	vfma.f32	s13, s12, s11
 802c430:	ee70 7a66 	vsub.f32	s15, s0, s13
 802c434:	eee6 7a25 	vfma.f32	s15, s12, s11
 802c438:	eddf 5a3f 	vldr	s11, [pc, #252]	; 802c538 <__ieee754_rem_pio2f+0x238>
 802c43c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 802c440:	ee76 5ae7 	vsub.f32	s11, s13, s15
 802c444:	ee15 2a90 	vmov	r2, s11
 802c448:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 802c44c:	1a5b      	subs	r3, r3, r1
 802c44e:	2b19      	cmp	r3, #25
 802c450:	dc04      	bgt.n	802c45c <__ieee754_rem_pio2f+0x15c>
 802c452:	edc4 5a00 	vstr	s11, [r4]
 802c456:	eeb0 0a66 	vmov.f32	s0, s13
 802c45a:	e7c7      	b.n	802c3ec <__ieee754_rem_pio2f+0xec>
 802c45c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 802c548 <__ieee754_rem_pio2f+0x248>
 802c460:	eeb0 0a66 	vmov.f32	s0, s13
 802c464:	eea6 0a25 	vfma.f32	s0, s12, s11
 802c468:	ee76 7ac0 	vsub.f32	s15, s13, s0
 802c46c:	eddf 6a37 	vldr	s13, [pc, #220]	; 802c54c <__ieee754_rem_pio2f+0x24c>
 802c470:	eee6 7a25 	vfma.f32	s15, s12, s11
 802c474:	eed7 7a26 	vfnms.f32	s15, s14, s13
 802c478:	ee30 7a67 	vsub.f32	s14, s0, s15
 802c47c:	ed84 7a00 	vstr	s14, [r4]
 802c480:	e7b4      	b.n	802c3ec <__ieee754_rem_pio2f+0xec>
 802c482:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 802c486:	db06      	blt.n	802c496 <__ieee754_rem_pio2f+0x196>
 802c488:	ee70 7a40 	vsub.f32	s15, s0, s0
 802c48c:	edc0 7a01 	vstr	s15, [r0, #4]
 802c490:	edc0 7a00 	vstr	s15, [r0]
 802c494:	e742      	b.n	802c31c <__ieee754_rem_pio2f+0x1c>
 802c496:	15ea      	asrs	r2, r5, #23
 802c498:	3a86      	subs	r2, #134	; 0x86
 802c49a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 802c49e:	ee07 3a90 	vmov	s15, r3
 802c4a2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802c4a6:	eddf 6a2a 	vldr	s13, [pc, #168]	; 802c550 <__ieee754_rem_pio2f+0x250>
 802c4aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802c4ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c4b2:	ed8d 7a03 	vstr	s14, [sp, #12]
 802c4b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802c4ba:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802c4be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802c4c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c4c6:	ed8d 7a04 	vstr	s14, [sp, #16]
 802c4ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802c4ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 802c4d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c4d6:	edcd 7a05 	vstr	s15, [sp, #20]
 802c4da:	d11e      	bne.n	802c51a <__ieee754_rem_pio2f+0x21a>
 802c4dc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 802c4e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c4e4:	bf14      	ite	ne
 802c4e6:	2302      	movne	r3, #2
 802c4e8:	2301      	moveq	r3, #1
 802c4ea:	491a      	ldr	r1, [pc, #104]	; (802c554 <__ieee754_rem_pio2f+0x254>)
 802c4ec:	9101      	str	r1, [sp, #4]
 802c4ee:	2102      	movs	r1, #2
 802c4f0:	9100      	str	r1, [sp, #0]
 802c4f2:	a803      	add	r0, sp, #12
 802c4f4:	4621      	mov	r1, r4
 802c4f6:	f000 f89d 	bl	802c634 <__kernel_rem_pio2f>
 802c4fa:	2e00      	cmp	r6, #0
 802c4fc:	f6bf af31 	bge.w	802c362 <__ieee754_rem_pio2f+0x62>
 802c500:	edd4 7a00 	vldr	s15, [r4]
 802c504:	eef1 7a67 	vneg.f32	s15, s15
 802c508:	edc4 7a00 	vstr	s15, [r4]
 802c50c:	edd4 7a01 	vldr	s15, [r4, #4]
 802c510:	eef1 7a67 	vneg.f32	s15, s15
 802c514:	edc4 7a01 	vstr	s15, [r4, #4]
 802c518:	e77a      	b.n	802c410 <__ieee754_rem_pio2f+0x110>
 802c51a:	2303      	movs	r3, #3
 802c51c:	e7e5      	b.n	802c4ea <__ieee754_rem_pio2f+0x1ea>
 802c51e:	bf00      	nop
 802c520:	3f490fd8 	.word	0x3f490fd8
 802c524:	4016cbe3 	.word	0x4016cbe3
 802c528:	3fc90f80 	.word	0x3fc90f80
 802c52c:	3fc90fd0 	.word	0x3fc90fd0
 802c530:	37354400 	.word	0x37354400
 802c534:	37354443 	.word	0x37354443
 802c538:	2e85a308 	.word	0x2e85a308
 802c53c:	43490f80 	.word	0x43490f80
 802c540:	3f22f984 	.word	0x3f22f984
 802c544:	0802fb64 	.word	0x0802fb64
 802c548:	2e85a300 	.word	0x2e85a300
 802c54c:	248d3132 	.word	0x248d3132
 802c550:	43800000 	.word	0x43800000
 802c554:	0802fbe4 	.word	0x0802fbe4

0802c558 <fabsf>:
 802c558:	ee10 3a10 	vmov	r3, s0
 802c55c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802c560:	ee00 3a10 	vmov	s0, r3
 802c564:	4770      	bx	lr
	...

0802c568 <scalbnf>:
 802c568:	ee10 3a10 	vmov	r3, s0
 802c56c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 802c570:	d02b      	beq.n	802c5ca <scalbnf+0x62>
 802c572:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 802c576:	d302      	bcc.n	802c57e <scalbnf+0x16>
 802c578:	ee30 0a00 	vadd.f32	s0, s0, s0
 802c57c:	4770      	bx	lr
 802c57e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 802c582:	d123      	bne.n	802c5cc <scalbnf+0x64>
 802c584:	4b24      	ldr	r3, [pc, #144]	; (802c618 <scalbnf+0xb0>)
 802c586:	eddf 7a25 	vldr	s15, [pc, #148]	; 802c61c <scalbnf+0xb4>
 802c58a:	4298      	cmp	r0, r3
 802c58c:	ee20 0a27 	vmul.f32	s0, s0, s15
 802c590:	db17      	blt.n	802c5c2 <scalbnf+0x5a>
 802c592:	ee10 3a10 	vmov	r3, s0
 802c596:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802c59a:	3a19      	subs	r2, #25
 802c59c:	f24c 3150 	movw	r1, #50000	; 0xc350
 802c5a0:	4288      	cmp	r0, r1
 802c5a2:	dd15      	ble.n	802c5d0 <scalbnf+0x68>
 802c5a4:	eddf 7a1e 	vldr	s15, [pc, #120]	; 802c620 <scalbnf+0xb8>
 802c5a8:	eddf 6a1e 	vldr	s13, [pc, #120]	; 802c624 <scalbnf+0xbc>
 802c5ac:	ee10 3a10 	vmov	r3, s0
 802c5b0:	eeb0 7a67 	vmov.f32	s14, s15
 802c5b4:	2b00      	cmp	r3, #0
 802c5b6:	bfb8      	it	lt
 802c5b8:	eef0 7a66 	vmovlt.f32	s15, s13
 802c5bc:	ee27 0a87 	vmul.f32	s0, s15, s14
 802c5c0:	4770      	bx	lr
 802c5c2:	eddf 7a19 	vldr	s15, [pc, #100]	; 802c628 <scalbnf+0xc0>
 802c5c6:	ee27 0a80 	vmul.f32	s0, s15, s0
 802c5ca:	4770      	bx	lr
 802c5cc:	0dd2      	lsrs	r2, r2, #23
 802c5ce:	e7e5      	b.n	802c59c <scalbnf+0x34>
 802c5d0:	4410      	add	r0, r2
 802c5d2:	28fe      	cmp	r0, #254	; 0xfe
 802c5d4:	dce6      	bgt.n	802c5a4 <scalbnf+0x3c>
 802c5d6:	2800      	cmp	r0, #0
 802c5d8:	dd06      	ble.n	802c5e8 <scalbnf+0x80>
 802c5da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802c5de:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 802c5e2:	ee00 3a10 	vmov	s0, r3
 802c5e6:	4770      	bx	lr
 802c5e8:	f110 0f16 	cmn.w	r0, #22
 802c5ec:	da09      	bge.n	802c602 <scalbnf+0x9a>
 802c5ee:	eddf 7a0e 	vldr	s15, [pc, #56]	; 802c628 <scalbnf+0xc0>
 802c5f2:	eddf 6a0e 	vldr	s13, [pc, #56]	; 802c62c <scalbnf+0xc4>
 802c5f6:	ee10 3a10 	vmov	r3, s0
 802c5fa:	eeb0 7a67 	vmov.f32	s14, s15
 802c5fe:	2b00      	cmp	r3, #0
 802c600:	e7d9      	b.n	802c5b6 <scalbnf+0x4e>
 802c602:	3019      	adds	r0, #25
 802c604:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802c608:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 802c60c:	ed9f 0a08 	vldr	s0, [pc, #32]	; 802c630 <scalbnf+0xc8>
 802c610:	ee07 3a90 	vmov	s15, r3
 802c614:	e7d7      	b.n	802c5c6 <scalbnf+0x5e>
 802c616:	bf00      	nop
 802c618:	ffff3cb0 	.word	0xffff3cb0
 802c61c:	4c000000 	.word	0x4c000000
 802c620:	7149f2ca 	.word	0x7149f2ca
 802c624:	f149f2ca 	.word	0xf149f2ca
 802c628:	0da24260 	.word	0x0da24260
 802c62c:	8da24260 	.word	0x8da24260
 802c630:	33000000 	.word	0x33000000

0802c634 <__kernel_rem_pio2f>:
 802c634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c638:	ed2d 8b04 	vpush	{d8-d9}
 802c63c:	b0d9      	sub	sp, #356	; 0x164
 802c63e:	4688      	mov	r8, r1
 802c640:	9002      	str	r0, [sp, #8]
 802c642:	49b8      	ldr	r1, [pc, #736]	; (802c924 <__kernel_rem_pio2f+0x2f0>)
 802c644:	9866      	ldr	r0, [sp, #408]	; 0x198
 802c646:	9301      	str	r3, [sp, #4]
 802c648:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 802c64c:	9901      	ldr	r1, [sp, #4]
 802c64e:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 802c650:	f101 3bff 	add.w	fp, r1, #4294967295
 802c654:	1d11      	adds	r1, r2, #4
 802c656:	db25      	blt.n	802c6a4 <__kernel_rem_pio2f+0x70>
 802c658:	1ed0      	subs	r0, r2, #3
 802c65a:	bf48      	it	mi
 802c65c:	1d10      	addmi	r0, r2, #4
 802c65e:	10c0      	asrs	r0, r0, #3
 802c660:	1c45      	adds	r5, r0, #1
 802c662:	00e9      	lsls	r1, r5, #3
 802c664:	eba0 070b 	sub.w	r7, r0, fp
 802c668:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 802c934 <__kernel_rem_pio2f+0x300>
 802c66c:	9103      	str	r1, [sp, #12]
 802c66e:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 802c672:	eb0a 0c0b 	add.w	ip, sl, fp
 802c676:	ae1c      	add	r6, sp, #112	; 0x70
 802c678:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 802c67c:	2400      	movs	r4, #0
 802c67e:	4564      	cmp	r4, ip
 802c680:	dd12      	ble.n	802c6a8 <__kernel_rem_pio2f+0x74>
 802c682:	9901      	ldr	r1, [sp, #4]
 802c684:	ac1c      	add	r4, sp, #112	; 0x70
 802c686:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 802c68a:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 802c68e:	f04f 0c00 	mov.w	ip, #0
 802c692:	45d4      	cmp	ip, sl
 802c694:	dc27      	bgt.n	802c6e6 <__kernel_rem_pio2f+0xb2>
 802c696:	f8dd e008 	ldr.w	lr, [sp, #8]
 802c69a:	eddf 7aa6 	vldr	s15, [pc, #664]	; 802c934 <__kernel_rem_pio2f+0x300>
 802c69e:	4627      	mov	r7, r4
 802c6a0:	2600      	movs	r6, #0
 802c6a2:	e016      	b.n	802c6d2 <__kernel_rem_pio2f+0x9e>
 802c6a4:	2000      	movs	r0, #0
 802c6a6:	e7db      	b.n	802c660 <__kernel_rem_pio2f+0x2c>
 802c6a8:	42e7      	cmn	r7, r4
 802c6aa:	bf5d      	ittte	pl
 802c6ac:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 802c6b0:	ee07 1a90 	vmovpl	s15, r1
 802c6b4:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 802c6b8:	eef0 7a47 	vmovmi.f32	s15, s14
 802c6bc:	ece6 7a01 	vstmia	r6!, {s15}
 802c6c0:	3401      	adds	r4, #1
 802c6c2:	e7dc      	b.n	802c67e <__kernel_rem_pio2f+0x4a>
 802c6c4:	ecfe 6a01 	vldmia	lr!, {s13}
 802c6c8:	ed97 7a00 	vldr	s14, [r7]
 802c6cc:	eee6 7a87 	vfma.f32	s15, s13, s14
 802c6d0:	3601      	adds	r6, #1
 802c6d2:	455e      	cmp	r6, fp
 802c6d4:	f1a7 0704 	sub.w	r7, r7, #4
 802c6d8:	ddf4      	ble.n	802c6c4 <__kernel_rem_pio2f+0x90>
 802c6da:	ece9 7a01 	vstmia	r9!, {s15}
 802c6de:	f10c 0c01 	add.w	ip, ip, #1
 802c6e2:	3404      	adds	r4, #4
 802c6e4:	e7d5      	b.n	802c692 <__kernel_rem_pio2f+0x5e>
 802c6e6:	a908      	add	r1, sp, #32
 802c6e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802c6ec:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 802c6f0:	eddf 8a8f 	vldr	s17, [pc, #572]	; 802c930 <__kernel_rem_pio2f+0x2fc>
 802c6f4:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 802c92c <__kernel_rem_pio2f+0x2f8>
 802c6f8:	9105      	str	r1, [sp, #20]
 802c6fa:	9304      	str	r3, [sp, #16]
 802c6fc:	4656      	mov	r6, sl
 802c6fe:	00b3      	lsls	r3, r6, #2
 802c700:	9306      	str	r3, [sp, #24]
 802c702:	ab58      	add	r3, sp, #352	; 0x160
 802c704:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 802c708:	ac08      	add	r4, sp, #32
 802c70a:	ab44      	add	r3, sp, #272	; 0x110
 802c70c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 802c710:	46a4      	mov	ip, r4
 802c712:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 802c716:	4637      	mov	r7, r6
 802c718:	2f00      	cmp	r7, #0
 802c71a:	f1a0 0004 	sub.w	r0, r0, #4
 802c71e:	dc4a      	bgt.n	802c7b6 <__kernel_rem_pio2f+0x182>
 802c720:	4628      	mov	r0, r5
 802c722:	9207      	str	r2, [sp, #28]
 802c724:	f7ff ff20 	bl	802c568 <scalbnf>
 802c728:	eeb0 8a40 	vmov.f32	s16, s0
 802c72c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 802c730:	ee28 0a00 	vmul.f32	s0, s16, s0
 802c734:	f7ff fcfc 	bl	802c130 <floorf>
 802c738:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 802c73c:	eea0 8a67 	vfms.f32	s16, s0, s15
 802c740:	2d00      	cmp	r5, #0
 802c742:	9a07      	ldr	r2, [sp, #28]
 802c744:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 802c748:	ee17 9a90 	vmov	r9, s15
 802c74c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802c750:	ee38 8a67 	vsub.f32	s16, s16, s15
 802c754:	dd41      	ble.n	802c7da <__kernel_rem_pio2f+0x1a6>
 802c756:	f106 3cff 	add.w	ip, r6, #4294967295
 802c75a:	ab08      	add	r3, sp, #32
 802c75c:	f1c5 0e08 	rsb	lr, r5, #8
 802c760:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 802c764:	fa47 f00e 	asr.w	r0, r7, lr
 802c768:	4481      	add	r9, r0
 802c76a:	fa00 f00e 	lsl.w	r0, r0, lr
 802c76e:	1a3f      	subs	r7, r7, r0
 802c770:	f1c5 0007 	rsb	r0, r5, #7
 802c774:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 802c778:	4107      	asrs	r7, r0
 802c77a:	2f00      	cmp	r7, #0
 802c77c:	dd3c      	ble.n	802c7f8 <__kernel_rem_pio2f+0x1c4>
 802c77e:	f04f 0e00 	mov.w	lr, #0
 802c782:	f109 0901 	add.w	r9, r9, #1
 802c786:	4671      	mov	r1, lr
 802c788:	4576      	cmp	r6, lr
 802c78a:	dc67      	bgt.n	802c85c <__kernel_rem_pio2f+0x228>
 802c78c:	2d00      	cmp	r5, #0
 802c78e:	dd03      	ble.n	802c798 <__kernel_rem_pio2f+0x164>
 802c790:	2d01      	cmp	r5, #1
 802c792:	d074      	beq.n	802c87e <__kernel_rem_pio2f+0x24a>
 802c794:	2d02      	cmp	r5, #2
 802c796:	d07b      	beq.n	802c890 <__kernel_rem_pio2f+0x25c>
 802c798:	2f02      	cmp	r7, #2
 802c79a:	d12d      	bne.n	802c7f8 <__kernel_rem_pio2f+0x1c4>
 802c79c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802c7a0:	ee30 8a48 	vsub.f32	s16, s0, s16
 802c7a4:	b341      	cbz	r1, 802c7f8 <__kernel_rem_pio2f+0x1c4>
 802c7a6:	4628      	mov	r0, r5
 802c7a8:	9207      	str	r2, [sp, #28]
 802c7aa:	f7ff fedd 	bl	802c568 <scalbnf>
 802c7ae:	9a07      	ldr	r2, [sp, #28]
 802c7b0:	ee38 8a40 	vsub.f32	s16, s16, s0
 802c7b4:	e020      	b.n	802c7f8 <__kernel_rem_pio2f+0x1c4>
 802c7b6:	ee60 7a28 	vmul.f32	s15, s0, s17
 802c7ba:	3f01      	subs	r7, #1
 802c7bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802c7c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802c7c4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 802c7c8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802c7cc:	ecac 0a01 	vstmia	ip!, {s0}
 802c7d0:	ed90 0a00 	vldr	s0, [r0]
 802c7d4:	ee37 0a80 	vadd.f32	s0, s15, s0
 802c7d8:	e79e      	b.n	802c718 <__kernel_rem_pio2f+0xe4>
 802c7da:	d105      	bne.n	802c7e8 <__kernel_rem_pio2f+0x1b4>
 802c7dc:	1e70      	subs	r0, r6, #1
 802c7de:	ab08      	add	r3, sp, #32
 802c7e0:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 802c7e4:	11ff      	asrs	r7, r7, #7
 802c7e6:	e7c8      	b.n	802c77a <__kernel_rem_pio2f+0x146>
 802c7e8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802c7ec:	eeb4 8ae7 	vcmpe.f32	s16, s15
 802c7f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c7f4:	da30      	bge.n	802c858 <__kernel_rem_pio2f+0x224>
 802c7f6:	2700      	movs	r7, #0
 802c7f8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802c7fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c800:	f040 809a 	bne.w	802c938 <__kernel_rem_pio2f+0x304>
 802c804:	1e74      	subs	r4, r6, #1
 802c806:	46a4      	mov	ip, r4
 802c808:	2100      	movs	r1, #0
 802c80a:	45d4      	cmp	ip, sl
 802c80c:	da47      	bge.n	802c89e <__kernel_rem_pio2f+0x26a>
 802c80e:	2900      	cmp	r1, #0
 802c810:	d063      	beq.n	802c8da <__kernel_rem_pio2f+0x2a6>
 802c812:	ab08      	add	r3, sp, #32
 802c814:	3d08      	subs	r5, #8
 802c816:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 802c81a:	2b00      	cmp	r3, #0
 802c81c:	d07f      	beq.n	802c91e <__kernel_rem_pio2f+0x2ea>
 802c81e:	4628      	mov	r0, r5
 802c820:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802c824:	f7ff fea0 	bl	802c568 <scalbnf>
 802c828:	1c63      	adds	r3, r4, #1
 802c82a:	aa44      	add	r2, sp, #272	; 0x110
 802c82c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 802c930 <__kernel_rem_pio2f+0x2fc>
 802c830:	0099      	lsls	r1, r3, #2
 802c832:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802c836:	4623      	mov	r3, r4
 802c838:	2b00      	cmp	r3, #0
 802c83a:	f280 80ad 	bge.w	802c998 <__kernel_rem_pio2f+0x364>
 802c83e:	4623      	mov	r3, r4
 802c840:	2b00      	cmp	r3, #0
 802c842:	f2c0 80cb 	blt.w	802c9dc <__kernel_rem_pio2f+0x3a8>
 802c846:	aa44      	add	r2, sp, #272	; 0x110
 802c848:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 802c84c:	4e36      	ldr	r6, [pc, #216]	; (802c928 <__kernel_rem_pio2f+0x2f4>)
 802c84e:	eddf 7a39 	vldr	s15, [pc, #228]	; 802c934 <__kernel_rem_pio2f+0x300>
 802c852:	2000      	movs	r0, #0
 802c854:	1ae2      	subs	r2, r4, r3
 802c856:	e0b6      	b.n	802c9c6 <__kernel_rem_pio2f+0x392>
 802c858:	2702      	movs	r7, #2
 802c85a:	e790      	b.n	802c77e <__kernel_rem_pio2f+0x14a>
 802c85c:	6820      	ldr	r0, [r4, #0]
 802c85e:	b949      	cbnz	r1, 802c874 <__kernel_rem_pio2f+0x240>
 802c860:	b118      	cbz	r0, 802c86a <__kernel_rem_pio2f+0x236>
 802c862:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 802c866:	6020      	str	r0, [r4, #0]
 802c868:	2001      	movs	r0, #1
 802c86a:	f10e 0e01 	add.w	lr, lr, #1
 802c86e:	3404      	adds	r4, #4
 802c870:	4601      	mov	r1, r0
 802c872:	e789      	b.n	802c788 <__kernel_rem_pio2f+0x154>
 802c874:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 802c878:	6020      	str	r0, [r4, #0]
 802c87a:	4608      	mov	r0, r1
 802c87c:	e7f5      	b.n	802c86a <__kernel_rem_pio2f+0x236>
 802c87e:	1e74      	subs	r4, r6, #1
 802c880:	ab08      	add	r3, sp, #32
 802c882:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 802c886:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 802c88a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 802c88e:	e783      	b.n	802c798 <__kernel_rem_pio2f+0x164>
 802c890:	1e74      	subs	r4, r6, #1
 802c892:	ab08      	add	r3, sp, #32
 802c894:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 802c898:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 802c89c:	e7f5      	b.n	802c88a <__kernel_rem_pio2f+0x256>
 802c89e:	ab08      	add	r3, sp, #32
 802c8a0:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 802c8a4:	f10c 3cff 	add.w	ip, ip, #4294967295
 802c8a8:	4301      	orrs	r1, r0
 802c8aa:	e7ae      	b.n	802c80a <__kernel_rem_pio2f+0x1d6>
 802c8ac:	3001      	adds	r0, #1
 802c8ae:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 802c8b2:	2f00      	cmp	r7, #0
 802c8b4:	d0fa      	beq.n	802c8ac <__kernel_rem_pio2f+0x278>
 802c8b6:	9b06      	ldr	r3, [sp, #24]
 802c8b8:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 802c8bc:	eb0d 0403 	add.w	r4, sp, r3
 802c8c0:	9b01      	ldr	r3, [sp, #4]
 802c8c2:	18f7      	adds	r7, r6, r3
 802c8c4:	ab1c      	add	r3, sp, #112	; 0x70
 802c8c6:	f106 0c01 	add.w	ip, r6, #1
 802c8ca:	3c4c      	subs	r4, #76	; 0x4c
 802c8cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 802c8d0:	4430      	add	r0, r6
 802c8d2:	4560      	cmp	r0, ip
 802c8d4:	da04      	bge.n	802c8e0 <__kernel_rem_pio2f+0x2ac>
 802c8d6:	4606      	mov	r6, r0
 802c8d8:	e711      	b.n	802c6fe <__kernel_rem_pio2f+0xca>
 802c8da:	9c05      	ldr	r4, [sp, #20]
 802c8dc:	2001      	movs	r0, #1
 802c8de:	e7e6      	b.n	802c8ae <__kernel_rem_pio2f+0x27a>
 802c8e0:	9b04      	ldr	r3, [sp, #16]
 802c8e2:	f8dd e008 	ldr.w	lr, [sp, #8]
 802c8e6:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 802c8ea:	9306      	str	r3, [sp, #24]
 802c8ec:	ee07 3a90 	vmov	s15, r3
 802c8f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802c8f4:	2600      	movs	r6, #0
 802c8f6:	ece7 7a01 	vstmia	r7!, {s15}
 802c8fa:	eddf 7a0e 	vldr	s15, [pc, #56]	; 802c934 <__kernel_rem_pio2f+0x300>
 802c8fe:	46b9      	mov	r9, r7
 802c900:	455e      	cmp	r6, fp
 802c902:	dd04      	ble.n	802c90e <__kernel_rem_pio2f+0x2da>
 802c904:	ece4 7a01 	vstmia	r4!, {s15}
 802c908:	f10c 0c01 	add.w	ip, ip, #1
 802c90c:	e7e1      	b.n	802c8d2 <__kernel_rem_pio2f+0x29e>
 802c90e:	ecfe 6a01 	vldmia	lr!, {s13}
 802c912:	ed39 7a01 	vldmdb	r9!, {s14}
 802c916:	3601      	adds	r6, #1
 802c918:	eee6 7a87 	vfma.f32	s15, s13, s14
 802c91c:	e7f0      	b.n	802c900 <__kernel_rem_pio2f+0x2cc>
 802c91e:	3c01      	subs	r4, #1
 802c920:	e777      	b.n	802c812 <__kernel_rem_pio2f+0x1de>
 802c922:	bf00      	nop
 802c924:	0802ff28 	.word	0x0802ff28
 802c928:	0802fefc 	.word	0x0802fefc
 802c92c:	43800000 	.word	0x43800000
 802c930:	3b800000 	.word	0x3b800000
 802c934:	00000000 	.word	0x00000000
 802c938:	9b03      	ldr	r3, [sp, #12]
 802c93a:	eeb0 0a48 	vmov.f32	s0, s16
 802c93e:	1a98      	subs	r0, r3, r2
 802c940:	f7ff fe12 	bl	802c568 <scalbnf>
 802c944:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 802c92c <__kernel_rem_pio2f+0x2f8>
 802c948:	eeb4 0ac7 	vcmpe.f32	s0, s14
 802c94c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c950:	db19      	blt.n	802c986 <__kernel_rem_pio2f+0x352>
 802c952:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 802c930 <__kernel_rem_pio2f+0x2fc>
 802c956:	ee60 7a27 	vmul.f32	s15, s0, s15
 802c95a:	aa08      	add	r2, sp, #32
 802c95c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802c960:	1c74      	adds	r4, r6, #1
 802c962:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802c966:	3508      	adds	r5, #8
 802c968:	eea7 0ac7 	vfms.f32	s0, s15, s14
 802c96c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802c970:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802c974:	ee10 3a10 	vmov	r3, s0
 802c978:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 802c97c:	ee17 3a90 	vmov	r3, s15
 802c980:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 802c984:	e74b      	b.n	802c81e <__kernel_rem_pio2f+0x1ea>
 802c986:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802c98a:	aa08      	add	r2, sp, #32
 802c98c:	ee10 3a10 	vmov	r3, s0
 802c990:	4634      	mov	r4, r6
 802c992:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 802c996:	e742      	b.n	802c81e <__kernel_rem_pio2f+0x1ea>
 802c998:	a808      	add	r0, sp, #32
 802c99a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 802c99e:	9001      	str	r0, [sp, #4]
 802c9a0:	ee07 0a90 	vmov	s15, r0
 802c9a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802c9a8:	3b01      	subs	r3, #1
 802c9aa:	ee67 7a80 	vmul.f32	s15, s15, s0
 802c9ae:	ee20 0a07 	vmul.f32	s0, s0, s14
 802c9b2:	ed62 7a01 	vstmdb	r2!, {s15}
 802c9b6:	e73f      	b.n	802c838 <__kernel_rem_pio2f+0x204>
 802c9b8:	ecf6 6a01 	vldmia	r6!, {s13}
 802c9bc:	ecb5 7a01 	vldmia	r5!, {s14}
 802c9c0:	eee6 7a87 	vfma.f32	s15, s13, s14
 802c9c4:	3001      	adds	r0, #1
 802c9c6:	4550      	cmp	r0, sl
 802c9c8:	dc01      	bgt.n	802c9ce <__kernel_rem_pio2f+0x39a>
 802c9ca:	4290      	cmp	r0, r2
 802c9cc:	ddf4      	ble.n	802c9b8 <__kernel_rem_pio2f+0x384>
 802c9ce:	a858      	add	r0, sp, #352	; 0x160
 802c9d0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 802c9d4:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 802c9d8:	3b01      	subs	r3, #1
 802c9da:	e731      	b.n	802c840 <__kernel_rem_pio2f+0x20c>
 802c9dc:	9b66      	ldr	r3, [sp, #408]	; 0x198
 802c9de:	2b02      	cmp	r3, #2
 802c9e0:	dc09      	bgt.n	802c9f6 <__kernel_rem_pio2f+0x3c2>
 802c9e2:	2b00      	cmp	r3, #0
 802c9e4:	dc2b      	bgt.n	802ca3e <__kernel_rem_pio2f+0x40a>
 802c9e6:	d044      	beq.n	802ca72 <__kernel_rem_pio2f+0x43e>
 802c9e8:	f009 0007 	and.w	r0, r9, #7
 802c9ec:	b059      	add	sp, #356	; 0x164
 802c9ee:	ecbd 8b04 	vpop	{d8-d9}
 802c9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c9f6:	9b66      	ldr	r3, [sp, #408]	; 0x198
 802c9f8:	2b03      	cmp	r3, #3
 802c9fa:	d1f5      	bne.n	802c9e8 <__kernel_rem_pio2f+0x3b4>
 802c9fc:	aa30      	add	r2, sp, #192	; 0xc0
 802c9fe:	1f0b      	subs	r3, r1, #4
 802ca00:	4413      	add	r3, r2
 802ca02:	461a      	mov	r2, r3
 802ca04:	4620      	mov	r0, r4
 802ca06:	2800      	cmp	r0, #0
 802ca08:	f1a2 0204 	sub.w	r2, r2, #4
 802ca0c:	dc52      	bgt.n	802cab4 <__kernel_rem_pio2f+0x480>
 802ca0e:	4622      	mov	r2, r4
 802ca10:	2a01      	cmp	r2, #1
 802ca12:	f1a3 0304 	sub.w	r3, r3, #4
 802ca16:	dc5d      	bgt.n	802cad4 <__kernel_rem_pio2f+0x4a0>
 802ca18:	ab30      	add	r3, sp, #192	; 0xc0
 802ca1a:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 802c934 <__kernel_rem_pio2f+0x300>
 802ca1e:	440b      	add	r3, r1
 802ca20:	2c01      	cmp	r4, #1
 802ca22:	dc67      	bgt.n	802caf4 <__kernel_rem_pio2f+0x4c0>
 802ca24:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 802ca28:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 802ca2c:	2f00      	cmp	r7, #0
 802ca2e:	d167      	bne.n	802cb00 <__kernel_rem_pio2f+0x4cc>
 802ca30:	edc8 6a00 	vstr	s13, [r8]
 802ca34:	ed88 7a01 	vstr	s14, [r8, #4]
 802ca38:	edc8 7a02 	vstr	s15, [r8, #8]
 802ca3c:	e7d4      	b.n	802c9e8 <__kernel_rem_pio2f+0x3b4>
 802ca3e:	ab30      	add	r3, sp, #192	; 0xc0
 802ca40:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 802c934 <__kernel_rem_pio2f+0x300>
 802ca44:	440b      	add	r3, r1
 802ca46:	4622      	mov	r2, r4
 802ca48:	2a00      	cmp	r2, #0
 802ca4a:	da24      	bge.n	802ca96 <__kernel_rem_pio2f+0x462>
 802ca4c:	b34f      	cbz	r7, 802caa2 <__kernel_rem_pio2f+0x46e>
 802ca4e:	eef1 7a47 	vneg.f32	s15, s14
 802ca52:	edc8 7a00 	vstr	s15, [r8]
 802ca56:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 802ca5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802ca5e:	aa31      	add	r2, sp, #196	; 0xc4
 802ca60:	2301      	movs	r3, #1
 802ca62:	429c      	cmp	r4, r3
 802ca64:	da20      	bge.n	802caa8 <__kernel_rem_pio2f+0x474>
 802ca66:	b10f      	cbz	r7, 802ca6c <__kernel_rem_pio2f+0x438>
 802ca68:	eef1 7a67 	vneg.f32	s15, s15
 802ca6c:	edc8 7a01 	vstr	s15, [r8, #4]
 802ca70:	e7ba      	b.n	802c9e8 <__kernel_rem_pio2f+0x3b4>
 802ca72:	ab30      	add	r3, sp, #192	; 0xc0
 802ca74:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 802c934 <__kernel_rem_pio2f+0x300>
 802ca78:	440b      	add	r3, r1
 802ca7a:	2c00      	cmp	r4, #0
 802ca7c:	da05      	bge.n	802ca8a <__kernel_rem_pio2f+0x456>
 802ca7e:	b10f      	cbz	r7, 802ca84 <__kernel_rem_pio2f+0x450>
 802ca80:	eef1 7a67 	vneg.f32	s15, s15
 802ca84:	edc8 7a00 	vstr	s15, [r8]
 802ca88:	e7ae      	b.n	802c9e8 <__kernel_rem_pio2f+0x3b4>
 802ca8a:	ed33 7a01 	vldmdb	r3!, {s14}
 802ca8e:	3c01      	subs	r4, #1
 802ca90:	ee77 7a87 	vadd.f32	s15, s15, s14
 802ca94:	e7f1      	b.n	802ca7a <__kernel_rem_pio2f+0x446>
 802ca96:	ed73 7a01 	vldmdb	r3!, {s15}
 802ca9a:	3a01      	subs	r2, #1
 802ca9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 802caa0:	e7d2      	b.n	802ca48 <__kernel_rem_pio2f+0x414>
 802caa2:	eef0 7a47 	vmov.f32	s15, s14
 802caa6:	e7d4      	b.n	802ca52 <__kernel_rem_pio2f+0x41e>
 802caa8:	ecb2 7a01 	vldmia	r2!, {s14}
 802caac:	3301      	adds	r3, #1
 802caae:	ee77 7a87 	vadd.f32	s15, s15, s14
 802cab2:	e7d6      	b.n	802ca62 <__kernel_rem_pio2f+0x42e>
 802cab4:	edd2 7a00 	vldr	s15, [r2]
 802cab8:	edd2 6a01 	vldr	s13, [r2, #4]
 802cabc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802cac0:	3801      	subs	r0, #1
 802cac2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802cac6:	ed82 7a00 	vstr	s14, [r2]
 802caca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802cace:	edc2 7a01 	vstr	s15, [r2, #4]
 802cad2:	e798      	b.n	802ca06 <__kernel_rem_pio2f+0x3d2>
 802cad4:	edd3 7a00 	vldr	s15, [r3]
 802cad8:	edd3 6a01 	vldr	s13, [r3, #4]
 802cadc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802cae0:	3a01      	subs	r2, #1
 802cae2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802cae6:	ed83 7a00 	vstr	s14, [r3]
 802caea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802caee:	edc3 7a01 	vstr	s15, [r3, #4]
 802caf2:	e78d      	b.n	802ca10 <__kernel_rem_pio2f+0x3dc>
 802caf4:	ed33 7a01 	vldmdb	r3!, {s14}
 802caf8:	3c01      	subs	r4, #1
 802cafa:	ee77 7a87 	vadd.f32	s15, s15, s14
 802cafe:	e78f      	b.n	802ca20 <__kernel_rem_pio2f+0x3ec>
 802cb00:	eef1 6a66 	vneg.f32	s13, s13
 802cb04:	eeb1 7a47 	vneg.f32	s14, s14
 802cb08:	edc8 6a00 	vstr	s13, [r8]
 802cb0c:	ed88 7a01 	vstr	s14, [r8, #4]
 802cb10:	eef1 7a67 	vneg.f32	s15, s15
 802cb14:	e790      	b.n	802ca38 <__kernel_rem_pio2f+0x404>
 802cb16:	bf00      	nop

0802cb18 <abort>:
 802cb18:	b508      	push	{r3, lr}
 802cb1a:	2006      	movs	r0, #6
 802cb1c:	f000 fa3a 	bl	802cf94 <raise>
 802cb20:	2001      	movs	r0, #1
 802cb22:	f7d5 f909 	bl	8001d38 <_exit>
	...

0802cb28 <__assert_func>:
 802cb28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802cb2a:	4614      	mov	r4, r2
 802cb2c:	461a      	mov	r2, r3
 802cb2e:	4b09      	ldr	r3, [pc, #36]	; (802cb54 <__assert_func+0x2c>)
 802cb30:	681b      	ldr	r3, [r3, #0]
 802cb32:	4605      	mov	r5, r0
 802cb34:	68d8      	ldr	r0, [r3, #12]
 802cb36:	b14c      	cbz	r4, 802cb4c <__assert_func+0x24>
 802cb38:	4b07      	ldr	r3, [pc, #28]	; (802cb58 <__assert_func+0x30>)
 802cb3a:	9100      	str	r1, [sp, #0]
 802cb3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802cb40:	4906      	ldr	r1, [pc, #24]	; (802cb5c <__assert_func+0x34>)
 802cb42:	462b      	mov	r3, r5
 802cb44:	f000 f982 	bl	802ce4c <fiprintf>
 802cb48:	f7ff ffe6 	bl	802cb18 <abort>
 802cb4c:	4b04      	ldr	r3, [pc, #16]	; (802cb60 <__assert_func+0x38>)
 802cb4e:	461c      	mov	r4, r3
 802cb50:	e7f3      	b.n	802cb3a <__assert_func+0x12>
 802cb52:	bf00      	nop
 802cb54:	20000110 	.word	0x20000110
 802cb58:	0802ff34 	.word	0x0802ff34
 802cb5c:	0802ff41 	.word	0x0802ff41
 802cb60:	0802ff6f 	.word	0x0802ff6f

0802cb64 <atexit>:
 802cb64:	2300      	movs	r3, #0
 802cb66:	4601      	mov	r1, r0
 802cb68:	461a      	mov	r2, r3
 802cb6a:	4618      	mov	r0, r3
 802cb6c:	f000 bb16 	b.w	802d19c <__register_exitproc>

0802cb70 <malloc>:
 802cb70:	4b02      	ldr	r3, [pc, #8]	; (802cb7c <malloc+0xc>)
 802cb72:	4601      	mov	r1, r0
 802cb74:	6818      	ldr	r0, [r3, #0]
 802cb76:	f000 b82b 	b.w	802cbd0 <_malloc_r>
 802cb7a:	bf00      	nop
 802cb7c:	20000110 	.word	0x20000110

0802cb80 <free>:
 802cb80:	4b02      	ldr	r3, [pc, #8]	; (802cb8c <free+0xc>)
 802cb82:	4601      	mov	r1, r0
 802cb84:	6818      	ldr	r0, [r3, #0]
 802cb86:	f000 bb67 	b.w	802d258 <_free_r>
 802cb8a:	bf00      	nop
 802cb8c:	20000110 	.word	0x20000110

0802cb90 <sbrk_aligned>:
 802cb90:	b570      	push	{r4, r5, r6, lr}
 802cb92:	4e0e      	ldr	r6, [pc, #56]	; (802cbcc <sbrk_aligned+0x3c>)
 802cb94:	460c      	mov	r4, r1
 802cb96:	6831      	ldr	r1, [r6, #0]
 802cb98:	4605      	mov	r5, r0
 802cb9a:	b911      	cbnz	r1, 802cba2 <sbrk_aligned+0x12>
 802cb9c:	f000 faa0 	bl	802d0e0 <_sbrk_r>
 802cba0:	6030      	str	r0, [r6, #0]
 802cba2:	4621      	mov	r1, r4
 802cba4:	4628      	mov	r0, r5
 802cba6:	f000 fa9b 	bl	802d0e0 <_sbrk_r>
 802cbaa:	1c43      	adds	r3, r0, #1
 802cbac:	d00a      	beq.n	802cbc4 <sbrk_aligned+0x34>
 802cbae:	1cc4      	adds	r4, r0, #3
 802cbb0:	f024 0403 	bic.w	r4, r4, #3
 802cbb4:	42a0      	cmp	r0, r4
 802cbb6:	d007      	beq.n	802cbc8 <sbrk_aligned+0x38>
 802cbb8:	1a21      	subs	r1, r4, r0
 802cbba:	4628      	mov	r0, r5
 802cbbc:	f000 fa90 	bl	802d0e0 <_sbrk_r>
 802cbc0:	3001      	adds	r0, #1
 802cbc2:	d101      	bne.n	802cbc8 <sbrk_aligned+0x38>
 802cbc4:	f04f 34ff 	mov.w	r4, #4294967295
 802cbc8:	4620      	mov	r0, r4
 802cbca:	bd70      	pop	{r4, r5, r6, pc}
 802cbcc:	2000b8a0 	.word	0x2000b8a0

0802cbd0 <_malloc_r>:
 802cbd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802cbd4:	1ccd      	adds	r5, r1, #3
 802cbd6:	f025 0503 	bic.w	r5, r5, #3
 802cbda:	3508      	adds	r5, #8
 802cbdc:	2d0c      	cmp	r5, #12
 802cbde:	bf38      	it	cc
 802cbe0:	250c      	movcc	r5, #12
 802cbe2:	2d00      	cmp	r5, #0
 802cbe4:	4607      	mov	r7, r0
 802cbe6:	db01      	blt.n	802cbec <_malloc_r+0x1c>
 802cbe8:	42a9      	cmp	r1, r5
 802cbea:	d905      	bls.n	802cbf8 <_malloc_r+0x28>
 802cbec:	230c      	movs	r3, #12
 802cbee:	603b      	str	r3, [r7, #0]
 802cbf0:	2600      	movs	r6, #0
 802cbf2:	4630      	mov	r0, r6
 802cbf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802cbf8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 802cccc <_malloc_r+0xfc>
 802cbfc:	f000 f868 	bl	802ccd0 <__malloc_lock>
 802cc00:	f8d8 3000 	ldr.w	r3, [r8]
 802cc04:	461c      	mov	r4, r3
 802cc06:	bb5c      	cbnz	r4, 802cc60 <_malloc_r+0x90>
 802cc08:	4629      	mov	r1, r5
 802cc0a:	4638      	mov	r0, r7
 802cc0c:	f7ff ffc0 	bl	802cb90 <sbrk_aligned>
 802cc10:	1c43      	adds	r3, r0, #1
 802cc12:	4604      	mov	r4, r0
 802cc14:	d155      	bne.n	802ccc2 <_malloc_r+0xf2>
 802cc16:	f8d8 4000 	ldr.w	r4, [r8]
 802cc1a:	4626      	mov	r6, r4
 802cc1c:	2e00      	cmp	r6, #0
 802cc1e:	d145      	bne.n	802ccac <_malloc_r+0xdc>
 802cc20:	2c00      	cmp	r4, #0
 802cc22:	d048      	beq.n	802ccb6 <_malloc_r+0xe6>
 802cc24:	6823      	ldr	r3, [r4, #0]
 802cc26:	4631      	mov	r1, r6
 802cc28:	4638      	mov	r0, r7
 802cc2a:	eb04 0903 	add.w	r9, r4, r3
 802cc2e:	f000 fa57 	bl	802d0e0 <_sbrk_r>
 802cc32:	4581      	cmp	r9, r0
 802cc34:	d13f      	bne.n	802ccb6 <_malloc_r+0xe6>
 802cc36:	6821      	ldr	r1, [r4, #0]
 802cc38:	1a6d      	subs	r5, r5, r1
 802cc3a:	4629      	mov	r1, r5
 802cc3c:	4638      	mov	r0, r7
 802cc3e:	f7ff ffa7 	bl	802cb90 <sbrk_aligned>
 802cc42:	3001      	adds	r0, #1
 802cc44:	d037      	beq.n	802ccb6 <_malloc_r+0xe6>
 802cc46:	6823      	ldr	r3, [r4, #0]
 802cc48:	442b      	add	r3, r5
 802cc4a:	6023      	str	r3, [r4, #0]
 802cc4c:	f8d8 3000 	ldr.w	r3, [r8]
 802cc50:	2b00      	cmp	r3, #0
 802cc52:	d038      	beq.n	802ccc6 <_malloc_r+0xf6>
 802cc54:	685a      	ldr	r2, [r3, #4]
 802cc56:	42a2      	cmp	r2, r4
 802cc58:	d12b      	bne.n	802ccb2 <_malloc_r+0xe2>
 802cc5a:	2200      	movs	r2, #0
 802cc5c:	605a      	str	r2, [r3, #4]
 802cc5e:	e00f      	b.n	802cc80 <_malloc_r+0xb0>
 802cc60:	6822      	ldr	r2, [r4, #0]
 802cc62:	1b52      	subs	r2, r2, r5
 802cc64:	d41f      	bmi.n	802cca6 <_malloc_r+0xd6>
 802cc66:	2a0b      	cmp	r2, #11
 802cc68:	d917      	bls.n	802cc9a <_malloc_r+0xca>
 802cc6a:	1961      	adds	r1, r4, r5
 802cc6c:	42a3      	cmp	r3, r4
 802cc6e:	6025      	str	r5, [r4, #0]
 802cc70:	bf18      	it	ne
 802cc72:	6059      	strne	r1, [r3, #4]
 802cc74:	6863      	ldr	r3, [r4, #4]
 802cc76:	bf08      	it	eq
 802cc78:	f8c8 1000 	streq.w	r1, [r8]
 802cc7c:	5162      	str	r2, [r4, r5]
 802cc7e:	604b      	str	r3, [r1, #4]
 802cc80:	4638      	mov	r0, r7
 802cc82:	f104 060b 	add.w	r6, r4, #11
 802cc86:	f000 f829 	bl	802ccdc <__malloc_unlock>
 802cc8a:	f026 0607 	bic.w	r6, r6, #7
 802cc8e:	1d23      	adds	r3, r4, #4
 802cc90:	1af2      	subs	r2, r6, r3
 802cc92:	d0ae      	beq.n	802cbf2 <_malloc_r+0x22>
 802cc94:	1b9b      	subs	r3, r3, r6
 802cc96:	50a3      	str	r3, [r4, r2]
 802cc98:	e7ab      	b.n	802cbf2 <_malloc_r+0x22>
 802cc9a:	42a3      	cmp	r3, r4
 802cc9c:	6862      	ldr	r2, [r4, #4]
 802cc9e:	d1dd      	bne.n	802cc5c <_malloc_r+0x8c>
 802cca0:	f8c8 2000 	str.w	r2, [r8]
 802cca4:	e7ec      	b.n	802cc80 <_malloc_r+0xb0>
 802cca6:	4623      	mov	r3, r4
 802cca8:	6864      	ldr	r4, [r4, #4]
 802ccaa:	e7ac      	b.n	802cc06 <_malloc_r+0x36>
 802ccac:	4634      	mov	r4, r6
 802ccae:	6876      	ldr	r6, [r6, #4]
 802ccb0:	e7b4      	b.n	802cc1c <_malloc_r+0x4c>
 802ccb2:	4613      	mov	r3, r2
 802ccb4:	e7cc      	b.n	802cc50 <_malloc_r+0x80>
 802ccb6:	230c      	movs	r3, #12
 802ccb8:	603b      	str	r3, [r7, #0]
 802ccba:	4638      	mov	r0, r7
 802ccbc:	f000 f80e 	bl	802ccdc <__malloc_unlock>
 802ccc0:	e797      	b.n	802cbf2 <_malloc_r+0x22>
 802ccc2:	6025      	str	r5, [r4, #0]
 802ccc4:	e7dc      	b.n	802cc80 <_malloc_r+0xb0>
 802ccc6:	605b      	str	r3, [r3, #4]
 802ccc8:	deff      	udf	#255	; 0xff
 802ccca:	bf00      	nop
 802cccc:	2000b89c 	.word	0x2000b89c

0802ccd0 <__malloc_lock>:
 802ccd0:	4801      	ldr	r0, [pc, #4]	; (802ccd8 <__malloc_lock+0x8>)
 802ccd2:	f000 ba52 	b.w	802d17a <__retarget_lock_acquire_recursive>
 802ccd6:	bf00      	nop
 802ccd8:	2000b9e5 	.word	0x2000b9e5

0802ccdc <__malloc_unlock>:
 802ccdc:	4801      	ldr	r0, [pc, #4]	; (802cce4 <__malloc_unlock+0x8>)
 802ccde:	f000 ba4d 	b.w	802d17c <__retarget_lock_release_recursive>
 802cce2:	bf00      	nop
 802cce4:	2000b9e5 	.word	0x2000b9e5

0802cce8 <__cxa_atexit>:
 802cce8:	b510      	push	{r4, lr}
 802ccea:	4c05      	ldr	r4, [pc, #20]	; (802cd00 <__cxa_atexit+0x18>)
 802ccec:	4613      	mov	r3, r2
 802ccee:	b12c      	cbz	r4, 802ccfc <__cxa_atexit+0x14>
 802ccf0:	460a      	mov	r2, r1
 802ccf2:	4601      	mov	r1, r0
 802ccf4:	2002      	movs	r0, #2
 802ccf6:	f000 fa51 	bl	802d19c <__register_exitproc>
 802ccfa:	bd10      	pop	{r4, pc}
 802ccfc:	4620      	mov	r0, r4
 802ccfe:	e7fc      	b.n	802ccfa <__cxa_atexit+0x12>
 802cd00:	0802d19d 	.word	0x0802d19d

0802cd04 <std>:
 802cd04:	2300      	movs	r3, #0
 802cd06:	b510      	push	{r4, lr}
 802cd08:	4604      	mov	r4, r0
 802cd0a:	e9c0 3300 	strd	r3, r3, [r0]
 802cd0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802cd12:	6083      	str	r3, [r0, #8]
 802cd14:	8181      	strh	r1, [r0, #12]
 802cd16:	6643      	str	r3, [r0, #100]	; 0x64
 802cd18:	81c2      	strh	r2, [r0, #14]
 802cd1a:	6183      	str	r3, [r0, #24]
 802cd1c:	4619      	mov	r1, r3
 802cd1e:	2208      	movs	r2, #8
 802cd20:	305c      	adds	r0, #92	; 0x5c
 802cd22:	f000 f906 	bl	802cf32 <memset>
 802cd26:	4b0d      	ldr	r3, [pc, #52]	; (802cd5c <std+0x58>)
 802cd28:	6263      	str	r3, [r4, #36]	; 0x24
 802cd2a:	4b0d      	ldr	r3, [pc, #52]	; (802cd60 <std+0x5c>)
 802cd2c:	62a3      	str	r3, [r4, #40]	; 0x28
 802cd2e:	4b0d      	ldr	r3, [pc, #52]	; (802cd64 <std+0x60>)
 802cd30:	62e3      	str	r3, [r4, #44]	; 0x2c
 802cd32:	4b0d      	ldr	r3, [pc, #52]	; (802cd68 <std+0x64>)
 802cd34:	6323      	str	r3, [r4, #48]	; 0x30
 802cd36:	4b0d      	ldr	r3, [pc, #52]	; (802cd6c <std+0x68>)
 802cd38:	6224      	str	r4, [r4, #32]
 802cd3a:	429c      	cmp	r4, r3
 802cd3c:	d006      	beq.n	802cd4c <std+0x48>
 802cd3e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 802cd42:	4294      	cmp	r4, r2
 802cd44:	d002      	beq.n	802cd4c <std+0x48>
 802cd46:	33d0      	adds	r3, #208	; 0xd0
 802cd48:	429c      	cmp	r4, r3
 802cd4a:	d105      	bne.n	802cd58 <std+0x54>
 802cd4c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802cd50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802cd54:	f000 ba10 	b.w	802d178 <__retarget_lock_init_recursive>
 802cd58:	bd10      	pop	{r4, pc}
 802cd5a:	bf00      	nop
 802cd5c:	0802cead 	.word	0x0802cead
 802cd60:	0802cecf 	.word	0x0802cecf
 802cd64:	0802cf07 	.word	0x0802cf07
 802cd68:	0802cf2b 	.word	0x0802cf2b
 802cd6c:	2000b8a4 	.word	0x2000b8a4

0802cd70 <stdio_exit_handler>:
 802cd70:	4a02      	ldr	r2, [pc, #8]	; (802cd7c <stdio_exit_handler+0xc>)
 802cd72:	4903      	ldr	r1, [pc, #12]	; (802cd80 <stdio_exit_handler+0x10>)
 802cd74:	4803      	ldr	r0, [pc, #12]	; (802cd84 <stdio_exit_handler+0x14>)
 802cd76:	f000 b87b 	b.w	802ce70 <_fwalk_sglue>
 802cd7a:	bf00      	nop
 802cd7c:	200000b8 	.word	0x200000b8
 802cd80:	0802d9a5 	.word	0x0802d9a5
 802cd84:	200000c4 	.word	0x200000c4

0802cd88 <cleanup_stdio>:
 802cd88:	6841      	ldr	r1, [r0, #4]
 802cd8a:	4b0c      	ldr	r3, [pc, #48]	; (802cdbc <cleanup_stdio+0x34>)
 802cd8c:	4299      	cmp	r1, r3
 802cd8e:	b510      	push	{r4, lr}
 802cd90:	4604      	mov	r4, r0
 802cd92:	d001      	beq.n	802cd98 <cleanup_stdio+0x10>
 802cd94:	f000 fe06 	bl	802d9a4 <_fflush_r>
 802cd98:	68a1      	ldr	r1, [r4, #8]
 802cd9a:	4b09      	ldr	r3, [pc, #36]	; (802cdc0 <cleanup_stdio+0x38>)
 802cd9c:	4299      	cmp	r1, r3
 802cd9e:	d002      	beq.n	802cda6 <cleanup_stdio+0x1e>
 802cda0:	4620      	mov	r0, r4
 802cda2:	f000 fdff 	bl	802d9a4 <_fflush_r>
 802cda6:	68e1      	ldr	r1, [r4, #12]
 802cda8:	4b06      	ldr	r3, [pc, #24]	; (802cdc4 <cleanup_stdio+0x3c>)
 802cdaa:	4299      	cmp	r1, r3
 802cdac:	d004      	beq.n	802cdb8 <cleanup_stdio+0x30>
 802cdae:	4620      	mov	r0, r4
 802cdb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802cdb4:	f000 bdf6 	b.w	802d9a4 <_fflush_r>
 802cdb8:	bd10      	pop	{r4, pc}
 802cdba:	bf00      	nop
 802cdbc:	2000b8a4 	.word	0x2000b8a4
 802cdc0:	2000b90c 	.word	0x2000b90c
 802cdc4:	2000b974 	.word	0x2000b974

0802cdc8 <global_stdio_init.part.0>:
 802cdc8:	b510      	push	{r4, lr}
 802cdca:	4b0b      	ldr	r3, [pc, #44]	; (802cdf8 <global_stdio_init.part.0+0x30>)
 802cdcc:	4c0b      	ldr	r4, [pc, #44]	; (802cdfc <global_stdio_init.part.0+0x34>)
 802cdce:	4a0c      	ldr	r2, [pc, #48]	; (802ce00 <global_stdio_init.part.0+0x38>)
 802cdd0:	601a      	str	r2, [r3, #0]
 802cdd2:	4620      	mov	r0, r4
 802cdd4:	2200      	movs	r2, #0
 802cdd6:	2104      	movs	r1, #4
 802cdd8:	f7ff ff94 	bl	802cd04 <std>
 802cddc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 802cde0:	2201      	movs	r2, #1
 802cde2:	2109      	movs	r1, #9
 802cde4:	f7ff ff8e 	bl	802cd04 <std>
 802cde8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 802cdec:	2202      	movs	r2, #2
 802cdee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802cdf2:	2112      	movs	r1, #18
 802cdf4:	f7ff bf86 	b.w	802cd04 <std>
 802cdf8:	2000b9dc 	.word	0x2000b9dc
 802cdfc:	2000b8a4 	.word	0x2000b8a4
 802ce00:	0802cd71 	.word	0x0802cd71

0802ce04 <__sfp_lock_acquire>:
 802ce04:	4801      	ldr	r0, [pc, #4]	; (802ce0c <__sfp_lock_acquire+0x8>)
 802ce06:	f000 b9b8 	b.w	802d17a <__retarget_lock_acquire_recursive>
 802ce0a:	bf00      	nop
 802ce0c:	2000b9e6 	.word	0x2000b9e6

0802ce10 <__sfp_lock_release>:
 802ce10:	4801      	ldr	r0, [pc, #4]	; (802ce18 <__sfp_lock_release+0x8>)
 802ce12:	f000 b9b3 	b.w	802d17c <__retarget_lock_release_recursive>
 802ce16:	bf00      	nop
 802ce18:	2000b9e6 	.word	0x2000b9e6

0802ce1c <__sinit>:
 802ce1c:	b510      	push	{r4, lr}
 802ce1e:	4604      	mov	r4, r0
 802ce20:	f7ff fff0 	bl	802ce04 <__sfp_lock_acquire>
 802ce24:	6a23      	ldr	r3, [r4, #32]
 802ce26:	b11b      	cbz	r3, 802ce30 <__sinit+0x14>
 802ce28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802ce2c:	f7ff bff0 	b.w	802ce10 <__sfp_lock_release>
 802ce30:	4b04      	ldr	r3, [pc, #16]	; (802ce44 <__sinit+0x28>)
 802ce32:	6223      	str	r3, [r4, #32]
 802ce34:	4b04      	ldr	r3, [pc, #16]	; (802ce48 <__sinit+0x2c>)
 802ce36:	681b      	ldr	r3, [r3, #0]
 802ce38:	2b00      	cmp	r3, #0
 802ce3a:	d1f5      	bne.n	802ce28 <__sinit+0xc>
 802ce3c:	f7ff ffc4 	bl	802cdc8 <global_stdio_init.part.0>
 802ce40:	e7f2      	b.n	802ce28 <__sinit+0xc>
 802ce42:	bf00      	nop
 802ce44:	0802cd89 	.word	0x0802cd89
 802ce48:	2000b9dc 	.word	0x2000b9dc

0802ce4c <fiprintf>:
 802ce4c:	b40e      	push	{r1, r2, r3}
 802ce4e:	b503      	push	{r0, r1, lr}
 802ce50:	4601      	mov	r1, r0
 802ce52:	ab03      	add	r3, sp, #12
 802ce54:	4805      	ldr	r0, [pc, #20]	; (802ce6c <fiprintf+0x20>)
 802ce56:	f853 2b04 	ldr.w	r2, [r3], #4
 802ce5a:	6800      	ldr	r0, [r0, #0]
 802ce5c:	9301      	str	r3, [sp, #4]
 802ce5e:	f000 fa71 	bl	802d344 <_vfiprintf_r>
 802ce62:	b002      	add	sp, #8
 802ce64:	f85d eb04 	ldr.w	lr, [sp], #4
 802ce68:	b003      	add	sp, #12
 802ce6a:	4770      	bx	lr
 802ce6c:	20000110 	.word	0x20000110

0802ce70 <_fwalk_sglue>:
 802ce70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802ce74:	4607      	mov	r7, r0
 802ce76:	4688      	mov	r8, r1
 802ce78:	4614      	mov	r4, r2
 802ce7a:	2600      	movs	r6, #0
 802ce7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802ce80:	f1b9 0901 	subs.w	r9, r9, #1
 802ce84:	d505      	bpl.n	802ce92 <_fwalk_sglue+0x22>
 802ce86:	6824      	ldr	r4, [r4, #0]
 802ce88:	2c00      	cmp	r4, #0
 802ce8a:	d1f7      	bne.n	802ce7c <_fwalk_sglue+0xc>
 802ce8c:	4630      	mov	r0, r6
 802ce8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802ce92:	89ab      	ldrh	r3, [r5, #12]
 802ce94:	2b01      	cmp	r3, #1
 802ce96:	d907      	bls.n	802cea8 <_fwalk_sglue+0x38>
 802ce98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802ce9c:	3301      	adds	r3, #1
 802ce9e:	d003      	beq.n	802cea8 <_fwalk_sglue+0x38>
 802cea0:	4629      	mov	r1, r5
 802cea2:	4638      	mov	r0, r7
 802cea4:	47c0      	blx	r8
 802cea6:	4306      	orrs	r6, r0
 802cea8:	3568      	adds	r5, #104	; 0x68
 802ceaa:	e7e9      	b.n	802ce80 <_fwalk_sglue+0x10>

0802ceac <__sread>:
 802ceac:	b510      	push	{r4, lr}
 802ceae:	460c      	mov	r4, r1
 802ceb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ceb4:	f000 f8ee 	bl	802d094 <_read_r>
 802ceb8:	2800      	cmp	r0, #0
 802ceba:	bfab      	itete	ge
 802cebc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802cebe:	89a3      	ldrhlt	r3, [r4, #12]
 802cec0:	181b      	addge	r3, r3, r0
 802cec2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802cec6:	bfac      	ite	ge
 802cec8:	6563      	strge	r3, [r4, #84]	; 0x54
 802ceca:	81a3      	strhlt	r3, [r4, #12]
 802cecc:	bd10      	pop	{r4, pc}

0802cece <__swrite>:
 802cece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ced2:	461f      	mov	r7, r3
 802ced4:	898b      	ldrh	r3, [r1, #12]
 802ced6:	05db      	lsls	r3, r3, #23
 802ced8:	4605      	mov	r5, r0
 802ceda:	460c      	mov	r4, r1
 802cedc:	4616      	mov	r6, r2
 802cede:	d505      	bpl.n	802ceec <__swrite+0x1e>
 802cee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802cee4:	2302      	movs	r3, #2
 802cee6:	2200      	movs	r2, #0
 802cee8:	f000 f8c2 	bl	802d070 <_lseek_r>
 802ceec:	89a3      	ldrh	r3, [r4, #12]
 802ceee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802cef2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802cef6:	81a3      	strh	r3, [r4, #12]
 802cef8:	4632      	mov	r2, r6
 802cefa:	463b      	mov	r3, r7
 802cefc:	4628      	mov	r0, r5
 802cefe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802cf02:	f000 b8fd 	b.w	802d100 <_write_r>

0802cf06 <__sseek>:
 802cf06:	b510      	push	{r4, lr}
 802cf08:	460c      	mov	r4, r1
 802cf0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802cf0e:	f000 f8af 	bl	802d070 <_lseek_r>
 802cf12:	1c43      	adds	r3, r0, #1
 802cf14:	89a3      	ldrh	r3, [r4, #12]
 802cf16:	bf15      	itete	ne
 802cf18:	6560      	strne	r0, [r4, #84]	; 0x54
 802cf1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802cf1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802cf22:	81a3      	strheq	r3, [r4, #12]
 802cf24:	bf18      	it	ne
 802cf26:	81a3      	strhne	r3, [r4, #12]
 802cf28:	bd10      	pop	{r4, pc}

0802cf2a <__sclose>:
 802cf2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802cf2e:	f000 b839 	b.w	802cfa4 <_close_r>

0802cf32 <memset>:
 802cf32:	4402      	add	r2, r0
 802cf34:	4603      	mov	r3, r0
 802cf36:	4293      	cmp	r3, r2
 802cf38:	d100      	bne.n	802cf3c <memset+0xa>
 802cf3a:	4770      	bx	lr
 802cf3c:	f803 1b01 	strb.w	r1, [r3], #1
 802cf40:	e7f9      	b.n	802cf36 <memset+0x4>

0802cf42 <_raise_r>:
 802cf42:	291f      	cmp	r1, #31
 802cf44:	b538      	push	{r3, r4, r5, lr}
 802cf46:	4604      	mov	r4, r0
 802cf48:	460d      	mov	r5, r1
 802cf4a:	d904      	bls.n	802cf56 <_raise_r+0x14>
 802cf4c:	2316      	movs	r3, #22
 802cf4e:	6003      	str	r3, [r0, #0]
 802cf50:	f04f 30ff 	mov.w	r0, #4294967295
 802cf54:	bd38      	pop	{r3, r4, r5, pc}
 802cf56:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 802cf58:	b112      	cbz	r2, 802cf60 <_raise_r+0x1e>
 802cf5a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802cf5e:	b94b      	cbnz	r3, 802cf74 <_raise_r+0x32>
 802cf60:	4620      	mov	r0, r4
 802cf62:	f000 f8bb 	bl	802d0dc <_getpid_r>
 802cf66:	462a      	mov	r2, r5
 802cf68:	4601      	mov	r1, r0
 802cf6a:	4620      	mov	r0, r4
 802cf6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802cf70:	f000 b8a2 	b.w	802d0b8 <_kill_r>
 802cf74:	2b01      	cmp	r3, #1
 802cf76:	d00a      	beq.n	802cf8e <_raise_r+0x4c>
 802cf78:	1c59      	adds	r1, r3, #1
 802cf7a:	d103      	bne.n	802cf84 <_raise_r+0x42>
 802cf7c:	2316      	movs	r3, #22
 802cf7e:	6003      	str	r3, [r0, #0]
 802cf80:	2001      	movs	r0, #1
 802cf82:	e7e7      	b.n	802cf54 <_raise_r+0x12>
 802cf84:	2400      	movs	r4, #0
 802cf86:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802cf8a:	4628      	mov	r0, r5
 802cf8c:	4798      	blx	r3
 802cf8e:	2000      	movs	r0, #0
 802cf90:	e7e0      	b.n	802cf54 <_raise_r+0x12>
	...

0802cf94 <raise>:
 802cf94:	4b02      	ldr	r3, [pc, #8]	; (802cfa0 <raise+0xc>)
 802cf96:	4601      	mov	r1, r0
 802cf98:	6818      	ldr	r0, [r3, #0]
 802cf9a:	f7ff bfd2 	b.w	802cf42 <_raise_r>
 802cf9e:	bf00      	nop
 802cfa0:	20000110 	.word	0x20000110

0802cfa4 <_close_r>:
 802cfa4:	b538      	push	{r3, r4, r5, lr}
 802cfa6:	4d06      	ldr	r5, [pc, #24]	; (802cfc0 <_close_r+0x1c>)
 802cfa8:	2300      	movs	r3, #0
 802cfaa:	4604      	mov	r4, r0
 802cfac:	4608      	mov	r0, r1
 802cfae:	602b      	str	r3, [r5, #0]
 802cfb0:	f7d4 ff05 	bl	8001dbe <_close>
 802cfb4:	1c43      	adds	r3, r0, #1
 802cfb6:	d102      	bne.n	802cfbe <_close_r+0x1a>
 802cfb8:	682b      	ldr	r3, [r5, #0]
 802cfba:	b103      	cbz	r3, 802cfbe <_close_r+0x1a>
 802cfbc:	6023      	str	r3, [r4, #0]
 802cfbe:	bd38      	pop	{r3, r4, r5, pc}
 802cfc0:	2000b9e0 	.word	0x2000b9e0

0802cfc4 <_reclaim_reent>:
 802cfc4:	4b29      	ldr	r3, [pc, #164]	; (802d06c <_reclaim_reent+0xa8>)
 802cfc6:	681b      	ldr	r3, [r3, #0]
 802cfc8:	4283      	cmp	r3, r0
 802cfca:	b570      	push	{r4, r5, r6, lr}
 802cfcc:	4604      	mov	r4, r0
 802cfce:	d04b      	beq.n	802d068 <_reclaim_reent+0xa4>
 802cfd0:	69c3      	ldr	r3, [r0, #28]
 802cfd2:	b143      	cbz	r3, 802cfe6 <_reclaim_reent+0x22>
 802cfd4:	68db      	ldr	r3, [r3, #12]
 802cfd6:	2b00      	cmp	r3, #0
 802cfd8:	d144      	bne.n	802d064 <_reclaim_reent+0xa0>
 802cfda:	69e3      	ldr	r3, [r4, #28]
 802cfdc:	6819      	ldr	r1, [r3, #0]
 802cfde:	b111      	cbz	r1, 802cfe6 <_reclaim_reent+0x22>
 802cfe0:	4620      	mov	r0, r4
 802cfe2:	f000 f939 	bl	802d258 <_free_r>
 802cfe6:	6961      	ldr	r1, [r4, #20]
 802cfe8:	b111      	cbz	r1, 802cff0 <_reclaim_reent+0x2c>
 802cfea:	4620      	mov	r0, r4
 802cfec:	f000 f934 	bl	802d258 <_free_r>
 802cff0:	69e1      	ldr	r1, [r4, #28]
 802cff2:	b111      	cbz	r1, 802cffa <_reclaim_reent+0x36>
 802cff4:	4620      	mov	r0, r4
 802cff6:	f000 f92f 	bl	802d258 <_free_r>
 802cffa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 802cffc:	b111      	cbz	r1, 802d004 <_reclaim_reent+0x40>
 802cffe:	4620      	mov	r0, r4
 802d000:	f000 f92a 	bl	802d258 <_free_r>
 802d004:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802d006:	b111      	cbz	r1, 802d00e <_reclaim_reent+0x4a>
 802d008:	4620      	mov	r0, r4
 802d00a:	f000 f925 	bl	802d258 <_free_r>
 802d00e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802d010:	b111      	cbz	r1, 802d018 <_reclaim_reent+0x54>
 802d012:	4620      	mov	r0, r4
 802d014:	f000 f920 	bl	802d258 <_free_r>
 802d018:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802d01a:	b111      	cbz	r1, 802d022 <_reclaim_reent+0x5e>
 802d01c:	4620      	mov	r0, r4
 802d01e:	f000 f91b 	bl	802d258 <_free_r>
 802d022:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802d024:	b111      	cbz	r1, 802d02c <_reclaim_reent+0x68>
 802d026:	4620      	mov	r0, r4
 802d028:	f000 f916 	bl	802d258 <_free_r>
 802d02c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 802d02e:	b111      	cbz	r1, 802d036 <_reclaim_reent+0x72>
 802d030:	4620      	mov	r0, r4
 802d032:	f000 f911 	bl	802d258 <_free_r>
 802d036:	6a23      	ldr	r3, [r4, #32]
 802d038:	b1b3      	cbz	r3, 802d068 <_reclaim_reent+0xa4>
 802d03a:	4620      	mov	r0, r4
 802d03c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802d040:	4718      	bx	r3
 802d042:	5949      	ldr	r1, [r1, r5]
 802d044:	b941      	cbnz	r1, 802d058 <_reclaim_reent+0x94>
 802d046:	3504      	adds	r5, #4
 802d048:	69e3      	ldr	r3, [r4, #28]
 802d04a:	2d80      	cmp	r5, #128	; 0x80
 802d04c:	68d9      	ldr	r1, [r3, #12]
 802d04e:	d1f8      	bne.n	802d042 <_reclaim_reent+0x7e>
 802d050:	4620      	mov	r0, r4
 802d052:	f000 f901 	bl	802d258 <_free_r>
 802d056:	e7c0      	b.n	802cfda <_reclaim_reent+0x16>
 802d058:	680e      	ldr	r6, [r1, #0]
 802d05a:	4620      	mov	r0, r4
 802d05c:	f000 f8fc 	bl	802d258 <_free_r>
 802d060:	4631      	mov	r1, r6
 802d062:	e7ef      	b.n	802d044 <_reclaim_reent+0x80>
 802d064:	2500      	movs	r5, #0
 802d066:	e7ef      	b.n	802d048 <_reclaim_reent+0x84>
 802d068:	bd70      	pop	{r4, r5, r6, pc}
 802d06a:	bf00      	nop
 802d06c:	20000110 	.word	0x20000110

0802d070 <_lseek_r>:
 802d070:	b538      	push	{r3, r4, r5, lr}
 802d072:	4d07      	ldr	r5, [pc, #28]	; (802d090 <_lseek_r+0x20>)
 802d074:	4604      	mov	r4, r0
 802d076:	4608      	mov	r0, r1
 802d078:	4611      	mov	r1, r2
 802d07a:	2200      	movs	r2, #0
 802d07c:	602a      	str	r2, [r5, #0]
 802d07e:	461a      	mov	r2, r3
 802d080:	f7d4 fec4 	bl	8001e0c <_lseek>
 802d084:	1c43      	adds	r3, r0, #1
 802d086:	d102      	bne.n	802d08e <_lseek_r+0x1e>
 802d088:	682b      	ldr	r3, [r5, #0]
 802d08a:	b103      	cbz	r3, 802d08e <_lseek_r+0x1e>
 802d08c:	6023      	str	r3, [r4, #0]
 802d08e:	bd38      	pop	{r3, r4, r5, pc}
 802d090:	2000b9e0 	.word	0x2000b9e0

0802d094 <_read_r>:
 802d094:	b538      	push	{r3, r4, r5, lr}
 802d096:	4d07      	ldr	r5, [pc, #28]	; (802d0b4 <_read_r+0x20>)
 802d098:	4604      	mov	r4, r0
 802d09a:	4608      	mov	r0, r1
 802d09c:	4611      	mov	r1, r2
 802d09e:	2200      	movs	r2, #0
 802d0a0:	602a      	str	r2, [r5, #0]
 802d0a2:	461a      	mov	r2, r3
 802d0a4:	f7d4 fe52 	bl	8001d4c <_read>
 802d0a8:	1c43      	adds	r3, r0, #1
 802d0aa:	d102      	bne.n	802d0b2 <_read_r+0x1e>
 802d0ac:	682b      	ldr	r3, [r5, #0]
 802d0ae:	b103      	cbz	r3, 802d0b2 <_read_r+0x1e>
 802d0b0:	6023      	str	r3, [r4, #0]
 802d0b2:	bd38      	pop	{r3, r4, r5, pc}
 802d0b4:	2000b9e0 	.word	0x2000b9e0

0802d0b8 <_kill_r>:
 802d0b8:	b538      	push	{r3, r4, r5, lr}
 802d0ba:	4d07      	ldr	r5, [pc, #28]	; (802d0d8 <_kill_r+0x20>)
 802d0bc:	2300      	movs	r3, #0
 802d0be:	4604      	mov	r4, r0
 802d0c0:	4608      	mov	r0, r1
 802d0c2:	4611      	mov	r1, r2
 802d0c4:	602b      	str	r3, [r5, #0]
 802d0c6:	f7d4 fe27 	bl	8001d18 <_kill>
 802d0ca:	1c43      	adds	r3, r0, #1
 802d0cc:	d102      	bne.n	802d0d4 <_kill_r+0x1c>
 802d0ce:	682b      	ldr	r3, [r5, #0]
 802d0d0:	b103      	cbz	r3, 802d0d4 <_kill_r+0x1c>
 802d0d2:	6023      	str	r3, [r4, #0]
 802d0d4:	bd38      	pop	{r3, r4, r5, pc}
 802d0d6:	bf00      	nop
 802d0d8:	2000b9e0 	.word	0x2000b9e0

0802d0dc <_getpid_r>:
 802d0dc:	f7d4 be14 	b.w	8001d08 <_getpid>

0802d0e0 <_sbrk_r>:
 802d0e0:	b538      	push	{r3, r4, r5, lr}
 802d0e2:	4d06      	ldr	r5, [pc, #24]	; (802d0fc <_sbrk_r+0x1c>)
 802d0e4:	2300      	movs	r3, #0
 802d0e6:	4604      	mov	r4, r0
 802d0e8:	4608      	mov	r0, r1
 802d0ea:	602b      	str	r3, [r5, #0]
 802d0ec:	f7d4 fe9c 	bl	8001e28 <_sbrk>
 802d0f0:	1c43      	adds	r3, r0, #1
 802d0f2:	d102      	bne.n	802d0fa <_sbrk_r+0x1a>
 802d0f4:	682b      	ldr	r3, [r5, #0]
 802d0f6:	b103      	cbz	r3, 802d0fa <_sbrk_r+0x1a>
 802d0f8:	6023      	str	r3, [r4, #0]
 802d0fa:	bd38      	pop	{r3, r4, r5, pc}
 802d0fc:	2000b9e0 	.word	0x2000b9e0

0802d100 <_write_r>:
 802d100:	b538      	push	{r3, r4, r5, lr}
 802d102:	4d07      	ldr	r5, [pc, #28]	; (802d120 <_write_r+0x20>)
 802d104:	4604      	mov	r4, r0
 802d106:	4608      	mov	r0, r1
 802d108:	4611      	mov	r1, r2
 802d10a:	2200      	movs	r2, #0
 802d10c:	602a      	str	r2, [r5, #0]
 802d10e:	461a      	mov	r2, r3
 802d110:	f7d4 fe39 	bl	8001d86 <_write>
 802d114:	1c43      	adds	r3, r0, #1
 802d116:	d102      	bne.n	802d11e <_write_r+0x1e>
 802d118:	682b      	ldr	r3, [r5, #0]
 802d11a:	b103      	cbz	r3, 802d11e <_write_r+0x1e>
 802d11c:	6023      	str	r3, [r4, #0]
 802d11e:	bd38      	pop	{r3, r4, r5, pc}
 802d120:	2000b9e0 	.word	0x2000b9e0

0802d124 <__errno>:
 802d124:	4b01      	ldr	r3, [pc, #4]	; (802d12c <__errno+0x8>)
 802d126:	6818      	ldr	r0, [r3, #0]
 802d128:	4770      	bx	lr
 802d12a:	bf00      	nop
 802d12c:	20000110 	.word	0x20000110

0802d130 <__libc_init_array>:
 802d130:	b570      	push	{r4, r5, r6, lr}
 802d132:	4d0d      	ldr	r5, [pc, #52]	; (802d168 <__libc_init_array+0x38>)
 802d134:	4c0d      	ldr	r4, [pc, #52]	; (802d16c <__libc_init_array+0x3c>)
 802d136:	1b64      	subs	r4, r4, r5
 802d138:	10a4      	asrs	r4, r4, #2
 802d13a:	2600      	movs	r6, #0
 802d13c:	42a6      	cmp	r6, r4
 802d13e:	d109      	bne.n	802d154 <__libc_init_array+0x24>
 802d140:	4d0b      	ldr	r5, [pc, #44]	; (802d170 <__libc_init_array+0x40>)
 802d142:	4c0c      	ldr	r4, [pc, #48]	; (802d174 <__libc_init_array+0x44>)
 802d144:	f000 fd70 	bl	802dc28 <_init>
 802d148:	1b64      	subs	r4, r4, r5
 802d14a:	10a4      	asrs	r4, r4, #2
 802d14c:	2600      	movs	r6, #0
 802d14e:	42a6      	cmp	r6, r4
 802d150:	d105      	bne.n	802d15e <__libc_init_array+0x2e>
 802d152:	bd70      	pop	{r4, r5, r6, pc}
 802d154:	f855 3b04 	ldr.w	r3, [r5], #4
 802d158:	4798      	blx	r3
 802d15a:	3601      	adds	r6, #1
 802d15c:	e7ee      	b.n	802d13c <__libc_init_array+0xc>
 802d15e:	f855 3b04 	ldr.w	r3, [r5], #4
 802d162:	4798      	blx	r3
 802d164:	3601      	adds	r6, #1
 802d166:	e7f2      	b.n	802d14e <__libc_init_array+0x1e>
 802d168:	0812f9c8 	.word	0x0812f9c8
 802d16c:	0812f9c8 	.word	0x0812f9c8
 802d170:	0812f9c8 	.word	0x0812f9c8
 802d174:	0812f9dc 	.word	0x0812f9dc

0802d178 <__retarget_lock_init_recursive>:
 802d178:	4770      	bx	lr

0802d17a <__retarget_lock_acquire_recursive>:
 802d17a:	4770      	bx	lr

0802d17c <__retarget_lock_release_recursive>:
 802d17c:	4770      	bx	lr

0802d17e <memcpy>:
 802d17e:	440a      	add	r2, r1
 802d180:	4291      	cmp	r1, r2
 802d182:	f100 33ff 	add.w	r3, r0, #4294967295
 802d186:	d100      	bne.n	802d18a <memcpy+0xc>
 802d188:	4770      	bx	lr
 802d18a:	b510      	push	{r4, lr}
 802d18c:	f811 4b01 	ldrb.w	r4, [r1], #1
 802d190:	f803 4f01 	strb.w	r4, [r3, #1]!
 802d194:	4291      	cmp	r1, r2
 802d196:	d1f9      	bne.n	802d18c <memcpy+0xe>
 802d198:	bd10      	pop	{r4, pc}
	...

0802d19c <__register_exitproc>:
 802d19c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802d1a0:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 802d254 <__register_exitproc+0xb8>
 802d1a4:	4606      	mov	r6, r0
 802d1a6:	f8d8 0000 	ldr.w	r0, [r8]
 802d1aa:	461f      	mov	r7, r3
 802d1ac:	460d      	mov	r5, r1
 802d1ae:	4691      	mov	r9, r2
 802d1b0:	f7ff ffe3 	bl	802d17a <__retarget_lock_acquire_recursive>
 802d1b4:	4b23      	ldr	r3, [pc, #140]	; (802d244 <__register_exitproc+0xa8>)
 802d1b6:	681c      	ldr	r4, [r3, #0]
 802d1b8:	b934      	cbnz	r4, 802d1c8 <__register_exitproc+0x2c>
 802d1ba:	4c23      	ldr	r4, [pc, #140]	; (802d248 <__register_exitproc+0xac>)
 802d1bc:	601c      	str	r4, [r3, #0]
 802d1be:	4b23      	ldr	r3, [pc, #140]	; (802d24c <__register_exitproc+0xb0>)
 802d1c0:	b113      	cbz	r3, 802d1c8 <__register_exitproc+0x2c>
 802d1c2:	681b      	ldr	r3, [r3, #0]
 802d1c4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802d1c8:	6863      	ldr	r3, [r4, #4]
 802d1ca:	2b1f      	cmp	r3, #31
 802d1cc:	dd07      	ble.n	802d1de <__register_exitproc+0x42>
 802d1ce:	f8d8 0000 	ldr.w	r0, [r8]
 802d1d2:	f7ff ffd3 	bl	802d17c <__retarget_lock_release_recursive>
 802d1d6:	f04f 30ff 	mov.w	r0, #4294967295
 802d1da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802d1de:	b32e      	cbz	r6, 802d22c <__register_exitproc+0x90>
 802d1e0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802d1e4:	b968      	cbnz	r0, 802d202 <__register_exitproc+0x66>
 802d1e6:	4b1a      	ldr	r3, [pc, #104]	; (802d250 <__register_exitproc+0xb4>)
 802d1e8:	2b00      	cmp	r3, #0
 802d1ea:	d0f0      	beq.n	802d1ce <__register_exitproc+0x32>
 802d1ec:	f44f 7084 	mov.w	r0, #264	; 0x108
 802d1f0:	f7ff fcbe 	bl	802cb70 <malloc>
 802d1f4:	2800      	cmp	r0, #0
 802d1f6:	d0ea      	beq.n	802d1ce <__register_exitproc+0x32>
 802d1f8:	2300      	movs	r3, #0
 802d1fa:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802d1fe:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802d202:	6863      	ldr	r3, [r4, #4]
 802d204:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802d208:	2201      	movs	r2, #1
 802d20a:	409a      	lsls	r2, r3
 802d20c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802d210:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802d214:	4313      	orrs	r3, r2
 802d216:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802d21a:	2e02      	cmp	r6, #2
 802d21c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802d220:	bf02      	ittt	eq
 802d222:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802d226:	4313      	orreq	r3, r2
 802d228:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802d22c:	6863      	ldr	r3, [r4, #4]
 802d22e:	f8d8 0000 	ldr.w	r0, [r8]
 802d232:	1c5a      	adds	r2, r3, #1
 802d234:	3302      	adds	r3, #2
 802d236:	6062      	str	r2, [r4, #4]
 802d238:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802d23c:	f7ff ff9e 	bl	802d17c <__retarget_lock_release_recursive>
 802d240:	2000      	movs	r0, #0
 802d242:	e7ca      	b.n	802d1da <__register_exitproc+0x3e>
 802d244:	2000ba74 	.word	0x2000ba74
 802d248:	2000b9e8 	.word	0x2000b9e8
 802d24c:	0802ff70 	.word	0x0802ff70
 802d250:	0802cb71 	.word	0x0802cb71
 802d254:	20000114 	.word	0x20000114

0802d258 <_free_r>:
 802d258:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802d25a:	2900      	cmp	r1, #0
 802d25c:	d044      	beq.n	802d2e8 <_free_r+0x90>
 802d25e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802d262:	9001      	str	r0, [sp, #4]
 802d264:	2b00      	cmp	r3, #0
 802d266:	f1a1 0404 	sub.w	r4, r1, #4
 802d26a:	bfb8      	it	lt
 802d26c:	18e4      	addlt	r4, r4, r3
 802d26e:	f7ff fd2f 	bl	802ccd0 <__malloc_lock>
 802d272:	4a1e      	ldr	r2, [pc, #120]	; (802d2ec <_free_r+0x94>)
 802d274:	9801      	ldr	r0, [sp, #4]
 802d276:	6813      	ldr	r3, [r2, #0]
 802d278:	b933      	cbnz	r3, 802d288 <_free_r+0x30>
 802d27a:	6063      	str	r3, [r4, #4]
 802d27c:	6014      	str	r4, [r2, #0]
 802d27e:	b003      	add	sp, #12
 802d280:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802d284:	f7ff bd2a 	b.w	802ccdc <__malloc_unlock>
 802d288:	42a3      	cmp	r3, r4
 802d28a:	d908      	bls.n	802d29e <_free_r+0x46>
 802d28c:	6825      	ldr	r5, [r4, #0]
 802d28e:	1961      	adds	r1, r4, r5
 802d290:	428b      	cmp	r3, r1
 802d292:	bf01      	itttt	eq
 802d294:	6819      	ldreq	r1, [r3, #0]
 802d296:	685b      	ldreq	r3, [r3, #4]
 802d298:	1949      	addeq	r1, r1, r5
 802d29a:	6021      	streq	r1, [r4, #0]
 802d29c:	e7ed      	b.n	802d27a <_free_r+0x22>
 802d29e:	461a      	mov	r2, r3
 802d2a0:	685b      	ldr	r3, [r3, #4]
 802d2a2:	b10b      	cbz	r3, 802d2a8 <_free_r+0x50>
 802d2a4:	42a3      	cmp	r3, r4
 802d2a6:	d9fa      	bls.n	802d29e <_free_r+0x46>
 802d2a8:	6811      	ldr	r1, [r2, #0]
 802d2aa:	1855      	adds	r5, r2, r1
 802d2ac:	42a5      	cmp	r5, r4
 802d2ae:	d10b      	bne.n	802d2c8 <_free_r+0x70>
 802d2b0:	6824      	ldr	r4, [r4, #0]
 802d2b2:	4421      	add	r1, r4
 802d2b4:	1854      	adds	r4, r2, r1
 802d2b6:	42a3      	cmp	r3, r4
 802d2b8:	6011      	str	r1, [r2, #0]
 802d2ba:	d1e0      	bne.n	802d27e <_free_r+0x26>
 802d2bc:	681c      	ldr	r4, [r3, #0]
 802d2be:	685b      	ldr	r3, [r3, #4]
 802d2c0:	6053      	str	r3, [r2, #4]
 802d2c2:	440c      	add	r4, r1
 802d2c4:	6014      	str	r4, [r2, #0]
 802d2c6:	e7da      	b.n	802d27e <_free_r+0x26>
 802d2c8:	d902      	bls.n	802d2d0 <_free_r+0x78>
 802d2ca:	230c      	movs	r3, #12
 802d2cc:	6003      	str	r3, [r0, #0]
 802d2ce:	e7d6      	b.n	802d27e <_free_r+0x26>
 802d2d0:	6825      	ldr	r5, [r4, #0]
 802d2d2:	1961      	adds	r1, r4, r5
 802d2d4:	428b      	cmp	r3, r1
 802d2d6:	bf04      	itt	eq
 802d2d8:	6819      	ldreq	r1, [r3, #0]
 802d2da:	685b      	ldreq	r3, [r3, #4]
 802d2dc:	6063      	str	r3, [r4, #4]
 802d2de:	bf04      	itt	eq
 802d2e0:	1949      	addeq	r1, r1, r5
 802d2e2:	6021      	streq	r1, [r4, #0]
 802d2e4:	6054      	str	r4, [r2, #4]
 802d2e6:	e7ca      	b.n	802d27e <_free_r+0x26>
 802d2e8:	b003      	add	sp, #12
 802d2ea:	bd30      	pop	{r4, r5, pc}
 802d2ec:	2000b89c 	.word	0x2000b89c

0802d2f0 <__sfputc_r>:
 802d2f0:	6893      	ldr	r3, [r2, #8]
 802d2f2:	3b01      	subs	r3, #1
 802d2f4:	2b00      	cmp	r3, #0
 802d2f6:	b410      	push	{r4}
 802d2f8:	6093      	str	r3, [r2, #8]
 802d2fa:	da08      	bge.n	802d30e <__sfputc_r+0x1e>
 802d2fc:	6994      	ldr	r4, [r2, #24]
 802d2fe:	42a3      	cmp	r3, r4
 802d300:	db01      	blt.n	802d306 <__sfputc_r+0x16>
 802d302:	290a      	cmp	r1, #10
 802d304:	d103      	bne.n	802d30e <__sfputc_r+0x1e>
 802d306:	f85d 4b04 	ldr.w	r4, [sp], #4
 802d30a:	f000 bb73 	b.w	802d9f4 <__swbuf_r>
 802d30e:	6813      	ldr	r3, [r2, #0]
 802d310:	1c58      	adds	r0, r3, #1
 802d312:	6010      	str	r0, [r2, #0]
 802d314:	7019      	strb	r1, [r3, #0]
 802d316:	4608      	mov	r0, r1
 802d318:	f85d 4b04 	ldr.w	r4, [sp], #4
 802d31c:	4770      	bx	lr

0802d31e <__sfputs_r>:
 802d31e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d320:	4606      	mov	r6, r0
 802d322:	460f      	mov	r7, r1
 802d324:	4614      	mov	r4, r2
 802d326:	18d5      	adds	r5, r2, r3
 802d328:	42ac      	cmp	r4, r5
 802d32a:	d101      	bne.n	802d330 <__sfputs_r+0x12>
 802d32c:	2000      	movs	r0, #0
 802d32e:	e007      	b.n	802d340 <__sfputs_r+0x22>
 802d330:	f814 1b01 	ldrb.w	r1, [r4], #1
 802d334:	463a      	mov	r2, r7
 802d336:	4630      	mov	r0, r6
 802d338:	f7ff ffda 	bl	802d2f0 <__sfputc_r>
 802d33c:	1c43      	adds	r3, r0, #1
 802d33e:	d1f3      	bne.n	802d328 <__sfputs_r+0xa>
 802d340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802d344 <_vfiprintf_r>:
 802d344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d348:	460d      	mov	r5, r1
 802d34a:	b09d      	sub	sp, #116	; 0x74
 802d34c:	4614      	mov	r4, r2
 802d34e:	4698      	mov	r8, r3
 802d350:	4606      	mov	r6, r0
 802d352:	b118      	cbz	r0, 802d35c <_vfiprintf_r+0x18>
 802d354:	6a03      	ldr	r3, [r0, #32]
 802d356:	b90b      	cbnz	r3, 802d35c <_vfiprintf_r+0x18>
 802d358:	f7ff fd60 	bl	802ce1c <__sinit>
 802d35c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802d35e:	07d9      	lsls	r1, r3, #31
 802d360:	d405      	bmi.n	802d36e <_vfiprintf_r+0x2a>
 802d362:	89ab      	ldrh	r3, [r5, #12]
 802d364:	059a      	lsls	r2, r3, #22
 802d366:	d402      	bmi.n	802d36e <_vfiprintf_r+0x2a>
 802d368:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802d36a:	f7ff ff06 	bl	802d17a <__retarget_lock_acquire_recursive>
 802d36e:	89ab      	ldrh	r3, [r5, #12]
 802d370:	071b      	lsls	r3, r3, #28
 802d372:	d501      	bpl.n	802d378 <_vfiprintf_r+0x34>
 802d374:	692b      	ldr	r3, [r5, #16]
 802d376:	b99b      	cbnz	r3, 802d3a0 <_vfiprintf_r+0x5c>
 802d378:	4629      	mov	r1, r5
 802d37a:	4630      	mov	r0, r6
 802d37c:	f000 fb78 	bl	802da70 <__swsetup_r>
 802d380:	b170      	cbz	r0, 802d3a0 <_vfiprintf_r+0x5c>
 802d382:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802d384:	07dc      	lsls	r4, r3, #31
 802d386:	d504      	bpl.n	802d392 <_vfiprintf_r+0x4e>
 802d388:	f04f 30ff 	mov.w	r0, #4294967295
 802d38c:	b01d      	add	sp, #116	; 0x74
 802d38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d392:	89ab      	ldrh	r3, [r5, #12]
 802d394:	0598      	lsls	r0, r3, #22
 802d396:	d4f7      	bmi.n	802d388 <_vfiprintf_r+0x44>
 802d398:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802d39a:	f7ff feef 	bl	802d17c <__retarget_lock_release_recursive>
 802d39e:	e7f3      	b.n	802d388 <_vfiprintf_r+0x44>
 802d3a0:	2300      	movs	r3, #0
 802d3a2:	9309      	str	r3, [sp, #36]	; 0x24
 802d3a4:	2320      	movs	r3, #32
 802d3a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802d3aa:	f8cd 800c 	str.w	r8, [sp, #12]
 802d3ae:	2330      	movs	r3, #48	; 0x30
 802d3b0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 802d564 <_vfiprintf_r+0x220>
 802d3b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802d3b8:	f04f 0901 	mov.w	r9, #1
 802d3bc:	4623      	mov	r3, r4
 802d3be:	469a      	mov	sl, r3
 802d3c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 802d3c4:	b10a      	cbz	r2, 802d3ca <_vfiprintf_r+0x86>
 802d3c6:	2a25      	cmp	r2, #37	; 0x25
 802d3c8:	d1f9      	bne.n	802d3be <_vfiprintf_r+0x7a>
 802d3ca:	ebba 0b04 	subs.w	fp, sl, r4
 802d3ce:	d00b      	beq.n	802d3e8 <_vfiprintf_r+0xa4>
 802d3d0:	465b      	mov	r3, fp
 802d3d2:	4622      	mov	r2, r4
 802d3d4:	4629      	mov	r1, r5
 802d3d6:	4630      	mov	r0, r6
 802d3d8:	f7ff ffa1 	bl	802d31e <__sfputs_r>
 802d3dc:	3001      	adds	r0, #1
 802d3de:	f000 80a9 	beq.w	802d534 <_vfiprintf_r+0x1f0>
 802d3e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802d3e4:	445a      	add	r2, fp
 802d3e6:	9209      	str	r2, [sp, #36]	; 0x24
 802d3e8:	f89a 3000 	ldrb.w	r3, [sl]
 802d3ec:	2b00      	cmp	r3, #0
 802d3ee:	f000 80a1 	beq.w	802d534 <_vfiprintf_r+0x1f0>
 802d3f2:	2300      	movs	r3, #0
 802d3f4:	f04f 32ff 	mov.w	r2, #4294967295
 802d3f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802d3fc:	f10a 0a01 	add.w	sl, sl, #1
 802d400:	9304      	str	r3, [sp, #16]
 802d402:	9307      	str	r3, [sp, #28]
 802d404:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802d408:	931a      	str	r3, [sp, #104]	; 0x68
 802d40a:	4654      	mov	r4, sl
 802d40c:	2205      	movs	r2, #5
 802d40e:	f814 1b01 	ldrb.w	r1, [r4], #1
 802d412:	4854      	ldr	r0, [pc, #336]	; (802d564 <_vfiprintf_r+0x220>)
 802d414:	f7d2 fef4 	bl	8000200 <memchr>
 802d418:	9a04      	ldr	r2, [sp, #16]
 802d41a:	b9d8      	cbnz	r0, 802d454 <_vfiprintf_r+0x110>
 802d41c:	06d1      	lsls	r1, r2, #27
 802d41e:	bf44      	itt	mi
 802d420:	2320      	movmi	r3, #32
 802d422:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802d426:	0713      	lsls	r3, r2, #28
 802d428:	bf44      	itt	mi
 802d42a:	232b      	movmi	r3, #43	; 0x2b
 802d42c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802d430:	f89a 3000 	ldrb.w	r3, [sl]
 802d434:	2b2a      	cmp	r3, #42	; 0x2a
 802d436:	d015      	beq.n	802d464 <_vfiprintf_r+0x120>
 802d438:	9a07      	ldr	r2, [sp, #28]
 802d43a:	4654      	mov	r4, sl
 802d43c:	2000      	movs	r0, #0
 802d43e:	f04f 0c0a 	mov.w	ip, #10
 802d442:	4621      	mov	r1, r4
 802d444:	f811 3b01 	ldrb.w	r3, [r1], #1
 802d448:	3b30      	subs	r3, #48	; 0x30
 802d44a:	2b09      	cmp	r3, #9
 802d44c:	d94d      	bls.n	802d4ea <_vfiprintf_r+0x1a6>
 802d44e:	b1b0      	cbz	r0, 802d47e <_vfiprintf_r+0x13a>
 802d450:	9207      	str	r2, [sp, #28]
 802d452:	e014      	b.n	802d47e <_vfiprintf_r+0x13a>
 802d454:	eba0 0308 	sub.w	r3, r0, r8
 802d458:	fa09 f303 	lsl.w	r3, r9, r3
 802d45c:	4313      	orrs	r3, r2
 802d45e:	9304      	str	r3, [sp, #16]
 802d460:	46a2      	mov	sl, r4
 802d462:	e7d2      	b.n	802d40a <_vfiprintf_r+0xc6>
 802d464:	9b03      	ldr	r3, [sp, #12]
 802d466:	1d19      	adds	r1, r3, #4
 802d468:	681b      	ldr	r3, [r3, #0]
 802d46a:	9103      	str	r1, [sp, #12]
 802d46c:	2b00      	cmp	r3, #0
 802d46e:	bfbb      	ittet	lt
 802d470:	425b      	neglt	r3, r3
 802d472:	f042 0202 	orrlt.w	r2, r2, #2
 802d476:	9307      	strge	r3, [sp, #28]
 802d478:	9307      	strlt	r3, [sp, #28]
 802d47a:	bfb8      	it	lt
 802d47c:	9204      	strlt	r2, [sp, #16]
 802d47e:	7823      	ldrb	r3, [r4, #0]
 802d480:	2b2e      	cmp	r3, #46	; 0x2e
 802d482:	d10c      	bne.n	802d49e <_vfiprintf_r+0x15a>
 802d484:	7863      	ldrb	r3, [r4, #1]
 802d486:	2b2a      	cmp	r3, #42	; 0x2a
 802d488:	d134      	bne.n	802d4f4 <_vfiprintf_r+0x1b0>
 802d48a:	9b03      	ldr	r3, [sp, #12]
 802d48c:	1d1a      	adds	r2, r3, #4
 802d48e:	681b      	ldr	r3, [r3, #0]
 802d490:	9203      	str	r2, [sp, #12]
 802d492:	2b00      	cmp	r3, #0
 802d494:	bfb8      	it	lt
 802d496:	f04f 33ff 	movlt.w	r3, #4294967295
 802d49a:	3402      	adds	r4, #2
 802d49c:	9305      	str	r3, [sp, #20]
 802d49e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 802d574 <_vfiprintf_r+0x230>
 802d4a2:	7821      	ldrb	r1, [r4, #0]
 802d4a4:	2203      	movs	r2, #3
 802d4a6:	4650      	mov	r0, sl
 802d4a8:	f7d2 feaa 	bl	8000200 <memchr>
 802d4ac:	b138      	cbz	r0, 802d4be <_vfiprintf_r+0x17a>
 802d4ae:	9b04      	ldr	r3, [sp, #16]
 802d4b0:	eba0 000a 	sub.w	r0, r0, sl
 802d4b4:	2240      	movs	r2, #64	; 0x40
 802d4b6:	4082      	lsls	r2, r0
 802d4b8:	4313      	orrs	r3, r2
 802d4ba:	3401      	adds	r4, #1
 802d4bc:	9304      	str	r3, [sp, #16]
 802d4be:	f814 1b01 	ldrb.w	r1, [r4], #1
 802d4c2:	4829      	ldr	r0, [pc, #164]	; (802d568 <_vfiprintf_r+0x224>)
 802d4c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802d4c8:	2206      	movs	r2, #6
 802d4ca:	f7d2 fe99 	bl	8000200 <memchr>
 802d4ce:	2800      	cmp	r0, #0
 802d4d0:	d03f      	beq.n	802d552 <_vfiprintf_r+0x20e>
 802d4d2:	4b26      	ldr	r3, [pc, #152]	; (802d56c <_vfiprintf_r+0x228>)
 802d4d4:	bb1b      	cbnz	r3, 802d51e <_vfiprintf_r+0x1da>
 802d4d6:	9b03      	ldr	r3, [sp, #12]
 802d4d8:	3307      	adds	r3, #7
 802d4da:	f023 0307 	bic.w	r3, r3, #7
 802d4de:	3308      	adds	r3, #8
 802d4e0:	9303      	str	r3, [sp, #12]
 802d4e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802d4e4:	443b      	add	r3, r7
 802d4e6:	9309      	str	r3, [sp, #36]	; 0x24
 802d4e8:	e768      	b.n	802d3bc <_vfiprintf_r+0x78>
 802d4ea:	fb0c 3202 	mla	r2, ip, r2, r3
 802d4ee:	460c      	mov	r4, r1
 802d4f0:	2001      	movs	r0, #1
 802d4f2:	e7a6      	b.n	802d442 <_vfiprintf_r+0xfe>
 802d4f4:	2300      	movs	r3, #0
 802d4f6:	3401      	adds	r4, #1
 802d4f8:	9305      	str	r3, [sp, #20]
 802d4fa:	4619      	mov	r1, r3
 802d4fc:	f04f 0c0a 	mov.w	ip, #10
 802d500:	4620      	mov	r0, r4
 802d502:	f810 2b01 	ldrb.w	r2, [r0], #1
 802d506:	3a30      	subs	r2, #48	; 0x30
 802d508:	2a09      	cmp	r2, #9
 802d50a:	d903      	bls.n	802d514 <_vfiprintf_r+0x1d0>
 802d50c:	2b00      	cmp	r3, #0
 802d50e:	d0c6      	beq.n	802d49e <_vfiprintf_r+0x15a>
 802d510:	9105      	str	r1, [sp, #20]
 802d512:	e7c4      	b.n	802d49e <_vfiprintf_r+0x15a>
 802d514:	fb0c 2101 	mla	r1, ip, r1, r2
 802d518:	4604      	mov	r4, r0
 802d51a:	2301      	movs	r3, #1
 802d51c:	e7f0      	b.n	802d500 <_vfiprintf_r+0x1bc>
 802d51e:	ab03      	add	r3, sp, #12
 802d520:	9300      	str	r3, [sp, #0]
 802d522:	462a      	mov	r2, r5
 802d524:	4b12      	ldr	r3, [pc, #72]	; (802d570 <_vfiprintf_r+0x22c>)
 802d526:	a904      	add	r1, sp, #16
 802d528:	4630      	mov	r0, r6
 802d52a:	f3af 8000 	nop.w
 802d52e:	4607      	mov	r7, r0
 802d530:	1c78      	adds	r0, r7, #1
 802d532:	d1d6      	bne.n	802d4e2 <_vfiprintf_r+0x19e>
 802d534:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802d536:	07d9      	lsls	r1, r3, #31
 802d538:	d405      	bmi.n	802d546 <_vfiprintf_r+0x202>
 802d53a:	89ab      	ldrh	r3, [r5, #12]
 802d53c:	059a      	lsls	r2, r3, #22
 802d53e:	d402      	bmi.n	802d546 <_vfiprintf_r+0x202>
 802d540:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802d542:	f7ff fe1b 	bl	802d17c <__retarget_lock_release_recursive>
 802d546:	89ab      	ldrh	r3, [r5, #12]
 802d548:	065b      	lsls	r3, r3, #25
 802d54a:	f53f af1d 	bmi.w	802d388 <_vfiprintf_r+0x44>
 802d54e:	9809      	ldr	r0, [sp, #36]	; 0x24
 802d550:	e71c      	b.n	802d38c <_vfiprintf_r+0x48>
 802d552:	ab03      	add	r3, sp, #12
 802d554:	9300      	str	r3, [sp, #0]
 802d556:	462a      	mov	r2, r5
 802d558:	4b05      	ldr	r3, [pc, #20]	; (802d570 <_vfiprintf_r+0x22c>)
 802d55a:	a904      	add	r1, sp, #16
 802d55c:	4630      	mov	r0, r6
 802d55e:	f000 f879 	bl	802d654 <_printf_i>
 802d562:	e7e4      	b.n	802d52e <_vfiprintf_r+0x1ea>
 802d564:	0802ff74 	.word	0x0802ff74
 802d568:	0802ff7e 	.word	0x0802ff7e
 802d56c:	00000000 	.word	0x00000000
 802d570:	0802d31f 	.word	0x0802d31f
 802d574:	0802ff7a 	.word	0x0802ff7a

0802d578 <_printf_common>:
 802d578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802d57c:	4616      	mov	r6, r2
 802d57e:	4699      	mov	r9, r3
 802d580:	688a      	ldr	r2, [r1, #8]
 802d582:	690b      	ldr	r3, [r1, #16]
 802d584:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802d588:	4293      	cmp	r3, r2
 802d58a:	bfb8      	it	lt
 802d58c:	4613      	movlt	r3, r2
 802d58e:	6033      	str	r3, [r6, #0]
 802d590:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802d594:	4607      	mov	r7, r0
 802d596:	460c      	mov	r4, r1
 802d598:	b10a      	cbz	r2, 802d59e <_printf_common+0x26>
 802d59a:	3301      	adds	r3, #1
 802d59c:	6033      	str	r3, [r6, #0]
 802d59e:	6823      	ldr	r3, [r4, #0]
 802d5a0:	0699      	lsls	r1, r3, #26
 802d5a2:	bf42      	ittt	mi
 802d5a4:	6833      	ldrmi	r3, [r6, #0]
 802d5a6:	3302      	addmi	r3, #2
 802d5a8:	6033      	strmi	r3, [r6, #0]
 802d5aa:	6825      	ldr	r5, [r4, #0]
 802d5ac:	f015 0506 	ands.w	r5, r5, #6
 802d5b0:	d106      	bne.n	802d5c0 <_printf_common+0x48>
 802d5b2:	f104 0a19 	add.w	sl, r4, #25
 802d5b6:	68e3      	ldr	r3, [r4, #12]
 802d5b8:	6832      	ldr	r2, [r6, #0]
 802d5ba:	1a9b      	subs	r3, r3, r2
 802d5bc:	42ab      	cmp	r3, r5
 802d5be:	dc26      	bgt.n	802d60e <_printf_common+0x96>
 802d5c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802d5c4:	1e13      	subs	r3, r2, #0
 802d5c6:	6822      	ldr	r2, [r4, #0]
 802d5c8:	bf18      	it	ne
 802d5ca:	2301      	movne	r3, #1
 802d5cc:	0692      	lsls	r2, r2, #26
 802d5ce:	d42b      	bmi.n	802d628 <_printf_common+0xb0>
 802d5d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802d5d4:	4649      	mov	r1, r9
 802d5d6:	4638      	mov	r0, r7
 802d5d8:	47c0      	blx	r8
 802d5da:	3001      	adds	r0, #1
 802d5dc:	d01e      	beq.n	802d61c <_printf_common+0xa4>
 802d5de:	6823      	ldr	r3, [r4, #0]
 802d5e0:	6922      	ldr	r2, [r4, #16]
 802d5e2:	f003 0306 	and.w	r3, r3, #6
 802d5e6:	2b04      	cmp	r3, #4
 802d5e8:	bf02      	ittt	eq
 802d5ea:	68e5      	ldreq	r5, [r4, #12]
 802d5ec:	6833      	ldreq	r3, [r6, #0]
 802d5ee:	1aed      	subeq	r5, r5, r3
 802d5f0:	68a3      	ldr	r3, [r4, #8]
 802d5f2:	bf0c      	ite	eq
 802d5f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802d5f8:	2500      	movne	r5, #0
 802d5fa:	4293      	cmp	r3, r2
 802d5fc:	bfc4      	itt	gt
 802d5fe:	1a9b      	subgt	r3, r3, r2
 802d600:	18ed      	addgt	r5, r5, r3
 802d602:	2600      	movs	r6, #0
 802d604:	341a      	adds	r4, #26
 802d606:	42b5      	cmp	r5, r6
 802d608:	d11a      	bne.n	802d640 <_printf_common+0xc8>
 802d60a:	2000      	movs	r0, #0
 802d60c:	e008      	b.n	802d620 <_printf_common+0xa8>
 802d60e:	2301      	movs	r3, #1
 802d610:	4652      	mov	r2, sl
 802d612:	4649      	mov	r1, r9
 802d614:	4638      	mov	r0, r7
 802d616:	47c0      	blx	r8
 802d618:	3001      	adds	r0, #1
 802d61a:	d103      	bne.n	802d624 <_printf_common+0xac>
 802d61c:	f04f 30ff 	mov.w	r0, #4294967295
 802d620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d624:	3501      	adds	r5, #1
 802d626:	e7c6      	b.n	802d5b6 <_printf_common+0x3e>
 802d628:	18e1      	adds	r1, r4, r3
 802d62a:	1c5a      	adds	r2, r3, #1
 802d62c:	2030      	movs	r0, #48	; 0x30
 802d62e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802d632:	4422      	add	r2, r4
 802d634:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802d638:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802d63c:	3302      	adds	r3, #2
 802d63e:	e7c7      	b.n	802d5d0 <_printf_common+0x58>
 802d640:	2301      	movs	r3, #1
 802d642:	4622      	mov	r2, r4
 802d644:	4649      	mov	r1, r9
 802d646:	4638      	mov	r0, r7
 802d648:	47c0      	blx	r8
 802d64a:	3001      	adds	r0, #1
 802d64c:	d0e6      	beq.n	802d61c <_printf_common+0xa4>
 802d64e:	3601      	adds	r6, #1
 802d650:	e7d9      	b.n	802d606 <_printf_common+0x8e>
	...

0802d654 <_printf_i>:
 802d654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802d658:	7e0f      	ldrb	r7, [r1, #24]
 802d65a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802d65c:	2f78      	cmp	r7, #120	; 0x78
 802d65e:	4691      	mov	r9, r2
 802d660:	4680      	mov	r8, r0
 802d662:	460c      	mov	r4, r1
 802d664:	469a      	mov	sl, r3
 802d666:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802d66a:	d807      	bhi.n	802d67c <_printf_i+0x28>
 802d66c:	2f62      	cmp	r7, #98	; 0x62
 802d66e:	d80a      	bhi.n	802d686 <_printf_i+0x32>
 802d670:	2f00      	cmp	r7, #0
 802d672:	f000 80d4 	beq.w	802d81e <_printf_i+0x1ca>
 802d676:	2f58      	cmp	r7, #88	; 0x58
 802d678:	f000 80c0 	beq.w	802d7fc <_printf_i+0x1a8>
 802d67c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802d680:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802d684:	e03a      	b.n	802d6fc <_printf_i+0xa8>
 802d686:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802d68a:	2b15      	cmp	r3, #21
 802d68c:	d8f6      	bhi.n	802d67c <_printf_i+0x28>
 802d68e:	a101      	add	r1, pc, #4	; (adr r1, 802d694 <_printf_i+0x40>)
 802d690:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802d694:	0802d6ed 	.word	0x0802d6ed
 802d698:	0802d701 	.word	0x0802d701
 802d69c:	0802d67d 	.word	0x0802d67d
 802d6a0:	0802d67d 	.word	0x0802d67d
 802d6a4:	0802d67d 	.word	0x0802d67d
 802d6a8:	0802d67d 	.word	0x0802d67d
 802d6ac:	0802d701 	.word	0x0802d701
 802d6b0:	0802d67d 	.word	0x0802d67d
 802d6b4:	0802d67d 	.word	0x0802d67d
 802d6b8:	0802d67d 	.word	0x0802d67d
 802d6bc:	0802d67d 	.word	0x0802d67d
 802d6c0:	0802d805 	.word	0x0802d805
 802d6c4:	0802d72d 	.word	0x0802d72d
 802d6c8:	0802d7bf 	.word	0x0802d7bf
 802d6cc:	0802d67d 	.word	0x0802d67d
 802d6d0:	0802d67d 	.word	0x0802d67d
 802d6d4:	0802d827 	.word	0x0802d827
 802d6d8:	0802d67d 	.word	0x0802d67d
 802d6dc:	0802d72d 	.word	0x0802d72d
 802d6e0:	0802d67d 	.word	0x0802d67d
 802d6e4:	0802d67d 	.word	0x0802d67d
 802d6e8:	0802d7c7 	.word	0x0802d7c7
 802d6ec:	682b      	ldr	r3, [r5, #0]
 802d6ee:	1d1a      	adds	r2, r3, #4
 802d6f0:	681b      	ldr	r3, [r3, #0]
 802d6f2:	602a      	str	r2, [r5, #0]
 802d6f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802d6f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802d6fc:	2301      	movs	r3, #1
 802d6fe:	e09f      	b.n	802d840 <_printf_i+0x1ec>
 802d700:	6820      	ldr	r0, [r4, #0]
 802d702:	682b      	ldr	r3, [r5, #0]
 802d704:	0607      	lsls	r7, r0, #24
 802d706:	f103 0104 	add.w	r1, r3, #4
 802d70a:	6029      	str	r1, [r5, #0]
 802d70c:	d501      	bpl.n	802d712 <_printf_i+0xbe>
 802d70e:	681e      	ldr	r6, [r3, #0]
 802d710:	e003      	b.n	802d71a <_printf_i+0xc6>
 802d712:	0646      	lsls	r6, r0, #25
 802d714:	d5fb      	bpl.n	802d70e <_printf_i+0xba>
 802d716:	f9b3 6000 	ldrsh.w	r6, [r3]
 802d71a:	2e00      	cmp	r6, #0
 802d71c:	da03      	bge.n	802d726 <_printf_i+0xd2>
 802d71e:	232d      	movs	r3, #45	; 0x2d
 802d720:	4276      	negs	r6, r6
 802d722:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802d726:	485a      	ldr	r0, [pc, #360]	; (802d890 <_printf_i+0x23c>)
 802d728:	230a      	movs	r3, #10
 802d72a:	e012      	b.n	802d752 <_printf_i+0xfe>
 802d72c:	682b      	ldr	r3, [r5, #0]
 802d72e:	6820      	ldr	r0, [r4, #0]
 802d730:	1d19      	adds	r1, r3, #4
 802d732:	6029      	str	r1, [r5, #0]
 802d734:	0605      	lsls	r5, r0, #24
 802d736:	d501      	bpl.n	802d73c <_printf_i+0xe8>
 802d738:	681e      	ldr	r6, [r3, #0]
 802d73a:	e002      	b.n	802d742 <_printf_i+0xee>
 802d73c:	0641      	lsls	r1, r0, #25
 802d73e:	d5fb      	bpl.n	802d738 <_printf_i+0xe4>
 802d740:	881e      	ldrh	r6, [r3, #0]
 802d742:	4853      	ldr	r0, [pc, #332]	; (802d890 <_printf_i+0x23c>)
 802d744:	2f6f      	cmp	r7, #111	; 0x6f
 802d746:	bf0c      	ite	eq
 802d748:	2308      	moveq	r3, #8
 802d74a:	230a      	movne	r3, #10
 802d74c:	2100      	movs	r1, #0
 802d74e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802d752:	6865      	ldr	r5, [r4, #4]
 802d754:	60a5      	str	r5, [r4, #8]
 802d756:	2d00      	cmp	r5, #0
 802d758:	bfa2      	ittt	ge
 802d75a:	6821      	ldrge	r1, [r4, #0]
 802d75c:	f021 0104 	bicge.w	r1, r1, #4
 802d760:	6021      	strge	r1, [r4, #0]
 802d762:	b90e      	cbnz	r6, 802d768 <_printf_i+0x114>
 802d764:	2d00      	cmp	r5, #0
 802d766:	d04b      	beq.n	802d800 <_printf_i+0x1ac>
 802d768:	4615      	mov	r5, r2
 802d76a:	fbb6 f1f3 	udiv	r1, r6, r3
 802d76e:	fb03 6711 	mls	r7, r3, r1, r6
 802d772:	5dc7      	ldrb	r7, [r0, r7]
 802d774:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802d778:	4637      	mov	r7, r6
 802d77a:	42bb      	cmp	r3, r7
 802d77c:	460e      	mov	r6, r1
 802d77e:	d9f4      	bls.n	802d76a <_printf_i+0x116>
 802d780:	2b08      	cmp	r3, #8
 802d782:	d10b      	bne.n	802d79c <_printf_i+0x148>
 802d784:	6823      	ldr	r3, [r4, #0]
 802d786:	07de      	lsls	r6, r3, #31
 802d788:	d508      	bpl.n	802d79c <_printf_i+0x148>
 802d78a:	6923      	ldr	r3, [r4, #16]
 802d78c:	6861      	ldr	r1, [r4, #4]
 802d78e:	4299      	cmp	r1, r3
 802d790:	bfde      	ittt	le
 802d792:	2330      	movle	r3, #48	; 0x30
 802d794:	f805 3c01 	strble.w	r3, [r5, #-1]
 802d798:	f105 35ff 	addle.w	r5, r5, #4294967295
 802d79c:	1b52      	subs	r2, r2, r5
 802d79e:	6122      	str	r2, [r4, #16]
 802d7a0:	f8cd a000 	str.w	sl, [sp]
 802d7a4:	464b      	mov	r3, r9
 802d7a6:	aa03      	add	r2, sp, #12
 802d7a8:	4621      	mov	r1, r4
 802d7aa:	4640      	mov	r0, r8
 802d7ac:	f7ff fee4 	bl	802d578 <_printf_common>
 802d7b0:	3001      	adds	r0, #1
 802d7b2:	d14a      	bne.n	802d84a <_printf_i+0x1f6>
 802d7b4:	f04f 30ff 	mov.w	r0, #4294967295
 802d7b8:	b004      	add	sp, #16
 802d7ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d7be:	6823      	ldr	r3, [r4, #0]
 802d7c0:	f043 0320 	orr.w	r3, r3, #32
 802d7c4:	6023      	str	r3, [r4, #0]
 802d7c6:	4833      	ldr	r0, [pc, #204]	; (802d894 <_printf_i+0x240>)
 802d7c8:	2778      	movs	r7, #120	; 0x78
 802d7ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802d7ce:	6823      	ldr	r3, [r4, #0]
 802d7d0:	6829      	ldr	r1, [r5, #0]
 802d7d2:	061f      	lsls	r7, r3, #24
 802d7d4:	f851 6b04 	ldr.w	r6, [r1], #4
 802d7d8:	d402      	bmi.n	802d7e0 <_printf_i+0x18c>
 802d7da:	065f      	lsls	r7, r3, #25
 802d7dc:	bf48      	it	mi
 802d7de:	b2b6      	uxthmi	r6, r6
 802d7e0:	07df      	lsls	r7, r3, #31
 802d7e2:	bf48      	it	mi
 802d7e4:	f043 0320 	orrmi.w	r3, r3, #32
 802d7e8:	6029      	str	r1, [r5, #0]
 802d7ea:	bf48      	it	mi
 802d7ec:	6023      	strmi	r3, [r4, #0]
 802d7ee:	b91e      	cbnz	r6, 802d7f8 <_printf_i+0x1a4>
 802d7f0:	6823      	ldr	r3, [r4, #0]
 802d7f2:	f023 0320 	bic.w	r3, r3, #32
 802d7f6:	6023      	str	r3, [r4, #0]
 802d7f8:	2310      	movs	r3, #16
 802d7fa:	e7a7      	b.n	802d74c <_printf_i+0xf8>
 802d7fc:	4824      	ldr	r0, [pc, #144]	; (802d890 <_printf_i+0x23c>)
 802d7fe:	e7e4      	b.n	802d7ca <_printf_i+0x176>
 802d800:	4615      	mov	r5, r2
 802d802:	e7bd      	b.n	802d780 <_printf_i+0x12c>
 802d804:	682b      	ldr	r3, [r5, #0]
 802d806:	6826      	ldr	r6, [r4, #0]
 802d808:	6961      	ldr	r1, [r4, #20]
 802d80a:	1d18      	adds	r0, r3, #4
 802d80c:	6028      	str	r0, [r5, #0]
 802d80e:	0635      	lsls	r5, r6, #24
 802d810:	681b      	ldr	r3, [r3, #0]
 802d812:	d501      	bpl.n	802d818 <_printf_i+0x1c4>
 802d814:	6019      	str	r1, [r3, #0]
 802d816:	e002      	b.n	802d81e <_printf_i+0x1ca>
 802d818:	0670      	lsls	r0, r6, #25
 802d81a:	d5fb      	bpl.n	802d814 <_printf_i+0x1c0>
 802d81c:	8019      	strh	r1, [r3, #0]
 802d81e:	2300      	movs	r3, #0
 802d820:	6123      	str	r3, [r4, #16]
 802d822:	4615      	mov	r5, r2
 802d824:	e7bc      	b.n	802d7a0 <_printf_i+0x14c>
 802d826:	682b      	ldr	r3, [r5, #0]
 802d828:	1d1a      	adds	r2, r3, #4
 802d82a:	602a      	str	r2, [r5, #0]
 802d82c:	681d      	ldr	r5, [r3, #0]
 802d82e:	6862      	ldr	r2, [r4, #4]
 802d830:	2100      	movs	r1, #0
 802d832:	4628      	mov	r0, r5
 802d834:	f7d2 fce4 	bl	8000200 <memchr>
 802d838:	b108      	cbz	r0, 802d83e <_printf_i+0x1ea>
 802d83a:	1b40      	subs	r0, r0, r5
 802d83c:	6060      	str	r0, [r4, #4]
 802d83e:	6863      	ldr	r3, [r4, #4]
 802d840:	6123      	str	r3, [r4, #16]
 802d842:	2300      	movs	r3, #0
 802d844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802d848:	e7aa      	b.n	802d7a0 <_printf_i+0x14c>
 802d84a:	6923      	ldr	r3, [r4, #16]
 802d84c:	462a      	mov	r2, r5
 802d84e:	4649      	mov	r1, r9
 802d850:	4640      	mov	r0, r8
 802d852:	47d0      	blx	sl
 802d854:	3001      	adds	r0, #1
 802d856:	d0ad      	beq.n	802d7b4 <_printf_i+0x160>
 802d858:	6823      	ldr	r3, [r4, #0]
 802d85a:	079b      	lsls	r3, r3, #30
 802d85c:	d413      	bmi.n	802d886 <_printf_i+0x232>
 802d85e:	68e0      	ldr	r0, [r4, #12]
 802d860:	9b03      	ldr	r3, [sp, #12]
 802d862:	4298      	cmp	r0, r3
 802d864:	bfb8      	it	lt
 802d866:	4618      	movlt	r0, r3
 802d868:	e7a6      	b.n	802d7b8 <_printf_i+0x164>
 802d86a:	2301      	movs	r3, #1
 802d86c:	4632      	mov	r2, r6
 802d86e:	4649      	mov	r1, r9
 802d870:	4640      	mov	r0, r8
 802d872:	47d0      	blx	sl
 802d874:	3001      	adds	r0, #1
 802d876:	d09d      	beq.n	802d7b4 <_printf_i+0x160>
 802d878:	3501      	adds	r5, #1
 802d87a:	68e3      	ldr	r3, [r4, #12]
 802d87c:	9903      	ldr	r1, [sp, #12]
 802d87e:	1a5b      	subs	r3, r3, r1
 802d880:	42ab      	cmp	r3, r5
 802d882:	dcf2      	bgt.n	802d86a <_printf_i+0x216>
 802d884:	e7eb      	b.n	802d85e <_printf_i+0x20a>
 802d886:	2500      	movs	r5, #0
 802d888:	f104 0619 	add.w	r6, r4, #25
 802d88c:	e7f5      	b.n	802d87a <_printf_i+0x226>
 802d88e:	bf00      	nop
 802d890:	0802ff85 	.word	0x0802ff85
 802d894:	0802ff96 	.word	0x0802ff96

0802d898 <__sflush_r>:
 802d898:	898a      	ldrh	r2, [r1, #12]
 802d89a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d89e:	4605      	mov	r5, r0
 802d8a0:	0710      	lsls	r0, r2, #28
 802d8a2:	460c      	mov	r4, r1
 802d8a4:	d458      	bmi.n	802d958 <__sflush_r+0xc0>
 802d8a6:	684b      	ldr	r3, [r1, #4]
 802d8a8:	2b00      	cmp	r3, #0
 802d8aa:	dc05      	bgt.n	802d8b8 <__sflush_r+0x20>
 802d8ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802d8ae:	2b00      	cmp	r3, #0
 802d8b0:	dc02      	bgt.n	802d8b8 <__sflush_r+0x20>
 802d8b2:	2000      	movs	r0, #0
 802d8b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d8b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802d8ba:	2e00      	cmp	r6, #0
 802d8bc:	d0f9      	beq.n	802d8b2 <__sflush_r+0x1a>
 802d8be:	2300      	movs	r3, #0
 802d8c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802d8c4:	682f      	ldr	r7, [r5, #0]
 802d8c6:	6a21      	ldr	r1, [r4, #32]
 802d8c8:	602b      	str	r3, [r5, #0]
 802d8ca:	d032      	beq.n	802d932 <__sflush_r+0x9a>
 802d8cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802d8ce:	89a3      	ldrh	r3, [r4, #12]
 802d8d0:	075a      	lsls	r2, r3, #29
 802d8d2:	d505      	bpl.n	802d8e0 <__sflush_r+0x48>
 802d8d4:	6863      	ldr	r3, [r4, #4]
 802d8d6:	1ac0      	subs	r0, r0, r3
 802d8d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802d8da:	b10b      	cbz	r3, 802d8e0 <__sflush_r+0x48>
 802d8dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802d8de:	1ac0      	subs	r0, r0, r3
 802d8e0:	2300      	movs	r3, #0
 802d8e2:	4602      	mov	r2, r0
 802d8e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802d8e6:	6a21      	ldr	r1, [r4, #32]
 802d8e8:	4628      	mov	r0, r5
 802d8ea:	47b0      	blx	r6
 802d8ec:	1c43      	adds	r3, r0, #1
 802d8ee:	89a3      	ldrh	r3, [r4, #12]
 802d8f0:	d106      	bne.n	802d900 <__sflush_r+0x68>
 802d8f2:	6829      	ldr	r1, [r5, #0]
 802d8f4:	291d      	cmp	r1, #29
 802d8f6:	d82b      	bhi.n	802d950 <__sflush_r+0xb8>
 802d8f8:	4a29      	ldr	r2, [pc, #164]	; (802d9a0 <__sflush_r+0x108>)
 802d8fa:	410a      	asrs	r2, r1
 802d8fc:	07d6      	lsls	r6, r2, #31
 802d8fe:	d427      	bmi.n	802d950 <__sflush_r+0xb8>
 802d900:	2200      	movs	r2, #0
 802d902:	6062      	str	r2, [r4, #4]
 802d904:	04d9      	lsls	r1, r3, #19
 802d906:	6922      	ldr	r2, [r4, #16]
 802d908:	6022      	str	r2, [r4, #0]
 802d90a:	d504      	bpl.n	802d916 <__sflush_r+0x7e>
 802d90c:	1c42      	adds	r2, r0, #1
 802d90e:	d101      	bne.n	802d914 <__sflush_r+0x7c>
 802d910:	682b      	ldr	r3, [r5, #0]
 802d912:	b903      	cbnz	r3, 802d916 <__sflush_r+0x7e>
 802d914:	6560      	str	r0, [r4, #84]	; 0x54
 802d916:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802d918:	602f      	str	r7, [r5, #0]
 802d91a:	2900      	cmp	r1, #0
 802d91c:	d0c9      	beq.n	802d8b2 <__sflush_r+0x1a>
 802d91e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802d922:	4299      	cmp	r1, r3
 802d924:	d002      	beq.n	802d92c <__sflush_r+0x94>
 802d926:	4628      	mov	r0, r5
 802d928:	f7ff fc96 	bl	802d258 <_free_r>
 802d92c:	2000      	movs	r0, #0
 802d92e:	6360      	str	r0, [r4, #52]	; 0x34
 802d930:	e7c0      	b.n	802d8b4 <__sflush_r+0x1c>
 802d932:	2301      	movs	r3, #1
 802d934:	4628      	mov	r0, r5
 802d936:	47b0      	blx	r6
 802d938:	1c41      	adds	r1, r0, #1
 802d93a:	d1c8      	bne.n	802d8ce <__sflush_r+0x36>
 802d93c:	682b      	ldr	r3, [r5, #0]
 802d93e:	2b00      	cmp	r3, #0
 802d940:	d0c5      	beq.n	802d8ce <__sflush_r+0x36>
 802d942:	2b1d      	cmp	r3, #29
 802d944:	d001      	beq.n	802d94a <__sflush_r+0xb2>
 802d946:	2b16      	cmp	r3, #22
 802d948:	d101      	bne.n	802d94e <__sflush_r+0xb6>
 802d94a:	602f      	str	r7, [r5, #0]
 802d94c:	e7b1      	b.n	802d8b2 <__sflush_r+0x1a>
 802d94e:	89a3      	ldrh	r3, [r4, #12]
 802d950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802d954:	81a3      	strh	r3, [r4, #12]
 802d956:	e7ad      	b.n	802d8b4 <__sflush_r+0x1c>
 802d958:	690f      	ldr	r7, [r1, #16]
 802d95a:	2f00      	cmp	r7, #0
 802d95c:	d0a9      	beq.n	802d8b2 <__sflush_r+0x1a>
 802d95e:	0793      	lsls	r3, r2, #30
 802d960:	680e      	ldr	r6, [r1, #0]
 802d962:	bf08      	it	eq
 802d964:	694b      	ldreq	r3, [r1, #20]
 802d966:	600f      	str	r7, [r1, #0]
 802d968:	bf18      	it	ne
 802d96a:	2300      	movne	r3, #0
 802d96c:	eba6 0807 	sub.w	r8, r6, r7
 802d970:	608b      	str	r3, [r1, #8]
 802d972:	f1b8 0f00 	cmp.w	r8, #0
 802d976:	dd9c      	ble.n	802d8b2 <__sflush_r+0x1a>
 802d978:	6a21      	ldr	r1, [r4, #32]
 802d97a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802d97c:	4643      	mov	r3, r8
 802d97e:	463a      	mov	r2, r7
 802d980:	4628      	mov	r0, r5
 802d982:	47b0      	blx	r6
 802d984:	2800      	cmp	r0, #0
 802d986:	dc06      	bgt.n	802d996 <__sflush_r+0xfe>
 802d988:	89a3      	ldrh	r3, [r4, #12]
 802d98a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802d98e:	81a3      	strh	r3, [r4, #12]
 802d990:	f04f 30ff 	mov.w	r0, #4294967295
 802d994:	e78e      	b.n	802d8b4 <__sflush_r+0x1c>
 802d996:	4407      	add	r7, r0
 802d998:	eba8 0800 	sub.w	r8, r8, r0
 802d99c:	e7e9      	b.n	802d972 <__sflush_r+0xda>
 802d99e:	bf00      	nop
 802d9a0:	dfbffffe 	.word	0xdfbffffe

0802d9a4 <_fflush_r>:
 802d9a4:	b538      	push	{r3, r4, r5, lr}
 802d9a6:	690b      	ldr	r3, [r1, #16]
 802d9a8:	4605      	mov	r5, r0
 802d9aa:	460c      	mov	r4, r1
 802d9ac:	b913      	cbnz	r3, 802d9b4 <_fflush_r+0x10>
 802d9ae:	2500      	movs	r5, #0
 802d9b0:	4628      	mov	r0, r5
 802d9b2:	bd38      	pop	{r3, r4, r5, pc}
 802d9b4:	b118      	cbz	r0, 802d9be <_fflush_r+0x1a>
 802d9b6:	6a03      	ldr	r3, [r0, #32]
 802d9b8:	b90b      	cbnz	r3, 802d9be <_fflush_r+0x1a>
 802d9ba:	f7ff fa2f 	bl	802ce1c <__sinit>
 802d9be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802d9c2:	2b00      	cmp	r3, #0
 802d9c4:	d0f3      	beq.n	802d9ae <_fflush_r+0xa>
 802d9c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802d9c8:	07d0      	lsls	r0, r2, #31
 802d9ca:	d404      	bmi.n	802d9d6 <_fflush_r+0x32>
 802d9cc:	0599      	lsls	r1, r3, #22
 802d9ce:	d402      	bmi.n	802d9d6 <_fflush_r+0x32>
 802d9d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802d9d2:	f7ff fbd2 	bl	802d17a <__retarget_lock_acquire_recursive>
 802d9d6:	4628      	mov	r0, r5
 802d9d8:	4621      	mov	r1, r4
 802d9da:	f7ff ff5d 	bl	802d898 <__sflush_r>
 802d9de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802d9e0:	07da      	lsls	r2, r3, #31
 802d9e2:	4605      	mov	r5, r0
 802d9e4:	d4e4      	bmi.n	802d9b0 <_fflush_r+0xc>
 802d9e6:	89a3      	ldrh	r3, [r4, #12]
 802d9e8:	059b      	lsls	r3, r3, #22
 802d9ea:	d4e1      	bmi.n	802d9b0 <_fflush_r+0xc>
 802d9ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802d9ee:	f7ff fbc5 	bl	802d17c <__retarget_lock_release_recursive>
 802d9f2:	e7dd      	b.n	802d9b0 <_fflush_r+0xc>

0802d9f4 <__swbuf_r>:
 802d9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d9f6:	460e      	mov	r6, r1
 802d9f8:	4614      	mov	r4, r2
 802d9fa:	4605      	mov	r5, r0
 802d9fc:	b118      	cbz	r0, 802da06 <__swbuf_r+0x12>
 802d9fe:	6a03      	ldr	r3, [r0, #32]
 802da00:	b90b      	cbnz	r3, 802da06 <__swbuf_r+0x12>
 802da02:	f7ff fa0b 	bl	802ce1c <__sinit>
 802da06:	69a3      	ldr	r3, [r4, #24]
 802da08:	60a3      	str	r3, [r4, #8]
 802da0a:	89a3      	ldrh	r3, [r4, #12]
 802da0c:	071a      	lsls	r2, r3, #28
 802da0e:	d525      	bpl.n	802da5c <__swbuf_r+0x68>
 802da10:	6923      	ldr	r3, [r4, #16]
 802da12:	b31b      	cbz	r3, 802da5c <__swbuf_r+0x68>
 802da14:	6823      	ldr	r3, [r4, #0]
 802da16:	6922      	ldr	r2, [r4, #16]
 802da18:	1a98      	subs	r0, r3, r2
 802da1a:	6963      	ldr	r3, [r4, #20]
 802da1c:	b2f6      	uxtb	r6, r6
 802da1e:	4283      	cmp	r3, r0
 802da20:	4637      	mov	r7, r6
 802da22:	dc04      	bgt.n	802da2e <__swbuf_r+0x3a>
 802da24:	4621      	mov	r1, r4
 802da26:	4628      	mov	r0, r5
 802da28:	f7ff ffbc 	bl	802d9a4 <_fflush_r>
 802da2c:	b9e0      	cbnz	r0, 802da68 <__swbuf_r+0x74>
 802da2e:	68a3      	ldr	r3, [r4, #8]
 802da30:	3b01      	subs	r3, #1
 802da32:	60a3      	str	r3, [r4, #8]
 802da34:	6823      	ldr	r3, [r4, #0]
 802da36:	1c5a      	adds	r2, r3, #1
 802da38:	6022      	str	r2, [r4, #0]
 802da3a:	701e      	strb	r6, [r3, #0]
 802da3c:	6962      	ldr	r2, [r4, #20]
 802da3e:	1c43      	adds	r3, r0, #1
 802da40:	429a      	cmp	r2, r3
 802da42:	d004      	beq.n	802da4e <__swbuf_r+0x5a>
 802da44:	89a3      	ldrh	r3, [r4, #12]
 802da46:	07db      	lsls	r3, r3, #31
 802da48:	d506      	bpl.n	802da58 <__swbuf_r+0x64>
 802da4a:	2e0a      	cmp	r6, #10
 802da4c:	d104      	bne.n	802da58 <__swbuf_r+0x64>
 802da4e:	4621      	mov	r1, r4
 802da50:	4628      	mov	r0, r5
 802da52:	f7ff ffa7 	bl	802d9a4 <_fflush_r>
 802da56:	b938      	cbnz	r0, 802da68 <__swbuf_r+0x74>
 802da58:	4638      	mov	r0, r7
 802da5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802da5c:	4621      	mov	r1, r4
 802da5e:	4628      	mov	r0, r5
 802da60:	f000 f806 	bl	802da70 <__swsetup_r>
 802da64:	2800      	cmp	r0, #0
 802da66:	d0d5      	beq.n	802da14 <__swbuf_r+0x20>
 802da68:	f04f 37ff 	mov.w	r7, #4294967295
 802da6c:	e7f4      	b.n	802da58 <__swbuf_r+0x64>
	...

0802da70 <__swsetup_r>:
 802da70:	b538      	push	{r3, r4, r5, lr}
 802da72:	4b2a      	ldr	r3, [pc, #168]	; (802db1c <__swsetup_r+0xac>)
 802da74:	4605      	mov	r5, r0
 802da76:	6818      	ldr	r0, [r3, #0]
 802da78:	460c      	mov	r4, r1
 802da7a:	b118      	cbz	r0, 802da84 <__swsetup_r+0x14>
 802da7c:	6a03      	ldr	r3, [r0, #32]
 802da7e:	b90b      	cbnz	r3, 802da84 <__swsetup_r+0x14>
 802da80:	f7ff f9cc 	bl	802ce1c <__sinit>
 802da84:	89a3      	ldrh	r3, [r4, #12]
 802da86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802da8a:	0718      	lsls	r0, r3, #28
 802da8c:	d422      	bmi.n	802dad4 <__swsetup_r+0x64>
 802da8e:	06d9      	lsls	r1, r3, #27
 802da90:	d407      	bmi.n	802daa2 <__swsetup_r+0x32>
 802da92:	2309      	movs	r3, #9
 802da94:	602b      	str	r3, [r5, #0]
 802da96:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802da9a:	81a3      	strh	r3, [r4, #12]
 802da9c:	f04f 30ff 	mov.w	r0, #4294967295
 802daa0:	e034      	b.n	802db0c <__swsetup_r+0x9c>
 802daa2:	0758      	lsls	r0, r3, #29
 802daa4:	d512      	bpl.n	802dacc <__swsetup_r+0x5c>
 802daa6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802daa8:	b141      	cbz	r1, 802dabc <__swsetup_r+0x4c>
 802daaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802daae:	4299      	cmp	r1, r3
 802dab0:	d002      	beq.n	802dab8 <__swsetup_r+0x48>
 802dab2:	4628      	mov	r0, r5
 802dab4:	f7ff fbd0 	bl	802d258 <_free_r>
 802dab8:	2300      	movs	r3, #0
 802daba:	6363      	str	r3, [r4, #52]	; 0x34
 802dabc:	89a3      	ldrh	r3, [r4, #12]
 802dabe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802dac2:	81a3      	strh	r3, [r4, #12]
 802dac4:	2300      	movs	r3, #0
 802dac6:	6063      	str	r3, [r4, #4]
 802dac8:	6923      	ldr	r3, [r4, #16]
 802daca:	6023      	str	r3, [r4, #0]
 802dacc:	89a3      	ldrh	r3, [r4, #12]
 802dace:	f043 0308 	orr.w	r3, r3, #8
 802dad2:	81a3      	strh	r3, [r4, #12]
 802dad4:	6923      	ldr	r3, [r4, #16]
 802dad6:	b94b      	cbnz	r3, 802daec <__swsetup_r+0x7c>
 802dad8:	89a3      	ldrh	r3, [r4, #12]
 802dada:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802dade:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802dae2:	d003      	beq.n	802daec <__swsetup_r+0x7c>
 802dae4:	4621      	mov	r1, r4
 802dae6:	4628      	mov	r0, r5
 802dae8:	f000 f840 	bl	802db6c <__smakebuf_r>
 802daec:	89a0      	ldrh	r0, [r4, #12]
 802daee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802daf2:	f010 0301 	ands.w	r3, r0, #1
 802daf6:	d00a      	beq.n	802db0e <__swsetup_r+0x9e>
 802daf8:	2300      	movs	r3, #0
 802dafa:	60a3      	str	r3, [r4, #8]
 802dafc:	6963      	ldr	r3, [r4, #20]
 802dafe:	425b      	negs	r3, r3
 802db00:	61a3      	str	r3, [r4, #24]
 802db02:	6923      	ldr	r3, [r4, #16]
 802db04:	b943      	cbnz	r3, 802db18 <__swsetup_r+0xa8>
 802db06:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802db0a:	d1c4      	bne.n	802da96 <__swsetup_r+0x26>
 802db0c:	bd38      	pop	{r3, r4, r5, pc}
 802db0e:	0781      	lsls	r1, r0, #30
 802db10:	bf58      	it	pl
 802db12:	6963      	ldrpl	r3, [r4, #20]
 802db14:	60a3      	str	r3, [r4, #8]
 802db16:	e7f4      	b.n	802db02 <__swsetup_r+0x92>
 802db18:	2000      	movs	r0, #0
 802db1a:	e7f7      	b.n	802db0c <__swsetup_r+0x9c>
 802db1c:	20000110 	.word	0x20000110

0802db20 <__swhatbuf_r>:
 802db20:	b570      	push	{r4, r5, r6, lr}
 802db22:	460c      	mov	r4, r1
 802db24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802db28:	2900      	cmp	r1, #0
 802db2a:	b096      	sub	sp, #88	; 0x58
 802db2c:	4615      	mov	r5, r2
 802db2e:	461e      	mov	r6, r3
 802db30:	da0d      	bge.n	802db4e <__swhatbuf_r+0x2e>
 802db32:	89a3      	ldrh	r3, [r4, #12]
 802db34:	f013 0f80 	tst.w	r3, #128	; 0x80
 802db38:	f04f 0100 	mov.w	r1, #0
 802db3c:	bf0c      	ite	eq
 802db3e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 802db42:	2340      	movne	r3, #64	; 0x40
 802db44:	2000      	movs	r0, #0
 802db46:	6031      	str	r1, [r6, #0]
 802db48:	602b      	str	r3, [r5, #0]
 802db4a:	b016      	add	sp, #88	; 0x58
 802db4c:	bd70      	pop	{r4, r5, r6, pc}
 802db4e:	466a      	mov	r2, sp
 802db50:	f000 f848 	bl	802dbe4 <_fstat_r>
 802db54:	2800      	cmp	r0, #0
 802db56:	dbec      	blt.n	802db32 <__swhatbuf_r+0x12>
 802db58:	9901      	ldr	r1, [sp, #4]
 802db5a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 802db5e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 802db62:	4259      	negs	r1, r3
 802db64:	4159      	adcs	r1, r3
 802db66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802db6a:	e7eb      	b.n	802db44 <__swhatbuf_r+0x24>

0802db6c <__smakebuf_r>:
 802db6c:	898b      	ldrh	r3, [r1, #12]
 802db6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802db70:	079d      	lsls	r5, r3, #30
 802db72:	4606      	mov	r6, r0
 802db74:	460c      	mov	r4, r1
 802db76:	d507      	bpl.n	802db88 <__smakebuf_r+0x1c>
 802db78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802db7c:	6023      	str	r3, [r4, #0]
 802db7e:	6123      	str	r3, [r4, #16]
 802db80:	2301      	movs	r3, #1
 802db82:	6163      	str	r3, [r4, #20]
 802db84:	b002      	add	sp, #8
 802db86:	bd70      	pop	{r4, r5, r6, pc}
 802db88:	ab01      	add	r3, sp, #4
 802db8a:	466a      	mov	r2, sp
 802db8c:	f7ff ffc8 	bl	802db20 <__swhatbuf_r>
 802db90:	9900      	ldr	r1, [sp, #0]
 802db92:	4605      	mov	r5, r0
 802db94:	4630      	mov	r0, r6
 802db96:	f7ff f81b 	bl	802cbd0 <_malloc_r>
 802db9a:	b948      	cbnz	r0, 802dbb0 <__smakebuf_r+0x44>
 802db9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802dba0:	059a      	lsls	r2, r3, #22
 802dba2:	d4ef      	bmi.n	802db84 <__smakebuf_r+0x18>
 802dba4:	f023 0303 	bic.w	r3, r3, #3
 802dba8:	f043 0302 	orr.w	r3, r3, #2
 802dbac:	81a3      	strh	r3, [r4, #12]
 802dbae:	e7e3      	b.n	802db78 <__smakebuf_r+0xc>
 802dbb0:	89a3      	ldrh	r3, [r4, #12]
 802dbb2:	6020      	str	r0, [r4, #0]
 802dbb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802dbb8:	81a3      	strh	r3, [r4, #12]
 802dbba:	9b00      	ldr	r3, [sp, #0]
 802dbbc:	6163      	str	r3, [r4, #20]
 802dbbe:	9b01      	ldr	r3, [sp, #4]
 802dbc0:	6120      	str	r0, [r4, #16]
 802dbc2:	b15b      	cbz	r3, 802dbdc <__smakebuf_r+0x70>
 802dbc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802dbc8:	4630      	mov	r0, r6
 802dbca:	f000 f81d 	bl	802dc08 <_isatty_r>
 802dbce:	b128      	cbz	r0, 802dbdc <__smakebuf_r+0x70>
 802dbd0:	89a3      	ldrh	r3, [r4, #12]
 802dbd2:	f023 0303 	bic.w	r3, r3, #3
 802dbd6:	f043 0301 	orr.w	r3, r3, #1
 802dbda:	81a3      	strh	r3, [r4, #12]
 802dbdc:	89a3      	ldrh	r3, [r4, #12]
 802dbde:	431d      	orrs	r5, r3
 802dbe0:	81a5      	strh	r5, [r4, #12]
 802dbe2:	e7cf      	b.n	802db84 <__smakebuf_r+0x18>

0802dbe4 <_fstat_r>:
 802dbe4:	b538      	push	{r3, r4, r5, lr}
 802dbe6:	4d07      	ldr	r5, [pc, #28]	; (802dc04 <_fstat_r+0x20>)
 802dbe8:	2300      	movs	r3, #0
 802dbea:	4604      	mov	r4, r0
 802dbec:	4608      	mov	r0, r1
 802dbee:	4611      	mov	r1, r2
 802dbf0:	602b      	str	r3, [r5, #0]
 802dbf2:	f7d4 f8f0 	bl	8001dd6 <_fstat>
 802dbf6:	1c43      	adds	r3, r0, #1
 802dbf8:	d102      	bne.n	802dc00 <_fstat_r+0x1c>
 802dbfa:	682b      	ldr	r3, [r5, #0]
 802dbfc:	b103      	cbz	r3, 802dc00 <_fstat_r+0x1c>
 802dbfe:	6023      	str	r3, [r4, #0]
 802dc00:	bd38      	pop	{r3, r4, r5, pc}
 802dc02:	bf00      	nop
 802dc04:	2000b9e0 	.word	0x2000b9e0

0802dc08 <_isatty_r>:
 802dc08:	b538      	push	{r3, r4, r5, lr}
 802dc0a:	4d06      	ldr	r5, [pc, #24]	; (802dc24 <_isatty_r+0x1c>)
 802dc0c:	2300      	movs	r3, #0
 802dc0e:	4604      	mov	r4, r0
 802dc10:	4608      	mov	r0, r1
 802dc12:	602b      	str	r3, [r5, #0]
 802dc14:	f7d4 f8ef 	bl	8001df6 <_isatty>
 802dc18:	1c43      	adds	r3, r0, #1
 802dc1a:	d102      	bne.n	802dc22 <_isatty_r+0x1a>
 802dc1c:	682b      	ldr	r3, [r5, #0]
 802dc1e:	b103      	cbz	r3, 802dc22 <_isatty_r+0x1a>
 802dc20:	6023      	str	r3, [r4, #0]
 802dc22:	bd38      	pop	{r3, r4, r5, pc}
 802dc24:	2000b9e0 	.word	0x2000b9e0

0802dc28 <_init>:
 802dc28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802dc2a:	bf00      	nop
 802dc2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802dc2e:	bc08      	pop	{r3}
 802dc30:	469e      	mov	lr, r3
 802dc32:	4770      	bx	lr

0802dc34 <_fini>:
 802dc34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802dc36:	bf00      	nop
 802dc38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802dc3a:	bc08      	pop	{r3}
 802dc3c:	469e      	mov	lr, r3
 802dc3e:	4770      	bx	lr
