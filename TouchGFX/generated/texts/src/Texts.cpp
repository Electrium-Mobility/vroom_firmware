/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */

#include <stdarg.h>
#include <touchgfx/TextProvider.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/TypedText.hpp>
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
    va_end(pArg);
    return width;
}

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
    va_end(pArg);
    return width;
}

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
    {
        substituteGlyphs();
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
}

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
    va_list pArg;
    va_start(pArg, format);
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
    va_end(pArg);
}

// Default TypedTextDatabase
extern const touchgfx::TypedText::TypedTextData* const typedTextDatabaseArray[];

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::Unicode::UnicodeChar texts_all_languages[] TEXT_LOCATION_FLASH_ATTRIBUTE = {
    0x44, 0x72, 0x6f, 0x73, 0x73, 0x65, 0x6c, 0x65, 0x6d, 0x70, 0x66, 0x69, 0x6e, 0x64, 0x6c, 0x69, 0x63, 0x68, 0x6b, 0x65, 0x69, 0x74, 0x20, 0x45, 0x69, 0x6e, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x0, // @0 "Drosselempfindlichkeit Einstellen"
    0x41, 0x64, 0x6d, 0x69, 0x6e, 0x20, 0x7a, 0x75, 0x20, 0x42, 0x65, 0x61, 0x72, 0x62, 0x65, 0x69, 0x74, 0x65, 0x6e, 0x20, 0x69, 0x73, 0x74, 0x20, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x74, 0x65, 0x6e, 0x0, // @34 "Admin zu Bearbeiten ist Verboten"
    0x53, 0x65, 0x74, 0x20, 0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x20, 0x43, 0x41, 0x4e, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x20, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x0, // @67 "Set Motor CAN Transmit Frequency"
    0x42, 0x72, 0x65, 0x6d, 0x73, 0x65, 0x6d, 0x70, 0x66, 0x69, 0x6e, 0x64, 0x6c, 0x69, 0x63, 0x68, 0x6b, 0x65, 0x69, 0x74, 0x20, 0x45, 0x69, 0x6e, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x0, // @100 "Bremsempfindlichkeit Einstellen"
    0x41, 0x64, 0x6d, 0x69, 0x6e, 0x20, 0x7a, 0x75, 0x20, 0x45, 0x6e, 0x66, 0x65, 0x72, 0x6e, 0x65, 0x6e, 0x20, 0x69, 0x73, 0x74, 0x20, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x74, 0x65, 0x6e, 0x0, // @132 "Admin zu Enfernen ist Verboten"
    0x55, 0x6e, 0x67, 0xfc, 0x6c, 0x74, 0x69, 0x67, 0x65, 0x20, 0x41, 0x6e, 0x6d, 0x65, 0x6c, 0x64, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x6e, 0x0, // @163 "Ung?ltige Anmeldeinformationen"
    0x43, 0x41, 0x4e, 0x20, 0x54, 0x58, 0x20, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x7a, 0x20, 0x45, 0x69, 0x6e, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x0, // @194 "CAN TX Frequenz Einstellen"
    0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x20, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x20, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x0, // @221 "Calibrate Throttle Sensor"
    0x44, 0x72, 0x6f, 0x73, 0x73, 0x65, 0x6c, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x20, 0x4b, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x69, 0x65, 0x72, 0x65, 0x6e, 0x0, // @247 "Drosselsensor Kalibrieren"
    0x42, 0x65, 0x6e, 0x75, 0x74, 0x7a, 0x65, 0x72, 0x20, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x65, 0x72, 0x74, 0x20, 0x53, 0x63, 0x68, 0x6f, 0x6e, 0x0, // @273 "Benutzer Existiert Schon"
    0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x20, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x0, // @298 "Deleting Admin Forbidden"
    0x45, 0x64, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x20, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x0, // @323 "Editting Admin Forbidden"
    0x53, 0x65, 0x74, 0x20, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x20, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x0, // @348 "Set Throttle Sensitivity"
    0x42, 0x72, 0x65, 0x6d, 0x73, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x20, 0x4b, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x69, 0x65, 0x72, 0x65, 0x6e, 0x0, // @373 "Bremssensor Kalibrieren"
    0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x20, 0x42, 0x72, 0x61, 0x6b, 0x65, 0x20, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x0, // @397 "Calibrate Brake Sensor"
    0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x77, 0x65, 0x72, 0x74, 0x20, 0x45, 0x69, 0x6e, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x0, // @420 "Analogwert Einstellen"
    0x53, 0x65, 0x74, 0x20, 0x42, 0x72, 0x61, 0x6b, 0x65, 0x20, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x0, // @442 "Set Brake Sensitivity"
    0x42, 0x65, 0x6e, 0x75, 0x74, 0x7a, 0x65, 0x72, 0x20, 0x42, 0x65, 0x61, 0x72, 0x62, 0x65, 0x69, 0x74, 0x65, 0x6e, 0x0, // @464 "Benutzer Bearbeiten"
    0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x0, // @484 "Invalid Credentials"
    0x55, 0x73, 0x65, 0x72, 0x20, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x0, // @504 "User Already Exists"
    0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x20, 0x49, 0x6e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3a, 0x20, 0x0, // @524 "Voltage In       : "
    0x42, 0x65, 0x6e, 0x75, 0x74, 0x7a, 0x65, 0x72, 0x20, 0x45, 0x72, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x0, // @544 "Benutzer Erstellen"
    0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x49, 0x6e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3a, 0x0, // @563 "Current In       :"
    0x46, 0x75, 0x6e, 0x6b, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x75, 0x73, 0x66, 0xfc, 0x68, 0x72, 0x65, 0x6e, 0x0, // @582 "Funktion Ausf?hren"
    0x53, 0x70, 0x72, 0x61, 0x63, 0x68, 0x65, 0x20, 0x45, 0x69, 0x6e, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x0, // @601 "Sprache Einstellen"
    0x46, 0x45, 0x54, 0x20, 0x54, 0x65, 0x6d, 0x70, 0x2e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3a, 0x0, // @620 "FET Temp.       :"
    0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x20, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x0, // @638 "Motor Diagnostics"
    0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x20, 0x2, 0x0, // @656 "Password: <>"
    0x42, 0x65, 0x6e, 0x75, 0x74, 0x7a, 0x65, 0x72, 0x20, 0x4c, 0xf6, 0x73, 0x63, 0x68, 0x65, 0x6e, 0x0, // @668 "Benutzer L?schen"
    0x42, 0x65, 0x6e, 0x75, 0x74, 0x7a, 0x65, 0x72, 0x3a, 0x20, 0x2, 0x0, // @685 "Benutzer: <>"
    0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x20, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x0, // @697 "Execute Function"
    0x4b, 0x65, 0x6e, 0x6e, 0x77, 0x6f, 0x72, 0x74, 0x3a, 0x20, 0x2, 0x0, // @714 "Kennwort: <>"
    0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x20, 0x54, 0x65, 0x6d, 0x70, 0x2e, 0x20, 0x20, 0x20, 0x20, 0x3a, 0x0, // @726 "Motor Temp.    :"
    0x53, 0x65, 0x74, 0x20, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x20, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x0, // @743 "Set Analog Value"
    0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x4e, 0x65, 0x77, 0x20, 0x55, 0x73, 0x65, 0x72, 0x0, // @760 "Create New User"
    0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x0, // @776 "Select Language"
    0x53, 0x70, 0x72, 0x61, 0x63, 0x68, 0x61, 0x75, 0x73, 0x77, 0x61, 0x68, 0x6c, 0x0, // @792 "Sprachauswahl"
    0x55, 0x73, 0x65, 0x72, 0x3a, 0x20, 0x2, 0x0, // @806 "User: <>"
    0x56, 0x69, 0x65, 0x77, 0x20, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x0, // @814 "View Password"
    0x53, 0x65, 0x74, 0x20, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x0, // @828 "Set Language"
    0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x55, 0x73, 0x65, 0x72, 0x0, // @841 "Delete User"
    0x45, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x74, 0x0, // @853 "Eingestellt"
    0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x20, 0x55, 0x73, 0x65, 0x72, 0x0, // @865 "Remove User"
    0x2, 0x20, 0xb0, 0x43, 0x0, // @877 "<> ?C"
    0x48, 0x69, 0x67, 0x68, 0x20, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x0, // @882 "High Point"
    0x48, 0x69, 0x6e, 0x7a, 0x75, 0x66, 0xfc, 0x67, 0x65, 0x6e, 0x0, // @893 "Hinzuf?gen"
    0x53, 0x63, 0x68, 0x6c, 0x69, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x0, // @904 "Schliessen"
    0x2, 0x20, 0x41, 0x0, // @915 "<> A"
    0x2, 0x20, 0x56, 0x0, // @919 "<> V"
    0x45, 0x64, 0x69, 0x74, 0x20, 0x55, 0x73, 0x65, 0x72, 0x0, // @923 "Edit User"
    0x45, 0x69, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x0, // @933 "Eintreten"
    0x45, 0x6e, 0x74, 0x66, 0x65, 0x72, 0x6e, 0x65, 0x6e, 0x0, // @943 "Entfernen"
    0x48, 0x6f, 0x63, 0x68, 0x70, 0x75, 0x6e, 0x6b, 0x74, 0x0, // @953 "Hochpunkt"
    0x4c, 0x6f, 0x77, 0x20, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x0, // @963 "Low Point"
    0x54, 0x69, 0x65, 0x66, 0x70, 0x75, 0x6e, 0x6b, 0x74, 0x0, // @973 "Tiefpunkt"
    0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x53, 0x65, 0x74, 0x0, // @983 "Value Set"
    0x41, 0x64, 0x64, 0x20, 0x55, 0x73, 0x65, 0x72, 0x0, // @993 "Add User"
    0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x63, 0x68, 0x0, // @1002 "Englisch"
    0x46, 0x75, 0x6e, 0x6b, 0x74, 0x69, 0x6f, 0x6e, 0x0, // @1011 "Funktion"
    0x42, 0x65, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x0, // @1020 "Beenden"
    0x44, 0x65, 0x75, 0x74, 0x73, 0x63, 0x68, 0x0, // @1028 "Deutsch"
    0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x0, // @1036 "English"
    0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x0, // @1044 "Cancel"
    0x47, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x0, // @1051 "German"
    0x43, 0x6c, 0x6f, 0x73, 0x65, 0x0, // @1058 "Close"
    0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x0, // @1064 "Login"
    0x57, 0x65, 0x72, 0x74, 0x0, // @1070 "Wert"
    0x31, 0x32, 0x33, 0x0, // @1075 "123"
    0x41, 0x42, 0x43, 0x0, // @1079 "ABC"
    0x30, 0x0 // @1083 "0"
};

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const uint32_t indicesGb[] TEXT_LOCATION_FLASH_ATTRIBUTE;

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const uint32_t indicesDe[] TEXT_LOCATION_FLASH_ATTRIBUTE;

// Array holding dynamically installed languages
struct TranslationHeader
{
    uint32_t offset_to_texts;
    uint32_t offset_to_indices;
    uint32_t offset_to_typedtext;
};
static const TranslationHeader* languagesArray[2] = { 0 };

// Compiled and linked in languages
static const uint32_t* const staticLanguageIndices[] = {
    indicesGb,
    indicesDe
};

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 2)
    {
        if (languagesArray[id] != 0)
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
    }
}

void touchgfx::Texts::setTranslation(touchgfx::LanguageId id, const void* translation)
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
}
