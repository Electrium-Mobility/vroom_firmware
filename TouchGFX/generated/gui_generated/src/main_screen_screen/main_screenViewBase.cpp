/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/main_screen_screen/main_screenViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

main_screenViewBase::main_screenViewBase() :
    flexButtonCallback(this, &main_screenViewBase::flexButtonCallbackHandler)
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
    
    __background.setPosition(0, 0, 800, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    image1.setXY(0, 0);
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_800X480_LINES_ID));
    add(image1);

    swipe_container.setXY(0, 0);
    swipe_container.setPageIndicatorBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SWIPECONTAINER_MEDIUM_OFF_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SWIPECONTAINER_MEDIUM_ON_ACTIVE_ID));
    swipe_container.setPageIndicatorXY(0, 0);
    swipe_container.setSwipeCutoff(50);
    swipe_container.setEndSwipeElasticWidth(50);

    motor_page.setWidth(800);
    motor_page.setHeight(480);
    button1.setXY(280, 215);
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_PRESSED_ID));
    motor_page.add(button1);

    swipe_container.add(motor_page);

    command_page.setWidth(800);
    command_page.setHeight(480);
    command_box.setPosition(60, 0, 330, 70);
    command_box.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    command_box.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    command_box.setBorderSize(3);
    command_page.add(command_box);

    command_box_1.setPosition(495, 76, 305, 149);
    command_box_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    command_box_1.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    command_box_1.setBorderSize(3);
    command_page.add(command_box_1);

    command_box_2.setPosition(495, 356, 305, 70);
    command_box_2.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    command_box_2.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    command_box_2.setBorderSize(3);
    command_page.add(command_box_2);

    keypad_image.setXY(71, 0);
    keypad_image.setBitmap(touchgfx::Bitmap(BITMAP_KEYPAD_ID));
    command_page.add(keypad_image);

    textArea1.setXY(520, -1);
    textArea1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textArea1.setLinespacing(0);
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_W5VS));
    command_page.add(textArea1);

    textArea2.setXY(565, 284);
    textArea2.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textArea2.setLinespacing(0);
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_S3TK));
    command_page.add(textArea2);

    value_button.setBoxWithBorderPosition(0, 0, 305, 70);
    value_button.setBorderSize(5);
    value_button.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    value_button.setAlpha(0);
    value_button.setAction(flexButtonCallback);
    value_button.setPosition(495, 356, 305, 70);
    command_page.add(value_button);

    function_button.setBoxWithBorderPosition(0, 0, 305, 70);
    function_button.setBorderSize(5);
    function_button.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    function_button.setAlpha(0);
    function_button.setAction(flexButtonCallback);
    function_button.setPosition(495, 138, 305, 70);
    command_page.add(function_button);

    delete_button.setBitmaps(Bitmap(BITMAP_KEY_2_ID), Bitmap(BITMAP_KEY_2_PRESSED_ID));
    delete_button.setBitmapXY(0, 0);
    delete_button.setAction(flexButtonCallback);
    delete_button.setPosition(400, 76, 89, 192);
    command_page.add(delete_button);

    enter_button.setBitmaps(Bitmap(BITMAP_KEY_2_ID), Bitmap(BITMAP_KEY_2_PRESSED_ID));
    enter_button.setBitmapXY(0, 0);
    enter_button.setAction(flexButtonCallback);
    enter_button.setPosition(400, 288, 89, 192);
    command_page.add(enter_button);

    function_text.setPosition(495, 76, 305, 149);
    function_text.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    function_text.setLinespacing(0);
    Unicode::snprintf(function_textBuffer, FUNCTION_TEXT_SIZE, "%s", touchgfx::TypedText(T_FUNCTION_TEXT).getText());
    function_text.setWildcard(function_textBuffer);
    function_text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_PLEI));
    command_page.add(function_text);

    value_text.setPosition(495, 356, 305, 70);
    value_text.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    value_text.setLinespacing(0);
    Unicode::snprintf(value_textBuffer, VALUE_TEXT_SIZE, "%s", touchgfx::TypedText(T_VALUE_TEXT).getText());
    value_text.setWildcard(value_textBuffer);
    value_text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HU9G));
    command_page.add(value_text);

    swipe_container.add(command_page);

    main_page_1.setWidth(800);
    main_page_1.setHeight(480);
    battery_circle_1.setXY(305, 145);
    battery_circle_1.setProgressIndicatorPosition(0, 0, 190, 190);
    battery_circle_1.setRange(0, 100);
    battery_circle_1.setCenter(95, 95);
    battery_circle_1.setRadius(85);
    battery_circle_1.setLineWidth(20);
    battery_circle_1.setStartEndAngle(0, 360);
    battery_circle_1.setCapPrecision(90);
    battery_circle_1.setBackground(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_CIRCLEPROGRESS_BACKGROUNDS_LARGE_ID));
    battery_circle_1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    battery_circle_1.setPainter(battery_circle_1Painter);
    battery_circle_1.setValue(60);
    main_page_1.add(battery_circle_1);

    battery_text_1.setXY(325, 165);
    battery_text_1.setProgressIndicatorPosition(12, 50, 130, 60);
    battery_text_1.setRange(0, 100);
    battery_text_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    battery_text_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_C37D));
    battery_text_1.setBackground(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_TEXTPROGRESS_BACKGROUNDS_ROUND_NEUTRAL_ID));
    battery_text_1.setValue(60);
    main_page_1.add(battery_text_1);

    swipe_container.add(main_page_1);

    bms_page.setWidth(800);
    bms_page.setHeight(480);
    button2.setXY(280, 215);
    button2.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_PRESSED_ID));
    bms_page.add(button2);

    swipe_container.add(bms_page);

    swipe_container.setSelectedPage(1);
    add(swipe_container);
}

main_screenViewBase::~main_screenViewBase()
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void main_screenViewBase::setupScreen()
{

}

void main_screenViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &value_button)
    {
        //value_interaction
        //When value_button clicked call virtual function
        //Call check_value
        check_value();
    }
    if (&src == &function_button)
    {
        //function_interaction
        //When function_button clicked call virtual function
        //Call check_function
        check_function();
    }
    if (&src == &delete_button)
    {
        //delete_interaction
        //When delete_button clicked call virtual function
        //Call delete_char
        delete_char();
    }
    if (&src == &enter_button)
    {
        //enter_interaction
        //When enter_button clicked call virtual function
        //Call enter_command
        enter_command();
    }
}
