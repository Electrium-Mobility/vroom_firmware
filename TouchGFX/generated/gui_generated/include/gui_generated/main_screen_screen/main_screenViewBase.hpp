/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef MAIN_SCREENVIEWBASE_HPP
#define MAIN_SCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/main_screen_screen/main_screenPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/containers/SwipeContainer.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/containers/scrollers/ScrollWheelWithSelectionStyle.hpp>
#include <gui/containers/function_element.hpp>
#include <gui/containers/function_center.hpp>
#include <touchgfx/widgets/BoxWithBorder.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>

class main_screenViewBase : public touchgfx::View<main_screenPresenter>
{
public:
    main_screenViewBase();
    virtual ~main_screenViewBase();
    virtual void setupScreen();

    virtual void function_wheelUpdateItem(function_element& item, int16_t itemIndex)
    {
        // Override and implement this function in main_screen
    }

    virtual void function_wheelUpdateCenterItem(function_center& item, int16_t itemIndex)
    {
        // Override and implement this function in main_screen
    }
    virtual void handleTickEvent();

    /*
     * Custom Actions
     */
    virtual void to_user_screen();

    /*
     * Virtual Action Handlers
     */
    virtual void execute_function_pressed()
    {
        // Override and implement this function in main_screen
    }
    virtual void delete_char()
    {
        // Override and implement this function in main_screen
    }
    virtual void enter_command()
    {
        // Override and implement this function in main_screen
    }
    virtual void motorDataUpdate()
    {
        // Override and implement this function in main_screen
    }
    virtual void cancel_command()
    {
        // Override and implement this function in main_screen
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image background;
    touchgfx::SwipeContainer swipe_container;
    touchgfx::Container command_page;
    touchgfx::ScrollWheelWithSelectionStyle function_wheel;
    touchgfx::DrawableListItems<function_element, 4> function_wheelListItems;
    touchgfx::DrawableListItems<function_center, 2> function_wheelSelectedListItems;
    touchgfx::BoxWithBorder value_set_background;
    touchgfx::BoxWithBorder command_box;
    touchgfx::BoxWithBorder command_box_2;
    touchgfx::Image keypad_image;
    touchgfx::TextArea function_title;
    touchgfx::ImageButtonStyle< touchgfx::ClickButtonTrigger >  delete_button;
    touchgfx::TextArea value_title;
    touchgfx::ImageButtonStyle< touchgfx::ClickButtonTrigger >  cancel_button;
    touchgfx::ImageButtonStyle< touchgfx::ClickButtonTrigger >  enter_button;
    touchgfx::TextAreaWithOneWildcard value_text;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  function_select_button;
    touchgfx::TextArea button_text;
    touchgfx::Box dummy_background_center;
    touchgfx::TextArea dummy_function_name_center;
    touchgfx::Box dummy_background_1;
    touchgfx::Box dummy_background_2;
    touchgfx::TextArea dummy_function_name_1;
    touchgfx::TextArea dummy_function_name_2;
    touchgfx::Container motor_data;
    touchgfx::TextArea diagnostics_title;
    touchgfx::TextAreaWithOneWildcard fet_temp_wild;
    touchgfx::TextAreaWithOneWildcard motor_temp_wild;
    touchgfx::TextAreaWithOneWildcard curr_in_wild;
    touchgfx::TextAreaWithOneWildcard volt_in_wild;
    touchgfx::TextArea volt_in;
    touchgfx::TextArea curr_in;
    touchgfx::TextArea motor_temp;
    touchgfx::TextArea fet_temp;

    /*
     * Wildcard Buffers
     */
    static const uint16_t VALUE_TEXT_SIZE = 9;
    touchgfx::Unicode::UnicodeChar value_textBuffer[VALUE_TEXT_SIZE];
    static const uint16_t FET_TEMP_WILD_SIZE = 3;
    touchgfx::Unicode::UnicodeChar fet_temp_wildBuffer[FET_TEMP_WILD_SIZE];
    static const uint16_t MOTOR_TEMP_WILD_SIZE = 3;
    touchgfx::Unicode::UnicodeChar motor_temp_wildBuffer[MOTOR_TEMP_WILD_SIZE];
    static const uint16_t CURR_IN_WILD_SIZE = 3;
    touchgfx::Unicode::UnicodeChar curr_in_wildBuffer[CURR_IN_WILD_SIZE];
    static const uint16_t VOLT_IN_WILD_SIZE = 3;
    touchgfx::Unicode::UnicodeChar volt_in_wildBuffer[VOLT_IN_WILD_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<main_screenViewBase, touchgfx::DrawableListItemsInterface*, int16_t, int16_t> updateItemCallback;
    touchgfx::Callback<main_screenViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex);
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

    /*
     * Tick Counter Declarations
     */
    static const uint32_t TICK_MOTORDATAUPDATE_INTERVAL = 20;
    uint32_t frameCountMotorDataUpdateInterval;

};

#endif // MAIN_SCREENVIEWBASE_HPP
